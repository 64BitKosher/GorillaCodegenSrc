// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: UnityEngine.InputSystem.Utilities.CallbackArray`1
#include "UnityEngine/InputSystem/Utilities/CallbackArray_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventTrace
  class InputEventTrace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::LowLevel::InputEventTrace);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputEventTrace*, "UnityEngine.InputSystem.LowLevel", "InputEventTrace");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputEventTrace
  // [TokenAttribute] Offset: FFFFFFFF
  class InputEventTrace : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputEventTrace::Enumerator
    class Enumerator;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputEventTrace::FileFlags
    struct FileFlags;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputEventTrace::ReplayController
    class ReplayController;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo
    struct DeviceInfo;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputEventTrace/DeviceInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeviceInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Int32 m_DeviceId
      // Size: 0x4
      // Offset: 0x0
      int m_DeviceId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: m_DeviceId and: m_Layout
      char __padding0[0x4] = {};
      // System.String m_Layout
      // Size: 0x8
      // Offset: 0x8
      ::StringW m_Layout;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // UnityEngine.InputSystem.Utilities.FourCC m_StateFormat
      // Size: 0x4
      // Offset: 0x10
      ::UnityEngine::InputSystem::Utilities::FourCC m_StateFormat;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::Utilities::FourCC) == 0x4);
      // System.Int32 m_StateSizeInBytes
      // Size: 0x4
      // Offset: 0x14
      int m_StateSizeInBytes;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.String m_FullLayoutJson
      // Size: 0x8
      // Offset: 0x18
      ::StringW m_FullLayoutJson;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: DeviceInfo
      constexpr DeviceInfo(int m_DeviceId_ = {}, ::StringW m_Layout_ = {}, ::UnityEngine::InputSystem::Utilities::FourCC m_StateFormat_ = {}, int m_StateSizeInBytes_ = {}, ::StringW m_FullLayoutJson_ = {}) noexcept : m_DeviceId{m_DeviceId_}, m_Layout{m_Layout_}, m_StateFormat{m_StateFormat_}, m_StateSizeInBytes{m_StateSizeInBytes_}, m_FullLayoutJson{m_FullLayoutJson_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Int32 m_DeviceId
      [[deprecated("Use field access instead!")]] int& dyn_m_DeviceId();
      // Get instance field reference: System.String m_Layout
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Layout();
      // Get instance field reference: UnityEngine.InputSystem.Utilities.FourCC m_StateFormat
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::FourCC& dyn_m_StateFormat();
      // Get instance field reference: System.Int32 m_StateSizeInBytes
      [[deprecated("Use field access instead!")]] int& dyn_m_StateSizeInBytes();
      // Get instance field reference: System.String m_FullLayoutJson
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_FullLayoutJson();
      // public System.Int32 get_deviceId()
      // Offset: 0x5152B48
      int get_deviceId();
      // public System.Void set_deviceId(System.Int32 value)
      // Offset: 0x5152B50
      void set_deviceId(int value);
      // public System.String get_layout()
      // Offset: 0x5152B58
      ::StringW get_layout();
      // public System.Void set_layout(System.String value)
      // Offset: 0x5152B60
      void set_layout(::StringW value);
      // public UnityEngine.InputSystem.Utilities.FourCC get_stateFormat()
      // Offset: 0x5152B68
      ::UnityEngine::InputSystem::Utilities::FourCC get_stateFormat();
      // public System.Void set_stateFormat(UnityEngine.InputSystem.Utilities.FourCC value)
      // Offset: 0x5152B70
      void set_stateFormat(::UnityEngine::InputSystem::Utilities::FourCC value);
      // public System.Int32 get_stateSizeInBytes()
      // Offset: 0x5152B78
      int get_stateSizeInBytes();
      // public System.Void set_stateSizeInBytes(System.Int32 value)
      // Offset: 0x5152B80
      void set_stateSizeInBytes(int value);
    }; // UnityEngine.InputSystem.LowLevel.InputEventTrace/DeviceInfo
    #pragma pack(pop)
    static check_size<sizeof(InputEventTrace::DeviceInfo), 24 + sizeof(::StringW)> __UnityEngine_InputSystem_LowLevel_InputEventTrace_DeviceInfoSizeCheck;
    static_assert(sizeof(InputEventTrace::DeviceInfo) == 0x20);
    public:
    // private System.Int32 m_ChangeCounter
    // Size: 0x4
    // Offset: 0x10
    int m_ChangeCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_Enabled
    // Size: 0x1
    // Offset: 0x14
    bool m_Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Func`3<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice,System.Boolean> m_OnFilterEvent
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>* m_OnFilterEvent;
    // Field size check
    static_assert(sizeof(::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>*) == 0x8);
    // private System.Int32 m_DeviceId
    // Size: 0x4
    // Offset: 0x20
    int m_DeviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`1<UnityEngine.InputSystem.LowLevel.InputEventPtr>> m_EventListeners
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*> m_EventListeners;
    // private System.Int64 m_EventBufferSize
    // Size: 0x8
    // Offset: 0x78
    int64_t m_EventBufferSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_MaxEventBufferSize
    // Size: 0x8
    // Offset: 0x80
    int64_t m_MaxEventBufferSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_GrowIncrementSize
    // Size: 0x8
    // Offset: 0x88
    int64_t m_GrowIncrementSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_EventCount
    // Size: 0x8
    // Offset: 0x90
    int64_t m_EventCount;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_EventSizeInBytes
    // Size: 0x8
    // Offset: 0x98
    int64_t m_EventSizeInBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.UInt64 m_EventBufferStorage
    // Size: 0x8
    // Offset: 0xA0
    uint64_t m_EventBufferStorage;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 m_EventBufferHeadStorage
    // Size: 0x8
    // Offset: 0xA8
    uint64_t m_EventBufferHeadStorage;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 m_EventBufferTailStorage
    // Size: 0x8
    // Offset: 0xB0
    uint64_t m_EventBufferTailStorage;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Boolean m_HasWrapped
    // Size: 0x1
    // Offset: 0xB8
    bool m_HasWrapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RecordFrameMarkers
    // Size: 0x1
    // Offset: 0xB9
    bool m_RecordFrameMarkers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.InputSystem.LowLevel.InputEventTrace/DeviceInfo[] m_DeviceInfos
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo> m_DeviceInfos;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>
    operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*>(this);
    }
    // static field const value: static private System.Int32 kDefaultBufferSize
    static constexpr const int kDefaultBufferSize = 1048576;
    // Get static field: static private System.Int32 kDefaultBufferSize
    static int _get_kDefaultBufferSize();
    // Set static field: static private System.Int32 kDefaultBufferSize
    static void _set_kDefaultBufferSize(int value);
    // Get static field: static private System.Int32 kFileVersion
    static int _get_kFileVersion();
    // Set static field: static private System.Int32 kFileVersion
    static void _set_kFileVersion(int value);
    // Get instance field reference: private System.Int32 m_ChangeCounter
    [[deprecated("Use field access instead!")]] int& dyn_m_ChangeCounter();
    // Get instance field reference: private System.Boolean m_Enabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_Enabled();
    // Get instance field reference: private System.Func`3<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice,System.Boolean> m_OnFilterEvent
    [[deprecated("Use field access instead!")]] ::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>*& dyn_m_OnFilterEvent();
    // Get instance field reference: private System.Int32 m_DeviceId
    [[deprecated("Use field access instead!")]] int& dyn_m_DeviceId();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.CallbackArray`1<System.Action`1<UnityEngine.InputSystem.LowLevel.InputEventPtr>> m_EventListeners
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::CallbackArray_1<::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*>& dyn_m_EventListeners();
    // Get instance field reference: private System.Int64 m_EventBufferSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_EventBufferSize();
    // Get instance field reference: private System.Int64 m_MaxEventBufferSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_MaxEventBufferSize();
    // Get instance field reference: private System.Int64 m_GrowIncrementSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_GrowIncrementSize();
    // Get instance field reference: private System.Int64 m_EventCount
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_EventCount();
    // Get instance field reference: private System.Int64 m_EventSizeInBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_EventSizeInBytes();
    // Get instance field reference: private System.UInt64 m_EventBufferStorage
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_EventBufferStorage();
    // Get instance field reference: private System.UInt64 m_EventBufferHeadStorage
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_EventBufferHeadStorage();
    // Get instance field reference: private System.UInt64 m_EventBufferTailStorage
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_EventBufferTailStorage();
    // Get instance field reference: private System.Boolean m_HasWrapped
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasWrapped();
    // Get instance field reference: private System.Boolean m_RecordFrameMarkers
    [[deprecated("Use field access instead!")]] bool& dyn_m_RecordFrameMarkers();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventTrace/DeviceInfo[] m_DeviceInfos
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo>& dyn_m_DeviceInfos();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_FrameMarkerEvent()
    // Offset: 0x514EB54
    static ::UnityEngine::InputSystem::Utilities::FourCC get_FrameMarkerEvent();
    // public System.Int32 get_deviceId()
    // Offset: 0x514EB84
    int get_deviceId();
    // public System.Void set_deviceId(System.Int32 value)
    // Offset: 0x514EB8C
    void set_deviceId(int value);
    // public System.Boolean get_enabled()
    // Offset: 0x514EB94
    bool get_enabled();
    // public System.Boolean get_recordFrameMarkers()
    // Offset: 0x514EB9C
    bool get_recordFrameMarkers();
    // public System.Void set_recordFrameMarkers(System.Boolean value)
    // Offset: 0x514EBA4
    void set_recordFrameMarkers(bool value);
    // public System.Int64 get_eventCount()
    // Offset: 0x514EC8C
    int64_t get_eventCount();
    // public System.Int64 get_totalEventSizeInBytes()
    // Offset: 0x514EC94
    int64_t get_totalEventSizeInBytes();
    // public System.Int64 get_allocatedSizeInBytes()
    // Offset: 0x514EC9C
    int64_t get_allocatedSizeInBytes();
    // public System.Int64 get_maxSizeInBytes()
    // Offset: 0x514ECBC
    int64_t get_maxSizeInBytes();
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.LowLevel.InputEventTrace/DeviceInfo> get_deviceInfos()
    // Offset: 0x514ECC4
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo> get_deviceInfos();
    // public System.Func`3<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice,System.Boolean> get_onFilterEvent()
    // Offset: 0x514ED0C
    ::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>* get_onFilterEvent();
    // public System.Void set_onFilterEvent(System.Func`3<UnityEngine.InputSystem.LowLevel.InputEventPtr,UnityEngine.InputSystem.InputDevice,System.Boolean> value)
    // Offset: 0x514ED14
    void set_onFilterEvent(::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>* value);
    // public System.Void add_onEvent(System.Action`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> value)
    // Offset: 0x514ED1C
    void add_onEvent(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* value);
    // public System.Void remove_onEvent(System.Action`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> value)
    // Offset: 0x514ED74
    void remove_onEvent(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* value);
    // public System.Void .ctor(UnityEngine.InputSystem.InputDevice device, System.Int64 bufferSizeInBytes, System.Boolean growBuffer, System.Int64 maxBufferSizeInBytes, System.Int64 growIncrementSizeInBytes)
    // Offset: 0x514EDCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputEventTrace* New_ctor(::UnityEngine::InputSystem::InputDevice* device, int64_t bufferSizeInBytes, bool growBuffer, int64_t maxBufferSizeInBytes, int64_t growIncrementSizeInBytes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputEventTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputEventTrace*, creationType>(device, bufferSizeInBytes, growBuffer, maxBufferSizeInBytes, growIncrementSizeInBytes)));
    }
    // public System.Void .ctor(System.Int64 bufferSizeInBytes, System.Boolean growBuffer, System.Int64 maxBufferSizeInBytes, System.Int64 growIncrementSizeInBytes)
    // Offset: 0x514EEA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputEventTrace* New_ctor(int64_t bufferSizeInBytes, bool growBuffer, int64_t maxBufferSizeInBytes, int64_t growIncrementSizeInBytes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputEventTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputEventTrace*, creationType>(bufferSizeInBytes, growBuffer, maxBufferSizeInBytes, growIncrementSizeInBytes)));
    }
    // public System.Void WriteTo(System.String filePath)
    // Offset: 0x514EF10
    void WriteTo(::StringW filePath);
    // public System.Void WriteTo(System.IO.Stream stream)
    // Offset: 0x514F0DC
    void WriteTo(::System::IO::Stream* stream);
    // public System.Void ReadFrom(System.String filePath)
    // Offset: 0x514F838
    void ReadFrom(::StringW filePath);
    // public System.Void ReadFrom(System.IO.Stream stream)
    // Offset: 0x514FA04
    void ReadFrom(::System::IO::Stream* stream);
    // static public UnityEngine.InputSystem.LowLevel.InputEventTrace LoadFrom(System.String filePath)
    // Offset: 0x5150148
    static ::UnityEngine::InputSystem::LowLevel::InputEventTrace* LoadFrom(::StringW filePath);
    // static public UnityEngine.InputSystem.LowLevel.InputEventTrace LoadFrom(System.IO.Stream stream)
    // Offset: 0x5150348
    static ::UnityEngine::InputSystem::LowLevel::InputEventTrace* LoadFrom(::System::IO::Stream* stream);
    // public UnityEngine.InputSystem.LowLevel.InputEventTrace/ReplayController Replay()
    // Offset: 0x5150460
    ::UnityEngine::InputSystem::LowLevel::InputEventTrace::ReplayController* Replay();
    // public System.Boolean Resize(System.Int64 newBufferSize, System.Int64 newMaxBufferSize)
    // Offset: 0x5150650
    bool Resize(int64_t newBufferSize, int64_t newMaxBufferSize);
    // public System.Void Clear()
    // Offset: 0x51508C4
    void Clear();
    // public System.Void Enable()
    // Offset: 0x51508E4
    void Enable();
    // public System.Void Disable()
    // Offset: 0x51504C0
    void Disable();
    // public System.Boolean GetNextEvent(ref UnityEngine.InputSystem.LowLevel.InputEventPtr current)
    // Offset: 0x515084C
    bool GetNextEvent(ByRef<::UnityEngine::InputSystem::LowLevel::InputEventPtr> current);
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> GetEnumerator()
    // Offset: 0x514F7E0
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x5150AA0
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void Dispose()
    // Offset: 0x5150AA4
    void Dispose();
    // private System.Byte* get_m_EventBuffer()
    // Offset: 0x514ECB4
    uint8_t* get_m_EventBuffer();
    // private System.Void set_m_EventBuffer(System.Byte* value)
    // Offset: 0x5150130
    void set_m_EventBuffer(uint8_t* value);
    // private System.Byte* get_m_EventBufferHead()
    // Offset: 0x5150844
    uint8_t* get_m_EventBufferHead();
    // private System.Void set_m_EventBufferHead(System.Byte* value)
    // Offset: 0x5150138
    void set_m_EventBufferHead(uint8_t* value);
    // private System.Byte* get_m_EventBufferTail()
    // Offset: 0x5150A54
    uint8_t* get_m_EventBufferTail();
    // private System.Void set_m_EventBufferTail(System.Byte* value)
    // Offset: 0x5150140
    void set_m_EventBufferTail(uint8_t* value);
    // private System.Void Allocate()
    // Offset: 0x5150A2C
    void Allocate();
    // private System.Void Release()
    // Offset: 0x5150ABC
    void Release();
    // private System.Void OnBeforeUpdate()
    // Offset: 0x5150B14
    void OnBeforeUpdate();
    // private System.Void OnInputEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent, UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x5150C8C
    void OnInputEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr inputEvent, ::UnityEngine::InputSystem::InputDevice* device);
    // static private UnityEngine.InputSystem.Utilities.FourCC get_kFileFormat()
    // Offset: 0x514F7B0
    static ::UnityEngine::InputSystem::Utilities::FourCC get_kFileFormat();
    // static private System.Void .cctor()
    // Offset: 0x515115C
    static void _cctor();
  }; // UnityEngine.InputSystem.LowLevel.InputEventTrace
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo, "UnityEngine.InputSystem.LowLevel", "InputEventTrace/DeviceInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_FrameMarkerEvent
// Il2CppName: get_FrameMarkerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_FrameMarkerEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_FrameMarkerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_deviceId
// Il2CppName: get_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_deviceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_deviceId
// Il2CppName: set_deviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_deviceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_deviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_recordFrameMarkers
// Il2CppName: get_recordFrameMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_recordFrameMarkers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_recordFrameMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_recordFrameMarkers
// Il2CppName: set_recordFrameMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(bool)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_recordFrameMarkers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_recordFrameMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_eventCount
// Il2CppName: get_eventCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_eventCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_eventCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_totalEventSizeInBytes
// Il2CppName: get_totalEventSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_totalEventSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_totalEventSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_allocatedSizeInBytes
// Il2CppName: get_allocatedSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_allocatedSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_allocatedSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_maxSizeInBytes
// Il2CppName: get_maxSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_maxSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_maxSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_deviceInfos
// Il2CppName: get_deviceInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::LowLevel::InputEventTrace::DeviceInfo> (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_deviceInfos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_deviceInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_onFilterEvent
// Il2CppName: get_onFilterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_onFilterEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_onFilterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_onFilterEvent
// Il2CppName: set_onFilterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::System::Func_3<::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*, bool>*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_onFilterEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_onFilterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::add_onEvent
// Il2CppName: add_onEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::add_onEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "add_onEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::remove_onEvent
// Il2CppName: remove_onEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::remove_onEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "remove_onEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::StringW)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::WriteTo)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::System::IO::Stream*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::WriteTo)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::ReadFrom
// Il2CppName: ReadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::StringW)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::ReadFrom)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "ReadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::ReadFrom
// Il2CppName: ReadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::System::IO::Stream*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::ReadFrom)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "ReadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::LoadFrom
// Il2CppName: LoadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventTrace* (*)(::StringW)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::LoadFrom)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "LoadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::LoadFrom
// Il2CppName: LoadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventTrace* (*)(::System::IO::Stream*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::LoadFrom)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "LoadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Replay
// Il2CppName: Replay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventTrace::ReplayController* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Replay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Replay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(int64_t, int64_t)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Resize)> {
  static const MethodInfo* get() {
    static auto* newBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* newMaxBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newBufferSize, newMaxBufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::GetNextEvent
// Il2CppName: GetNextEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(ByRef<::UnityEngine::InputSystem::LowLevel::InputEventPtr>)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::GetNextEvent)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "GetNextEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBuffer
// Il2CppName: get_m_EventBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_m_EventBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBuffer
// Il2CppName: set_m_EventBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(uint8_t*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_m_EventBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBufferHead
// Il2CppName: get_m_EventBufferHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBufferHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_m_EventBufferHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBufferHead
// Il2CppName: set_m_EventBufferHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(uint8_t*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBufferHead)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_m_EventBufferHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBufferTail
// Il2CppName: get_m_EventBufferTail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_m_EventBufferTail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_m_EventBufferTail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBufferTail
// Il2CppName: set_m_EventBufferTail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(uint8_t*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::set_m_EventBufferTail)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "set_m_EventBufferTail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Allocate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::OnBeforeUpdate
// Il2CppName: OnBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::OnBeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "OnBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::OnInputEvent
// Il2CppName: OnInputEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventTrace::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::OnInputEvent)> {
  static const MethodInfo* get() {
    static auto* inputEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "OnInputEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputEvent, device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::get_kFileFormat
// Il2CppName: get_kFileFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::get_kFileFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), "get_kFileFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventTrace::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::LowLevel::InputEventTrace::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventTrace*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
