// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IComparable`1<T>
  template<typename T>
  class IComparable_1;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionState
  class InputActionState;
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputBindingCompositeContext
  struct InputBindingCompositeContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputBindingCompositeContext, "UnityEngine.InputSystem", "InputBindingCompositeContext");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputBindingCompositeContext
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputBindingCompositeContext/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputBindingCompositeContext::PartBinding
    struct PartBinding;
    // Nested type: ::UnityEngine::InputSystem::InputBindingCompositeContext::DefaultComparer_1<TValue>
    template<typename TValue>
    struct DefaultComparer_1;
    // Nested type: ::UnityEngine::InputSystem::InputBindingCompositeContext::$get_controls$d__2
    class $get_controls$d__2;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputBindingCompositeContext/PartBinding
    // [TokenAttribute] Offset: FFFFFFFF
    struct PartBinding/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Int32 <part>k__BackingField
      // Size: 0x4
      // Offset: 0x0
      int part;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: part and: control
      char __padding0[0x4] = {};
      // private UnityEngine.InputSystem.InputControl <control>k__BackingField
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::InputSystem::InputControl* control;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputControl*) == 0x8);
      public:
      // Creating value type constructor for type: PartBinding
      constexpr PartBinding(int part_ = {}, ::UnityEngine::InputSystem::InputControl* control_ = {}) noexcept : part{part_}, control{control_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Int32 <part>k__BackingField
      [[deprecated("Use field access instead!")]] int& dyn_$part$k__BackingField();
      // Get instance field reference: private UnityEngine.InputSystem.InputControl <control>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControl*& dyn_$control$k__BackingField();
      // public System.Int32 get_part()
      // Offset: 0x50AEBA4
      int get_part();
      // public System.Void set_part(System.Int32 value)
      // Offset: 0x50AEBAC
      void set_part(int value);
      // public UnityEngine.InputSystem.InputControl get_control()
      // Offset: 0x50AEBB4
      ::UnityEngine::InputSystem::InputControl* get_control();
      // public System.Void set_control(UnityEngine.InputSystem.InputControl value)
      // Offset: 0x50AEBBC
      void set_control(::UnityEngine::InputSystem::InputControl* value);
    }; // UnityEngine.InputSystem.InputBindingCompositeContext/PartBinding
    #pragma pack(pop)
    static check_size<sizeof(InputBindingCompositeContext::PartBinding), 8 + sizeof(::UnityEngine::InputSystem::InputControl*)> __UnityEngine_InputSystem_InputBindingCompositeContext_PartBindingSizeCheck;
    static_assert(sizeof(InputBindingCompositeContext::PartBinding) == 0x10);
    public:
    // UnityEngine.InputSystem.InputActionState m_State
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputActionState* m_State;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState*) == 0x8);
    // System.Int32 m_BindingIndex
    // Size: 0x4
    // Offset: 0x8
    int m_BindingIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InputBindingCompositeContext
    constexpr InputBindingCompositeContext(::UnityEngine::InputSystem::InputActionState* m_State_ = {}, int m_BindingIndex_ = {}) noexcept : m_State{m_State_}, m_BindingIndex{m_BindingIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.InputSystem.InputActionState m_State
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState*& dyn_m_State();
    // Get instance field reference: System.Int32 m_BindingIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_BindingIndex();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputBindingCompositeContext/PartBinding> get_controls()
    // Offset: 0x50AE9DC
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputBindingCompositeContext::PartBinding>* get_controls();
    // public System.Single EvaluateMagnitude(System.Int32 partNumber)
    // Offset: 0x50AEA90
    float EvaluateMagnitude(int partNumber);
    // public TValue ReadValue(System.Int32 partNumber)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ReadValue(int partNumber) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValue>, ::System::IComparable_1<TValue>> && std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partNumber)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, partNumber);
    }
    // public TValue ReadValue(System.Int32 partNumber, out UnityEngine.InputSystem.InputControl sourceControl)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ReadValue(int partNumber, ByRef<::UnityEngine::InputSystem::InputControl*> sourceControl) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValue>, ::System::IComparable_1<TValue>> && std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partNumber), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::InputSystem::InputControl*&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, partNumber, byref(sourceControl));
    }
    // public TValue ReadValue(System.Int32 partNumber, TComparer comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue, class TComparer>
    TValue ReadValue(int partNumber, TComparer comparer) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TComparer>, ::System::Collections::Generic::IComparer_1<TValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partNumber), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, partNumber, comparer);
    }
    // public TValue ReadValue(System.Int32 partNumber, out UnityEngine.InputSystem.InputControl sourceControl, TComparer comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue, class TComparer>
    TValue ReadValue(int partNumber, ByRef<::UnityEngine::InputSystem::InputControl*> sourceControl, TComparer comparer) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TComparer>, ::System::Collections::Generic::IComparer_1<TValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partNumber), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::InputSystem::InputControl*&>(), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TComparer>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, partNumber, byref(sourceControl), comparer);
    }
    // public System.Boolean ReadValueAsButton(System.Int32 partNumber)
    // Offset: 0x50AEAB4
    bool ReadValueAsButton(int partNumber);
    // public System.Void ReadValue(System.Int32 partNumber, System.Void* buffer, System.Int32 bufferSize)
    // Offset: 0x50AEB38
    void ReadValue(int partNumber, void* buffer, int bufferSize);
    // public System.Object ReadValueAsObject(System.Int32 partNumber)
    // Offset: 0x50AEB5C
    ::Il2CppObject* ReadValueAsObject(int partNumber);
    // public System.Double GetPressTime(System.Int32 partNumber)
    // Offset: 0x50AEB80
    double GetPressTime(int partNumber);
  }; // UnityEngine.InputSystem.InputBindingCompositeContext
  #pragma pack(pop)
  static check_size<sizeof(InputBindingCompositeContext), 8 + sizeof(int)> __UnityEngine_InputSystem_InputBindingCompositeContextSizeCheck;
  static_assert(sizeof(InputBindingCompositeContext) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputBindingCompositeContext::PartBinding, "UnityEngine.InputSystem", "InputBindingCompositeContext/PartBinding");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::get_controls
// Il2CppName: get_controls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputBindingCompositeContext::PartBinding>* (UnityEngine::InputSystem::InputBindingCompositeContext::*)()>(&UnityEngine::InputSystem::InputBindingCompositeContext::get_controls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "get_controls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::EvaluateMagnitude
// Il2CppName: EvaluateMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::InputBindingCompositeContext::*)(int)>(&UnityEngine::InputSystem::InputBindingCompositeContext::EvaluateMagnitude)> {
  static const MethodInfo* get() {
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "EvaluateMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValueAsButton
// Il2CppName: ReadValueAsButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBindingCompositeContext::*)(int)>(&UnityEngine::InputSystem::InputBindingCompositeContext::ReadValueAsButton)> {
  static const MethodInfo* get() {
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "ReadValueAsButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue
// Il2CppName: ReadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBindingCompositeContext::*)(int, void*, int)>(&UnityEngine::InputSystem::InputBindingCompositeContext::ReadValue)> {
  static const MethodInfo* get() {
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "ReadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partNumber, buffer, bufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::ReadValueAsObject
// Il2CppName: ReadValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::InputBindingCompositeContext::*)(int)>(&UnityEngine::InputSystem::InputBindingCompositeContext::ReadValueAsObject)> {
  static const MethodInfo* get() {
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "ReadValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partNumber});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingCompositeContext::GetPressTime
// Il2CppName: GetPressTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputBindingCompositeContext::*)(int)>(&UnityEngine::InputSystem::InputBindingCompositeContext::GetPressTime)> {
  static const MethodInfo* get() {
    static auto* partNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingCompositeContext), "GetPressTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partNumber});
  }
};
