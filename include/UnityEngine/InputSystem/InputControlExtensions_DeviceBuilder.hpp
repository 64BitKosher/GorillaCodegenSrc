// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlExtensions
#include "UnityEngine/InputSystem/InputControlExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: InternedString
  struct InternedString;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputStateBlock
  struct InputStateBlock;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder, "UnityEngine.InputSystem", "InputControlExtensions/DeviceBuilder");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlExtensions::DeviceBuilder/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.InputSystem.InputDevice <device>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputDevice* device;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputDevice*) == 0x8);
    public:
    // Creating value type constructor for type: DeviceBuilder
    constexpr DeviceBuilder(::UnityEngine::InputSystem::InputDevice* device_ = {}) noexcept : device{device_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::InputSystem::InputDevice*
    constexpr operator ::UnityEngine::InputSystem::InputDevice*() const noexcept {
      return device;
    }
    // Get instance field reference: private UnityEngine.InputSystem.InputDevice <device>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputDevice*& dyn_$device$k__BackingField();
    // public UnityEngine.InputSystem.InputDevice get_device()
    // Offset: 0x50C0D38
    ::UnityEngine::InputSystem::InputDevice* get_device();
    // System.Void set_device(UnityEngine.InputSystem.InputDevice value)
    // Offset: 0x50C0D40
    void set_device(::UnityEngine::InputSystem::InputDevice* value);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithName(System.String name)
    // Offset: 0x50C0D48
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithName(::StringW name);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithDisplayName(System.String displayName)
    // Offset: 0x50C0D9C
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithDisplayName(::StringW displayName);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithShortDisplayName(System.String shortDisplayName)
    // Offset: 0x50C0DF8
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithShortDisplayName(::StringW shortDisplayName);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithLayout(UnityEngine.InputSystem.Utilities.InternedString layout)
    // Offset: 0x50C0E54
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithLayout(::UnityEngine::InputSystem::Utilities::InternedString layout);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithChildren(System.Int32 startIndex, System.Int32 count)
    // Offset: 0x50C0E84
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithChildren(int startIndex, int count);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithStateBlock(UnityEngine.InputSystem.LowLevel.InputStateBlock stateBlock)
    // Offset: 0x50C0EA4
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithStateBlock(::UnityEngine::InputSystem::LowLevel::InputStateBlock stateBlock);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder IsNoisy(System.Boolean value)
    // Offset: 0x50C0EC4
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder IsNoisy(bool value);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithControlUsage(System.Int32 controlIndex, UnityEngine.InputSystem.Utilities.InternedString usage, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x50C0EEC
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithControlUsage(int controlIndex, ::UnityEngine::InputSystem::Utilities::InternedString usage, ::UnityEngine::InputSystem::InputControl* control);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithControlAlias(System.Int32 controlIndex, UnityEngine.InputSystem.Utilities.InternedString alias)
    // Offset: 0x50C0FA4
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithControlAlias(int controlIndex, ::UnityEngine::InputSystem::Utilities::InternedString alias);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithStateOffsetToControlIndexMap(System.UInt32[] map)
    // Offset: 0x50C0FF4
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithStateOffsetToControlIndexMap(::ArrayW<uint> map);
    // public UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder WithControlTree(System.Byte[] controlTreeNodes, System.UInt16[] controlTreeIndicies)
    // Offset: 0x50C1020
    ::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder WithControlTree(::ArrayW<uint8_t> controlTreeNodes, ::ArrayW<uint16_t> controlTreeIndicies);
    // public System.Void Finish()
    // Offset: 0x50C115C
    void Finish();
  }; // UnityEngine.InputSystem.InputControlExtensions/DeviceBuilder
  #pragma pack(pop)
  static check_size<sizeof(InputControlExtensions::DeviceBuilder), 0 + sizeof(::UnityEngine::InputSystem::InputDevice*)> __UnityEngine_InputSystem_InputControlExtensions_DeviceBuilderSizeCheck;
  static_assert(sizeof(InputControlExtensions::DeviceBuilder) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::get_device
// Il2CppName: get_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)()>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::get_device)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "get_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::set_device
// Il2CppName: set_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::set_device)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "set_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithName
// Il2CppName: WithName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::StringW)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithDisplayName
// Il2CppName: WithDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::StringW)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithDisplayName)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithShortDisplayName
// Il2CppName: WithShortDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::StringW)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithShortDisplayName)> {
  static const MethodInfo* get() {
    static auto* shortDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithShortDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shortDisplayName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithLayout
// Il2CppName: WithLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithLayout)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithChildren
// Il2CppName: WithChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(int, int)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithChildren)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithStateBlock
// Il2CppName: WithStateBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::UnityEngine::InputSystem::LowLevel::InputStateBlock)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithStateBlock)> {
  static const MethodInfo* get() {
    static auto* stateBlock = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithStateBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateBlock});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::IsNoisy
// Il2CppName: IsNoisy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(bool)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::IsNoisy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "IsNoisy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlUsage
// Il2CppName: WithControlUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(int, ::UnityEngine::InputSystem::Utilities::InternedString, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlUsage)> {
  static const MethodInfo* get() {
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithControlUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlIndex, usage, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlAlias
// Il2CppName: WithControlAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(int, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlAlias)> {
  static const MethodInfo* get() {
    static auto* controlIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* alias = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithControlAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlIndex, alias});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithStateOffsetToControlIndexMap
// Il2CppName: WithStateOffsetToControlIndexMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::ArrayW<uint>)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithStateOffsetToControlIndexMap)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithStateOffsetToControlIndexMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlTree
// Il2CppName: WithControlTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)(::ArrayW<uint8_t>, ::ArrayW<uint16_t>)>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::WithControlTree)> {
  static const MethodInfo* get() {
    static auto* controlTreeNodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* controlTreeIndicies = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "WithControlTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlTreeNodes, controlTreeIndicies});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::*)()>(&UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder::Finish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions::DeviceBuilder), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
