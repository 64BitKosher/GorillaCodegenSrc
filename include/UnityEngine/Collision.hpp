// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ContactPairHeader
#include "UnityEngine/ContactPairHeader.hpp"
// Including type: UnityEngine.ContactPair
#include "UnityEngine/ContactPair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision
  class Collision;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Collision);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Collision*, "UnityEngine", "Collision");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Collision
  // [TokenAttribute] Offset: FFFFFFFF
  class Collision : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.ContactPairHeader m_Header
    // Size: 0x24
    // Offset: 0x10
    ::UnityEngine::ContactPairHeader m_Header;
    // Field size check
    static_assert(sizeof(::UnityEngine::ContactPairHeader) == 0x24);
    // Padding between fields: m_Header and: m_Pair
    char __padding0[0x4] = {};
    // private UnityEngine.ContactPair m_Pair
    // Size: 0x24
    // Offset: 0x38
    ::UnityEngine::ContactPair m_Pair;
    // Field size check
    static_assert(sizeof(::UnityEngine::ContactPair) == 0x24);
    // Padding between fields: m_Pair and: m_Flipped
    char __padding1[0x4] = {};
    // private System.Boolean m_Flipped
    // Size: 0x1
    // Offset: 0x60
    bool m_Flipped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Flipped and: m_LegacyContacts
    char __padding2[0x7] = {};
    // private UnityEngine.ContactPoint[] m_LegacyContacts
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::ContactPoint> m_LegacyContacts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ContactPoint>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.ContactPairHeader m_Header
    [[deprecated("Use field access instead!")]] ::UnityEngine::ContactPairHeader& dyn_m_Header();
    // Get instance field reference: private UnityEngine.ContactPair m_Pair
    [[deprecated("Use field access instead!")]] ::UnityEngine::ContactPair& dyn_m_Pair();
    // Get instance field reference: private System.Boolean m_Flipped
    [[deprecated("Use field access instead!")]] bool& dyn_m_Flipped();
    // Get instance field reference: private UnityEngine.ContactPoint[] m_LegacyContacts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint>& dyn_m_LegacyContacts();
    // public UnityEngine.Vector3 get_impulse()
    // Offset: 0x5527A74
    ::UnityEngine::Vector3 get_impulse();
    // public UnityEngine.Vector3 get_relativeVelocity()
    // Offset: 0x5527A80
    ::UnityEngine::Vector3 get_relativeVelocity();
    // public UnityEngine.Rigidbody get_rigidbody()
    // Offset: 0x5527AAC
    ::UnityEngine::Rigidbody* get_rigidbody();
    // public UnityEngine.Component get_body()
    // Offset: 0x5527B2C
    ::UnityEngine::Component* get_body();
    // public UnityEngine.Collider get_collider()
    // Offset: 0x5527C30
    ::UnityEngine::Collider* get_collider();
    // public UnityEngine.GameObject get_gameObject()
    // Offset: 0x5527D5C
    ::UnityEngine::GameObject* get_gameObject();
    // System.Void set_Flipped(System.Boolean value)
    // Offset: 0x5527DF0
    void set_Flipped(bool value);
    // public System.Int32 get_contactCount()
    // Offset: 0x5527DFC
    int get_contactCount();
    // public System.Void .ctor()
    // Offset: 0x5527E04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Collision* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Collision::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Collision*, creationType>()));
    }
    // System.Void .ctor(in UnityEngine.ContactPairHeader header, in UnityEngine.ContactPair pair, System.Boolean flipped)
    // Offset: 0x5527E5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Collision* New_ctor(ByRef<::UnityEngine::ContactPairHeader> header, ByRef<::UnityEngine::ContactPair> pair, bool flipped) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Collision::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Collision*, creationType>(byref(header), byref(pair), flipped)));
    }
    // System.Void Reuse(in UnityEngine.ContactPairHeader header, in UnityEngine.ContactPair pair)
    // Offset: 0x5527FA8
    void Reuse(ByRef<::UnityEngine::ContactPairHeader> header, ByRef<::UnityEngine::ContactPair> pair);
    // public UnityEngine.ContactPoint GetContact(System.Int32 index)
    // Offset: 0x5527FEC
    ::UnityEngine::ContactPoint GetContact(int index);
    // public System.Int32 GetContacts(UnityEngine.ContactPoint[] contacts)
    // Offset: 0x552825C
    int GetContacts(::ArrayW<::UnityEngine::ContactPoint> contacts);
  }; // UnityEngine.Collision
  #pragma pack(pop)
  static check_size<sizeof(Collision), 104 + sizeof(::ArrayW<::UnityEngine::ContactPoint>)> __UnityEngine_CollisionSizeCheck;
  static_assert(sizeof(Collision) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Collision::get_impulse
// Il2CppName: get_impulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_impulse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_impulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_relativeVelocity
// Il2CppName: get_relativeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_relativeVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_relativeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_rigidbody
// Il2CppName: get_rigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rigidbody* (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_rigidbody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_rigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_body
// Il2CppName: get_body
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Component* (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_body)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_body", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_collider
// Il2CppName: get_collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_gameObject
// Il2CppName: get_gameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_gameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_gameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::set_Flipped
// Il2CppName: set_Flipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Collision::*)(bool)>(&UnityEngine::Collision::set_Flipped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "set_Flipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::get_contactCount
// Il2CppName: get_contactCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Collision::*)()>(&UnityEngine::Collision::get_contactCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "get_contactCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Collision::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Collision::Reuse
// Il2CppName: Reuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Collision::*)(ByRef<::UnityEngine::ContactPairHeader>, ByRef<::UnityEngine::ContactPair>)>(&UnityEngine::Collision::Reuse)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPairHeader")->this_arg;
    static auto* pair = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPair")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "Reuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, pair});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::GetContact
// Il2CppName: GetContact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ContactPoint (UnityEngine::Collision::*)(int)>(&UnityEngine::Collision::GetContact)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "GetContact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Collision::GetContacts
// Il2CppName: GetContacts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Collision::*)(::ArrayW<::UnityEngine::ContactPoint>)>(&UnityEngine::Collision::GetContacts)> {
  static const MethodInfo* get() {
    static auto* contacts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ContactPoint"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Collision*), "GetContacts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contacts});
  }
};
