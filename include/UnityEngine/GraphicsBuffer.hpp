// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Target because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GraphicsBuffer
  class GraphicsBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::GraphicsBuffer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GraphicsBuffer*, "UnityEngine", "GraphicsBuffer");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.GraphicsBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  class GraphicsBuffer : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::GraphicsBuffer::Target
    struct Target;
    // Nested type: ::UnityEngine::GraphicsBuffer::UsageFlags
    struct UsageFlags;
    // Nested type: ::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs
    struct IndirectDrawIndexedArgs;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.GraphicsBuffer/Target
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Target/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Target
      constexpr Target(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Vertex
      static constexpr const int Vertex = 1;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Vertex
      static ::UnityEngine::GraphicsBuffer::Target _get_Vertex();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Vertex
      static void _set_Vertex(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Index
      static constexpr const int Index = 2;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Index
      static ::UnityEngine::GraphicsBuffer::Target _get_Index();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Index
      static void _set_Index(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target CopySource
      static constexpr const int CopySource = 4;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target CopySource
      static ::UnityEngine::GraphicsBuffer::Target _get_CopySource();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target CopySource
      static void _set_CopySource(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target CopyDestination
      static constexpr const int CopyDestination = 8;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target CopyDestination
      static ::UnityEngine::GraphicsBuffer::Target _get_CopyDestination();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target CopyDestination
      static void _set_CopyDestination(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Structured
      static constexpr const int Structured = 16;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Structured
      static ::UnityEngine::GraphicsBuffer::Target _get_Structured();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Structured
      static void _set_Structured(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Raw
      static constexpr const int Raw = 32;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Raw
      static ::UnityEngine::GraphicsBuffer::Target _get_Raw();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Raw
      static void _set_Raw(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Append
      static constexpr const int Append = 64;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Append
      static ::UnityEngine::GraphicsBuffer::Target _get_Append();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Append
      static void _set_Append(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Counter
      static constexpr const int Counter = 128;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Counter
      static ::UnityEngine::GraphicsBuffer::Target _get_Counter();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Counter
      static void _set_Counter(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target IndirectArguments
      static constexpr const int IndirectArguments = 256;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target IndirectArguments
      static ::UnityEngine::GraphicsBuffer::Target _get_IndirectArguments();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target IndirectArguments
      static void _set_IndirectArguments(::UnityEngine::GraphicsBuffer::Target value);
      // static field const value: static public UnityEngine.GraphicsBuffer/Target Constant
      static constexpr const int Constant = 512;
      // Get static field: static public UnityEngine.GraphicsBuffer/Target Constant
      static ::UnityEngine::GraphicsBuffer::Target _get_Constant();
      // Set static field: static public UnityEngine.GraphicsBuffer/Target Constant
      static void _set_Constant(::UnityEngine::GraphicsBuffer::Target value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.GraphicsBuffer/Target
    #pragma pack(pop)
    static check_size<sizeof(GraphicsBuffer::Target), 0 + sizeof(int)> __UnityEngine_GraphicsBuffer_TargetSizeCheck;
    static_assert(sizeof(GraphicsBuffer::Target) == 0x4);
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // public System.Void Dispose()
    // Offset: 0x549D794
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x549D6D8
    void Dispose(bool disposing);
    // static private System.Boolean RequiresCompute(UnityEngine.GraphicsBuffer/Target target)
    // Offset: 0x549D834
    static bool RequiresCompute(::UnityEngine::GraphicsBuffer::Target target);
    // static private System.Boolean IsVertexIndexOrCopyOnly(UnityEngine.GraphicsBuffer/Target target)
    // Offset: 0x549D840
    static bool IsVertexIndexOrCopyOnly(::UnityEngine::GraphicsBuffer::Target target);
    // static private System.IntPtr InitBuffer(UnityEngine.GraphicsBuffer/Target target, UnityEngine.GraphicsBuffer/UsageFlags usageFlags, System.Int32 count, System.Int32 stride)
    // Offset: 0x549D84C
    static ::System::IntPtr InitBuffer(::UnityEngine::GraphicsBuffer::Target target, ::UnityEngine::GraphicsBuffer::UsageFlags usageFlags, int count, int stride);
    // static private System.Void DestroyBuffer(UnityEngine.GraphicsBuffer buf)
    // Offset: 0x549D7F8
    static void DestroyBuffer(::UnityEngine::GraphicsBuffer* buf);
    // public System.Void .ctor(UnityEngine.GraphicsBuffer/Target target, System.Int32 count, System.Int32 stride)
    // Offset: 0x549D8A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphicsBuffer* New_ctor(::UnityEngine::GraphicsBuffer::Target target, int count, int stride) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::GraphicsBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphicsBuffer*, creationType>(target, count, stride)));
    }
    // private System.Void InternalInitialization(UnityEngine.GraphicsBuffer/Target target, UnityEngine.GraphicsBuffer/UsageFlags usageFlags, System.Int32 count, System.Int32 stride)
    // Offset: 0x549D8F4
    void InternalInitialization(::UnityEngine::GraphicsBuffer::Target target, ::UnityEngine::GraphicsBuffer::UsageFlags usageFlags, int count, int stride);
    // public System.Void Release()
    // Offset: 0x549DBF0
    void Release();
    // public System.Int32 get_count()
    // Offset: 0x549DBF4
    int get_count();
    // public System.Int32 get_stride()
    // Offset: 0x549DC30
    int get_stride();
    // public System.Void SetData(Unity.Collections.NativeArray`1<T> data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetData(::Unity::Collections::NativeArray_1<T> data) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::GraphicsBuffer::SetData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data);
    }
    // private System.Void InternalSetNativeData(System.IntPtr data, System.Int32 nativeBufferStartIndex, System.Int32 graphicsBufferStartIndex, System.Int32 count, System.Int32 elemSize)
    // Offset: 0x549DC6C
    void InternalSetNativeData(::System::IntPtr data, int nativeBufferStartIndex, int graphicsBufferStartIndex, int count, int elemSize);
    // public System.Void GetData(System.Array data)
    // Offset: 0x549DCE0
    void GetData(::System::Array* data);
    // private System.Void InternalGetData(System.Array data, System.Int32 managedBufferStartIndex, System.Int32 computeBufferStartIndex, System.Int32 count, System.Int32 elemSize)
    // Offset: 0x549DE80
    void InternalGetData(::System::Array* data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize);
    // public System.Void set_name(System.String value)
    // Offset: 0x549DEF4
    void set_name(::StringW value);
    // private System.Void SetName(System.String name)
    // Offset: 0x549DF38
    void SetName(::StringW name);
    // protected override System.Void Finalize()
    // Offset: 0x549D640
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.GraphicsBuffer
  #pragma pack(pop)
  static check_size<sizeof(GraphicsBuffer), 16 + sizeof(::System::IntPtr)> __UnityEngine_GraphicsBufferSizeCheck;
  static_assert(sizeof(GraphicsBuffer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GraphicsBuffer::Target, "UnityEngine", "GraphicsBuffer/Target");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)()>(&UnityEngine::GraphicsBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(bool)>(&UnityEngine::GraphicsBuffer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::RequiresCompute
// Il2CppName: RequiresCompute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GraphicsBuffer::Target)>(&UnityEngine::GraphicsBuffer::RequiresCompute)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "RequiresCompute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::IsVertexIndexOrCopyOnly
// Il2CppName: IsVertexIndexOrCopyOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GraphicsBuffer::Target)>(&UnityEngine::GraphicsBuffer::IsVertexIndexOrCopyOnly)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "IsVertexIndexOrCopyOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::InitBuffer
// Il2CppName: InitBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::UnityEngine::GraphicsBuffer::Target, ::UnityEngine::GraphicsBuffer::UsageFlags, int, int)>(&UnityEngine::GraphicsBuffer::InitBuffer)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    static auto* usageFlags = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/UsageFlags")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "InitBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, usageFlags, count, stride});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::DestroyBuffer
// Il2CppName: DestroyBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GraphicsBuffer*)>(&UnityEngine::GraphicsBuffer::DestroyBuffer)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "DestroyBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::InternalInitialization
// Il2CppName: InternalInitialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::UnityEngine::GraphicsBuffer::Target, ::UnityEngine::GraphicsBuffer::UsageFlags, int, int)>(&UnityEngine::GraphicsBuffer::InternalInitialization)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/Target")->byval_arg;
    static auto* usageFlags = &::il2cpp_utils::GetClassFromName("UnityEngine", "GraphicsBuffer/UsageFlags")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "InternalInitialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, usageFlags, count, stride});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)()>(&UnityEngine::GraphicsBuffer::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::GraphicsBuffer::*)()>(&UnityEngine::GraphicsBuffer::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::get_stride
// Il2CppName: get_stride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::GraphicsBuffer::*)()>(&UnityEngine::GraphicsBuffer::get_stride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "get_stride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::SetData
// Il2CppName: SetData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::InternalSetNativeData
// Il2CppName: InternalSetNativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::System::IntPtr, int, int, int, int)>(&UnityEngine::GraphicsBuffer::InternalSetNativeData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* nativeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* graphicsBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "InternalSetNativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, nativeBufferStartIndex, graphicsBufferStartIndex, count, elemSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::System::Array*)>(&UnityEngine::GraphicsBuffer::GetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::InternalGetData
// Il2CppName: InternalGetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::System::Array*, int, int, int, int)>(&UnityEngine::GraphicsBuffer::InternalGetData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* managedBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* computeBufferStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "InternalGetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, managedBufferStartIndex, computeBufferStartIndex, count, elemSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::StringW)>(&UnityEngine::GraphicsBuffer::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)(::StringW)>(&UnityEngine::GraphicsBuffer::SetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::GraphicsBuffer::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GraphicsBuffer::*)()>(&UnityEngine::GraphicsBuffer::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GraphicsBuffer*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
