// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationBase_1.hpp"
// Including type: UnityEngine.ResourceManagement.IUpdateReceiver
#include "UnityEngine/ResourceManagement/IUpdateReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: AddressablesImpl
  class AddressablesImpl;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Completed forward declares
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: CleanBundleCacheOperation
  class CleanBundleCacheOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AddressableAssets::CleanBundleCacheOperation);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AddressableAssets::CleanBundleCacheOperation*, "UnityEngine.AddressableAssets", "CleanBundleCacheOperation");
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.AddressableAssets.CleanBundleCacheOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class CleanBundleCacheOperation : public ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationBase_1<bool>/*, public ::UnityEngine::ResourceManagement::IUpdateReceiver*/ {
    public:
    public:
    // private UnityEngine.AddressableAssets.AddressablesImpl m_Addressables
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::AddressableAssets::AddressablesImpl* m_Addressables;
    // Field size check
    static_assert(sizeof(::UnityEngine::AddressableAssets::AddressablesImpl*) == 0x8);
    // private UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> m_DepOp
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> m_DepOp;
    // private System.Collections.Generic.List`1<System.String> m_CacheDirsForRemoval
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::StringW>* m_CacheDirsForRemoval;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Threading.Thread m_EnumerationThread
    // Size: 0x8
    // Offset: 0xC8
    ::System::Threading::Thread* m_EnumerationThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.String m_BaseCachePath
    // Size: 0x8
    // Offset: 0xD0
    ::StringW m_BaseCachePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_UseMultiThreading
    // Size: 0x1
    // Offset: 0xD8
    bool m_UseMultiThreading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ResourceManagement::IUpdateReceiver
    operator ::UnityEngine::ResourceManagement::IUpdateReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ResourceManagement::IUpdateReceiver*>(this);
    }
    // Get instance field reference: private UnityEngine.AddressableAssets.AddressablesImpl m_Addressables
    [[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AddressablesImpl*& dyn_m_Addressables();
    // Get instance field reference: private UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> m_DepOp
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*>& dyn_m_DepOp();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> m_CacheDirsForRemoval
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_m_CacheDirsForRemoval();
    // Get instance field reference: private System.Threading.Thread m_EnumerationThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_m_EnumerationThread();
    // Get instance field reference: private System.String m_BaseCachePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_BaseCachePath();
    // Get instance field reference: private System.Boolean m_UseMultiThreading
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseMultiThreading();
    // public System.Void .ctor(UnityEngine.AddressableAssets.AddressablesImpl aa, System.Boolean forceSingleThreading)
    // Offset: 0x5056D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CleanBundleCacheOperation* New_ctor(::UnityEngine::AddressableAssets::AddressablesImpl* aa, bool forceSingleThreading) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::CleanBundleCacheOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CleanBundleCacheOperation*, creationType>(aa, forceSingleThreading)));
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Boolean> Start(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> depOp)
    // Offset: 0x5056E3C
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<bool> Start(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> depOp);
    // public System.Void CompleteInternal(System.Boolean result, System.Boolean success, System.String errorMsg)
    // Offset: 0x50597C8
    void CompleteInternal(bool result, bool success, ::StringW errorMsg);
    // private System.Void UnityEngine.ResourceManagement.IUpdateReceiver.Update(System.Single unscaledDeltaTime)
    // Offset: 0x505ABA4
    void UnityEngine_ResourceManagement_IUpdateReceiver_Update(float unscaledDeltaTime);
    // private System.Void RemoveCacheEntries()
    // Offset: 0x5059928
    void RemoveCacheEntries();
    // private System.Void DetermineCacheDirsNotInUse(System.Object data)
    // Offset: 0x505AC00
    void DetermineCacheDirsNotInUse(::Il2CppObject* data);
    // private System.Void DetermineCacheDirsNotInUse(System.Collections.Generic.HashSet`1<System.String> cacheDirsInUse)
    // Offset: 0x505A77C
    void DetermineCacheDirsNotInUse(::System::Collections::Generic::HashSet_1<::StringW>* cacheDirsInUse);
    // private System.Collections.Generic.HashSet`1<System.String> GetCacheDirsInUse(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle> catalogOps)
    // Offset: 0x5059E34
    ::System::Collections::Generic::HashSet_1<::StringW>* GetCacheDirsInUse(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>* catalogOps);
    // protected override System.Boolean InvokeWaitForCompletion()
    // Offset: 0x5059858
    // Implemented from: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1
    // Base method: System.Boolean AsyncOperationBase_1::InvokeWaitForCompletion()
    bool InvokeWaitForCompletion();
    // protected override System.Void Destroy()
    // Offset: 0x5059ABC
    // Implemented from: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1
    // Base method: System.Void AsyncOperationBase_1::Destroy()
    void Destroy();
    // public override System.Void GetDependencies(System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle> dependencies)
    // Offset: 0x5059B38
    // Implemented from: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1
    // Base method: System.Void AsyncOperationBase_1::GetDependencies(System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle> dependencies)
    void GetDependencies(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>* dependencies);
    // protected override System.Void Execute()
    // Offset: 0x5059C60
    // Implemented from: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1
    // Base method: System.Void AsyncOperationBase_1::Execute()
    void Execute();
  }; // UnityEngine.AddressableAssets.CleanBundleCacheOperation
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<bool> (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*>)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::Start)> {
  static const MethodInfo* get() {
    static auto* depOp = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depOp});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::CompleteInternal
// Il2CppName: CompleteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(bool, bool, ::StringW)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::CompleteInternal)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* errorMsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "CompleteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, success, errorMsg});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::UnityEngine_ResourceManagement_IUpdateReceiver_Update
// Il2CppName: UnityEngine.ResourceManagement.IUpdateReceiver.Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(float)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::UnityEngine_ResourceManagement_IUpdateReceiver_Update)> {
  static const MethodInfo* get() {
    static auto* unscaledDeltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "UnityEngine.ResourceManagement.IUpdateReceiver.Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unscaledDeltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::RemoveCacheEntries
// Il2CppName: RemoveCacheEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)()>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::RemoveCacheEntries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "RemoveCacheEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::DetermineCacheDirsNotInUse
// Il2CppName: DetermineCacheDirsNotInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(::Il2CppObject*)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::DetermineCacheDirsNotInUse)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "DetermineCacheDirsNotInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::DetermineCacheDirsNotInUse
// Il2CppName: DetermineCacheDirsNotInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(::System::Collections::Generic::HashSet_1<::StringW>*)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::DetermineCacheDirsNotInUse)> {
  static const MethodInfo* get() {
    static auto* cacheDirsInUse = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "DetermineCacheDirsNotInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cacheDirsInUse});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::GetCacheDirsInUse
// Il2CppName: GetCacheDirsInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::GetCacheDirsInUse)> {
  static const MethodInfo* get() {
    static auto* catalogOps = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "GetCacheDirsInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{catalogOps});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::InvokeWaitForCompletion
// Il2CppName: InvokeWaitForCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)()>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::InvokeWaitForCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "InvokeWaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)()>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::GetDependencies
// Il2CppName: GetDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*)>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::GetDependencies)> {
  static const MethodInfo* get() {
    static auto* dependencies = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "GetDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dependencies});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::CleanBundleCacheOperation::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::CleanBundleCacheOperation::*)()>(&UnityEngine::AddressableAssets::CleanBundleCacheOperation::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::CleanBundleCacheOperation*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
