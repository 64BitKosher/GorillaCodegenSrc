// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.AddressableAssets.Addressables/MergeMode
#include "UnityEngine/AddressableAssets/Addressables.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: AddressablesImpl
  class AddressablesImpl;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: InvalidKeyException
  class InvalidKeyException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AddressableAssets::InvalidKeyException);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AddressableAssets::InvalidKeyException*, "UnityEngine.AddressableAssets", "InvalidKeyException");
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.AddressableAssets.InvalidKeyException
  // [TokenAttribute] Offset: FFFFFFFF
  class InvalidKeyException : public ::System::Exception {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    public:
    // private System.Object <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* Key;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Type <Type>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private readonly System.Nullable`1<UnityEngine.AddressableAssets.Addressables/MergeMode> <MergeMode>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::System::Nullable_1<::UnityEngine::AddressableAssets::Addressables::MergeMode> MergeMode;
    // private UnityEngine.AddressableAssets.AddressablesImpl m_Addressables
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AddressableAssets::AddressablesImpl* m_Addressables;
    // Field size check
    static_assert(sizeof(::UnityEngine::AddressableAssets::AddressablesImpl*) == 0x8);
    public:
    // static field const value: static private System.String BaseInvalidKeyMessageFormat
    static constexpr const char* BaseInvalidKeyMessageFormat = "{0}, Key={1}, Type={2}";
    // Get static field: static private System.String BaseInvalidKeyMessageFormat
    static ::StringW _get_BaseInvalidKeyMessageFormat();
    // Set static field: static private System.String BaseInvalidKeyMessageFormat
    static void _set_BaseInvalidKeyMessageFormat(::StringW value);
    // Get instance field reference: private System.Object <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Key$k__BackingField();
    // Get instance field reference: private System.Type <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$Type$k__BackingField();
    // Get instance field reference: private readonly System.Nullable`1<UnityEngine.AddressableAssets.Addressables/MergeMode> <MergeMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::AddressableAssets::Addressables::MergeMode>& dyn_$MergeMode$k__BackingField();
    // Get instance field reference: private UnityEngine.AddressableAssets.AddressablesImpl m_Addressables
    [[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AddressablesImpl*& dyn_m_Addressables();
    // public System.Object get_Key()
    // Offset: 0x5042EF4
    ::Il2CppObject* get_Key();
    // private System.Void set_Key(System.Object value)
    // Offset: 0x5042EFC
    void set_Key(::Il2CppObject* value);
    // public System.Type get_Type()
    // Offset: 0x5042F04
    ::System::Type* get_Type();
    // private System.Void set_Type(System.Type value)
    // Offset: 0x5042F0C
    void set_Type(::System::Type* value);
    // public System.Nullable`1<UnityEngine.AddressableAssets.Addressables/MergeMode> get_MergeMode()
    // Offset: 0x5042F14
    ::System::Nullable_1<::UnityEngine::AddressableAssets::Addressables::MergeMode> get_MergeMode();
    // public System.Void .ctor(System.Object key)
    // Offset: 0x5042F1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(key)));
    }
    // public System.Void .ctor(System.Object key, System.Type type)
    // Offset: 0x5042FA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::Il2CppObject* key, ::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(key, type)));
    }
    // System.Void .ctor(System.Object key, System.Type type, UnityEngine.AddressableAssets.AddressablesImpl addr)
    // Offset: 0x5043030
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::Il2CppObject* key, ::System::Type* type, ::UnityEngine::AddressableAssets::AddressablesImpl* addr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(key, type, addr)));
    }
    // public System.Void .ctor(System.Object key, System.Type type, UnityEngine.AddressableAssets.Addressables/MergeMode mergeMode)
    // Offset: 0x50430D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::Il2CppObject* key, ::System::Type* type, ::UnityEngine::AddressableAssets::Addressables::MergeMode mergeMode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(key, type, mergeMode)));
    }
    // System.Void .ctor(System.Object key, System.Type type, UnityEngine.AddressableAssets.Addressables/MergeMode mergeMode, UnityEngine.AddressableAssets.AddressablesImpl addr)
    // Offset: 0x504319C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::Il2CppObject* key, ::System::Type* type, ::UnityEngine::AddressableAssets::Addressables::MergeMode mergeMode, ::UnityEngine::AddressableAssets::AddressablesImpl* addr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(key, type, mergeMode, addr)));
    }
    // public System.Void .ctor()
    // Offset: 0x5043280
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>()));
    }
    // public System.Void .ctor(System.String message)
    // Offset: 0x50432D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(message)));
    }
    // public System.Void .ctor(System.String message, System.Exception innerException)
    // Offset: 0x5043340
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::StringW message, ::System::Exception* innerException) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(message, innerException)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo message, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x50433B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvalidKeyException* New_ctor(::System::Runtime::Serialization::SerializationInfo* message, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AddressableAssets::InvalidKeyException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvalidKeyException*, creationType>(message, context)));
    }
    // private System.String GetMessageForSingleKey(System.String keyString)
    // Offset: 0x5043B40
    ::StringW GetMessageForSingleKey(::StringW keyString);
    // private System.String GetMessageforMergeKeys(System.Collections.Generic.List`1<System.String> keys)
    // Offset: 0x504450C
    ::StringW GetMessageforMergeKeys(::System::Collections::Generic::List_1<::StringW>* keys);
    // private System.Collections.Generic.HashSet`1<System.Type> GetTypesForKey(System.String keyString)
    // Offset: 0x5045560
    ::System::Collections::Generic::HashSet_1<::System::Type*>* GetTypesForKey(::StringW keyString);
    // private System.Boolean GetTypeToKeys(System.String key, System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.String>> typeToKeys)
    // Offset: 0x5045C78
    bool GetTypeToKeys(::StringW key, ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::StringW>*>* typeToKeys);
    // private System.String GetCSVString(System.Collections.Generic.IEnumerable`1<System.String> enumerator, System.String prefixSingle, System.String prefixPlural)
    // Offset: 0x5044130
    ::StringW GetCSVString(::System::Collections::Generic::IEnumerable_1<::StringW>* enumerator, ::StringW prefixSingle, ::StringW prefixPlural);
    // public override System.String get_Message()
    // Offset: 0x5043430
    // Implemented from: System.Exception
    // Base method: System.String Exception::get_Message()
    ::StringW get_Message();
  }; // UnityEngine.AddressableAssets.InvalidKeyException
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::AddressableAssets::InvalidKeyException::*)()>(&UnityEngine::AddressableAssets::InvalidKeyException::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::set_Key
// Il2CppName: set_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::InvalidKeyException::*)(::Il2CppObject*)>(&UnityEngine::AddressableAssets::InvalidKeyException::set_Key)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "set_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::AddressableAssets::InvalidKeyException::*)()>(&UnityEngine::AddressableAssets::InvalidKeyException::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::InvalidKeyException::*)(::System::Type*)>(&UnityEngine::AddressableAssets::InvalidKeyException::set_Type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::get_MergeMode
// Il2CppName: get_MergeMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::UnityEngine::AddressableAssets::Addressables::MergeMode> (UnityEngine::AddressableAssets::InvalidKeyException::*)()>(&UnityEngine::AddressableAssets::InvalidKeyException::get_MergeMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "get_MergeMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::GetMessageForSingleKey
// Il2CppName: GetMessageForSingleKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AddressableAssets::InvalidKeyException::*)(::StringW)>(&UnityEngine::AddressableAssets::InvalidKeyException::GetMessageForSingleKey)> {
  static const MethodInfo* get() {
    static auto* keyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "GetMessageForSingleKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyString});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::GetMessageforMergeKeys
// Il2CppName: GetMessageforMergeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AddressableAssets::InvalidKeyException::*)(::System::Collections::Generic::List_1<::StringW>*)>(&UnityEngine::AddressableAssets::InvalidKeyException::GetMessageforMergeKeys)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "GetMessageforMergeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::GetTypesForKey
// Il2CppName: GetTypesForKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::System::Type*>* (UnityEngine::AddressableAssets::InvalidKeyException::*)(::StringW)>(&UnityEngine::AddressableAssets::InvalidKeyException::GetTypesForKey)> {
  static const MethodInfo* get() {
    static auto* keyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "GetTypesForKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyString});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::GetTypeToKeys
// Il2CppName: GetTypeToKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AddressableAssets::InvalidKeyException::*)(::StringW, ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::StringW>*>*)>(&UnityEngine::AddressableAssets::InvalidKeyException::GetTypeToKeys)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeToKeys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "GetTypeToKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, typeToKeys});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::GetCSVString
// Il2CppName: GetCSVString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AddressableAssets::InvalidKeyException::*)(::System::Collections::Generic::IEnumerable_1<::StringW>*, ::StringW, ::StringW)>(&UnityEngine::AddressableAssets::InvalidKeyException::GetCSVString)> {
  static const MethodInfo* get() {
    static auto* enumerator = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* prefixSingle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefixPlural = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "GetCSVString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumerator, prefixSingle, prefixPlural});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::InvalidKeyException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AddressableAssets::InvalidKeyException::*)()>(&UnityEngine::AddressableAssets::InvalidKeyException::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::InvalidKeyException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
