// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: GorillaNetworking.CosmeticsController
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: FXP
namespace FXP {
  // Skipping declaration: EDisplayMode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: TextMesh
  class TextMesh;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: GorillaNetworking::Store
namespace GorillaNetworking::Store {
  // Forward declaring type: StoreUpdateEvent
  class StoreUpdateEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CosmeticStand
  class CosmeticStand;
}
// Completed forward declares
// Type namespace: FXP
namespace FXP {
  // Forward declaring type: CosmeticItemPrefab
  class CosmeticItemPrefab;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FXP::CosmeticItemPrefab);
DEFINE_IL2CPP_ARG_TYPE(::FXP::CosmeticItemPrefab*, "FXP", "CosmeticItemPrefab");
// Type namespace: FXP
namespace FXP {
  // WARNING Size may be invalid!
  // Autogenerated type: FXP.CosmeticItemPrefab
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticItemPrefab : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::FXP::CosmeticItemPrefab::EDisplayMode
    struct EDisplayMode;
    // Nested type: ::FXP::CosmeticItemPrefab::$DoAttractTimer$d__78
    class $DoAttractTimer$d__78;
    // Nested type: ::FXP::CosmeticItemPrefab::$DoPreviewTimer$d__75
    class $DoPreviewTimer$d__75;
    // Nested type: ::FXP::CosmeticItemPrefab::$PlayCountdownTimer$d__69
    class $PlayCountdownTimer$d__69;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FXP.CosmeticItemPrefab/EDisplayMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [SerializeField] Offset: FFFFFFFF
    struct EDisplayMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EDisplayMode
      constexpr EDisplayMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode NULL
      static constexpr const int _NULL = 0;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode NULL
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_NULL();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode NULL
      static void _set_NULL(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode HIDDEN
      static constexpr const int HIDDEN = 1;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode HIDDEN
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_HIDDEN();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode HIDDEN
      static void _set_HIDDEN(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode PREVIEW
      static constexpr const int PREVIEW = 2;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode PREVIEW
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_PREVIEW();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode PREVIEW
      static void _set_PREVIEW(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode ATTRACT
      static constexpr const int ATTRACT = 3;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode ATTRACT
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_ATTRACT();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode ATTRACT
      static void _set_ATTRACT(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode PURCHASE
      static constexpr const int PURCHASE = 4;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode PURCHASE
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_PURCHASE();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode PURCHASE
      static void _set_PURCHASE(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // static field const value: static public FXP.CosmeticItemPrefab/EDisplayMode POSTPURCHASE
      static constexpr const int POSTPURCHASE = 5;
      // Get static field: static public FXP.CosmeticItemPrefab/EDisplayMode POSTPURCHASE
      static ::FXP::CosmeticItemPrefab::EDisplayMode _get_POSTPURCHASE();
      // Set static field: static public FXP.CosmeticItemPrefab/EDisplayMode POSTPURCHASE
      static void _set_POSTPURCHASE(::FXP::CosmeticItemPrefab::EDisplayMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // FXP.CosmeticItemPrefab/EDisplayMode
    #pragma pack(pop)
    static check_size<sizeof(CosmeticItemPrefab::EDisplayMode), 0 + sizeof(int)> __FXP_CosmeticItemPrefab_EDisplayModeSizeCheck;
    static_assert(sizeof(CosmeticItemPrefab::EDisplayMode) == 0x4);
    public:
    // public System.String PedestalID
    // Size: 0x8
    // Offset: 0x20
    ::StringW PedestalID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Nullable`1<System.Guid> itemGUID
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::System::Nullable_1<::System::Guid> itemGUID;
    // private System.String itemName
    // Size: 0x8
    // Offset: 0x40
    ::StringW itemName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Transform> sockets
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* sockets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private System.Int32 itemSocket
    // Size: 0x4
    // Offset: 0x50
    int itemSocket;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Nullable`1<System.Int32> hoursInPreviewMode
    // Size: 0xFFFFFFFF
    // Offset: 0x54
    ::System::Nullable_1<int> hoursInPreviewMode;
    // private System.Nullable`1<System.Int32> hoursInAttractMode
    // Size: 0xFFFFFFFF
    // Offset: 0x5C
    ::System::Nullable_1<int> hoursInAttractMode;
    // private UnityEngine.Mesh pedestalMesh
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Mesh* pedestalMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Mesh mannequinMesh
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Mesh* mannequinMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Mesh cosmeticMesh
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Mesh* cosmeticMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.AudioClip sfxPreviewMode
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AudioClip* sfxPreviewMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip sfxAttractMode
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AudioClip* sfxAttractMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip sfxPurchaseMode
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::AudioClip* sfxPurchaseMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.ParticleSystem vfxPreviewMode
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::ParticleSystem* vfxPreviewMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem vfxAttractMode
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::ParticleSystem* vfxAttractMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem vfxPurchaseMode
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::ParticleSystem* vfxPurchaseMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.GameObject goPedestal
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* goPedestal;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goMannequin
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* goMannequin;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goCosmeticItem
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* goCosmeticItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goCosmeticItemGameObject
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* goCosmeticItemGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goCosmeticItemNameplate
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::GameObject* goCosmeticItemNameplate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goClock
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::GameObject* goClock;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goPreviewMode
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::GameObject* goPreviewMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goAttractMode
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::GameObject* goAttractMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject goPurchaseMode
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::GameObject* goPurchaseMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Mesh defaultPedestalMesh
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Mesh* defaultPedestalMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material defaultPedestalMaterial
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Material* defaultPedestalMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Mesh defaultMannequinMesh
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Mesh* defaultMannequinMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material defaultMannequinMaterial
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Material* defaultMannequinMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Mesh defaultCosmeticMesh
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Mesh* defaultCosmeticMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material defaultCosmeticMaterial
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Material* defaultCosmeticMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.String defaultItemText
    // Size: 0x8
    // Offset: 0x128
    ::StringW defaultItemText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 defaultHoursInPreviewMode
    // Size: 0x4
    // Offset: 0x130
    int defaultHoursInPreviewMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 defaultHoursInAttractMode
    // Size: 0x4
    // Offset: 0x134
    int defaultHoursInAttractMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.AudioClip defaultSFXPreviewMode
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::AudioClip* defaultSFXPreviewMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip defaultSFXAttractMode
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::AudioClip* defaultSFXAttractMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip defaultSFXPurchaseMode
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::AudioClip* defaultSFXPurchaseMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.GameObject goCosmeticItemMeshAtlas
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::GameObject* goCosmeticItemMeshAtlas;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioSource CountdownSFX
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::AudioSource* CountdownSFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private FXP.CosmeticItemPrefab/EDisplayMode currentDisplayMode
    // Size: 0x4
    // Offset: 0x160
    ::FXP::CosmeticItemPrefab::EDisplayMode currentDisplayMode;
    // Field size check
    static_assert(sizeof(::FXP::CosmeticItemPrefab::EDisplayMode) == 0x4);
    // private System.Boolean isValid
    // Size: 0x1
    // Offset: 0x164
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.AudioSource goPreviewModeSFX
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::AudioSource* goPreviewModeSFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource goAttractModeSFX
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::AudioSource* goAttractModeSFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource goPurchaseModeSFX
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::AudioSource* goPurchaseModeSFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.ParticleSystem goAttractModeVFX
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::ParticleSystem* goAttractModeVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem goPurchaseModeVFX
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::ParticleSystem* goPurchaseModeVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private System.Collections.IEnumerator coroutinePreviewTimer
    // Size: 0x8
    // Offset: 0x190
    ::System::Collections::IEnumerator* coroutinePreviewTimer;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // private System.Collections.IEnumerator coroutineAttractTimer
    // Size: 0x8
    // Offset: 0x198
    ::System::Collections::IEnumerator* coroutineAttractTimer;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // private System.DateTime startTime
    // Size: 0x8
    // Offset: 0x1A0
    ::System::DateTime startTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private UnityEngine.TextMesh clockTextMesh
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::TextMesh* clockTextMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextMesh*) == 0x8);
    // private GorillaNetworking.Store.StoreUpdateEvent currentUpdateEvent
    // Size: 0x8
    // Offset: 0x1B0
    ::GorillaNetworking::Store::StoreUpdateEvent* currentUpdateEvent;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::Store::StoreUpdateEvent*) == 0x8);
    // public CosmeticStand cosmeticStand
    // Size: 0x8
    // Offset: 0x1B8
    ::GlobalNamespace::CosmeticStand* cosmeticStand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CosmeticStand*) == 0x8);
    // public System.String itemID
    // Size: 0x8
    // Offset: 0x1C0
    ::StringW itemID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String oldItemID
    // Size: 0x8
    // Offset: 0x1C8
    ::StringW oldItemID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Coroutine countdownTimerCoRoutine
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::Coroutine* countdownTimerCoRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: public System.String PedestalID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PedestalID();
    // Get instance field reference: private System.Nullable`1<System.Guid> itemGUID
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::Guid>& dyn_itemGUID();
    // Get instance field reference: private System.String itemName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemName();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> sockets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn_sockets();
    // Get instance field reference: private System.Int32 itemSocket
    [[deprecated("Use field access instead!")]] int& dyn_itemSocket();
    // Get instance field reference: private System.Nullable`1<System.Int32> hoursInPreviewMode
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_hoursInPreviewMode();
    // Get instance field reference: private System.Nullable`1<System.Int32> hoursInAttractMode
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_hoursInAttractMode();
    // Get instance field reference: private UnityEngine.Mesh pedestalMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_pedestalMesh();
    // Get instance field reference: private UnityEngine.Mesh mannequinMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_mannequinMesh();
    // Get instance field reference: private UnityEngine.Mesh cosmeticMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_cosmeticMesh();
    // Get instance field reference: private UnityEngine.AudioClip sfxPreviewMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_sfxPreviewMode();
    // Get instance field reference: private UnityEngine.AudioClip sfxAttractMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_sfxAttractMode();
    // Get instance field reference: private UnityEngine.AudioClip sfxPurchaseMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_sfxPurchaseMode();
    // Get instance field reference: private UnityEngine.ParticleSystem vfxPreviewMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_vfxPreviewMode();
    // Get instance field reference: private UnityEngine.ParticleSystem vfxAttractMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_vfxAttractMode();
    // Get instance field reference: private UnityEngine.ParticleSystem vfxPurchaseMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_vfxPurchaseMode();
    // Get instance field reference: private UnityEngine.GameObject goPedestal
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goPedestal();
    // Get instance field reference: private UnityEngine.GameObject goMannequin
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goMannequin();
    // Get instance field reference: private UnityEngine.GameObject goCosmeticItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goCosmeticItem();
    // Get instance field reference: private UnityEngine.GameObject goCosmeticItemGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goCosmeticItemGameObject();
    // Get instance field reference: private UnityEngine.GameObject goCosmeticItemNameplate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goCosmeticItemNameplate();
    // Get instance field reference: private UnityEngine.GameObject goClock
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goClock();
    // Get instance field reference: private UnityEngine.GameObject goPreviewMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goPreviewMode();
    // Get instance field reference: private UnityEngine.GameObject goAttractMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goAttractMode();
    // Get instance field reference: private UnityEngine.GameObject goPurchaseMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goPurchaseMode();
    // Get instance field reference: private UnityEngine.Mesh defaultPedestalMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_defaultPedestalMesh();
    // Get instance field reference: private UnityEngine.Material defaultPedestalMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_defaultPedestalMaterial();
    // Get instance field reference: private UnityEngine.Mesh defaultMannequinMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_defaultMannequinMesh();
    // Get instance field reference: private UnityEngine.Material defaultMannequinMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_defaultMannequinMaterial();
    // Get instance field reference: private UnityEngine.Mesh defaultCosmeticMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_defaultCosmeticMesh();
    // Get instance field reference: private UnityEngine.Material defaultCosmeticMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_defaultCosmeticMaterial();
    // Get instance field reference: private System.String defaultItemText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_defaultItemText();
    // Get instance field reference: private System.Int32 defaultHoursInPreviewMode
    [[deprecated("Use field access instead!")]] int& dyn_defaultHoursInPreviewMode();
    // Get instance field reference: private System.Int32 defaultHoursInAttractMode
    [[deprecated("Use field access instead!")]] int& dyn_defaultHoursInAttractMode();
    // Get instance field reference: private UnityEngine.AudioClip defaultSFXPreviewMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_defaultSFXPreviewMode();
    // Get instance field reference: private UnityEngine.AudioClip defaultSFXAttractMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_defaultSFXAttractMode();
    // Get instance field reference: private UnityEngine.AudioClip defaultSFXPurchaseMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_defaultSFXPurchaseMode();
    // Get instance field reference: private UnityEngine.GameObject goCosmeticItemMeshAtlas
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_goCosmeticItemMeshAtlas();
    // Get instance field reference: public UnityEngine.AudioSource CountdownSFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_CountdownSFX();
    // Get instance field reference: private FXP.CosmeticItemPrefab/EDisplayMode currentDisplayMode
    [[deprecated("Use field access instead!")]] ::FXP::CosmeticItemPrefab::EDisplayMode& dyn_currentDisplayMode();
    // Get instance field reference: private System.Boolean isValid
    [[deprecated("Use field access instead!")]] bool& dyn_isValid();
    // Get instance field reference: private UnityEngine.AudioSource goPreviewModeSFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_goPreviewModeSFX();
    // Get instance field reference: private UnityEngine.AudioSource goAttractModeSFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_goAttractModeSFX();
    // Get instance field reference: private UnityEngine.AudioSource goPurchaseModeSFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_goPurchaseModeSFX();
    // Get instance field reference: private UnityEngine.ParticleSystem goAttractModeVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_goAttractModeVFX();
    // Get instance field reference: private UnityEngine.ParticleSystem goPurchaseModeVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_goPurchaseModeVFX();
    // Get instance field reference: private System.Collections.IEnumerator coroutinePreviewTimer
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_coroutinePreviewTimer();
    // Get instance field reference: private System.Collections.IEnumerator coroutineAttractTimer
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_coroutineAttractTimer();
    // Get instance field reference: private System.DateTime startTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_startTime();
    // Get instance field reference: private UnityEngine.TextMesh clockTextMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& dyn_clockTextMesh();
    // Get instance field reference: private GorillaNetworking.Store.StoreUpdateEvent currentUpdateEvent
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::Store::StoreUpdateEvent*& dyn_currentUpdateEvent();
    // Get instance field reference: public CosmeticStand cosmeticStand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CosmeticStand*& dyn_cosmeticStand();
    // Get instance field reference: public System.String itemID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemID();
    // Get instance field reference: public System.String oldItemID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_oldItemID();
    // Get instance field reference: private UnityEngine.Coroutine countdownTimerCoRoutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_countdownTimerCoRoutine();
    // private System.Void Awake()
    // Offset: 0x2813BF8
    void Awake();
    // private System.Void JonsAwakeCode()
    // Offset: 0x2813BFC
    void JonsAwakeCode();
    // private System.Void OnDisable()
    // Offset: 0x2814030
    void OnDisable();
    // private System.Void OnEnable()
    // Offset: 0x2814178
    void OnEnable();
    // public System.Void SwitchDisplayMode(FXP.CosmeticItemPrefab/EDisplayMode NewDisplayMode)
    // Offset: 0x2814404
    void SwitchDisplayMode(::FXP::CosmeticItemPrefab::EDisplayMode NewDisplayMode);
    // private System.Void Update()
    // Offset: 0x2814D6C
    void Update();
    // private System.Void UpdateClock()
    // Offset: 0x2814D70
    void UpdateClock();
    // public System.Void SetDefaultProperties()
    // Offset: 0x2814EB0
    void SetDefaultProperties();
    // private System.Void ClearCosmeticMesh()
    // Offset: 0x2815048
    void ClearCosmeticMesh();
    // private System.Void ClearCosmeticAtlas()
    // Offset: 0x28150A4
    void ClearCosmeticAtlas();
    // public System.Void SetCosmeticItemFromCosmeticController(GorillaNetworking.CosmeticsController/CosmeticItem item)
    // Offset: 0x281511C
    void SetCosmeticItemFromCosmeticController(::GorillaNetworking::CosmeticsController::CosmeticItem item);
    // public System.Void SetCosmeticStand()
    // Offset: 0x2815420
    void SetCosmeticStand();
    // public System.Void SetStoreUpdateEvent(GorillaNetworking.Store.StoreUpdateEvent storeUpdateEvent, System.Boolean playFX)
    // Offset: 0x2815520
    void SetStoreUpdateEvent(::GorillaNetworking::Store::StoreUpdateEvent* storeUpdateEvent, bool playFX);
    // private System.Collections.IEnumerator PlayCountdownTimer()
    // Offset: 0x28156A0
    ::System::Collections::IEnumerator* PlayCountdownTimer();
    // public System.Void StopCountdownCoroutine()
    // Offset: 0x281410C
    void StopCountdownCoroutine();
    // private System.Void PlaySFX()
    // Offset: 0x2815734
    void PlaySFX();
    // public System.Void SetCosmeticItemProperties(System.String WhichGUID, System.String Name, System.Collections.Generic.List`1<UnityEngine.Transform> SocketsList, System.Int32 Socket, System.String PedestalMesh, System.String MannequinMesh)
    // Offset: 0x281585C
    void SetCosmeticItemProperties(::StringW WhichGUID, ::StringW Name, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* SocketsList, int Socket, ::StringW PedestalMesh, ::StringW MannequinMesh);
    // private System.Void StartPreviewTimer()
    // Offset: 0x2814AA4
    void StartPreviewTimer();
    // private System.Void StopPreviewTimer()
    // Offset: 0x2814964
    void StopPreviewTimer();
    // private System.Collections.IEnumerator DoPreviewTimer(System.DateTime ReleaseTime)
    // Offset: 0x2815950
    ::System::Collections::IEnumerator* DoPreviewTimer(::System::DateTime ReleaseTime);
    // public System.Void StartAttractTimer()
    // Offset: 0x2814C08
    void StartAttractTimer();
    // private System.Void StopAttractTimer()
    // Offset: 0x28149F4
    void StopAttractTimer();
    // private System.Collections.IEnumerator DoAttractTimer(System.DateTime ReleaseTime)
    // Offset: 0x28159F4
    ::System::Collections::IEnumerator* DoAttractTimer(::System::DateTime ReleaseTime);
    // public System.Void .ctor()
    // Offset: 0x2815A98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticItemPrefab* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FXP::CosmeticItemPrefab::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticItemPrefab*, creationType>()));
    }
  }; // FXP.CosmeticItemPrefab
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FXP::CosmeticItemPrefab::EDisplayMode, "FXP", "CosmeticItemPrefab/EDisplayMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::JonsAwakeCode
// Il2CppName: JonsAwakeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::JonsAwakeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "JonsAwakeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SwitchDisplayMode
// Il2CppName: SwitchDisplayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)(::FXP::CosmeticItemPrefab::EDisplayMode)>(&FXP::CosmeticItemPrefab::SwitchDisplayMode)> {
  static const MethodInfo* get() {
    static auto* NewDisplayMode = &::il2cpp_utils::GetClassFromName("FXP", "CosmeticItemPrefab/EDisplayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SwitchDisplayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NewDisplayMode});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::UpdateClock
// Il2CppName: UpdateClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::UpdateClock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "UpdateClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SetDefaultProperties
// Il2CppName: SetDefaultProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::SetDefaultProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SetDefaultProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::ClearCosmeticMesh
// Il2CppName: ClearCosmeticMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::ClearCosmeticMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "ClearCosmeticMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::ClearCosmeticAtlas
// Il2CppName: ClearCosmeticAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::ClearCosmeticAtlas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "ClearCosmeticAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SetCosmeticItemFromCosmeticController
// Il2CppName: SetCosmeticItemFromCosmeticController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)(::GorillaNetworking::CosmeticsController::CosmeticItem)>(&FXP::CosmeticItemPrefab::SetCosmeticItemFromCosmeticController)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SetCosmeticItemFromCosmeticController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SetCosmeticStand
// Il2CppName: SetCosmeticStand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::SetCosmeticStand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SetCosmeticStand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SetStoreUpdateEvent
// Il2CppName: SetStoreUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)(::GorillaNetworking::Store::StoreUpdateEvent*, bool)>(&FXP::CosmeticItemPrefab::SetStoreUpdateEvent)> {
  static const MethodInfo* get() {
    static auto* storeUpdateEvent = &::il2cpp_utils::GetClassFromName("GorillaNetworking.Store", "StoreUpdateEvent")->byval_arg;
    static auto* playFX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SetStoreUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storeUpdateEvent, playFX});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::PlayCountdownTimer
// Il2CppName: PlayCountdownTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::PlayCountdownTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "PlayCountdownTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::StopCountdownCoroutine
// Il2CppName: StopCountdownCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::StopCountdownCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "StopCountdownCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::PlaySFX
// Il2CppName: PlaySFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::PlaySFX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "PlaySFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::SetCosmeticItemProperties
// Il2CppName: SetCosmeticItemProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)(::StringW, ::StringW, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*, int, ::StringW, ::StringW)>(&FXP::CosmeticItemPrefab::SetCosmeticItemProperties)> {
  static const MethodInfo* get() {
    static auto* WhichGUID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* Name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* SocketsList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    static auto* Socket = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* PedestalMesh = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* MannequinMesh = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "SetCosmeticItemProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{WhichGUID, Name, SocketsList, Socket, PedestalMesh, MannequinMesh});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::StartPreviewTimer
// Il2CppName: StartPreviewTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::StartPreviewTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "StartPreviewTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::StopPreviewTimer
// Il2CppName: StopPreviewTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::StopPreviewTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "StopPreviewTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::DoPreviewTimer
// Il2CppName: DoPreviewTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (FXP::CosmeticItemPrefab::*)(::System::DateTime)>(&FXP::CosmeticItemPrefab::DoPreviewTimer)> {
  static const MethodInfo* get() {
    static auto* ReleaseTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "DoPreviewTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ReleaseTime});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::StartAttractTimer
// Il2CppName: StartAttractTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::StartAttractTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "StartAttractTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::StopAttractTimer
// Il2CppName: StopAttractTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FXP::CosmeticItemPrefab::*)()>(&FXP::CosmeticItemPrefab::StopAttractTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "StopAttractTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::DoAttractTimer
// Il2CppName: DoAttractTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (FXP::CosmeticItemPrefab::*)(::System::DateTime)>(&FXP::CosmeticItemPrefab::DoAttractTimer)> {
  static const MethodInfo* get() {
    static auto* ReleaseTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FXP::CosmeticItemPrefab*), "DoAttractTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ReleaseTime});
  }
};
// Writing MetadataGetter for method: FXP::CosmeticItemPrefab::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
