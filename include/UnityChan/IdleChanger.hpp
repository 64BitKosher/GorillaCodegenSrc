// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.AnimatorStateInfo
#include "UnityEngine/AnimatorStateInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityChan
namespace UnityChan {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Keyboard
  class Keyboard;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityChan
namespace UnityChan {
  // Forward declaring type: IdleChanger
  class IdleChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityChan::IdleChanger);
DEFINE_IL2CPP_ARG_TYPE(::UnityChan::IdleChanger*, "UnityChan", "IdleChanger");
// Type namespace: UnityChan
namespace UnityChan {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: UnityChan.IdleChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class IdleChanger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityChan::IdleChanger::$RandomChange$d__12
    class $RandomChange$d__12;
    public:
    // private UnityEngine.AnimatorStateInfo currentState
    // Size: 0x24
    // Offset: 0x20
    ::UnityEngine::AnimatorStateInfo currentState;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimatorStateInfo) == 0x24);
    // private UnityEngine.AnimatorStateInfo previousState
    // Size: 0x24
    // Offset: 0x44
    ::UnityEngine::AnimatorStateInfo previousState;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimatorStateInfo) == 0x24);
    // public System.Boolean _random
    // Size: 0x1
    // Offset: 0x68
    bool random;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: random and: threshold
    char __padding2[0x3] = {};
    // public System.Single _threshold
    // Size: 0x4
    // Offset: 0x6C
    float threshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _interval
    // Size: 0x4
    // Offset: 0x70
    float interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isGUI
    // Size: 0x1
    // Offset: 0x74
    bool isGUI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isGUI and: UnityChanA
    char __padding5[0x3] = {};
    // public UnityEngine.Animator UnityChanA
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Animator* UnityChanA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.Animator UnityChanB
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Animator* UnityChanB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.InputSystem.Keyboard kb
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::InputSystem::Keyboard* kb;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Keyboard*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.AnimatorStateInfo currentState
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimatorStateInfo& dyn_currentState();
    // Get instance field reference: private UnityEngine.AnimatorStateInfo previousState
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimatorStateInfo& dyn_previousState();
    // Get instance field reference: public System.Boolean _random
    [[deprecated("Use field access instead!")]] bool& dyn__random();
    // Get instance field reference: public System.Single _threshold
    [[deprecated("Use field access instead!")]] float& dyn__threshold();
    // Get instance field reference: public System.Single _interval
    [[deprecated("Use field access instead!")]] float& dyn__interval();
    // Get instance field reference: public System.Boolean isGUI
    [[deprecated("Use field access instead!")]] bool& dyn_isGUI();
    // Get instance field reference: public UnityEngine.Animator UnityChanA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_UnityChanA();
    // Get instance field reference: public UnityEngine.Animator UnityChanB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_UnityChanB();
    // Get instance field reference: private UnityEngine.InputSystem.Keyboard kb
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Keyboard*& dyn_kb();
    // private System.Void Start()
    // Offset: 0x28E72D0
    void Start();
    // private System.Void Update()
    // Offset: 0x28E73B4
    void Update();
    // private System.Void OnGUI()
    // Offset: 0x28E7654
    void OnGUI();
    // private System.Collections.IEnumerator RandomChange()
    // Offset: 0x28E7828
    ::System::Collections::IEnumerator* RandomChange();
    // public System.Void .ctor()
    // Offset: 0x28E78BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IdleChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityChan::IdleChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IdleChanger*, creationType>()));
    }
  }; // UnityChan.IdleChanger
  #pragma pack(pop)
  static check_size<sizeof(IdleChanger), 136 + sizeof(::UnityEngine::InputSystem::Keyboard*)> __UnityChan_IdleChangerSizeCheck;
  static_assert(sizeof(IdleChanger) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityChan::IdleChanger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::IdleChanger::*)()>(&UnityChan::IdleChanger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::IdleChanger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::IdleChanger::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::IdleChanger::*)()>(&UnityChan::IdleChanger::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::IdleChanger*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::IdleChanger::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::IdleChanger::*)()>(&UnityChan::IdleChanger::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::IdleChanger*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::IdleChanger::RandomChange
// Il2CppName: RandomChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityChan::IdleChanger::*)()>(&UnityChan::IdleChanger::RandomChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::IdleChanger*), "RandomChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::IdleChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
