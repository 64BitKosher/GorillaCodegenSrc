// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityChan
namespace UnityChan {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Completed forward declares
// Type namespace: UnityChan
namespace UnityChan {
  // Forward declaring type: AutoBlink
  class AutoBlink;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityChan::AutoBlink);
DEFINE_IL2CPP_ARG_TYPE(::UnityChan::AutoBlink*, "UnityChan", "AutoBlink");
// Type namespace: UnityChan
namespace UnityChan {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: UnityChan.AutoBlink
  // [TokenAttribute] Offset: FFFFFFFF
  class AutoBlink : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityChan::AutoBlink::Status
    struct Status;
    // Nested type: ::UnityChan::AutoBlink::$RandomChange$d__22
    class $RandomChange$d__22;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityChan.AutoBlink/Status
    // [TokenAttribute] Offset: FFFFFFFF
    struct Status/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Status
      constexpr Status(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityChan.AutoBlink/Status Close
      static constexpr const int Close = 0;
      // Get static field: static public UnityChan.AutoBlink/Status Close
      static ::UnityChan::AutoBlink::Status _get_Close();
      // Set static field: static public UnityChan.AutoBlink/Status Close
      static void _set_Close(::UnityChan::AutoBlink::Status value);
      // static field const value: static public UnityChan.AutoBlink/Status HalfClose
      static constexpr const int HalfClose = 1;
      // Get static field: static public UnityChan.AutoBlink/Status HalfClose
      static ::UnityChan::AutoBlink::Status _get_HalfClose();
      // Set static field: static public UnityChan.AutoBlink/Status HalfClose
      static void _set_HalfClose(::UnityChan::AutoBlink::Status value);
      // static field const value: static public UnityChan.AutoBlink/Status Open
      static constexpr const int Open = 2;
      // Get static field: static public UnityChan.AutoBlink/Status Open
      static ::UnityChan::AutoBlink::Status _get_Open();
      // Set static field: static public UnityChan.AutoBlink/Status Open
      static void _set_Open(::UnityChan::AutoBlink::Status value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityChan.AutoBlink/Status
    #pragma pack(pop)
    static check_size<sizeof(AutoBlink::Status), 0 + sizeof(int)> __UnityChan_AutoBlink_StatusSizeCheck;
    static_assert(sizeof(AutoBlink::Status) == 0x4);
    public:
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x20
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: ref_SMR_EYE_DEF
    char __padding0[0x7] = {};
    // public UnityEngine.SkinnedMeshRenderer ref_SMR_EYE_DEF
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::SkinnedMeshRenderer* ref_SMR_EYE_DEF;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer ref_SMR_EL_DEF
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::SkinnedMeshRenderer* ref_SMR_EL_DEF;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // public System.Single ratio_Close
    // Size: 0x4
    // Offset: 0x38
    float ratio_Close;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ratio_HalfClose
    // Size: 0x4
    // Offset: 0x3C
    float ratio_HalfClose;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ratio_Open
    // Size: 0x4
    // Offset: 0x40
    float ratio_Open;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean timerStarted
    // Size: 0x1
    // Offset: 0x44
    bool timerStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isBlink
    // Size: 0x1
    // Offset: 0x45
    bool isBlink;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBlink and: timeBlink
    char __padding7[0x2] = {};
    // public System.Single timeBlink
    // Size: 0x4
    // Offset: 0x48
    float timeBlink;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeRemining
    // Size: 0x4
    // Offset: 0x4C
    float timeRemining;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single threshold
    // Size: 0x4
    // Offset: 0x50
    float threshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single interval
    // Size: 0x4
    // Offset: 0x54
    float interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityChan.AutoBlink/Status eyeStatus
    // Size: 0x4
    // Offset: 0x58
    ::UnityChan::AutoBlink::Status eyeStatus;
    // Field size check
    static_assert(sizeof(::UnityChan::AutoBlink::Status) == 0x4);
    public:
    // Get instance field reference: public System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer ref_SMR_EYE_DEF
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_ref_SMR_EYE_DEF();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer ref_SMR_EL_DEF
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_ref_SMR_EL_DEF();
    // Get instance field reference: public System.Single ratio_Close
    [[deprecated("Use field access instead!")]] float& dyn_ratio_Close();
    // Get instance field reference: public System.Single ratio_HalfClose
    [[deprecated("Use field access instead!")]] float& dyn_ratio_HalfClose();
    // Get instance field reference: public System.Single ratio_Open
    [[deprecated("Use field access instead!")]] float& dyn_ratio_Open();
    // Get instance field reference: private System.Boolean timerStarted
    [[deprecated("Use field access instead!")]] bool& dyn_timerStarted();
    // Get instance field reference: private System.Boolean isBlink
    [[deprecated("Use field access instead!")]] bool& dyn_isBlink();
    // Get instance field reference: public System.Single timeBlink
    [[deprecated("Use field access instead!")]] float& dyn_timeBlink();
    // Get instance field reference: private System.Single timeRemining
    [[deprecated("Use field access instead!")]] float& dyn_timeRemining();
    // Get instance field reference: public System.Single threshold
    [[deprecated("Use field access instead!")]] float& dyn_threshold();
    // Get instance field reference: public System.Single interval
    [[deprecated("Use field access instead!")]] float& dyn_interval();
    // Get instance field reference: private UnityChan.AutoBlink/Status eyeStatus
    [[deprecated("Use field access instead!")]] ::UnityChan::AutoBlink::Status& dyn_eyeStatus();
    // private System.Void Awake()
    // Offset: 0x28E6EE4
    void Awake();
    // private System.Void Start()
    // Offset: 0x28E6EE8
    void Start();
    // private System.Void ResetTimer()
    // Offset: 0x28E6F40
    void ResetTimer();
    // private System.Void Update()
    // Offset: 0x28E6F50
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x28E6FD0
    void LateUpdate();
    // private System.Void SetCloseEyes()
    // Offset: 0x28E702C
    void SetCloseEyes();
    // private System.Void SetHalfCloseEyes()
    // Offset: 0x28E706C
    void SetHalfCloseEyes();
    // private System.Void SetOpenEyes()
    // Offset: 0x28E70AC
    void SetOpenEyes();
    // private System.Collections.IEnumerator RandomChange()
    // Offset: 0x28E70EC
    ::System::Collections::IEnumerator* RandomChange();
    // public System.Void .ctor()
    // Offset: 0x28E7180
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AutoBlink* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityChan::AutoBlink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AutoBlink*, creationType>()));
    }
  }; // UnityChan.AutoBlink
  #pragma pack(pop)
  static check_size<sizeof(AutoBlink), 88 + sizeof(::UnityChan::AutoBlink::Status)> __UnityChan_AutoBlinkSizeCheck;
  static_assert(sizeof(AutoBlink) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityChan::AutoBlink::Status, "UnityChan", "AutoBlink/Status");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityChan::AutoBlink::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::ResetTimer
// Il2CppName: ResetTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::ResetTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "ResetTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::SetCloseEyes
// Il2CppName: SetCloseEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::SetCloseEyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "SetCloseEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::SetHalfCloseEyes
// Il2CppName: SetHalfCloseEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::SetHalfCloseEyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "SetHalfCloseEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::SetOpenEyes
// Il2CppName: SetOpenEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::SetOpenEyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "SetOpenEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::RandomChange
// Il2CppName: RandomChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityChan::AutoBlink::*)()>(&UnityChan::AutoBlink::RandomChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityChan::AutoBlink*), "RandomChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityChan::AutoBlink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
