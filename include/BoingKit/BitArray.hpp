// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BitArray
  struct BitArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BitArray, "BoingKit", "BitArray");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.BitArray
  // [TokenAttribute] Offset: FFFFFFFF
  struct BitArray/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32[] m_aBlock
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<int> m_aBlock;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating value type constructor for type: BitArray
    constexpr BitArray(::ArrayW<int> m_aBlock_ = ::ArrayW<int>(static_cast<void*>(nullptr))) noexcept : m_aBlock{m_aBlock_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<int>
    constexpr operator ::ArrayW<int>() const noexcept {
      return m_aBlock;
    }
    // Get instance field reference: private System.Int32[] m_aBlock
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_aBlock();
    // public System.Int32[] get_Blocks()
    // Offset: 0x2901690
    ::ArrayW<int> get_Blocks();
    // static private System.Int32 GetBlockIndex(System.Int32 index)
    // Offset: 0x2901698
    static int GetBlockIndex(int index);
    // static private System.Int32 GetSubIndex(System.Int32 index)
    // Offset: 0x29016AC
    static int GetSubIndex(int index);
    // static private System.Void SetBit(System.Int32 index, System.Boolean value, System.Int32[] blocks)
    // Offset: 0x29016C4
    static void SetBit(int index, bool value, ::ArrayW<int> blocks);
    // static private System.Boolean IsBitSet(System.Int32 index, System.Int32[] blocks)
    // Offset: 0x2901720
    static bool IsBitSet(int index, ::ArrayW<int> blocks);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x2901768
    BitArray(int capacity);
    // public System.Void Resize(System.Int32 capacity)
    // Offset: 0x2901864
    void Resize(int capacity);
    // public System.Void Clear()
    // Offset: 0x29017E4
    void Clear();
    // public System.Void SetAllBits(System.Boolean value)
    // Offset: 0x2901940
    void SetAllBits(bool value);
    // public System.Void SetBit(System.Int32 index, System.Boolean value)
    // Offset: 0x29019C8
    void SetBit(int index, bool value);
    // public System.Boolean IsBitSet(System.Int32 index)
    // Offset: 0x29019E0
    bool IsBitSet(int index);
  }; // BoingKit.BitArray
  #pragma pack(pop)
  static check_size<sizeof(BitArray), 0 + sizeof(::ArrayW<int>)> __BoingKit_BitArraySizeCheck;
  static_assert(sizeof(BitArray) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BitArray::get_Blocks
// Il2CppName: get_Blocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (BoingKit::BitArray::*)()>(&BoingKit::BitArray::get_Blocks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "get_Blocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::GetBlockIndex
// Il2CppName: GetBlockIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&BoingKit::BitArray::GetBlockIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "GetBlockIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::GetSubIndex
// Il2CppName: GetSubIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&BoingKit::BitArray::GetSubIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "GetSubIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::SetBit
// Il2CppName: SetBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, bool, ::ArrayW<int>)>(&BoingKit::BitArray::SetBit)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blocks = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "SetBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value, blocks});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::IsBitSet
// Il2CppName: IsBitSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::ArrayW<int>)>(&BoingKit::BitArray::IsBitSet)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blocks = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "IsBitSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, blocks});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::BitArray
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::BitArray::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BitArray::*)(int)>(&BoingKit::BitArray::Resize)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BitArray::*)()>(&BoingKit::BitArray::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::SetAllBits
// Il2CppName: SetAllBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BitArray::*)(bool)>(&BoingKit::BitArray::SetAllBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "SetAllBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::SetBit
// Il2CppName: SetBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BitArray::*)(int, bool)>(&BoingKit::BitArray::SetBit)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "SetBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: BoingKit::BitArray::IsBitSet
// Il2CppName: IsBitSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::BitArray::*)(int)>(&BoingKit::BitArray::IsBitSet)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BitArray), "IsBitSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
