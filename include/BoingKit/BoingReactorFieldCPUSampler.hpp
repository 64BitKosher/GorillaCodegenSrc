// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BoingKit.BoingManager/UpdateMode
#include "BoingKit/BoingManager_UpdateMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorField
  class BoingReactorField;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorFieldCPUSampler
  class BoingReactorFieldCPUSampler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingReactorFieldCPUSampler);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingReactorFieldCPUSampler*, "BoingKit", "BoingReactorFieldCPUSampler");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingReactorFieldCPUSampler
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingReactorFieldCPUSampler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BoingKit.BoingReactorField ReactorField
    // Size: 0x8
    // Offset: 0x20
    ::BoingKit::BoingReactorField* ReactorField;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingReactorField*) == 0x8);
    // public BoingKit.BoingManager/UpdateMode UpdateMode
    // Size: 0x4
    // Offset: 0x28
    ::BoingKit::BoingManager::UpdateMode UpdateMode;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingManager::UpdateMode) == 0x4);
    // public System.Single PositionSampleMultiplier
    // Size: 0x4
    // Offset: 0x2C
    float PositionSampleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RotationSampleMultiplier
    // Size: 0x4
    // Offset: 0x30
    float RotationSampleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_objPosition
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 m_objPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_objRotation
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Quaternion m_objRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: public BoingKit.BoingReactorField ReactorField
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingReactorField*& dyn_ReactorField();
    // Get instance field reference: public BoingKit.BoingManager/UpdateMode UpdateMode
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingManager::UpdateMode& dyn_UpdateMode();
    // Get instance field reference: public System.Single PositionSampleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_PositionSampleMultiplier();
    // Get instance field reference: public System.Single RotationSampleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_RotationSampleMultiplier();
    // Get instance field reference: private UnityEngine.Vector3 m_objPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_objPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_objRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_objRotation();
    // public System.Void OnEnable()
    // Offset: 0x28F7CB0
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x28F7D08
    void OnDisable();
    // public System.Void SampleFromField()
    // Offset: 0x28F7D60
    void SampleFromField();
    // public System.Void Restore()
    // Offset: 0x28F8130
    void Restore();
    // public System.Void .ctor()
    // Offset: 0x28F817C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingReactorFieldCPUSampler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingReactorFieldCPUSampler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingReactorFieldCPUSampler*, creationType>()));
    }
  }; // BoingKit.BoingReactorFieldCPUSampler
  #pragma pack(pop)
  static check_size<sizeof(BoingReactorFieldCPUSampler), 64 + sizeof(::UnityEngine::Quaternion)> __BoingKit_BoingReactorFieldCPUSamplerSizeCheck;
  static_assert(sizeof(BoingReactorFieldCPUSampler) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldCPUSampler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldCPUSampler::*)()>(&BoingKit::BoingReactorFieldCPUSampler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldCPUSampler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldCPUSampler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldCPUSampler::*)()>(&BoingKit::BoingReactorFieldCPUSampler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldCPUSampler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldCPUSampler::SampleFromField
// Il2CppName: SampleFromField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldCPUSampler::*)()>(&BoingKit::BoingReactorFieldCPUSampler::SampleFromField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldCPUSampler*), "SampleFromField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldCPUSampler::Restore
// Il2CppName: Restore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldCPUSampler::*)()>(&BoingKit::BoingReactorFieldCPUSampler::Restore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldCPUSampler*), "Restore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldCPUSampler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
