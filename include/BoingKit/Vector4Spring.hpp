// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: Vector4Spring
  struct Vector4Spring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::Vector4Spring, "BoingKit", "Vector4Spring");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.Vector4Spring
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector4Spring/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector4 Value
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Vector4 Value;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 Velocity
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Vector4 Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Creating value type constructor for type: Vector4Spring
    constexpr Vector4Spring(::UnityEngine::Vector4 Value_ = {}, ::UnityEngine::Vector4 Velocity_ = {}) noexcept : Value{Value_}, Velocity{Velocity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Stride
    static int _get_Stride();
    // Set static field: static public readonly System.Int32 Stride
    static void _set_Stride(int value);
    // Get instance field reference: public UnityEngine.Vector4 Value
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_Value();
    // Get instance field reference: public UnityEngine.Vector4 Velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_Velocity();
    // public System.Void Reset()
    // Offset: 0x2903C14
    void Reset();
    // public System.Void Reset(UnityEngine.Vector4 initValue)
    // Offset: 0x2903C74
    void Reset(::UnityEngine::Vector4 initValue);
    // public System.Void Reset(UnityEngine.Vector4 initValue, UnityEngine.Vector4 initVelocity)
    // Offset: 0x2903CCC
    void Reset(::UnityEngine::Vector4 initValue, ::UnityEngine::Vector4 initVelocity);
    // public UnityEngine.Vector4 TrackDampingRatio(UnityEngine.Vector4 targetValue, System.Single angularFrequency, System.Single dampingRatio, System.Single deltaTime)
    // Offset: 0x2903CE0
    ::UnityEngine::Vector4 TrackDampingRatio(::UnityEngine::Vector4 targetValue, float angularFrequency, float dampingRatio, float deltaTime);
    // public UnityEngine.Vector4 TrackHalfLife(UnityEngine.Vector4 targetValue, System.Single frequencyHz, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x2903FC0
    ::UnityEngine::Vector4 TrackHalfLife(::UnityEngine::Vector4 targetValue, float frequencyHz, float halfLife, float deltaTime);
    // public UnityEngine.Vector4 TrackExponential(UnityEngine.Vector4 targetValue, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x290410C
    ::UnityEngine::Vector4 TrackExponential(::UnityEngine::Vector4 targetValue, float halfLife, float deltaTime);
    // static private System.Void .cctor()
    // Offset: 0x2904230
    static void _cctor();
  }; // BoingKit.Vector4Spring
  #pragma pack(pop)
  static check_size<sizeof(Vector4Spring), 16 + sizeof(::UnityEngine::Vector4)> __BoingKit_Vector4SpringSizeCheck;
  static_assert(sizeof(Vector4Spring) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::Vector4Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Vector4Spring::*)()>(&BoingKit::Vector4Spring::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Vector4Spring::*)(::UnityEngine::Vector4)>(&BoingKit::Vector4Spring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Vector4Spring::*)(::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&BoingKit::Vector4Spring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* initVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue, initVelocity});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::TrackDampingRatio
// Il2CppName: TrackDampingRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (BoingKit::Vector4Spring::*)(::UnityEngine::Vector4, float, float, float)>(&BoingKit::Vector4Spring::TrackDampingRatio)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* angularFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dampingRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "TrackDampingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, angularFrequency, dampingRatio, deltaTime});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::TrackHalfLife
// Il2CppName: TrackHalfLife
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (BoingKit::Vector4Spring::*)(::UnityEngine::Vector4, float, float, float)>(&BoingKit::Vector4Spring::TrackHalfLife)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* frequencyHz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "TrackHalfLife", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, frequencyHz, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::TrackExponential
// Il2CppName: TrackExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (BoingKit::Vector4Spring::*)(::UnityEngine::Vector4, float, float)>(&BoingKit::Vector4Spring::TrackExponential)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), "TrackExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: BoingKit::Vector4Spring::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::Vector4Spring::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Vector4Spring), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
