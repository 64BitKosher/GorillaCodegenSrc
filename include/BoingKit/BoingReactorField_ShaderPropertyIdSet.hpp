// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingReactorField
#include "BoingKit/BoingReactorField.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingReactorField::ShaderPropertyIdSet);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingReactorField::ShaderPropertyIdSet*, "BoingKit", "BoingReactorField/ShaderPropertyIdSet");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingReactorField/ShaderPropertyIdSet
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingReactorField::ShaderPropertyIdSet : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 MoveParams
    // Size: 0x4
    // Offset: 0x10
    int MoveParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WrapParams
    // Size: 0x4
    // Offset: 0x14
    int WrapParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Effectors
    // Size: 0x4
    // Offset: 0x18
    int Effectors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 EffectorIndices
    // Size: 0x4
    // Offset: 0x1C
    int EffectorIndices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ReactorParams
    // Size: 0x4
    // Offset: 0x20
    int ReactorParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ComputeFieldParams
    // Size: 0x4
    // Offset: 0x24
    int ComputeFieldParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ComputeCells
    // Size: 0x4
    // Offset: 0x28
    int ComputeCells;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RenderFieldParams
    // Size: 0x4
    // Offset: 0x2C
    int RenderFieldParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RenderCells
    // Size: 0x4
    // Offset: 0x30
    int RenderCells;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PositionSampleMultiplier
    // Size: 0x4
    // Offset: 0x34
    int PositionSampleMultiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RotationSampleMultiplier
    // Size: 0x4
    // Offset: 0x38
    int RotationSampleMultiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PropagationParams
    // Size: 0x4
    // Offset: 0x3C
    int PropagationParams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 MoveParams
    [[deprecated("Use field access instead!")]] int& dyn_MoveParams();
    // Get instance field reference: public System.Int32 WrapParams
    [[deprecated("Use field access instead!")]] int& dyn_WrapParams();
    // Get instance field reference: public System.Int32 Effectors
    [[deprecated("Use field access instead!")]] int& dyn_Effectors();
    // Get instance field reference: public System.Int32 EffectorIndices
    [[deprecated("Use field access instead!")]] int& dyn_EffectorIndices();
    // Get instance field reference: public System.Int32 ReactorParams
    [[deprecated("Use field access instead!")]] int& dyn_ReactorParams();
    // Get instance field reference: public System.Int32 ComputeFieldParams
    [[deprecated("Use field access instead!")]] int& dyn_ComputeFieldParams();
    // Get instance field reference: public System.Int32 ComputeCells
    [[deprecated("Use field access instead!")]] int& dyn_ComputeCells();
    // Get instance field reference: public System.Int32 RenderFieldParams
    [[deprecated("Use field access instead!")]] int& dyn_RenderFieldParams();
    // Get instance field reference: public System.Int32 RenderCells
    [[deprecated("Use field access instead!")]] int& dyn_RenderCells();
    // Get instance field reference: public System.Int32 PositionSampleMultiplier
    [[deprecated("Use field access instead!")]] int& dyn_PositionSampleMultiplier();
    // Get instance field reference: public System.Int32 RotationSampleMultiplier
    [[deprecated("Use field access instead!")]] int& dyn_RotationSampleMultiplier();
    // Get instance field reference: public System.Int32 PropagationParams
    [[deprecated("Use field access instead!")]] int& dyn_PropagationParams();
    // public System.Void .ctor()
    // Offset: 0x28F7A34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingReactorField::ShaderPropertyIdSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingReactorField::ShaderPropertyIdSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingReactorField::ShaderPropertyIdSet*, creationType>()));
    }
  }; // BoingKit.BoingReactorField/ShaderPropertyIdSet
  #pragma pack(pop)
  static check_size<sizeof(BoingReactorField::ShaderPropertyIdSet), 60 + sizeof(int)> __BoingKit_BoingReactorField_ShaderPropertyIdSetSizeCheck;
  static_assert(sizeof(BoingReactorField::ShaderPropertyIdSet) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingReactorField::ShaderPropertyIdSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
