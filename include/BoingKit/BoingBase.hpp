// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BoingKit.Version
#include "BoingKit/Version.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingBase
  class BoingBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingBase);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingBase*, "BoingKit", "BoingBase");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingBase
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private BoingKit.Version m_currentVersion
    // Size: 0xC
    // Offset: 0x20
    ::BoingKit::Version m_currentVersion;
    // Field size check
    static_assert(sizeof(::BoingKit::Version) == 0xC);
    // private BoingKit.Version m_previousVersion
    // Size: 0xC
    // Offset: 0x2C
    ::BoingKit::Version m_previousVersion;
    // Field size check
    static_assert(sizeof(::BoingKit::Version) == 0xC);
    // private BoingKit.Version m_initialVersion
    // Size: 0xC
    // Offset: 0x38
    ::BoingKit::Version m_initialVersion;
    // Field size check
    static_assert(sizeof(::BoingKit::Version) == 0xC);
    public:
    // Get instance field reference: private BoingKit.Version m_currentVersion
    [[deprecated("Use field access instead!")]] ::BoingKit::Version& dyn_m_currentVersion();
    // Get instance field reference: private BoingKit.Version m_previousVersion
    [[deprecated("Use field access instead!")]] ::BoingKit::Version& dyn_m_previousVersion();
    // Get instance field reference: private BoingKit.Version m_initialVersion
    [[deprecated("Use field access instead!")]] ::BoingKit::Version& dyn_m_initialVersion();
    // public BoingKit.Version get_CurrentVersion()
    // Offset: 0x28E8AE0
    ::BoingKit::Version get_CurrentVersion();
    // public BoingKit.Version get_PreviousVersion()
    // Offset: 0x28E8AF0
    ::BoingKit::Version get_PreviousVersion();
    // public BoingKit.Version get_InitialVersion()
    // Offset: 0x28E8B00
    ::BoingKit::Version get_InitialVersion();
    // protected System.Void OnUpgrade(BoingKit.Version oldVersion, BoingKit.Version newVersion)
    // Offset: 0x28E8B10
    void OnUpgrade(::BoingKit::Version oldVersion, ::BoingKit::Version newVersion);
    // public System.Void .ctor()
    // Offset: 0x28E8BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingBase*, creationType>()));
    }
  }; // BoingKit.BoingBase
  #pragma pack(pop)
  static check_size<sizeof(BoingBase), 56 + sizeof(::BoingKit::Version)> __BoingKit_BoingBaseSizeCheck;
  static_assert(sizeof(BoingBase) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingBase::get_CurrentVersion
// Il2CppName: get_CurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Version (BoingKit::BoingBase::*)()>(&BoingKit::BoingBase::get_CurrentVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBase*), "get_CurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBase::get_PreviousVersion
// Il2CppName: get_PreviousVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Version (BoingKit::BoingBase::*)()>(&BoingKit::BoingBase::get_PreviousVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBase*), "get_PreviousVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBase::get_InitialVersion
// Il2CppName: get_InitialVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Version (BoingKit::BoingBase::*)()>(&BoingKit::BoingBase::get_InitialVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBase*), "get_InitialVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBase::OnUpgrade
// Il2CppName: OnUpgrade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBase::*)(::BoingKit::Version, ::BoingKit::Version)>(&BoingKit::BoingBase::OnUpgrade)> {
  static const MethodInfo* get() {
    static auto* oldVersion = &::il2cpp_utils::GetClassFromName("BoingKit", "Version")->byval_arg;
    static auto* newVersion = &::il2cpp_utils::GetClassFromName("BoingKit", "Version")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBase*), "OnUpgrade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldVersion, newVersion});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
