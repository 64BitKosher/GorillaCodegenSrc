// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: Codec
  class Codec;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::Codec);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::Codec*, "BoingKit", "Codec");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.Codec
  // [TokenAttribute] Offset: FFFFFFFF
  class Codec : public ::Il2CppObject {
    public:
    // Nested type: ::BoingKit::Codec::IntFloat
    struct IntFloat;
    // Get static field: static public readonly System.Int32 FnvDefaultBasis
    static int _get_FnvDefaultBasis();
    // Set static field: static public readonly System.Int32 FnvDefaultBasis
    static void _set_FnvDefaultBasis(int value);
    // Get static field: static public readonly System.Int32 FnvPrime
    static int _get_FnvPrime();
    // Set static field: static public readonly System.Int32 FnvPrime
    static void _set_FnvPrime(int value);
    // static public System.Single PackSaturated(System.Single a, System.Single b)
    // Offset: 0x28FFDDC
    static float PackSaturated(float a, float b);
    // static public System.Single PackSaturated(UnityEngine.Vector2 v)
    // Offset: 0x28FFE08
    static float PackSaturated(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector2 UnpackSaturated(System.Single f)
    // Offset: 0x28FFE8C
    static ::UnityEngine::Vector2 UnpackSaturated(float f);
    // static public UnityEngine.Vector2 OctWrap(UnityEngine.Vector2 v)
    // Offset: 0x28FFED0
    static ::UnityEngine::Vector2 OctWrap(::UnityEngine::Vector2 v);
    // static public System.Single PackNormal(UnityEngine.Vector3 n)
    // Offset: 0x28FFF48
    static float PackNormal(::UnityEngine::Vector3 n);
    // static public UnityEngine.Vector3 UnpackNormal(System.Single f)
    // Offset: 0x290004C
    static ::UnityEngine::Vector3 UnpackNormal(float f);
    // static public System.UInt32 PackRgb(UnityEngine.Color color)
    // Offset: 0x2900220
    static uint PackRgb(::UnityEngine::Color color);
    // static public UnityEngine.Color UnpackRgb(System.UInt32 i)
    // Offset: 0x2900270
    static ::UnityEngine::Color UnpackRgb(uint i);
    // static public System.UInt32 PackRgba(UnityEngine.Color color)
    // Offset: 0x29002A4
    static uint PackRgba(::UnityEngine::Color color);
    // static public UnityEngine.Color UnpackRgba(System.UInt32 i)
    // Offset: 0x290030C
    static ::UnityEngine::Color UnpackRgba(uint i);
    // static public System.UInt32 Pack8888(System.UInt32 x, System.UInt32 y, System.UInt32 z, System.UInt32 w)
    // Offset: 0x2900348
    static uint Pack8888(uint x, uint y, uint z, uint w);
    // static public System.Void Unpack8888(System.UInt32 i, out System.UInt32 x, out System.UInt32 y, out System.UInt32 z, out System.UInt32 w)
    // Offset: 0x290035C
    static void Unpack8888(uint i, ByRef<uint> x, ByRef<uint> y, ByRef<uint> z, ByRef<uint> w);
    // static private System.Int32 IntReinterpret(System.Single f)
    // Offset: 0x2900380
    static int IntReinterpret(float f);
    // static public System.Int32 HashConcat(System.Int32 hash, System.Int32 i)
    // Offset: 0x2900388
    static int HashConcat(int hash, int i);
    // static public System.Int32 HashConcat(System.Int32 hash, System.Int64 i)
    // Offset: 0x29003F8
    static int HashConcat(int hash, int64_t i);
    // static public System.Int32 HashConcat(System.Int32 hash, System.Single f)
    // Offset: 0x2900464
    static int HashConcat(int hash, float f);
    // static public System.Int32 HashConcat(System.Int32 hash, System.Boolean b)
    // Offset: 0x29004C8
    static int HashConcat(int hash, bool b);
    // static public System.Int32 HashConcat(System.Int32 hash, params System.Int32[] ints)
    // Offset: 0x290052C
    static int HashConcat(int hash, ::ArrayW<int> ints);
    // static public System.Int32 HashConcat(System.Int32 hash, params System.Single[] floats)
    // Offset: 0x29005E4
    static int HashConcat(int hash, ::ArrayW<float> floats);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Vector2 v)
    // Offset: 0x290069C
    static int HashConcat(int hash, ::UnityEngine::Vector2 v);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Vector3 v)
    // Offset: 0x290074C
    static int HashConcat(int hash, ::UnityEngine::Vector3 v);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Vector4 v)
    // Offset: 0x2900814
    static int HashConcat(int hash, ::UnityEngine::Vector4 v);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Quaternion q)
    // Offset: 0x29008EC
    static int HashConcat(int hash, ::UnityEngine::Quaternion q);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Color c)
    // Offset: 0x29009C4
    static int HashConcat(int hash, ::UnityEngine::Color c);
    // static public System.Int32 HashConcat(System.Int32 hash, UnityEngine.Transform t)
    // Offset: 0x2900A9C
    static int HashConcat(int hash, ::UnityEngine::Transform* t);
    // static public System.Int32 Hash(System.Int32 i)
    // Offset: 0x2900B18
    static int Hash(int i);
    // static public System.Int32 Hash(System.Int64 i)
    // Offset: 0x2900B78
    static int Hash(int64_t i);
    // static public System.Int32 Hash(System.Single f)
    // Offset: 0x2900BD8
    static int Hash(float f);
    // static public System.Int32 Hash(System.Boolean b)
    // Offset: 0x2900C40
    static int Hash(bool b);
    // static public System.Int32 Hash(params System.Int32[] ints)
    // Offset: 0x2900CA0
    static int Hash(::ArrayW<int> ints);
    // static public System.Int32 Hash(params System.Single[] floats)
    // Offset: 0x2900D00
    static int Hash(::ArrayW<float> floats);
    // static public System.Int32 Hash(UnityEngine.Vector2 v)
    // Offset: 0x2900D60
    static int Hash(::UnityEngine::Vector2 v);
    // static public System.Int32 Hash(UnityEngine.Vector3 v)
    // Offset: 0x2900DD0
    static int Hash(::UnityEngine::Vector3 v);
    // static public System.Int32 Hash(UnityEngine.Vector4 v)
    // Offset: 0x2900E50
    static int Hash(::UnityEngine::Vector4 v);
    // static public System.Int32 Hash(UnityEngine.Quaternion q)
    // Offset: 0x2900ED8
    static int Hash(::UnityEngine::Quaternion q);
    // static public System.Int32 Hash(UnityEngine.Color c)
    // Offset: 0x2900F60
    static int Hash(::UnityEngine::Color c);
    // static private System.Int32 HashTransformHierarchyRecurvsive(System.Int32 hash, UnityEngine.Transform t)
    // Offset: 0x2900FE8
    static int HashTransformHierarchyRecurvsive(int hash, ::UnityEngine::Transform* t);
    // static public System.Int32 HashTransformHierarchy(UnityEngine.Transform t)
    // Offset: 0x29010E4
    static int HashTransformHierarchy(::UnityEngine::Transform* t);
    // public System.Void .ctor()
    // Offset: 0x2901144
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Codec* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::Codec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Codec*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x290114C
    static void _cctor();
  }; // BoingKit.Codec
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::Codec::PackSaturated
// Il2CppName: PackSaturated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&BoingKit::Codec::PackSaturated)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "PackSaturated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::PackSaturated
// Il2CppName: PackSaturated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2)>(&BoingKit::Codec::PackSaturated)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "PackSaturated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::UnpackSaturated
// Il2CppName: UnpackSaturated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(float)>(&BoingKit::Codec::UnpackSaturated)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "UnpackSaturated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::OctWrap
// Il2CppName: OctWrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2)>(&BoingKit::Codec::OctWrap)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "OctWrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::PackNormal
// Il2CppName: PackNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&BoingKit::Codec::PackNormal)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "PackNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::UnpackNormal
// Il2CppName: UnpackNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float)>(&BoingKit::Codec::UnpackNormal)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "UnpackNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::PackRgb
// Il2CppName: PackRgb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Color)>(&BoingKit::Codec::PackRgb)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "PackRgb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::UnpackRgb
// Il2CppName: UnpackRgb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(uint)>(&BoingKit::Codec::UnpackRgb)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "UnpackRgb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::PackRgba
// Il2CppName: PackRgba
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::UnityEngine::Color)>(&BoingKit::Codec::PackRgba)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "PackRgba", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::UnpackRgba
// Il2CppName: UnpackRgba
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(uint)>(&BoingKit::Codec::UnpackRgba)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "UnpackRgba", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Pack8888
// Il2CppName: Pack8888
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, uint, uint)>(&BoingKit::Codec::Pack8888)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Pack8888", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Unpack8888
// Il2CppName: Unpack8888
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint>, ByRef<uint>, ByRef<uint>, ByRef<uint>)>(&BoingKit::Codec::Unpack8888)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Unpack8888", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, x, y, z, w});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::IntReinterpret
// Il2CppName: IntReinterpret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&BoingKit::Codec::IntReinterpret)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "IntReinterpret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int64_t)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, float)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, f});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, bool)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, b});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::ArrayW<int>)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, ints});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::ArrayW<float>)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* floats = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, floats});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Vector2)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Vector3)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Vector4)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Quaternion)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, q});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Color)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, c});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashConcat
// Il2CppName: HashConcat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Transform*)>(&BoingKit::Codec::HashConcat)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashConcat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, t});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(bool)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* ints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ints});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<float>)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* floats = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{floats});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector2)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector3)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Vector4)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Quaternion)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Color)>(&BoingKit::Codec::Hash)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashTransformHierarchyRecurvsive
// Il2CppName: HashTransformHierarchyRecurvsive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Transform*)>(&BoingKit::Codec::HashTransformHierarchyRecurvsive)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashTransformHierarchyRecurvsive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, t});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::HashTransformHierarchy
// Il2CppName: HashTransformHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Transform*)>(&BoingKit::Codec::HashTransformHierarchy)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), "HashTransformHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: BoingKit::Codec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::Codec::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::Codec::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Codec*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
