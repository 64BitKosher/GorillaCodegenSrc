// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingBase
#include "BoingKit/BoingBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingEffector
  class BoingEffector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingEffector);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingEffector*, "BoingKit", "BoingEffector");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingEffector
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingEffector : public ::BoingKit::BoingBase {
    public:
    // Nested type: ::BoingKit::BoingEffector::Params
    struct Params;
    public:
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0x44
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FullEffectRadiusRatio
    // Size: 0x4
    // Offset: 0x48
    float FullEffectRadiusRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxImpulseSpeed
    // Size: 0x4
    // Offset: 0x4C
    float MaxImpulseSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean ContinuousMotion
    // Size: 0x1
    // Offset: 0x50
    bool ContinuousMotion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ContinuousMotion and: MoveDistance
    char __padding3[0x3] = {};
    // public System.Single MoveDistance
    // Size: 0x4
    // Offset: 0x54
    float MoveDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LinearImpulse
    // Size: 0x4
    // Offset: 0x58
    float LinearImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RotationAngle
    // Size: 0x4
    // Offset: 0x5C
    float RotationAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AngularImpulse
    // Size: 0x4
    // Offset: 0x60
    float AngularImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean DrawAffectedReactorFieldGizmos
    // Size: 0x1
    // Offset: 0x64
    bool DrawAffectedReactorFieldGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DrawAffectedReactorFieldGizmos and: m_currPosition
    char __padding8[0x3] = {};
    // private UnityEngine.Vector3 m_currPosition
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 m_currPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_prevPosition
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 m_prevPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_linearVelocity
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 m_linearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // Get instance field reference: public System.Single FullEffectRadiusRatio
    [[deprecated("Use field access instead!")]] float& dyn_FullEffectRadiusRatio();
    // Get instance field reference: public System.Single MaxImpulseSpeed
    [[deprecated("Use field access instead!")]] float& dyn_MaxImpulseSpeed();
    // Get instance field reference: public System.Boolean ContinuousMotion
    [[deprecated("Use field access instead!")]] bool& dyn_ContinuousMotion();
    // Get instance field reference: public System.Single MoveDistance
    [[deprecated("Use field access instead!")]] float& dyn_MoveDistance();
    // Get instance field reference: public System.Single LinearImpulse
    [[deprecated("Use field access instead!")]] float& dyn_LinearImpulse();
    // Get instance field reference: public System.Single RotationAngle
    [[deprecated("Use field access instead!")]] float& dyn_RotationAngle();
    // Get instance field reference: public System.Single AngularImpulse
    [[deprecated("Use field access instead!")]] float& dyn_AngularImpulse();
    // Get instance field reference: public System.Boolean DrawAffectedReactorFieldGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_DrawAffectedReactorFieldGizmos();
    // Get instance field reference: private UnityEngine.Vector3 m_currPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_currPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_prevPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_prevPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_linearVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_linearVelocity();
    // public UnityEngine.Vector3 get_LinearVelocity()
    // Offset: 0x28ECF5C
    ::UnityEngine::Vector3 get_LinearVelocity();
    // public System.Single get_LinearSpeed()
    // Offset: 0x28ECF68
    float get_LinearSpeed();
    // public System.Void OnEnable()
    // Offset: 0x28ECFE8
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x28ED1A8
    void OnDisable();
    // public System.Void Update()
    // Offset: 0x28ED2E4
    void Update();
    // public System.Void OnDrawGizmosSelected()
    // Offset: 0x28ED3DC
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x28ED4A0
    // Implemented from: BoingKit.BoingBase
    // Base method: System.Void BoingBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingEffector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingEffector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingEffector*, creationType>()));
    }
  }; // BoingKit.BoingEffector
  #pragma pack(pop)
  static check_size<sizeof(BoingEffector), 128 + sizeof(::UnityEngine::Vector3)> __BoingKit_BoingEffectorSizeCheck;
  static_assert(sizeof(BoingEffector) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingEffector::get_LinearVelocity
// Il2CppName: get_LinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::get_LinearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "get_LinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::get_LinearSpeed
// Il2CppName: get_LinearSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::get_LinearSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "get_LinearSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::*)()>(&BoingKit::BoingEffector::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
