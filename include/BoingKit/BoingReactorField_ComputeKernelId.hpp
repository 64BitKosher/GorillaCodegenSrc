// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingReactorField
#include "BoingKit/BoingReactorField.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingReactorField::ComputeKernelId);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingReactorField::ComputeKernelId*, "BoingKit", "BoingReactorField/ComputeKernelId");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingReactorField/ComputeKernelId
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingReactorField::ComputeKernelId : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 InitKernel
    // Size: 0x4
    // Offset: 0x10
    int InitKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MoveKernel
    // Size: 0x4
    // Offset: 0x14
    int MoveKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WrapXKernel
    // Size: 0x4
    // Offset: 0x18
    int WrapXKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WrapYKernel
    // Size: 0x4
    // Offset: 0x1C
    int WrapYKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WrapZKernel
    // Size: 0x4
    // Offset: 0x20
    int WrapZKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ExecuteKernel
    // Size: 0x4
    // Offset: 0x24
    int ExecuteKernel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 InitKernel
    [[deprecated("Use field access instead!")]] int& dyn_InitKernel();
    // Get instance field reference: public System.Int32 MoveKernel
    [[deprecated("Use field access instead!")]] int& dyn_MoveKernel();
    // Get instance field reference: public System.Int32 WrapXKernel
    [[deprecated("Use field access instead!")]] int& dyn_WrapXKernel();
    // Get instance field reference: public System.Int32 WrapYKernel
    [[deprecated("Use field access instead!")]] int& dyn_WrapYKernel();
    // Get instance field reference: public System.Int32 WrapZKernel
    [[deprecated("Use field access instead!")]] int& dyn_WrapZKernel();
    // Get instance field reference: public System.Int32 ExecuteKernel
    [[deprecated("Use field access instead!")]] int& dyn_ExecuteKernel();
    // public System.Void .ctor()
    // Offset: 0x28F7CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingReactorField::ComputeKernelId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingReactorField::ComputeKernelId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingReactorField::ComputeKernelId*, creationType>()));
    }
  }; // BoingKit.BoingReactorField/ComputeKernelId
  #pragma pack(pop)
  static check_size<sizeof(BoingReactorField::ComputeKernelId), 36 + sizeof(int)> __BoingKit_BoingReactorField_ComputeKernelIdSizeCheck;
  static_assert(sizeof(BoingReactorField::ComputeKernelId) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingReactorField::ComputeKernelId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
