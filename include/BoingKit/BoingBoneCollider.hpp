// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingBoneCollider
  class BoingBoneCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingBoneCollider);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingBoneCollider*, "BoingKit", "BoingBoneCollider");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingBoneCollider
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingBoneCollider : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::BoingKit::BoingBoneCollider::Type
    struct Type;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BoingKit.BoingBoneCollider/Type
    // [TokenAttribute] Offset: FFFFFFFF
    struct Type/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BoingKit.BoingBoneCollider/Type Sphere
      static constexpr const int Sphere = 0;
      // Get static field: static public BoingKit.BoingBoneCollider/Type Sphere
      static ::BoingKit::BoingBoneCollider::Type _get_Sphere();
      // Set static field: static public BoingKit.BoingBoneCollider/Type Sphere
      static void _set_Sphere(::BoingKit::BoingBoneCollider::Type value);
      // static field const value: static public BoingKit.BoingBoneCollider/Type Capsule
      static constexpr const int Capsule = 1;
      // Get static field: static public BoingKit.BoingBoneCollider/Type Capsule
      static ::BoingKit::BoingBoneCollider::Type _get_Capsule();
      // Set static field: static public BoingKit.BoingBoneCollider/Type Capsule
      static void _set_Capsule(::BoingKit::BoingBoneCollider::Type value);
      // static field const value: static public BoingKit.BoingBoneCollider/Type Box
      static constexpr const int Box = 2;
      // Get static field: static public BoingKit.BoingBoneCollider/Type Box
      static ::BoingKit::BoingBoneCollider::Type _get_Box();
      // Set static field: static public BoingKit.BoingBoneCollider/Type Box
      static void _set_Box(::BoingKit::BoingBoneCollider::Type value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BoingKit.BoingBoneCollider/Type
    #pragma pack(pop)
    static check_size<sizeof(BoingBoneCollider::Type), 0 + sizeof(int)> __BoingKit_BoingBoneCollider_TypeSizeCheck;
    static_assert(sizeof(BoingBoneCollider::Type) == 0x4);
    public:
    // public BoingKit.BoingBoneCollider/Type Shape
    // Size: 0x4
    // Offset: 0x20
    ::BoingKit::BoingBoneCollider::Type Shape;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingBoneCollider::Type) == 0x4);
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0x24
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Height
    // Size: 0x4
    // Offset: 0x28
    float Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 Dimensions
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 Dimensions;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public BoingKit.BoingBoneCollider/Type Shape
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingBoneCollider::Type& dyn_Shape();
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // Get instance field reference: public System.Single Height
    [[deprecated("Use field access instead!")]] float& dyn_Height();
    // Get instance field reference: public UnityEngine.Vector3 Dimensions
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Dimensions();
    // public UnityEngine.Bounds get_Bounds()
    // Offset: 0x28E9900
    ::UnityEngine::Bounds get_Bounds();
    // public System.Boolean Collide(UnityEngine.Vector3 boneCenter, System.Single boneRadius, out UnityEngine.Vector3 push)
    // Offset: 0x28E9CE4
    bool Collide(::UnityEngine::Vector3 boneCenter, float boneRadius, ByRef<::UnityEngine::Vector3> push);
    // public System.Void OnValidate()
    // Offset: 0x28EA0FC
    void OnValidate();
    // public System.Void OnDrawGizmos()
    // Offset: 0x28EA12C
    void OnDrawGizmos();
    // public System.Void DrawGizmos()
    // Offset: 0x28EA130
    void DrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x28EA92C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingBoneCollider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingBoneCollider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingBoneCollider*, creationType>()));
    }
  }; // BoingKit.BoingBoneCollider
  #pragma pack(pop)
  static check_size<sizeof(BoingBoneCollider), 44 + sizeof(::UnityEngine::Vector3)> __BoingKit_BoingBoneColliderSizeCheck;
  static_assert(sizeof(BoingBoneCollider) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingBoneCollider::Type, "BoingKit", "BoingBoneCollider/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (BoingKit::BoingBoneCollider::*)()>(&BoingKit::BoingBoneCollider::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBoneCollider*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::Collide
// Il2CppName: Collide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::BoingBoneCollider::*)(::UnityEngine::Vector3, float, ByRef<::UnityEngine::Vector3>)>(&BoingKit::BoingBoneCollider::Collide)> {
  static const MethodInfo* get() {
    static auto* boneCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* boneRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* push = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBoneCollider*), "Collide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneCenter, boneRadius, push});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBoneCollider::*)()>(&BoingKit::BoingBoneCollider::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBoneCollider*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBoneCollider::*)()>(&BoingKit::BoingBoneCollider::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBoneCollider*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBoneCollider::*)()>(&BoingKit::BoingBoneCollider::DrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBoneCollider*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBoneCollider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
