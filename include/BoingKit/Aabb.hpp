// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: BoingKit.BoingEffector
#include "BoingKit/BoingEffector.hpp"
// Completed includes
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: Aabb
  struct Aabb;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::Aabb, "BoingKit", "Aabb");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.Aabb
  // [TokenAttribute] Offset: FFFFFFFF
  struct Aabb/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Min
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Min;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Max
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 Max;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: Aabb
    constexpr Aabb(::UnityEngine::Vector3 Min_ = {}, ::UnityEngine::Vector3 Max_ = {}) noexcept : Min{Min_}, Max{Max_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Min
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Min();
    // Get instance field reference: public UnityEngine.Vector3 Max
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Max();
    // public System.Single get_MinX()
    // Offset: 0x29011B8
    float get_MinX();
    // public System.Void set_MinX(System.Single value)
    // Offset: 0x29011C0
    void set_MinX(float value);
    // public System.Single get_MinY()
    // Offset: 0x29011C8
    float get_MinY();
    // public System.Void set_MinY(System.Single value)
    // Offset: 0x29011D0
    void set_MinY(float value);
    // public System.Single get_MinZ()
    // Offset: 0x29011D8
    float get_MinZ();
    // public System.Void set_MinZ(System.Single value)
    // Offset: 0x29011E0
    void set_MinZ(float value);
    // public System.Single get_MaxX()
    // Offset: 0x29011E8
    float get_MaxX();
    // public System.Void set_MaxX(System.Single value)
    // Offset: 0x29011F0
    void set_MaxX(float value);
    // public System.Single get_MaxY()
    // Offset: 0x29011F8
    float get_MaxY();
    // public System.Void set_MaxY(System.Single value)
    // Offset: 0x2901200
    void set_MaxY(float value);
    // public System.Single get_MaxZ()
    // Offset: 0x2901208
    float get_MaxZ();
    // public System.Void set_MaxZ(System.Single value)
    // Offset: 0x2901210
    void set_MaxZ(float value);
    // public UnityEngine.Vector3 get_Center()
    // Offset: 0x2901218
    ::UnityEngine::Vector3 get_Center();
    // public UnityEngine.Vector3 get_Size()
    // Offset: 0x2901248
    ::UnityEngine::Vector3 get_Size();
    // static public BoingKit.Aabb get_Empty()
    // Offset: 0x2901278
    static ::BoingKit::Aabb get_Empty();
    // static public BoingKit.Aabb FromPoint(UnityEngine.Vector3 p)
    // Offset: 0x29012A0
    static ::BoingKit::Aabb FromPoint(::UnityEngine::Vector3 p);
    // static public BoingKit.Aabb FromPoints(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x2901324
    static ::BoingKit::Aabb FromPoints(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // public System.Void .ctor(UnityEngine.Vector3 min, UnityEngine.Vector3 max)
    // Offset: 0x2901290
    // ABORTED: conflicts with another method.  Aabb(::UnityEngine::Vector3 min, ::UnityEngine::Vector3 max);
    // public System.Void Include(UnityEngine.Vector3 p)
    // Offset: 0x29012D8
    void Include(::UnityEngine::Vector3 p);
    // public System.Boolean Contains(UnityEngine.Vector3 p)
    // Offset: 0x290138C
    bool Contains(::UnityEngine::Vector3 p);
    // public System.Boolean ContainsX(UnityEngine.Vector3 p)
    // Offset: 0x29013E0
    bool ContainsX(::UnityEngine::Vector3 p);
    // public System.Boolean ContainsY(UnityEngine.Vector3 p)
    // Offset: 0x2901404
    bool ContainsY(::UnityEngine::Vector3 p);
    // public System.Boolean ContainsZ(UnityEngine.Vector3 p)
    // Offset: 0x2901428
    bool ContainsZ(::UnityEngine::Vector3 p);
    // public System.Boolean Intersects(BoingKit.Aabb rhs)
    // Offset: 0x290144C
    bool Intersects(::BoingKit::Aabb rhs);
    // public System.Boolean Intersects(ref BoingKit.BoingEffector/Params effector)
    // Offset: 0x29014B8
    bool Intersects(ByRef<::BoingKit::BoingEffector::Params> effector);
    // public BoingKit.Aabb Expand(System.Single amount)
    // Offset: 0x2901620
    ::BoingKit::Aabb Expand(float amount);
  }; // BoingKit.Aabb
  #pragma pack(pop)
  static check_size<sizeof(Aabb), 12 + sizeof(::UnityEngine::Vector3)> __BoingKit_AabbSizeCheck;
  static_assert(sizeof(Aabb) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::Aabb::get_MinX
// Il2CppName: get_MinX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MinX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MinX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MinX
// Il2CppName: set_MinX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MinX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MinX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_MinY
// Il2CppName: get_MinY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MinY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MinY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MinY
// Il2CppName: set_MinY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MinY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MinY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_MinZ
// Il2CppName: get_MinZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MinZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MinZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MinZ
// Il2CppName: set_MinZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MinZ)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MinZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_MaxX
// Il2CppName: get_MaxX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MaxX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MaxX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MaxX
// Il2CppName: set_MaxX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MaxX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MaxX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_MaxY
// Il2CppName: get_MaxY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MaxY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MaxY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MaxY
// Il2CppName: set_MaxY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MaxY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MaxY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_MaxZ
// Il2CppName: get_MaxZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_MaxZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_MaxZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::set_MaxZ
// Il2CppName: set_MaxZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::set_MaxZ)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "set_MaxZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_Center
// Il2CppName: get_Center
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_Center)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_Center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (BoingKit::Aabb::*)()>(&BoingKit::Aabb::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Aabb (*)()>(&BoingKit::Aabb::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::FromPoint
// Il2CppName: FromPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Aabb (*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::FromPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "FromPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::FromPoints
// Il2CppName: FromPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Aabb (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&BoingKit::Aabb::FromPoints)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "FromPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::Aabb
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::Aabb::Include
// Il2CppName: Include
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Aabb::*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::Include)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "Include", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::Contains)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::ContainsX
// Il2CppName: ContainsX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::ContainsX)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "ContainsX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::ContainsY
// Il2CppName: ContainsY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::ContainsY)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "ContainsY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::ContainsZ
// Il2CppName: ContainsZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(::UnityEngine::Vector3)>(&BoingKit::Aabb::ContainsZ)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "ContainsZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(::BoingKit::Aabb)>(&BoingKit::Aabb::Intersects)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("BoingKit", "Aabb")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Aabb::*)(ByRef<::BoingKit::BoingEffector::Params>)>(&BoingKit::Aabb::Intersects)> {
  static const MethodInfo* get() {
    static auto* effector = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingEffector/Params")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effector});
  }
};
// Writing MetadataGetter for method: BoingKit::Aabb::Expand
// Il2CppName: Expand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Aabb (BoingKit::Aabb::*)(float)>(&BoingKit::Aabb::Expand)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Aabb), "Expand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
