// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingEffector
#include "BoingKit/BoingEffector.hpp"
// Including type: BoingKit.Bits32
#include "BoingKit/Bits32.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingEffector::Params, "BoingKit", "BoingEffector/Params");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.BoingEffector/Params
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoingEffector::Params/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 PrevPosition
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 PrevPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_padding0
    // Size: 0x4
    // Offset: 0xC
    float m_padding0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 CurrPosition
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 CurrPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_padding1
    // Size: 0x4
    // Offset: 0x1C
    float m_padding1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 LinearVelocityDir
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 LinearVelocityDir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_padding2
    // Size: 0x4
    // Offset: 0x2C
    float m_padding2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0x30
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FullEffectRadius
    // Size: 0x4
    // Offset: 0x34
    float FullEffectRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MoveDistance
    // Size: 0x4
    // Offset: 0x38
    float MoveDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LinearImpulse
    // Size: 0x4
    // Offset: 0x3C
    float LinearImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RotateAngle
    // Size: 0x4
    // Offset: 0x40
    float RotateAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AngularImpulse
    // Size: 0x4
    // Offset: 0x44
    float AngularImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public BoingKit.Bits32 Bits
    // Size: 0x4
    // Offset: 0x48
    ::BoingKit::Bits32 Bits;
    // Field size check
    static_assert(sizeof(::BoingKit::Bits32) == 0x4);
    // private System.Int32 m_padding3
    // Size: 0x4
    // Offset: 0x4C
    int m_padding3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Params
    constexpr Params(::UnityEngine::Vector3 PrevPosition_ = {}, float m_padding0_ = {}, ::UnityEngine::Vector3 CurrPosition_ = {}, float m_padding1_ = {}, ::UnityEngine::Vector3 LinearVelocityDir_ = {}, float m_padding2_ = {}, float Radius_ = {}, float FullEffectRadius_ = {}, float MoveDistance_ = {}, float LinearImpulse_ = {}, float RotateAngle_ = {}, float AngularImpulse_ = {}, ::BoingKit::Bits32 Bits_ = {}, int m_padding3_ = {}) noexcept : PrevPosition{PrevPosition_}, m_padding0{m_padding0_}, CurrPosition{CurrPosition_}, m_padding1{m_padding1_}, LinearVelocityDir{LinearVelocityDir_}, m_padding2{m_padding2_}, Radius{Radius_}, FullEffectRadius{FullEffectRadius_}, MoveDistance{MoveDistance_}, LinearImpulse{LinearImpulse_}, RotateAngle{RotateAngle_}, AngularImpulse{AngularImpulse_}, Bits{Bits_}, m_padding3{m_padding3_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Stride
    static int _get_Stride();
    // Set static field: static public readonly System.Int32 Stride
    static void _set_Stride(int value);
    // Get instance field reference: public UnityEngine.Vector3 PrevPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_PrevPosition();
    // Get instance field reference: private System.Single m_padding0
    [[deprecated("Use field access instead!")]] float& dyn_m_padding0();
    // Get instance field reference: public UnityEngine.Vector3 CurrPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CurrPosition();
    // Get instance field reference: private System.Single m_padding1
    [[deprecated("Use field access instead!")]] float& dyn_m_padding1();
    // Get instance field reference: public UnityEngine.Vector3 LinearVelocityDir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LinearVelocityDir();
    // Get instance field reference: private System.Single m_padding2
    [[deprecated("Use field access instead!")]] float& dyn_m_padding2();
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // Get instance field reference: public System.Single FullEffectRadius
    [[deprecated("Use field access instead!")]] float& dyn_FullEffectRadius();
    // Get instance field reference: public System.Single MoveDistance
    [[deprecated("Use field access instead!")]] float& dyn_MoveDistance();
    // Get instance field reference: public System.Single LinearImpulse
    [[deprecated("Use field access instead!")]] float& dyn_LinearImpulse();
    // Get instance field reference: public System.Single RotateAngle
    [[deprecated("Use field access instead!")]] float& dyn_RotateAngle();
    // Get instance field reference: public System.Single AngularImpulse
    [[deprecated("Use field access instead!")]] float& dyn_AngularImpulse();
    // Get instance field reference: public BoingKit.Bits32 Bits
    [[deprecated("Use field access instead!")]] ::BoingKit::Bits32& dyn_Bits();
    // Get instance field reference: private System.Int32 m_padding3
    [[deprecated("Use field access instead!")]] int& dyn_m_padding3();
    // public System.Void .ctor(BoingKit.BoingEffector effector)
    // Offset: 0x28ED4C4
    Params(::BoingKit::BoingEffector* effector);
    // public System.Void Fill(BoingKit.BoingEffector effector)
    // Offset: 0x28ED6B8
    void Fill(::BoingKit::BoingEffector* effector);
    // private System.Void SuppressWarnings()
    // Offset: 0x28ED6F8
    void SuppressWarnings();
    // static private System.Void .cctor()
    // Offset: 0x28ED70C
    static void _cctor();
  }; // BoingKit.BoingEffector/Params
  #pragma pack(pop)
  static check_size<sizeof(BoingEffector::Params), 76 + sizeof(int)> __BoingKit_BoingEffector_ParamsSizeCheck;
  static_assert(sizeof(BoingEffector::Params) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingEffector::Params::Params
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::BoingEffector::Params::Fill
// Il2CppName: Fill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::Params::*)(::BoingKit::BoingEffector*)>(&BoingKit::BoingEffector::Params::Fill)> {
  static const MethodInfo* get() {
    static auto* effector = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingEffector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector::Params), "Fill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effector});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::Params::SuppressWarnings
// Il2CppName: SuppressWarnings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingEffector::Params::*)()>(&BoingKit::BoingEffector::Params::SuppressWarnings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector::Params), "SuppressWarnings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingEffector::Params::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::BoingEffector::Params::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingEffector::Params), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
