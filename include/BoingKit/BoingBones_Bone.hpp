// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingBones
#include "BoingKit/BoingBones.hpp"
// Including type: BoingKit.BoingWork/Params/InstanceData
#include "BoingKit/BoingWork_Params.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingBones::Bone);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingBones::Bone*, "BoingKit", "BoingBones/Bone");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x20C
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingBones/Bone
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingBones::Bone : public ::Il2CppObject {
    public:
    public:
    // BoingKit.BoingWork/Params/InstanceData Instance
    // Size: 0xF0
    // Offset: 0x10
    ::BoingKit::BoingWork::Params::InstanceData Instance;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingWork::Params::InstanceData) == 0xF0);
    // UnityEngine.Transform Transform
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Transform* Transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // UnityEngine.Vector3 ScaleWs
    // Size: 0xC
    // Offset: 0x108
    ::UnityEngine::Vector3 ScaleWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 CachedScaleLs
    // Size: 0xC
    // Offset: 0x114
    ::UnityEngine::Vector3 CachedScaleLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 BlendedPositionWs
    // Size: 0xC
    // Offset: 0x120
    ::UnityEngine::Vector3 BlendedPositionWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 BlendedScaleLs
    // Size: 0xC
    // Offset: 0x12C
    ::UnityEngine::Vector3 BlendedScaleLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 CachedPositionWs
    // Size: 0xC
    // Offset: 0x138
    ::UnityEngine::Vector3 CachedPositionWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 CachedPositionLs
    // Size: 0xC
    // Offset: 0x144
    ::UnityEngine::Vector3 CachedPositionLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Bounds Bounds
    // Size: 0x18
    // Offset: 0x150
    ::UnityEngine::Bounds Bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // UnityEngine.Quaternion RotationInverseWs
    // Size: 0x10
    // Offset: 0x168
    ::UnityEngine::Quaternion RotationInverseWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion SpringRotationWs
    // Size: 0x10
    // Offset: 0x178
    ::UnityEngine::Quaternion SpringRotationWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion SpringRotationInverseWs
    // Size: 0x10
    // Offset: 0x188
    ::UnityEngine::Quaternion SpringRotationInverseWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion CachedRotationWs
    // Size: 0x10
    // Offset: 0x198
    ::UnityEngine::Quaternion CachedRotationWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion CachedRotationLs
    // Size: 0x10
    // Offset: 0x1A8
    ::UnityEngine::Quaternion CachedRotationLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion BlendedRotationWs
    // Size: 0x10
    // Offset: 0x1B8
    ::UnityEngine::Quaternion BlendedRotationWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion RotationBackPropDeltaPs
    // Size: 0x10
    // Offset: 0x1C8
    ::UnityEngine::Quaternion RotationBackPropDeltaPs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // System.Int32 ParentIndex
    // Size: 0x4
    // Offset: 0x1D8
    int ParentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ParentIndex and: ChildIndices
    char __padding16[0x4] = {};
    // System.Int32[] ChildIndices
    // Size: 0x8
    // Offset: 0x1E0
    ::ArrayW<int> ChildIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Single LengthFromRoot
    // Size: 0x4
    // Offset: 0x1E8
    float LengthFromRoot;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single AnimationBlend
    // Size: 0x4
    // Offset: 0x1EC
    float AnimationBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single LengthStiffness
    // Size: 0x4
    // Offset: 0x1F0
    float LengthStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single LengthStiffnessT
    // Size: 0x4
    // Offset: 0x1F4
    float LengthStiffnessT;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single FullyStiffToParentLength
    // Size: 0x4
    // Offset: 0x1F8
    float FullyStiffToParentLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single PoseStiffness
    // Size: 0x4
    // Offset: 0x1FC
    float PoseStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single BendAngleCap
    // Size: 0x4
    // Offset: 0x200
    float BendAngleCap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single CollisionRadius
    // Size: 0x4
    // Offset: 0x204
    float CollisionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single SquashAndStretch
    // Size: 0x4
    // Offset: 0x208
    float SquashAndStretch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: BoingKit.BoingWork/Params/InstanceData Instance
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingWork::Params::InstanceData& dyn_Instance();
    // Get instance field reference: UnityEngine.Transform Transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_Transform();
    // Get instance field reference: UnityEngine.Vector3 ScaleWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ScaleWs();
    // Get instance field reference: UnityEngine.Vector3 CachedScaleLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedScaleLs();
    // Get instance field reference: UnityEngine.Vector3 BlendedPositionWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BlendedPositionWs();
    // Get instance field reference: UnityEngine.Vector3 BlendedScaleLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BlendedScaleLs();
    // Get instance field reference: UnityEngine.Vector3 CachedPositionWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedPositionWs();
    // Get instance field reference: UnityEngine.Vector3 CachedPositionLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedPositionLs();
    // Get instance field reference: UnityEngine.Bounds Bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_Bounds();
    // Get instance field reference: UnityEngine.Quaternion RotationInverseWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_RotationInverseWs();
    // Get instance field reference: UnityEngine.Quaternion SpringRotationWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_SpringRotationWs();
    // Get instance field reference: UnityEngine.Quaternion SpringRotationInverseWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_SpringRotationInverseWs();
    // Get instance field reference: UnityEngine.Quaternion CachedRotationWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_CachedRotationWs();
    // Get instance field reference: UnityEngine.Quaternion CachedRotationLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_CachedRotationLs();
    // Get instance field reference: UnityEngine.Quaternion BlendedRotationWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_BlendedRotationWs();
    // Get instance field reference: UnityEngine.Quaternion RotationBackPropDeltaPs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_RotationBackPropDeltaPs();
    // Get instance field reference: System.Int32 ParentIndex
    [[deprecated("Use field access instead!")]] int& dyn_ParentIndex();
    // Get instance field reference: System.Int32[] ChildIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_ChildIndices();
    // Get instance field reference: System.Single LengthFromRoot
    [[deprecated("Use field access instead!")]] float& dyn_LengthFromRoot();
    // Get instance field reference: System.Single AnimationBlend
    [[deprecated("Use field access instead!")]] float& dyn_AnimationBlend();
    // Get instance field reference: System.Single LengthStiffness
    [[deprecated("Use field access instead!")]] float& dyn_LengthStiffness();
    // Get instance field reference: System.Single LengthStiffnessT
    [[deprecated("Use field access instead!")]] float& dyn_LengthStiffnessT();
    // Get instance field reference: System.Single FullyStiffToParentLength
    [[deprecated("Use field access instead!")]] float& dyn_FullyStiffToParentLength();
    // Get instance field reference: System.Single PoseStiffness
    [[deprecated("Use field access instead!")]] float& dyn_PoseStiffness();
    // Get instance field reference: System.Single BendAngleCap
    [[deprecated("Use field access instead!")]] float& dyn_BendAngleCap();
    // Get instance field reference: System.Single CollisionRadius
    [[deprecated("Use field access instead!")]] float& dyn_CollisionRadius();
    // Get instance field reference: System.Single SquashAndStretch
    [[deprecated("Use field access instead!")]] float& dyn_SquashAndStretch();
    // System.Void UpdateBounds()
    // Offset: 0x28ECD34
    void UpdateBounds();
    // System.Void .ctor(UnityEngine.Transform transform, System.Int32 iParent, System.Single lengthFromRoot)
    // Offset: 0x28EB898
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingBones::Bone* New_ctor(::UnityEngine::Transform* transform, int iParent, float lengthFromRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingBones::Bone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingBones::Bone*, creationType>(transform, iParent, lengthFromRoot)));
    }
  }; // BoingKit.BoingBones/Bone
  #pragma pack(pop)
  static check_size<sizeof(BoingBones::Bone), 520 + sizeof(float)> __BoingKit_BoingBones_BoneSizeCheck;
  static_assert(sizeof(BoingBones::Bone) == 0x20C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingBones::Bone::UpdateBounds
// Il2CppName: UpdateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBones::Bone::*)()>(&BoingKit::BoingBones::Bone::UpdateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBones::Bone*), "UpdateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBones::Bone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
