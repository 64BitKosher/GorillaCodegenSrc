// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: Version
  struct Version;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::Version, "BoingKit", "Version");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.Version
  // [TokenAttribute] Offset: FFFFFFFF
  struct Version/*, public ::System::ValueType, public ::System::IEquatable_1<::BoingKit::Version>*/ {
    public:
    public:
    // private readonly System.Int32 <MajorVersion>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int MajorVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <MinorVersion>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int MinorVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Revision>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int Revision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Version
    constexpr Version(int MajorVersion_ = {}, int MinorVersion_ = {}, int Revision_ = {}) noexcept : MajorVersion{MajorVersion_}, MinorVersion{MinorVersion_}, Revision{Revision_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::BoingKit::Version>
    operator ::System::IEquatable_1<::BoingKit::Version>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::BoingKit::Version>*>(this);
    }
    // Get static field: static public readonly BoingKit.Version Invalid
    static ::BoingKit::Version _get_Invalid();
    // Set static field: static public readonly BoingKit.Version Invalid
    static void _set_Invalid(::BoingKit::Version value);
    // Get static field: static public readonly BoingKit.Version FirstTracked
    static ::BoingKit::Version _get_FirstTracked();
    // Set static field: static public readonly BoingKit.Version FirstTracked
    static void _set_FirstTracked(::BoingKit::Version value);
    // Get static field: static public readonly BoingKit.Version LastUntracked
    static ::BoingKit::Version _get_LastUntracked();
    // Set static field: static public readonly BoingKit.Version LastUntracked
    static void _set_LastUntracked(::BoingKit::Version value);
    // Get instance field reference: private readonly System.Int32 <MajorVersion>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MajorVersion$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <MinorVersion>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MinorVersion$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Revision>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Revision$k__BackingField();
    // public System.Int32 get_MajorVersion()
    // Offset: 0x28ED7BC
    int get_MajorVersion();
    // public System.Int32 get_MinorVersion()
    // Offset: 0x28ED7C4
    int get_MinorVersion();
    // public System.Int32 get_Revision()
    // Offset: 0x28ED7CC
    int get_Revision();
    // public System.Boolean IsValid()
    // Offset: 0x28ED92C
    bool IsValid();
    // public System.Void .ctor(System.Int32 majorVersion, System.Int32 minorVersion, System.Int32 revision)
    // Offset: 0x28ED7B0
    // ABORTED: conflicts with another method.  Version(int majorVersion, int minorVersion, int revision);
    // public System.Boolean Equals(BoingKit.Version other)
    // Offset: 0x28EDAEC
    bool Equals(::BoingKit::Version other);
    // static private System.Void .cctor()
    // Offset: 0x28EDBA4
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x28ED7D4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x28EDA54
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x28EDB20
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // BoingKit.Version
  #pragma pack(pop)
  static check_size<sizeof(Version), 8 + sizeof(int)> __BoingKit_VersionSizeCheck;
  static_assert(sizeof(Version) == 0xC);
  // static public System.Boolean op_Equality(BoingKit.Version lhs, BoingKit.Version rhs)
  // Offset: 0x28ED954
  bool operator ==(const ::BoingKit::Version& lhs, const ::BoingKit::Version& rhs);
  // static public System.Boolean op_Inequality(BoingKit.Version lhs, BoingKit.Version rhs)
  // Offset: 0x28ED9A0
  bool operator !=(const ::BoingKit::Version& lhs, const ::BoingKit::Version& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::Version::get_MajorVersion
// Il2CppName: get_MajorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BoingKit::Version::*)()>(&BoingKit::Version::get_MajorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "get_MajorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::get_MinorVersion
// Il2CppName: get_MinorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BoingKit::Version::*)()>(&BoingKit::Version::get_MinorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "get_MinorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::get_Revision
// Il2CppName: get_Revision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BoingKit::Version::*)()>(&BoingKit::Version::get_Revision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "get_Revision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Version::*)()>(&BoingKit::Version::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::Version
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::Version::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Version::*)(::BoingKit::Version)>(&BoingKit::Version::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("BoingKit", "Version")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::Version::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (BoingKit::Version::*)()>(&BoingKit::Version::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Version::*)(::Il2CppObject*)>(&BoingKit::Version::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BoingKit::Version::*)()>(&BoingKit::Version::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Version), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Version::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: BoingKit::Version::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
