// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: Bits32
  struct Bits32;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::Bits32, "BoingKit", "Bits32");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.Bits32
  // [TokenAttribute] Offset: FFFFFFFF
  struct Bits32/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_bits
    // Size: 0x4
    // Offset: 0x0
    int m_bits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Bits32
    constexpr Bits32(int m_bits_ = {}) noexcept : m_bits{m_bits_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_bits;
    }
    // Get instance field reference: private System.Int32 m_bits
    [[deprecated("Use field access instead!")]] int& dyn_m_bits();
    // public System.Int32 get_IntValue()
    // Offset: 0x290165C
    int get_IntValue();
    // public System.Void .ctor(System.Int32 bits)
    // Offset: 0x2901664
    // ABORTED: conflicts with another method.  Bits32(int bits);
    // public System.Void Clear()
    // Offset: 0x28F88F0
    void Clear();
    // public System.Void SetBit(System.Int32 index, System.Boolean value)
    // Offset: 0x290166C
    void SetBit(int index, bool value);
    // public System.Boolean IsBitSet(System.Int32 index)
    // Offset: 0x28FC818
    bool IsBitSet(int index);
  }; // BoingKit.Bits32
  #pragma pack(pop)
  static check_size<sizeof(Bits32), 0 + sizeof(int)> __BoingKit_Bits32SizeCheck;
  static_assert(sizeof(Bits32) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::Bits32::get_IntValue
// Il2CppName: get_IntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BoingKit::Bits32::*)()>(&BoingKit::Bits32::get_IntValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Bits32), "get_IntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Bits32::Bits32
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::Bits32::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Bits32::*)()>(&BoingKit::Bits32::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Bits32), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::Bits32::SetBit
// Il2CppName: SetBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::Bits32::*)(int, bool)>(&BoingKit::Bits32::SetBit)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Bits32), "SetBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: BoingKit::Bits32::IsBitSet
// Il2CppName: IsBitSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BoingKit::Bits32::*)(int)>(&BoingKit::Bits32::IsBitSet)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::Bits32), "IsBitSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
