// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingBase
#include "BoingKit/BoingBase.hpp"
// Including type: BoingKit.BoingManager/UpdateMode
#include "BoingKit/BoingManager_UpdateMode.hpp"
// Including type: BoingKit.BoingManager/TranslationLockSpace
#include "BoingKit/BoingManager_TranslationLockSpace.hpp"
// Including type: BoingKit.BoingWork/Params
#include "BoingKit/BoingWork_Params.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: SharedBoingParams
  class SharedBoingParams;
  // Skipping declaration: Vector3Spring because it is already included!
  // Skipping declaration: QuaternionSpring because it is already included!
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingBehavior
  class BoingBehavior;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingBehavior);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingBehavior*, "BoingKit", "BoingBehavior");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x231
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingBehavior : public ::BoingKit::BoingBase {
    public:
    public:
    // public BoingKit.BoingManager/UpdateMode UpdateMode
    // Size: 0x4
    // Offset: 0x44
    ::BoingKit::BoingManager::UpdateMode UpdateMode;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingManager::UpdateMode) == 0x4);
    // public System.Boolean TwoDDistanceCheck
    // Size: 0x1
    // Offset: 0x48
    bool TwoDDistanceCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean TwoDPositionInfluence
    // Size: 0x1
    // Offset: 0x49
    bool TwoDPositionInfluence;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean TwoDRotationInfluence
    // Size: 0x1
    // Offset: 0x4A
    bool TwoDRotationInfluence;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnablePositionEffect
    // Size: 0x1
    // Offset: 0x4B
    bool EnablePositionEffect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableRotationEffect
    // Size: 0x1
    // Offset: 0x4C
    bool EnableRotationEffect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableScaleEffect
    // Size: 0x1
    // Offset: 0x4D
    bool EnableScaleEffect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GlobalReactionUpVector
    // Size: 0x1
    // Offset: 0x4E
    bool GlobalReactionUpVector;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GlobalReactionUpVector and: TranslationLockSpace
    char __padding7[0x1] = {};
    // public BoingKit.BoingManager/TranslationLockSpace TranslationLockSpace
    // Size: 0x4
    // Offset: 0x50
    ::BoingKit::BoingManager::TranslationLockSpace TranslationLockSpace;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingManager::TranslationLockSpace) == 0x4);
    // public System.Boolean LockTranslationX
    // Size: 0x1
    // Offset: 0x54
    bool LockTranslationX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LockTranslationY
    // Size: 0x1
    // Offset: 0x55
    bool LockTranslationY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LockTranslationZ
    // Size: 0x1
    // Offset: 0x56
    bool LockTranslationZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LockTranslationZ and: Params
    char __padding11[0x1] = {};
    // public BoingKit.BoingWork/Params Params
    // Size: 0x160
    // Offset: 0x58
    ::BoingKit::BoingWork::Params Params;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingWork::Params) == 0x160);
    // public BoingKit.SharedBoingParams SharedParams
    // Size: 0x8
    // Offset: 0x1B8
    ::BoingKit::SharedBoingParams* SharedParams;
    // Field size check
    static_assert(sizeof(::BoingKit::SharedBoingParams*) == 0x8);
    // System.Boolean PositionSpringDirty
    // Size: 0x1
    // Offset: 0x1C0
    bool PositionSpringDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean RotationSpringDirty
    // Size: 0x1
    // Offset: 0x1C1
    bool RotationSpringDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean ScaleSpringDirty
    // Size: 0x1
    // Offset: 0x1C2
    bool ScaleSpringDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean CachedTransformValid
    // Size: 0x1
    // Offset: 0x1C3
    bool CachedTransformValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.Vector3 CachedPositionLs
    // Size: 0xC
    // Offset: 0x1C4
    ::UnityEngine::Vector3 CachedPositionLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 CachedPositionWs
    // Size: 0xC
    // Offset: 0x1D0
    ::UnityEngine::Vector3 CachedPositionWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 RenderPositionWs
    // Size: 0xC
    // Offset: 0x1DC
    ::UnityEngine::Vector3 RenderPositionWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Quaternion CachedRotationLs
    // Size: 0x10
    // Offset: 0x1E8
    ::UnityEngine::Quaternion CachedRotationLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion CachedRotationWs
    // Size: 0x10
    // Offset: 0x1F8
    ::UnityEngine::Quaternion CachedRotationWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Quaternion RenderRotationWs
    // Size: 0x10
    // Offset: 0x208
    ::UnityEngine::Quaternion RenderRotationWs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Vector3 CachedScaleLs
    // Size: 0xC
    // Offset: 0x218
    ::UnityEngine::Vector3 CachedScaleLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 RenderScaleLs
    // Size: 0xC
    // Offset: 0x224
    ::UnityEngine::Vector3 RenderScaleLs;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // System.Boolean InitRebooted
    // Size: 0x1
    // Offset: 0x230
    bool InitRebooted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public BoingKit.BoingManager/UpdateMode UpdateMode
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingManager::UpdateMode& dyn_UpdateMode();
    // Get instance field reference: public System.Boolean TwoDDistanceCheck
    [[deprecated("Use field access instead!")]] bool& dyn_TwoDDistanceCheck();
    // Get instance field reference: public System.Boolean TwoDPositionInfluence
    [[deprecated("Use field access instead!")]] bool& dyn_TwoDPositionInfluence();
    // Get instance field reference: public System.Boolean TwoDRotationInfluence
    [[deprecated("Use field access instead!")]] bool& dyn_TwoDRotationInfluence();
    // Get instance field reference: public System.Boolean EnablePositionEffect
    [[deprecated("Use field access instead!")]] bool& dyn_EnablePositionEffect();
    // Get instance field reference: public System.Boolean EnableRotationEffect
    [[deprecated("Use field access instead!")]] bool& dyn_EnableRotationEffect();
    // Get instance field reference: public System.Boolean EnableScaleEffect
    [[deprecated("Use field access instead!")]] bool& dyn_EnableScaleEffect();
    // Get instance field reference: public System.Boolean GlobalReactionUpVector
    [[deprecated("Use field access instead!")]] bool& dyn_GlobalReactionUpVector();
    // Get instance field reference: public BoingKit.BoingManager/TranslationLockSpace TranslationLockSpace
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingManager::TranslationLockSpace& dyn_TranslationLockSpace();
    // Get instance field reference: public System.Boolean LockTranslationX
    [[deprecated("Use field access instead!")]] bool& dyn_LockTranslationX();
    // Get instance field reference: public System.Boolean LockTranslationY
    [[deprecated("Use field access instead!")]] bool& dyn_LockTranslationY();
    // Get instance field reference: public System.Boolean LockTranslationZ
    [[deprecated("Use field access instead!")]] bool& dyn_LockTranslationZ();
    // Get instance field reference: public BoingKit.BoingWork/Params Params
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingWork::Params& dyn_Params();
    // Get instance field reference: public BoingKit.SharedBoingParams SharedParams
    [[deprecated("Use field access instead!")]] ::BoingKit::SharedBoingParams*& dyn_SharedParams();
    // Get instance field reference: System.Boolean PositionSpringDirty
    [[deprecated("Use field access instead!")]] bool& dyn_PositionSpringDirty();
    // Get instance field reference: System.Boolean RotationSpringDirty
    [[deprecated("Use field access instead!")]] bool& dyn_RotationSpringDirty();
    // Get instance field reference: System.Boolean ScaleSpringDirty
    [[deprecated("Use field access instead!")]] bool& dyn_ScaleSpringDirty();
    // Get instance field reference: System.Boolean CachedTransformValid
    [[deprecated("Use field access instead!")]] bool& dyn_CachedTransformValid();
    // Get instance field reference: UnityEngine.Vector3 CachedPositionLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedPositionLs();
    // Get instance field reference: UnityEngine.Vector3 CachedPositionWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedPositionWs();
    // Get instance field reference: UnityEngine.Vector3 RenderPositionWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RenderPositionWs();
    // Get instance field reference: UnityEngine.Quaternion CachedRotationLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_CachedRotationLs();
    // Get instance field reference: UnityEngine.Quaternion CachedRotationWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_CachedRotationWs();
    // Get instance field reference: UnityEngine.Quaternion RenderRotationWs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_RenderRotationWs();
    // Get instance field reference: UnityEngine.Vector3 CachedScaleLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CachedScaleLs();
    // Get instance field reference: UnityEngine.Vector3 RenderScaleLs
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RenderScaleLs();
    // Get instance field reference: System.Boolean InitRebooted
    [[deprecated("Use field access instead!")]] bool& dyn_InitRebooted();
    // public BoingKit.Vector3Spring get_PositionSpring()
    // Offset: 0x28E8C30
    ::BoingKit::Vector3Spring get_PositionSpring();
    // public System.Void set_PositionSpring(BoingKit.Vector3Spring value)
    // Offset: 0x28E8C48
    void set_PositionSpring(::BoingKit::Vector3Spring value);
    // public BoingKit.QuaternionSpring get_RotationSpring()
    // Offset: 0x28E8C68
    ::BoingKit::QuaternionSpring get_RotationSpring();
    // public System.Void set_RotationSpring(BoingKit.QuaternionSpring value)
    // Offset: 0x28E8C80
    void set_RotationSpring(::BoingKit::QuaternionSpring value);
    // public BoingKit.Vector3Spring get_ScaleSpring()
    // Offset: 0x28E8CA0
    ::BoingKit::Vector3Spring get_ScaleSpring();
    // public System.Void set_ScaleSpring(BoingKit.Vector3Spring value)
    // Offset: 0x28E8CB8
    void set_ScaleSpring(::BoingKit::Vector3Spring value);
    // public System.Void Reboot()
    // Offset: 0x28E8D04
    void Reboot();
    // public System.Void OnEnable()
    // Offset: 0x28E8E58
    void OnEnable();
    // public System.Void Start()
    // Offset: 0x28E8E6C
    void Start();
    // public System.Void OnDisable()
    // Offset: 0x28E8E74
    void OnDisable();
    // protected System.Void Register()
    // Offset: 0x28E8E80
    void Register();
    // protected System.Void Unregister()
    // Offset: 0x28E8FBC
    void Unregister();
    // public System.Void UpdateFlags()
    // Offset: 0x28E90F8
    void UpdateFlags();
    // public System.Void PrepareExecute()
    // Offset: 0x28E91F0
    void PrepareExecute();
    // protected System.Void PrepareExecute(System.Boolean accumulateEffectors)
    // Offset: 0x28E91F8
    void PrepareExecute(bool accumulateEffectors);
    // public System.Void Execute(System.Single dt)
    // Offset: 0x28E9368
    void Execute(float dt);
    // public System.Void PullResults()
    // Offset: 0x28E9374
    void PullResults();
    // public System.Void GatherOutput(ref BoingKit.BoingWork/Output o)
    // Offset: 0x28E9548
    void GatherOutput(ByRef<::BoingKit::BoingWork::Output> o);
    // private System.Void PullResults(ref BoingKit.BoingWork/Params p)
    // Offset: 0x28E937C
    void PullResults(ByRef<::BoingKit::BoingWork::Params> p);
    // public System.Void Restore()
    // Offset: 0x28E964C
    void Restore();
    // public System.Void .ctor()
    // Offset: 0x28E8CD8
    // Implemented from: BoingKit.BoingBase
    // Base method: System.Void BoingBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingBehavior* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingBehavior::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingBehavior*, creationType>()));
    }
  }; // BoingKit.BoingBehavior
  #pragma pack(pop)
  static check_size<sizeof(BoingBehavior), 560 + sizeof(bool)> __BoingKit_BoingBehaviorSizeCheck;
  static_assert(sizeof(BoingBehavior) == 0x231);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingBehavior::get_PositionSpring
// Il2CppName: get_PositionSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Vector3Spring (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::get_PositionSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "get_PositionSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::set_PositionSpring
// Il2CppName: set_PositionSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(::BoingKit::Vector3Spring)>(&BoingKit::BoingBehavior::set_PositionSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("BoingKit", "Vector3Spring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "set_PositionSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::get_RotationSpring
// Il2CppName: get_RotationSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::QuaternionSpring (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::get_RotationSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "get_RotationSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::set_RotationSpring
// Il2CppName: set_RotationSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(::BoingKit::QuaternionSpring)>(&BoingKit::BoingBehavior::set_RotationSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("BoingKit", "QuaternionSpring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "set_RotationSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::get_ScaleSpring
// Il2CppName: get_ScaleSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BoingKit::Vector3Spring (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::get_ScaleSpring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "get_ScaleSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::set_ScaleSpring
// Il2CppName: set_ScaleSpring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(::BoingKit::Vector3Spring)>(&BoingKit::BoingBehavior::set_ScaleSpring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("BoingKit", "Vector3Spring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "set_ScaleSpring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Reboot
// Il2CppName: Reboot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::Reboot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Reboot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::Register)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::Unregister)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::UpdateFlags
// Il2CppName: UpdateFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::UpdateFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "UpdateFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::PrepareExecute
// Il2CppName: PrepareExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::PrepareExecute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "PrepareExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::PrepareExecute
// Il2CppName: PrepareExecute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(bool)>(&BoingKit::BoingBehavior::PrepareExecute)> {
  static const MethodInfo* get() {
    static auto* accumulateEffectors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "PrepareExecute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accumulateEffectors});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(float)>(&BoingKit::BoingBehavior::Execute)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::PullResults
// Il2CppName: PullResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::PullResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "PullResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::GatherOutput
// Il2CppName: GatherOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(ByRef<::BoingKit::BoingWork::Output>)>(&BoingKit::BoingBehavior::GatherOutput)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingWork/Output")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "GatherOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::PullResults
// Il2CppName: PullResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)(ByRef<::BoingKit::BoingWork::Params>)>(&BoingKit::BoingBehavior::PullResults)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingWork/Params")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "PullResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::Restore
// Il2CppName: Restore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingBehavior::*)()>(&BoingKit::BoingBehavior::Restore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingBehavior*), "Restore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingBehavior::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
