// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingWork
#include "BoingKit/BoingWork.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: BoingKit.Vector3Spring
#include "BoingKit/Vector3Spring.hpp"
// Including type: BoingKit.QuaternionSpring
#include "BoingKit/QuaternionSpring.hpp"
// Including type: BoingKit.BoingManager
#include "BoingKit/BoingManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingBehavior
  class BoingBehavior;
  // Forward declaring type: BoingReactor
  class BoingReactor;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingWork::Output, "BoingKit", "BoingWork/Output");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.BoingWork/Output
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoingWork::Output/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 InstanceID
    // Size: 0x4
    // Offset: 0x0
    int InstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_padding0
    // Size: 0x4
    // Offset: 0x4
    int m_padding0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_padding1
    // Size: 0x4
    // Offset: 0x8
    int m_padding1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_padding2
    // Size: 0x4
    // Offset: 0xC
    int m_padding2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public BoingKit.Vector3Spring PositionSpring
    // Size: 0x20
    // Offset: 0x10
    ::BoingKit::Vector3Spring PositionSpring;
    // Field size check
    static_assert(sizeof(::BoingKit::Vector3Spring) == 0x20);
    // public BoingKit.QuaternionSpring RotationSpring
    // Size: 0x20
    // Offset: 0x30
    ::BoingKit::QuaternionSpring RotationSpring;
    // Field size check
    static_assert(sizeof(::BoingKit::QuaternionSpring) == 0x20);
    // public BoingKit.Vector3Spring ScaleSpring
    // Size: 0x20
    // Offset: 0x50
    ::BoingKit::Vector3Spring ScaleSpring;
    // Field size check
    static_assert(sizeof(::BoingKit::Vector3Spring) == 0x20);
    public:
    // Creating value type constructor for type: Output
    constexpr Output(int InstanceID_ = {}, int m_padding0_ = {}, int m_padding1_ = {}, int m_padding2_ = {}, ::BoingKit::Vector3Spring PositionSpring_ = {}, ::BoingKit::QuaternionSpring RotationSpring_ = {}, ::BoingKit::Vector3Spring ScaleSpring_ = {}) noexcept : InstanceID{InstanceID_}, m_padding0{m_padding0_}, m_padding1{m_padding1_}, m_padding2{m_padding2_}, PositionSpring{PositionSpring_}, RotationSpring{RotationSpring_}, ScaleSpring{ScaleSpring_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Stride
    static int _get_Stride();
    // Set static field: static public readonly System.Int32 Stride
    static void _set_Stride(int value);
    // Get instance field reference: public System.Int32 InstanceID
    [[deprecated("Use field access instead!")]] int& dyn_InstanceID();
    // Get instance field reference: public System.Int32 m_padding0
    [[deprecated("Use field access instead!")]] int& dyn_m_padding0();
    // Get instance field reference: public System.Int32 m_padding1
    [[deprecated("Use field access instead!")]] int& dyn_m_padding1();
    // Get instance field reference: public System.Int32 m_padding2
    [[deprecated("Use field access instead!")]] int& dyn_m_padding2();
    // Get instance field reference: public BoingKit.Vector3Spring PositionSpring
    [[deprecated("Use field access instead!")]] ::BoingKit::Vector3Spring& dyn_PositionSpring();
    // Get instance field reference: public BoingKit.QuaternionSpring RotationSpring
    [[deprecated("Use field access instead!")]] ::BoingKit::QuaternionSpring& dyn_RotationSpring();
    // Get instance field reference: public BoingKit.Vector3Spring ScaleSpring
    [[deprecated("Use field access instead!")]] ::BoingKit::Vector3Spring& dyn_ScaleSpring();
    // public System.Void .ctor(System.Int32 instanceID, ref BoingKit.Vector3Spring positionSpring, ref BoingKit.QuaternionSpring rotationSpring, ref BoingKit.Vector3Spring scaleSpring)
    // Offset: 0x28FDA44
    Output(int instanceID, ByRef<::BoingKit::Vector3Spring> positionSpring, ByRef<::BoingKit::QuaternionSpring> rotationSpring, ByRef<::BoingKit::Vector3Spring> scaleSpring);
    // public System.Void GatherOutput(System.Collections.Generic.Dictionary`2<System.Int32,BoingKit.BoingBehavior> behaviorMap, BoingKit.BoingManager/UpdateMode updateMode)
    // Offset: 0x28FDA68
    void GatherOutput(::System::Collections::Generic::Dictionary_2<int, ::BoingKit::BoingBehavior*>* behaviorMap, ::BoingKit::BoingManager::UpdateMode updateMode);
    // public System.Void GatherOutput(System.Collections.Generic.Dictionary`2<System.Int32,BoingKit.BoingReactor> reactorMap, BoingKit.BoingManager/UpdateMode updateMode)
    // Offset: 0x28FDB10
    void GatherOutput(::System::Collections::Generic::Dictionary_2<int, ::BoingKit::BoingReactor*>* reactorMap, ::BoingKit::BoingManager::UpdateMode updateMode);
    // private System.Void SuppressWarnings()
    // Offset: 0x28FDBB8
    void SuppressWarnings();
    // static private System.Void .cctor()
    // Offset: 0x28FDBC4
    static void _cctor();
  }; // BoingKit.BoingWork/Output
  #pragma pack(pop)
  static check_size<sizeof(BoingWork::Output), 80 + sizeof(::BoingKit::Vector3Spring)> __BoingKit_BoingWork_OutputSizeCheck;
  static_assert(sizeof(BoingWork::Output) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingWork::Output::Output
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::BoingWork::Output::GatherOutput
// Il2CppName: GatherOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingWork::Output::*)(::System::Collections::Generic::Dictionary_2<int, ::BoingKit::BoingBehavior*>*, ::BoingKit::BoingManager::UpdateMode)>(&BoingKit::BoingWork::Output::GatherOutput)> {
  static const MethodInfo* get() {
    static auto* behaviorMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("BoingKit", "BoingBehavior")})->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingManager/UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingWork::Output), "GatherOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviorMap, updateMode});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingWork::Output::GatherOutput
// Il2CppName: GatherOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingWork::Output::*)(::System::Collections::Generic::Dictionary_2<int, ::BoingKit::BoingReactor*>*, ::BoingKit::BoingManager::UpdateMode)>(&BoingKit::BoingWork::Output::GatherOutput)> {
  static const MethodInfo* get() {
    static auto* reactorMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("BoingKit", "BoingReactor")})->byval_arg;
    static auto* updateMode = &::il2cpp_utils::GetClassFromName("BoingKit", "BoingManager/UpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingWork::Output), "GatherOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reactorMap, updateMode});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingWork::Output::SuppressWarnings
// Il2CppName: SuppressWarnings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingWork::Output::*)()>(&BoingKit::BoingWork::Output::SuppressWarnings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingWork::Output), "SuppressWarnings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingWork::Output::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::BoingWork::Output::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingWork::Output), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
