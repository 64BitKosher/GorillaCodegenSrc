// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorField
  class BoingReactorField;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: BoingReactorFieldGPUSampler
  class BoingReactorFieldGPUSampler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::BoingReactorFieldGPUSampler);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingReactorFieldGPUSampler*, "BoingKit", "BoingReactorFieldGPUSampler");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.BoingReactorFieldGPUSampler
  // [TokenAttribute] Offset: FFFFFFFF
  class BoingReactorFieldGPUSampler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public BoingKit.BoingReactorField ReactorField
    // Size: 0x8
    // Offset: 0x20
    ::BoingKit::BoingReactorField* ReactorField;
    // Field size check
    static_assert(sizeof(::BoingKit::BoingReactorField*) == 0x8);
    // public System.Single PositionSampleMultiplier
    // Size: 0x4
    // Offset: 0x28
    float PositionSampleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RotationSampleMultiplier
    // Size: 0x4
    // Offset: 0x2C
    float RotationSampleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.MaterialPropertyBlock m_matProps
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MaterialPropertyBlock* m_matProps;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private System.Int32 m_fieldResourceSetId
    // Size: 0x4
    // Offset: 0x38
    int m_fieldResourceSetId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public BoingKit.BoingReactorField ReactorField
    [[deprecated("Use field access instead!")]] ::BoingKit::BoingReactorField*& dyn_ReactorField();
    // Get instance field reference: public System.Single PositionSampleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_PositionSampleMultiplier();
    // Get instance field reference: public System.Single RotationSampleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_RotationSampleMultiplier();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_matProps
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_matProps();
    // Get instance field reference: private System.Int32 m_fieldResourceSetId
    [[deprecated("Use field access instead!")]] int& dyn_m_fieldResourceSetId();
    // public System.Void OnEnable()
    // Offset: 0x28F8194
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x28F81EC
    void OnDisable();
    // public System.Void Update()
    // Offset: 0x28F8244
    void Update();
    // public System.Void .ctor()
    // Offset: 0x28F84E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoingReactorFieldGPUSampler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::BoingReactorFieldGPUSampler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoingReactorFieldGPUSampler*, creationType>()));
    }
  }; // BoingKit.BoingReactorFieldGPUSampler
  #pragma pack(pop)
  static check_size<sizeof(BoingReactorFieldGPUSampler), 56 + sizeof(int)> __BoingKit_BoingReactorFieldGPUSamplerSizeCheck;
  static_assert(sizeof(BoingReactorFieldGPUSampler) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldGPUSampler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldGPUSampler::*)()>(&BoingKit::BoingReactorFieldGPUSampler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldGPUSampler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldGPUSampler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldGPUSampler::*)()>(&BoingKit::BoingReactorFieldGPUSampler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldGPUSampler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldGPUSampler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingReactorFieldGPUSampler::*)()>(&BoingKit::BoingReactorFieldGPUSampler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingReactorFieldGPUSampler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoingKit::BoingReactorFieldGPUSampler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
