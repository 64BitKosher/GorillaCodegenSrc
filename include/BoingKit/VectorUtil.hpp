// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: VectorUtil
  class VectorUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::VectorUtil);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::VectorUtil*, "BoingKit", "VectorUtil");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.VectorUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorUtil : public ::Il2CppObject {
    public:
    // Get static field: static public readonly UnityEngine.Vector3 Min
    static ::UnityEngine::Vector3 _get_Min();
    // Set static field: static public readonly UnityEngine.Vector3 Min
    static void _set_Min(::UnityEngine::Vector3 value);
    // Get static field: static public readonly UnityEngine.Vector3 Max
    static ::UnityEngine::Vector3 _get_Max();
    // Set static field: static public readonly UnityEngine.Vector3 Max
    static void _set_Max(::UnityEngine::Vector3 value);
    // static public UnityEngine.Vector3 Rotate2D(UnityEngine.Vector3 v, System.Single angle)
    // Offset: 0x2904580
    static ::UnityEngine::Vector3 Rotate2D(::UnityEngine::Vector3 v, float angle);
    // static public UnityEngine.Vector4 NormalizeSafe(UnityEngine.Vector4 v, UnityEngine.Vector4 fallback)
    // Offset: 0x28FB004
    static ::UnityEngine::Vector4 NormalizeSafe(::UnityEngine::Vector4 v, ::UnityEngine::Vector4 fallback);
    // static public UnityEngine.Vector3 FindOrthogonal(UnityEngine.Vector3 v)
    // Offset: 0x28FCC3C
    static ::UnityEngine::Vector3 FindOrthogonal(::UnityEngine::Vector3 v);
    // static public System.Void FormOrthogonalBasis(UnityEngine.Vector3 v, out UnityEngine.Vector3 a, out UnityEngine.Vector3 b)
    // Offset: 0x29045E0
    static void FormOrthogonalBasis(::UnityEngine::Vector3 v, ByRef<::UnityEngine::Vector3> a, ByRef<::UnityEngine::Vector3> b);
    // static public UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x290469C
    static ::UnityEngine::Vector3 Slerp(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, float t);
    // static public UnityEngine.Vector3 GetClosestPointOnSegment(UnityEngine.Vector3 p, UnityEngine.Vector3 segA, UnityEngine.Vector3 segB)
    // Offset: 0x28FCA2C
    static ::UnityEngine::Vector3 GetClosestPointOnSegment(::UnityEngine::Vector3 p, ::UnityEngine::Vector3 segA, ::UnityEngine::Vector3 segB);
    // static public UnityEngine.Vector3 TriLerp(ref UnityEngine.Vector3 v000, ref UnityEngine.Vector3 v001, ref UnityEngine.Vector3 v010, ref UnityEngine.Vector3 v011, ref UnityEngine.Vector3 v100, ref UnityEngine.Vector3 v101, ref UnityEngine.Vector3 v110, ref UnityEngine.Vector3 v111, System.Single tx, System.Single ty, System.Single tz)
    // Offset: 0x2904874
    static ::UnityEngine::Vector3 TriLerp(ByRef<::UnityEngine::Vector3> v000, ByRef<::UnityEngine::Vector3> v001, ByRef<::UnityEngine::Vector3> v010, ByRef<::UnityEngine::Vector3> v011, ByRef<::UnityEngine::Vector3> v100, ByRef<::UnityEngine::Vector3> v101, ByRef<::UnityEngine::Vector3> v110, ByRef<::UnityEngine::Vector3> v111, float tx, float ty, float tz);
    // static public UnityEngine.Vector3 TriLerp(ref UnityEngine.Vector3 v000, ref UnityEngine.Vector3 v001, ref UnityEngine.Vector3 v010, ref UnityEngine.Vector3 v011, ref UnityEngine.Vector3 v100, ref UnityEngine.Vector3 v101, ref UnityEngine.Vector3 v110, ref UnityEngine.Vector3 v111, System.Boolean lerpX, System.Boolean lerpY, System.Boolean lerpZ, System.Single tx, System.Single ty, System.Single tz)
    // Offset: 0x29049A0
    static ::UnityEngine::Vector3 TriLerp(ByRef<::UnityEngine::Vector3> v000, ByRef<::UnityEngine::Vector3> v001, ByRef<::UnityEngine::Vector3> v010, ByRef<::UnityEngine::Vector3> v011, ByRef<::UnityEngine::Vector3> v100, ByRef<::UnityEngine::Vector3> v101, ByRef<::UnityEngine::Vector3> v110, ByRef<::UnityEngine::Vector3> v111, bool lerpX, bool lerpY, bool lerpZ, float tx, float ty, float tz);
    // static public UnityEngine.Vector3 TriLerp(ref UnityEngine.Vector3 min, ref UnityEngine.Vector3 max, System.Boolean lerpX, System.Boolean lerpY, System.Boolean lerpZ, System.Single tx, System.Single ty, System.Single tz)
    // Offset: 0x2904B08
    static ::UnityEngine::Vector3 TriLerp(ByRef<::UnityEngine::Vector3> min, ByRef<::UnityEngine::Vector3> max, bool lerpX, bool lerpY, bool lerpZ, float tx, float ty, float tz);
    // static public UnityEngine.Vector4 TriLerp(ref UnityEngine.Vector4 v000, ref UnityEngine.Vector4 v001, ref UnityEngine.Vector4 v010, ref UnityEngine.Vector4 v011, ref UnityEngine.Vector4 v100, ref UnityEngine.Vector4 v101, ref UnityEngine.Vector4 v110, ref UnityEngine.Vector4 v111, System.Boolean lerpX, System.Boolean lerpY, System.Boolean lerpZ, System.Single tx, System.Single ty, System.Single tz)
    // Offset: 0x2904BF4
    static ::UnityEngine::Vector4 TriLerp(ByRef<::UnityEngine::Vector4> v000, ByRef<::UnityEngine::Vector4> v001, ByRef<::UnityEngine::Vector4> v010, ByRef<::UnityEngine::Vector4> v011, ByRef<::UnityEngine::Vector4> v100, ByRef<::UnityEngine::Vector4> v101, ByRef<::UnityEngine::Vector4> v110, ByRef<::UnityEngine::Vector4> v111, bool lerpX, bool lerpY, bool lerpZ, float tx, float ty, float tz);
    // static public UnityEngine.Vector4 TriLerp(ref UnityEngine.Vector4 min, ref UnityEngine.Vector4 max, System.Boolean lerpX, System.Boolean lerpY, System.Boolean lerpZ, System.Single tx, System.Single ty, System.Single tz)
    // Offset: 0x2904D18
    static ::UnityEngine::Vector4 TriLerp(ByRef<::UnityEngine::Vector4> min, ByRef<::UnityEngine::Vector4> max, bool lerpX, bool lerpY, bool lerpZ, float tx, float ty, float tz);
    // static public UnityEngine.Vector3 ClampLength(UnityEngine.Vector3 v, System.Single minLen, System.Single maxLen)
    // Offset: 0x28FB5A8
    static ::UnityEngine::Vector3 ClampLength(::UnityEngine::Vector3 v, float minLen, float maxLen);
    // static public System.Single MinComponent(UnityEngine.Vector3 v)
    // Offset: 0x28FC804
    static float MinComponent(::UnityEngine::Vector3 v);
    // static public System.Single MaxComponent(UnityEngine.Vector3 v)
    // Offset: 0x2904E1C
    static float MaxComponent(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 ComponentWiseAbs(UnityEngine.Vector3 v)
    // Offset: 0x2904E30
    static ::UnityEngine::Vector3 ComponentWiseAbs(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 ComponentWiseMult(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x28FB598
    static ::UnityEngine::Vector3 ComponentWiseMult(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // static public UnityEngine.Vector3 ComponentWiseDiv(UnityEngine.Vector3 num, UnityEngine.Vector3 den)
    // Offset: 0x2904E40
    static ::UnityEngine::Vector3 ComponentWiseDiv(::UnityEngine::Vector3 num, ::UnityEngine::Vector3 den);
    // static public UnityEngine.Vector3 ComponentWiseDivSafe(UnityEngine.Vector3 num, UnityEngine.Vector3 den)
    // Offset: 0x28FB4EC
    static ::UnityEngine::Vector3 ComponentWiseDivSafe(::UnityEngine::Vector3 num, ::UnityEngine::Vector3 den);
    // static public UnityEngine.Vector3 ClampBend(UnityEngine.Vector3 vector, UnityEngine.Vector3 reference, System.Single maxBendAngle)
    // Offset: 0x28FB170
    static ::UnityEngine::Vector3 ClampBend(::UnityEngine::Vector3 vector, ::UnityEngine::Vector3 reference, float maxBendAngle);
    // public System.Void .ctor()
    // Offset: 0x2904E50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::VectorUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorUtil*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2904E58
    static void _cctor();
  }; // BoingKit.VectorUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::VectorUtil::Rotate2D
// Il2CppName: Rotate2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&BoingKit::VectorUtil::Rotate2D)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "Rotate2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, angle});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::NormalizeSafe
// Il2CppName: NormalizeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&BoingKit::VectorUtil::NormalizeSafe)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* fallback = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "NormalizeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, fallback});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::FindOrthogonal
// Il2CppName: FindOrthogonal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&BoingKit::VectorUtil::FindOrthogonal)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "FindOrthogonal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::FormOrthogonalBasis
// Il2CppName: FormOrthogonalBasis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&BoingKit::VectorUtil::FormOrthogonalBasis)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "FormOrthogonalBasis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::Slerp
// Il2CppName: Slerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&BoingKit::VectorUtil::Slerp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "Slerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::GetClosestPointOnSegment
// Il2CppName: GetClosestPointOnSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&BoingKit::VectorUtil::GetClosestPointOnSegment)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* segA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* segB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "GetClosestPointOnSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, segA, segB});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::TriLerp
// Il2CppName: TriLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, float, float, float)>(&BoingKit::VectorUtil::TriLerp)> {
  static const MethodInfo* get() {
    static auto* v000 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v001 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v010 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v011 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v100 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v101 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v110 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v111 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* tx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "TriLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v000, v001, v010, v011, v100, v101, v110, v111, tx, ty, tz});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::TriLerp
// Il2CppName: TriLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, bool, bool, bool, float, float, float)>(&BoingKit::VectorUtil::TriLerp)> {
  static const MethodInfo* get() {
    static auto* v000 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v001 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v010 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v011 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v100 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v101 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v110 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* v111 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* lerpX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpZ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "TriLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v000, v001, v010, v011, v100, v101, v110, v111, lerpX, lerpY, lerpZ, tx, ty, tz});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::TriLerp
// Il2CppName: TriLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, bool, bool, bool, float, float, float)>(&BoingKit::VectorUtil::TriLerp)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* lerpX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpZ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "TriLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max, lerpX, lerpY, lerpZ, tx, ty, tz});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::TriLerp
// Il2CppName: TriLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, bool, bool, bool, float, float, float)>(&BoingKit::VectorUtil::TriLerp)> {
  static const MethodInfo* get() {
    static auto* v000 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v001 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v010 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v011 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v100 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v101 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v110 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* v111 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lerpX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpZ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "TriLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v000, v001, v010, v011, v100, v101, v110, v111, lerpX, lerpY, lerpZ, tx, ty, tz});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::TriLerp
// Il2CppName: TriLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(ByRef<::UnityEngine::Vector4>, ByRef<::UnityEngine::Vector4>, bool, bool, bool, float, float, float)>(&BoingKit::VectorUtil::TriLerp)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->this_arg;
    static auto* lerpX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpY = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lerpZ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "TriLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max, lerpX, lerpY, lerpZ, tx, ty, tz});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ClampLength
// Il2CppName: ClampLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float, float)>(&BoingKit::VectorUtil::ClampLength)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* minLen = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxLen = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ClampLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, minLen, maxLen});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::MinComponent
// Il2CppName: MinComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&BoingKit::VectorUtil::MinComponent)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "MinComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::MaxComponent
// Il2CppName: MaxComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&BoingKit::VectorUtil::MaxComponent)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "MaxComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ComponentWiseAbs
// Il2CppName: ComponentWiseAbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&BoingKit::VectorUtil::ComponentWiseAbs)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ComponentWiseAbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ComponentWiseMult
// Il2CppName: ComponentWiseMult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&BoingKit::VectorUtil::ComponentWiseMult)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ComponentWiseMult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ComponentWiseDiv
// Il2CppName: ComponentWiseDiv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&BoingKit::VectorUtil::ComponentWiseDiv)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* den = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ComponentWiseDiv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num, den});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ComponentWiseDivSafe
// Il2CppName: ComponentWiseDivSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&BoingKit::VectorUtil::ComponentWiseDivSafe)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* den = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ComponentWiseDivSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num, den});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::ClampBend
// Il2CppName: ClampBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&BoingKit::VectorUtil::ClampBend)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxBendAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), "ClampBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, reference, maxBendAngle});
  }
};
// Writing MetadataGetter for method: BoingKit::VectorUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::VectorUtil::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::VectorUtil::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::VectorUtil*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
