// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BoingKit.BoingWorkAsynchronous
#include "BoingKit/BoingWorkAsynchronous.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobParallelFor
#include "Unity/Jobs/IJobParallelFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: BoingKit.BoingEffector/Params
#include "BoingKit/BoingEffector_Params.hpp"
// Including type: BoingKit.BoingWork/Params
#include "BoingKit/BoingWork_Params.hpp"
// Including type: BoingKit.BoingWork/Output
#include "BoingKit/BoingWork_Output.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::BoingWorkAsynchronous::ReactorJob, "BoingKit", "BoingWorkAsynchronous/ReactorJob");
// Type namespace: BoingKit
namespace BoingKit {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BoingKit.BoingWorkAsynchronous/ReactorJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoingWorkAsynchronous::ReactorJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobParallelFor*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<BoingKit.BoingEffector/Params> Effectors
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::BoingKit::BoingEffector::Params> Effectors;
    // public Unity.Collections.NativeArray`1<BoingKit.BoingWork/Params> Params
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Params> Params;
    // public Unity.Collections.NativeArray`1<BoingKit.BoingWork/Output> Output
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Output> Output;
    // public System.Single DeltaTime
    // Size: 0x4
    // Offset: 0x30
    float DeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FixedDeltaTime
    // Size: 0x4
    // Offset: 0x34
    float FixedDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: ReactorJob
    constexpr ReactorJob(::Unity::Collections::NativeArray_1<::BoingKit::BoingEffector::Params> Effectors_ = {}, ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Params> Params_ = {}, ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Output> Output_ = {}, float DeltaTime_ = {}, float FixedDeltaTime_ = {}) noexcept : Effectors{Effectors_}, Params{Params_}, Output{Output_}, DeltaTime{DeltaTime_}, FixedDeltaTime{FixedDeltaTime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobParallelFor
    operator ::Unity::Jobs::IJobParallelFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobParallelFor*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<BoingKit.BoingEffector/Params> Effectors
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::BoingKit::BoingEffector::Params>& dyn_Effectors();
    // Get instance field reference: public Unity.Collections.NativeArray`1<BoingKit.BoingWork/Params> Params
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Params>& dyn_Params();
    // Get instance field reference: public Unity.Collections.NativeArray`1<BoingKit.BoingWork/Output> Output
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::BoingKit::BoingWork::Output>& dyn_Output();
    // Get instance field reference: public System.Single DeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_DeltaTime();
    // Get instance field reference: public System.Single FixedDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_FixedDeltaTime();
    // public System.Void Execute(System.Int32 index)
    // Offset: 0x28FF0A8
    void Execute(int index);
  }; // BoingKit.BoingWorkAsynchronous/ReactorJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::BoingWorkAsynchronous::ReactorJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoingKit::BoingWorkAsynchronous::ReactorJob::*)(int)>(&BoingKit::BoingWorkAsynchronous::ReactorJob::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::BoingWorkAsynchronous::ReactorJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
