// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: BoingKit
namespace BoingKit {
  // Forward declaring type: MathUtil
  class MathUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BoingKit::MathUtil);
DEFINE_IL2CPP_ARG_TYPE(::BoingKit::MathUtil*, "BoingKit", "MathUtil");
// Type namespace: BoingKit
namespace BoingKit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BoingKit.MathUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class MathUtil : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Single Pi
    static float _get_Pi();
    // Set static field: static public readonly System.Single Pi
    static void _set_Pi(float value);
    // Get static field: static public readonly System.Single TwoPi
    static float _get_TwoPi();
    // Set static field: static public readonly System.Single TwoPi
    static void _set_TwoPi(float value);
    // Get static field: static public readonly System.Single HalfPi
    static float _get_HalfPi();
    // Set static field: static public readonly System.Single HalfPi
    static void _set_HalfPi(float value);
    // Get static field: static public readonly System.Single QuaterPi
    static float _get_QuaterPi();
    // Set static field: static public readonly System.Single QuaterPi
    static void _set_QuaterPi(float value);
    // Get static field: static public readonly System.Single SixthPi
    static float _get_SixthPi();
    // Set static field: static public readonly System.Single SixthPi
    static void _set_SixthPi(float value);
    // Get static field: static public readonly System.Single Sqrt2
    static float _get_Sqrt2();
    // Set static field: static public readonly System.Single Sqrt2
    static void _set_Sqrt2(float value);
    // Get static field: static public readonly System.Single Sqrt2Inv
    static float _get_Sqrt2Inv();
    // Set static field: static public readonly System.Single Sqrt2Inv
    static void _set_Sqrt2Inv(float value);
    // Get static field: static public readonly System.Single Sqrt3
    static float _get_Sqrt3();
    // Set static field: static public readonly System.Single Sqrt3
    static void _set_Sqrt3(float value);
    // Get static field: static public readonly System.Single Sqrt3Inv
    static float _get_Sqrt3Inv();
    // Set static field: static public readonly System.Single Sqrt3Inv
    static void _set_Sqrt3Inv(float value);
    // Get static field: static public readonly System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static public readonly System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get static field: static public readonly System.Single Rad2Deg
    static float _get_Rad2Deg();
    // Set static field: static public readonly System.Single Rad2Deg
    static void _set_Rad2Deg(float value);
    // Get static field: static public readonly System.Single Deg2Rad
    static float _get_Deg2Rad();
    // Set static field: static public readonly System.Single Deg2Rad
    static void _set_Deg2Rad(float value);
    // static public System.Single AsinSafe(System.Single x)
    // Offset: 0x2902358
    static float AsinSafe(float x);
    // static public System.Single AcosSafe(System.Single x)
    // Offset: 0x2902370
    static float AcosSafe(float x);
    // static public System.Single InvSafe(System.Single x)
    // Offset: 0x28FB478
    static float InvSafe(float x);
    // static public System.Single PointLineDist(UnityEngine.Vector2 point, UnityEngine.Vector2 linePos, UnityEngine.Vector2 lineDir)
    // Offset: 0x2902388
    static float PointLineDist(::UnityEngine::Vector2 point, ::UnityEngine::Vector2 linePos, ::UnityEngine::Vector2 lineDir);
    // static public System.Single PointSegmentDist(UnityEngine.Vector2 point, UnityEngine.Vector2 segmentPosA, UnityEngine.Vector2 segmentPosB)
    // Offset: 0x2902410
    static float PointSegmentDist(::UnityEngine::Vector2 point, ::UnityEngine::Vector2 segmentPosA, ::UnityEngine::Vector2 segmentPosB);
    // static public System.Single Seek(System.Single current, System.Single target, System.Single maxDelta)
    // Offset: 0x2902540
    static float Seek(float current, float target, float maxDelta);
    // static public UnityEngine.Vector2 Seek(UnityEngine.Vector2 current, UnityEngine.Vector2 target, System.Single maxDelta)
    // Offset: 0x2902564
    static ::UnityEngine::Vector2 Seek(::UnityEngine::Vector2 current, ::UnityEngine::Vector2 target, float maxDelta);
    // static public System.Single Remainder(System.Single a, System.Single b)
    // Offset: 0x29026E4
    static float Remainder(float a, float b);
    // static public System.Int32 Remainder(System.Int32 a, System.Int32 b)
    // Offset: 0x29026F4
    static int Remainder(int a, int b);
    // static public System.Single Modulo(System.Single a, System.Single b)
    // Offset: 0x2902700
    static float Modulo(float a, float b);
    // static public System.Int32 Modulo(System.Int32 a, System.Int32 b)
    // Offset: 0x2902728
    static int Modulo(int a, int b);
    // public System.Void .ctor()
    // Offset: 0x290273C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MathUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BoingKit::MathUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MathUtil*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2902744
    static void _cctor();
  }; // BoingKit.MathUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BoingKit::MathUtil::AsinSafe
// Il2CppName: AsinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&BoingKit::MathUtil::AsinSafe)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "AsinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::AcosSafe
// Il2CppName: AcosSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&BoingKit::MathUtil::AcosSafe)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "AcosSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::InvSafe
// Il2CppName: InvSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&BoingKit::MathUtil::InvSafe)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "InvSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::PointLineDist
// Il2CppName: PointLineDist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&BoingKit::MathUtil::PointLineDist)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* lineDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "PointLineDist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, linePos, lineDir});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::PointSegmentDist
// Il2CppName: PointSegmentDist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&BoingKit::MathUtil::PointSegmentDist)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* segmentPosA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* segmentPosB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "PointSegmentDist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, segmentPosA, segmentPosB});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&BoingKit::MathUtil::Seek)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, target, maxDelta});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, float)>(&BoingKit::MathUtil::Seek)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* maxDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, target, maxDelta});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Remainder
// Il2CppName: Remainder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&BoingKit::MathUtil::Remainder)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Remainder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Remainder
// Il2CppName: Remainder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&BoingKit::MathUtil::Remainder)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Remainder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Modulo
// Il2CppName: Modulo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&BoingKit::MathUtil::Modulo)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Modulo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::Modulo
// Il2CppName: Modulo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&BoingKit::MathUtil::Modulo)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), "Modulo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: BoingKit::MathUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BoingKit::MathUtil::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BoingKit::MathUtil::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoingKit::MathUtil*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
