// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MathGeoLib
namespace MathGeoLib {
  // Forward declaring type: Line3
  struct Line3;
  // Forward declaring type: Matrix3X4
  struct Matrix3X4;
  // Forward declaring type: Plane
  struct Plane;
}
// Completed forward declares
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Forward declaring type: OrientedBoundingBox
  class OrientedBoundingBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MathGeoLib::OrientedBoundingBox);
DEFINE_IL2CPP_ARG_TYPE(::MathGeoLib::OrientedBoundingBox*, "MathGeoLib", "OrientedBoundingBox");
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Size: 0x4C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: MathGeoLib.OrientedBoundingBox
  // [TokenAttribute] Offset: FFFFFFFF
  // [PublicAPIAttribute] Offset: FFFFFFFF
  class OrientedBoundingBox : public ::Il2CppObject {
    public:
    // Nested type: ::MathGeoLib::OrientedBoundingBox::NativeMethods
    class NativeMethods;
    public:
    // public UnityEngine.Vector3 Center
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Extent
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 Extent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Axis1
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 Axis1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Axis2
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 Axis2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Axis3
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 Axis3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Vector3 Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Center();
    // Get instance field reference: public UnityEngine.Vector3 Extent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Extent();
    // Get instance field reference: public UnityEngine.Vector3 Axis1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Axis1();
    // Get instance field reference: public UnityEngine.Vector3 Axis2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Axis2();
    // Get instance field reference: public UnityEngine.Vector3 Axis3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Axis3();
    // public System.Void .ctor()
    // Offset: 0x267F1D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrientedBoundingBox* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MathGeoLib::OrientedBoundingBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrientedBoundingBox*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Vector3 center, UnityEngine.Vector3 extent, UnityEngine.Vector3 axis1, UnityEngine.Vector3 axis2, UnityEngine.Vector3 axis3)
    // Offset: 0x267F1DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrientedBoundingBox* New_ctor(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 extent, ::UnityEngine::Vector3 axis1, ::UnityEngine::Vector3 axis2, ::UnityEngine::Vector3 axis3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MathGeoLib::OrientedBoundingBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrientedBoundingBox*, creationType>(center, extent, axis1, axis2, axis3)));
    }
    // static public System.Int32 get_NumEdges()
    // Offset: 0x267F27C
    static int get_NumEdges();
    // static public System.Int32 get_NumFaces()
    // Offset: 0x267F2E8
    static int get_NumFaces();
    // static public System.Int32 get_NumVertices()
    // Offset: 0x267F354
    static int get_NumVertices();
    // static public MathGeoLib.OrientedBoundingBox OptimalEnclosing(UnityEngine.Vector3[] points)
    // Offset: 0x267F3C0
    static ::MathGeoLib::OrientedBoundingBox* OptimalEnclosing(::ArrayW<::UnityEngine::Vector3> points);
    // static public MathGeoLib.OrientedBoundingBox BruteEnclosing(UnityEngine.Vector3[] points)
    // Offset: 0x267F5D4
    static ::MathGeoLib::OrientedBoundingBox* BruteEnclosing(::ArrayW<::UnityEngine::Vector3> points);
    // public System.Boolean Contains(UnityEngine.Vector3 point)
    // Offset: 0x267F7E8
    bool Contains(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 CornerPoint(System.Int32 index)
    // Offset: 0x267F8A0
    ::UnityEngine::Vector3 CornerPoint(int index);
    // public System.Void Enclose(UnityEngine.Vector3 point)
    // Offset: 0x267F968
    void Enclose(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 FacePoint(System.Int32 index, System.Single u, System.Single v)
    // Offset: 0x267FA18
    ::UnityEngine::Vector3 FacePoint(int index, float u, float v);
    // public UnityEngine.Vector3 PointInside(System.Single x, System.Single y, System.Single z)
    // Offset: 0x267FAF8
    ::UnityEngine::Vector3 PointInside(float x, float y, float z);
    // public System.Void Scale(UnityEngine.Vector3 center, UnityEngine.Vector3 factor)
    // Offset: 0x267FBD8
    void Scale(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 factor);
    // public System.Void Translate(UnityEngine.Vector3 offset)
    // Offset: 0x267FCA8
    void Translate(::UnityEngine::Vector3 offset);
    // public System.Single Distance(UnityEngine.Vector3 point)
    // Offset: 0x267FD58
    float Distance(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 PointOnEdge(System.Int32 index, System.Single u)
    // Offset: 0x267FE08
    ::UnityEngine::Vector3 PointOnEdge(int index, float u);
    // public MathGeoLib.Line3 Edge(System.Int32 index)
    // Offset: 0x267FEE0
    ::MathGeoLib::Line3 Edge(int index);
    // public MathGeoLib.Matrix3X4 WorldToLocal()
    // Offset: 0x267FFB4
    ::MathGeoLib::Matrix3X4 WorldToLocal();
    // public MathGeoLib.Matrix3X4 LocalToWorld()
    // Offset: 0x268007C
    ::MathGeoLib::Matrix3X4 LocalToWorld();
    // public MathGeoLib.Plane FacePlane(System.Int32 index)
    // Offset: 0x2680144
    ::MathGeoLib::Plane FacePlane(int index);
    // public override System.String ToString()
    // Offset: 0x2680208
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // MathGeoLib.OrientedBoundingBox
  #pragma pack(pop)
  static check_size<sizeof(OrientedBoundingBox), 64 + sizeof(::UnityEngine::Vector3)> __MathGeoLib_OrientedBoundingBoxSizeCheck;
  static_assert(sizeof(OrientedBoundingBox) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::get_NumEdges
// Il2CppName: get_NumEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::get_NumEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "get_NumEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::get_NumFaces
// Il2CppName: get_NumFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::get_NumFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "get_NumFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::get_NumVertices
// Il2CppName: get_NumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::get_NumVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "get_NumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::OptimalEnclosing
// Il2CppName: OptimalEnclosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::OrientedBoundingBox* (*)(::ArrayW<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::OptimalEnclosing)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "OptimalEnclosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::BruteEnclosing
// Il2CppName: BruteEnclosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::OrientedBoundingBox* (*)(::ArrayW<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::BruteEnclosing)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "BruteEnclosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MathGeoLib::OrientedBoundingBox::*)(::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::Contains)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::CornerPoint
// Il2CppName: CornerPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MathGeoLib::OrientedBoundingBox::*)(int)>(&MathGeoLib::OrientedBoundingBox::CornerPoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "CornerPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Enclose
// Il2CppName: Enclose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MathGeoLib::OrientedBoundingBox::*)(::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::Enclose)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Enclose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::FacePoint
// Il2CppName: FacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MathGeoLib::OrientedBoundingBox::*)(int, float, float)>(&MathGeoLib::OrientedBoundingBox::FacePoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "FacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, u, v});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::PointInside
// Il2CppName: PointInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MathGeoLib::OrientedBoundingBox::*)(float, float, float)>(&MathGeoLib::OrientedBoundingBox::PointInside)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "PointInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MathGeoLib::OrientedBoundingBox::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::Scale)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, factor});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MathGeoLib::OrientedBoundingBox::*)(::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::Translate)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Distance
// Il2CppName: Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MathGeoLib::OrientedBoundingBox::*)(::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::Distance)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::PointOnEdge
// Il2CppName: PointOnEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MathGeoLib::OrientedBoundingBox::*)(int, float)>(&MathGeoLib::OrientedBoundingBox::PointOnEdge)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "PointOnEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, u});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::Edge
// Il2CppName: Edge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::Line3 (MathGeoLib::OrientedBoundingBox::*)(int)>(&MathGeoLib::OrientedBoundingBox::Edge)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "Edge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::WorldToLocal
// Il2CppName: WorldToLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::Matrix3X4 (MathGeoLib::OrientedBoundingBox::*)()>(&MathGeoLib::OrientedBoundingBox::WorldToLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "WorldToLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::LocalToWorld
// Il2CppName: LocalToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::Matrix3X4 (MathGeoLib::OrientedBoundingBox::*)()>(&MathGeoLib::OrientedBoundingBox::LocalToWorld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "LocalToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::FacePlane
// Il2CppName: FacePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MathGeoLib::Plane (MathGeoLib::OrientedBoundingBox::*)(int)>(&MathGeoLib::OrientedBoundingBox::FacePlane)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "FacePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MathGeoLib::OrientedBoundingBox::*)()>(&MathGeoLib::OrientedBoundingBox::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
