// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Forward declaring type: Matrix3X4
  struct Matrix3X4;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MathGeoLib::Matrix3X4, "MathGeoLib", "Matrix3X4");
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: MathGeoLib.Matrix3X4
  // [TokenAttribute] Offset: FFFFFFFF
  // [PublicAPIAttribute] Offset: FFFFFFFF
  struct Matrix3X4/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Single M00
    // Size: 0x4
    // Offset: 0x0
    float M00;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M01
    // Size: 0x4
    // Offset: 0x4
    float M01;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M02
    // Size: 0x4
    // Offset: 0x8
    float M02;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M03
    // Size: 0x4
    // Offset: 0xC
    float M03;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M10
    // Size: 0x4
    // Offset: 0x10
    float M10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M11
    // Size: 0x4
    // Offset: 0x14
    float M11;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M12
    // Size: 0x4
    // Offset: 0x18
    float M12;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M13
    // Size: 0x4
    // Offset: 0x1C
    float M13;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M20
    // Size: 0x4
    // Offset: 0x20
    float M20;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M21
    // Size: 0x4
    // Offset: 0x24
    float M21;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M22
    // Size: 0x4
    // Offset: 0x28
    float M22;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single M23
    // Size: 0x4
    // Offset: 0x2C
    float M23;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Matrix3X4
    constexpr Matrix3X4(float M00_ = {}, float M01_ = {}, float M02_ = {}, float M03_ = {}, float M10_ = {}, float M11_ = {}, float M12_ = {}, float M13_ = {}, float M20_ = {}, float M21_ = {}, float M22_ = {}, float M23_ = {}) noexcept : M00{M00_}, M01{M01_}, M02{M02_}, M03{M03_}, M10{M10_}, M11{M11_}, M12{M12_}, M13{M13_}, M20{M20_}, M21{M21_}, M22{M22_}, M23{M23_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Single M00
    [[deprecated("Use field access instead!")]] float& dyn_M00();
    // Get instance field reference: public readonly System.Single M01
    [[deprecated("Use field access instead!")]] float& dyn_M01();
    // Get instance field reference: public readonly System.Single M02
    [[deprecated("Use field access instead!")]] float& dyn_M02();
    // Get instance field reference: public readonly System.Single M03
    [[deprecated("Use field access instead!")]] float& dyn_M03();
    // Get instance field reference: public readonly System.Single M10
    [[deprecated("Use field access instead!")]] float& dyn_M10();
    // Get instance field reference: public readonly System.Single M11
    [[deprecated("Use field access instead!")]] float& dyn_M11();
    // Get instance field reference: public readonly System.Single M12
    [[deprecated("Use field access instead!")]] float& dyn_M12();
    // Get instance field reference: public readonly System.Single M13
    [[deprecated("Use field access instead!")]] float& dyn_M13();
    // Get instance field reference: public readonly System.Single M20
    [[deprecated("Use field access instead!")]] float& dyn_M20();
    // Get instance field reference: public readonly System.Single M21
    [[deprecated("Use field access instead!")]] float& dyn_M21();
    // Get instance field reference: public readonly System.Single M22
    [[deprecated("Use field access instead!")]] float& dyn_M22();
    // Get instance field reference: public readonly System.Single M23
    [[deprecated("Use field access instead!")]] float& dyn_M23();
    // public System.Void .ctor(System.Single m00, System.Single m01, System.Single m02, System.Single m03, System.Single m10, System.Single m11, System.Single m12, System.Single m13, System.Single m20, System.Single m21, System.Single m22, System.Single m23)
    // Offset: 0x267EC74
    // ABORTED: conflicts with another method.  Matrix3X4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23);
    // public override System.String ToString()
    // Offset: 0x267ECA0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // MathGeoLib.Matrix3X4
  #pragma pack(pop)
  static check_size<sizeof(Matrix3X4), 44 + sizeof(float)> __MathGeoLib_Matrix3X4SizeCheck;
  static_assert(sizeof(Matrix3X4) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MathGeoLib::Matrix3X4::Matrix3X4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MathGeoLib::Matrix3X4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MathGeoLib::Matrix3X4::*)()>(&MathGeoLib::Matrix3X4::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::Matrix3X4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
