// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MathGeoLib.OrientedBoundingBox
#include "MathGeoLib/OrientedBoundingBox.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: MathGeoLib
namespace MathGeoLib {
  // Forward declaring type: Line3
  struct Line3;
  // Forward declaring type: Matrix3X4
  struct Matrix3X4;
  // Forward declaring type: Plane
  struct Plane;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MathGeoLib::OrientedBoundingBox::NativeMethods);
DEFINE_IL2CPP_ARG_TYPE(::MathGeoLib::OrientedBoundingBox::NativeMethods*, "MathGeoLib", "OrientedBoundingBox/NativeMethods");
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: MathGeoLib.OrientedBoundingBox/NativeMethods
  // [TokenAttribute] Offset: FFFFFFFF
  class OrientedBoundingBox::NativeMethods : public ::Il2CppObject {
    public:
    // static field const value: static private System.String DllName
    static constexpr const char* DllName = "MathGeoLib.Exports.dll";
    // Get static field: static private System.String DllName
    static ::StringW _get_DllName();
    // Set static field: static private System.String DllName
    static void _set_DllName(::StringW value);
    // static public System.Void obb_optimal_enclosing(UnityEngine.Vector3[] points, System.Int32 numPoints, out UnityEngine.Vector3 center, out UnityEngine.Vector3 extent, in UnityEngine.Vector3[] axis)
    // Offset: 0x267F518
    static void obb_optimal_enclosing(::ArrayW<::UnityEngine::Vector3> points, int numPoints, ByRef<::UnityEngine::Vector3> center, ByRef<::UnityEngine::Vector3> extent, ByRef<::ArrayW<::UnityEngine::Vector3>> axis);
    // static public System.Void obb_brute_enclosing(UnityEngine.Vector3[] points, System.Int32 numPoints, out UnityEngine.Vector3 center, out UnityEngine.Vector3 extent, in UnityEngine.Vector3[] axis)
    // Offset: 0x267F72C
    static void obb_brute_enclosing(::ArrayW<::UnityEngine::Vector3> points, int numPoints, ByRef<::UnityEngine::Vector3> center, ByRef<::UnityEngine::Vector3> extent, ByRef<::ArrayW<::UnityEngine::Vector3>> axis);
    // static public System.Void obb_enclose(in MathGeoLib.OrientedBoundingBox box, UnityEngine.Vector3 point)
    // Offset: 0x267F96C
    static void obb_enclose(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ::UnityEngine::Vector3 point);
    // static public System.Void obb_point_inside(in MathGeoLib.OrientedBoundingBox box, System.Single x, System.Single y, System.Single z, out UnityEngine.Vector3 point)
    // Offset: 0x267FB24
    static void obb_point_inside(ByRef<::MathGeoLib::OrientedBoundingBox*> box, float x, float y, float z, ByRef<::UnityEngine::Vector3> point);
    // static public System.Boolean obb_contains(in MathGeoLib.OrientedBoundingBox box, UnityEngine.Vector3 point)
    // Offset: 0x267F7EC
    static bool obb_contains(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ::UnityEngine::Vector3 point);
    // static public System.Void obb_corner_point(in MathGeoLib.OrientedBoundingBox box, System.Int32 index, out UnityEngine.Vector3 point)
    // Offset: 0x267F8CC
    static void obb_corner_point(ByRef<::MathGeoLib::OrientedBoundingBox*> box, int index, ByRef<::UnityEngine::Vector3> point);
    // static public System.Void obb_face_point(in MathGeoLib.OrientedBoundingBox box, System.Int32 index, System.Single u, System.Single v, out UnityEngine.Vector3 point)
    // Offset: 0x267FA44
    static void obb_face_point(ByRef<::MathGeoLib::OrientedBoundingBox*> box, int index, float u, float v, ByRef<::UnityEngine::Vector3> point);
    // static public System.Int32 obb_num_faces()
    // Offset: 0x267F2EC
    static int obb_num_faces();
    // static public System.Int32 obb_num_edges()
    // Offset: 0x267F280
    static int obb_num_edges();
    // static public System.Int32 obb_num_vertices()
    // Offset: 0x267F358
    static int obb_num_vertices();
    // static public System.Void obb_scale(in MathGeoLib.OrientedBoundingBox box, UnityEngine.Vector3 center, UnityEngine.Vector3 factor)
    // Offset: 0x267FBDC
    static void obb_scale(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ::UnityEngine::Vector3 center, ::UnityEngine::Vector3 factor);
    // static public System.Void obb_translate(in MathGeoLib.OrientedBoundingBox box, UnityEngine.Vector3 offset)
    // Offset: 0x267FCAC
    static void obb_translate(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ::UnityEngine::Vector3 offset);
    // static public System.Single obb_distance(in MathGeoLib.OrientedBoundingBox box, UnityEngine.Vector3 point)
    // Offset: 0x267FD5C
    static float obb_distance(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ::UnityEngine::Vector3 point);
    // static public System.Void obb_point_on_edge(in MathGeoLib.OrientedBoundingBox box, System.Int32 index, System.Single u, out UnityEngine.Vector3 point)
    // Offset: 0x267FE34
    static void obb_point_on_edge(ByRef<::MathGeoLib::OrientedBoundingBox*> box, int index, float u, ByRef<::UnityEngine::Vector3> point);
    // static public System.Void obb_edge(in MathGeoLib.OrientedBoundingBox box, System.Int32 index, out MathGeoLib.Line3 segment)
    // Offset: 0x267FF18
    static void obb_edge(ByRef<::MathGeoLib::OrientedBoundingBox*> box, int index, ByRef<::MathGeoLib::Line3> segment);
    // static public System.Void obb_world_to_local(in MathGeoLib.OrientedBoundingBox box, out MathGeoLib.Matrix3X4 local)
    // Offset: 0x267FFF0
    static void obb_world_to_local(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ByRef<::MathGeoLib::Matrix3X4> local);
    // static public System.Void obb_local_to_world(in MathGeoLib.OrientedBoundingBox box, out MathGeoLib.Matrix3X4 world)
    // Offset: 0x26800B8
    static void obb_local_to_world(ByRef<::MathGeoLib::OrientedBoundingBox*> box, ByRef<::MathGeoLib::Matrix3X4> world);
    // static public System.Void obb_face_plane(in MathGeoLib.OrientedBoundingBox box, System.Int32 index, out MathGeoLib.Plane plane)
    // Offset: 0x268016C
    static void obb_face_plane(ByRef<::MathGeoLib::OrientedBoundingBox*> box, int index, ByRef<::MathGeoLib::Plane> plane);
  }; // MathGeoLib.OrientedBoundingBox/NativeMethods
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_optimal_enclosing
// Il2CppName: obb_optimal_enclosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, int, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::ArrayW<::UnityEngine::Vector3>>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_optimal_enclosing)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* extent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* axis = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_optimal_enclosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numPoints, center, extent, axis});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_brute_enclosing
// Il2CppName: obb_brute_enclosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, int, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::ArrayW<::UnityEngine::Vector3>>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_brute_enclosing)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* extent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* axis = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_brute_enclosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numPoints, center, extent, axis});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_enclose
// Il2CppName: obb_enclose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_enclose)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_enclose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_point_inside
// Il2CppName: obb_point_inside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, float, float, float, ByRef<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_point_inside)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_point_inside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, x, y, z, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_contains
// Il2CppName: obb_contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_contains)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_corner_point
// Il2CppName: obb_corner_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, int, ByRef<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_corner_point)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_corner_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, index, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_face_point
// Il2CppName: obb_face_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, int, float, float, ByRef<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_face_point)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_face_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, index, u, v, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_faces
// Il2CppName: obb_num_faces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_faces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_num_faces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_edges
// Il2CppName: obb_num_edges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_edges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_num_edges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_vertices
// Il2CppName: obb_num_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_num_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_num_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_scale
// Il2CppName: obb_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_scale)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, center, factor});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_translate
// Il2CppName: obb_translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_translate)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, offset});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_distance
// Il2CppName: obb_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ::UnityEngine::Vector3)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_distance)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_point_on_edge
// Il2CppName: obb_point_on_edge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, int, float, ByRef<::UnityEngine::Vector3>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_point_on_edge)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_point_on_edge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, index, u, point});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_edge
// Il2CppName: obb_edge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, int, ByRef<::MathGeoLib::Line3>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_edge)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* segment = &::il2cpp_utils::GetClassFromName("MathGeoLib", "Line3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_edge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, index, segment});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_world_to_local
// Il2CppName: obb_world_to_local
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ByRef<::MathGeoLib::Matrix3X4>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_world_to_local)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("MathGeoLib", "Matrix3X4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_world_to_local", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, local});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_local_to_world
// Il2CppName: obb_local_to_world
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, ByRef<::MathGeoLib::Matrix3X4>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_local_to_world)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* world = &::il2cpp_utils::GetClassFromName("MathGeoLib", "Matrix3X4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_local_to_world", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, world});
  }
};
// Writing MetadataGetter for method: MathGeoLib::OrientedBoundingBox::NativeMethods::obb_face_plane
// Il2CppName: obb_face_plane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::MathGeoLib::OrientedBoundingBox*>, int, ByRef<::MathGeoLib::Plane>)>(&MathGeoLib::OrientedBoundingBox::NativeMethods::obb_face_plane)> {
  static const MethodInfo* get() {
    static auto* box = &::il2cpp_utils::GetClassFromName("MathGeoLib", "OrientedBoundingBox")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* plane = &::il2cpp_utils::GetClassFromName("MathGeoLib", "Plane")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::OrientedBoundingBox::NativeMethods*), "obb_face_plane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{box, index, plane});
  }
};
