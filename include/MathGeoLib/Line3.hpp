// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Forward declaring type: Line3
  struct Line3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MathGeoLib::Line3, "MathGeoLib", "Line3");
// Type namespace: MathGeoLib
namespace MathGeoLib {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: MathGeoLib.Line3
  // [TokenAttribute] Offset: FFFFFFFF
  // [PublicAPIAttribute] Offset: FFFFFFFF
  struct Line3/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly UnityEngine.Vector3 Point1
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Point1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Vector3 Point2
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 Point2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: Line3
    constexpr Line3(::UnityEngine::Vector3 Point1_ = {}, ::UnityEngine::Vector3 Point2_ = {}) noexcept : Point1{Point1_}, Point2{Point2_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly UnityEngine.Vector3 Point1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Point1();
    // Get instance field reference: public readonly UnityEngine.Vector3 Point2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Point2();
    // public System.Void .ctor(UnityEngine.Vector3 point1, UnityEngine.Vector3 point2)
    // Offset: 0x267EA70
    // ABORTED: conflicts with another method.  Line3(::UnityEngine::Vector3 point1, ::UnityEngine::Vector3 point2);
    // public override System.String ToString()
    // Offset: 0x267EA80
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // MathGeoLib.Line3
  #pragma pack(pop)
  static check_size<sizeof(Line3), 12 + sizeof(::UnityEngine::Vector3)> __MathGeoLib_Line3SizeCheck;
  static_assert(sizeof(Line3) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MathGeoLib::Line3::Line3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MathGeoLib::Line3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MathGeoLib::Line3::*)()>(&MathGeoLib::Line3::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MathGeoLib::Line3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
