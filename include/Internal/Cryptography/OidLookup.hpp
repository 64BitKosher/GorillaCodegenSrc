// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Internal::Cryptography
namespace Internal::Cryptography {
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: OidGroup
  struct OidGroup;
}
// Completed forward declares
// Type namespace: Internal.Cryptography
namespace Internal::Cryptography {
  // Forward declaring type: OidLookup
  class OidLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Internal::Cryptography::OidLookup);
DEFINE_IL2CPP_ARG_TYPE(::Internal::Cryptography::OidLookup*, "Internal.Cryptography", "OidLookup");
// Type namespace: Internal.Cryptography
namespace Internal::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Internal.Cryptography.OidLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class OidLookup : public ::Il2CppObject {
    public:
    // Nested type: ::Internal::Cryptography::OidLookup::$$c
    class $$c;
    // Get static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.String,System.String> s_lateBoundOidToFriendlyName
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::StringW, ::StringW>* _get_s_lateBoundOidToFriendlyName();
    // Set static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.String,System.String> s_lateBoundOidToFriendlyName
    static void _set_s_lateBoundOidToFriendlyName(::System::Collections::Concurrent::ConcurrentDictionary_2<::StringW, ::StringW>* value);
    // Get static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.String,System.String> s_lateBoundFriendlyNameToOid
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::StringW, ::StringW>* _get_s_lateBoundFriendlyNameToOid();
    // Set static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.String,System.String> s_lateBoundFriendlyNameToOid
    static void _set_s_lateBoundFriendlyNameToOid(::System::Collections::Concurrent::ConcurrentDictionary_2<::StringW, ::StringW>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_friendlyNameToOid
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* _get_s_friendlyNameToOid();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_friendlyNameToOid
    static void _set_s_friendlyNameToOid(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_oidToFriendlyName
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* _get_s_oidToFriendlyName();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_oidToFriendlyName
    static void _set_s_oidToFriendlyName(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_compatOids
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* _get_s_compatOids();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_compatOids
    static void _set_s_compatOids(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // static public System.String ToFriendlyName(System.String oid, System.Security.Cryptography.OidGroup oidGroup, System.Boolean fallBackToAllGroups)
    // Offset: 0x4BFFC50
    static ::StringW ToFriendlyName(::StringW oid, ::System::Security::Cryptography::OidGroup oidGroup, bool fallBackToAllGroups);
    // static public System.String ToOid(System.String friendlyName, System.Security.Cryptography.OidGroup oidGroup, System.Boolean fallBackToAllGroups)
    // Offset: 0x4C001E4
    static ::StringW ToOid(::StringW friendlyName, ::System::Security::Cryptography::OidGroup oidGroup, bool fallBackToAllGroups);
    // static private System.Boolean ShouldUseCache(System.Security.Cryptography.OidGroup oidGroup)
    // Offset: 0x4BFFE2C
    static bool ShouldUseCache(::System::Security::Cryptography::OidGroup oidGroup);
    // static private System.String NativeOidToFriendlyName(System.String oid, System.Security.Cryptography.OidGroup oidGroup, System.Boolean fallBackToAllGroups)
    // Offset: 0x4BFFE34
    static ::StringW NativeOidToFriendlyName(::StringW oid, ::System::Security::Cryptography::OidGroup oidGroup, bool fallBackToAllGroups);
    // static private System.String NativeFriendlyNameToOid(System.String friendlyName, System.Security.Cryptography.OidGroup oidGroup, System.Boolean fallBackToAllGroups)
    // Offset: 0x4C00394
    static ::StringW NativeFriendlyNameToOid(::StringW friendlyName, ::System::Security::Cryptography::OidGroup oidGroup, bool fallBackToAllGroups);
    // static private System.Void .cctor()
    // Offset: 0x4C00750
    static void _cctor();
  }; // Internal.Cryptography.OidLookup
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::ToFriendlyName
// Il2CppName: ToFriendlyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::Security::Cryptography::OidGroup, bool)>(&Internal::Cryptography::OidLookup::ToFriendlyName)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* oidGroup = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "OidGroup")->byval_arg;
    static auto* fallBackToAllGroups = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), "ToFriendlyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid, oidGroup, fallBackToAllGroups});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::ToOid
// Il2CppName: ToOid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::Security::Cryptography::OidGroup, bool)>(&Internal::Cryptography::OidLookup::ToOid)> {
  static const MethodInfo* get() {
    static auto* friendlyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* oidGroup = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "OidGroup")->byval_arg;
    static auto* fallBackToAllGroups = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), "ToOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendlyName, oidGroup, fallBackToAllGroups});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::ShouldUseCache
// Il2CppName: ShouldUseCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Security::Cryptography::OidGroup)>(&Internal::Cryptography::OidLookup::ShouldUseCache)> {
  static const MethodInfo* get() {
    static auto* oidGroup = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "OidGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), "ShouldUseCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oidGroup});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::NativeOidToFriendlyName
// Il2CppName: NativeOidToFriendlyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::Security::Cryptography::OidGroup, bool)>(&Internal::Cryptography::OidLookup::NativeOidToFriendlyName)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* oidGroup = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "OidGroup")->byval_arg;
    static auto* fallBackToAllGroups = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), "NativeOidToFriendlyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid, oidGroup, fallBackToAllGroups});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::NativeFriendlyNameToOid
// Il2CppName: NativeFriendlyNameToOid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::Security::Cryptography::OidGroup, bool)>(&Internal::Cryptography::OidLookup::NativeFriendlyNameToOid)> {
  static const MethodInfo* get() {
    static auto* friendlyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* oidGroup = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "OidGroup")->byval_arg;
    static auto* fallBackToAllGroups = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), "NativeFriendlyNameToOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendlyName, oidGroup, fallBackToAllGroups});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::OidLookup::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Internal::Cryptography::OidLookup::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::OidLookup*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
