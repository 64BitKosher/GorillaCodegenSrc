// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Internal.Cryptography
namespace Internal::Cryptography {
  // Forward declaring type: Helpers
  class Helpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Internal::Cryptography::Helpers);
DEFINE_IL2CPP_ARG_TYPE(::Internal::Cryptography::Helpers*, "Internal.Cryptography", "Helpers");
// Type namespace: Internal.Cryptography
namespace Internal::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Internal.Cryptography.Helpers
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Helpers : public ::Il2CppObject {
    public:
    // static public System.Byte[] CloneByteArray(System.Byte[] src)
    // Offset: 0x44BF548
    static ::ArrayW<uint8_t> CloneByteArray(::ArrayW<uint8_t> src);
    // static public System.Byte[] GenerateRandom(System.Int32 count)
    // Offset: 0x44BF5C0
    static ::ArrayW<uint8_t> GenerateRandom(int count);
    // static public System.Void WriteInt(System.UInt32 i, System.Byte[] arr, System.Int32 offset)
    // Offset: 0x44BF764
    static void WriteInt(uint i, ::ArrayW<uint8_t> arr, int offset);
    // static public System.Char[] ToHexArrayUpper(System.Byte[] bytes)
    // Offset: 0x44BF7E4
    static ::ArrayW<::Il2CppChar> ToHexArrayUpper(::ArrayW<uint8_t> bytes);
    // static public System.String ToHexStringUpper(System.Byte[] bytes)
    // Offset: 0x44BF8EC
    static ::StringW ToHexStringUpper(::ArrayW<uint8_t> bytes);
    // static private System.Char NibbleToHex(System.Byte b)
    // Offset: 0x44BF8D0
    static ::Il2CppChar NibbleToHex(uint8_t b);
  }; // Internal.Cryptography.Helpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::CloneByteArray
// Il2CppName: CloneByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&Internal::Cryptography::Helpers::CloneByteArray)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "CloneByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::GenerateRandom
// Il2CppName: GenerateRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int)>(&Internal::Cryptography::Helpers::GenerateRandom)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "GenerateRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::WriteInt
// Il2CppName: WriteInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ::ArrayW<uint8_t>, int)>(&Internal::Cryptography::Helpers::WriteInt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "WriteInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, arr, offset});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::ToHexArrayUpper
// Il2CppName: ToHexArrayUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (*)(::ArrayW<uint8_t>)>(&Internal::Cryptography::Helpers::ToHexArrayUpper)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "ToHexArrayUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::ToHexStringUpper
// Il2CppName: ToHexStringUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&Internal::Cryptography::Helpers::ToHexStringUpper)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "ToHexStringUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Helpers::NibbleToHex
// Il2CppName: NibbleToHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(uint8_t)>(&Internal::Cryptography::Helpers::NibbleToHex)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Helpers*), "NibbleToHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
