// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X500DistinguishedName
  class X500DistinguishedName;
  // Forward declaring type: X509Extension
  class X509Extension;
  // Forward declaring type: X509NameType
  struct X509NameType;
}
// Forward declaring namespace: Internal::Cryptography::Pal
namespace Internal::Cryptography::Pal {
  // Forward declaring type: GeneralNameType
  struct GeneralNameType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Internal.Cryptography.Pal
namespace Internal::Cryptography::Pal {
  // Forward declaring type: CertificateData
  struct CertificateData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Internal::Cryptography::Pal::CertificateData, "Internal.Cryptography.Pal", "CertificateData");
// Type namespace: Internal.Cryptography.Pal
namespace Internal::Cryptography::Pal {
  // Size: 0x98
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Internal.Cryptography.Pal.CertificateData
  // [TokenAttribute] Offset: FFFFFFFF
  struct CertificateData/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier
    struct AlgorithmIdentifier;
    // Nested type: ::Internal::Cryptography::Pal::CertificateData::$ReadReverseRdns$d__21
    class $ReadReverseRdns$d__21;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier
    // [TokenAttribute] Offset: FFFFFFFF
    struct AlgorithmIdentifier/*, public ::System::ValueType*/ {
      public:
      public:
      // System.String AlgorithmId
      // Size: 0x8
      // Offset: 0x0
      ::StringW AlgorithmId;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.Byte[] Parameters
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<uint8_t> Parameters;
      // Field size check
      static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
      public:
      // Creating value type constructor for type: AlgorithmIdentifier
      constexpr AlgorithmIdentifier(::StringW AlgorithmId_ = {}, ::ArrayW<uint8_t> Parameters_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : AlgorithmId{AlgorithmId_}, Parameters{Parameters_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.String AlgorithmId
      [[deprecated("Use field access instead!")]] ::StringW& dyn_AlgorithmId();
      // Get instance field reference: System.Byte[] Parameters
      [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Parameters();
    }; // Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier
    #pragma pack(pop)
    static check_size<sizeof(CertificateData::AlgorithmIdentifier), 8 + sizeof(::ArrayW<uint8_t>)> __Internal_Cryptography_Pal_CertificateData_AlgorithmIdentifierSizeCheck;
    static_assert(sizeof(CertificateData::AlgorithmIdentifier) == 0x10);
    public:
    // System.Byte[] RawData
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> RawData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] SubjectPublicKeyInfo
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<uint8_t> SubjectPublicKeyInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Int32 Version
    // Size: 0x4
    // Offset: 0x10
    int Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Version and: SerialNumber
    char __padding2[0x4] = {};
    // System.Byte[] SerialNumber
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> SerialNumber;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier TbsSignature
    // Size: 0x10
    // Offset: 0x20
    ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier TbsSignature;
    // Field size check
    static_assert(sizeof(::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier) == 0x10);
    // System.Security.Cryptography.X509Certificates.X500DistinguishedName Issuer
    // Size: 0x8
    // Offset: 0x30
    ::System::Security::Cryptography::X509Certificates::X500DistinguishedName* Issuer;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X500DistinguishedName*) == 0x8);
    // System.DateTime NotBefore
    // Size: 0x8
    // Offset: 0x38
    ::System::DateTime NotBefore;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // System.DateTime NotAfter
    // Size: 0x8
    // Offset: 0x40
    ::System::DateTime NotAfter;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // System.Security.Cryptography.X509Certificates.X500DistinguishedName Subject
    // Size: 0x8
    // Offset: 0x48
    ::System::Security::Cryptography::X509Certificates::X500DistinguishedName* Subject;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X500DistinguishedName*) == 0x8);
    // Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier PublicKeyAlgorithm
    // Size: 0x10
    // Offset: 0x50
    ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier PublicKeyAlgorithm;
    // Field size check
    static_assert(sizeof(::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier) == 0x10);
    // System.Byte[] PublicKey
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint8_t> PublicKey;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] IssuerUniqueId
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<uint8_t> IssuerUniqueId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] SubjectUniqueId
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<uint8_t> SubjectUniqueId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Collections.Generic.List`1<System.Security.Cryptography.X509Certificates.X509Extension> Extensions
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509Extension*>* Extensions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509Extension*>*) == 0x8);
    // Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier SignatureAlgorithm
    // Size: 0x10
    // Offset: 0x80
    ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier SignatureAlgorithm;
    // Field size check
    static_assert(sizeof(::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier) == 0x10);
    // System.Byte[] SignatureValue
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<uint8_t> SignatureValue;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating value type constructor for type: CertificateData
    constexpr CertificateData(::ArrayW<uint8_t> RawData_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::ArrayW<uint8_t> SubjectPublicKeyInfo_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int Version_ = {}, ::ArrayW<uint8_t> SerialNumber_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier TbsSignature_ = {}, ::System::Security::Cryptography::X509Certificates::X500DistinguishedName* Issuer_ = {}, ::System::DateTime NotBefore_ = {}, ::System::DateTime NotAfter_ = {}, ::System::Security::Cryptography::X509Certificates::X500DistinguishedName* Subject_ = {}, ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier PublicKeyAlgorithm_ = {}, ::ArrayW<uint8_t> PublicKey_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::ArrayW<uint8_t> IssuerUniqueId_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::ArrayW<uint8_t> SubjectUniqueId_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509Extension*>* Extensions_ = {}, ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier SignatureAlgorithm_ = {}, ::ArrayW<uint8_t> SignatureValue_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : RawData{RawData_}, SubjectPublicKeyInfo{SubjectPublicKeyInfo_}, Version{Version_}, SerialNumber{SerialNumber_}, TbsSignature{TbsSignature_}, Issuer{Issuer_}, NotBefore{NotBefore_}, NotAfter{NotAfter_}, Subject{Subject_}, PublicKeyAlgorithm{PublicKeyAlgorithm_}, PublicKey{PublicKey_}, IssuerUniqueId{IssuerUniqueId_}, SubjectUniqueId{SubjectUniqueId_}, Extensions{Extensions_}, SignatureAlgorithm{SignatureAlgorithm_}, SignatureValue{SignatureValue_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Byte[] RawData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_RawData();
    // Get instance field reference: System.Byte[] SubjectPublicKeyInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_SubjectPublicKeyInfo();
    // Get instance field reference: System.Int32 Version
    [[deprecated("Use field access instead!")]] int& dyn_Version();
    // Get instance field reference: System.Byte[] SerialNumber
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_SerialNumber();
    // Get instance field reference: Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier TbsSignature
    [[deprecated("Use field access instead!")]] ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier& dyn_TbsSignature();
    // Get instance field reference: System.Security.Cryptography.X509Certificates.X500DistinguishedName Issuer
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X500DistinguishedName*& dyn_Issuer();
    // Get instance field reference: System.DateTime NotBefore
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_NotBefore();
    // Get instance field reference: System.DateTime NotAfter
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_NotAfter();
    // Get instance field reference: System.Security.Cryptography.X509Certificates.X500DistinguishedName Subject
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X500DistinguishedName*& dyn_Subject();
    // Get instance field reference: Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier PublicKeyAlgorithm
    [[deprecated("Use field access instead!")]] ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier& dyn_PublicKeyAlgorithm();
    // Get instance field reference: System.Byte[] PublicKey
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_PublicKey();
    // Get instance field reference: System.Byte[] IssuerUniqueId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_IssuerUniqueId();
    // Get instance field reference: System.Byte[] SubjectUniqueId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_SubjectUniqueId();
    // Get instance field reference: System.Collections.Generic.List`1<System.Security.Cryptography.X509Certificates.X509Extension> Extensions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509Extension*>*& dyn_Extensions();
    // Get instance field reference: Internal.Cryptography.Pal.CertificateData/AlgorithmIdentifier SignatureAlgorithm
    [[deprecated("Use field access instead!")]] ::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier& dyn_SignatureAlgorithm();
    // Get instance field reference: System.Byte[] SignatureValue
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_SignatureValue();
    // System.Void .ctor(System.Byte[] rawData)
    // Offset: 0x4C02520
    CertificateData(::ArrayW<uint8_t> rawData);
    // public System.String GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType nameType, System.Boolean forIssuer)
    // Offset: 0x4C02D14
    ::StringW GetNameInfo(::System::Security::Cryptography::X509Certificates::X509NameType nameType, bool forIssuer);
    // static private System.String GetSimpleNameInfo(System.Security.Cryptography.X509Certificates.X500DistinguishedName name)
    // Offset: 0x4C03380
    static ::StringW GetSimpleNameInfo(::System::Security::Cryptography::X509Certificates::X500DistinguishedName* name);
    // static private System.String FindAltNameMatch(System.Byte[] extensionBytes, Internal.Cryptography.Pal.GeneralNameType matchType, System.String otherOid)
    // Offset: 0x4C037D8
    static ::StringW FindAltNameMatch(::ArrayW<uint8_t> extensionBytes, ::Internal::Cryptography::Pal::GeneralNameType matchType, ::StringW otherOid);
    // static private System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.String,System.String>> ReadReverseRdns(System.Security.Cryptography.X509Certificates.X500DistinguishedName name)
    // Offset: 0x4C03998
    static ::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW>>* ReadReverseRdns(::System::Security::Cryptography::X509Certificates::X500DistinguishedName* name);
  }; // Internal.Cryptography.Pal.CertificateData
  #pragma pack(pop)
  static check_size<sizeof(CertificateData), 144 + sizeof(::ArrayW<uint8_t>)> __Internal_Cryptography_Pal_CertificateDataSizeCheck;
  static_assert(sizeof(CertificateData) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Internal::Cryptography::Pal::CertificateData::AlgorithmIdentifier, "Internal.Cryptography.Pal", "CertificateData/AlgorithmIdentifier");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Cryptography::Pal::CertificateData::CertificateData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Internal::Cryptography::Pal::CertificateData::GetNameInfo
// Il2CppName: GetNameInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Internal::Cryptography::Pal::CertificateData::*)(::System::Security::Cryptography::X509Certificates::X509NameType, bool)>(&Internal::Cryptography::Pal::CertificateData::GetNameInfo)> {
  static const MethodInfo* get() {
    static auto* nameType = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509NameType")->byval_arg;
    static auto* forIssuer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Pal::CertificateData), "GetNameInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameType, forIssuer});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Pal::CertificateData::GetSimpleNameInfo
// Il2CppName: GetSimpleNameInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Security::Cryptography::X509Certificates::X500DistinguishedName*)>(&Internal::Cryptography::Pal::CertificateData::GetSimpleNameInfo)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X500DistinguishedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Pal::CertificateData), "GetSimpleNameInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Pal::CertificateData::FindAltNameMatch
// Il2CppName: FindAltNameMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>, ::Internal::Cryptography::Pal::GeneralNameType, ::StringW)>(&Internal::Cryptography::Pal::CertificateData::FindAltNameMatch)> {
  static const MethodInfo* get() {
    static auto* extensionBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* matchType = &::il2cpp_utils::GetClassFromName("Internal.Cryptography.Pal", "GeneralNameType")->byval_arg;
    static auto* otherOid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Pal::CertificateData), "FindAltNameMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extensionBytes, matchType, otherOid});
  }
};
// Writing MetadataGetter for method: Internal::Cryptography::Pal::CertificateData::ReadReverseRdns
// Il2CppName: ReadReverseRdns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW>>* (*)(::System::Security::Cryptography::X509Certificates::X500DistinguishedName*)>(&Internal::Cryptography::Pal::CertificateData::ReadReverseRdns)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X500DistinguishedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Cryptography::Pal::CertificateData), "ReadReverseRdns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
