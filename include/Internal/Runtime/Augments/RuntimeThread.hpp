// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: ParameterizedThreadStart
  class ParameterizedThreadStart;
}
// Completed forward declares
// Type namespace: Internal.Runtime.Augments
namespace Internal::Runtime::Augments {
  // Forward declaring type: RuntimeThread
  class RuntimeThread;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Internal::Runtime::Augments::RuntimeThread);
DEFINE_IL2CPP_ARG_TYPE(::Internal::Runtime::Augments::RuntimeThread*, "Internal.Runtime.Augments", "RuntimeThread");
// Type namespace: Internal.Runtime.Augments
namespace Internal::Runtime::Augments {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Internal.Runtime.Augments.RuntimeThread
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeThread : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Threading.Thread thread
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::Thread* thread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Threading::Thread*
    constexpr operator ::System::Threading::Thread*() const noexcept {
      return thread;
    }
    // Get static field: static readonly System.Int32 OptimalMaxSpinWaitsPerSpinIteration
    static int _get_OptimalMaxSpinWaitsPerSpinIteration();
    // Set static field: static readonly System.Int32 OptimalMaxSpinWaitsPerSpinIteration
    static void _set_OptimalMaxSpinWaitsPerSpinIteration(int value);
    // Get instance field reference: private readonly System.Threading.Thread thread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_thread();
    // private System.Void .ctor(System.Threading.Thread t)
    // Offset: 0x44BF3BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeThread* New_ctor(::System::Threading::Thread* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Internal::Runtime::Augments::RuntimeThread::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeThread*, creationType>(t)));
    }
    // static public Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, System.Int32 maxStackSize)
    // Offset: 0x44BF3EC
    static ::Internal::Runtime::Augments::RuntimeThread* Create(::System::Threading::ParameterizedThreadStart* start, int maxStackSize);
    // public System.Void set_IsBackground(System.Boolean value)
    // Offset: 0x44BF490
    void set_IsBackground(bool value);
    // public System.Void Start(System.Object state)
    // Offset: 0x44BF4B0
    void Start(::Il2CppObject* state);
    // static public System.Void Sleep(System.Int32 millisecondsTimeout)
    // Offset: 0x44BF4CC
    static void Sleep(int millisecondsTimeout);
    // static public System.Boolean Yield()
    // Offset: 0x44BF4D4
    static bool Yield();
    // static public System.Boolean SpinWait(System.Int32 iterations)
    // Offset: 0x44BF4DC
    static bool SpinWait(int iterations);
    // static public System.Int32 GetCurrentProcessorId()
    // Offset: 0x44BF4F4
    static int GetCurrentProcessorId();
    // static private System.Void .cctor()
    // Offset: 0x44BF4FC
    static void _cctor();
  }; // Internal.Runtime.Augments.RuntimeThread
  #pragma pack(pop)
  static check_size<sizeof(RuntimeThread), 16 + sizeof(::System::Threading::Thread*)> __Internal_Runtime_Augments_RuntimeThreadSizeCheck;
  static_assert(sizeof(RuntimeThread) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Internal::Runtime::Augments::RuntimeThread* (*)(::System::Threading::ParameterizedThreadStart*, int)>(&Internal::Runtime::Augments::RuntimeThread::Create)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System.Threading", "ParameterizedThreadStart")->byval_arg;
    static auto* maxStackSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, maxStackSize});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::set_IsBackground
// Il2CppName: set_IsBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::RuntimeThread::*)(bool)>(&Internal::Runtime::Augments::RuntimeThread::set_IsBackground)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "set_IsBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::RuntimeThread::*)(::Il2CppObject*)>(&Internal::Runtime::Augments::RuntimeThread::Start)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Internal::Runtime::Augments::RuntimeThread::Sleep)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::Yield
// Il2CppName: Yield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Internal::Runtime::Augments::RuntimeThread::Yield)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "Yield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::SpinWait
// Il2CppName: SpinWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Internal::Runtime::Augments::RuntimeThread::SpinWait)> {
  static const MethodInfo* get() {
    static auto* iterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "SpinWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iterations});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::GetCurrentProcessorId
// Il2CppName: GetCurrentProcessorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Internal::Runtime::Augments::RuntimeThread::GetCurrentProcessorId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), "GetCurrentProcessorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::RuntimeThread::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Internal::Runtime::Augments::RuntimeThread::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::RuntimeThread*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
