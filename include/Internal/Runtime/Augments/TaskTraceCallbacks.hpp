// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Internal.Runtime.Augments
namespace Internal::Runtime::Augments {
  // Forward declaring type: TaskTraceCallbacks
  class TaskTraceCallbacks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Internal::Runtime::Augments::TaskTraceCallbacks);
DEFINE_IL2CPP_ARG_TYPE(::Internal::Runtime::Augments::TaskTraceCallbacks*, "Internal.Runtime.Augments", "TaskTraceCallbacks");
// Type namespace: Internal.Runtime.Augments
namespace Internal::Runtime::Augments {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Internal.Runtime.Augments.TaskTraceCallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskTraceCallbacks : public ::Il2CppObject {
    public:
    // public System.Boolean get_Enabled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Enabled();
    // public System.Void TaskWaitBegin_Asynchronous(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // public System.Void TaskWaitBegin_Synchronous(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // public System.Void TaskWaitEnd(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // public System.Void TaskScheduled(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID, System.Int32 CreatingTaskID, System.Int32 TaskCreationOptions)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
  }; // Internal.Runtime.Augments.TaskTraceCallbacks
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Runtime::Augments::TaskTraceCallbacks::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Internal::Runtime::Augments::TaskTraceCallbacks::*)()>(&Internal::Runtime::Augments::TaskTraceCallbacks::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::TaskTraceCallbacks*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitBegin_Asynchronous
// Il2CppName: TaskWaitBegin_Asynchronous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::TaskTraceCallbacks::*)(int, int, int)>(&Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitBegin_Asynchronous)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::TaskTraceCallbacks*), "TaskWaitBegin_Asynchronous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitBegin_Synchronous
// Il2CppName: TaskWaitBegin_Synchronous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::TaskTraceCallbacks::*)(int, int, int)>(&Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitBegin_Synchronous)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::TaskTraceCallbacks*), "TaskWaitBegin_Synchronous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitEnd
// Il2CppName: TaskWaitEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::TaskTraceCallbacks::*)(int, int, int)>(&Internal::Runtime::Augments::TaskTraceCallbacks::TaskWaitEnd)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::TaskTraceCallbacks*), "TaskWaitEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Runtime::Augments::TaskTraceCallbacks::TaskScheduled
// Il2CppName: TaskScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Internal::Runtime::Augments::TaskTraceCallbacks::*)(int, int, int, int, int)>(&Internal::Runtime::Augments::TaskTraceCallbacks::TaskScheduled)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* CreatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskCreationOptions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Runtime::Augments::TaskTraceCallbacks*), "TaskScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID, CreatingTaskID, TaskCreationOptions});
  }
};
