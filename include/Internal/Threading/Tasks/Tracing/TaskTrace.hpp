// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Internal::Runtime::Augments
namespace Internal::Runtime::Augments {
  // Forward declaring type: TaskTraceCallbacks
  class TaskTraceCallbacks;
}
// Completed forward declares
// Type namespace: Internal.Threading.Tasks.Tracing
namespace Internal::Threading::Tasks::Tracing {
  // Forward declaring type: TaskTrace
  class TaskTrace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Internal::Threading::Tasks::Tracing::TaskTrace);
DEFINE_IL2CPP_ARG_TYPE(::Internal::Threading::Tasks::Tracing::TaskTrace*, "Internal.Threading.Tasks.Tracing", "TaskTrace");
// Type namespace: Internal.Threading.Tasks.Tracing
namespace Internal::Threading::Tasks::Tracing {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Internal.Threading.Tasks.Tracing.TaskTrace
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskTrace : public ::Il2CppObject {
    public:
    // Get static field: static private Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks
    static ::Internal::Runtime::Augments::TaskTraceCallbacks* _get_s_callbacks();
    // Set static field: static private Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks
    static void _set_s_callbacks(::Internal::Runtime::Augments::TaskTraceCallbacks* value);
    // static public System.Boolean get_Enabled()
    // Offset: 0x44BEFE0
    static bool get_Enabled();
    // static public System.Void TaskWaitBegin_Asynchronous(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0x44BF040
    static void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // static public System.Void TaskWaitBegin_Synchronous(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0x44BF0C4
    static void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // static public System.Void TaskWaitEnd(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID)
    // Offset: 0x44BF148
    static void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
    // static public System.Void TaskScheduled(System.Int32 OriginatingTaskSchedulerID, System.Int32 OriginatingTaskID, System.Int32 TaskID, System.Int32 CreatingTaskID, System.Int32 TaskCreationOptions)
    // Offset: 0x44BF1CC
    static void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
  }; // Internal.Threading.Tasks.Tracing.TaskTrace
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Internal::Threading::Tasks::Tracing::TaskTrace::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Internal::Threading::Tasks::Tracing::TaskTrace::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Internal::Threading::Tasks::Tracing::TaskTrace*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitBegin_Asynchronous
// Il2CppName: TaskWaitBegin_Asynchronous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int)>(&Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitBegin_Asynchronous)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Threading::Tasks::Tracing::TaskTrace*), "TaskWaitBegin_Asynchronous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitBegin_Synchronous
// Il2CppName: TaskWaitBegin_Synchronous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int)>(&Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitBegin_Synchronous)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Threading::Tasks::Tracing::TaskTrace*), "TaskWaitBegin_Synchronous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitEnd
// Il2CppName: TaskWaitEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int)>(&Internal::Threading::Tasks::Tracing::TaskTrace::TaskWaitEnd)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Threading::Tasks::Tracing::TaskTrace*), "TaskWaitEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID});
  }
};
// Writing MetadataGetter for method: Internal::Threading::Tasks::Tracing::TaskTrace::TaskScheduled
// Il2CppName: TaskScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int, int, int)>(&Internal::Threading::Tasks::Tracing::TaskTrace::TaskScheduled)> {
  static const MethodInfo* get() {
    static auto* OriginatingTaskSchedulerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OriginatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* CreatingTaskID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* TaskCreationOptions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Internal::Threading::Tasks::Tracing::TaskTrace*), "TaskScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OriginatingTaskSchedulerID, OriginatingTaskID, TaskID, CreatingTaskID, TaskCreationOptions});
  }
};
