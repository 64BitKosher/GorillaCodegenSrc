// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: NanoSockets
namespace NanoSockets {
  // Forward declaring type: Address
  struct Address;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::NanoSockets::Address, "NanoSockets", "Address");
// Type namespace: NanoSockets
namespace NanoSockets {
  // Size: 0x12
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: NanoSockets.Address
  // [TokenAttribute] Offset: FFFFFFFF
  struct Address/*, public ::System::ValueType, public ::System::IEquatable_1<::NanoSockets::Address>*/ {
    public:
    public:
    // public System.UInt64 _address0
    // Size: 0x8
    // Offset: 0x0
    uint64_t address0;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 _address1
    // Size: 0x8
    // Offset: 0x8
    uint64_t address1;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt16 Port
    // Size: 0x2
    // Offset: 0x10
    uint16_t Port;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: Address
    constexpr Address(uint64_t address0_ = {}, uint64_t address1_ = {}, uint16_t Port_ = {}) noexcept : address0{address0_}, address1{address1_}, Port{Port_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::NanoSockets::Address>
    operator ::System::IEquatable_1<::NanoSockets::Address>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::NanoSockets::Address>*>(this);
    }
    // Get instance field reference: public System.UInt64 _address0
    [[deprecated("Use field access instead!")]] uint64_t& dyn__address0();
    // Get instance field reference: public System.UInt64 _address1
    [[deprecated("Use field access instead!")]] uint64_t& dyn__address1();
    // Get instance field reference: public System.UInt16 Port
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Port();
    // public System.Boolean Equals(NanoSockets.Address other)
    // Offset: 0x46E3D7C
    bool Equals(::NanoSockets::Address other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x46E3DB8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x46E3E50
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x46E3EB4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // NanoSockets.Address
  #pragma pack(pop)
  static check_size<sizeof(Address), 16 + sizeof(uint16_t)> __NanoSockets_AddressSizeCheck;
  static_assert(sizeof(Address) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NanoSockets::Address::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NanoSockets::Address::*)(::NanoSockets::Address)>(&NanoSockets::Address::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("NanoSockets", "Address")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::Address), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: NanoSockets::Address::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NanoSockets::Address::*)(::Il2CppObject*)>(&NanoSockets::Address::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::Address), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: NanoSockets::Address::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NanoSockets::Address::*)()>(&NanoSockets::Address::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::Address), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NanoSockets::Address::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NanoSockets::Address::*)()>(&NanoSockets::Address::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::Address), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
