// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NanoSockets
namespace NanoSockets {
  // Forward declaring type: Status
  struct Status;
  // Forward declaring type: Address
  struct Address;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: NanoSockets
namespace NanoSockets {
  // Forward declaring type: UDP
  class UDP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NanoSockets::UDP);
DEFINE_IL2CPP_ARG_TYPE(::NanoSockets::UDP*, "NanoSockets", "UDP");
// Type namespace: NanoSockets
namespace NanoSockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NanoSockets.UDP
  // [TokenAttribute] Offset: FFFFFFFF
  class UDP : public ::Il2CppObject {
    public:
    // static public NanoSockets.Status Initialize()
    // Offset: 0x46E4088
    static ::NanoSockets::Status Initialize();
    // static public System.Int64 Create(System.Int32 sendBufferSize, System.Int32 receiveBufferSize)
    // Offset: 0x46E40F0
    static int64_t Create(int sendBufferSize, int receiveBufferSize);
    // static public System.Void Destroy(ref System.Int64 socket)
    // Offset: 0x46E4174
    static void Destroy(ByRef<int64_t> socket);
    // static public System.Int32 Bind(System.Int64 socket, ref NanoSockets.Address address)
    // Offset: 0x46E41F0
    static int Bind(int64_t socket, ByRef<::NanoSockets::Address> address);
    // static public NanoSockets.Status SetNonBlocking(System.Int64 socket)
    // Offset: 0x46E4270
    static ::NanoSockets::Status SetNonBlocking(int64_t socket);
    // static public System.Int32 Send(System.Int64 socket, NanoSockets.Address* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x46E42EC
    static int Send(int64_t socket, ::NanoSockets::Address* address, uint8_t* buffer, int bufferLength);
    // static public System.Int32 Receive(System.Int64 socket, NanoSockets.Address* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x46E4388
    static int Receive(int64_t socket, ::NanoSockets::Address* address, uint8_t* buffer, int bufferLength);
    // static public NanoSockets.Status GetAddress(System.Int64 socket, ref NanoSockets.Address address)
    // Offset: 0x46E4424
    static ::NanoSockets::Status GetAddress(int64_t socket, ByRef<::NanoSockets::Address> address);
    // static public NanoSockets.Status SetIP(ref NanoSockets.Address address, System.String ip)
    // Offset: 0x46E44A8
    static ::NanoSockets::Status SetIP(ByRef<::NanoSockets::Address> address, ::StringW ip);
    // static public NanoSockets.Status GetIP(ref NanoSockets.Address address, System.IntPtr ip, System.Int32 ipLength)
    // Offset: 0x46E3FF4
    static ::NanoSockets::Status GetIP(ByRef<::NanoSockets::Address> address, ::System::IntPtr ip, int ipLength);
  }; // NanoSockets.UDP
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NanoSockets::UDP::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NanoSockets::Status (*)()>(&NanoSockets::UDP::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int)>(&NanoSockets::UDP::Create)> {
  static const MethodInfo* get() {
    static auto* sendBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* receiveBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendBufferSize, receiveBufferSize});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int64_t>)>(&NanoSockets::UDP::Destroy)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t, ByRef<::NanoSockets::Address>)>(&NanoSockets::UDP::Bind)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("NanoSockets", "Address")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::SetNonBlocking
// Il2CppName: SetNonBlocking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NanoSockets::Status (*)(int64_t)>(&NanoSockets::UDP::SetNonBlocking)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "SetNonBlocking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t, ::NanoSockets::Address*, uint8_t*, int)>(&NanoSockets::UDP::Send)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("NanoSockets", "Address"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t, ::NanoSockets::Address*, uint8_t*, int)>(&NanoSockets::UDP::Receive)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("NanoSockets", "Address"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::GetAddress
// Il2CppName: GetAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NanoSockets::Status (*)(int64_t, ByRef<::NanoSockets::Address>)>(&NanoSockets::UDP::GetAddress)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("NanoSockets", "Address")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "GetAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::SetIP
// Il2CppName: SetIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NanoSockets::Status (*)(ByRef<::NanoSockets::Address>, ::StringW)>(&NanoSockets::UDP::SetIP)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("NanoSockets", "Address")->this_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "SetIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, ip});
  }
};
// Writing MetadataGetter for method: NanoSockets::UDP::GetIP
// Il2CppName: GetIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NanoSockets::Status (*)(ByRef<::NanoSockets::Address>, ::System::IntPtr, int)>(&NanoSockets::UDP::GetIP)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("NanoSockets", "Address")->this_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ipLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::UDP*), "GetIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, ip, ipLength});
  }
};
