// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: NanoSockets
namespace NanoSockets {
  // Forward declaring type: Socket
  struct Socket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::NanoSockets::Socket, "NanoSockets", "Socket");
// Type namespace: NanoSockets
namespace NanoSockets {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: NanoSockets.Socket
  // [TokenAttribute] Offset: FFFFFFFF
  struct Socket/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int64 handle
    // Size: 0x8
    // Offset: 0x0
    int64_t handle;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: Socket
    constexpr Socket(int64_t handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int64_t
    constexpr operator int64_t() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.Int64 handle
    [[deprecated("Use field access instead!")]] int64_t& dyn_handle();
    // public System.Boolean get_IsCreated()
    // Offset: 0x46E3D64
    bool get_IsCreated();
  }; // NanoSockets.Socket
  #pragma pack(pop)
  static check_size<sizeof(Socket), 0 + sizeof(int64_t)> __NanoSockets_SocketSizeCheck;
  static_assert(sizeof(Socket) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NanoSockets::Socket::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NanoSockets::Socket::*)()>(&NanoSockets::Socket::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NanoSockets::Socket), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
