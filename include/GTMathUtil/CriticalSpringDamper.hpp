// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GTMathUtil
namespace GTMathUtil {
  // Forward declaring type: CriticalSpringDamper
  class CriticalSpringDamper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GTMathUtil::CriticalSpringDamper);
DEFINE_IL2CPP_ARG_TYPE(::GTMathUtil::CriticalSpringDamper*, "GTMathUtil", "CriticalSpringDamper");
// Type namespace: GTMathUtil
namespace GTMathUtil {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: GTMathUtil.CriticalSpringDamper
  // [TokenAttribute] Offset: FFFFFFFF
  class CriticalSpringDamper : public ::Il2CppObject {
    public:
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x10
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single xGoal
    // Size: 0x4
    // Offset: 0x14
    float xGoal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single halfLife
    // Size: 0x4
    // Offset: 0x18
    float halfLife;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single curVel
    // Size: 0x4
    // Offset: 0x1C
    float curVel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: public System.Single xGoal
    [[deprecated("Use field access instead!")]] float& dyn_xGoal();
    // Get instance field reference: public System.Single halfLife
    [[deprecated("Use field access instead!")]] float& dyn_halfLife();
    // Get instance field reference: private System.Single curVel
    [[deprecated("Use field access instead!")]] float& dyn_curVel();
    // static private System.Single halflife_to_damping(System.Single halflife, System.Single eps)
    // Offset: 0x27F0668
    static float halflife_to_damping(float halflife, float eps);
    // static private System.Single fast_negexp(System.Single x)
    // Offset: 0x27F067C
    static float fast_negexp(float x);
    // public System.Single Update(System.Single dt)
    // Offset: 0x27F06B8
    float Update(float dt);
    // public System.Void .ctor()
    // Offset: 0x27F0754
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CriticalSpringDamper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GTMathUtil::CriticalSpringDamper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CriticalSpringDamper*, creationType>()));
    }
  }; // GTMathUtil.CriticalSpringDamper
  #pragma pack(pop)
  static check_size<sizeof(CriticalSpringDamper), 28 + sizeof(float)> __GTMathUtil_CriticalSpringDamperSizeCheck;
  static_assert(sizeof(CriticalSpringDamper) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GTMathUtil::CriticalSpringDamper::halflife_to_damping
// Il2CppName: halflife_to_damping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GTMathUtil::CriticalSpringDamper::halflife_to_damping)> {
  static const MethodInfo* get() {
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GTMathUtil::CriticalSpringDamper*), "halflife_to_damping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{halflife, eps});
  }
};
// Writing MetadataGetter for method: GTMathUtil::CriticalSpringDamper::fast_negexp
// Il2CppName: fast_negexp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&GTMathUtil::CriticalSpringDamper::fast_negexp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GTMathUtil::CriticalSpringDamper*), "fast_negexp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: GTMathUtil::CriticalSpringDamper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GTMathUtil::CriticalSpringDamper::*)(float)>(&GTMathUtil::CriticalSpringDamper::Update)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GTMathUtil::CriticalSpringDamper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GTMathUtil::CriticalSpringDamper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
