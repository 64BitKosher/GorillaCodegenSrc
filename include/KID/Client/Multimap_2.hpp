// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
  // Skipping declaration: ICollection`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: Multimap`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Multimap_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::KID::Client::Multimap_2, "KID.Client", "Multimap`2");
// Type namespace: KID.Client
namespace KID::Client {
  // WARNING Size may be invalid!
  // Autogenerated type: KID.Client.Multimap`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  class Multimap_2 : public ::Il2CppObject/*, public ::System::Collections::Generic::IDictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*/ {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<TKey,System.Collections.Generic.IList`1<TValue>> _dictionary
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>* dictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IDictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>
    operator ::System::Collections::Generic::IDictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*() const noexcept {
      return dictionary;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<TKey,System.Collections.Generic.IList`1<TValue>> _dictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>*& dyn__dictionary() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::dyn__dictionary");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dictionary"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Multimap_2<TKey, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Multimap_2<TKey, TValue>*, creationType>()));
    }
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Multimap_2<TKey, TValue>* New_ctor(::System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Multimap_2<TKey, TValue>*, creationType>(comparer)));
    }
    // public System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,System.Collections.Generic.IList`1<TValue>>> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Void Add(System.Collections.Generic.KeyValuePair`2<TKey,System.Collections.Generic.IList`1<TValue>> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Add(KID.Client.Multimap`2<TKey,TValue> multimap)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(::KID::Client::Multimap_2<TKey, TValue>* multimap) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multimap)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multimap);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(System.Collections.Generic.KeyValuePair`2<TKey,System.Collections.Generic.IList`1<TValue>> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,System.Collections.Generic.IList`1<TValue>>[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*>> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // public System.Boolean Remove(System.Collections.Generic.KeyValuePair`2<TKey,System.Collections.Generic.IList`1<TValue>> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(::System::Collections::Generic::KeyValuePair_2<TKey, ::System::Collections::Generic::IList_1<TValue>*> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void Add(TKey key, System.Collections.Generic.IList`1<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(TKey key, ::System::Collections::Generic::IList_1<TValue>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Boolean ContainsKey(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsKey(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::ContainsKey");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean Remove(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean TryGetValue(TKey key, out System.Collections.Generic.IList`1<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValue(TKey key, ByRef<::System::Collections::Generic::IList_1<TValue>*> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::TryGetValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // public System.Collections.Generic.IList`1<TValue> get_Item(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IList_1<TValue>* get_Item(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<TValue>*, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(TKey key, System.Collections.Generic.IList`1<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(TKey key, ::System::Collections::Generic::IList_1<TValue>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Collections.Generic.ICollection`1<TKey> get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<TKey>* get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<TKey>*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.ICollection`1<System.Collections.Generic.IList`1<TValue>> get_Values()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<::System::Collections::Generic::IList_1<TValue>*>* get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::get_Values");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::Multimap_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<::System::Collections::Generic::IList_1<TValue>*>*, false>(this, ___internal__method);
    }
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Void Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean TryRemove(TKey key, out System.Collections.Generic.IList`1<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryRemove(TKey key, ByRef<::System::Collections::Generic::IList_1<TValue>*> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::TryRemove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<::System::Collections::Generic::IList_1<TValue>*&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // private System.Boolean TryAdd(TKey key, System.Collections.Generic.IList`1<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryAdd(TKey key, ::System::Collections::Generic::IList_1<TValue>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::Multimap_2::TryAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, value);
    }
  }; // KID.Client.Multimap`2
  // Could not write size check! Type: KID.Client.Multimap`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
