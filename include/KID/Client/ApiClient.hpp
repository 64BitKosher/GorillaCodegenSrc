// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: KID.Client.ISynchronousClient
#include "KID/Client/ISynchronousClient.hpp"
// Including type: KID.Client.IAsynchronousClient
#include "KID/Client/IAsynchronousClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: RequestOptions
  class RequestOptions;
  // Forward declaring type: IReadableConfiguration
  class IReadableConfiguration;
  // Forward declaring type: ApiResponse`1<T>
  template<typename T>
  class ApiResponse_1;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: ApiClient
  class ApiClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::ApiClient);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::ApiClient*, "KID.Client", "ApiClient");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.ApiClient
  // [TokenAttribute] Offset: FFFFFFFF
  class ApiClient : public ::Il2CppObject/*, public ::System::IDisposable, public ::KID::Client::ISynchronousClient, public ::KID::Client::IAsynchronousClient*/ {
    public:
    // Nested type: ::KID::Client::ApiClient::$$c__DisplayClass12_0_1<T>
    template<typename T>
    class $$c__DisplayClass12_0_1;
    // Nested type: ::KID::Client::ApiClient::$ExecAsync$d__12_1<T>
    template<typename T>
    struct $ExecAsync$d__12_1;
    public:
    // private readonly System.String _baseUrl
    // Size: 0x8
    // Offset: 0x10
    ::StringW baseUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Newtonsoft.Json.JsonSerializerSettings <SerializerSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Newtonsoft::Json::JsonSerializerSettings* SerializerSettings;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonSerializerSettings*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::KID::Client::ISynchronousClient
    operator ::KID::Client::ISynchronousClient() noexcept {
      return *reinterpret_cast<::KID::Client::ISynchronousClient*>(this);
    }
    // Creating interface conversion operator: operator ::KID::Client::IAsynchronousClient
    operator ::KID::Client::IAsynchronousClient() noexcept {
      return *reinterpret_cast<::KID::Client::IAsynchronousClient*>(this);
    }
    // Get instance field reference: private readonly System.String _baseUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseUrl();
    // Get instance field reference: private Newtonsoft.Json.JsonSerializerSettings <SerializerSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonSerializerSettings*& dyn_$SerializerSettings$k__BackingField();
    // public Newtonsoft.Json.JsonSerializerSettings get_SerializerSettings()
    // Offset: 0x43828D8
    ::Newtonsoft::Json::JsonSerializerSettings* get_SerializerSettings();
    // public System.Void set_SerializerSettings(Newtonsoft.Json.JsonSerializerSettings value)
    // Offset: 0x43828E0
    void set_SerializerSettings(::Newtonsoft::Json::JsonSerializerSettings* value);
    // public System.Void .ctor()
    // Offset: 0x43828E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiClient*, creationType>()));
    }
    // public System.Void .ctor(System.String basePath)
    // Offset: 0x43829F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiClient* New_ctor(::StringW basePath) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiClient*, creationType>(basePath)));
    }
    // public System.Void Dispose()
    // Offset: 0x4382B68
    void Dispose();
    // private UnityEngine.Networking.UnityWebRequest NewRequest(System.String method, System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::UnityEngine::Networking::UnityWebRequest* NewRequest(::StringW method, ::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::NewRequest");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewRequest", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(configuration)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::UnityWebRequest*, false>(this, ___generic__method, method, path, options, configuration);
    }
    // private KID.Client.ApiResponse`1<T> ToApiResponse(UnityEngine.Networking.UnityWebRequest request, System.Object responseData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* ToApiResponse(::UnityEngine::Networking::UnityWebRequest* request, ::Il2CppObject* responseData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::ToApiResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToApiResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(responseData)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, request, responseData);
    }
    // private System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> ExecAsync(UnityEngine.Networking.UnityWebRequest request, System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* ExecAsync(::UnityEngine::Networking::UnityWebRequest* request, ::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::ExecAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, request, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> GetAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* GetAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::GetAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PostAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PostAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::PostAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PutAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PutAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::PutAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> DeleteAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* DeleteAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::DeleteAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> HeadAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* HeadAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::HeadAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> OptionsAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* OptionsAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::OptionsAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PatchAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PatchAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::PatchAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public KID.Client.ApiResponse`1<T> Get(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Get(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Get");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Post(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Post(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Post");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Put(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Put(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Put");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Delete(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Delete(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Delete");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Head(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Head(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Head");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Options(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Options(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Options");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
    // public KID.Client.ApiResponse`1<T> Patch(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::KID::Client::ApiResponse_1<T>* Patch(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiClient::Patch");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::ApiResponse_1<T>*, false>(this, ___generic__method, path, options, configuration);
    }
  }; // KID.Client.ApiClient
  #pragma pack(pop)
  static check_size<sizeof(ApiClient), 24 + sizeof(::Newtonsoft::Json::JsonSerializerSettings*)> __KID_Client_ApiClientSizeCheck;
  static_assert(sizeof(ApiClient) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::ApiClient::get_SerializerSettings
// Il2CppName: get_SerializerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializerSettings* (KID::Client::ApiClient::*)()>(&KID::Client::ApiClient::get_SerializerSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiClient*), "get_SerializerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiClient::set_SerializerSettings
// Il2CppName: set_SerializerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::ApiClient::*)(::Newtonsoft::Json::JsonSerializerSettings*)>(&KID::Client::ApiClient::set_SerializerSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiClient*), "set_SerializerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::ApiClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::ApiClient::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::ApiClient::*)()>(&KID::Client::ApiClient::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiClient*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiClient::NewRequest
// Il2CppName: NewRequest
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::ToApiResponse
// Il2CppName: ToApiResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::ExecAsync
// Il2CppName: ExecAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::GetAsync
// Il2CppName: GetAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::PostAsync
// Il2CppName: PostAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::PutAsync
// Il2CppName: PutAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::DeleteAsync
// Il2CppName: DeleteAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::HeadAsync
// Il2CppName: HeadAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::OptionsAsync
// Il2CppName: OptionsAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::PatchAsync
// Il2CppName: PatchAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Post
// Il2CppName: Post
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Put
// Il2CppName: Put
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Delete
// Il2CppName: Delete
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Head
// Il2CppName: Head
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Options
// Il2CppName: Options
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::ApiClient::Patch
// Il2CppName: Patch
// Cannot write MetadataGetter for generic methods!
