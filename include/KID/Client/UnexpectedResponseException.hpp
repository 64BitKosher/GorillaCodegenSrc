// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: UnexpectedResponseException
  class UnexpectedResponseException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::UnexpectedResponseException);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::UnexpectedResponseException*, "KID.Client", "UnexpectedResponseException");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.UnexpectedResponseException
  // [TokenAttribute] Offset: FFFFFFFF
  class UnexpectedResponseException : public ::System::Exception {
    public:
    public:
    // private System.Int32 <ErrorCode>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int ErrorCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return ErrorCode;
    }
    // Get instance field reference: private System.Int32 <ErrorCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ErrorCode$k__BackingField();
    // public System.Int32 get_ErrorCode()
    // Offset: 0x4389238
    int get_ErrorCode();
    // private System.Void set_ErrorCode(System.Int32 value)
    // Offset: 0x4389240
    void set_ErrorCode(int value);
    // public System.Void .ctor(UnityEngine.Networking.UnityWebRequest request, System.Type type, System.String extra)
    // Offset: 0x438264C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnexpectedResponseException* New_ctor(::UnityEngine::Networking::UnityWebRequest* request, ::System::Type* type, ::StringW extra) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::UnexpectedResponseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnexpectedResponseException*, creationType>(request, type, extra)));
    }
    // static private System.String CreateMessage(UnityEngine.Networking.UnityWebRequest request, System.Type type, System.String extra)
    // Offset: 0x4389248
    static ::StringW CreateMessage(::UnityEngine::Networking::UnityWebRequest* request, ::System::Type* type, ::StringW extra);
  }; // KID.Client.UnexpectedResponseException
  #pragma pack(pop)
  static check_size<sizeof(UnexpectedResponseException), 140 + sizeof(int)> __KID_Client_UnexpectedResponseExceptionSizeCheck;
  static_assert(sizeof(UnexpectedResponseException) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::UnexpectedResponseException::get_ErrorCode
// Il2CppName: get_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KID::Client::UnexpectedResponseException::*)()>(&KID::Client::UnexpectedResponseException::get_ErrorCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::UnexpectedResponseException*), "get_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::UnexpectedResponseException::set_ErrorCode
// Il2CppName: set_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::UnexpectedResponseException::*)(int)>(&KID::Client::UnexpectedResponseException::set_ErrorCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::UnexpectedResponseException*), "set_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::UnexpectedResponseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::UnexpectedResponseException::CreateMessage
// Il2CppName: CreateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Networking::UnityWebRequest*, ::System::Type*, ::StringW)>(&KID::Client::UnexpectedResponseException::CreateMessage)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* extra = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::UnexpectedResponseException*), "CreateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, type, extra});
  }
};
