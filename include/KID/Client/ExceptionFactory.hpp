// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: IApiResponse
  class IApiResponse;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: ExceptionFactory
  class ExceptionFactory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::ExceptionFactory);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::ExceptionFactory*, "KID.Client", "ExceptionFactory");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.ExceptionFactory
  // [TokenAttribute] Offset: FFFFFFFF
  class ExceptionFactory : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x43886AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExceptionFactory* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ExceptionFactory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExceptionFactory*, creationType>(object, method)));
    }
    // public System.Exception Invoke(System.String methodName, KID.Client.IApiResponse response)
    // Offset: 0x4388CE0
    ::System::Exception* Invoke(::StringW methodName, ::KID::Client::IApiResponse* response);
    // public System.IAsyncResult BeginInvoke(System.String methodName, KID.Client.IApiResponse response, System.AsyncCallback callback, System.Object object)
    // Offset: 0x4388CF4
    ::System::IAsyncResult* BeginInvoke(::StringW methodName, ::KID::Client::IApiResponse* response, ::System::AsyncCallback* callback, ::Il2CppObject* object);
    // public System.Exception EndInvoke(System.IAsyncResult result)
    // Offset: 0x4388D1C
    ::System::Exception* EndInvoke(::System::IAsyncResult* result);
  }; // KID.Client.ExceptionFactory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::ExceptionFactory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::ExceptionFactory::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (KID::Client::ExceptionFactory::*)(::StringW, ::KID::Client::IApiResponse*)>(&KID::Client::ExceptionFactory::Invoke)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("KID.Client", "IApiResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ExceptionFactory*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, response});
  }
};
// Writing MetadataGetter for method: KID::Client::ExceptionFactory::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (KID::Client::ExceptionFactory::*)(::StringW, ::KID::Client::IApiResponse*, ::System::AsyncCallback*, ::Il2CppObject*)>(&KID::Client::ExceptionFactory::BeginInvoke)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("KID.Client", "IApiResponse")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* object = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ExceptionFactory*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, response, callback, object});
  }
};
// Writing MetadataGetter for method: KID::Client::ExceptionFactory::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (KID::Client::ExceptionFactory::*)(::System::IAsyncResult*)>(&KID::Client::ExceptionFactory::EndInvoke)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ExceptionFactory*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
