// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: ApiResponse`1<T>
  template<typename T>
  class ApiResponse_1;
  // Forward declaring type: RequestOptions
  class RequestOptions;
  // Forward declaring type: IReadableConfiguration
  class IReadableConfiguration;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: IAsynchronousClient
  class IAsynchronousClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::IAsynchronousClient);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::IAsynchronousClient*, "KID.Client", "IAsynchronousClient");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.IAsynchronousClient
  // [TokenAttribute] Offset: FFFFFFFF
  class IAsynchronousClient {
    public:
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> GetAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* GetAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::GetAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PostAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PostAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::PostAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PutAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PutAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::PutAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> DeleteAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* DeleteAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::DeleteAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> HeadAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* HeadAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::HeadAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> OptionsAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* OptionsAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::OptionsAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<T>> PatchAsync(System.String path, KID.Client.RequestOptions options, KID.Client.IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>* PatchAsync(::StringW path, ::KID::Client::RequestOptions* options, ::KID::Client::IReadableConfiguration* configuration, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::IAsynchronousClient::PatchAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::IAsynchronousClient*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<T>*>*, false>(this, ___generic__method, path, options, configuration, cancellationToken);
    }
  }; // KID.Client.IAsynchronousClient
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::GetAsync
// Il2CppName: GetAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::PostAsync
// Il2CppName: PostAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::PutAsync
// Il2CppName: PutAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::DeleteAsync
// Il2CppName: DeleteAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::HeadAsync
// Il2CppName: HeadAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::OptionsAsync
// Il2CppName: OptionsAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::IAsynchronousClient::PatchAsync
// Il2CppName: PatchAsync
// Cannot write MetadataGetter for generic methods!
