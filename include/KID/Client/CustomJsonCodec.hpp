// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: IReadableConfiguration
  class IReadableConfiguration;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: CustomJsonCodec
  class CustomJsonCodec;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::CustomJsonCodec);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::CustomJsonCodec*, "KID.Client", "CustomJsonCodec");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.CustomJsonCodec
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomJsonCodec : public ::Il2CppObject {
    public:
    public:
    // private readonly KID.Client.IReadableConfiguration _configuration
    // Size: 0x8
    // Offset: 0x10
    ::KID::Client::IReadableConfiguration* configuration;
    // Field size check
    static_assert(sizeof(::KID::Client::IReadableConfiguration*) == 0x8);
    // private readonly Newtonsoft.Json.JsonSerializerSettings _serializerSettings
    // Size: 0x8
    // Offset: 0x18
    ::Newtonsoft::Json::JsonSerializerSettings* serializerSettings;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonSerializerSettings*) == 0x8);
    // private System.String <RootElement>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW RootElement;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Namespace>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Namespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <DateFormat>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW DateFormat;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static private readonly System.String _contentType
    static ::StringW _get__contentType();
    // Set static field: static private readonly System.String _contentType
    static void _set__contentType(::StringW value);
    // Get instance field reference: private readonly KID.Client.IReadableConfiguration _configuration
    [[deprecated("Use field access instead!")]] ::KID::Client::IReadableConfiguration*& dyn__configuration();
    // Get instance field reference: private readonly Newtonsoft.Json.JsonSerializerSettings _serializerSettings
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonSerializerSettings*& dyn__serializerSettings();
    // Get instance field reference: private System.String <RootElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$RootElement$k__BackingField();
    // Get instance field reference: private System.String <Namespace>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Namespace$k__BackingField();
    // Get instance field reference: private System.String <DateFormat>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$DateFormat$k__BackingField();
    // public System.Void .ctor(KID.Client.IReadableConfiguration configuration)
    // Offset: 0x4381CC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomJsonCodec* New_ctor(::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::CustomJsonCodec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomJsonCodec*, creationType>(configuration)));
    }
    // public System.Void .ctor(Newtonsoft.Json.JsonSerializerSettings serializerSettings, KID.Client.IReadableConfiguration configuration)
    // Offset: 0x4381DE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomJsonCodec* New_ctor(::Newtonsoft::Json::JsonSerializerSettings* serializerSettings, ::KID::Client::IReadableConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::CustomJsonCodec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomJsonCodec*, creationType>(serializerSettings, configuration)));
    }
    // public System.String Serialize(System.Object obj)
    // Offset: 0x4381F20
    ::StringW Serialize(::Il2CppObject* obj);
    // public T Deserialize(UnityEngine.Networking.UnityWebRequest request)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Deserialize(::UnityEngine::Networking::UnityWebRequest* request) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::CustomJsonCodec::Deserialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, request);
    }
    // System.Object Deserialize(UnityEngine.Networking.UnityWebRequest request, System.Type type)
    // Offset: 0x4381FDC
    ::Il2CppObject* Deserialize(::UnityEngine::Networking::UnityWebRequest* request, ::System::Type* type);
    // public System.String get_RootElement()
    // Offset: 0x4382798
    ::StringW get_RootElement();
    // public System.Void set_RootElement(System.String value)
    // Offset: 0x43827A0
    void set_RootElement(::StringW value);
    // public System.String get_Namespace()
    // Offset: 0x43827A8
    ::StringW get_Namespace();
    // public System.Void set_Namespace(System.String value)
    // Offset: 0x43827B0
    void set_Namespace(::StringW value);
    // public System.String get_DateFormat()
    // Offset: 0x43827B8
    ::StringW get_DateFormat();
    // public System.Void set_DateFormat(System.String value)
    // Offset: 0x43827C0
    void set_DateFormat(::StringW value);
    // public System.String get_ContentType()
    // Offset: 0x43827C8
    ::StringW get_ContentType();
    // public System.Void set_ContentType(System.String value)
    // Offset: 0x4382820
    void set_ContentType(::StringW value);
    // static private System.Void .cctor()
    // Offset: 0x438286C
    static void _cctor();
  }; // KID.Client.CustomJsonCodec
  #pragma pack(pop)
  static check_size<sizeof(CustomJsonCodec), 48 + sizeof(::StringW)> __KID_Client_CustomJsonCodecSizeCheck;
  static_assert(sizeof(CustomJsonCodec) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Client::CustomJsonCodec::*)(::Il2CppObject*)>(&KID::Client::CustomJsonCodec::Serialize)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::Deserialize
// Il2CppName: Deserialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (KID::Client::CustomJsonCodec::*)(::UnityEngine::Networking::UnityWebRequest*, ::System::Type*)>(&KID::Client::CustomJsonCodec::Deserialize)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, type});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::get_RootElement
// Il2CppName: get_RootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Client::CustomJsonCodec::*)()>(&KID::Client::CustomJsonCodec::get_RootElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "get_RootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::set_RootElement
// Il2CppName: set_RootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::CustomJsonCodec::*)(::StringW)>(&KID::Client::CustomJsonCodec::set_RootElement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "set_RootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Client::CustomJsonCodec::*)()>(&KID::Client::CustomJsonCodec::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::set_Namespace
// Il2CppName: set_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::CustomJsonCodec::*)(::StringW)>(&KID::Client::CustomJsonCodec::set_Namespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "set_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::get_DateFormat
// Il2CppName: get_DateFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Client::CustomJsonCodec::*)()>(&KID::Client::CustomJsonCodec::get_DateFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "get_DateFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::set_DateFormat
// Il2CppName: set_DateFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::CustomJsonCodec::*)(::StringW)>(&KID::Client::CustomJsonCodec::set_DateFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "set_DateFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Client::CustomJsonCodec::*)()>(&KID::Client::CustomJsonCodec::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::set_ContentType
// Il2CppName: set_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::CustomJsonCodec::*)(::StringW)>(&KID::Client::CustomJsonCodec::set_ContentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), "set_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::CustomJsonCodec::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KID::Client::CustomJsonCodec::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::CustomJsonCodec*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
