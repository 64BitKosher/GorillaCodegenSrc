// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: KID.Client.IApiResponse
#include "KID/Client/IApiResponse.hpp"
// Including type: System.Net.HttpStatusCode
#include "System/Net/HttpStatusCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: Multimap`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Multimap_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: Cookie
  class Cookie;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: ApiResponse`1<T>
  template<typename T>
  class ApiResponse_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::KID::Client::ApiResponse_1, "KID.Client", "ApiResponse`1");
// Type namespace: KID.Client
namespace KID::Client {
  // WARNING Size may be invalid!
  // Autogenerated type: KID.Client.ApiResponse`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ApiResponse_1 : public ::Il2CppObject/*, public ::KID::Client::IApiResponse*/ {
    public:
    public:
    // private readonly System.Net.HttpStatusCode <StatusCode>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::System::Net::HttpStatusCode StatusCode;
    // Field size check
    static_assert(sizeof(::System::Net::HttpStatusCode) == 0x4);
    // private readonly KID.Client.Multimap`2<System.String,System.String> <Headers>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::KID::Client::Multimap_2<::StringW, ::StringW>* Headers;
    // Field size check
    static_assert(sizeof(::KID::Client::Multimap_2<::StringW, ::StringW>*) == 0x8);
    // private readonly T <Data>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T Data;
    // private System.String <ErrorText>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW ErrorText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<System.Net.Cookie> <Cookies>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::System::Net::Cookie*>* Cookies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Net::Cookie*>*) == 0x8);
    // private readonly System.String <RawContent>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW RawContent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::KID::Client::IApiResponse
    operator ::KID::Client::IApiResponse() noexcept {
      return *reinterpret_cast<::KID::Client::IApiResponse*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Net.HttpStatusCode <StatusCode>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::HttpStatusCode& dyn_$StatusCode$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$StatusCode$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<StatusCode>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Net::HttpStatusCode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly KID.Client.Multimap`2<System.String,System.String> <Headers>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Client::Multimap_2<::StringW, ::StringW>*& dyn_$Headers$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$Headers$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Headers>k__BackingField"))->offset;
      return *reinterpret_cast<::KID::Client::Multimap_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T <Data>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$Data$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$Data$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Data>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String <ErrorText>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ErrorText$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$ErrorText$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ErrorText>k__BackingField"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<System.Net.Cookie> <Cookies>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Net::Cookie*>*& dyn_$Cookies$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$Cookies$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Cookies>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Net::Cookie*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String <RawContent>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$RawContent$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::dyn_$RawContent$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RawContent>k__BackingField"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Net.HttpStatusCode get_StatusCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Net::HttpStatusCode get_StatusCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_StatusCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Net::HttpStatusCode, false>(this, ___internal__method);
    }
    // public KID.Client.Multimap`2<System.String,System.String> get_Headers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::KID::Client::Multimap_2<::StringW, ::StringW>* get_Headers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_Headers");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::KID::Client::Multimap_2<::StringW, ::StringW>*, false>(this, ___internal__method);
    }
    // public T get_Data()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_Data");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.String get_ErrorText()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_ErrorText() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_ErrorText");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_ErrorText(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ErrorText(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::set_ErrorText");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Collections.Generic.List`1<System.Net.Cookie> get_Cookies()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<::System::Net::Cookie*>* get_Cookies() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_Cookies");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Net::Cookie*>*, false>(this, ___internal__method);
    }
    // public System.Void set_Cookies(System.Collections.Generic.List`1<System.Net.Cookie> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Cookies(::System::Collections::Generic::List_1<::System::Net::Cookie*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::set_Cookies");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Type get_ResponseType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* get_ResponseType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_ResponseType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // public System.Object get_Content()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* get_Content() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_Content");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public System.String get_RawContent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_RawContent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::get_RawContent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::KID::Client::ApiResponse_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Net.HttpStatusCode statusCode, KID.Client.Multimap`2<System.String,System.String> headers, T data, System.String rawContent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiResponse_1<T>* New_ctor(::System::Net::HttpStatusCode statusCode, ::KID::Client::Multimap_2<::StringW, ::StringW>* headers, T data, ::StringW rawContent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiResponse_1<T>*, creationType>(statusCode, headers, data, rawContent)));
    }
    // public System.Void .ctor(System.Net.HttpStatusCode statusCode, KID.Client.Multimap`2<System.String,System.String> headers, T data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiResponse_1<T>* New_ctor(::System::Net::HttpStatusCode statusCode, ::KID::Client::Multimap_2<::StringW, ::StringW>* headers, T data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiResponse_1<T>*, creationType>(statusCode, headers, data)));
    }
    // public System.Void .ctor(System.Net.HttpStatusCode statusCode, T data, System.String rawContent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiResponse_1<T>* New_ctor(::System::Net::HttpStatusCode statusCode, T data, ::StringW rawContent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiResponse_1<T>*, creationType>(statusCode, data, rawContent)));
    }
    // public System.Void .ctor(System.Net.HttpStatusCode statusCode, T data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiResponse_1<T>* New_ctor(::System::Net::HttpStatusCode statusCode, T data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiResponse_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiResponse_1<T>*, creationType>(statusCode, data)));
    }
  }; // KID.Client.ApiResponse`1
  // Could not write size check! Type: KID.Client.ApiResponse`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
