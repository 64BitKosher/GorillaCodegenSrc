// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: Multimap`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Multimap_2;
}
// Completed forward declares
// Type namespace: KID.Client
namespace KID::Client {
  // Forward declaring type: ApiException
  class ApiException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Client::ApiException);
DEFINE_IL2CPP_ARG_TYPE(::KID::Client::ApiException*, "KID.Client", "ApiException");
// Type namespace: KID.Client
namespace KID::Client {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: KID.Client.ApiException
  // [TokenAttribute] Offset: FFFFFFFF
  class ApiException : public ::System::Exception {
    public:
    public:
    // private System.Int32 <ErrorCode>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int ErrorCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object <ErrorContent>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* ErrorContent;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private KID.Client.Multimap`2<System.String,System.String> <Headers>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::KID::Client::Multimap_2<::StringW, ::StringW>* Headers;
    // Field size check
    static_assert(sizeof(::KID::Client::Multimap_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <ErrorCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ErrorCode$k__BackingField();
    // Get instance field reference: private System.Object <ErrorContent>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$ErrorContent$k__BackingField();
    // Get instance field reference: private KID.Client.Multimap`2<System.String,System.String> <Headers>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Client::Multimap_2<::StringW, ::StringW>*& dyn_$Headers$k__BackingField();
    // public System.Int32 get_ErrorCode()
    // Offset: 0x4382B6C
    int get_ErrorCode();
    // public System.Void set_ErrorCode(System.Int32 value)
    // Offset: 0x4382B74
    void set_ErrorCode(int value);
    // public System.Object get_ErrorContent()
    // Offset: 0x4382B7C
    ::Il2CppObject* get_ErrorContent();
    // private System.Void set_ErrorContent(System.Object value)
    // Offset: 0x4382B84
    void set_ErrorContent(::Il2CppObject* value);
    // public KID.Client.Multimap`2<System.String,System.String> get_Headers()
    // Offset: 0x4382B8C
    ::KID::Client::Multimap_2<::StringW, ::StringW>* get_Headers();
    // private System.Void set_Headers(KID.Client.Multimap`2<System.String,System.String> value)
    // Offset: 0x4382B94
    void set_Headers(::KID::Client::Multimap_2<::StringW, ::StringW>* value);
    // public System.Void .ctor()
    // Offset: 0x4382B9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiException*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 errorCode, System.String message)
    // Offset: 0x4382BF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiException* New_ctor(int errorCode, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiException*, creationType>(errorCode, message)));
    }
    // public System.Void .ctor(System.Int32 errorCode, System.String message, System.Object errorContent, KID.Client.Multimap`2<System.String,System.String> headers)
    // Offset: 0x43826F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiException* New_ctor(int errorCode, ::StringW message, ::Il2CppObject* errorContent, ::KID::Client::Multimap_2<::StringW, ::StringW>* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Client::ApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiException*, creationType>(errorCode, message, errorContent, headers)));
    }
  }; // KID.Client.ApiException
  #pragma pack(pop)
  static check_size<sizeof(ApiException), 152 + sizeof(::KID::Client::Multimap_2<::StringW, ::StringW>*)> __KID_Client_ApiExceptionSizeCheck;
  static_assert(sizeof(ApiException) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Client::ApiException::get_ErrorCode
// Il2CppName: get_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KID::Client::ApiException::*)()>(&KID::Client::ApiException::get_ErrorCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "get_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::set_ErrorCode
// Il2CppName: set_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::ApiException::*)(int)>(&KID::Client::ApiException::set_ErrorCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "set_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::get_ErrorContent
// Il2CppName: get_ErrorContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (KID::Client::ApiException::*)()>(&KID::Client::ApiException::get_ErrorContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "get_ErrorContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::set_ErrorContent
// Il2CppName: set_ErrorContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::ApiException::*)(::Il2CppObject*)>(&KID::Client::ApiException::set_ErrorContent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "set_ErrorContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Client::Multimap_2<::StringW, ::StringW>* (KID::Client::ApiException::*)()>(&KID::Client::ApiException::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::set_Headers
// Il2CppName: set_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Client::ApiException::*)(::KID::Client::Multimap_2<::StringW, ::StringW>*)>(&KID::Client::ApiException::set_Headers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("KID.Client", "Multimap`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Client::ApiException*), "set_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Client::ApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::ApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Client::ApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
