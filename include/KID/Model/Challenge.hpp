// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: KID.Model.ChallengeType
#include "KID/Model/ChallengeType.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: KID.Model
namespace KID::Model {
  // Forward declaring type: Challenge
  class Challenge;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Model::Challenge);
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::Challenge*, "KID.Model", "Challenge");
// Type namespace: KID.Model
namespace KID::Model {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: KID.Model.Challenge
  // [TokenAttribute] Offset: FFFFFFFF
  // [DataContractAttribute] Offset: FFFFFFFF
  class Challenge : public ::Il2CppObject {
    public:
    public:
    // private KID.Model.ChallengeType <Type>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::KID::Model::ChallengeType Type;
    // Field size check
    static_assert(sizeof(::KID::Model::ChallengeType) == 0x4);
    // private System.Guid <ChallengeId>k__BackingField
    // Size: 0x10
    // Offset: 0x14
    ::System::Guid ChallengeId;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // Padding between fields: ChallengeId and: Url
    char __padding1[0x4] = {};
    // private System.String <Url>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <OneTimePassword>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW OneTimePassword;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <ChildLiteAccessEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool ChildLiteAccessEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private KID.Model.ChallengeType <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Model::ChallengeType& dyn_$Type$k__BackingField();
    // Get instance field reference: private System.Guid <ChallengeId>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_$ChallengeId$k__BackingField();
    // Get instance field reference: private System.String <Url>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Url$k__BackingField();
    // Get instance field reference: private System.String <OneTimePassword>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$OneTimePassword$k__BackingField();
    // Get instance field reference: private System.Boolean <ChildLiteAccessEnabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ChildLiteAccessEnabled$k__BackingField();
    // public KID.Model.ChallengeType get_Type()
    // Offset: 0x437F2A0
    ::KID::Model::ChallengeType get_Type();
    // public System.Void set_Type(KID.Model.ChallengeType value)
    // Offset: 0x437F2A8
    void set_Type(::KID::Model::ChallengeType value);
    // protected System.Void .ctor()
    // Offset: 0x437F2B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Challenge* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::Challenge::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Challenge*, creationType>()));
    }
    // public System.Void .ctor(System.Guid challengeId, KID.Model.ChallengeType type, System.String url, System.String oneTimePassword, System.Boolean childLiteAccessEnabled)
    // Offset: 0x437F2B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Challenge* New_ctor(::System::Guid challengeId, ::KID::Model::ChallengeType type, ::StringW url, ::StringW oneTimePassword, bool childLiteAccessEnabled) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::Challenge::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Challenge*, creationType>(challengeId, type, url, oneTimePassword, childLiteAccessEnabled)));
    }
    // public System.Guid get_ChallengeId()
    // Offset: 0x437F3A4
    ::System::Guid get_ChallengeId();
    // public System.Void set_ChallengeId(System.Guid value)
    // Offset: 0x437F3B4
    void set_ChallengeId(::System::Guid value);
    // public System.String get_Url()
    // Offset: 0x437F3C0
    ::StringW get_Url();
    // public System.Void set_Url(System.String value)
    // Offset: 0x437F3C8
    void set_Url(::StringW value);
    // public System.String get_OneTimePassword()
    // Offset: 0x437F3D0
    ::StringW get_OneTimePassword();
    // public System.Void set_OneTimePassword(System.String value)
    // Offset: 0x437F3D8
    void set_OneTimePassword(::StringW value);
    // public System.Boolean get_ChildLiteAccessEnabled()
    // Offset: 0x437F3E0
    bool get_ChildLiteAccessEnabled();
    // public System.Void set_ChildLiteAccessEnabled(System.Boolean value)
    // Offset: 0x437F3E8
    void set_ChildLiteAccessEnabled(bool value);
    // public System.String ToJson()
    // Offset: 0x437F684
    ::StringW ToJson();
    // public override System.String ToString()
    // Offset: 0x437F3F4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // KID.Model.Challenge
  #pragma pack(pop)
  static check_size<sizeof(Challenge), 56 + sizeof(bool)> __KID_Model_ChallengeSizeCheck;
  static_assert(sizeof(Challenge) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Model::Challenge::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Model::ChallengeType (KID::Model::Challenge::*)()>(&KID::Model::Challenge::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Challenge::*)(::KID::Model::ChallengeType)>(&KID::Model::Challenge::set_Type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("KID.Model", "ChallengeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::Challenge::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::Challenge::get_ChallengeId
// Il2CppName: get_ChallengeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (KID::Model::Challenge::*)()>(&KID::Model::Challenge::get_ChallengeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "get_ChallengeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::set_ChallengeId
// Il2CppName: set_ChallengeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Challenge::*)(::System::Guid)>(&KID::Model::Challenge::set_ChallengeId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "set_ChallengeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::get_Url
// Il2CppName: get_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Challenge::*)()>(&KID::Model::Challenge::get_Url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "get_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::set_Url
// Il2CppName: set_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Challenge::*)(::StringW)>(&KID::Model::Challenge::set_Url)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "set_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::get_OneTimePassword
// Il2CppName: get_OneTimePassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Challenge::*)()>(&KID::Model::Challenge::get_OneTimePassword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "get_OneTimePassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::set_OneTimePassword
// Il2CppName: set_OneTimePassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Challenge::*)(::StringW)>(&KID::Model::Challenge::set_OneTimePassword)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "set_OneTimePassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::get_ChildLiteAccessEnabled
// Il2CppName: get_ChildLiteAccessEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KID::Model::Challenge::*)()>(&KID::Model::Challenge::get_ChildLiteAccessEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "get_ChildLiteAccessEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::set_ChildLiteAccessEnabled
// Il2CppName: set_ChildLiteAccessEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Challenge::*)(bool)>(&KID::Model::Challenge::set_ChildLiteAccessEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "set_ChildLiteAccessEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Challenge::*)()>(&KID::Model::Challenge::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Challenge::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Challenge::*)()>(&KID::Model::Challenge::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Challenge*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
