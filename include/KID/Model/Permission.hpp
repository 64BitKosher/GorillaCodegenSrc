// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Model
namespace KID::Model {
  // Skipping declaration: ManagedByEnum because it is already included!
}
// Completed forward declares
// Type namespace: KID.Model
namespace KID::Model {
  // Forward declaring type: Permission
  class Permission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Model::Permission);
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::Permission*, "KID.Model", "Permission");
// Type namespace: KID.Model
namespace KID::Model {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: KID.Model.Permission
  // [TokenAttribute] Offset: FFFFFFFF
  // [DataContractAttribute] Offset: FFFFFFFF
  class Permission : public ::Il2CppObject {
    public:
    // Nested type: ::KID::Model::Permission::ManagedByEnum
    struct ManagedByEnum;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: KID.Model.Permission/ManagedByEnum
    // [TokenAttribute] Offset: FFFFFFFF
    // [JsonConverterAttribute] Offset: FFFFFFFF
    struct ManagedByEnum/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ManagedByEnum
      constexpr ManagedByEnum(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public KID.Model.Permission/ManagedByEnum PLAYER
      static constexpr const int PLAYER = 1;
      // Get static field: static public KID.Model.Permission/ManagedByEnum PLAYER
      static ::KID::Model::Permission::ManagedByEnum _get_PLAYER();
      // Set static field: static public KID.Model.Permission/ManagedByEnum PLAYER
      static void _set_PLAYER(::KID::Model::Permission::ManagedByEnum value);
      // static field const value: static public KID.Model.Permission/ManagedByEnum GUARDIAN
      static constexpr const int GUARDIAN = 2;
      // Get static field: static public KID.Model.Permission/ManagedByEnum GUARDIAN
      static ::KID::Model::Permission::ManagedByEnum _get_GUARDIAN();
      // Set static field: static public KID.Model.Permission/ManagedByEnum GUARDIAN
      static void _set_GUARDIAN(::KID::Model::Permission::ManagedByEnum value);
      // static field const value: static public KID.Model.Permission/ManagedByEnum PROHIBITED
      static constexpr const int PROHIBITED = 3;
      // Get static field: static public KID.Model.Permission/ManagedByEnum PROHIBITED
      static ::KID::Model::Permission::ManagedByEnum _get_PROHIBITED();
      // Set static field: static public KID.Model.Permission/ManagedByEnum PROHIBITED
      static void _set_PROHIBITED(::KID::Model::Permission::ManagedByEnum value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // KID.Model.Permission/ManagedByEnum
    #pragma pack(pop)
    static check_size<sizeof(Permission::ManagedByEnum), 0 + sizeof(int)> __KID_Model_Permission_ManagedByEnumSizeCheck;
    static_assert(sizeof(Permission::ManagedByEnum) == 0x4);
    public:
    // private KID.Model.Permission/ManagedByEnum <ManagedBy>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::KID::Model::Permission::ManagedByEnum ManagedBy;
    // Field size check
    static_assert(sizeof(::KID::Model::Permission::ManagedByEnum) == 0x4);
    // Padding between fields: ManagedBy and: Name
    char __padding0[0x4] = {};
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <Enabled>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private KID.Model.Permission/ManagedByEnum <ManagedBy>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Model::Permission::ManagedByEnum& dyn_$ManagedBy$k__BackingField();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Boolean <Enabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Enabled$k__BackingField();
    // public KID.Model.Permission/ManagedByEnum get_ManagedBy()
    // Offset: 0x4380A10
    ::KID::Model::Permission::ManagedByEnum get_ManagedBy();
    // public System.Void set_ManagedBy(KID.Model.Permission/ManagedByEnum value)
    // Offset: 0x4380A18
    void set_ManagedBy(::KID::Model::Permission::ManagedByEnum value);
    // protected System.Void .ctor()
    // Offset: 0x4380A20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Permission* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::Permission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Permission*, creationType>()));
    }
    // public System.Void .ctor(System.String name, System.Boolean enabled, KID.Model.Permission/ManagedByEnum managedBy)
    // Offset: 0x4380A28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Permission* New_ctor(::StringW name, bool enabled, ::KID::Model::Permission::ManagedByEnum managedBy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::Permission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Permission*, creationType>(name, enabled, managedBy)));
    }
    // public System.String get_Name()
    // Offset: 0x4380AC4
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x4380ACC
    void set_Name(::StringW value);
    // public System.Boolean get_Enabled()
    // Offset: 0x4380AD4
    bool get_Enabled();
    // public System.Void set_Enabled(System.Boolean value)
    // Offset: 0x4380ADC
    void set_Enabled(bool value);
    // public System.String ToJson()
    // Offset: 0x4380CBC
    ::StringW ToJson();
    // public override System.String ToString()
    // Offset: 0x4380AE8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // KID.Model.Permission
  #pragma pack(pop)
  static check_size<sizeof(Permission), 32 + sizeof(bool)> __KID_Model_PermissionSizeCheck;
  static_assert(sizeof(Permission) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::Permission::ManagedByEnum, "KID.Model", "Permission/ManagedByEnum");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Model::Permission::get_ManagedBy
// Il2CppName: get_ManagedBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Model::Permission::ManagedByEnum (KID::Model::Permission::*)()>(&KID::Model::Permission::get_ManagedBy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "get_ManagedBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::set_ManagedBy
// Il2CppName: set_ManagedBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Permission::*)(::KID::Model::Permission::ManagedByEnum)>(&KID::Model::Permission::set_ManagedBy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("KID.Model", "Permission/ManagedByEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "set_ManagedBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::Permission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::Permission::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Permission::*)()>(&KID::Model::Permission::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Permission::*)(::StringW)>(&KID::Model::Permission::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KID::Model::Permission::*)()>(&KID::Model::Permission::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::set_Enabled
// Il2CppName: set_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::Permission::*)(bool)>(&KID::Model::Permission::set_Enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "set_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Permission::*)()>(&KID::Model::Permission::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::Permission::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::Permission::*)()>(&KID::Model::Permission::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::Permission*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
