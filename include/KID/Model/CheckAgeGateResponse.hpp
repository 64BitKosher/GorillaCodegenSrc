// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KID::Model
namespace KID::Model {
  // Forward declaring type: Session
  class Session;
  // Forward declaring type: Challenge
  class Challenge;
  // Skipping declaration: StatusEnum because it is already included!
}
// Completed forward declares
// Type namespace: KID.Model
namespace KID::Model {
  // Forward declaring type: CheckAgeGateResponse
  class CheckAgeGateResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Model::CheckAgeGateResponse);
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::CheckAgeGateResponse*, "KID.Model", "CheckAgeGateResponse");
// Type namespace: KID.Model
namespace KID::Model {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: KID.Model.CheckAgeGateResponse
  // [TokenAttribute] Offset: FFFFFFFF
  // [DataContractAttribute] Offset: FFFFFFFF
  class CheckAgeGateResponse : public ::Il2CppObject {
    public:
    // Nested type: ::KID::Model::CheckAgeGateResponse::StatusEnum
    struct StatusEnum;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: KID.Model.CheckAgeGateResponse/StatusEnum
    // [TokenAttribute] Offset: FFFFFFFF
    // [JsonConverterAttribute] Offset: FFFFFFFF
    struct StatusEnum/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatusEnum
      constexpr StatusEnum(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public KID.Model.CheckAgeGateResponse/StatusEnum PASS
      static constexpr const int PASS = 1;
      // Get static field: static public KID.Model.CheckAgeGateResponse/StatusEnum PASS
      static ::KID::Model::CheckAgeGateResponse::StatusEnum _get_PASS();
      // Set static field: static public KID.Model.CheckAgeGateResponse/StatusEnum PASS
      static void _set_PASS(::KID::Model::CheckAgeGateResponse::StatusEnum value);
      // static field const value: static public KID.Model.CheckAgeGateResponse/StatusEnum PROHIBITED
      static constexpr const int PROHIBITED = 2;
      // Get static field: static public KID.Model.CheckAgeGateResponse/StatusEnum PROHIBITED
      static ::KID::Model::CheckAgeGateResponse::StatusEnum _get_PROHIBITED();
      // Set static field: static public KID.Model.CheckAgeGateResponse/StatusEnum PROHIBITED
      static void _set_PROHIBITED(::KID::Model::CheckAgeGateResponse::StatusEnum value);
      // static field const value: static public KID.Model.CheckAgeGateResponse/StatusEnum CHALLENGE
      static constexpr const int CHALLENGE = 3;
      // Get static field: static public KID.Model.CheckAgeGateResponse/StatusEnum CHALLENGE
      static ::KID::Model::CheckAgeGateResponse::StatusEnum _get_CHALLENGE();
      // Set static field: static public KID.Model.CheckAgeGateResponse/StatusEnum CHALLENGE
      static void _set_CHALLENGE(::KID::Model::CheckAgeGateResponse::StatusEnum value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // KID.Model.CheckAgeGateResponse/StatusEnum
    #pragma pack(pop)
    static check_size<sizeof(CheckAgeGateResponse::StatusEnum), 0 + sizeof(int)> __KID_Model_CheckAgeGateResponse_StatusEnumSizeCheck;
    static_assert(sizeof(CheckAgeGateResponse::StatusEnum) == 0x4);
    public:
    // private KID.Model.CheckAgeGateResponse/StatusEnum <Status>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::KID::Model::CheckAgeGateResponse::StatusEnum Status;
    // Field size check
    static_assert(sizeof(::KID::Model::CheckAgeGateResponse::StatusEnum) == 0x4);
    // Padding between fields: Status and: Session
    char __padding0[0x4] = {};
    // private KID.Model.Session <Session>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::KID::Model::Session* Session;
    // Field size check
    static_assert(sizeof(::KID::Model::Session*) == 0x8);
    // private KID.Model.Challenge <Challenge>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::KID::Model::Challenge* Challenge;
    // Field size check
    static_assert(sizeof(::KID::Model::Challenge*) == 0x8);
    public:
    // Get instance field reference: private KID.Model.CheckAgeGateResponse/StatusEnum <Status>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Model::CheckAgeGateResponse::StatusEnum& dyn_$Status$k__BackingField();
    // Get instance field reference: private KID.Model.Session <Session>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Model::Session*& dyn_$Session$k__BackingField();
    // Get instance field reference: private KID.Model.Challenge <Challenge>k__BackingField
    [[deprecated("Use field access instead!")]] ::KID::Model::Challenge*& dyn_$Challenge$k__BackingField();
    // public KID.Model.CheckAgeGateResponse/StatusEnum get_Status()
    // Offset: 0x437FE4C
    ::KID::Model::CheckAgeGateResponse::StatusEnum get_Status();
    // public System.Void set_Status(KID.Model.CheckAgeGateResponse/StatusEnum value)
    // Offset: 0x437FE54
    void set_Status(::KID::Model::CheckAgeGateResponse::StatusEnum value);
    // protected System.Void .ctor()
    // Offset: 0x437FE5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CheckAgeGateResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::CheckAgeGateResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CheckAgeGateResponse*, creationType>()));
    }
    // public System.Void .ctor(KID.Model.CheckAgeGateResponse/StatusEnum status, KID.Model.Session session, KID.Model.Challenge challenge)
    // Offset: 0x437FE64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CheckAgeGateResponse* New_ctor(::KID::Model::CheckAgeGateResponse::StatusEnum status, ::KID::Model::Session* session, ::KID::Model::Challenge* challenge) {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::CheckAgeGateResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CheckAgeGateResponse*, creationType>(status, session, challenge)));
    }
    // public KID.Model.Session get_Session()
    // Offset: 0x437FEB8
    ::KID::Model::Session* get_Session();
    // public System.Void set_Session(KID.Model.Session value)
    // Offset: 0x437FEC0
    void set_Session(::KID::Model::Session* value);
    // public KID.Model.Challenge get_Challenge()
    // Offset: 0x437FEC8
    ::KID::Model::Challenge* get_Challenge();
    // public System.Void set_Challenge(KID.Model.Challenge value)
    // Offset: 0x437FED0
    void set_Challenge(::KID::Model::Challenge* value);
    // public System.String ToJson()
    // Offset: 0x43800A4
    ::StringW ToJson();
    // public override System.String ToString()
    // Offset: 0x437FED8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // KID.Model.CheckAgeGateResponse
  #pragma pack(pop)
  static check_size<sizeof(CheckAgeGateResponse), 32 + sizeof(::KID::Model::Challenge*)> __KID_Model_CheckAgeGateResponseSizeCheck;
  static_assert(sizeof(CheckAgeGateResponse) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::CheckAgeGateResponse::StatusEnum, "KID.Model", "CheckAgeGateResponse/StatusEnum");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Model::CheckAgeGateResponse::StatusEnum (KID::Model::CheckAgeGateResponse::*)()>(&KID::Model::CheckAgeGateResponse::get_Status)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::set_Status
// Il2CppName: set_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::CheckAgeGateResponse::*)(::KID::Model::CheckAgeGateResponse::StatusEnum)>(&KID::Model::CheckAgeGateResponse::set_Status)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("KID.Model", "CheckAgeGateResponse/StatusEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "set_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::get_Session
// Il2CppName: get_Session
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Model::Session* (KID::Model::CheckAgeGateResponse::*)()>(&KID::Model::CheckAgeGateResponse::get_Session)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "get_Session", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::set_Session
// Il2CppName: set_Session
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::CheckAgeGateResponse::*)(::KID::Model::Session*)>(&KID::Model::CheckAgeGateResponse::set_Session)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("KID.Model", "Session")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "set_Session", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::get_Challenge
// Il2CppName: get_Challenge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::KID::Model::Challenge* (KID::Model::CheckAgeGateResponse::*)()>(&KID::Model::CheckAgeGateResponse::get_Challenge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "get_Challenge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::set_Challenge
// Il2CppName: set_Challenge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::CheckAgeGateResponse::*)(::KID::Model::Challenge*)>(&KID::Model::CheckAgeGateResponse::set_Challenge)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("KID.Model", "Challenge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "set_Challenge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::CheckAgeGateResponse::*)()>(&KID::Model::CheckAgeGateResponse::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::CheckAgeGateResponse::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::CheckAgeGateResponse::*)()>(&KID::Model::CheckAgeGateResponse::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::CheckAgeGateResponse*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
