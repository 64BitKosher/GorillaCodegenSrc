// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
}
// Completed forward declares
// Type namespace: KID.Model
namespace KID::Model {
  // Forward declaring type: AbstractOpenAPISchema
  class AbstractOpenAPISchema;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Model::AbstractOpenAPISchema);
DEFINE_IL2CPP_ARG_TYPE(::KID::Model::AbstractOpenAPISchema*, "KID.Model", "AbstractOpenAPISchema");
// Type namespace: KID.Model
namespace KID::Model {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: KID.Model.AbstractOpenAPISchema
  // [TokenAttribute] Offset: FFFFFFFF
  class AbstractOpenAPISchema : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <IsNullable>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsNullable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsNullable and: SchemaType
    char __padding0[0x7] = {};
    // private System.String <SchemaType>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW SchemaType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static public readonly Newtonsoft.Json.JsonSerializerSettings SerializerSettings
    static ::Newtonsoft::Json::JsonSerializerSettings* _get_SerializerSettings();
    // Set static field: static public readonly Newtonsoft.Json.JsonSerializerSettings SerializerSettings
    static void _set_SerializerSettings(::Newtonsoft::Json::JsonSerializerSettings* value);
    // Get static field: static public readonly Newtonsoft.Json.JsonSerializerSettings AdditionalPropertiesSerializerSettings
    static ::Newtonsoft::Json::JsonSerializerSettings* _get_AdditionalPropertiesSerializerSettings();
    // Set static field: static public readonly Newtonsoft.Json.JsonSerializerSettings AdditionalPropertiesSerializerSettings
    static void _set_AdditionalPropertiesSerializerSettings(::Newtonsoft::Json::JsonSerializerSettings* value);
    // Get instance field reference: private System.Boolean <IsNullable>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsNullable$k__BackingField();
    // Get instance field reference: private System.String <SchemaType>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$SchemaType$k__BackingField();
    // public System.Object get_ActualInstance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* get_ActualInstance();
    // public System.Void set_ActualInstance(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ActualInstance(::Il2CppObject* value);
    // public System.Boolean get_IsNullable()
    // Offset: 0x437EE10
    bool get_IsNullable();
    // protected System.Void set_IsNullable(System.Boolean value)
    // Offset: 0x437EE18
    void set_IsNullable(bool value);
    // public System.String get_SchemaType()
    // Offset: 0x437EE24
    ::StringW get_SchemaType();
    // protected System.Void set_SchemaType(System.String value)
    // Offset: 0x437EE2C
    void set_SchemaType(::StringW value);
    // public System.String ToJson()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW ToJson();
    // protected System.Void .ctor()
    // Offset: 0x437EE34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AbstractOpenAPISchema* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KID::Model::AbstractOpenAPISchema::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AbstractOpenAPISchema*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x437EE3C
    static void _cctor();
  }; // KID.Model.AbstractOpenAPISchema
  #pragma pack(pop)
  static check_size<sizeof(AbstractOpenAPISchema), 24 + sizeof(::StringW)> __KID_Model_AbstractOpenAPISchemaSizeCheck;
  static_assert(sizeof(AbstractOpenAPISchema) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::get_ActualInstance
// Il2CppName: get_ActualInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (KID::Model::AbstractOpenAPISchema::*)()>(&KID::Model::AbstractOpenAPISchema::get_ActualInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "get_ActualInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::set_ActualInstance
// Il2CppName: set_ActualInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::AbstractOpenAPISchema::*)(::Il2CppObject*)>(&KID::Model::AbstractOpenAPISchema::set_ActualInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "set_ActualInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::get_IsNullable
// Il2CppName: get_IsNullable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KID::Model::AbstractOpenAPISchema::*)()>(&KID::Model::AbstractOpenAPISchema::get_IsNullable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "get_IsNullable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::set_IsNullable
// Il2CppName: set_IsNullable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::AbstractOpenAPISchema::*)(bool)>(&KID::Model::AbstractOpenAPISchema::set_IsNullable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "set_IsNullable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::AbstractOpenAPISchema::*)()>(&KID::Model::AbstractOpenAPISchema::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::set_SchemaType
// Il2CppName: set_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KID::Model::AbstractOpenAPISchema::*)(::StringW)>(&KID::Model::AbstractOpenAPISchema::set_SchemaType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "set_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (KID::Model::AbstractOpenAPISchema::*)()>(&KID::Model::AbstractOpenAPISchema::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: KID::Model::AbstractOpenAPISchema::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KID::Model::AbstractOpenAPISchema::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KID::Model::AbstractOpenAPISchema*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
