// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: KID.Client.IApiAccessor
#include "KID/Client/IApiAccessor.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: KID::Model
namespace KID::Model {
  // Forward declaring type: AwaitChallengeResponse
  class AwaitChallengeResponse;
  // Forward declaring type: Challenge
  class Challenge;
  // Forward declaring type: SendEmailRequest
  class SendEmailRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: KID::Client
namespace KID::Client {
  // Forward declaring type: ApiResponse`1<T>
  template<typename T>
  class ApiResponse_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: KID.Api
namespace KID::Api {
  // Forward declaring type: IChallengeAPIsApiAsync
  class IChallengeAPIsApiAsync;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KID::Api::IChallengeAPIsApiAsync);
DEFINE_IL2CPP_ARG_TYPE(::KID::Api::IChallengeAPIsApiAsync*, "KID.Api", "IChallengeAPIsApiAsync");
// Type namespace: KID.Api
namespace KID::Api {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: KID.Api.IChallengeAPIsApiAsync
  // [TokenAttribute] Offset: FFFFFFFF
  class IChallengeAPIsApiAsync/*, public ::KID::Client::IApiAccessor*/ {
    public:
    // Creating interface conversion operator: operator ::KID::Client::IApiAccessor
    operator ::KID::Client::IApiAccessor() noexcept {
      return *reinterpret_cast<::KID::Client::IApiAccessor*>(this);
    }
    // public System.Threading.Tasks.Task`1<KID.Model.AwaitChallengeResponse> AwaitChallengeAsync(System.Guid challengeId, System.Nullable`1<System.Int32> timeout, System.Collections.Generic.List`1<System.String> varFor, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::KID::Model::AwaitChallengeResponse*>* AwaitChallengeAsync(::System::Guid challengeId, ::System::Nullable_1<int> timeout, ::System::Collections::Generic::List_1<::StringW>* varFor, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<KID.Model.AwaitChallengeResponse>> AwaitChallengeWithHttpInfoAsync(System.Guid challengeId, System.Nullable`1<System.Int32> timeout, System.Collections.Generic.List`1<System.String> varFor, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::KID::Model::AwaitChallengeResponse*>*>* AwaitChallengeWithHttpInfoAsync(::System::Guid challengeId, ::System::Nullable_1<int> timeout, ::System::Collections::Generic::List_1<::StringW>* varFor, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<KID.Model.Challenge> GetChallengeAsync(System.Guid challengeId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::KID::Model::Challenge*>* GetChallengeAsync(::System::Guid challengeId, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<KID.Model.Challenge>> GetChallengeWithHttpInfoAsync(System.Guid challengeId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::KID::Model::Challenge*>*>* GetChallengeWithHttpInfoAsync(::System::Guid challengeId, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<System.Object> SendEmailAsync(KID.Model.SendEmailRequest sendEmailRequest, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::Il2CppObject*>* SendEmailAsync(::KID::Model::SendEmailRequest* sendEmailRequest, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<KID.Client.ApiResponse`1<System.Object>> SendEmailWithHttpInfoAsync(KID.Model.SendEmailRequest sendEmailRequest, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::Il2CppObject*>*>* SendEmailWithHttpInfoAsync(::KID::Model::SendEmailRequest* sendEmailRequest, ::System::Threading::CancellationToken cancellationToken);
  }; // KID.Api.IChallengeAPIsApiAsync
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::AwaitChallengeAsync
// Il2CppName: AwaitChallengeAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::KID::Model::AwaitChallengeResponse*>* (KID::Api::IChallengeAPIsApiAsync::*)(::System::Guid, ::System::Nullable_1<int>, ::System::Collections::Generic::List_1<::StringW>*, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::AwaitChallengeAsync)> {
  static const MethodInfo* get() {
    static auto* challengeId = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* timeout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* varFor = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "AwaitChallengeAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{challengeId, timeout, varFor, cancellationToken});
  }
};
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::AwaitChallengeWithHttpInfoAsync
// Il2CppName: AwaitChallengeWithHttpInfoAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::KID::Model::AwaitChallengeResponse*>*>* (KID::Api::IChallengeAPIsApiAsync::*)(::System::Guid, ::System::Nullable_1<int>, ::System::Collections::Generic::List_1<::StringW>*, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::AwaitChallengeWithHttpInfoAsync)> {
  static const MethodInfo* get() {
    static auto* challengeId = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* timeout = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* varFor = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "AwaitChallengeWithHttpInfoAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{challengeId, timeout, varFor, cancellationToken});
  }
};
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::GetChallengeAsync
// Il2CppName: GetChallengeAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::KID::Model::Challenge*>* (KID::Api::IChallengeAPIsApiAsync::*)(::System::Guid, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::GetChallengeAsync)> {
  static const MethodInfo* get() {
    static auto* challengeId = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "GetChallengeAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{challengeId, cancellationToken});
  }
};
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::GetChallengeWithHttpInfoAsync
// Il2CppName: GetChallengeWithHttpInfoAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::KID::Model::Challenge*>*>* (KID::Api::IChallengeAPIsApiAsync::*)(::System::Guid, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::GetChallengeWithHttpInfoAsync)> {
  static const MethodInfo* get() {
    static auto* challengeId = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "GetChallengeWithHttpInfoAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{challengeId, cancellationToken});
  }
};
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::SendEmailAsync
// Il2CppName: SendEmailAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Il2CppObject*>* (KID::Api::IChallengeAPIsApiAsync::*)(::KID::Model::SendEmailRequest*, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::SendEmailAsync)> {
  static const MethodInfo* get() {
    static auto* sendEmailRequest = &::il2cpp_utils::GetClassFromName("KID.Model", "SendEmailRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "SendEmailAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendEmailRequest, cancellationToken});
  }
};
// Writing MetadataGetter for method: KID::Api::IChallengeAPIsApiAsync::SendEmailWithHttpInfoAsync
// Il2CppName: SendEmailWithHttpInfoAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::KID::Client::ApiResponse_1<::Il2CppObject*>*>* (KID::Api::IChallengeAPIsApiAsync::*)(::KID::Model::SendEmailRequest*, ::System::Threading::CancellationToken)>(&KID::Api::IChallengeAPIsApiAsync::SendEmailWithHttpInfoAsync)> {
  static const MethodInfo* get() {
    static auto* sendEmailRequest = &::il2cpp_utils::GetClassFromName("KID.Model", "SendEmailRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KID::Api::IChallengeAPIsApiAsync*), "SendEmailWithHttpInfoAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendEmailRequest, cancellationToken});
  }
};
