// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: Cysharp.Text.Utf16ValueStringBuilder
#include "Cysharp/Text/Utf16ValueStringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaExtensions
namespace GorillaExtensions {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: FindObjectsInactive
  struct FindObjectsInactive;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Completed forward declares
// Type namespace: GorillaExtensions
namespace GorillaExtensions {
  // Forward declaring type: GTExt
  class GTExt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaExtensions::GTExt);
DEFINE_IL2CPP_ARG_TYPE(::GorillaExtensions::GTExt*, "GorillaExtensions", "GTExt");
// Type namespace: GorillaExtensions
namespace GorillaExtensions {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: GorillaExtensions.GTExt
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class GTExt : public ::Il2CppObject {
    public:
    // Nested type: ::GorillaExtensions::GTExt::ParityOptions
    struct ParityOptions;
    // Nested type: ::GorillaExtensions::GTExt::$$c__DisplayClass6_0_4<T, TStop1, TStop2, TStop3>
    template<typename T, typename TStop1, typename TStop2, typename TStop3>
    struct $$c__DisplayClass6_0_4;
    // WARNING Size may be invalid!
    // Autogenerated type: GorillaExtensions.GTExt/<>c__DisplayClass6_0`4
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    template<typename T, typename TStop1, typename TStop2, typename TStop3>
    struct $$c__DisplayClass6_0_4/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean includeInactive
      // Size: 0x1
      // Offset: 0x0
      bool includeInactive;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: $$c__DisplayClass6_0_4
      constexpr $$c__DisplayClass6_0_4(bool includeInactive_ = {}) noexcept : includeInactive{includeInactive_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator bool
      constexpr operator bool() const noexcept {
        return includeInactive;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Boolean includeInactive
      [[deprecated("Use field access instead!")]] bool& dyn_includeInactive() {
        static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::$$c__DisplayClass6_0_4::dyn_includeInactive");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "includeInactive"))->offset;
        return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // GorillaExtensions.GTExt/<>c__DisplayClass6_0`4
    // Could not write size check! Type: GorillaExtensions.GTExt/<>c__DisplayClass6_0`4 is generic, or has no fields that are valid for size checks!
    // static public T GetComponentInHierarchy(UnityEngine.SceneManagement.Scene scene, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetComponentInHierarchy(::UnityEngine::SceneManagement::Scene scene, bool includeInactive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentInHierarchy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentInHierarchy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(includeInactive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, includeInactive);
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsInHierarchy(UnityEngine.SceneManagement.Scene scene, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsInHierarchy(::UnityEngine::SceneManagement::Scene scene, bool includeInactive, int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsInHierarchy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsInHierarchy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, includeInactive, capacity);
    }
    // static public System.Collections.Generic.List`1<UnityEngine.Object> GetComponentsInHierarchy(UnityEngine.SceneManagement.Scene scene, System.Type type, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0x286DE18
    static ::System::Collections::Generic::List_1<::UnityEngine::Object*>* GetComponentsInHierarchy(::UnityEngine::SceneManagement::Scene scene, ::System::Type* type, bool includeInactive, int capacity);
    // static public System.Collections.Generic.List`1<UnityEngine.GameObject> GetGameObjectsInHierarchy(UnityEngine.SceneManagement.Scene scene, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0x286DF30
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetGameObjectsInHierarchy(::UnityEngine::SceneManagement::Scene scene, bool includeInactive, int capacity);
    // static public System.Collections.Generic.List`1<T> GetComponentsInHierarchyUntil(UnityEngine.SceneManagement.Scene scene, System.Boolean includeInactive, System.Boolean stopAtRoot, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class TStop1>
    static ::System::Collections::Generic::List_1<T>* GetComponentsInHierarchyUntil(::UnityEngine::SceneManagement::Scene scene, bool includeInactive, bool stopAtRoot, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop1, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsInHierarchyUntil");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsInHierarchyUntil", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(stopAtRoot), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, includeInactive, stopAtRoot, capacity);
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsInHierarchyUntil(UnityEngine.SceneManagement.Scene scene, System.Boolean includeInactive, System.Boolean stopAtRoot, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class TStop1, class TStop2, class TStop3>
    static ::System::Collections::Generic::List_1<T>* GetComponentsInHierarchyUntil(::UnityEngine::SceneManagement::Scene scene, bool includeInactive, bool stopAtRoot, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop1, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop2, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop3, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsInHierarchyUntil");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsInHierarchyUntil", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(stopAtRoot), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, includeInactive, stopAtRoot, capacity);
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsInChildrenUntil(UnityEngine.Component root, System.Boolean includeInactive, System.Boolean stopAtRoot, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class TStop1, class TStop2, class TStop3>
    static ::System::Collections::Generic::List_1<T>* GetComponentsInChildrenUntil(::UnityEngine::Component* root, bool includeInactive, bool stopAtRoot, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop1, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop2, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop3, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsInChildrenUntil");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsInChildrenUntil", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(stopAtRoot), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, root, includeInactive, stopAtRoot, capacity);
    }
    // static public T GetComponentWithRegex(UnityEngine.Component root, System.String regexString)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetComponentWithRegex(::UnityEngine::Component* root, ::StringW regexString) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentWithRegex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentWithRegex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(regexString)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, root, regexString);
    }
    // static private System.Collections.Generic.List`1<T> GetComponentsWithRegex_Internal(System.Collections.Generic.IEnumerable`1<T> allComponents, System.String regexString, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsWithRegex_Internal(::System::Collections::Generic::IEnumerable_1<T>* allComponents, ::StringW regexString, bool includeInactive, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex_Internal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex_Internal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allComponents), ::il2cpp_utils::ExtractType(regexString), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, allComponents, regexString, includeInactive, capacity);
    }
    // static private System.Void GetComponentsWithRegex_Internal(System.Collections.Generic.IEnumerable`1<T> allComponents, System.Text.RegularExpressions.Regex regex, ref System.Collections.Generic.List`1<T> foundComponents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void GetComponentsWithRegex_Internal(::System::Collections::Generic::IEnumerable_1<T>* allComponents, ::System::Text::RegularExpressions::Regex* regex, ByRef<::System::Collections::Generic::List_1<T>*> foundComponents) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex_Internal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex_Internal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allComponents), ::il2cpp_utils::ExtractType(regex), ::il2cpp_utils::ExtractType(foundComponents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, allComponents, regex, byref(foundComponents));
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String regexString, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::StringW regexString, bool includeInactive, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(regexString), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, regexString, includeInactive, capacity);
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsWithRegex(UnityEngine.Component root, System.String regexString, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsWithRegex(::UnityEngine::Component* root, ::StringW regexString, bool includeInactive, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(regexString), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, root, regexString, includeInactive, capacity);
    }
    // static public System.Collections.Generic.List`1<UnityEngine.GameObject> GetGameObjectsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String regexString, System.Boolean includeInactive, System.Int32 capacity)
    // Offset: 0x286DF90
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetGameObjectsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::StringW regexString, bool includeInactive, int capacity);
    // static public System.Void GetComponentsWithRegex_Internal(System.Collections.Generic.List`1<T> allComponents, System.Text.RegularExpressions.Regex[] regexes, System.Int32 maxCount, ref System.Collections.Generic.List`1<T> foundComponents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void GetComponentsWithRegex_Internal(::System::Collections::Generic::List_1<T>* allComponents, ::ArrayW<::System::Text::RegularExpressions::Regex*> regexes, int maxCount, ByRef<::System::Collections::Generic::List_1<T>*> foundComponents) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex_Internal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex_Internal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allComponents), ::il2cpp_utils::ExtractType(regexes), ::il2cpp_utils::ExtractType(maxCount), ::il2cpp_utils::ExtractType(foundComponents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, allComponents, regexes, maxCount, byref(foundComponents));
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String[] regexStrings, System.Boolean includeInactive, System.Int32 maxCount, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> regexStrings, bool includeInactive, int maxCount, int capacity) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(regexStrings), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(maxCount), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, regexStrings, includeInactive, maxCount, capacity);
    }
    // static public System.Collections.Generic.List`1<T> GetComponentsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String[] regexStrings, System.String[] excludeRegexStrings, System.Boolean includeInactive, System.Int32 maxCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> regexStrings, ::ArrayW<::StringW> excludeRegexStrings, bool includeInactive, int maxCount) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsWithRegex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsWithRegex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(regexStrings), ::il2cpp_utils::ExtractType(excludeRegexStrings), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(maxCount)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, regexStrings, excludeRegexStrings, includeInactive, maxCount);
    }
    // static public System.Collections.Generic.List`1<UnityEngine.GameObject> GetGameObjectsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String[] regexStrings, System.Boolean includeInactive, System.Int32 maxCount)
    // Offset: 0x286E1F8
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetGameObjectsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> regexStrings, bool includeInactive, int maxCount);
    // static public System.Collections.Generic.List`1<UnityEngine.GameObject> GetGameObjectsWithRegex(UnityEngine.SceneManagement.Scene scene, System.String[] regexStrings, System.String[] excludeRegexStrings, System.Boolean includeInactive, System.Int32 maxCount)
    // Offset: 0x286E464
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetGameObjectsWithRegex(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> regexStrings, ::ArrayW<::StringW> excludeRegexStrings, bool includeInactive, int maxCount);
    // static public System.Collections.Generic.List`1<T> GetComponentsByName(UnityEngine.Transform xform, System.String name, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* GetComponentsByName(::UnityEngine::Transform* xform, ::StringW name, bool includeInactive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentsByName");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentsByName", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xform), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(includeInactive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, xform, name, includeInactive);
    }
    // static public T GetComponentByName(UnityEngine.Transform xform, System.String name, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetComponentByName(::UnityEngine::Transform* xform, ::StringW name, bool includeInactive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentByName");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentByName", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xform), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(includeInactive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, xform, name, includeInactive);
    }
    // static public System.Collections.Generic.List`1<UnityEngine.GameObject> GetGameObjectsInHierarchy(UnityEngine.SceneManagement.Scene scene, System.String name, System.Boolean includeInactive)
    // Offset: 0x286E6D4
    static ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetGameObjectsInHierarchy(::UnityEngine::SceneManagement::Scene scene, ::StringW name, bool includeInactive);
    // static public T GetOrAddComponent(UnityEngine.GameObject gameObject, ref T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetOrAddComponent(::UnityEngine::GameObject* gameObject, ByRef<T> component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(component)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, gameObject, byref(component));
    }
    // static public T GetOrAddComponent(UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetOrAddComponent(::UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, gameObject);
    }
    // static public System.Void SetLossyScale(UnityEngine.Transform transform, UnityEngine.Vector3 scale)
    // Offset: 0x286E938
    static void SetLossyScale(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 scale);
    // static public System.Void ForEachBackwards(System.Collections.Generic.List`1<T> list, System.Action`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ForEachBackwards(::System::Collections::Generic::List_1<T>* list, ::System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::ForEachBackwards");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "ForEachBackwards", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, action);
    }
    // static public System.Void SafeForEachBackwards(System.Collections.Generic.List`1<T> list, System.Action`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void SafeForEachBackwards(::System::Collections::Generic::List_1<T>* list, ::System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::SafeForEachBackwards");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "SafeForEachBackwards", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, action);
    }
    // static public System.Boolean CompareAs255Unclamped(UnityEngine.Color a, UnityEngine.Color b)
    // Offset: 0x286E994
    static bool CompareAs255Unclamped(::UnityEngine::Color a, ::UnityEngine::Color b);
    // static public UnityEngine.Quaternion QuaternionFromToVec(UnityEngine.Vector3 toVector, UnityEngine.Vector3 fromVector)
    // Offset: 0x286EA6C
    static ::UnityEngine::Quaternion QuaternionFromToVec(::UnityEngine::Vector3 toVector, ::UnityEngine::Vector3 fromVector);
    // static public UnityEngine.Vector3 Position(UnityEngine.Matrix4x4 matrix)
    // Offset: 0x286EDDC
    static ::UnityEngine::Vector3 Position(::UnityEngine::Matrix4x4 matrix);
    // static public UnityEngine.Vector3 Scale(UnityEngine.Matrix4x4 m)
    // Offset: 0x286EDE8
    static ::UnityEngine::Vector3 Scale(::UnityEngine::Matrix4x4 m);
    // static public System.Void SetLocalRelativeToParentMatrixWithParityAxis(in UnityEngine.Matrix4x4 matrix, GorillaExtensions.GTExt/ParityOptions parity)
    // Offset: 0x286F188
    static void SetLocalRelativeToParentMatrixWithParityAxis(ByRef<::UnityEngine::Matrix4x4> matrix, ::GorillaExtensions::GTExt::ParityOptions parity);
    // static public System.Void MultiplyInPlaceWith(ref UnityEngine.Vector3 a, in UnityEngine.Vector3 b)
    // Offset: 0x286F18C
    static void MultiplyInPlaceWith(ByRef<::UnityEngine::Vector3> a, ByRef<::UnityEngine::Vector3> b);
    // static public System.Void DecomposeWithXFlip(in UnityEngine.Matrix4x4 matrix, out UnityEngine.Vector3 transformation, out UnityEngine.Quaternion rotation, out UnityEngine.Vector3 scale)
    // Offset: 0x286F1BC
    static void DecomposeWithXFlip(ByRef<::UnityEngine::Matrix4x4> matrix, ByRef<::UnityEngine::Vector3> transformation, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> scale);
    // static public System.Void SetLocalMatrixRelativeToParentWithXParity(UnityEngine.Transform transform, in UnityEngine.Matrix4x4 matrix4X4)
    // Offset: 0x286F374
    static void SetLocalMatrixRelativeToParentWithXParity(::UnityEngine::Transform* transform, ByRef<::UnityEngine::Matrix4x4> matrix4X4);
    // static public UnityEngine.Matrix4x4 Matrix4x4Scale(in UnityEngine.Vector3 vector)
    // Offset: 0x286F3F8
    static ::UnityEngine::Matrix4x4 Matrix4x4Scale(ByRef<::UnityEngine::Vector3> vector);
    // static public UnityEngine.Vector4 GetColumnNoCopy(in UnityEngine.Matrix4x4 matrix, in System.Int32 index)
    // Offset: 0x286F2A0
    static ::UnityEngine::Vector4 GetColumnNoCopy(ByRef<::UnityEngine::Matrix4x4> matrix, ByRef<int> index);
    // static public UnityEngine.Quaternion RotationWithScaleContext(in UnityEngine.Matrix4x4 m, in UnityEngine.Vector3 scale)
    // Offset: 0x286F42C
    static ::UnityEngine::Quaternion RotationWithScaleContext(ByRef<::UnityEngine::Matrix4x4> m, ByRef<::UnityEngine::Vector3> scale);
    // static public UnityEngine.Quaternion Rotation(in UnityEngine.Matrix4x4 m)
    // Offset: 0x286F514
    static ::UnityEngine::Quaternion Rotation(ByRef<::UnityEngine::Matrix4x4> m);
    // static public UnityEngine.Vector3 x0y(UnityEngine.Vector2 v)
    // Offset: 0x286F580
    static ::UnityEngine::Vector3 x0y(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 x0y(UnityEngine.Vector3 v)
    // Offset: 0x286F58C
    static ::UnityEngine::Vector3 x0y(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xy0(UnityEngine.Vector2 v)
    // Offset: 0x286F598
    static ::UnityEngine::Vector3 xy0(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 xy0(UnityEngine.Vector3 v)
    // Offset: 0x286F5A0
    static ::UnityEngine::Vector3 xy0(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xz0(UnityEngine.Vector3 v)
    // Offset: 0x286F5A8
    static ::UnityEngine::Vector3 xz0(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 x0z(UnityEngine.Vector3 v)
    // Offset: 0x286F5B4
    static ::UnityEngine::Vector3 x0z(::UnityEngine::Vector3 v);
    // static public UnityEngine.Matrix4x4 LocalMatrixRelativeToParentNoScale(UnityEngine.Transform transform)
    // Offset: 0x286F5BC
    static ::UnityEngine::Matrix4x4 LocalMatrixRelativeToParentNoScale(::UnityEngine::Transform* transform);
    // static public UnityEngine.Matrix4x4 LocalMatrixRelativeToParentWithScale(UnityEngine.Transform transform)
    // Offset: 0x286F6B0
    static ::UnityEngine::Matrix4x4 LocalMatrixRelativeToParentWithScale(::UnityEngine::Transform* transform);
    // static public System.Void SetLocalMatrixRelativeToParent(UnityEngine.Transform transform, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x286F7E0
    static void SetLocalMatrixRelativeToParent(::UnityEngine::Transform* transform, ::UnityEngine::Matrix4x4 matrix);
    // static public System.Void SetLocalMatrixRelativeToParentNoScale(UnityEngine.Transform transform, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x286F854
    static void SetLocalMatrixRelativeToParentNoScale(::UnityEngine::Transform* transform, ::UnityEngine::Matrix4x4 matrix);
    // static public System.Void SetLocalToWorldMatrixNoScale(UnityEngine.Transform transform, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x286F898
    static void SetLocalToWorldMatrixNoScale(::UnityEngine::Transform* transform, ::UnityEngine::Matrix4x4 matrix);
    // static public UnityEngine.Matrix4x4 localToWorldNoScale(UnityEngine.Transform transform)
    // Offset: 0x286F8DC
    static ::UnityEngine::Matrix4x4 localToWorldNoScale(::UnityEngine::Transform* transform);
    // static public System.Void SetLocalToWorldMatrixWithScale(UnityEngine.Transform transform, UnityEngine.Matrix4x4 matrix)
    // Offset: 0x286F9D0
    static void SetLocalToWorldMatrixWithScale(::UnityEngine::Transform* transform, ::UnityEngine::Matrix4x4 matrix);
    // static public UnityEngine.Matrix4x4 Matrix4X4LerpNoScale(UnityEngine.Matrix4x4 a, UnityEngine.Matrix4x4 b, System.Single t)
    // Offset: 0x286FA2C
    static ::UnityEngine::Matrix4x4 Matrix4X4LerpNoScale(::UnityEngine::Matrix4x4 a, ::UnityEngine::Matrix4x4 b, float t);
    // static public UnityEngine.Matrix4x4 LerpTo(UnityEngine.Matrix4x4 a, UnityEngine.Matrix4x4 b, System.Single t)
    // Offset: 0x286FB60
    static ::UnityEngine::Matrix4x4 LerpTo(::UnityEngine::Matrix4x4 a, ::UnityEngine::Matrix4x4 b, float t);
    // static public System.Boolean IsNaN(in UnityEngine.Vector3 v)
    // Offset: 0x286FBB8
    static bool IsNaN(ByRef<::UnityEngine::Vector3> v);
    // static public System.Boolean IsNan(in UnityEngine.Quaternion q)
    // Offset: 0x286FBFC
    static bool IsNan(ByRef<::UnityEngine::Quaternion> q);
    // static public System.Boolean IsInfinity(in UnityEngine.Vector3 v)
    // Offset: 0x286FC50
    static bool IsInfinity(ByRef<::UnityEngine::Vector3> v);
    // static public System.Boolean IsInfinity(in UnityEngine.Quaternion q)
    // Offset: 0x286FC94
    static bool IsInfinity(ByRef<::UnityEngine::Quaternion> q);
    // static public System.Boolean ValuesInRange(in UnityEngine.Vector3 v, in System.Single maxVal)
    // Offset: 0x286FCE8
    static bool ValuesInRange(ByRef<::UnityEngine::Vector3> v, ByRef<float> maxVal);
    // static public System.Boolean IsValid(in UnityEngine.Vector3 v, in System.Single maxVal)
    // Offset: 0x286FD28
    static bool IsValid(ByRef<::UnityEngine::Vector3> v, ByRef<float> maxVal);
    // static public UnityEngine.Vector3 GetValidWithFallback(in UnityEngine.Vector3 v, in UnityEngine.Vector3 safeVal)
    // Offset: 0x286FDC8
    static ::UnityEngine::Vector3 GetValidWithFallback(ByRef<::UnityEngine::Vector3> v, ByRef<::UnityEngine::Vector3> safeVal);
    // static public System.Void SetValueSafe(ref UnityEngine.Vector3 v, in UnityEngine.Vector3 newVal)
    // Offset: 0x286FE58
    static void SetValueSafe(ByRef<::UnityEngine::Vector3> v, ByRef<::UnityEngine::Vector3> newVal);
    // static public System.Boolean IsValid(in UnityEngine.Quaternion q)
    // Offset: 0x286FEF8
    static bool IsValid(ByRef<::UnityEngine::Quaternion> q);
    // static public UnityEngine.Quaternion GetValidWithFallback(in UnityEngine.Quaternion q, in UnityEngine.Quaternion safeVal)
    // Offset: 0x286FF84
    static ::UnityEngine::Quaternion GetValidWithFallback(ByRef<::UnityEngine::Quaternion> q, ByRef<::UnityEngine::Quaternion> safeVal);
    // static public System.Void SetValueSafe(ref UnityEngine.Quaternion q, in UnityEngine.Quaternion newVal)
    // Offset: 0x286FFF0
    static void SetValueSafe(ByRef<::UnityEngine::Quaternion> q, ByRef<::UnityEngine::Quaternion> newVal);
    // static public UnityEngine.Vector2 ClampMagnitudeSafe(UnityEngine.Vector2 v2, System.Single magnitude)
    // Offset: 0x287006C
    static ::UnityEngine::Vector2 ClampMagnitudeSafe(::UnityEngine::Vector2 v2, float magnitude);
    // static public System.Void ClampThisMagnitudeSafe(ref UnityEngine.Vector2 v2, System.Single magnitude)
    // Offset: 0x2870120
    static void ClampThisMagnitudeSafe(ByRef<::UnityEngine::Vector2> v2, float magnitude);
    // static public UnityEngine.Vector3 ClampMagnitudeSafe(UnityEngine.Vector3 v3, System.Single magnitude)
    // Offset: 0x2870204
    static ::UnityEngine::Vector3 ClampMagnitudeSafe(::UnityEngine::Vector3 v3, float magnitude);
    // static public System.Void ClampThisMagnitudeSafe(ref UnityEngine.Vector3 v3, System.Single magnitude)
    // Offset: 0x28702E0
    static void ClampThisMagnitudeSafe(ByRef<::UnityEngine::Vector3> v3, float magnitude);
    // static public System.Single MinSafe(System.Single value, System.Single min)
    // Offset: 0x2870400
    static float MinSafe(float value, float min);
    // static public System.Void ThisMinSafe(ref System.Single value, System.Single min)
    // Offset: 0x287042C
    static void ThisMinSafe(ByRef<float> value, float min);
    // static public System.Double MinSafe(System.Double value, System.Single min)
    // Offset: 0x2870460
    static double MinSafe(double value, float min);
    // static public System.Void ThisMinSafe(ref System.Double value, System.Single min)
    // Offset: 0x2870490
    static void ThisMinSafe(ByRef<double> value, float min);
    // static public System.Single MaxSafe(System.Single value, System.Single max)
    // Offset: 0x28704C8
    static float MaxSafe(float value, float max);
    // static public System.Void ThisMaxSafe(ref System.Single value, System.Single max)
    // Offset: 0x28704F4
    static void ThisMaxSafe(ByRef<float> value, float max);
    // static public System.Double MaxSafe(System.Double value, System.Single max)
    // Offset: 0x2870528
    static double MaxSafe(double value, float max);
    // static public System.Void ThisMaxSafe(ref System.Double value, System.Single max)
    // Offset: 0x2870558
    static void ThisMaxSafe(ByRef<double> value, float max);
    // static public System.Single ClampSafe(System.Single value, System.Single min, System.Single max)
    // Offset: 0x2870590
    static float ClampSafe(float value, float min, float max);
    // static public System.Double ClampSafe(System.Double value, System.Double min, System.Double max)
    // Offset: 0x28705D8
    static double ClampSafe(double value, double min, double max);
    // static public System.Single GetFinite(System.Single value)
    // Offset: 0x2870620
    static float GetFinite(float value);
    // static public System.Double GetFinite(System.Double value)
    // Offset: 0x2870638
    static double GetFinite(double value);
    // static public UnityEngine.Matrix4x4 Matrix4X4LerpHandleNegativeScale(UnityEngine.Matrix4x4 a, UnityEngine.Matrix4x4 b, System.Single t)
    // Offset: 0x2870650
    static ::UnityEngine::Matrix4x4 Matrix4X4LerpHandleNegativeScale(::UnityEngine::Matrix4x4 a, ::UnityEngine::Matrix4x4 b, float t);
    // static public UnityEngine.Matrix4x4 LerpTo_HandleNegativeScale(UnityEngine.Matrix4x4 a, UnityEngine.Matrix4x4 b, System.Single t)
    // Offset: 0x287077C
    static ::UnityEngine::Matrix4x4 LerpTo_HandleNegativeScale(::UnityEngine::Matrix4x4 a, ::UnityEngine::Matrix4x4 b, float t);
    // static public UnityEngine.Vector3 LerpToUnclamped(in UnityEngine.Vector3 a, in UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x28707D4
    static ::UnityEngine::Vector3 LerpToUnclamped(ByRef<::UnityEngine::Vector3> a, ByRef<::UnityEngine::Vector3> b, float t);
    // static public System.Int32 GetRandomIndex(System.Collections.Generic.IReadOnlyList`1<T> self)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int GetRandomIndex(::System::Collections::Generic::IReadOnlyList_1<T>* self) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetRandomIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetRandomIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, self);
    }
    // static public T GetRandomItem(System.Collections.Generic.IReadOnlyList`1<T> self)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetRandomItem(::System::Collections::Generic::IReadOnlyList_1<T>* self) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetRandomItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetRandomItem", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, self);
    }
    // static public UnityEngine.Vector2 xx(System.Single v)
    // Offset: 0x2870804
    static ::UnityEngine::Vector2 xx(float v);
    // static public UnityEngine.Vector2 xx(UnityEngine.Vector2 v)
    // Offset: 0x287080C
    static ::UnityEngine::Vector2 xx(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector2 xy(UnityEngine.Vector2 v)
    // Offset: 0x2870814
    static ::UnityEngine::Vector2 xy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector2 yy(UnityEngine.Vector2 v)
    // Offset: 0x2870818
    static ::UnityEngine::Vector2 yy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector2 xx(UnityEngine.Vector3 v)
    // Offset: 0x2870820
    static ::UnityEngine::Vector2 xx(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 xy(UnityEngine.Vector3 v)
    // Offset: 0x2870828
    static ::UnityEngine::Vector2 xy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 xz(UnityEngine.Vector3 v)
    // Offset: 0x287082C
    static ::UnityEngine::Vector2 xz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 yy(UnityEngine.Vector3 v)
    // Offset: 0x2870834
    static ::UnityEngine::Vector2 yy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 yz(UnityEngine.Vector3 v)
    // Offset: 0x287083C
    static ::UnityEngine::Vector2 yz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 zz(UnityEngine.Vector3 v)
    // Offset: 0x2870848
    static ::UnityEngine::Vector2 zz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector2 xx(UnityEngine.Vector4 v)
    // Offset: 0x2870854
    static ::UnityEngine::Vector2 xx(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 xy(UnityEngine.Vector4 v)
    // Offset: 0x287085C
    static ::UnityEngine::Vector2 xy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 xz(UnityEngine.Vector4 v)
    // Offset: 0x2870860
    static ::UnityEngine::Vector2 xz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 xw(UnityEngine.Vector4 v)
    // Offset: 0x2870868
    static ::UnityEngine::Vector2 xw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 yy(UnityEngine.Vector4 v)
    // Offset: 0x2870870
    static ::UnityEngine::Vector2 yy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 yz(UnityEngine.Vector4 v)
    // Offset: 0x2870878
    static ::UnityEngine::Vector2 yz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 yw(UnityEngine.Vector4 v)
    // Offset: 0x2870884
    static ::UnityEngine::Vector2 yw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 zz(UnityEngine.Vector4 v)
    // Offset: 0x2870890
    static ::UnityEngine::Vector2 zz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 zw(UnityEngine.Vector4 v)
    // Offset: 0x287089C
    static ::UnityEngine::Vector2 zw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector2 ww(UnityEngine.Vector4 v)
    // Offset: 0x28708A8
    static ::UnityEngine::Vector2 ww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xxx(System.Single v)
    // Offset: 0x28708B4
    static ::UnityEngine::Vector3 xxx(float v);
    // static public UnityEngine.Vector3 xxx(UnityEngine.Vector2 v)
    // Offset: 0x28708C0
    static ::UnityEngine::Vector3 xxx(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 xxy(UnityEngine.Vector2 v)
    // Offset: 0x28708CC
    static ::UnityEngine::Vector3 xxy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 xyy(UnityEngine.Vector2 v)
    // Offset: 0x28708D8
    static ::UnityEngine::Vector3 xyy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 yyy(UnityEngine.Vector2 v)
    // Offset: 0x28708E0
    static ::UnityEngine::Vector3 yyy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 xxx(UnityEngine.Vector3 v)
    // Offset: 0x28708EC
    static ::UnityEngine::Vector3 xxx(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xxy(UnityEngine.Vector3 v)
    // Offset: 0x28708F8
    static ::UnityEngine::Vector3 xxy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xxz(UnityEngine.Vector3 v)
    // Offset: 0x2870904
    static ::UnityEngine::Vector3 xxz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xyy(UnityEngine.Vector3 v)
    // Offset: 0x287090C
    static ::UnityEngine::Vector3 xyy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xyz(UnityEngine.Vector3 v)
    // Offset: 0x2870914
    static ::UnityEngine::Vector3 xyz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xzz(UnityEngine.Vector3 v)
    // Offset: 0x2870918
    static ::UnityEngine::Vector3 xzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 yyy(UnityEngine.Vector3 v)
    // Offset: 0x2870920
    static ::UnityEngine::Vector3 yyy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 yyz(UnityEngine.Vector3 v)
    // Offset: 0x287092C
    static ::UnityEngine::Vector3 yyz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 yzz(UnityEngine.Vector3 v)
    // Offset: 0x2870934
    static ::UnityEngine::Vector3 yzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 zzz(UnityEngine.Vector3 v)
    // Offset: 0x2870940
    static ::UnityEngine::Vector3 zzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector3 xxx(UnityEngine.Vector4 v)
    // Offset: 0x287094C
    static ::UnityEngine::Vector3 xxx(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xxy(UnityEngine.Vector4 v)
    // Offset: 0x2870958
    static ::UnityEngine::Vector3 xxy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xxz(UnityEngine.Vector4 v)
    // Offset: 0x2870964
    static ::UnityEngine::Vector3 xxz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xxw(UnityEngine.Vector4 v)
    // Offset: 0x287096C
    static ::UnityEngine::Vector3 xxw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xyy(UnityEngine.Vector4 v)
    // Offset: 0x2870978
    static ::UnityEngine::Vector3 xyy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xyz(UnityEngine.Vector4 v)
    // Offset: 0x2870980
    static ::UnityEngine::Vector3 xyz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xyw(UnityEngine.Vector4 v)
    // Offset: 0x2870984
    static ::UnityEngine::Vector3 xyw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xzz(UnityEngine.Vector4 v)
    // Offset: 0x287098C
    static ::UnityEngine::Vector3 xzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xzw(UnityEngine.Vector4 v)
    // Offset: 0x2870994
    static ::UnityEngine::Vector3 xzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 xww(UnityEngine.Vector4 v)
    // Offset: 0x28709A0
    static ::UnityEngine::Vector3 xww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yyy(UnityEngine.Vector4 v)
    // Offset: 0x28709AC
    static ::UnityEngine::Vector3 yyy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yyz(UnityEngine.Vector4 v)
    // Offset: 0x28709B8
    static ::UnityEngine::Vector3 yyz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yyw(UnityEngine.Vector4 v)
    // Offset: 0x28709C0
    static ::UnityEngine::Vector3 yyw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yzz(UnityEngine.Vector4 v)
    // Offset: 0x28709CC
    static ::UnityEngine::Vector3 yzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yzw(UnityEngine.Vector4 v)
    // Offset: 0x28709D8
    static ::UnityEngine::Vector3 yzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 yww(UnityEngine.Vector4 v)
    // Offset: 0x28709E8
    static ::UnityEngine::Vector3 yww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 zzz(UnityEngine.Vector4 v)
    // Offset: 0x28709F8
    static ::UnityEngine::Vector3 zzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 zzw(UnityEngine.Vector4 v)
    // Offset: 0x2870A04
    static ::UnityEngine::Vector3 zzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 zww(UnityEngine.Vector4 v)
    // Offset: 0x2870A14
    static ::UnityEngine::Vector3 zww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector3 www(UnityEngine.Vector4 v)
    // Offset: 0x2870A24
    static ::UnityEngine::Vector3 www(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxxx(System.Single v)
    // Offset: 0x2870A34
    static ::UnityEngine::Vector4 xxxx(float v);
    // static public UnityEngine.Vector4 xxxx(UnityEngine.Vector2 v)
    // Offset: 0x2870A44
    static ::UnityEngine::Vector4 xxxx(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector4 xxxy(UnityEngine.Vector2 v)
    // Offset: 0x2870A54
    static ::UnityEngine::Vector4 xxxy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector4 xxyy(UnityEngine.Vector2 v)
    // Offset: 0x2870A64
    static ::UnityEngine::Vector4 xxyy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector4 xyyy(UnityEngine.Vector2 v)
    // Offset: 0x2870A74
    static ::UnityEngine::Vector4 xyyy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector4 yyyy(UnityEngine.Vector2 v)
    // Offset: 0x2870A80
    static ::UnityEngine::Vector4 yyyy(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector4 xxxx(UnityEngine.Vector3 v)
    // Offset: 0x2870A90
    static ::UnityEngine::Vector4 xxxx(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxxy(UnityEngine.Vector3 v)
    // Offset: 0x2870AA0
    static ::UnityEngine::Vector4 xxxy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxxz(UnityEngine.Vector3 v)
    // Offset: 0x2870AB0
    static ::UnityEngine::Vector4 xxxz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxyy(UnityEngine.Vector3 v)
    // Offset: 0x2870AC0
    static ::UnityEngine::Vector4 xxyy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxyz(UnityEngine.Vector3 v)
    // Offset: 0x2870AD0
    static ::UnityEngine::Vector4 xxyz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxzz(UnityEngine.Vector3 v)
    // Offset: 0x2870AE0
    static ::UnityEngine::Vector4 xxzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xyyy(UnityEngine.Vector3 v)
    // Offset: 0x2870AEC
    static ::UnityEngine::Vector4 xyyy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xyyz(UnityEngine.Vector3 v)
    // Offset: 0x2870AF8
    static ::UnityEngine::Vector4 xyyz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xyzz(UnityEngine.Vector3 v)
    // Offset: 0x2870B04
    static ::UnityEngine::Vector4 xyzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xzzz(UnityEngine.Vector3 v)
    // Offset: 0x2870B0C
    static ::UnityEngine::Vector4 xzzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 yyyy(UnityEngine.Vector3 v)
    // Offset: 0x2870B18
    static ::UnityEngine::Vector4 yyyy(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 yyyz(UnityEngine.Vector3 v)
    // Offset: 0x2870B28
    static ::UnityEngine::Vector4 yyyz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 yyzz(UnityEngine.Vector3 v)
    // Offset: 0x2870B38
    static ::UnityEngine::Vector4 yyzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 yzzz(UnityEngine.Vector3 v)
    // Offset: 0x2870B44
    static ::UnityEngine::Vector4 yzzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 zzzz(UnityEngine.Vector3 v)
    // Offset: 0x2870B54
    static ::UnityEngine::Vector4 zzzz(::UnityEngine::Vector3 v);
    // static public UnityEngine.Vector4 xxxx(UnityEngine.Vector4 v)
    // Offset: 0x2870B64
    static ::UnityEngine::Vector4 xxxx(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxxy(UnityEngine.Vector4 v)
    // Offset: 0x2870B74
    static ::UnityEngine::Vector4 xxxy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxxz(UnityEngine.Vector4 v)
    // Offset: 0x2870B84
    static ::UnityEngine::Vector4 xxxz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxxw(UnityEngine.Vector4 v)
    // Offset: 0x2870B94
    static ::UnityEngine::Vector4 xxxw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxyy(UnityEngine.Vector4 v)
    // Offset: 0x2870BA0
    static ::UnityEngine::Vector4 xxyy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxyz(UnityEngine.Vector4 v)
    // Offset: 0x2870BB0
    static ::UnityEngine::Vector4 xxyz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxyw(UnityEngine.Vector4 v)
    // Offset: 0x2870BC0
    static ::UnityEngine::Vector4 xxyw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxzz(UnityEngine.Vector4 v)
    // Offset: 0x2870BCC
    static ::UnityEngine::Vector4 xxzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxzw(UnityEngine.Vector4 v)
    // Offset: 0x2870BD8
    static ::UnityEngine::Vector4 xxzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xxww(UnityEngine.Vector4 v)
    // Offset: 0x2870BE0
    static ::UnityEngine::Vector4 xxww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyyy(UnityEngine.Vector4 v)
    // Offset: 0x2870BEC
    static ::UnityEngine::Vector4 xyyy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyyz(UnityEngine.Vector4 v)
    // Offset: 0x2870BF8
    static ::UnityEngine::Vector4 xyyz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyyw(UnityEngine.Vector4 v)
    // Offset: 0x2870C04
    static ::UnityEngine::Vector4 xyyw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyzz(UnityEngine.Vector4 v)
    // Offset: 0x2870C0C
    static ::UnityEngine::Vector4 xyzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyzw(UnityEngine.Vector4 v)
    // Offset: 0x2870C14
    static ::UnityEngine::Vector4 xyzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xyww(UnityEngine.Vector4 v)
    // Offset: 0x2870C18
    static ::UnityEngine::Vector4 xyww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xzzz(UnityEngine.Vector4 v)
    // Offset: 0x2870C20
    static ::UnityEngine::Vector4 xzzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xzzw(UnityEngine.Vector4 v)
    // Offset: 0x2870C2C
    static ::UnityEngine::Vector4 xzzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xzww(UnityEngine.Vector4 v)
    // Offset: 0x2870C34
    static ::UnityEngine::Vector4 xzww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 xwww(UnityEngine.Vector4 v)
    // Offset: 0x2870C40
    static ::UnityEngine::Vector4 xwww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyyy(UnityEngine.Vector4 v)
    // Offset: 0x2870C4C
    static ::UnityEngine::Vector4 yyyy(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyyz(UnityEngine.Vector4 v)
    // Offset: 0x2870C5C
    static ::UnityEngine::Vector4 yyyz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyyw(UnityEngine.Vector4 v)
    // Offset: 0x2870C6C
    static ::UnityEngine::Vector4 yyyw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyzz(UnityEngine.Vector4 v)
    // Offset: 0x2870C78
    static ::UnityEngine::Vector4 yyzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyzw(UnityEngine.Vector4 v)
    // Offset: 0x2870C84
    static ::UnityEngine::Vector4 yyzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yyww(UnityEngine.Vector4 v)
    // Offset: 0x2870C8C
    static ::UnityEngine::Vector4 yyww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yzzz(UnityEngine.Vector4 v)
    // Offset: 0x2870C98
    static ::UnityEngine::Vector4 yzzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yzzw(UnityEngine.Vector4 v)
    // Offset: 0x2870CA8
    static ::UnityEngine::Vector4 yzzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 yzww(UnityEngine.Vector4 v)
    // Offset: 0x2870CB4
    static ::UnityEngine::Vector4 yzww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 ywww(UnityEngine.Vector4 v)
    // Offset: 0x2870CC4
    static ::UnityEngine::Vector4 ywww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 zzzz(UnityEngine.Vector4 v)
    // Offset: 0x2870CD4
    static ::UnityEngine::Vector4 zzzz(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 zzzw(UnityEngine.Vector4 v)
    // Offset: 0x2870CE4
    static ::UnityEngine::Vector4 zzzw(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 zzww(UnityEngine.Vector4 v)
    // Offset: 0x2870CF0
    static ::UnityEngine::Vector4 zzww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 zwww(UnityEngine.Vector4 v)
    // Offset: 0x2870D00
    static ::UnityEngine::Vector4 zwww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 wwww(UnityEngine.Vector4 v)
    // Offset: 0x2870D10
    static ::UnityEngine::Vector4 wwww(::UnityEngine::Vector4 v);
    // static public UnityEngine.Vector4 WithX(UnityEngine.Vector4 v, System.Single x)
    // Offset: 0x2870D20
    static ::UnityEngine::Vector4 WithX(::UnityEngine::Vector4 v, float x);
    // static public UnityEngine.Vector4 WithY(UnityEngine.Vector4 v, System.Single y)
    // Offset: 0x2870D28
    static ::UnityEngine::Vector4 WithY(::UnityEngine::Vector4 v, float y);
    // static public UnityEngine.Vector4 WithZ(UnityEngine.Vector4 v, System.Single z)
    // Offset: 0x2870D30
    static ::UnityEngine::Vector4 WithZ(::UnityEngine::Vector4 v, float z);
    // static public UnityEngine.Vector4 WithW(UnityEngine.Vector4 v, System.Single w)
    // Offset: 0x2870D38
    static ::UnityEngine::Vector4 WithW(::UnityEngine::Vector4 v, float w);
    // static public UnityEngine.Vector3 WithX(UnityEngine.Vector3 v, System.Single x)
    // Offset: 0x2870D40
    static ::UnityEngine::Vector3 WithX(::UnityEngine::Vector3 v, float x);
    // static public UnityEngine.Vector3 WithY(UnityEngine.Vector3 v, System.Single y)
    // Offset: 0x2870D48
    static ::UnityEngine::Vector3 WithY(::UnityEngine::Vector3 v, float y);
    // static public UnityEngine.Vector3 WithZ(UnityEngine.Vector3 v, System.Single z)
    // Offset: 0x2870D50
    static ::UnityEngine::Vector3 WithZ(::UnityEngine::Vector3 v, float z);
    // static public UnityEngine.Vector4 WithW(UnityEngine.Vector3 v, System.Single w)
    // Offset: 0x2870D58
    static ::UnityEngine::Vector4 WithW(::UnityEngine::Vector3 v, float w);
    // static public UnityEngine.Vector2 WithX(UnityEngine.Vector2 v, System.Single x)
    // Offset: 0x2870D5C
    static ::UnityEngine::Vector2 WithX(::UnityEngine::Vector2 v, float x);
    // static public UnityEngine.Vector2 WithY(UnityEngine.Vector2 v, System.Single y)
    // Offset: 0x2870D64
    static ::UnityEngine::Vector2 WithY(::UnityEngine::Vector2 v, float y);
    // static public UnityEngine.Vector3 WithZ(UnityEngine.Vector2 v, System.Single z)
    // Offset: 0x2870D6C
    static ::UnityEngine::Vector3 WithZ(::UnityEngine::Vector2 v, float z);
    // static public System.Boolean IsShorterThan(UnityEngine.Vector2 v, System.Single len)
    // Offset: 0x2870D70
    static bool IsShorterThan(::UnityEngine::Vector2 v, float len);
    // static public System.Boolean IsShorterThan(UnityEngine.Vector2 v, UnityEngine.Vector2 v2)
    // Offset: 0x2870D8C
    static bool IsShorterThan(::UnityEngine::Vector2 v, ::UnityEngine::Vector2 v2);
    // static public System.Boolean IsShorterThan(UnityEngine.Vector3 v, System.Single len)
    // Offset: 0x2870DB0
    static bool IsShorterThan(::UnityEngine::Vector3 v, float len);
    // static public System.Boolean IsShorterThan(UnityEngine.Vector3 v, UnityEngine.Vector3 v2)
    // Offset: 0x2870DD4
    static bool IsShorterThan(::UnityEngine::Vector3 v, ::UnityEngine::Vector3 v2);
    // static public System.Boolean IsLongerThan(UnityEngine.Vector2 v, System.Single len)
    // Offset: 0x2870E08
    static bool IsLongerThan(::UnityEngine::Vector2 v, float len);
    // static public System.Boolean IsLongerThan(UnityEngine.Vector2 v, UnityEngine.Vector2 v2)
    // Offset: 0x2870E24
    static bool IsLongerThan(::UnityEngine::Vector2 v, ::UnityEngine::Vector2 v2);
    // static public System.Boolean IsLongerThan(UnityEngine.Vector3 v, System.Single len)
    // Offset: 0x2870E48
    static bool IsLongerThan(::UnityEngine::Vector3 v, float len);
    // static public System.Boolean IsLongerThan(UnityEngine.Vector3 v, UnityEngine.Vector3 v2)
    // Offset: 0x2870E6C
    static bool IsLongerThan(::UnityEngine::Vector3 v, ::UnityEngine::Vector3 v2);
    // static public UnityEngine.Vector3 GetClosestPoint(UnityEngine.Ray ray, UnityEngine.Vector3 target)
    // Offset: 0x2870EA0
    static ::UnityEngine::Vector3 GetClosestPoint(::UnityEngine::Ray ray, ::UnityEngine::Vector3 target);
    // static public System.Single GetClosestDistSqr(UnityEngine.Ray ray, UnityEngine.Vector3 target)
    // Offset: 0x2870EE8
    static float GetClosestDistSqr(::UnityEngine::Ray ray, ::UnityEngine::Vector3 target);
    // static public System.Single GetClosestDistance(UnityEngine.Ray ray, UnityEngine.Vector3 target)
    // Offset: 0x2870F50
    static float GetClosestDistance(::UnityEngine::Ray ray, ::UnityEngine::Vector3 target);
    // static public UnityEngine.Vector3 ProjectToPlane(UnityEngine.Ray ray, UnityEngine.Vector3 planeOrigin, UnityEngine.Vector3 planeNormalMustBeLength1)
    // Offset: 0x2871020
    static ::UnityEngine::Vector3 ProjectToPlane(::UnityEngine::Ray ray, ::UnityEngine::Vector3 planeOrigin, ::UnityEngine::Vector3 planeNormalMustBeLength1);
    // static public UnityEngine.Vector3 ProjectToLine(UnityEngine.Ray ray, UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd)
    // Offset: 0x2871088
    static ::UnityEngine::Vector3 ProjectToLine(::UnityEngine::Ray ray, ::UnityEngine::Vector3 lineStart, ::UnityEngine::Vector3 lineEnd);
    // static public System.Boolean IsNull(UnityEngine.Object mono)
    // Offset: 0x28712A8
    static bool IsNull(::UnityEngine::Object* mono);
    // static public System.Boolean IsNotNull(UnityEngine.Object mono)
    // Offset: 0x286494C
    static bool IsNotNull(::UnityEngine::Object* mono);
    // static public System.String GetPath(UnityEngine.Transform transform)
    // Offset: 0x2871318
    static ::StringW GetPath(::UnityEngine::Transform* transform);
    // static public System.String GetPathQ(UnityEngine.Transform transform)
    // Offset: 0x28713FC
    static ::StringW GetPathQ(::UnityEngine::Transform* transform);
    // static public System.Void GetPathQ(UnityEngine.Transform transform, ref Cysharp.Text.Utf16ValueStringBuilder sb)
    // Offset: 0x286BF84
    static void GetPathQ(::UnityEngine::Transform* transform, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> sb);
    // static public System.String GetPath(UnityEngine.Transform transform, System.Int32 maxDepth)
    // Offset: 0x28714DC
    static ::StringW GetPath(::UnityEngine::Transform* transform, int maxDepth);
    // static public System.String GetPath(UnityEngine.Transform transform, UnityEngine.Transform stopper)
    // Offset: 0x286648C
    static ::StringW GetPath(::UnityEngine::Transform* transform, ::UnityEngine::Transform* stopper);
    // static public System.String GetPath(UnityEngine.GameObject gameObject)
    // Offset: 0x28715E0
    static ::StringW GetPath(::UnityEngine::GameObject* gameObject);
    // static public System.Void GetPath(UnityEngine.GameObject gameObject, ref Cysharp.Text.Utf16ValueStringBuilder sb)
    // Offset: 0x28715FC
    static void GetPath(::UnityEngine::GameObject* gameObject, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> sb);
    // static public System.String GetPath(UnityEngine.GameObject gameObject, System.Int32 limit)
    // Offset: 0x2863DA4
    static ::StringW GetPath(::UnityEngine::GameObject* gameObject, int limit);
    // static public System.String[] GetPaths(UnityEngine.GameObject[] gobj)
    // Offset: 0x2871620
    static ::ArrayW<::StringW> GetPaths(::ArrayW<::UnityEngine::GameObject*> gobj);
    // static public System.String[] GetPaths(UnityEngine.Transform[] xform)
    // Offset: 0x28716F4
    static ::ArrayW<::StringW> GetPaths(::ArrayW<::UnityEngine::Transform*> xform);
    // static public System.Void GetRelativePath(System.String fromPath, System.String toPath, ref Cysharp.Text.Utf16ValueStringBuilder ZStringBuilder)
    // Offset: 0x28717C8
    static void GetRelativePath(::StringW fromPath, ::StringW toPath, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> ZStringBuilder);
    // static public System.String GetRelativePath(System.String fromPath, System.String toPath)
    // Offset: 0x2871B40
    static ::StringW GetRelativePath(::StringW fromPath, ::StringW toPath);
    // static public System.Void GetRelativePath(UnityEngine.Transform fromXform, UnityEngine.Transform toXform, ref Cysharp.Text.Utf16ValueStringBuilder ZStringBuilder)
    // Offset: 0x2871C50
    static void GetRelativePath(::UnityEngine::Transform* fromXform, ::UnityEngine::Transform* toXform, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> ZStringBuilder);
    // static public System.String GetRelativePath(UnityEngine.Transform fromXform, UnityEngine.Transform toXform)
    // Offset: 0x2871C8C
    static ::StringW GetRelativePath(::UnityEngine::Transform* fromXform, ::UnityEngine::Transform* toXform);
    // static public System.Void GetPathWithSiblingIndexes(UnityEngine.Transform transform, ref Cysharp.Text.Utf16ValueStringBuilder strBuilder)
    // Offset: 0x2871DB0
    static void GetPathWithSiblingIndexes(::UnityEngine::Transform* transform, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> strBuilder);
    // static public System.String GetComponentPath(UnityEngine.Component component, System.Int32 maxDepth)
    // Offset: 0x2871F0C
    static ::StringW GetComponentPath(::UnityEngine::Component* component, int maxDepth);
    // static public System.String GetComponentPath(T component, System.Int32 maxDepth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW GetComponentPath(T component, int maxDepth) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(maxDepth)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, maxDepth);
    }
    // static public System.Void GetComponentPath(T component, ref Cysharp.Text.Utf16ValueStringBuilder strBuilder, System.Int32 maxDepth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void GetComponentPath(T component, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> strBuilder, int maxDepth) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(strBuilder), ::il2cpp_utils::ExtractType(maxDepth)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, byref(strBuilder), maxDepth);
    }
    // static public System.Void GetComponentPathWithSiblingIndexes(T component, ref Cysharp.Text.Utf16ValueStringBuilder strBuilder)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void GetComponentPathWithSiblingIndexes(T component, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> strBuilder) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentPathWithSiblingIndexes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentPathWithSiblingIndexes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(strBuilder)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, byref(strBuilder));
    }
    // static public System.String GetComponentPathWithSiblingIndexes(T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW GetComponentPathWithSiblingIndexes(T component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentPathWithSiblingIndexes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentPathWithSiblingIndexes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component);
    }
    // static public T GetComponentByPath(UnityEngine.GameObject root, System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetComponentByPath(::UnityEngine::GameObject* root, ::StringW path) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::GetComponentByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "GetComponentByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, root, path);
    }
    // static public System.Int32 GetDepth(UnityEngine.Transform xform)
    // Offset: 0x2872014
    static int GetDepth(::UnityEngine::Transform* xform);
    // static public System.String GetPathWithSiblingIndexes(UnityEngine.Transform transform)
    // Offset: 0x28720A8
    static ::StringW GetPathWithSiblingIndexes(::UnityEngine::Transform* transform);
    // static public System.Void GetPathWithSiblingIndexes(UnityEngine.GameObject gameObject, ref Cysharp.Text.Utf16ValueStringBuilder stringBuilder)
    // Offset: 0x2872188
    static void GetPathWithSiblingIndexes(::UnityEngine::GameObject* gameObject, ByRef<::Cysharp::Text::Utf16ValueStringBuilder> stringBuilder);
    // static public System.String GetPathWithSiblingIndexes(UnityEngine.GameObject gameObject)
    // Offset: 0x28721AC
    static ::StringW GetPathWithSiblingIndexes(::UnityEngine::GameObject* gameObject);
    // static public System.Boolean TryFindByExactPath(System.String path, out UnityEngine.Transform result, UnityEngine.FindObjectsInactive findObjectsInactive)
    // Offset: 0x28721C8
    static bool TryFindByExactPath(::StringW path, ByRef<::UnityEngine::Transform*> result, ::UnityEngine::FindObjectsInactive findObjectsInactive);
    // static public System.Boolean TryFindByExactPath(UnityEngine.SceneManagement.Scene scene, System.String path, out UnityEngine.Transform result)
    // Offset: 0x28723B8
    static bool TryFindByExactPath(::UnityEngine::SceneManagement::Scene scene, ::StringW path, ByRef<::UnityEngine::Transform*> result);
    // static private System.Boolean TryFindByExactPath(UnityEngine.SceneManagement.Scene scene, System.Collections.Generic.IReadOnlyList`1<System.String> splitPath, out UnityEngine.Transform result)
    // Offset: 0x287245C
    static bool TryFindByExactPath(::UnityEngine::SceneManagement::Scene scene, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* splitPath, ByRef<::UnityEngine::Transform*> result);
    // static public System.Boolean TryFindByExactPath(UnityEngine.Transform rootXform, System.String path, out UnityEngine.Transform result)
    // Offset: 0x2872974
    static bool TryFindByExactPath(::UnityEngine::Transform* rootXform, ::StringW path, ByRef<::UnityEngine::Transform*> result);
    // static public System.Boolean TryFindByExactPath(UnityEngine.Transform rootXform, System.Collections.Generic.IReadOnlyList`1<System.String> splitPath, out UnityEngine.Transform result)
    // Offset: 0x2872D08
    static bool TryFindByExactPath(::UnityEngine::Transform* rootXform, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* splitPath, ByRef<::UnityEngine::Transform*> result);
    // static private System.Boolean TryFindByExactPath_Internal(UnityEngine.Transform current, System.Collections.Generic.IReadOnlyList`1<System.String> splitPath, System.Int32 index, out UnityEngine.Transform result)
    // Offset: 0x2872518
    static bool TryFindByExactPath_Internal(::UnityEngine::Transform* current, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* splitPath, int index, ByRef<::UnityEngine::Transform*> result);
    // static public System.Boolean TryFindByPath(System.String globPath, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x2873028
    static bool TryFindByPath(::StringW globPath, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static public System.Boolean TryFindByPath(UnityEngine.SceneManagement.Scene scene, System.String globPath, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x2875058
    static bool TryFindByPath(::UnityEngine::SceneManagement::Scene scene, ::StringW globPath, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static private System.Boolean TryFindByPath(UnityEngine.SceneManagement.Scene scene, System.Collections.Generic.IReadOnlyList`1<System.String> pathPartsRegex, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x28750F8
    static bool TryFindByPath(::UnityEngine::SceneManagement::Scene scene, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* pathPartsRegex, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static public System.Boolean TryFindByPath(UnityEngine.Transform rootXform, System.String globPath, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x28751C4
    static bool TryFindByPath(::UnityEngine::Transform* rootXform, ::StringW globPath, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static public System.Boolean TryFindByPath(UnityEngine.Transform rootXform, System.Collections.Generic.IReadOnlyList`1<System.String> pathPartsRegex, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x2875350
    static bool TryFindByPath(::UnityEngine::Transform* rootXform, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* pathPartsRegex, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static private System.Boolean _TryFindByPath(UnityEngine.Transform current, System.Collections.Generic.IReadOnlyList`1<System.String> pathPartsRegex, System.Int32 index, out UnityEngine.Transform result, System.Boolean caseSensitive, System.Boolean isAtSceneLevel)
    // Offset: 0x2873294
    static bool _TryFindByPath(::UnityEngine::Transform* current, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* pathPartsRegex, int index, ByRef<::UnityEngine::Transform*> result, bool caseSensitive, bool isAtSceneLevel);
    // static private System.Boolean _TryBreadthFirstSearchNames(UnityEngine.Transform root, System.String regexPattern, out UnityEngine.Transform result, System.Boolean caseSensitive)
    // Offset: 0x2875368
    static bool _TryBreadthFirstSearchNames(::UnityEngine::Transform* root, ::StringW regexPattern, ByRef<::UnityEngine::Transform*> result, bool caseSensitive);
    // static public T[] FindComponentsByExactPath(System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByExactPath(::StringW path) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, path);
    }
    // static public T[] FindComponentsByExactPath(UnityEngine.SceneManagement.Scene scene, System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByExactPath(::UnityEngine::SceneManagement::Scene scene, ::StringW path) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, path);
    }
    // static private T[] FindComponentsByExactPath(UnityEngine.SceneManagement.Scene scene, System.String[] splitPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByExactPath(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> splitPath) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(splitPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, splitPath);
    }
    // static public T[] FindComponentsByExactPath(UnityEngine.Transform rootXform, System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByExactPath(::UnityEngine::Transform* rootXform, ::StringW path) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootXform), ::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, rootXform, path);
    }
    // static public T[] FindComponentsByExactPath(UnityEngine.Transform rootXform, System.String[] splitPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByExactPath(::UnityEngine::Transform* rootXform, ::ArrayW<::StringW> splitPath) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootXform), ::il2cpp_utils::ExtractType(splitPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, rootXform, splitPath);
    }
    // static private System.Void _FindComponentsByExactPath(UnityEngine.Transform current, System.String[] splitPath, System.Int32 index, System.Collections.Generic.List`1<T> components)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void _FindComponentsByExactPath(::UnityEngine::Transform* current, ::ArrayW<::StringW> splitPath, int index, ::System::Collections::Generic::List_1<T>* components) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::_FindComponentsByExactPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "_FindComponentsByExactPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(splitPath), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(components)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, current, splitPath, index, components);
    }
    // static public T[] FindComponentsByPathInLoadedScenes(System.String wildcardPath, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByPathInLoadedScenes(::StringW wildcardPath, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByPathInLoadedScenes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByPathInLoadedScenes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wildcardPath), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, wildcardPath, caseSensitive);
    }
    // static public T[] FindComponentsByPath(UnityEngine.SceneManagement.Scene scene, System.String globPath, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByPath(::UnityEngine::SceneManagement::Scene scene, ::StringW globPath, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(globPath), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, globPath, caseSensitive);
    }
    // static private T[] FindComponentsByPath(UnityEngine.SceneManagement.Scene scene, System.String[] pathPartsRegex, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByPath(::UnityEngine::SceneManagement::Scene scene, ::ArrayW<::StringW> pathPartsRegex, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(pathPartsRegex), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, scene, pathPartsRegex, caseSensitive);
    }
    // static public T[] FindComponentsByPath(UnityEngine.Transform rootXform, System.String globPath, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByPath(::UnityEngine::Transform* rootXform, ::StringW globPath, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootXform), ::il2cpp_utils::ExtractType(globPath), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, rootXform, globPath, caseSensitive);
    }
    // static public T[] FindComponentsByPath(UnityEngine.Transform rootXform, System.String[] pathPartsRegex, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindComponentsByPath(::UnityEngine::Transform* rootXform, ::ArrayW<::StringW> pathPartsRegex, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::FindComponentsByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "FindComponentsByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootXform), ::il2cpp_utils::ExtractType(pathPartsRegex), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, rootXform, pathPartsRegex, caseSensitive);
    }
    // static public System.Void _FindComponentsByPath(UnityEngine.Transform current, System.String[] pathPartsRegex, System.Collections.Generic.List`1<T> components, System.Boolean caseSensitive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void _FindComponentsByPath(::UnityEngine::Transform* current, ::ArrayW<::StringW> pathPartsRegex, ::System::Collections::Generic::List_1<T>* components, bool caseSensitive) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::_FindComponentsByPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "_FindComponentsByPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(pathPartsRegex), ::il2cpp_utils::ExtractType(components), ::il2cpp_utils::ExtractType(caseSensitive)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, current, pathPartsRegex, components, caseSensitive);
    }
    // static private System.Boolean _TryFindAllByPath(UnityEngine.Transform current, System.Collections.Generic.IReadOnlyList`1<System.String> pathPartsRegex, System.Int32 index, System.Collections.Generic.List`1<UnityEngine.Transform> results, System.Boolean caseSensitive, System.Boolean isAtSceneLevel)
    // Offset: 0x28759E0
    static bool _TryFindAllByPath(::UnityEngine::Transform* current, ::System::Collections::Generic::IReadOnlyList_1<::StringW>* pathPartsRegex, int index, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* results, bool caseSensitive, bool isAtSceneLevel);
    // static public System.String[] _GlobPathToPathPartsRegex(System.String path)
    // Offset: 0x2873060
    static ::ArrayW<::StringW> _GlobPathToPathPartsRegex(::StringW path);
    // static private System.String _GlobPathPartToRegex(System.String pattern)
    // Offset: 0x2876750
    static ::StringW _GlobPathPartToRegex(::StringW pattern);
    // static System.Void <GetComponentsInChildrenUntil>g__GetRecursive|6_0(UnityEngine.Transform currentTransform, ref System.Collections.Generic.List`1<T> components, ref GorillaExtensions.GTExt/<>c__DisplayClass6_0`4<T,TStop1,TStop2,TStop3> )
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class TStop1, class TStop2, class TStop3>
    static void $GetComponentsInChildrenUntil$g__GetRecursive_6_0(::UnityEngine::Transform* currentTransform, ByRef<::System::Collections::Generic::List_1<T>*> components, ByRef<::GorillaExtensions::GTExt::$$c__DisplayClass6_0_4<T, TStop1, TStop2, TStop3>> param_2) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop1, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop2, ::UnityEngine::Component*>);
      static_assert(std::is_convertible_v<TStop3, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaExtensions::GTExt::<GetComponentsInChildrenUntil>g__GetRecursive|6_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("GorillaExtensions", "GTExt", "<GetComponentsInChildrenUntil>g__GetRecursive|6_0", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTransform), ::il2cpp_utils::ExtractType(components), ::il2cpp_utils::ExtractType(param_2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TStop3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, currentTransform, byref(components), byref(param_2));
    }
  }; // GorillaExtensions.GTExt
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::GorillaExtensions::GTExt::$$c__DisplayClass6_0_4, "GorillaExtensions", "GTExt/<>c__DisplayClass6_0`4");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentInHierarchy
// Il2CppName: GetComponentInHierarchy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsInHierarchy
// Il2CppName: GetComponentsInHierarchy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsInHierarchy
// Il2CppName: GetComponentsInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Object*>* (*)(::UnityEngine::SceneManagement::Scene, ::System::Type*, bool, int)>(&GorillaExtensions::GTExt::GetComponentsInHierarchy)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetComponentsInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, type, includeInactive, capacity});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetGameObjectsInHierarchy
// Il2CppName: GetGameObjectsInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (*)(::UnityEngine::SceneManagement::Scene, bool, int)>(&GorillaExtensions::GTExt::GetGameObjectsInHierarchy)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetGameObjectsInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, includeInactive, capacity});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsInHierarchyUntil
// Il2CppName: GetComponentsInHierarchyUntil
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsInHierarchyUntil
// Il2CppName: GetComponentsInHierarchyUntil
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsInChildrenUntil
// Il2CppName: GetComponentsInChildrenUntil
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentWithRegex
// Il2CppName: GetComponentWithRegex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex_Internal
// Il2CppName: GetComponentsWithRegex_Internal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex_Internal
// Il2CppName: GetComponentsWithRegex_Internal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex
// Il2CppName: GetComponentsWithRegex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex
// Il2CppName: GetComponentsWithRegex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetGameObjectsWithRegex
// Il2CppName: GetGameObjectsWithRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (*)(::UnityEngine::SceneManagement::Scene, ::StringW, bool, int)>(&GorillaExtensions::GTExt::GetGameObjectsWithRegex)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* regexString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetGameObjectsWithRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, regexString, includeInactive, capacity});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex_Internal
// Il2CppName: GetComponentsWithRegex_Internal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex
// Il2CppName: GetComponentsWithRegex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsWithRegex
// Il2CppName: GetComponentsWithRegex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetGameObjectsWithRegex
// Il2CppName: GetGameObjectsWithRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (*)(::UnityEngine::SceneManagement::Scene, ::ArrayW<::StringW>, bool, int)>(&GorillaExtensions::GTExt::GetGameObjectsWithRegex)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* regexStrings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* maxCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetGameObjectsWithRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, regexStrings, includeInactive, maxCount});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetGameObjectsWithRegex
// Il2CppName: GetGameObjectsWithRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (*)(::UnityEngine::SceneManagement::Scene, ::ArrayW<::StringW>, ::ArrayW<::StringW>, bool, int)>(&GorillaExtensions::GTExt::GetGameObjectsWithRegex)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* regexStrings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* excludeRegexStrings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* maxCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetGameObjectsWithRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, regexStrings, excludeRegexStrings, includeInactive, maxCount});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentsByName
// Il2CppName: GetComponentsByName
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentByName
// Il2CppName: GetComponentByName
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetGameObjectsInHierarchy
// Il2CppName: GetGameObjectsInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (*)(::UnityEngine::SceneManagement::Scene, ::StringW, bool)>(&GorillaExtensions::GTExt::GetGameObjectsInHierarchy)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* includeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetGameObjectsInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, name, includeInactive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLossyScale
// Il2CppName: SetLossyScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::SetLossyScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLossyScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, scale});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ForEachBackwards
// Il2CppName: ForEachBackwards
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SafeForEachBackwards
// Il2CppName: SafeForEachBackwards
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::CompareAs255Unclamped
// Il2CppName: CompareAs255Unclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Color, ::UnityEngine::Color)>(&GorillaExtensions::GTExt::CompareAs255Unclamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "CompareAs255Unclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::QuaternionFromToVec
// Il2CppName: QuaternionFromToVec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::QuaternionFromToVec)> {
  static const MethodInfo* get() {
    static auto* toVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fromVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "QuaternionFromToVec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toVector, fromVector});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Position
// Il2CppName: Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::Position)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::Scale)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalRelativeToParentMatrixWithParityAxis
// Il2CppName: SetLocalRelativeToParentMatrixWithParityAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Matrix4x4>, ::GorillaExtensions::GTExt::ParityOptions)>(&GorillaExtensions::GTExt::SetLocalRelativeToParentMatrixWithParityAxis)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* parity = &::il2cpp_utils::GetClassFromName("GorillaExtensions", "GTExt/ParityOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalRelativeToParentMatrixWithParityAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, parity});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::MultiplyInPlaceWith
// Il2CppName: MultiplyInPlaceWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::MultiplyInPlaceWith)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "MultiplyInPlaceWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::DecomposeWithXFlip
// Il2CppName: DecomposeWithXFlip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::DecomposeWithXFlip)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* transformation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "DecomposeWithXFlip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, transformation, rotation, scale});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalMatrixRelativeToParentWithXParity
// Il2CppName: SetLocalMatrixRelativeToParentWithXParity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Matrix4x4>)>(&GorillaExtensions::GTExt::SetLocalMatrixRelativeToParentWithXParity)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* matrix4X4 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalMatrixRelativeToParentWithXParity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, matrix4X4});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Matrix4x4Scale
// Il2CppName: Matrix4x4Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::Matrix4x4Scale)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Matrix4x4Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetColumnNoCopy
// Il2CppName: GetColumnNoCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<int>)>(&GorillaExtensions::GTExt::GetColumnNoCopy)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetColumnNoCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, index});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::RotationWithScaleContext
// Il2CppName: RotationWithScaleContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::RotationWithScaleContext)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "RotationWithScaleContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, scale});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Rotation
// Il2CppName: Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(ByRef<::UnityEngine::Matrix4x4>)>(&GorillaExtensions::GTExt::Rotation)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::x0y
// Il2CppName: x0y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::x0y)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "x0y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::x0y
// Il2CppName: x0y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::x0y)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "x0y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xy0
// Il2CppName: xy0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xy0)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xy0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xy0
// Il2CppName: xy0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xy0)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xy0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xz0
// Il2CppName: xz0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xz0)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xz0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::x0z
// Il2CppName: x0z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::x0z)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "x0z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::LocalMatrixRelativeToParentNoScale
// Il2CppName: LocalMatrixRelativeToParentNoScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::LocalMatrixRelativeToParentNoScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "LocalMatrixRelativeToParentNoScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::LocalMatrixRelativeToParentWithScale
// Il2CppName: LocalMatrixRelativeToParentWithScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::LocalMatrixRelativeToParentWithScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "LocalMatrixRelativeToParentWithScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalMatrixRelativeToParent
// Il2CppName: SetLocalMatrixRelativeToParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::SetLocalMatrixRelativeToParent)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalMatrixRelativeToParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, matrix});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalMatrixRelativeToParentNoScale
// Il2CppName: SetLocalMatrixRelativeToParentNoScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::SetLocalMatrixRelativeToParentNoScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalMatrixRelativeToParentNoScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, matrix});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalToWorldMatrixNoScale
// Il2CppName: SetLocalToWorldMatrixNoScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::SetLocalToWorldMatrixNoScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalToWorldMatrixNoScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, matrix});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::localToWorldNoScale
// Il2CppName: localToWorldNoScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::localToWorldNoScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "localToWorldNoScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetLocalToWorldMatrixWithScale
// Il2CppName: SetLocalToWorldMatrixWithScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Matrix4x4)>(&GorillaExtensions::GTExt::SetLocalToWorldMatrixWithScale)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetLocalToWorldMatrixWithScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, matrix});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Matrix4X4LerpNoScale
// Il2CppName: Matrix4X4LerpNoScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, float)>(&GorillaExtensions::GTExt::Matrix4X4LerpNoScale)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Matrix4X4LerpNoScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::LerpTo
// Il2CppName: LerpTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, float)>(&GorillaExtensions::GTExt::LerpTo)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "LerpTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsNaN
// Il2CppName: IsNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::IsNaN)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsNan
// Il2CppName: IsNan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Quaternion>)>(&GorillaExtensions::GTExt::IsNan)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsNan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsInfinity
// Il2CppName: IsInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::IsInfinity)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsInfinity
// Il2CppName: IsInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Quaternion>)>(&GorillaExtensions::GTExt::IsInfinity)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ValuesInRange
// Il2CppName: ValuesInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&GorillaExtensions::GTExt::ValuesInRange)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* maxVal = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ValuesInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, maxVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Vector3>, ByRef<float>)>(&GorillaExtensions::GTExt::IsValid)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* maxVal = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, maxVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetValidWithFallback
// Il2CppName: GetValidWithFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::GetValidWithFallback)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* safeVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetValidWithFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, safeVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetValueSafe
// Il2CppName: SetValueSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GTExt::SetValueSafe)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* newVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetValueSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, newVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Quaternion>)>(&GorillaExtensions::GTExt::IsValid)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetValidWithFallback
// Il2CppName: GetValidWithFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&GorillaExtensions::GTExt::GetValidWithFallback)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* safeVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetValidWithFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q, safeVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::SetValueSafe
// Il2CppName: SetValueSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&GorillaExtensions::GTExt::SetValueSafe)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* newVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "SetValueSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q, newVal});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampMagnitudeSafe
// Il2CppName: ClampMagnitudeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::ClampMagnitudeSafe)> {
  static const MethodInfo* get() {
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampMagnitudeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v2, magnitude});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampThisMagnitudeSafe
// Il2CppName: ClampThisMagnitudeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector2>, float)>(&GorillaExtensions::GTExt::ClampThisMagnitudeSafe)> {
  static const MethodInfo* get() {
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampThisMagnitudeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v2, magnitude});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampMagnitudeSafe
// Il2CppName: ClampMagnitudeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::ClampMagnitudeSafe)> {
  static const MethodInfo* get() {
    static auto* v3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampMagnitudeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v3, magnitude});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampThisMagnitudeSafe
// Il2CppName: ClampThisMagnitudeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, float)>(&GorillaExtensions::GTExt::ClampThisMagnitudeSafe)> {
  static const MethodInfo* get() {
    static auto* v3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampThisMagnitudeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v3, magnitude});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::MinSafe
// Il2CppName: MinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GorillaExtensions::GTExt::MinSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "MinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ThisMinSafe
// Il2CppName: ThisMinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, float)>(&GorillaExtensions::GTExt::ThisMinSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ThisMinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::MinSafe
// Il2CppName: MinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, float)>(&GorillaExtensions::GTExt::MinSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "MinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ThisMinSafe
// Il2CppName: ThisMinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<double>, float)>(&GorillaExtensions::GTExt::ThisMinSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ThisMinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::MaxSafe
// Il2CppName: MaxSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GorillaExtensions::GTExt::MaxSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "MaxSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ThisMaxSafe
// Il2CppName: ThisMaxSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, float)>(&GorillaExtensions::GTExt::ThisMaxSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ThisMaxSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::MaxSafe
// Il2CppName: MaxSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, float)>(&GorillaExtensions::GTExt::MaxSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "MaxSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ThisMaxSafe
// Il2CppName: ThisMaxSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<double>, float)>(&GorillaExtensions::GTExt::ThisMaxSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ThisMaxSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampSafe
// Il2CppName: ClampSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GorillaExtensions::GTExt::ClampSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ClampSafe
// Il2CppName: ClampSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&GorillaExtensions::GTExt::ClampSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ClampSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min, max});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetFinite
// Il2CppName: GetFinite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&GorillaExtensions::GTExt::GetFinite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetFinite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetFinite
// Il2CppName: GetFinite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&GorillaExtensions::GTExt::GetFinite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetFinite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::Matrix4X4LerpHandleNegativeScale
// Il2CppName: Matrix4X4LerpHandleNegativeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, float)>(&GorillaExtensions::GTExt::Matrix4X4LerpHandleNegativeScale)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "Matrix4X4LerpHandleNegativeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::LerpTo_HandleNegativeScale
// Il2CppName: LerpTo_HandleNegativeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, float)>(&GorillaExtensions::GTExt::LerpTo_HandleNegativeScale)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "LerpTo_HandleNegativeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::LerpToUnclamped
// Il2CppName: LerpToUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, float)>(&GorillaExtensions::GTExt::LerpToUnclamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "LerpToUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRandomIndex
// Il2CppName: GetRandomIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRandomItem
// Il2CppName: GetRandomItem
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xx
// Il2CppName: xx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(float)>(&GorillaExtensions::GTExt::xx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xx
// Il2CppName: xx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xy
// Il2CppName: xy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yy
// Il2CppName: yy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::yy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xx
// Il2CppName: xx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xy
// Il2CppName: xy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xz
// Il2CppName: xz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yy
// Il2CppName: yy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yz
// Il2CppName: yz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zz
// Il2CppName: zz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::zz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xx
// Il2CppName: xx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xy
// Il2CppName: xy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xz
// Il2CppName: xz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xw
// Il2CppName: xw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yy
// Il2CppName: yy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yz
// Il2CppName: yz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yw
// Il2CppName: yw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zz
// Il2CppName: zz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zw
// Il2CppName: zw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ww
// Il2CppName: ww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::ww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxx
// Il2CppName: xxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float)>(&GorillaExtensions::GTExt::xxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxx
// Il2CppName: xxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxy
// Il2CppName: xxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyy
// Il2CppName: xyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyy
// Il2CppName: yyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::yyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxx
// Il2CppName: xxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxy
// Il2CppName: xxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxz
// Il2CppName: xxz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyy
// Il2CppName: xyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyz
// Il2CppName: xyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzz
// Il2CppName: xzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyy
// Il2CppName: yyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyz
// Il2CppName: yyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzz
// Il2CppName: yzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzz
// Il2CppName: zzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::zzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxx
// Il2CppName: xxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxy
// Il2CppName: xxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxz
// Il2CppName: xxz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxw
// Il2CppName: xxw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyy
// Il2CppName: xyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyz
// Il2CppName: xyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyw
// Il2CppName: xyw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzz
// Il2CppName: xzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzw
// Il2CppName: xzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xww
// Il2CppName: xww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyy
// Il2CppName: yyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyz
// Il2CppName: yyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyw
// Il2CppName: yyw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzz
// Il2CppName: yzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzw
// Il2CppName: yzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yww
// Il2CppName: yww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzz
// Il2CppName: zzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzw
// Il2CppName: zzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zww
// Il2CppName: zww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::www
// Il2CppName: www
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::www)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "www", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxx
// Il2CppName: xxxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(float)>(&GorillaExtensions::GTExt::xxxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxx
// Il2CppName: xxxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xxxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxy
// Il2CppName: xxxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xxxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyy
// Il2CppName: xxyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xxyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyy
// Il2CppName: xyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::xyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyy
// Il2CppName: yyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::yyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxx
// Il2CppName: xxxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxy
// Il2CppName: xxxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxz
// Il2CppName: xxxz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxxz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyy
// Il2CppName: xxyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyz
// Il2CppName: xxyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxzz
// Il2CppName: xxzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xxzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyy
// Il2CppName: xyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyz
// Il2CppName: xyyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xyyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyzz
// Il2CppName: xyzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xyzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzzz
// Il2CppName: xzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::xzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyy
// Il2CppName: yyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyz
// Il2CppName: yyyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yyyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyzz
// Il2CppName: yyzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yyzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzzz
// Il2CppName: yzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::yzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzzz
// Il2CppName: zzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::zzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxx
// Il2CppName: xxxx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxxx)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxy
// Il2CppName: xxxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxxy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxz
// Il2CppName: xxxz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxxz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxxw
// Il2CppName: xxxw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxxw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxxw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyy
// Il2CppName: xxyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyz
// Il2CppName: xxyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxyw
// Il2CppName: xxyw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxyw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxyw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxzz
// Il2CppName: xxzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxzw
// Il2CppName: xxzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xxww
// Il2CppName: xxww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xxww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xxww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyy
// Il2CppName: xyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyz
// Il2CppName: xyyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyyw
// Il2CppName: xyyw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyyw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyyw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyzz
// Il2CppName: xyzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyzw
// Il2CppName: xyzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xyww
// Il2CppName: xyww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xyww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xyww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzzz
// Il2CppName: xzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzzw
// Il2CppName: xzzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xzzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xzww
// Il2CppName: xzww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xzww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xzww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::xwww
// Il2CppName: xwww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::xwww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "xwww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyy
// Il2CppName: yyyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyyy)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyz
// Il2CppName: yyyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyyz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyyw
// Il2CppName: yyyw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyyw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyyw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyzz
// Il2CppName: yyzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyzw
// Il2CppName: yyzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yyww
// Il2CppName: yyww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yyww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yyww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzzz
// Il2CppName: yzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzzw
// Il2CppName: yzzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yzzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::yzww
// Il2CppName: yzww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::yzww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "yzww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ywww
// Il2CppName: ywww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::ywww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ywww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzzz
// Il2CppName: zzzz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zzzz)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzzz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzzw
// Il2CppName: zzzw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zzzw)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzzw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zzww
// Il2CppName: zzww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zzww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zzww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::zwww
// Il2CppName: zwww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::zwww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "zwww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::wwww
// Il2CppName: wwww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4)>(&GorillaExtensions::GTExt::wwww)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "wwww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithX
// Il2CppName: WithX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, float)>(&GorillaExtensions::GTExt::WithX)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, x});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithY
// Il2CppName: WithY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, float)>(&GorillaExtensions::GTExt::WithY)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, y});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithZ
// Il2CppName: WithZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, float)>(&GorillaExtensions::GTExt::WithZ)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, z});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithW
// Il2CppName: WithW
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector4, float)>(&GorillaExtensions::GTExt::WithW)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithW", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, w});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithX
// Il2CppName: WithX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::WithX)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, x});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithY
// Il2CppName: WithY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::WithY)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, y});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithZ
// Il2CppName: WithZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::WithZ)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, z});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithW
// Il2CppName: WithW
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::WithW)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithW", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, w});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithX
// Il2CppName: WithX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::WithX)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, x});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithY
// Il2CppName: WithY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::WithY)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, y});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::WithZ
// Il2CppName: WithZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::WithZ)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "WithZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, z});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsShorterThan
// Il2CppName: IsShorterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::IsShorterThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsShorterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, len});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsShorterThan
// Il2CppName: IsShorterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::IsShorterThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsShorterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, v2});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsShorterThan
// Il2CppName: IsShorterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::IsShorterThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsShorterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, len});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsShorterThan
// Il2CppName: IsShorterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::IsShorterThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsShorterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, v2});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsLongerThan
// Il2CppName: IsLongerThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, float)>(&GorillaExtensions::GTExt::IsLongerThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsLongerThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, len});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsLongerThan
// Il2CppName: IsLongerThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&GorillaExtensions::GTExt::IsLongerThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsLongerThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, v2});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsLongerThan
// Il2CppName: IsLongerThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, float)>(&GorillaExtensions::GTExt::IsLongerThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsLongerThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, len});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsLongerThan
// Il2CppName: IsLongerThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::IsLongerThan)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsLongerThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, v2});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetClosestPoint
// Il2CppName: GetClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Ray, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::GetClosestPoint)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, target});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetClosestDistSqr
// Il2CppName: GetClosestDistSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Ray, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::GetClosestDistSqr)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetClosestDistSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, target});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetClosestDistance
// Il2CppName: GetClosestDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Ray, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::GetClosestDistance)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetClosestDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, target});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ProjectToPlane
// Il2CppName: ProjectToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Ray, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::ProjectToPlane)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* planeOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* planeNormalMustBeLength1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ProjectToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, planeOrigin, planeNormalMustBeLength1});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::ProjectToLine
// Il2CppName: ProjectToLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Ray, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaExtensions::GTExt::ProjectToLine)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* lineStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineEnd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "ProjectToLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, lineStart, lineEnd});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Object*)>(&GorillaExtensions::GTExt::IsNull)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::IsNotNull
// Il2CppName: IsNotNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Object*)>(&GorillaExtensions::GTExt::IsNotNull)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "IsNotNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathQ
// Il2CppName: GetPathQ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetPathQ)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathQ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathQ
// Il2CppName: GetPathQ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetPathQ)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* sb = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathQ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, sb});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*, int)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* maxDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, maxDepth});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* stopper = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, stopper});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::GameObject*)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* sb = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, sb});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::GameObject*, int)>(&GorillaExtensions::GTExt::GetPath)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* limit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, limit});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPaths
// Il2CppName: GetPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::ArrayW<::UnityEngine::GameObject*>)>(&GorillaExtensions::GTExt::GetPaths)> {
  static const MethodInfo* get() {
    static auto* gobj = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gobj});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPaths
// Il2CppName: GetPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::ArrayW<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::GetPaths)> {
  static const MethodInfo* get() {
    static auto* xform = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRelativePath
// Il2CppName: GetRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetRelativePath)> {
  static const MethodInfo* get() {
    static auto* fromPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* toPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ZStringBuilder = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPath, toPath, ZStringBuilder});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRelativePath
// Il2CppName: GetRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&GorillaExtensions::GTExt::GetRelativePath)> {
  static const MethodInfo* get() {
    static auto* fromPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* toPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPath, toPath});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRelativePath
// Il2CppName: GetRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetRelativePath)> {
  static const MethodInfo* get() {
    static auto* fromXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* toXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ZStringBuilder = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromXform, toXform, ZStringBuilder});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetRelativePath
// Il2CppName: GetRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetRelativePath)> {
  static const MethodInfo* get() {
    static auto* fromXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* toXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromXform, toXform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathWithSiblingIndexes
// Il2CppName: GetPathWithSiblingIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetPathWithSiblingIndexes)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* strBuilder = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathWithSiblingIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, strBuilder});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentPath
// Il2CppName: GetComponentPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Component*, int)>(&GorillaExtensions::GTExt::GetComponentPath)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* maxDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetComponentPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, maxDepth});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentPath
// Il2CppName: GetComponentPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentPath
// Il2CppName: GetComponentPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentPathWithSiblingIndexes
// Il2CppName: GetComponentPathWithSiblingIndexes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentPathWithSiblingIndexes
// Il2CppName: GetComponentPathWithSiblingIndexes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetComponentByPath
// Il2CppName: GetComponentByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetDepth
// Il2CppName: GetDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetDepth)> {
  static const MethodInfo* get() {
    static auto* xform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathWithSiblingIndexes
// Il2CppName: GetPathWithSiblingIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Transform*)>(&GorillaExtensions::GTExt::GetPathWithSiblingIndexes)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathWithSiblingIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathWithSiblingIndexes
// Il2CppName: GetPathWithSiblingIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ByRef<::Cysharp::Text::Utf16ValueStringBuilder>)>(&GorillaExtensions::GTExt::GetPathWithSiblingIndexes)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* stringBuilder = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathWithSiblingIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, stringBuilder});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::GetPathWithSiblingIndexes
// Il2CppName: GetPathWithSiblingIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::GameObject*)>(&GorillaExtensions::GTExt::GetPathWithSiblingIndexes)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "GetPathWithSiblingIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath
// Il2CppName: TryFindByExactPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::UnityEngine::Transform*>, ::UnityEngine::FindObjectsInactive)>(&GorillaExtensions::GTExt::TryFindByExactPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* findObjectsInactive = &::il2cpp_utils::GetClassFromName("UnityEngine", "FindObjectsInactive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, result, findObjectsInactive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath
// Il2CppName: TryFindByExactPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::SceneManagement::Scene, ::StringW, ByRef<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::TryFindByExactPath)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, path, result});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath
// Il2CppName: TryFindByExactPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::SceneManagement::Scene, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, ByRef<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::TryFindByExactPath)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* splitPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, splitPath, result});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath
// Il2CppName: TryFindByExactPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::StringW, ByRef<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::TryFindByExactPath)> {
  static const MethodInfo* get() {
    static auto* rootXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootXform, path, result});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath
// Il2CppName: TryFindByExactPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, ByRef<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::TryFindByExactPath)> {
  static const MethodInfo* get() {
    static auto* rootXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* splitPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootXform, splitPath, result});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByExactPath_Internal
// Il2CppName: TryFindByExactPath_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, int, ByRef<::UnityEngine::Transform*>)>(&GorillaExtensions::GTExt::TryFindByExactPath_Internal)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* splitPath = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByExactPath_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, splitPath, index, result});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByPath
// Il2CppName: TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* globPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{globPath, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByPath
// Il2CppName: TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::SceneManagement::Scene, ::StringW, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* globPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, globPath, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByPath
// Il2CppName: TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::SceneManagement::Scene, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* pathPartsRegex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, pathPartsRegex, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByPath
// Il2CppName: TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::StringW, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* rootXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* globPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootXform, globPath, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::TryFindByPath
// Il2CppName: TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* rootXform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* pathPartsRegex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootXform, pathPartsRegex, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_TryFindByPath
// Il2CppName: _TryFindByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, int, ByRef<::UnityEngine::Transform*>, bool, bool)>(&GorillaExtensions::GTExt::_TryFindByPath)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* pathPartsRegex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isAtSceneLevel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "_TryFindByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, pathPartsRegex, index, result, caseSensitive, isAtSceneLevel});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_TryBreadthFirstSearchNames
// Il2CppName: _TryBreadthFirstSearchNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::StringW, ByRef<::UnityEngine::Transform*>, bool)>(&GorillaExtensions::GTExt::_TryBreadthFirstSearchNames)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* regexPattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->this_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "_TryBreadthFirstSearchNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, regexPattern, result, caseSensitive});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByExactPath
// Il2CppName: FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByExactPath
// Il2CppName: FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByExactPath
// Il2CppName: FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByExactPath
// Il2CppName: FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByExactPath
// Il2CppName: FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_FindComponentsByExactPath
// Il2CppName: _FindComponentsByExactPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByPathInLoadedScenes
// Il2CppName: FindComponentsByPathInLoadedScenes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByPath
// Il2CppName: FindComponentsByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByPath
// Il2CppName: FindComponentsByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByPath
// Il2CppName: FindComponentsByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::FindComponentsByPath
// Il2CppName: FindComponentsByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_FindComponentsByPath
// Il2CppName: _FindComponentsByPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_TryFindAllByPath
// Il2CppName: _TryFindAllByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Transform*, ::System::Collections::Generic::IReadOnlyList_1<::StringW>*, int, ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*, bool, bool)>(&GorillaExtensions::GTExt::_TryFindAllByPath)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* pathPartsRegex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    static auto* caseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isAtSceneLevel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "_TryFindAllByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, pathPartsRegex, index, results, caseSensitive, isAtSceneLevel});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_GlobPathToPathPartsRegex
// Il2CppName: _GlobPathToPathPartsRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::StringW)>(&GorillaExtensions::GTExt::_GlobPathToPathPartsRegex)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "_GlobPathToPathPartsRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::_GlobPathPartToRegex
// Il2CppName: _GlobPathPartToRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GorillaExtensions::GTExt::_GlobPathPartToRegex)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GTExt*), "_GlobPathPartToRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GTExt::$GetComponentsInChildrenUntil$g__GetRecursive_6_0
// Il2CppName: <GetComponentsInChildrenUntil>g__GetRecursive|6_0
// Cannot write MetadataGetter for generic methods!
