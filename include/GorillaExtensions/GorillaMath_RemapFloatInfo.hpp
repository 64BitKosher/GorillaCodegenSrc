// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaExtensions.GorillaMath
#include "GorillaExtensions/GorillaMath.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaExtensions::GorillaMath::RemapFloatInfo, "GorillaExtensions", "GorillaMath/RemapFloatInfo");
// Type namespace: GorillaExtensions
namespace GorillaExtensions {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaExtensions.GorillaMath/RemapFloatInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct GorillaMath::RemapFloatInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single fromMin
    // Size: 0x4
    // Offset: 0x0
    float fromMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single toMin
    // Size: 0x4
    // Offset: 0x4
    float toMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fromMax
    // Size: 0x4
    // Offset: 0x8
    float fromMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single toMax
    // Size: 0x4
    // Offset: 0xC
    float toMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: RemapFloatInfo
    constexpr RemapFloatInfo(float fromMin_ = {}, float toMin_ = {}, float fromMax_ = {}, float toMax_ = {}) noexcept : fromMin{fromMin_}, toMin{toMin_}, fromMax{fromMax_}, toMax{toMax_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single fromMin
    [[deprecated("Use field access instead!")]] float& dyn_fromMin();
    // Get instance field reference: public System.Single toMin
    [[deprecated("Use field access instead!")]] float& dyn_toMin();
    // Get instance field reference: public System.Single fromMax
    [[deprecated("Use field access instead!")]] float& dyn_fromMax();
    // Get instance field reference: public System.Single toMax
    [[deprecated("Use field access instead!")]] float& dyn_toMax();
    // public System.Void .ctor(System.Single fromMin, System.Single toMin, System.Single fromMax, System.Single toMax)
    // Offset: 0x286DD78
    // ABORTED: conflicts with another method.  RemapFloatInfo(float fromMin, float toMin, float fromMax, float toMax);
    // public System.Void OnValidate()
    // Offset: 0x286DD84
    void OnValidate();
    // public System.Boolean IsValid()
    // Offset: 0x286DDC8
    bool IsValid();
    // public System.Single Remap(System.Single value)
    // Offset: 0x286DDF4
    float Remap(float value);
  }; // GorillaExtensions.GorillaMath/RemapFloatInfo
  #pragma pack(pop)
  static check_size<sizeof(GorillaMath::RemapFloatInfo), 12 + sizeof(float)> __GorillaExtensions_GorillaMath_RemapFloatInfoSizeCheck;
  static_assert(sizeof(GorillaMath::RemapFloatInfo) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::RemapFloatInfo::RemapFloatInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::RemapFloatInfo::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaExtensions::GorillaMath::RemapFloatInfo::*)()>(&GorillaExtensions::GorillaMath::RemapFloatInfo::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath::RemapFloatInfo), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::RemapFloatInfo::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaExtensions::GorillaMath::RemapFloatInfo::*)()>(&GorillaExtensions::GorillaMath::RemapFloatInfo::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath::RemapFloatInfo), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::RemapFloatInfo::Remap
// Il2CppName: Remap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaExtensions::GorillaMath::RemapFloatInfo::*)(float)>(&GorillaExtensions::GorillaMath::RemapFloatInfo::Remap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath::RemapFloatInfo), "Remap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
