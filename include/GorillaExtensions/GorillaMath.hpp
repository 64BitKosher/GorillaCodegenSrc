// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaExtensions
namespace GorillaExtensions {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: GorillaExtensions
namespace GorillaExtensions {
  // Forward declaring type: GorillaMath
  class GorillaMath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaExtensions::GorillaMath);
DEFINE_IL2CPP_ARG_TYPE(::GorillaExtensions::GorillaMath*, "GorillaExtensions", "GorillaMath");
// Type namespace: GorillaExtensions
namespace GorillaExtensions {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: GorillaExtensions.GorillaMath
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaMath : public ::Il2CppObject {
    public:
    // Nested type: ::GorillaExtensions::GorillaMath::RemapFloatInfo
    struct RemapFloatInfo;
    // Nested type: ::GorillaExtensions::GorillaMath::FloatIntUnion
    struct FloatIntUnion;
    // static public UnityEngine.Vector3 GetAngularVelocity(UnityEngine.Quaternion oldRotation, UnityEngine.Quaternion newRotation)
    // Offset: 0x286D5DC
    static ::UnityEngine::Vector3 GetAngularVelocity(::UnityEngine::Quaternion oldRotation, ::UnityEngine::Quaternion newRotation);
    // static public System.Single FastInvSqrt(System.Single z)
    // Offset: 0x286D784
    static float FastInvSqrt(float z);
    // static public System.Single Dot2(in UnityEngine.Vector3 v)
    // Offset: 0x286D7CC
    static float Dot2(ByRef<::UnityEngine::Vector3> v);
    // static public UnityEngine.Vector4 RaycastToCappedCone(in UnityEngine.Vector3 rayOrigin, in UnityEngine.Vector3 rayDirection, in UnityEngine.Vector3 coneTip, in UnityEngine.Vector3 coneBase, in System.Single coneTipRadius, in System.Single coneBaseRadius)
    // Offset: 0x286D7EC
    static ::UnityEngine::Vector4 RaycastToCappedCone(ByRef<::UnityEngine::Vector3> rayOrigin, ByRef<::UnityEngine::Vector3> rayDirection, ByRef<::UnityEngine::Vector3> coneTip, ByRef<::UnityEngine::Vector3> coneBase, ByRef<float> coneTipRadius, ByRef<float> coneBaseRadius);
    // static public System.Void LineSegClosestPoints(UnityEngine.Vector3 a, UnityEngine.Vector3 u, UnityEngine.Vector3 b, UnityEngine.Vector3 v, out UnityEngine.Vector3 lineAPoint, out UnityEngine.Vector3 lineBPoint)
    // Offset: 0x286DC10
    static void LineSegClosestPoints(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 u, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 v, ByRef<::UnityEngine::Vector3> lineAPoint, ByRef<::UnityEngine::Vector3> lineBPoint);
  }; // GorillaExtensions.GorillaMath
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::GetAngularVelocity
// Il2CppName: GetAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&GorillaExtensions::GorillaMath::GetAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* oldRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* newRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath*), "GetAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldRotation, newRotation});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::FastInvSqrt
// Il2CppName: FastInvSqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&GorillaExtensions::GorillaMath::FastInvSqrt)> {
  static const MethodInfo* get() {
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath*), "FastInvSqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{z});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::Dot2
// Il2CppName: Dot2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GorillaMath::Dot2)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath*), "Dot2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::RaycastToCappedCone
// Il2CppName: RaycastToCappedCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>, ByRef<float>)>(&GorillaExtensions::GorillaMath::RaycastToCappedCone)> {
  static const MethodInfo* get() {
    static auto* rayOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rayDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* coneTip = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* coneBase = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* coneTipRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* coneBaseRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath*), "RaycastToCappedCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayOrigin, rayDirection, coneTip, coneBase, coneTipRadius, coneBaseRadius});
  }
};
// Writing MetadataGetter for method: GorillaExtensions::GorillaMath::LineSegClosestPoints
// Il2CppName: LineSegClosestPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaExtensions::GorillaMath::LineSegClosestPoints)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lineAPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* lineBPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaExtensions::GorillaMath*), "LineSegClosestPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, u, b, v, lineAPoint, lineBPoint});
  }
};
