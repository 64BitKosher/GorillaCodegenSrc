// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
  // Forward declaring type: NativeSlice`1<T>
  template<typename T>
  struct NativeSlice_1;
}
// Completed forward declares
// Type namespace: Unity.Jobs
namespace Unity::Jobs {
  // Forward declaring type: JobHandle
  struct JobHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Jobs::JobHandle, "Unity.Jobs", "JobHandle");
// Type namespace: Unity.Jobs
namespace Unity::Jobs {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Jobs.JobHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: FFFFFFFF
  struct JobHandle/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Jobs::JobHandle>*/ {
    public:
    public:
    // System.UInt64 jobGroup
    // Size: 0x8
    // Offset: 0x0
    uint64_t jobGroup;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.Int32 version
    // Size: 0x4
    // Offset: 0x8
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: JobHandle
    constexpr JobHandle(uint64_t jobGroup_ = {}, int version_ = {}) noexcept : jobGroup{jobGroup_}, version{version_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Jobs::JobHandle>
    operator ::System::IEquatable_1<::Unity::Jobs::JobHandle>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Jobs::JobHandle>*>(this);
    }
    // Get instance field reference: System.UInt64 jobGroup
    [[deprecated("Use field access instead!")]] uint64_t& dyn_jobGroup();
    // Get instance field reference: System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // public System.Void Complete()
    // Offset: 0x5477698
    void Complete();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x5477724
    bool get_IsCompleted();
    // static public System.Void ScheduleBatchedJobs()
    // Offset: 0x547779C
    static void ScheduleBatchedJobs();
    // static private System.Void ScheduleBatchedJobsAndComplete(ref Unity.Jobs.JobHandle job)
    // Offset: 0x54776E8
    static void ScheduleBatchedJobsAndComplete(ByRef<::Unity::Jobs::JobHandle> job);
    // static private System.Boolean ScheduleBatchedJobsAndIsCompleted(ref Unity.Jobs.JobHandle job)
    // Offset: 0x5477760
    static bool ScheduleBatchedJobsAndIsCompleted(ByRef<::Unity::Jobs::JobHandle> job);
    // static public Unity.Jobs.JobHandle CombineDependencies(Unity.Jobs.JobHandle job0, Unity.Jobs.JobHandle job1)
    // Offset: 0x54777C4
    static ::Unity::Jobs::JobHandle CombineDependencies(::Unity::Jobs::JobHandle job0, ::Unity::Jobs::JobHandle job1);
    // static public Unity.Jobs.JobHandle CombineDependencies(Unity.Collections.NativeArray`1<Unity.Jobs.JobHandle> jobs)
    // Offset: 0x5477848
    static ::Unity::Jobs::JobHandle CombineDependencies(::Unity::Collections::NativeArray_1<::Unity::Jobs::JobHandle> jobs);
    // static public Unity.Jobs.JobHandle CombineDependencies(Unity.Collections.NativeSlice`1<Unity.Jobs.JobHandle> jobs)
    // Offset: 0x5477904
    static ::Unity::Jobs::JobHandle CombineDependencies(::Unity::Collections::NativeSlice_1<::Unity::Jobs::JobHandle> jobs);
    // static private Unity.Jobs.JobHandle CombineDependenciesInternal2(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1)
    // Offset: 0x54777EC
    static ::Unity::Jobs::JobHandle CombineDependenciesInternal2(ByRef<::Unity::Jobs::JobHandle> job0, ByRef<::Unity::Jobs::JobHandle> job1);
    // static Unity.Jobs.JobHandle CombineDependenciesInternalPtr(System.Void* jobs, System.Int32 count)
    // Offset: 0x54778A8
    static ::Unity::Jobs::JobHandle CombineDependenciesInternalPtr(void* jobs, int count);
    // public System.Boolean Equals(Unity.Jobs.JobHandle other)
    // Offset: 0x5477A44
    bool Equals(::Unity::Jobs::JobHandle other);
    // static private System.Void CombineDependenciesInternal2_Injected(ref Unity.Jobs.JobHandle job0, ref Unity.Jobs.JobHandle job1, out Unity.Jobs.JobHandle ret)
    // Offset: 0x547799C
    static void CombineDependenciesInternal2_Injected(ByRef<::Unity::Jobs::JobHandle> job0, ByRef<::Unity::Jobs::JobHandle> job1, ByRef<::Unity::Jobs::JobHandle> ret);
    // static private System.Void CombineDependenciesInternalPtr_Injected(System.Void* jobs, System.Int32 count, out Unity.Jobs.JobHandle ret)
    // Offset: 0x54779F0
    static void CombineDependenciesInternalPtr_Injected(void* jobs, int count, ByRef<::Unity::Jobs::JobHandle> ret);
  }; // Unity.Jobs.JobHandle
  #pragma pack(pop)
  static check_size<sizeof(JobHandle), 8 + sizeof(int)> __Unity_Jobs_JobHandleSizeCheck;
  static_assert(sizeof(JobHandle) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Jobs::JobHandle::*)()>(&Unity::Jobs::JobHandle::Complete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Jobs::JobHandle::*)()>(&Unity::Jobs::JobHandle::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::ScheduleBatchedJobs
// Il2CppName: ScheduleBatchedJobs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Jobs::JobHandle::ScheduleBatchedJobs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "ScheduleBatchedJobs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::ScheduleBatchedJobsAndComplete
// Il2CppName: ScheduleBatchedJobsAndComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::ScheduleBatchedJobsAndComplete)> {
  static const MethodInfo* get() {
    static auto* job = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "ScheduleBatchedJobsAndComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{job});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::ScheduleBatchedJobsAndIsCompleted
// Il2CppName: ScheduleBatchedJobsAndIsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::ScheduleBatchedJobsAndIsCompleted)> {
  static const MethodInfo* get() {
    static auto* job = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "ScheduleBatchedJobsAndIsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{job});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependencies
// Il2CppName: CombineDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(::Unity::Jobs::JobHandle, ::Unity::Jobs::JobHandle)>(&Unity::Jobs::JobHandle::CombineDependencies)> {
  static const MethodInfo* get() {
    static auto* job0 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    static auto* job1 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{job0, job1});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependencies
// Il2CppName: CombineDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(::Unity::Collections::NativeArray_1<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::CombineDependencies)> {
  static const MethodInfo* get() {
    static auto* jobs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobs});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependencies
// Il2CppName: CombineDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(::Unity::Collections::NativeSlice_1<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::CombineDependencies)> {
  static const MethodInfo* get() {
    static auto* jobs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeSlice`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobs});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependenciesInternal2
// Il2CppName: CombineDependenciesInternal2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(ByRef<::Unity::Jobs::JobHandle>, ByRef<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::CombineDependenciesInternal2)> {
  static const MethodInfo* get() {
    static auto* job0 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    static auto* job1 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependenciesInternal2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{job0, job1});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependenciesInternalPtr
// Il2CppName: CombineDependenciesInternalPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (*)(void*, int)>(&Unity::Jobs::JobHandle::CombineDependenciesInternalPtr)> {
  static const MethodInfo* get() {
    static auto* jobs = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependenciesInternalPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobs, count});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Jobs::JobHandle::*)(::Unity::Jobs::JobHandle)>(&Unity::Jobs::JobHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependenciesInternal2_Injected
// Il2CppName: CombineDependenciesInternal2_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Jobs::JobHandle>, ByRef<::Unity::Jobs::JobHandle>, ByRef<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::CombineDependenciesInternal2_Injected)> {
  static const MethodInfo* get() {
    static auto* job0 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    static auto* job1 = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependenciesInternal2_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{job0, job1, ret});
  }
};
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::CombineDependenciesInternalPtr_Injected
// Il2CppName: CombineDependenciesInternalPtr_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, int, ByRef<::Unity::Jobs::JobHandle>)>(&Unity::Jobs::JobHandle::CombineDependenciesInternalPtr_Injected)> {
  static const MethodInfo* get() {
    static auto* jobs = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "CombineDependenciesInternalPtr_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jobs, count, ret});
  }
};
