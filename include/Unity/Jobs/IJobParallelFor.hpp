// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Unity.Jobs
namespace Unity::Jobs {
  // Forward declaring type: IJobParallelFor
  class IJobParallelFor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Jobs::IJobParallelFor);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Jobs::IJobParallelFor*, "Unity.Jobs", "IJobParallelFor");
// Type namespace: Unity.Jobs
namespace Unity::Jobs {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Jobs.IJobParallelFor
  // [TokenAttribute] Offset: FFFFFFFF
  // [JobProducerTypeAttribute] Offset: FFFFFFFF
  class IJobParallelFor {
    public:
    // public System.Void Execute(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Execute(int index);
  }; // Unity.Jobs.IJobParallelFor
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Jobs::IJobParallelFor::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Jobs::IJobParallelFor::*)(int)>(&Unity::Jobs::IJobParallelFor::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::IJobParallelFor*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
