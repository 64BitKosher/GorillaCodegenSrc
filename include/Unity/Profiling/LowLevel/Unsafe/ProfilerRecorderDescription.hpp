// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Profiling.ProfilerCategory
#include "Unity/Profiling/ProfilerCategory.hpp"
// Including type: Unity.Profiling.LowLevel.MarkerFlags
#include "Unity/Profiling/LowLevel/MarkerFlags.hpp"
// Including type: Unity.Profiling.LowLevel.ProfilerMarkerDataType
#include "Unity/Profiling/LowLevel/ProfilerMarkerDataType.hpp"
// Including type: Unity.Profiling.ProfilerMarkerDataUnit
#include "Unity/Profiling/ProfilerMarkerDataUnit.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Forward declaring type: ProfilerRecorderDescription
  struct ProfilerRecorderDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription, "Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderDescription");
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct ProfilerRecorderDescription/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly Unity.Profiling.ProfilerCategory category
    // Size: 0x2
    // Offset: 0x0
    ::Unity::Profiling::ProfilerCategory category;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerCategory) == 0x2);
    // private readonly Unity.Profiling.LowLevel.MarkerFlags flags
    // Size: 0x2
    // Offset: 0x2
    ::Unity::Profiling::LowLevel::MarkerFlags flags;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::LowLevel::MarkerFlags) == 0x2);
    // private readonly Unity.Profiling.LowLevel.ProfilerMarkerDataType dataType
    // Size: 0x1
    // Offset: 0x4
    ::Unity::Profiling::LowLevel::ProfilerMarkerDataType dataType;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::LowLevel::ProfilerMarkerDataType) == 0x1);
    // private readonly Unity.Profiling.ProfilerMarkerDataUnit unitType
    // Size: 0x1
    // Offset: 0x5
    ::Unity::Profiling::ProfilerMarkerDataUnit unitType;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarkerDataUnit) == 0x1);
    // Padding between fields: unitType and: reserved0
    char __padding3[0x2] = {};
    // private readonly System.Int32 reserved0
    // Size: 0x4
    // Offset: 0x8
    int reserved0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 nameUtf8Len
    // Size: 0x4
    // Offset: 0xC
    int nameUtf8Len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Byte* nameUtf8
    // Size: 0x8
    // Offset: 0x10
    uint8_t* nameUtf8;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    public:
    // Creating value type constructor for type: ProfilerRecorderDescription
    constexpr ProfilerRecorderDescription(::Unity::Profiling::ProfilerCategory category_ = {}, ::Unity::Profiling::LowLevel::MarkerFlags flags_ = {}, ::Unity::Profiling::LowLevel::ProfilerMarkerDataType dataType_ = {}, ::Unity::Profiling::ProfilerMarkerDataUnit unitType_ = {}, int reserved0_ = {}, int nameUtf8Len_ = {}, uint8_t* nameUtf8_ = {}) noexcept : category{category_}, flags{flags_}, dataType{dataType_}, unitType{unitType_}, reserved0{reserved0_}, nameUtf8Len{nameUtf8Len_}, nameUtf8{nameUtf8_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly Unity.Profiling.ProfilerCategory category
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerCategory& dyn_category();
    // Get instance field reference: private readonly Unity.Profiling.LowLevel.MarkerFlags flags
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::LowLevel::MarkerFlags& dyn_flags();
    // Get instance field reference: private readonly Unity.Profiling.LowLevel.ProfilerMarkerDataType dataType
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::LowLevel::ProfilerMarkerDataType& dyn_dataType();
    // Get instance field reference: private readonly Unity.Profiling.ProfilerMarkerDataUnit unitType
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarkerDataUnit& dyn_unitType();
    // Get instance field reference: private readonly System.Int32 reserved0
    [[deprecated("Use field access instead!")]] int& dyn_reserved0();
    // Get instance field reference: private readonly System.Int32 nameUtf8Len
    [[deprecated("Use field access instead!")]] int& dyn_nameUtf8Len();
    // Get instance field reference: private readonly System.Byte* nameUtf8
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_nameUtf8();
    // public Unity.Profiling.ProfilerCategory get_Category()
    // Offset: 0x54789C0
    ::Unity::Profiling::ProfilerCategory get_Category();
    // public Unity.Profiling.LowLevel.MarkerFlags get_Flags()
    // Offset: 0x54789C8
    ::Unity::Profiling::LowLevel::MarkerFlags get_Flags();
    // public Unity.Profiling.ProfilerMarkerDataUnit get_UnitType()
    // Offset: 0x54789D0
    ::Unity::Profiling::ProfilerMarkerDataUnit get_UnitType();
    // public System.String get_Name()
    // Offset: 0x54789D8
    ::StringW get_Name();
  }; // Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription
  #pragma pack(pop)
  static check_size<sizeof(ProfilerRecorderDescription), 16 + sizeof(uint8_t*)> __Unity_Profiling_LowLevel_Unsafe_ProfilerRecorderDescriptionSizeCheck;
  static_assert(sizeof(ProfilerRecorderDescription) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Category
// Il2CppName: get_Category
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerCategory (Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::*)()>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Category)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription), "get_Category", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Flags
// Il2CppName: get_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::MarkerFlags (Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::*)()>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription), "get_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_UnitType
// Il2CppName: get_UnitType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerMarkerDataUnit (Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::*)()>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_UnitType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription), "get_UnitType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::*)()>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
