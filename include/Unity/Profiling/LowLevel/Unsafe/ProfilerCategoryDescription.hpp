// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Completed includes
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Forward declaring type: ProfilerCategoryDescription
  struct ProfilerCategoryDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Profiling::LowLevel::Unsafe::ProfilerCategoryDescription, "Unity.Profiling.LowLevel.Unsafe", "ProfilerCategoryDescription");
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct ProfilerCategoryDescription/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.UInt16 Id
    // Size: 0x2
    // Offset: 0x0
    uint16_t Id;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public readonly System.UInt16 Flags
    // Size: 0x2
    // Offset: 0x2
    uint16_t Flags;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public readonly UnityEngine.Color32 Color
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::Color32 Color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private readonly System.Int32 reserved0
    // Size: 0x4
    // Offset: 0x8
    int reserved0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 NameUtf8Len
    // Size: 0x4
    // Offset: 0xC
    int NameUtf8Len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Byte* NameUtf8
    // Size: 0x8
    // Offset: 0x10
    uint8_t* NameUtf8;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    public:
    // Creating value type constructor for type: ProfilerCategoryDescription
    constexpr ProfilerCategoryDescription(uint16_t Id_ = {}, uint16_t Flags_ = {}, ::UnityEngine::Color32 Color_ = {}, int reserved0_ = {}, int NameUtf8Len_ = {}, uint8_t* NameUtf8_ = {}) noexcept : Id{Id_}, Flags{Flags_}, Color{Color_}, reserved0{reserved0_}, NameUtf8Len{NameUtf8Len_}, NameUtf8{NameUtf8_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.UInt16 Id
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Id();
    // Get instance field reference: public readonly System.UInt16 Flags
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Flags();
    // Get instance field reference: public readonly UnityEngine.Color32 Color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_Color();
    // Get instance field reference: private readonly System.Int32 reserved0
    [[deprecated("Use field access instead!")]] int& dyn_reserved0();
    // Get instance field reference: public readonly System.Int32 NameUtf8Len
    [[deprecated("Use field access instead!")]] int& dyn_NameUtf8Len();
    // Get instance field reference: public readonly System.Byte* NameUtf8
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_NameUtf8();
  }; // Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription
  #pragma pack(pop)
  static check_size<sizeof(ProfilerCategoryDescription), 16 + sizeof(uint8_t*)> __Unity_Profiling_LowLevel_Unsafe_ProfilerCategoryDescriptionSizeCheck;
  static_assert(sizeof(ProfilerCategoryDescription) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
