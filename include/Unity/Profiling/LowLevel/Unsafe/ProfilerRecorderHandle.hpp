// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Profiling::LowLevel::Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Forward declaring type: ProfilerRecorderDescription
  struct ProfilerRecorderDescription;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Unity::Profiling
namespace Unity::Profiling {
  // Forward declaring type: ProfilerCategory
  struct ProfilerCategory;
}
// Completed forward declares
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Forward declaring type: ProfilerRecorderHandle
  struct ProfilerRecorderHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle, "Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle");
// Type namespace: Unity.Profiling.LowLevel.Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  struct ProfilerRecorderHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly System.UInt64 handle
    // Size: 0x8
    // Offset: 0x0
    uint64_t handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: ProfilerRecorderHandle
    constexpr ProfilerRecorderHandle(uint64_t handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return handle;
    }
    // Get instance field reference: readonly System.UInt64 handle
    [[deprecated("Use field access instead!")]] uint64_t& dyn_handle();
    // System.Void .ctor(System.UInt64 handle)
    // Offset: 0x54789E8
    // ABORTED: conflicts with another method.  ProfilerRecorderHandle(uint64_t handle);
    // public System.Boolean get_Valid()
    // Offset: 0x54789F0
    bool get_Valid();
    // static public Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription GetDescription(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle)
    // Offset: 0x5478A04
    static ::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription GetDescription(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle handle);
    // static public System.Void GetAvailable(System.Collections.Generic.List`1<Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle> outRecorderHandleList)
    // Offset: 0x5478B50
    static void GetAvailable(::System::Collections::Generic::List_1<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>* outRecorderHandleList);
    // static Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName__Unmanaged(Unity.Profiling.ProfilerCategory category, System.Byte* name, System.Int32 nameLen)
    // Offset: 0x5478B8C
    static ::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle GetByName__Unmanaged(::Unity::Profiling::ProfilerCategory category, uint8_t* name, int nameLen);
    // static Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName(Unity.Profiling.ProfilerCategory category, System.Char* name, System.Int32 nameLen)
    // Offset: 0x5478C4C
    static ::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle GetByName(::Unity::Profiling::ProfilerCategory category, ::Il2CppChar* name, int nameLen);
    // static private Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle GetByName_Unsafe(Unity.Profiling.ProfilerCategory category, System.Char* name, System.Int32 nameLen)
    // Offset: 0x5478C54
    static ::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle GetByName_Unsafe(::Unity::Profiling::ProfilerCategory category, ::Il2CppChar* name, int nameLen);
    // static private Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription GetDescriptionInternal(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle)
    // Offset: 0x5478ACC
    static ::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription GetDescriptionInternal(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle handle);
    // static private System.Void GetByName__Unmanaged_Injected(ref Unity.Profiling.ProfilerCategory category, System.Byte* name, System.Int32 nameLen, out Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle ret)
    // Offset: 0x5478BF0
    static void GetByName__Unmanaged_Injected(ByRef<::Unity::Profiling::ProfilerCategory> category, uint8_t* name, int nameLen, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle> ret);
    // static private System.Void GetByName_Unsafe_Injected(ref Unity.Profiling.ProfilerCategory category, System.Char* name, System.Int32 nameLen, out Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle ret)
    // Offset: 0x5478CB8
    static void GetByName_Unsafe_Injected(ByRef<::Unity::Profiling::ProfilerCategory> category, ::Il2CppChar* name, int nameLen, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle> ret);
    // static private System.Void GetDescriptionInternal_Injected(ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle handle, out Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription ret)
    // Offset: 0x5478D14
    static void GetDescriptionInternal_Injected(ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle> handle, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription> ret);
  }; // Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle
  #pragma pack(pop)
  static check_size<sizeof(ProfilerRecorderHandle), 0 + sizeof(uint64_t)> __Unity_Profiling_LowLevel_Unsafe_ProfilerRecorderHandleSizeCheck;
  static_assert(sizeof(ProfilerRecorderHandle) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::ProfilerRecorderHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::get_Valid
// Il2CppName: get_Valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::*)()>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::get_Valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "get_Valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription (*)(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescription)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetAvailable
// Il2CppName: GetAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>*)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetAvailable)> {
  static const MethodInfo* get() {
    static auto* outRecorderHandleList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRecorderHandleList});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName__Unmanaged
// Il2CppName: GetByName__Unmanaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle (*)(::Unity::Profiling::ProfilerCategory, uint8_t*, int)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName__Unmanaged)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->byval_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* nameLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetByName__Unmanaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, name, nameLen});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName
// Il2CppName: GetByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle (*)(::Unity::Profiling::ProfilerCategory, ::Il2CppChar*, int)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->byval_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* nameLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, name, nameLen});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName_Unsafe
// Il2CppName: GetByName_Unsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle (*)(::Unity::Profiling::ProfilerCategory, ::Il2CppChar*, int)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName_Unsafe)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->byval_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* nameLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetByName_Unsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, name, nameLen});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescriptionInternal
// Il2CppName: GetDescriptionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription (*)(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescriptionInternal)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetDescriptionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName__Unmanaged_Injected
// Il2CppName: GetByName__Unmanaged_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Profiling::ProfilerCategory>, uint8_t*, int, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName__Unmanaged_Injected)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->this_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* nameLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetByName__Unmanaged_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, name, nameLen, ret});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName_Unsafe_Injected
// Il2CppName: GetByName_Unsafe_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Profiling::ProfilerCategory>, ::Il2CppChar*, int, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetByName_Unsafe_Injected)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->this_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* nameLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetByName_Unsafe_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, name, nameLen, ret});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescriptionInternal_Injected
// Il2CppName: GetDescriptionInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>, ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderDescription>)>(&Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle::GetDescriptionInternal_Injected)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle), "GetDescriptionInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, ret});
  }
};
