// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Profiling.ProfilerRecorderOptions
#include "Unity/Profiling/ProfilerRecorderOptions.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Profiling
namespace Unity::Profiling {
  // Forward declaring type: ProfilerCategory
  struct ProfilerCategory;
}
// Forward declaring namespace: Unity::Profiling::LowLevel::Unsafe
namespace Unity::Profiling::LowLevel::Unsafe {
  // Forward declaring type: ProfilerRecorderHandle
  struct ProfilerRecorderHandle;
}
// Completed forward declares
// Type namespace: Unity.Profiling
namespace Unity::Profiling {
  // Forward declaring type: ProfilerRecorder
  struct ProfilerRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Profiling::ProfilerRecorder, "Unity.Profiling", "ProfilerRecorder");
// Type namespace: Unity.Profiling
namespace Unity::Profiling {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Profiling.ProfilerRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  struct ProfilerRecorder/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Unity::Profiling::ProfilerRecorder::ControlOptions
    struct ControlOptions;
    public:
    // System.UInt64 handle
    // Size: 0x8
    // Offset: 0x0
    uint64_t handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: ProfilerRecorder
    constexpr ProfilerRecorder(uint64_t handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return handle;
    }
    // static field const value: static Unity.Profiling.ProfilerRecorderOptions SharedRecorder
    static constexpr const int SharedRecorder = 128;
    // Get static field: static Unity.Profiling.ProfilerRecorderOptions SharedRecorder
    static ::Unity::Profiling::ProfilerRecorderOptions _get_SharedRecorder();
    // Set static field: static Unity.Profiling.ProfilerRecorderOptions SharedRecorder
    static void _set_SharedRecorder(::Unity::Profiling::ProfilerRecorderOptions value);
    // Get instance field reference: System.UInt64 handle
    [[deprecated("Use field access instead!")]] uint64_t& dyn_handle();
    // public System.Void .ctor(Unity.Profiling.ProfilerCategory category, System.Char* statName, System.Int32 statNameLen, System.Int32 capacity, Unity.Profiling.ProfilerRecorderOptions options)
    // Offset: 0x54784B0
    ProfilerRecorder(::Unity::Profiling::ProfilerCategory category, ::Il2CppChar* statName, int statNameLen, int capacity, ::Unity::Profiling::ProfilerRecorderOptions options);
    // public System.Void .ctor(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, System.Int32 capacity, Unity.Profiling.ProfilerRecorderOptions options)
    // Offset: 0x5478550
    ProfilerRecorder(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle statHandle, int capacity, ::Unity::Profiling::ProfilerRecorderOptions options);
    // static public Unity.Profiling.ProfilerRecorder StartNew(Unity.Profiling.ProfilerCategory category, System.String statName, System.Int32 capacity, Unity.Profiling.ProfilerRecorderOptions options)
    // Offset: 0x5478574
    static ::Unity::Profiling::ProfilerRecorder StartNew(::Unity::Profiling::ProfilerCategory category, ::StringW statName, int capacity, ::Unity::Profiling::ProfilerRecorderOptions options);
    // public System.Boolean get_Valid()
    // Offset: 0x54785CC
    bool get_Valid();
    // public System.Void Start()
    // Offset: 0x5478664
    void Start();
    // public System.Void Stop()
    // Offset: 0x5478758
    void Stop();
    // public System.Int64 get_LastValue()
    // Offset: 0x54787A8
    int64_t get_LastValue();
    // static private Unity.Profiling.ProfilerRecorder Create(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, System.Int32 maxSampleCount, Unity.Profiling.ProfilerRecorderOptions options)
    // Offset: 0x54784F0
    static ::Unity::Profiling::ProfilerRecorder Create(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle statHandle, int maxSampleCount, ::Unity::Profiling::ProfilerRecorderOptions options);
    // static private System.Void Control(Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder/ControlOptions options)
    // Offset: 0x5478710
    static void Control(::Unity::Profiling::ProfilerRecorder handle, ::Unity::Profiling::ProfilerRecorder::ControlOptions options);
    // static private System.Int64 GetLastValue(Unity.Profiling.ProfilerRecorder handle)
    // Offset: 0x54787F4
    static int64_t GetLastValue(::Unity::Profiling::ProfilerRecorder handle);
    // static private System.Boolean GetValid(Unity.Profiling.ProfilerRecorder handle)
    // Offset: 0x5478620
    static bool GetValid(::Unity::Profiling::ProfilerRecorder handle);
    // public System.Void Dispose()
    // Offset: 0x547894C
    void Dispose();
    // private System.Void CheckInitializedAndThrow()
    // Offset: 0x54786B4
    void CheckInitializedAndThrow();
    // static private System.Void Create_Injected(ref Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle statHandle, System.Int32 maxSampleCount, Unity.Profiling.ProfilerRecorderOptions options, out Unity.Profiling.ProfilerRecorder ret)
    // Offset: 0x5478834
    static void Create_Injected(ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle> statHandle, int maxSampleCount, ::Unity::Profiling::ProfilerRecorderOptions options, ByRef<::Unity::Profiling::ProfilerRecorder> ret);
    // static private System.Void Control_Injected(ref Unity.Profiling.ProfilerRecorder handle, Unity.Profiling.ProfilerRecorder/ControlOptions options)
    // Offset: 0x5478890
    static void Control_Injected(ByRef<::Unity::Profiling::ProfilerRecorder> handle, ::Unity::Profiling::ProfilerRecorder::ControlOptions options);
    // static private System.Int64 GetLastValue_Injected(ref Unity.Profiling.ProfilerRecorder handle)
    // Offset: 0x54788D4
    static int64_t GetLastValue_Injected(ByRef<::Unity::Profiling::ProfilerRecorder> handle);
    // static private System.Boolean GetValid_Injected(ref Unity.Profiling.ProfilerRecorder handle)
    // Offset: 0x5478910
    static bool GetValid_Injected(ByRef<::Unity::Profiling::ProfilerRecorder> handle);
  }; // Unity.Profiling.ProfilerRecorder
  #pragma pack(pop)
  static check_size<sizeof(ProfilerRecorder), 0 + sizeof(uint64_t)> __Unity_Profiling_ProfilerRecorderSizeCheck;
  static_assert(sizeof(ProfilerRecorder) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::ProfilerRecorder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::ProfilerRecorder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::StartNew
// Il2CppName: StartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerRecorder (*)(::Unity::Profiling::ProfilerCategory, ::StringW, int, ::Unity::Profiling::ProfilerRecorderOptions)>(&Unity::Profiling::ProfilerRecorder::StartNew)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerCategory")->byval_arg;
    static auto* statName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorderOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "StartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category, statName, capacity, options});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::get_Valid
// Il2CppName: get_Valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::get_Valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "get_Valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::get_LastValue
// Il2CppName: get_LastValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::get_LastValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "get_LastValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Profiling::ProfilerRecorder (*)(::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle, int, ::Unity::Profiling::ProfilerRecorderOptions)>(&Unity::Profiling::ProfilerRecorder::Create)> {
  static const MethodInfo* get() {
    static auto* statHandle = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->byval_arg;
    static auto* maxSampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorderOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statHandle, maxSampleCount, options});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Control
// Il2CppName: Control
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Profiling::ProfilerRecorder, ::Unity::Profiling::ProfilerRecorder::ControlOptions)>(&Unity::Profiling::ProfilerRecorder::Control)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder/ControlOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Control", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, options});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::GetLastValue
// Il2CppName: GetLastValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Unity::Profiling::ProfilerRecorder)>(&Unity::Profiling::ProfilerRecorder::GetLastValue)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "GetLastValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::GetValid
// Il2CppName: GetValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Profiling::ProfilerRecorder)>(&Unity::Profiling::ProfilerRecorder::GetValid)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "GetValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::CheckInitializedAndThrow
// Il2CppName: CheckInitializedAndThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Profiling::ProfilerRecorder::*)()>(&Unity::Profiling::ProfilerRecorder::CheckInitializedAndThrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "CheckInitializedAndThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Create_Injected
// Il2CppName: Create_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Profiling::LowLevel::Unsafe::ProfilerRecorderHandle>, int, ::Unity::Profiling::ProfilerRecorderOptions, ByRef<::Unity::Profiling::ProfilerRecorder>)>(&Unity::Profiling::ProfilerRecorder::Create_Injected)> {
  static const MethodInfo* get() {
    static auto* statHandle = &::il2cpp_utils::GetClassFromName("Unity.Profiling.LowLevel.Unsafe", "ProfilerRecorderHandle")->this_arg;
    static auto* maxSampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorderOptions")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Create_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statHandle, maxSampleCount, options, ret});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::Control_Injected
// Il2CppName: Control_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Profiling::ProfilerRecorder>, ::Unity::Profiling::ProfilerRecorder::ControlOptions)>(&Unity::Profiling::ProfilerRecorder::Control_Injected)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder/ControlOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "Control_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, options});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::GetLastValue_Injected
// Il2CppName: GetLastValue_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(ByRef<::Unity::Profiling::ProfilerRecorder>)>(&Unity::Profiling::ProfilerRecorder::GetLastValue_Injected)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "GetLastValue_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Unity::Profiling::ProfilerRecorder::GetValid_Injected
// Il2CppName: GetValid_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Unity::Profiling::ProfilerRecorder>)>(&Unity::Profiling::ProfilerRecorder::GetValid_Injected)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Unity.Profiling", "ProfilerRecorder")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Profiling::ProfilerRecorder), "GetValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
