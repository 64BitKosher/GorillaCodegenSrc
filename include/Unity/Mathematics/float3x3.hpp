// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: Unity.Mathematics.float3
#include "Unity/Mathematics/float3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: quaternion
  struct quaternion;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float3x3
  struct float3x3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::float3x3, "Unity.Mathematics", "float3x3");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Mathematics.float3x3
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  struct float3x3/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Mathematics::float3x3>, public ::System::IFormattable*/ {
    public:
    public:
    // public Unity.Mathematics.float3 c0
    // Size: 0xC
    // Offset: 0x0
    ::Unity::Mathematics::float3 c0;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float3) == 0xC);
    // public Unity.Mathematics.float3 c1
    // Size: 0xC
    // Offset: 0xC
    ::Unity::Mathematics::float3 c1;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float3) == 0xC);
    // public Unity.Mathematics.float3 c2
    // Size: 0xC
    // Offset: 0x18
    ::Unity::Mathematics::float3 c2;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float3) == 0xC);
    public:
    // Creating value type constructor for type: float3x3
    constexpr float3x3(::Unity::Mathematics::float3 c0_ = {}, ::Unity::Mathematics::float3 c1_ = {}, ::Unity::Mathematics::float3 c2_ = {}) noexcept : c0{c0_}, c1{c1_}, c2{c2_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Mathematics::float3x3>
    operator ::System::IEquatable_1<::Unity::Mathematics::float3x3>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Mathematics::float3x3>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get static field: static public readonly Unity.Mathematics.float3x3 identity
    static ::Unity::Mathematics::float3x3 _get_identity();
    // Set static field: static public readonly Unity.Mathematics.float3x3 identity
    static void _set_identity(::Unity::Mathematics::float3x3 value);
    // Get instance field reference: public Unity.Mathematics.float3 c0
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float3& dyn_c0();
    // Get instance field reference: public Unity.Mathematics.float3 c1
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float3& dyn_c1();
    // Get instance field reference: public Unity.Mathematics.float3 c2
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float3& dyn_c2();
    // public System.Void .ctor(System.Single m00, System.Single m01, System.Single m02, System.Single m10, System.Single m11, System.Single m12, System.Single m20, System.Single m21, System.Single m22)
    // Offset: 0x517D058
    float3x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22);
    // public System.Boolean Equals(Unity.Mathematics.float3x3 rhs)
    // Offset: 0x517D074
    bool Equals(::Unity::Mathematics::float3x3 rhs);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x517D5FC
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public System.Void .ctor(Unity.Mathematics.quaternion q)
    // Offset: 0x517BC94
    float3x3(::Unity::Mathematics::quaternion q);
    // static private System.Void .cctor()
    // Offset: 0x517D93C
    static void _cctor();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x517D110
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x517D208
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x517D2A4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Mathematics.float3x3
  #pragma pack(pop)
  static check_size<sizeof(float3x3), 24 + sizeof(::Unity::Mathematics::float3)> __Unity_Mathematics_float3x3SizeCheck;
  static_assert(sizeof(float3x3) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::float3x3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float3x3::*)(::Unity::Mathematics::float3x3)>(&Unity::Mathematics::float3x3::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3x3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float3x3::*)(::StringW, ::System::IFormatProvider*)>(&Unity::Mathematics::float3x3::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::float3x3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Mathematics::float3x3::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float3x3::*)(::Il2CppObject*)>(&Unity::Mathematics::float3x3::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Mathematics::float3x3::*)()>(&Unity::Mathematics::float3x3::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3x3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float3x3::*)()>(&Unity::Mathematics::float3x3::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3x3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
