// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: Unity.Mathematics.float4
#include "Unity/Mathematics/float4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: quaternion
  struct quaternion;
  // Forward declaring type: float3
  struct float3;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float4x4
  struct float4x4;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::float4x4, "Unity.Mathematics", "float4x4");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Mathematics.float4x4
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  struct float4x4/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Mathematics::float4x4>, public ::System::IFormattable*/ {
    public:
    public:
    // public Unity.Mathematics.float4 c0
    // Size: 0x10
    // Offset: 0x0
    ::Unity::Mathematics::float4 c0;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 c1
    // Size: 0x10
    // Offset: 0x10
    ::Unity::Mathematics::float4 c1;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 c2
    // Size: 0x10
    // Offset: 0x20
    ::Unity::Mathematics::float4 c2;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    // public Unity.Mathematics.float4 c3
    // Size: 0x10
    // Offset: 0x30
    ::Unity::Mathematics::float4 c3;
    // Field size check
    static_assert(sizeof(::Unity::Mathematics::float4) == 0x10);
    public:
    // Creating value type constructor for type: float4x4
    constexpr float4x4(::Unity::Mathematics::float4 c0_ = {}, ::Unity::Mathematics::float4 c1_ = {}, ::Unity::Mathematics::float4 c2_ = {}, ::Unity::Mathematics::float4 c3_ = {}) noexcept : c0{c0_}, c1{c1_}, c2{c2_}, c3{c3_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Mathematics::float4x4>
    operator ::System::IEquatable_1<::Unity::Mathematics::float4x4>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Mathematics::float4x4>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get static field: static public readonly Unity.Mathematics.float4x4 identity
    static ::Unity::Mathematics::float4x4 _get_identity();
    // Set static field: static public readonly Unity.Mathematics.float4x4 identity
    static void _set_identity(::Unity::Mathematics::float4x4 value);
    // Get static field: static public readonly Unity.Mathematics.float4x4 zero
    static ::Unity::Mathematics::float4x4 _get_zero();
    // Set static field: static public readonly Unity.Mathematics.float4x4 zero
    static void _set_zero(::Unity::Mathematics::float4x4 value);
    // Get instance field reference: public Unity.Mathematics.float4 c0
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_c0();
    // Get instance field reference: public Unity.Mathematics.float4 c1
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_c1();
    // Get instance field reference: public Unity.Mathematics.float4 c2
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_c2();
    // Get instance field reference: public Unity.Mathematics.float4 c3
    [[deprecated("Use field access instead!")]] ::Unity::Mathematics::float4& dyn_c3();
    // public System.Void .ctor(Unity.Mathematics.float4 c0, Unity.Mathematics.float4 c1, Unity.Mathematics.float4 c2, Unity.Mathematics.float4 c3)
    // Offset: 0x517E068
    // ABORTED: conflicts with another method.  float4x4(::Unity::Mathematics::float4 c0, ::Unity::Mathematics::float4 c1, ::Unity::Mathematics::float4 c2, ::Unity::Mathematics::float4 c3);
    // public System.Void .ctor(System.Single m00, System.Single m01, System.Single m02, System.Single m03, System.Single m10, System.Single m11, System.Single m12, System.Single m13, System.Single m20, System.Single m21, System.Single m22, System.Single m23, System.Single m30, System.Single m31, System.Single m32, System.Single m33)
    // Offset: 0x517E084
    float4x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33);
    // public Unity.Mathematics.float4 get_Item(System.Int32 index)
    // Offset: 0x517E0C8
    ::Unity::Mathematics::float4 get_Item(int index);
    // public System.Boolean Equals(Unity.Mathematics.float4x4 rhs)
    // Offset: 0x517E0D0
    bool Equals(::Unity::Mathematics::float4x4 rhs);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x517E9B4
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public System.Void .ctor(Unity.Mathematics.quaternion rotation, Unity.Mathematics.float3 translation)
    // Offset: 0x517F044
    float4x4(::Unity::Mathematics::quaternion rotation, ::Unity::Mathematics::float3 translation);
    // static public Unity.Mathematics.float4x4 TRS(Unity.Mathematics.float3 translation, Unity.Mathematics.quaternion rotation, Unity.Mathematics.float3 scale)
    // Offset: 0x517F0D8
    static ::Unity::Mathematics::float4x4 TRS(::Unity::Mathematics::float3 translation, ::Unity::Mathematics::quaternion rotation, ::Unity::Mathematics::float3 scale);
    // static private System.Void .cctor()
    // Offset: 0x517F1B4
    static void _cctor();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x517E1DC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x517E344
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x517E448
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Mathematics.float4x4
  #pragma pack(pop)
  static check_size<sizeof(float4x4), 48 + sizeof(::Unity::Mathematics::float4)> __Unity_Mathematics_float4x4SizeCheck;
  static_assert(sizeof(float4x4) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::float4x4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::float4x4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4x4::*)(int)>(&Unity::Mathematics::float4x4::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float4x4::*)(::Unity::Mathematics::float4x4)>(&Unity::Mathematics::float4x4::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float4x4::*)(::StringW, ::System::IFormatProvider*)>(&Unity::Mathematics::float4x4::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::float4x4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::TRS
// Il2CppName: TRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4x4 (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::quaternion, ::Unity::Mathematics::float3)>(&Unity::Mathematics::float4x4::TRS)> {
  static const MethodInfo* get() {
    static auto* translation = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "TRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translation, rotation, scale});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Mathematics::float4x4::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float4x4::*)(::Il2CppObject*)>(&Unity::Mathematics::float4x4::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Mathematics::float4x4::*)()>(&Unity::Mathematics::float4x4::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4x4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float4x4::*)()>(&Unity::Mathematics::float4x4::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4x4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
