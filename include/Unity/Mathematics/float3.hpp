// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float2
  struct float2;
  // Forward declaring type: float4
  struct float4;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float3
  struct float3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::float3, "Unity.Mathematics", "float3");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Mathematics.float3
  // [TokenAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct float3/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Mathematics::float3>, public ::System::IFormattable*/ {
    public:
    // Nested type: ::Unity::Mathematics::float3::DebuggerProxy
    class DebuggerProxy;
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x0
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single y
    // Size: 0x4
    // Offset: 0x4
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single z
    // Size: 0x4
    // Offset: 0x8
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: float3
    constexpr float3(float x_ = {}, float y_ = {}, float z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Mathematics::float3>
    operator ::System::IEquatable_1<::Unity::Mathematics::float3>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Mathematics::float3>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get static field: static public readonly Unity.Mathematics.float3 zero
    static ::Unity::Mathematics::float3 _get_zero();
    // Set static field: static public readonly Unity.Mathematics.float3 zero
    static void _set_zero(::Unity::Mathematics::float3 value);
    // Get instance field reference: public System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: public System.Single y
    [[deprecated("Use field access instead!")]] float& dyn_y();
    // Get instance field reference: public System.Single z
    [[deprecated("Use field access instead!")]] float& dyn_z();
    // public System.Void .ctor(System.Single x, System.Single y, System.Single z)
    // Offset: 0x517CCA4
    // ABORTED: conflicts with another method.  float3(float x, float y, float z);
    // public System.Void .ctor(System.Single x, Unity.Mathematics.float2 yz)
    // Offset: 0x517CCB0
    float3(float x, ::Unity::Mathematics::float2 yz);
    // public System.Void .ctor(Unity.Mathematics.float2 xy, System.Single z)
    // Offset: 0x517CCBC
    float3(::Unity::Mathematics::float2 xy, float z);
    // public System.Void .ctor(System.Single v)
    // Offset: 0x517CCC8
    float3(float v);
    // public System.Void .ctor(System.Int32 v)
    // Offset: 0x517CCD4
    float3(int v);
    // public Unity.Mathematics.float4 get_yxxy()
    // Offset: 0x517CD74
    ::Unity::Mathematics::float4 get_yxxy();
    // public Unity.Mathematics.float4 get_zzyz()
    // Offset: 0x517CD84
    ::Unity::Mathematics::float4 get_zzyz();
    // public Unity.Mathematics.float3 get_xyz()
    // Offset: 0x517CD98
    ::Unity::Mathematics::float3 get_xyz();
    // public Unity.Mathematics.float3 get_yzx()
    // Offset: 0x517CDA4
    ::Unity::Mathematics::float3 get_yzx();
    // public Unity.Mathematics.float2 get_xy()
    // Offset: 0x517CDB0
    ::Unity::Mathematics::float2 get_xy();
    // public Unity.Mathematics.float2 get_xz()
    // Offset: 0x517CDB8
    ::Unity::Mathematics::float2 get_xz();
    // public Unity.Mathematics.float2 get_yz()
    // Offset: 0x517CDC4
    ::Unity::Mathematics::float2 get_yz();
    // public System.Boolean Equals(Unity.Mathematics.float3 rhs)
    // Offset: 0x517CDCC
    bool Equals(::Unity::Mathematics::float3 rhs);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x517CF9C
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x517CDFC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x517CE94
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x517CED8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Mathematics.float3
  #pragma pack(pop)
  static check_size<sizeof(float3), 8 + sizeof(float)> __Unity_Mathematics_float3SizeCheck;
  static_assert(sizeof(float3) == 0xC);
  // static public Unity.Mathematics.float3 op_Multiply(Unity.Mathematics.float3 lhs, Unity.Mathematics.float3 rhs)
  // Offset: 0x517CD00
  ::Unity::Mathematics::float3 operator*(const ::Unity::Mathematics::float3& lhs, const ::Unity::Mathematics::float3& rhs);
  // static public Unity.Mathematics.float3 op_Multiply(Unity.Mathematics.float3 lhs, System.Single rhs)
  // Offset: 0x517CD10
  ::Unity::Mathematics::float3 operator*(const ::Unity::Mathematics::float3& lhs, const float& rhs);
  // static public Unity.Mathematics.float3 op_Multiply(System.Single lhs, Unity.Mathematics.float3 rhs)
  // Offset: 0x517CD20
  ::Unity::Mathematics::float3 operator*(const float& lhs, const ::Unity::Mathematics::float3& rhs);
  // static public Unity.Mathematics.float3 op_Addition(Unity.Mathematics.float3 lhs, Unity.Mathematics.float3 rhs)
  // Offset: 0x517CD34
  ::Unity::Mathematics::float3 operator+(const ::Unity::Mathematics::float3& lhs, const ::Unity::Mathematics::float3& rhs);
  // static public Unity.Mathematics.float3 op_Subtraction(Unity.Mathematics.float3 lhs, Unity.Mathematics.float3 rhs)
  // Offset: 0x517CD44
  ::Unity::Mathematics::float3 operator-(const ::Unity::Mathematics::float3& lhs, const ::Unity::Mathematics::float3& rhs);
  // static public Unity.Mathematics.float3 op_Division(Unity.Mathematics.float3 lhs, System.Single rhs)
  // Offset: 0x517CD54
  ::Unity::Mathematics::float3 operator/(const ::Unity::Mathematics::float3& lhs, const float& rhs);
  // static public Unity.Mathematics.float3 op_UnaryNegation(Unity.Mathematics.float3 val)
  // Offset: 0x517CD64
  ::Unity::Mathematics::float3 operator-(const ::Unity::Mathematics::float3& val);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::float3::float3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3::float3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3::float3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3::float3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3::float3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_yxxy
// Il2CppName: get_yxxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_yxxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_yxxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_zzyz
// Il2CppName: get_zzyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_zzyz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_zzyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_xyz
// Il2CppName: get_xyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_xyz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_xyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_yzx
// Il2CppName: get_yzx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_yzx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_yzx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_xy
// Il2CppName: get_xy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_xy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_xy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_xz
// Il2CppName: get_xz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_xz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_xz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::get_yz
// Il2CppName: get_yz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::get_yz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "get_yz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float3::*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::float3::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float3::*)(::StringW, ::System::IFormatProvider*)>(&Unity::Mathematics::float3::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float3::*)(::Il2CppObject*)>(&Unity::Mathematics::float3::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float3::*)()>(&Unity::Mathematics::float3::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float3::operator-
// Il2CppName: op_UnaryNegation
// Cannot perform method pointer template specialization from operators!
