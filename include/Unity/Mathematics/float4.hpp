// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float2
  struct float2;
  // Forward declaring type: float3
  struct float3;
  // Forward declaring type: int4
  struct int4;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: float4
  struct float4;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::float4, "Unity.Mathematics", "float4");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Mathematics.float4
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  struct float4/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Mathematics::float4>, public ::System::IFormattable*/ {
    public:
    // Nested type: ::Unity::Mathematics::float4::DebuggerProxy
    class DebuggerProxy;
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x0
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single y
    // Size: 0x4
    // Offset: 0x4
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single z
    // Size: 0x4
    // Offset: 0x8
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single w
    // Size: 0x4
    // Offset: 0xC
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: float4
    constexpr float4(float x_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Mathematics::float4>
    operator ::System::IEquatable_1<::Unity::Mathematics::float4>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Mathematics::float4>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get static field: static public readonly Unity.Mathematics.float4 zero
    static ::Unity::Mathematics::float4 _get_zero();
    // Set static field: static public readonly Unity.Mathematics.float4 zero
    static void _set_zero(::Unity::Mathematics::float4 value);
    // Get instance field reference: public System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: public System.Single y
    [[deprecated("Use field access instead!")]] float& dyn_y();
    // Get instance field reference: public System.Single z
    [[deprecated("Use field access instead!")]] float& dyn_z();
    // Get instance field reference: public System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // public System.Void .ctor(System.Single x, System.Single y, System.Single z, System.Single w)
    // Offset: 0x517D994
    // ABORTED: conflicts with another method.  float4(float x, float y, float z, float w);
    // public System.Void .ctor(Unity.Mathematics.float2 xy, System.Single z, System.Single w)
    // Offset: 0x517D9A0
    float4(::Unity::Mathematics::float2 xy, float z, float w);
    // public System.Void .ctor(Unity.Mathematics.float2 xy, Unity.Mathematics.float2 zw)
    // Offset: 0x517D9AC
    float4(::Unity::Mathematics::float2 xy, ::Unity::Mathematics::float2 zw);
    // public System.Void .ctor(Unity.Mathematics.float3 xyz, System.Single w)
    // Offset: 0x517D9B8
    float4(::Unity::Mathematics::float3 xyz, float w);
    // public System.Void .ctor(Unity.Mathematics.int4 v)
    // Offset: 0x517D9C4
    float4(::Unity::Mathematics::int4 v);
    // public Unity.Mathematics.float4 get_xyzx()
    // Offset: 0x517DABC
    ::Unity::Mathematics::float4 get_xyzx();
    // public Unity.Mathematics.float4 get_yzxy()
    // Offset: 0x517DACC
    ::Unity::Mathematics::float4 get_yzxy();
    // public Unity.Mathematics.float4 get_yzxz()
    // Offset: 0x517DADC
    ::Unity::Mathematics::float4 get_yzxz();
    // public Unity.Mathematics.float4 get_zxyy()
    // Offset: 0x517DAEC
    ::Unity::Mathematics::float4 get_zxyy();
    // public Unity.Mathematics.float4 get_zxyz()
    // Offset: 0x517DAFC
    ::Unity::Mathematics::float4 get_zxyz();
    // public Unity.Mathematics.float4 get_wwwx()
    // Offset: 0x517DB0C
    ::Unity::Mathematics::float4 get_wwwx();
    // public Unity.Mathematics.float4 get_wwww()
    // Offset: 0x517DB20
    ::Unity::Mathematics::float4 get_wwww();
    // public Unity.Mathematics.float3 get_xyz()
    // Offset: 0x517DB34
    ::Unity::Mathematics::float3 get_xyz();
    // public Unity.Mathematics.float3 get_yxw()
    // Offset: 0x517DB40
    ::Unity::Mathematics::float3 get_yxw();
    // public Unity.Mathematics.float3 get_zwx()
    // Offset: 0x517DB4C
    ::Unity::Mathematics::float3 get_zwx();
    // public Unity.Mathematics.float3 get_wzy()
    // Offset: 0x517DB58
    ::Unity::Mathematics::float3 get_wzy();
    // public Unity.Mathematics.float2 get_xy()
    // Offset: 0x517DB64
    ::Unity::Mathematics::float2 get_xy();
    // public Unity.Mathematics.float2 get_zw()
    // Offset: 0x517DB6C
    ::Unity::Mathematics::float2 get_zw();
    // public System.Single get_Item(System.Int32 index)
    // Offset: 0x517DB74
    float get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Single value)
    // Offset: 0x517DB7C
    void set_Item(int index, float value);
    // public System.Boolean Equals(Unity.Mathematics.float4 rhs)
    // Offset: 0x517DB84
    bool Equals(::Unity::Mathematics::float4 rhs);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x517DE9C
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x517DBC0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x517DC68
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x517DCC0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Mathematics.float4
  #pragma pack(pop)
  static check_size<sizeof(float4), 12 + sizeof(float)> __Unity_Mathematics_float4SizeCheck;
  static_assert(sizeof(float4) == 0x10);
  // static public Unity.Mathematics.float4 op_Multiply(Unity.Mathematics.float4 lhs, Unity.Mathematics.float4 rhs)
  // Offset: 0x517DA04
  ::Unity::Mathematics::float4 operator*(const ::Unity::Mathematics::float4& lhs, const ::Unity::Mathematics::float4& rhs);
  // static public Unity.Mathematics.float4 op_Multiply(Unity.Mathematics.float4 lhs, System.Single rhs)
  // Offset: 0x517DA18
  ::Unity::Mathematics::float4 operator*(const ::Unity::Mathematics::float4& lhs, const float& rhs);
  // static public Unity.Mathematics.float4 op_Multiply(System.Single lhs, Unity.Mathematics.float4 rhs)
  // Offset: 0x517DA2C
  ::Unity::Mathematics::float4 operator*(const float& lhs, const ::Unity::Mathematics::float4& rhs);
  // static public Unity.Mathematics.float4 op_Addition(Unity.Mathematics.float4 lhs, Unity.Mathematics.float4 rhs)
  // Offset: 0x517DA44
  ::Unity::Mathematics::float4 operator+(const ::Unity::Mathematics::float4& lhs, const ::Unity::Mathematics::float4& rhs);
  // static public Unity.Mathematics.float4 op_Addition(Unity.Mathematics.float4 lhs, System.Single rhs)
  // Offset: 0x517DA58
  ::Unity::Mathematics::float4 operator+(const ::Unity::Mathematics::float4& lhs, const float& rhs);
  // static public Unity.Mathematics.float4 op_Subtraction(Unity.Mathematics.float4 lhs, Unity.Mathematics.float4 rhs)
  // Offset: 0x517DA6C
  ::Unity::Mathematics::float4 operator-(const ::Unity::Mathematics::float4& lhs, const ::Unity::Mathematics::float4& rhs);
  // static public Unity.Mathematics.float4 op_Subtraction(Unity.Mathematics.float4 lhs, System.Single rhs)
  // Offset: 0x517DA80
  ::Unity::Mathematics::float4 operator-(const ::Unity::Mathematics::float4& lhs, const float& rhs);
  // static public Unity.Mathematics.float4 op_Division(Unity.Mathematics.float4 lhs, Unity.Mathematics.float4 rhs)
  // Offset: 0x517DA94
  ::Unity::Mathematics::float4 operator/(const ::Unity::Mathematics::float4& lhs, const ::Unity::Mathematics::float4& rhs);
  // static public Unity.Mathematics.float4 op_Division(Unity.Mathematics.float4 lhs, System.Single rhs)
  // Offset: 0x517DAA8
  ::Unity::Mathematics::float4 operator/(const ::Unity::Mathematics::float4& lhs, const float& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::float4::float4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4::float4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4::float4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4::float4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4::float4
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_xyzx
// Il2CppName: get_xyzx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_xyzx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_xyzx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_yzxy
// Il2CppName: get_yzxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_yzxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_yzxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_yzxz
// Il2CppName: get_yzxz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_yzxz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_yzxz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_zxyy
// Il2CppName: get_zxyy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_zxyy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_zxyy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_zxyz
// Il2CppName: get_zxyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_zxyz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_zxyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_wwwx
// Il2CppName: get_wwwx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_wwwx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_wwwx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_wwww
// Il2CppName: get_wwww
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_wwww)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_wwww", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_xyz
// Il2CppName: get_xyz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_xyz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_xyz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_yxw
// Il2CppName: get_yxw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_yxw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_yxw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_zwx
// Il2CppName: get_zwx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_zwx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_zwx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_wzy
// Il2CppName: get_wzy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_wzy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_wzy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_xy
// Il2CppName: get_xy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_xy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_xy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_zw
// Il2CppName: get_zw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::get_zw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_zw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Unity::Mathematics::float4::*)(int)>(&Unity::Mathematics::float4::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Mathematics::float4::*)(int, float)>(&Unity::Mathematics::float4::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float4::*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::float4::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float4::*)(::StringW, ::System::IFormatProvider*)>(&Unity::Mathematics::float4::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::float4::*)(::Il2CppObject*)>(&Unity::Mathematics::float4::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::float4::*)()>(&Unity::Mathematics::float4::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::float4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Unity::Mathematics::float4::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
