// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: bool2
  struct bool2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::bool2, "Unity.Mathematics", "bool2");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Mathematics.bool2
  // [TokenAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct bool2/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::Mathematics::bool2>*/ {
    public:
    // Nested type: ::Unity::Mathematics::bool2::DebuggerProxy
    class DebuggerProxy;
    public:
    // public System.Boolean x
    // Size: 0x1
    // Offset: 0x0
    bool x;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean y
    // Size: 0x1
    // Offset: 0x1
    bool y;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: bool2
    constexpr bool2(bool x_ = {}, bool y_ = {}) noexcept : x{x_}, y{y_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::Mathematics::bool2>
    operator ::System::IEquatable_1<::Unity::Mathematics::bool2>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::Mathematics::bool2>*>(this);
    }
    // Get instance field reference: public System.Boolean x
    [[deprecated("Use field access instead!")]] bool& dyn_x();
    // Get instance field reference: public System.Boolean y
    [[deprecated("Use field access instead!")]] bool& dyn_y();
    // public System.Void .ctor(System.Boolean x, System.Boolean y)
    // Offset: 0x517C078
    // ABORTED: conflicts with another method.  bool2(bool x, bool y);
    // public System.Boolean Equals(Unity.Mathematics.bool2 rhs)
    // Offset: 0x517C08C
    bool Equals(::Unity::Mathematics::bool2 rhs);
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x517C0B8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x517C144
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x517C180
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Mathematics.bool2
  #pragma pack(pop)
  static check_size<sizeof(bool2), 1 + sizeof(bool)> __Unity_Mathematics_bool2SizeCheck;
  static_assert(sizeof(bool2) == 0x2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::bool2::bool2
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Mathematics::bool2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::bool2::*)(::Unity::Mathematics::bool2)>(&Unity::Mathematics::bool2::Equals)> {
  static const MethodInfo* get() {
    static auto* rhs = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "bool2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::bool2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rhs});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::bool2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Mathematics::bool2::*)(::Il2CppObject*)>(&Unity::Mathematics::bool2::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::bool2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::bool2::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Mathematics::bool2::*)()>(&Unity::Mathematics::bool2::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::bool2), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::bool2::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Mathematics::bool2::*)()>(&Unity::Mathematics::bool2::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::bool2), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
