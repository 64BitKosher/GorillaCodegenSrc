// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: bool2
  struct bool2;
  // Forward declaring type: double2
  struct double2;
  // Forward declaring type: float2
  struct float2;
  // Forward declaring type: float2x2
  struct float2x2;
  // Forward declaring type: float3
  struct float3;
  // Forward declaring type: float3x3
  struct float3x3;
  // Forward declaring type: float4
  struct float4;
  // Forward declaring type: float4x4
  struct float4x4;
  // Forward declaring type: int2
  struct int2;
  // Forward declaring type: int3
  struct int3;
  // Forward declaring type: int4
  struct int4;
  // Forward declaring type: uint2
  struct uint2;
  // Forward declaring type: uint3
  struct uint3;
  // Forward declaring type: uint4
  struct uint4;
  // Forward declaring type: quaternion
  struct quaternion;
}
// Completed forward declares
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Forward declaring type: math
  class math;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Mathematics::math);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Mathematics::math*, "Unity.Mathematics", "math");
// Type namespace: Unity.Mathematics
namespace Unity::Mathematics {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Mathematics.math
  // [TokenAttribute] Offset: FFFFFFFF
  // [Il2CppEagerStaticClassConstructionAttribute] Offset: FFFFFFFF
  class math : public ::Il2CppObject {
    public:
    // Nested type: ::Unity::Mathematics::math::LongDoubleUnion
    struct LongDoubleUnion;
    // static public System.UInt32 hash(Unity.Mathematics.bool2 v)
    // Offset: 0x517A398
    static uint hash(::Unity::Mathematics::bool2 v);
    // static public System.UInt32 hash(Unity.Mathematics.double2 v)
    // Offset: 0x517A3D0
    static uint hash(::Unity::Mathematics::double2 v);
    // static public Unity.Mathematics.float2 float2(System.Single x, System.Single y)
    // Offset: 0x517A414
    static ::Unity::Mathematics::float2 float2(float x, float y);
    // static public System.UInt32 hash(Unity.Mathematics.float2 v)
    // Offset: 0x517A418
    static uint hash(::Unity::Mathematics::float2 v);
    // static public Unity.Mathematics.float2x2 float2x2(Unity.Mathematics.float2 c0, Unity.Mathematics.float2 c1)
    // Offset: 0x517A44C
    static ::Unity::Mathematics::float2x2 float2x2(::Unity::Mathematics::float2 c0, ::Unity::Mathematics::float2 c1);
    // static public System.Single determinant(Unity.Mathematics.float2x2 m)
    // Offset: 0x517A450
    static float determinant(::Unity::Mathematics::float2x2 m);
    // static public System.UInt32 hash(Unity.Mathematics.float2x2 v)
    // Offset: 0x517A460
    static uint hash(::Unity::Mathematics::float2x2 v);
    // static public Unity.Mathematics.float3 float3(System.Single x, System.Single y, System.Single z)
    // Offset: 0x517A4B8
    static ::Unity::Mathematics::float3 float3(float x, float y, float z);
    // static public Unity.Mathematics.float3 float3(System.Single x, Unity.Mathematics.float2 yz)
    // Offset: 0x517A4BC
    static ::Unity::Mathematics::float3 float3(float x, ::Unity::Mathematics::float2 yz);
    // static public Unity.Mathematics.float3 float3(Unity.Mathematics.float2 xy, System.Single z)
    // Offset: 0x517A4C0
    static ::Unity::Mathematics::float3 float3(::Unity::Mathematics::float2 xy, float z);
    // static public System.UInt32 hash(Unity.Mathematics.float3 v)
    // Offset: 0x517A4C4
    static uint hash(::Unity::Mathematics::float3 v);
    // static public System.UInt32 hash(Unity.Mathematics.float3x3 v)
    // Offset: 0x517A50C
    static uint hash(::Unity::Mathematics::float3x3 v);
    // static public Unity.Mathematics.float4 float4(System.Single x, System.Single y, System.Single z, System.Single w)
    // Offset: 0x517A5A8
    static ::Unity::Mathematics::float4 float4(float x, float y, float z, float w);
    // static public Unity.Mathematics.float4 float4(Unity.Mathematics.float2 xy, System.Single z, System.Single w)
    // Offset: 0x517A5AC
    static ::Unity::Mathematics::float4 float4(::Unity::Mathematics::float2 xy, float z, float w);
    // static public Unity.Mathematics.float4 float4(Unity.Mathematics.float2 xy, Unity.Mathematics.float2 zw)
    // Offset: 0x517A5B0
    static ::Unity::Mathematics::float4 float4(::Unity::Mathematics::float2 xy, ::Unity::Mathematics::float2 zw);
    // static public Unity.Mathematics.float4 float4(Unity.Mathematics.float3 xyz, System.Single w)
    // Offset: 0x517A5B4
    static ::Unity::Mathematics::float4 float4(::Unity::Mathematics::float3 xyz, float w);
    // static public System.UInt32 hash(Unity.Mathematics.float4 v)
    // Offset: 0x517A5B8
    static uint hash(::Unity::Mathematics::float4 v);
    // static public Unity.Mathematics.float4x4 float4x4(Unity.Mathematics.float4 c0, Unity.Mathematics.float4 c1, Unity.Mathematics.float4 c2, Unity.Mathematics.float4 c3)
    // Offset: 0x517A618
    static ::Unity::Mathematics::float4x4 float4x4(::Unity::Mathematics::float4 c0, ::Unity::Mathematics::float4 c1, ::Unity::Mathematics::float4 c2, ::Unity::Mathematics::float4 c3);
    // static public System.UInt32 hash(Unity.Mathematics.float4x4 v)
    // Offset: 0x517A634
    static uint hash(::Unity::Mathematics::float4x4 v);
    // static public Unity.Mathematics.int2 int2(System.Int32 x, System.Int32 y)
    // Offset: 0x517A740
    static ::Unity::Mathematics::int2 int2(int x, int y);
    // static public System.UInt32 hash(Unity.Mathematics.int2 v)
    // Offset: 0x517A74C
    static uint hash(::Unity::Mathematics::int2 v);
    // static public System.UInt32 hash(Unity.Mathematics.int3 v)
    // Offset: 0x517A77C
    static uint hash(::Unity::Mathematics::int3 v);
    // static public Unity.Mathematics.int4 int4(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 w)
    // Offset: 0x517A7BC
    static ::Unity::Mathematics::int4 int4(int x, int y, int z, int w);
    // static public System.UInt32 hash(Unity.Mathematics.int4 v)
    // Offset: 0x517A7D4
    static uint hash(::Unity::Mathematics::int4 v);
    // static public Unity.Mathematics.uint2 asuint(Unity.Mathematics.int2 x)
    // Offset: 0x517A82C
    static ::Unity::Mathematics::uint2 asuint(::Unity::Mathematics::int2 x);
    // static public Unity.Mathematics.uint3 asuint(Unity.Mathematics.int3 x)
    // Offset: 0x517A830
    static ::Unity::Mathematics::uint3 asuint(::Unity::Mathematics::int3 x);
    // static public Unity.Mathematics.uint4 asuint(Unity.Mathematics.int4 x)
    // Offset: 0x517A838
    static ::Unity::Mathematics::uint4 asuint(::Unity::Mathematics::int4 x);
    // static public System.UInt32 asuint(System.Single x)
    // Offset: 0x517A83C
    static uint asuint(float x);
    // static public Unity.Mathematics.uint2 asuint(Unity.Mathematics.float2 x)
    // Offset: 0x517A844
    static ::Unity::Mathematics::uint2 asuint(::Unity::Mathematics::float2 x);
    // static public Unity.Mathematics.uint3 asuint(Unity.Mathematics.float3 x)
    // Offset: 0x517A854
    static ::Unity::Mathematics::uint3 asuint(::Unity::Mathematics::float3 x);
    // static public Unity.Mathematics.uint4 asuint(Unity.Mathematics.float4 x)
    // Offset: 0x517A868
    static ::Unity::Mathematics::uint4 asuint(::Unity::Mathematics::float4 x);
    // static public System.UInt64 asulong(System.Double x)
    // Offset: 0x517A884
    static uint64_t asulong(double x);
    // static public System.Single asfloat(System.UInt32 x)
    // Offset: 0x517A88C
    static float asfloat(uint x);
    // static public Unity.Mathematics.float3 asfloat(Unity.Mathematics.uint3 x)
    // Offset: 0x517A894
    static ::Unity::Mathematics::float3 asfloat(::Unity::Mathematics::uint3 x);
    // static public Unity.Mathematics.float4 asfloat(Unity.Mathematics.uint4 x)
    // Offset: 0x517A8A8
    static ::Unity::Mathematics::float4 asfloat(::Unity::Mathematics::uint4 x);
    // static public System.Double asdouble(System.UInt64 x)
    // Offset: 0x517A8C4
    static double asdouble(uint64_t x);
    // static public System.Boolean isinf(System.Double x)
    // Offset: 0x517A8CC
    static bool isinf(double x);
    // static public System.Int32 min(System.Int32 x, System.Int32 y)
    // Offset: 0x517A8E4
    static int min(int x, int y);
    // static public System.UInt32 min(System.UInt32 x, System.UInt32 y)
    // Offset: 0x517A8F0
    static uint min(uint x, uint y);
    // static public System.Int64 min(System.Int64 x, System.Int64 y)
    // Offset: 0x517A8FC
    static int64_t min(int64_t x, int64_t y);
    // static public System.Single min(System.Single x, System.Single y)
    // Offset: 0x517A908
    static float min(float x, float y);
    // static public Unity.Mathematics.float2 min(Unity.Mathematics.float2 x, Unity.Mathematics.float2 y)
    // Offset: 0x517A924
    static ::Unity::Mathematics::float2 min(::Unity::Mathematics::float2 x, ::Unity::Mathematics::float2 y);
    // static public Unity.Mathematics.float3 min(Unity.Mathematics.float3 x, Unity.Mathematics.float3 y)
    // Offset: 0x517A954
    static ::Unity::Mathematics::float3 min(::Unity::Mathematics::float3 x, ::Unity::Mathematics::float3 y);
    // static public System.Double min(System.Double x, System.Double y)
    // Offset: 0x517A998
    static double min(double x, double y);
    // static public Unity.Mathematics.double2 min(Unity.Mathematics.double2 x, Unity.Mathematics.double2 y)
    // Offset: 0x517A9B4
    static ::Unity::Mathematics::double2 min(::Unity::Mathematics::double2 x, ::Unity::Mathematics::double2 y);
    // static public System.Int32 max(System.Int32 x, System.Int32 y)
    // Offset: 0x517A9E4
    static int max(int x, int y);
    // static public Unity.Mathematics.int2 max(Unity.Mathematics.int2 x, Unity.Mathematics.int2 y)
    // Offset: 0x517A9F0
    static ::Unity::Mathematics::int2 max(::Unity::Mathematics::int2 x, ::Unity::Mathematics::int2 y);
    // static public System.UInt32 max(System.UInt32 x, System.UInt32 y)
    // Offset: 0x517AA10
    static uint max(uint x, uint y);
    // static public System.Int64 max(System.Int64 x, System.Int64 y)
    // Offset: 0x517AA1C
    static int64_t max(int64_t x, int64_t y);
    // static public System.Single max(System.Single x, System.Single y)
    // Offset: 0x517AA28
    static float max(float x, float y);
    // static public Unity.Mathematics.float2 max(Unity.Mathematics.float2 x, Unity.Mathematics.float2 y)
    // Offset: 0x517AA44
    static ::Unity::Mathematics::float2 max(::Unity::Mathematics::float2 x, ::Unity::Mathematics::float2 y);
    // static public Unity.Mathematics.float3 max(Unity.Mathematics.float3 x, Unity.Mathematics.float3 y)
    // Offset: 0x517AA74
    static ::Unity::Mathematics::float3 max(::Unity::Mathematics::float3 x, ::Unity::Mathematics::float3 y);
    // static public System.Single lerp(System.Single start, System.Single end, System.Single t)
    // Offset: 0x517AAB8
    static float lerp(float start, float end, float t);
    // static public Unity.Mathematics.float2 lerp(Unity.Mathematics.float2 start, Unity.Mathematics.float2 end, System.Single t)
    // Offset: 0x517AAC8
    static ::Unity::Mathematics::float2 lerp(::Unity::Mathematics::float2 start, ::Unity::Mathematics::float2 end, float t);
    // static public Unity.Mathematics.float3 lerp(Unity.Mathematics.float3 start, Unity.Mathematics.float3 end, System.Single t)
    // Offset: 0x517AAE4
    static ::Unity::Mathematics::float3 lerp(::Unity::Mathematics::float3 start, ::Unity::Mathematics::float3 end, float t);
    // static public Unity.Mathematics.float4 lerp(Unity.Mathematics.float4 start, Unity.Mathematics.float4 end, System.Single t)
    // Offset: 0x517AB0C
    static ::Unity::Mathematics::float4 lerp(::Unity::Mathematics::float4 start, ::Unity::Mathematics::float4 end, float t);
    // static public System.Int32 clamp(System.Int32 valueToClamp, System.Int32 lowerBound, System.Int32 upperBound)
    // Offset: 0x517AB44
    static int clamp(int valueToClamp, int lowerBound, int upperBound);
    // static public System.Single clamp(System.Single valueToClamp, System.Single lowerBound, System.Single upperBound)
    // Offset: 0x517AB58
    static float clamp(float valueToClamp, float lowerBound, float upperBound);
    // static public System.Int32 abs(System.Int32 x)
    // Offset: 0x517AB88
    static int abs(int x);
    // static public System.Single abs(System.Single x)
    // Offset: 0x517AB98
    static float abs(float x);
    // static public Unity.Mathematics.float4 abs(Unity.Mathematics.float4 x)
    // Offset: 0x517ABA0
    static ::Unity::Mathematics::float4 abs(::Unity::Mathematics::float4 x);
    // static public System.Double abs(System.Double x)
    // Offset: 0x517ABB4
    static double abs(double x);
    // static public System.Single dot(Unity.Mathematics.float2 x, Unity.Mathematics.float2 y)
    // Offset: 0x517ABBC
    static float dot(::Unity::Mathematics::float2 x, ::Unity::Mathematics::float2 y);
    // static public System.Single dot(Unity.Mathematics.float3 x, Unity.Mathematics.float3 y)
    // Offset: 0x517ABCC
    static float dot(::Unity::Mathematics::float3 x, ::Unity::Mathematics::float3 y);
    // static public System.Single dot(Unity.Mathematics.float4 x, Unity.Mathematics.float4 y)
    // Offset: 0x517ABE4
    static float dot(::Unity::Mathematics::float4 x, ::Unity::Mathematics::float4 y);
    // static public System.Double dot(Unity.Mathematics.double2 x, Unity.Mathematics.double2 y)
    // Offset: 0x517AC04
    static double dot(::Unity::Mathematics::double2 x, ::Unity::Mathematics::double2 y);
    // static public System.Single atan(System.Single x)
    // Offset: 0x517AC14
    static float atan(float x);
    // static public Unity.Mathematics.float2 atan(Unity.Mathematics.float2 x)
    // Offset: 0x517AC78
    static ::Unity::Mathematics::float2 atan(::Unity::Mathematics::float2 x);
    // static public System.Single cos(System.Single x)
    // Offset: 0x517AD1C
    static float cos(float x);
    // static public Unity.Mathematics.float3 cos(Unity.Mathematics.float3 x)
    // Offset: 0x517AD80
    static ::Unity::Mathematics::float3 cos(::Unity::Mathematics::float3 x);
    // static public System.Single sin(System.Single x)
    // Offset: 0x517AE6C
    static float sin(float x);
    // static public Unity.Mathematics.float3 sin(Unity.Mathematics.float3 x)
    // Offset: 0x517AED0
    static ::Unity::Mathematics::float3 sin(::Unity::Mathematics::float3 x);
    // static public System.Single floor(System.Single x)
    // Offset: 0x517AFBC
    static float floor(float x);
    // static public System.Single ceil(System.Single x)
    // Offset: 0x517B018
    static float ceil(float x);
    // static public System.Single rcp(System.Single x)
    // Offset: 0x517B074
    static float rcp(float x);
    // static public Unity.Mathematics.float2 rcp(Unity.Mathematics.float2 x)
    // Offset: 0x517B080
    static ::Unity::Mathematics::float2 rcp(::Unity::Mathematics::float2 x);
    // static public System.Single sign(System.Single x)
    // Offset: 0x517B090
    static float sign(float x);
    // static public Unity.Mathematics.float4 sign(Unity.Mathematics.float4 x)
    // Offset: 0x517B0AC
    static ::Unity::Mathematics::float4 sign(::Unity::Mathematics::float4 x);
    // static public System.Single pow(System.Single x, System.Single y)
    // Offset: 0x517B0F8
    static float pow(float x, float y);
    // static public System.Single log2(System.Single x)
    // Offset: 0x517B168
    static float log2(float x);
    // static public System.Single sqrt(System.Single x)
    // Offset: 0x517B1D4
    static float sqrt(float x);
    // static public Unity.Mathematics.float4 sqrt(Unity.Mathematics.float4 x)
    // Offset: 0x517B230
    static ::Unity::Mathematics::float4 sqrt(::Unity::Mathematics::float4 x);
    // static public System.Double sqrt(System.Double x)
    // Offset: 0x517B330
    static double sqrt(double x);
    // static public System.Single rsqrt(System.Single x)
    // Offset: 0x517B38C
    static float rsqrt(float x);
    // static public Unity.Mathematics.float2 normalize(Unity.Mathematics.float2 x)
    // Offset: 0x517B3E8
    static ::Unity::Mathematics::float2 normalize(::Unity::Mathematics::float2 x);
    // static public Unity.Mathematics.float3 normalize(Unity.Mathematics.float3 x)
    // Offset: 0x517B45C
    static ::Unity::Mathematics::float3 normalize(::Unity::Mathematics::float3 x);
    // static public System.Single length(Unity.Mathematics.float2 x)
    // Offset: 0x517B4E8
    static float length(::Unity::Mathematics::float2 x);
    // static public System.Single length(Unity.Mathematics.float3 x)
    // Offset: 0x517B54C
    static float length(::Unity::Mathematics::float3 x);
    // static public System.Single length(Unity.Mathematics.float4 x)
    // Offset: 0x517B5C4
    static float length(::Unity::Mathematics::float4 x);
    // static public System.Double length(Unity.Mathematics.double2 x)
    // Offset: 0x517B648
    static double length(::Unity::Mathematics::double2 x);
    // static public System.Single lengthsq(Unity.Mathematics.float2 x)
    // Offset: 0x517B6AC
    static float lengthsq(::Unity::Mathematics::float2 x);
    // static public System.Single lengthsq(Unity.Mathematics.float3 x)
    // Offset: 0x517B6BC
    static float lengthsq(::Unity::Mathematics::float3 x);
    // static public System.Single lengthsq(Unity.Mathematics.float4 x)
    // Offset: 0x517B6D4
    static float lengthsq(::Unity::Mathematics::float4 x);
    // static public System.Single distance(Unity.Mathematics.float2 x, Unity.Mathematics.float2 y)
    // Offset: 0x517B6F4
    static float distance(::Unity::Mathematics::float2 x, ::Unity::Mathematics::float2 y);
    // static public System.Double distance(Unity.Mathematics.double2 x, Unity.Mathematics.double2 y)
    // Offset: 0x517B770
    static double distance(::Unity::Mathematics::double2 x, ::Unity::Mathematics::double2 y);
    // static public System.Single distancesq(System.Single x, System.Single y)
    // Offset: 0x517B7EC
    static float distancesq(float x, float y);
    // static public System.Single distancesq(Unity.Mathematics.float2 x, Unity.Mathematics.float2 y)
    // Offset: 0x517B7F8
    static float distancesq(::Unity::Mathematics::float2 x, ::Unity::Mathematics::float2 y);
    // static public System.Single distancesq(Unity.Mathematics.float3 x, Unity.Mathematics.float3 y)
    // Offset: 0x517B810
    static float distancesq(::Unity::Mathematics::float3 x, ::Unity::Mathematics::float3 y);
    // static public System.Single distancesq(Unity.Mathematics.float4 x, Unity.Mathematics.float4 y)
    // Offset: 0x517B834
    static float distancesq(::Unity::Mathematics::float4 x, ::Unity::Mathematics::float4 y);
    // static public Unity.Mathematics.float3 cross(Unity.Mathematics.float3 x, Unity.Mathematics.float3 y)
    // Offset: 0x517B864
    static ::Unity::Mathematics::float3 cross(::Unity::Mathematics::float3 x, ::Unity::Mathematics::float3 y);
    // static public System.Boolean any(Unity.Mathematics.bool2 x)
    // Offset: 0x517B88C
    static bool any(::Unity::Mathematics::bool2 x);
    // static public System.Boolean any(Unity.Mathematics.float2 x)
    // Offset: 0x517B89C
    static bool any(::Unity::Mathematics::float2 x);
    // static public System.UInt32 select(System.UInt32 falseValue, System.UInt32 trueValue, System.Boolean test)
    // Offset: 0x517B8B4
    static uint select(uint falseValue, uint trueValue, bool test);
    // static public Unity.Mathematics.uint2 select(Unity.Mathematics.uint2 falseValue, Unity.Mathematics.uint2 trueValue, Unity.Mathematics.bool2 test)
    // Offset: 0x517B8C0
    static ::Unity::Mathematics::uint2 select(::Unity::Mathematics::uint2 falseValue, ::Unity::Mathematics::uint2 trueValue, ::Unity::Mathematics::bool2 test);
    // static public System.Void sincos(Unity.Mathematics.float3 x, out Unity.Mathematics.float3 s, out Unity.Mathematics.float3 c)
    // Offset: 0x517B8D8
    static void sincos(::Unity::Mathematics::float3 x, ByRef<::Unity::Mathematics::float3> s, ByRef<::Unity::Mathematics::float3> c);
    // static public System.Int32 lzcnt(System.Int32 x)
    // Offset: 0x517B93C
    static int lzcnt(int x);
    // static public System.Int32 lzcnt(System.UInt32 x)
    // Offset: 0x517B978
    static int lzcnt(uint x);
    // static public System.Int32 tzcnt(System.Int32 x)
    // Offset: 0x517B9B4
    static int tzcnt(int x);
    // static public System.Int32 tzcnt(System.UInt32 x)
    // Offset: 0x517B9F0
    static int tzcnt(uint x);
    // static public System.Int32 tzcnt(System.UInt64 x)
    // Offset: 0x517BA2C
    static int tzcnt(uint64_t x);
    // static public System.Int32 ceilpow2(System.Int32 x)
    // Offset: 0x517BA80
    static int ceilpow2(int x);
    // static public Unity.Mathematics.int2 ceilpow2(Unity.Mathematics.int2 x)
    // Offset: 0x517BAA0
    static ::Unity::Mathematics::int2 ceilpow2(::Unity::Mathematics::int2 x);
    // static public System.Int32 ceillog2(System.Int32 x)
    // Offset: 0x517BB30
    static int ceillog2(int x);
    // static public System.Int32 floorlog2(System.Int32 x)
    // Offset: 0x517BB6C
    static int floorlog2(int x);
    // static public System.Single radians(System.Single x)
    // Offset: 0x517BBA4
    static float radians(float x);
    // static public System.UInt32 csum(Unity.Mathematics.uint2 x)
    // Offset: 0x517BBB4
    static uint csum(::Unity::Mathematics::uint2 x);
    // static public System.UInt32 csum(Unity.Mathematics.uint3 x)
    // Offset: 0x517BBC0
    static uint csum(::Unity::Mathematics::uint3 x);
    // static public System.UInt32 csum(Unity.Mathematics.uint4 x)
    // Offset: 0x517BBD0
    static uint csum(::Unity::Mathematics::uint4 x);
    // static public System.Single csum(Unity.Mathematics.float3 x)
    // Offset: 0x517BBE8
    static float csum(::Unity::Mathematics::float3 x);
    // static public System.Single f16tof32(System.UInt32 x)
    // Offset: 0x517BBF4
    static float f16tof32(uint x);
    // static System.UInt32 fold_to_uint(System.Double x)
    // Offset: 0x517BC50
    static uint fold_to_uint(double x);
    // static Unity.Mathematics.uint2 fold_to_uint(Unity.Mathematics.double2 x)
    // Offset: 0x517BC60
    static ::Unity::Mathematics::uint2 fold_to_uint(::Unity::Mathematics::double2 x);
    // static public Unity.Mathematics.float3x3 float3x3(Unity.Mathematics.quaternion rotation)
    // Offset: 0x517BC80
    static ::Unity::Mathematics::float3x3 float3x3(::Unity::Mathematics::quaternion rotation);
    // static public Unity.Mathematics.float4 mul(Unity.Mathematics.float4x4 a, Unity.Mathematics.float4 b)
    // Offset: 0x517BD78
    static ::Unity::Mathematics::float4 mul(::Unity::Mathematics::float4x4 a, ::Unity::Mathematics::float4 b);
    // static public Unity.Mathematics.float4x4 mul(Unity.Mathematics.float4x4 a, Unity.Mathematics.float4x4 b)
    // Offset: 0x517BDAC
    static ::Unity::Mathematics::float4x4 mul(::Unity::Mathematics::float4x4 a, ::Unity::Mathematics::float4x4 b);
    // static public Unity.Mathematics.quaternion quaternion(Unity.Mathematics.float4 value)
    // Offset: 0x517BEA4
    static ::Unity::Mathematics::quaternion quaternion(::Unity::Mathematics::float4 value);
    // static public Unity.Mathematics.quaternion mul(Unity.Mathematics.quaternion a, Unity.Mathematics.quaternion b)
    // Offset: 0x517BEA8
    static ::Unity::Mathematics::quaternion mul(::Unity::Mathematics::quaternion a, ::Unity::Mathematics::quaternion b);
    // static public System.UInt32 hash(Unity.Mathematics.quaternion q)
    // Offset: 0x517BF1C
    static uint hash(::Unity::Mathematics::quaternion q);
    // static public Unity.Mathematics.uint2 uint2(System.UInt32 x, System.UInt32 y)
    // Offset: 0x517BF7C
    static ::Unity::Mathematics::uint2 uint2(uint x, uint y);
    // static public System.UInt32 hash(Unity.Mathematics.uint2 v)
    // Offset: 0x517BF88
    static uint hash(::Unity::Mathematics::uint2 v);
    // static public Unity.Mathematics.uint3 uint3(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x517BFB8
    static ::Unity::Mathematics::uint3 uint3(uint x, uint y, uint z);
    // static public System.UInt32 hash(Unity.Mathematics.uint3 v)
    // Offset: 0x517BFC8
    static uint hash(::Unity::Mathematics::uint3 v);
    // static public Unity.Mathematics.uint4 uint4(System.UInt32 x, System.UInt32 y, System.UInt32 z, System.UInt32 w)
    // Offset: 0x517C008
    static ::Unity::Mathematics::uint4 uint4(uint x, uint y, uint z, uint w);
    // static public System.UInt32 hash(Unity.Mathematics.uint4 v)
    // Offset: 0x517C020
    static uint hash(::Unity::Mathematics::uint4 v);
  }; // Unity.Mathematics.math
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::bool2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "bool2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::double2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float2
// Il2CppName: float2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(float, float)>(&Unity::Mathematics::math::float2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float2x2
// Il2CppName: float2x2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2x2 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::float2x2)> {
  static const MethodInfo* get() {
    static auto* c0 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* c1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float2x2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c0, c1});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::determinant
// Il2CppName: determinant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2x2)>(&Unity::Mathematics::math::determinant)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2x2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "determinant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float2x2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2x2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float3
// Il2CppName: float3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(float, float, float)>(&Unity::Mathematics::math::float3)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float3
// Il2CppName: float3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(float, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::float3)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yz = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, yz});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float3
// Il2CppName: float3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float2, float)>(&Unity::Mathematics::math::float3)> {
  static const MethodInfo* get() {
    static auto* xy = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, z});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float3x3)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3x3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float4
// Il2CppName: float4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(float, float, float, float)>(&Unity::Mathematics::math::float4)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float4
// Il2CppName: float4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float2, float, float)>(&Unity::Mathematics::math::float4)> {
  static const MethodInfo* get() {
    static auto* xy = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, z, w});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float4
// Il2CppName: float4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::float4)> {
  static const MethodInfo* get() {
    static auto* xy = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* zw = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, zw});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float4
// Il2CppName: float4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float3, float)>(&Unity::Mathematics::math::float4)> {
  static const MethodInfo* get() {
    static auto* xyz = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xyz, w});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float4x4
// Il2CppName: float4x4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4x4 (*)(::Unity::Mathematics::float4, ::Unity::Mathematics::float4, ::Unity::Mathematics::float4, ::Unity::Mathematics::float4)>(&Unity::Mathematics::math::float4x4)> {
  static const MethodInfo* get() {
    static auto* c0 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* c1 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* c2 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* c3 = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float4x4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c0, c1, c2, c3});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::float4x4)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::int2
// Il2CppName: int2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::int2 (*)(int, int)>(&Unity::Mathematics::math::int2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "int2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::int2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::int3)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::int4
// Il2CppName: int4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::int4 (*)(int, int, int, int)>(&Unity::Mathematics::math::int4)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "int4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::int4)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (*)(::Unity::Mathematics::int2)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint3 (*)(::Unity::Mathematics::int3)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint4 (*)(::Unity::Mathematics::int4)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(float)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint3 (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asuint
// Il2CppName: asuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint4 (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::asuint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asulong
// Il2CppName: asulong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(double)>(&Unity::Mathematics::math::asulong)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asulong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asfloat
// Il2CppName: asfloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint)>(&Unity::Mathematics::math::asfloat)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asfloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asfloat
// Il2CppName: asfloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::uint3)>(&Unity::Mathematics::math::asfloat)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asfloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asfloat
// Il2CppName: asfloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::uint4)>(&Unity::Mathematics::math::asfloat)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asfloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::asdouble
// Il2CppName: asdouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(uint64_t)>(&Unity::Mathematics::math::asdouble)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "asdouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::isinf
// Il2CppName: isinf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&Unity::Mathematics::math::isinf)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "isinf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t, int64_t)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::min
// Il2CppName: min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::double2 (*)(::Unity::Mathematics::double2, ::Unity::Mathematics::double2)>(&Unity::Mathematics::math::min)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::int2 (*)(::Unity::Mathematics::int2, ::Unity::Mathematics::int2)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t, int64_t)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::max
// Il2CppName: max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3)>(&Unity::Mathematics::math::max)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lerp
// Il2CppName: lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Unity::Mathematics::math::lerp)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, t});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lerp
// Il2CppName: lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2, float)>(&Unity::Mathematics::math::lerp)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, t});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lerp
// Il2CppName: lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3, float)>(&Unity::Mathematics::math::lerp)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, t});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lerp
// Il2CppName: lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float4, ::Unity::Mathematics::float4, float)>(&Unity::Mathematics::math::lerp)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, t});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::clamp
// Il2CppName: clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&Unity::Mathematics::math::clamp)> {
  static const MethodInfo* get() {
    static auto* valueToClamp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lowerBound = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* upperBound = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueToClamp, lowerBound, upperBound});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::clamp
// Il2CppName: clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Unity::Mathematics::math::clamp)> {
  static const MethodInfo* get() {
    static auto* valueToClamp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lowerBound = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upperBound = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valueToClamp, lowerBound, upperBound});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::abs
// Il2CppName: abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::abs)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::abs
// Il2CppName: abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::abs)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::abs
// Il2CppName: abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::abs)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::abs
// Il2CppName: abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&Unity::Mathematics::math::abs)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::dot
// Il2CppName: dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::dot)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::dot
// Il2CppName: dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3)>(&Unity::Mathematics::math::dot)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::dot
// Il2CppName: dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float4, ::Unity::Mathematics::float4)>(&Unity::Mathematics::math::dot)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::dot
// Il2CppName: dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Unity::Mathematics::double2, ::Unity::Mathematics::double2)>(&Unity::Mathematics::math::dot)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::atan
// Il2CppName: atan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::atan)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "atan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::atan
// Il2CppName: atan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::atan)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "atan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::cos
// Il2CppName: cos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::cos)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "cos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::cos
// Il2CppName: cos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::cos)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "cos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sin
// Il2CppName: sin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::sin)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sin
// Il2CppName: sin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::sin)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::floor
// Il2CppName: floor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::floor)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "floor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::ceil
// Il2CppName: ceil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::ceil)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "ceil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::rcp
// Il2CppName: rcp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::rcp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "rcp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::rcp
// Il2CppName: rcp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::rcp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "rcp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sign
// Il2CppName: sign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::sign)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sign
// Il2CppName: sign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::sign)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::pow
// Il2CppName: pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Unity::Mathematics::math::pow)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::log2
// Il2CppName: log2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::log2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "log2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sqrt
// Il2CppName: sqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::sqrt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sqrt
// Il2CppName: sqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::sqrt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sqrt
// Il2CppName: sqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&Unity::Mathematics::math::sqrt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::rsqrt
// Il2CppName: rsqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::rsqrt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "rsqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::normalize
// Il2CppName: normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float2 (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::normalize)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::normalize
// Il2CppName: normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::normalize)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::length
// Il2CppName: length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::length)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::length
// Il2CppName: length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::length)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::length
// Il2CppName: length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::length)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::length
// Il2CppName: length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Unity::Mathematics::double2)>(&Unity::Mathematics::math::length)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lengthsq
// Il2CppName: lengthsq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::lengthsq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lengthsq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lengthsq
// Il2CppName: lengthsq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::lengthsq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lengthsq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lengthsq
// Il2CppName: lengthsq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::lengthsq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lengthsq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distance
// Il2CppName: distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::distance)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distance
// Il2CppName: distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Unity::Mathematics::double2, ::Unity::Mathematics::double2)>(&Unity::Mathematics::math::distance)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distancesq
// Il2CppName: distancesq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Unity::Mathematics::math::distancesq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distancesq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distancesq
// Il2CppName: distancesq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float2, ::Unity::Mathematics::float2)>(&Unity::Mathematics::math::distancesq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distancesq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distancesq
// Il2CppName: distancesq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3)>(&Unity::Mathematics::math::distancesq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distancesq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::distancesq
// Il2CppName: distancesq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float4, ::Unity::Mathematics::float4)>(&Unity::Mathematics::math::distancesq)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "distancesq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::cross
// Il2CppName: cross
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3 (*)(::Unity::Mathematics::float3, ::Unity::Mathematics::float3)>(&Unity::Mathematics::math::cross)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "cross", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::any
// Il2CppName: any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::bool2)>(&Unity::Mathematics::math::any)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "bool2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::any
// Il2CppName: any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Mathematics::float2)>(&Unity::Mathematics::math::any)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::select
// Il2CppName: select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, bool)>(&Unity::Mathematics::math::select)> {
  static const MethodInfo* get() {
    static auto* falseValue = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* trueValue = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* test = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{falseValue, trueValue, test});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::select
// Il2CppName: select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (*)(::Unity::Mathematics::uint2, ::Unity::Mathematics::uint2, ::Unity::Mathematics::bool2)>(&Unity::Mathematics::math::select)> {
  static const MethodInfo* get() {
    static auto* falseValue = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint2")->byval_arg;
    static auto* trueValue = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint2")->byval_arg;
    static auto* test = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "bool2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{falseValue, trueValue, test});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::sincos
// Il2CppName: sincos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Mathematics::float3, ByRef<::Unity::Mathematics::float3>, ByRef<::Unity::Mathematics::float3>)>(&Unity::Mathematics::math::sincos)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "sincos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, s, c});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lzcnt
// Il2CppName: lzcnt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::lzcnt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lzcnt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::lzcnt
// Il2CppName: lzcnt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Unity::Mathematics::math::lzcnt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "lzcnt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::tzcnt
// Il2CppName: tzcnt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::tzcnt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "tzcnt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::tzcnt
// Il2CppName: tzcnt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Unity::Mathematics::math::tzcnt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "tzcnt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::tzcnt
// Il2CppName: tzcnt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&Unity::Mathematics::math::tzcnt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "tzcnt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::ceilpow2
// Il2CppName: ceilpow2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::ceilpow2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "ceilpow2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::ceilpow2
// Il2CppName: ceilpow2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::int2 (*)(::Unity::Mathematics::int2)>(&Unity::Mathematics::math::ceilpow2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "ceilpow2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::ceillog2
// Il2CppName: ceillog2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::ceillog2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "ceillog2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::floorlog2
// Il2CppName: floorlog2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Mathematics::math::floorlog2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "floorlog2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::radians
// Il2CppName: radians
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Unity::Mathematics::math::radians)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "radians", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::csum
// Il2CppName: csum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint2)>(&Unity::Mathematics::math::csum)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "csum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::csum
// Il2CppName: csum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint3)>(&Unity::Mathematics::math::csum)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "csum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::csum
// Il2CppName: csum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint4)>(&Unity::Mathematics::math::csum)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "csum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::csum
// Il2CppName: csum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Mathematics::float3)>(&Unity::Mathematics::math::csum)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "csum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::f16tof32
// Il2CppName: f16tof32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint)>(&Unity::Mathematics::math::f16tof32)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "f16tof32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::fold_to_uint
// Il2CppName: fold_to_uint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(double)>(&Unity::Mathematics::math::fold_to_uint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "fold_to_uint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::fold_to_uint
// Il2CppName: fold_to_uint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (*)(::Unity::Mathematics::double2)>(&Unity::Mathematics::math::fold_to_uint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "double2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "fold_to_uint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::float3x3
// Il2CppName: float3x3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float3x3 (*)(::Unity::Mathematics::quaternion)>(&Unity::Mathematics::math::float3x3)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "float3x3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::mul
// Il2CppName: mul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4 (*)(::Unity::Mathematics::float4x4, ::Unity::Mathematics::float4)>(&Unity::Mathematics::math::mul)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "mul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::mul
// Il2CppName: mul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::float4x4 (*)(::Unity::Mathematics::float4x4, ::Unity::Mathematics::float4x4)>(&Unity::Mathematics::math::mul)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4x4")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "mul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::quaternion
// Il2CppName: quaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::quaternion (*)(::Unity::Mathematics::float4)>(&Unity::Mathematics::math::quaternion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "quaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::mul
// Il2CppName: mul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::quaternion (*)(::Unity::Mathematics::quaternion, ::Unity::Mathematics::quaternion)>(&Unity::Mathematics::math::mul)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "mul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::quaternion)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::uint2
// Il2CppName: uint2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint2 (*)(uint, uint)>(&Unity::Mathematics::math::uint2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "uint2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint2)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::uint3
// Il2CppName: uint3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint3 (*)(uint, uint, uint)>(&Unity::Mathematics::math::uint3)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "uint3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint3)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::uint4
// Il2CppName: uint4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Mathematics::uint4 (*)(uint, uint, uint, uint)>(&Unity::Mathematics::math::uint4)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "uint4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, w});
  }
};
// Writing MetadataGetter for method: Unity::Mathematics::math::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Unity::Mathematics::uint4)>(&Unity::Mathematics::math::hash)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "uint4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Mathematics::math*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
