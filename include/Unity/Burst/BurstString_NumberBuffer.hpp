// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Burst.BurstString
#include "Unity/Burst/BurstString.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Burst.BurstString/NumberBufferKind
#include "Unity/Burst/BurstString_NumberBufferKind.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::BurstString::NumberBuffer, "Unity.Burst", "BurstString/NumberBuffer");
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // Size: 0x15
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Burst.BurstString/NumberBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct BurstString::NumberBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Byte* _buffer
    // Size: 0x8
    // Offset: 0x0
    uint8_t* buffer;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // public Unity.Burst.BurstString/NumberBufferKind Kind
    // Size: 0x4
    // Offset: 0x8
    ::Unity::Burst::BurstString::NumberBufferKind Kind;
    // Field size check
    static_assert(sizeof(::Unity::Burst::BurstString::NumberBufferKind) == 0x4);
    // public System.Int32 DigitsCount
    // Size: 0x4
    // Offset: 0xC
    int DigitsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Scale
    // Size: 0x4
    // Offset: 0x10
    int Scale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Boolean IsNegative
    // Size: 0x1
    // Offset: 0x14
    bool IsNegative;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: NumberBuffer
    constexpr NumberBuffer(uint8_t* buffer_ = {}, ::Unity::Burst::BurstString::NumberBufferKind Kind_ = {}, int DigitsCount_ = {}, int Scale_ = {}, bool IsNegative_ = {}) noexcept : buffer{buffer_}, Kind{Kind_}, DigitsCount{DigitsCount_}, Scale{Scale_}, IsNegative{IsNegative_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Byte* _buffer
    [[deprecated("Use field access instead!")]] uint8_t*& dyn__buffer();
    // Get instance field reference: public Unity.Burst.BurstString/NumberBufferKind Kind
    [[deprecated("Use field access instead!")]] ::Unity::Burst::BurstString::NumberBufferKind& dyn_Kind();
    // Get instance field reference: public System.Int32 DigitsCount
    [[deprecated("Use field access instead!")]] int& dyn_DigitsCount();
    // Get instance field reference: public System.Int32 Scale
    [[deprecated("Use field access instead!")]] int& dyn_Scale();
    // Get instance field reference: public readonly System.Boolean IsNegative
    [[deprecated("Use field access instead!")]] bool& dyn_IsNegative();
    // public System.Void .ctor(Unity.Burst.BurstString/NumberBufferKind kind, System.Byte* buffer, System.Int32 digitsCount, System.Int32 scale, System.Boolean isNegative)
    // Offset: 0x508308C
    NumberBuffer(::Unity::Burst::BurstString::NumberBufferKind kind, uint8_t* buffer, int digitsCount, int scale, bool isNegative);
    // public System.Byte* GetDigitsPointer()
    // Offset: 0x508530C
    uint8_t* GetDigitsPointer();
  }; // Unity.Burst.BurstString/NumberBuffer
  #pragma pack(pop)
  static check_size<sizeof(BurstString::NumberBuffer), 20 + sizeof(bool)> __Unity_Burst_BurstString_NumberBufferSizeCheck;
  static_assert(sizeof(BurstString::NumberBuffer) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::BurstString::NumberBuffer::NumberBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Burst::BurstString::NumberBuffer::GetDigitsPointer
// Il2CppName: GetDigitsPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (Unity::Burst::BurstString::NumberBuffer::*)()>(&Unity::Burst::BurstString::NumberBuffer::GetDigitsPointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::NumberBuffer), "GetDigitsPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
