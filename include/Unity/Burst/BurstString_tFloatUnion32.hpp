// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Burst.BurstString
#include "Unity/Burst/BurstString.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::BurstString::tFloatUnion32, "Unity.Burst", "BurstString/tFloatUnion32");
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Burst.BurstString/tFloatUnion32
  // [TokenAttribute] Offset: FFFFFFFF
  struct BurstString::tFloatUnion32/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single m_floatingPoint
    // Size: 0x4
    // Offset: 0x0
    float m_floatingPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.UInt32 m_integer
    // Size: 0x4
    // Offset: 0x0
    uint m_integer;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: tFloatUnion32
    constexpr tFloatUnion32(float m_floatingPoint_ = {}, uint m_integer_ = {}) noexcept : m_floatingPoint{m_floatingPoint_}, m_integer{m_integer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single m_floatingPoint
    [[deprecated("Use field access instead!")]] float& dyn_m_floatingPoint();
    // Get instance field reference: public System.UInt32 m_integer
    [[deprecated("Use field access instead!")]] uint& dyn_m_integer();
    // public System.Boolean IsNegative()
    // Offset: 0x50850FC
    bool IsNegative();
    // public System.UInt32 GetExponent()
    // Offset: 0x50850E4
    uint GetExponent();
    // public System.UInt32 GetMantissa()
    // Offset: 0x50850F0
    uint GetMantissa();
  }; // Unity.Burst.BurstString/tFloatUnion32
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::BurstString::tFloatUnion32::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Burst::BurstString::tFloatUnion32::*)()>(&Unity::Burst::BurstString::tFloatUnion32::IsNegative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::tFloatUnion32), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstString::tFloatUnion32::GetExponent
// Il2CppName: GetExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Unity::Burst::BurstString::tFloatUnion32::*)()>(&Unity::Burst::BurstString::tFloatUnion32::GetExponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::tFloatUnion32), "GetExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstString::tFloatUnion32::GetMantissa
// Il2CppName: GetMantissa
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Unity::Burst::BurstString::tFloatUnion32::*)()>(&Unity::Burst::BurstString::tFloatUnion32::GetMantissa)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::tFloatUnion32), "GetMantissa", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
