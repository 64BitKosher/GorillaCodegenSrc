// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Unity.Burst.Intrinsics
namespace Unity::Burst::Intrinsics {
  // Forward declaring type: v64
  struct v64;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::Intrinsics::v64, "Unity.Burst.Intrinsics", "v64");
// Type namespace: Unity.Burst.Intrinsics
namespace Unity::Burst::Intrinsics {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Burst.Intrinsics.v64
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  struct v64/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte Byte0
    // Size: 0x1
    // Offset: 0x0
    uint8_t Byte0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte1
    // Size: 0x1
    // Offset: 0x1
    uint8_t Byte1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte2
    // Size: 0x1
    // Offset: 0x2
    uint8_t Byte2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte3
    // Size: 0x1
    // Offset: 0x3
    uint8_t Byte3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte4
    // Size: 0x1
    // Offset: 0x4
    uint8_t Byte4;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte5
    // Size: 0x1
    // Offset: 0x5
    uint8_t Byte5;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte6
    // Size: 0x1
    // Offset: 0x6
    uint8_t Byte6;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte7
    // Size: 0x1
    // Offset: 0x7
    uint8_t Byte7;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.SByte SByte0
    // Size: 0x1
    // Offset: 0x0
    int8_t SByte0;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte1
    // Size: 0x1
    // Offset: 0x1
    int8_t SByte1;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte2
    // Size: 0x1
    // Offset: 0x2
    int8_t SByte2;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte3
    // Size: 0x1
    // Offset: 0x3
    int8_t SByte3;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte4
    // Size: 0x1
    // Offset: 0x4
    int8_t SByte4;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte5
    // Size: 0x1
    // Offset: 0x5
    int8_t SByte5;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte6
    // Size: 0x1
    // Offset: 0x6
    int8_t SByte6;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte7
    // Size: 0x1
    // Offset: 0x7
    int8_t SByte7;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.UInt16 UShort0
    // Size: 0x2
    // Offset: 0x0
    uint16_t UShort0;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort1
    // Size: 0x2
    // Offset: 0x2
    uint16_t UShort1;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort2
    // Size: 0x2
    // Offset: 0x4
    uint16_t UShort2;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort3
    // Size: 0x2
    // Offset: 0x6
    uint16_t UShort3;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.Int16 SShort0
    // Size: 0x2
    // Offset: 0x0
    int16_t SShort0;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort1
    // Size: 0x2
    // Offset: 0x2
    int16_t SShort1;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort2
    // Size: 0x2
    // Offset: 0x4
    int16_t SShort2;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort3
    // Size: 0x2
    // Offset: 0x6
    int16_t SShort3;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.UInt32 UInt0
    // Size: 0x4
    // Offset: 0x0
    uint UInt0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt1
    // Size: 0x4
    // Offset: 0x4
    uint UInt1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 SInt0
    // Size: 0x4
    // Offset: 0x0
    int SInt0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt1
    // Size: 0x4
    // Offset: 0x4
    int SInt1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt64 ULong0
    // Size: 0x8
    // Offset: 0x0
    uint64_t ULong0;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int64 SLong0
    // Size: 0x8
    // Offset: 0x0
    int64_t SLong0;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Single Float0
    // Size: 0x4
    // Offset: 0x0
    float Float0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float1
    // Size: 0x4
    // Offset: 0x4
    float Float1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Double Double0
    // Size: 0x8
    // Offset: 0x0
    double Double0;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: v64
    constexpr v64(uint8_t Byte0_ = {}, uint8_t Byte1_ = {}, uint8_t Byte2_ = {}, uint8_t Byte3_ = {}, uint8_t Byte4_ = {}, uint8_t Byte5_ = {}, uint8_t Byte6_ = {}, uint8_t Byte7_ = {}, int8_t SByte0_ = {}, int8_t SByte1_ = {}, int8_t SByte2_ = {}, int8_t SByte3_ = {}, int8_t SByte4_ = {}, int8_t SByte5_ = {}, int8_t SByte6_ = {}, int8_t SByte7_ = {}, uint16_t UShort0_ = {}, uint16_t UShort1_ = {}, uint16_t UShort2_ = {}, uint16_t UShort3_ = {}, int16_t SShort0_ = {}, int16_t SShort1_ = {}, int16_t SShort2_ = {}, int16_t SShort3_ = {}, uint UInt0_ = {}, uint UInt1_ = {}, int SInt0_ = {}, int SInt1_ = {}, uint64_t ULong0_ = {}, int64_t SLong0_ = {}, float Float0_ = {}, float Float1_ = {}, double Double0_ = {}) noexcept : Byte0{Byte0_}, Byte1{Byte1_}, Byte2{Byte2_}, Byte3{Byte3_}, Byte4{Byte4_}, Byte5{Byte5_}, Byte6{Byte6_}, Byte7{Byte7_}, SByte0{SByte0_}, SByte1{SByte1_}, SByte2{SByte2_}, SByte3{SByte3_}, SByte4{SByte4_}, SByte5{SByte5_}, SByte6{SByte6_}, SByte7{SByte7_}, UShort0{UShort0_}, UShort1{UShort1_}, UShort2{UShort2_}, UShort3{UShort3_}, SShort0{SShort0_}, SShort1{SShort1_}, SShort2{SShort2_}, SShort3{SShort3_}, UInt0{UInt0_}, UInt1{UInt1_}, SInt0{SInt0_}, SInt1{SInt1_}, ULong0{ULong0_}, SLong0{SLong0_}, Float0{Float0_}, Float1{Float1_}, Double0{Double0_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Byte Byte0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte0();
    // Get instance field reference: public System.Byte Byte1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte1();
    // Get instance field reference: public System.Byte Byte2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte2();
    // Get instance field reference: public System.Byte Byte3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte3();
    // Get instance field reference: public System.Byte Byte4
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte4();
    // Get instance field reference: public System.Byte Byte5
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte5();
    // Get instance field reference: public System.Byte Byte6
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte6();
    // Get instance field reference: public System.Byte Byte7
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte7();
    // Get instance field reference: public System.SByte SByte0
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte0();
    // Get instance field reference: public System.SByte SByte1
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte1();
    // Get instance field reference: public System.SByte SByte2
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte2();
    // Get instance field reference: public System.SByte SByte3
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte3();
    // Get instance field reference: public System.SByte SByte4
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte4();
    // Get instance field reference: public System.SByte SByte5
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte5();
    // Get instance field reference: public System.SByte SByte6
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte6();
    // Get instance field reference: public System.SByte SByte7
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte7();
    // Get instance field reference: public System.UInt16 UShort0
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort0();
    // Get instance field reference: public System.UInt16 UShort1
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort1();
    // Get instance field reference: public System.UInt16 UShort2
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort2();
    // Get instance field reference: public System.UInt16 UShort3
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort3();
    // Get instance field reference: public System.Int16 SShort0
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort0();
    // Get instance field reference: public System.Int16 SShort1
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort1();
    // Get instance field reference: public System.Int16 SShort2
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort2();
    // Get instance field reference: public System.Int16 SShort3
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort3();
    // Get instance field reference: public System.UInt32 UInt0
    [[deprecated("Use field access instead!")]] uint& dyn_UInt0();
    // Get instance field reference: public System.UInt32 UInt1
    [[deprecated("Use field access instead!")]] uint& dyn_UInt1();
    // Get instance field reference: public System.Int32 SInt0
    [[deprecated("Use field access instead!")]] int& dyn_SInt0();
    // Get instance field reference: public System.Int32 SInt1
    [[deprecated("Use field access instead!")]] int& dyn_SInt1();
    // Get instance field reference: public System.UInt64 ULong0
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ULong0();
    // Get instance field reference: public System.Int64 SLong0
    [[deprecated("Use field access instead!")]] int64_t& dyn_SLong0();
    // Get instance field reference: public System.Single Float0
    [[deprecated("Use field access instead!")]] float& dyn_Float0();
    // Get instance field reference: public System.Single Float1
    [[deprecated("Use field access instead!")]] float& dyn_Float1();
    // Get instance field reference: public System.Double Double0
    [[deprecated("Use field access instead!")]] double& dyn_Double0();
  }; // Unity.Burst.Intrinsics.v64
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
