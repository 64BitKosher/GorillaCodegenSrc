// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Burst.Intrinsics.v128
#include "Unity/Burst/Intrinsics/v128.hpp"
// Completed includes
// Type namespace: Unity.Burst.Intrinsics
namespace Unity::Burst::Intrinsics {
  // Forward declaring type: v256
  struct v256;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::Intrinsics::v256, "Unity.Burst.Intrinsics", "v256");
// Type namespace: Unity.Burst.Intrinsics
namespace Unity::Burst::Intrinsics {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Burst.Intrinsics.v256
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  struct v256/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte Byte0
    // Size: 0x1
    // Offset: 0x0
    uint8_t Byte0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte1
    // Size: 0x1
    // Offset: 0x1
    uint8_t Byte1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte2
    // Size: 0x1
    // Offset: 0x2
    uint8_t Byte2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte3
    // Size: 0x1
    // Offset: 0x3
    uint8_t Byte3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte4
    // Size: 0x1
    // Offset: 0x4
    uint8_t Byte4;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte5
    // Size: 0x1
    // Offset: 0x5
    uint8_t Byte5;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte6
    // Size: 0x1
    // Offset: 0x6
    uint8_t Byte6;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte7
    // Size: 0x1
    // Offset: 0x7
    uint8_t Byte7;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte8
    // Size: 0x1
    // Offset: 0x8
    uint8_t Byte8;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte9
    // Size: 0x1
    // Offset: 0x9
    uint8_t Byte9;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte10
    // Size: 0x1
    // Offset: 0xA
    uint8_t Byte10;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte11
    // Size: 0x1
    // Offset: 0xB
    uint8_t Byte11;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte12
    // Size: 0x1
    // Offset: 0xC
    uint8_t Byte12;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte13
    // Size: 0x1
    // Offset: 0xD
    uint8_t Byte13;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte14
    // Size: 0x1
    // Offset: 0xE
    uint8_t Byte14;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte15
    // Size: 0x1
    // Offset: 0xF
    uint8_t Byte15;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte16
    // Size: 0x1
    // Offset: 0x10
    uint8_t Byte16;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte17
    // Size: 0x1
    // Offset: 0x11
    uint8_t Byte17;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte18
    // Size: 0x1
    // Offset: 0x12
    uint8_t Byte18;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte19
    // Size: 0x1
    // Offset: 0x13
    uint8_t Byte19;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte20
    // Size: 0x1
    // Offset: 0x14
    uint8_t Byte20;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte21
    // Size: 0x1
    // Offset: 0x15
    uint8_t Byte21;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte22
    // Size: 0x1
    // Offset: 0x16
    uint8_t Byte22;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte23
    // Size: 0x1
    // Offset: 0x17
    uint8_t Byte23;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte24
    // Size: 0x1
    // Offset: 0x18
    uint8_t Byte24;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte25
    // Size: 0x1
    // Offset: 0x19
    uint8_t Byte25;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte26
    // Size: 0x1
    // Offset: 0x1A
    uint8_t Byte26;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte27
    // Size: 0x1
    // Offset: 0x1B
    uint8_t Byte27;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte28
    // Size: 0x1
    // Offset: 0x1C
    uint8_t Byte28;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte29
    // Size: 0x1
    // Offset: 0x1D
    uint8_t Byte29;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte30
    // Size: 0x1
    // Offset: 0x1E
    uint8_t Byte30;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte31
    // Size: 0x1
    // Offset: 0x1F
    uint8_t Byte31;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.SByte SByte0
    // Size: 0x1
    // Offset: 0x0
    int8_t SByte0;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte1
    // Size: 0x1
    // Offset: 0x1
    int8_t SByte1;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte2
    // Size: 0x1
    // Offset: 0x2
    int8_t SByte2;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte3
    // Size: 0x1
    // Offset: 0x3
    int8_t SByte3;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte4
    // Size: 0x1
    // Offset: 0x4
    int8_t SByte4;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte5
    // Size: 0x1
    // Offset: 0x5
    int8_t SByte5;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte6
    // Size: 0x1
    // Offset: 0x6
    int8_t SByte6;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte7
    // Size: 0x1
    // Offset: 0x7
    int8_t SByte7;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte8
    // Size: 0x1
    // Offset: 0x8
    int8_t SByte8;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte9
    // Size: 0x1
    // Offset: 0x9
    int8_t SByte9;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte10
    // Size: 0x1
    // Offset: 0xA
    int8_t SByte10;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte11
    // Size: 0x1
    // Offset: 0xB
    int8_t SByte11;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte12
    // Size: 0x1
    // Offset: 0xC
    int8_t SByte12;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte13
    // Size: 0x1
    // Offset: 0xD
    int8_t SByte13;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte14
    // Size: 0x1
    // Offset: 0xE
    int8_t SByte14;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte15
    // Size: 0x1
    // Offset: 0xF
    int8_t SByte15;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte16
    // Size: 0x1
    // Offset: 0x10
    int8_t SByte16;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte17
    // Size: 0x1
    // Offset: 0x11
    int8_t SByte17;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte18
    // Size: 0x1
    // Offset: 0x12
    int8_t SByte18;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte19
    // Size: 0x1
    // Offset: 0x13
    int8_t SByte19;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte20
    // Size: 0x1
    // Offset: 0x14
    int8_t SByte20;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte21
    // Size: 0x1
    // Offset: 0x15
    int8_t SByte21;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte22
    // Size: 0x1
    // Offset: 0x16
    int8_t SByte22;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte23
    // Size: 0x1
    // Offset: 0x17
    int8_t SByte23;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte24
    // Size: 0x1
    // Offset: 0x18
    int8_t SByte24;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte25
    // Size: 0x1
    // Offset: 0x19
    int8_t SByte25;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte26
    // Size: 0x1
    // Offset: 0x1A
    int8_t SByte26;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte27
    // Size: 0x1
    // Offset: 0x1B
    int8_t SByte27;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte28
    // Size: 0x1
    // Offset: 0x1C
    int8_t SByte28;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte29
    // Size: 0x1
    // Offset: 0x1D
    int8_t SByte29;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte30
    // Size: 0x1
    // Offset: 0x1E
    int8_t SByte30;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.SByte SByte31
    // Size: 0x1
    // Offset: 0x1F
    int8_t SByte31;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.UInt16 UShort0
    // Size: 0x2
    // Offset: 0x0
    uint16_t UShort0;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort1
    // Size: 0x2
    // Offset: 0x2
    uint16_t UShort1;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort2
    // Size: 0x2
    // Offset: 0x4
    uint16_t UShort2;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort3
    // Size: 0x2
    // Offset: 0x6
    uint16_t UShort3;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort4
    // Size: 0x2
    // Offset: 0x8
    uint16_t UShort4;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort5
    // Size: 0x2
    // Offset: 0xA
    uint16_t UShort5;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort6
    // Size: 0x2
    // Offset: 0xC
    uint16_t UShort6;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort7
    // Size: 0x2
    // Offset: 0xE
    uint16_t UShort7;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort8
    // Size: 0x2
    // Offset: 0x10
    uint16_t UShort8;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort9
    // Size: 0x2
    // Offset: 0x12
    uint16_t UShort9;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort10
    // Size: 0x2
    // Offset: 0x14
    uint16_t UShort10;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort11
    // Size: 0x2
    // Offset: 0x16
    uint16_t UShort11;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort12
    // Size: 0x2
    // Offset: 0x18
    uint16_t UShort12;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort13
    // Size: 0x2
    // Offset: 0x1A
    uint16_t UShort13;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort14
    // Size: 0x2
    // Offset: 0x1C
    uint16_t UShort14;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 UShort15
    // Size: 0x2
    // Offset: 0x1E
    uint16_t UShort15;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.Int16 SShort0
    // Size: 0x2
    // Offset: 0x0
    int16_t SShort0;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort1
    // Size: 0x2
    // Offset: 0x2
    int16_t SShort1;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort2
    // Size: 0x2
    // Offset: 0x4
    int16_t SShort2;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort3
    // Size: 0x2
    // Offset: 0x6
    int16_t SShort3;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort4
    // Size: 0x2
    // Offset: 0x8
    int16_t SShort4;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort5
    // Size: 0x2
    // Offset: 0xA
    int16_t SShort5;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort6
    // Size: 0x2
    // Offset: 0xC
    int16_t SShort6;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort7
    // Size: 0x2
    // Offset: 0xE
    int16_t SShort7;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort8
    // Size: 0x2
    // Offset: 0x10
    int16_t SShort8;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort9
    // Size: 0x2
    // Offset: 0x12
    int16_t SShort9;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort10
    // Size: 0x2
    // Offset: 0x14
    int16_t SShort10;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort11
    // Size: 0x2
    // Offset: 0x16
    int16_t SShort11;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort12
    // Size: 0x2
    // Offset: 0x18
    int16_t SShort12;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort13
    // Size: 0x2
    // Offset: 0x1A
    int16_t SShort13;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort14
    // Size: 0x2
    // Offset: 0x1C
    int16_t SShort14;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 SShort15
    // Size: 0x2
    // Offset: 0x1E
    int16_t SShort15;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.UInt32 UInt0
    // Size: 0x4
    // Offset: 0x0
    uint UInt0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt1
    // Size: 0x4
    // Offset: 0x4
    uint UInt1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt2
    // Size: 0x4
    // Offset: 0x8
    uint UInt2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt3
    // Size: 0x4
    // Offset: 0xC
    uint UInt3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt4
    // Size: 0x4
    // Offset: 0x10
    uint UInt4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt5
    // Size: 0x4
    // Offset: 0x14
    uint UInt5;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt6
    // Size: 0x4
    // Offset: 0x18
    uint UInt6;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 UInt7
    // Size: 0x4
    // Offset: 0x1C
    uint UInt7;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 SInt0
    // Size: 0x4
    // Offset: 0x0
    int SInt0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt1
    // Size: 0x4
    // Offset: 0x4
    int SInt1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt2
    // Size: 0x4
    // Offset: 0x8
    int SInt2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt3
    // Size: 0x4
    // Offset: 0xC
    int SInt3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt4
    // Size: 0x4
    // Offset: 0x10
    int SInt4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt5
    // Size: 0x4
    // Offset: 0x14
    int SInt5;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt6
    // Size: 0x4
    // Offset: 0x18
    int SInt6;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SInt7
    // Size: 0x4
    // Offset: 0x1C
    int SInt7;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt64 ULong0
    // Size: 0x8
    // Offset: 0x0
    uint64_t ULong0;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 ULong1
    // Size: 0x8
    // Offset: 0x8
    uint64_t ULong1;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 ULong2
    // Size: 0x8
    // Offset: 0x10
    uint64_t ULong2;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 ULong3
    // Size: 0x8
    // Offset: 0x18
    uint64_t ULong3;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int64 SLong0
    // Size: 0x8
    // Offset: 0x0
    int64_t SLong0;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 SLong1
    // Size: 0x8
    // Offset: 0x8
    int64_t SLong1;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 SLong2
    // Size: 0x8
    // Offset: 0x10
    int64_t SLong2;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 SLong3
    // Size: 0x8
    // Offset: 0x18
    int64_t SLong3;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Single Float0
    // Size: 0x4
    // Offset: 0x0
    float Float0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float1
    // Size: 0x4
    // Offset: 0x4
    float Float1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float2
    // Size: 0x4
    // Offset: 0x8
    float Float2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float3
    // Size: 0x4
    // Offset: 0xC
    float Float3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float4
    // Size: 0x4
    // Offset: 0x10
    float Float4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float5
    // Size: 0x4
    // Offset: 0x14
    float Float5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float6
    // Size: 0x4
    // Offset: 0x18
    float Float6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Float7
    // Size: 0x4
    // Offset: 0x1C
    float Float7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Double Double0
    // Size: 0x8
    // Offset: 0x0
    double Double0;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Double1
    // Size: 0x8
    // Offset: 0x8
    double Double1;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Double2
    // Size: 0x8
    // Offset: 0x10
    double Double2;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Double3
    // Size: 0x8
    // Offset: 0x18
    double Double3;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public Unity.Burst.Intrinsics.v128 Lo128
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Burst::Intrinsics::v128 Lo128;
    // public Unity.Burst.Intrinsics.v128 Hi128
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Burst::Intrinsics::v128 Hi128;
    public:
    // Creating value type constructor for type: v256
    constexpr v256(uint8_t Byte0_ = {}, uint8_t Byte1_ = {}, uint8_t Byte2_ = {}, uint8_t Byte3_ = {}, uint8_t Byte4_ = {}, uint8_t Byte5_ = {}, uint8_t Byte6_ = {}, uint8_t Byte7_ = {}, uint8_t Byte8_ = {}, uint8_t Byte9_ = {}, uint8_t Byte10_ = {}, uint8_t Byte11_ = {}, uint8_t Byte12_ = {}, uint8_t Byte13_ = {}, uint8_t Byte14_ = {}, uint8_t Byte15_ = {}, uint8_t Byte16_ = {}, uint8_t Byte17_ = {}, uint8_t Byte18_ = {}, uint8_t Byte19_ = {}, uint8_t Byte20_ = {}, uint8_t Byte21_ = {}, uint8_t Byte22_ = {}, uint8_t Byte23_ = {}, uint8_t Byte24_ = {}, uint8_t Byte25_ = {}, uint8_t Byte26_ = {}, uint8_t Byte27_ = {}, uint8_t Byte28_ = {}, uint8_t Byte29_ = {}, uint8_t Byte30_ = {}, uint8_t Byte31_ = {}, int8_t SByte0_ = {}, int8_t SByte1_ = {}, int8_t SByte2_ = {}, int8_t SByte3_ = {}, int8_t SByte4_ = {}, int8_t SByte5_ = {}, int8_t SByte6_ = {}, int8_t SByte7_ = {}, int8_t SByte8_ = {}, int8_t SByte9_ = {}, int8_t SByte10_ = {}, int8_t SByte11_ = {}, int8_t SByte12_ = {}, int8_t SByte13_ = {}, int8_t SByte14_ = {}, int8_t SByte15_ = {}, int8_t SByte16_ = {}, int8_t SByte17_ = {}, int8_t SByte18_ = {}, int8_t SByte19_ = {}, int8_t SByte20_ = {}, int8_t SByte21_ = {}, int8_t SByte22_ = {}, int8_t SByte23_ = {}, int8_t SByte24_ = {}, int8_t SByte25_ = {}, int8_t SByte26_ = {}, int8_t SByte27_ = {}, int8_t SByte28_ = {}, int8_t SByte29_ = {}, int8_t SByte30_ = {}, int8_t SByte31_ = {}, uint16_t UShort0_ = {}, uint16_t UShort1_ = {}, uint16_t UShort2_ = {}, uint16_t UShort3_ = {}, uint16_t UShort4_ = {}, uint16_t UShort5_ = {}, uint16_t UShort6_ = {}, uint16_t UShort7_ = {}, uint16_t UShort8_ = {}, uint16_t UShort9_ = {}, uint16_t UShort10_ = {}, uint16_t UShort11_ = {}, uint16_t UShort12_ = {}, uint16_t UShort13_ = {}, uint16_t UShort14_ = {}, uint16_t UShort15_ = {}, int16_t SShort0_ = {}, int16_t SShort1_ = {}, int16_t SShort2_ = {}, int16_t SShort3_ = {}, int16_t SShort4_ = {}, int16_t SShort5_ = {}, int16_t SShort6_ = {}, int16_t SShort7_ = {}, int16_t SShort8_ = {}, int16_t SShort9_ = {}, int16_t SShort10_ = {}, int16_t SShort11_ = {}, int16_t SShort12_ = {}, int16_t SShort13_ = {}, int16_t SShort14_ = {}, int16_t SShort15_ = {}, uint UInt0_ = {}, uint UInt1_ = {}, uint UInt2_ = {}, uint UInt3_ = {}, uint UInt4_ = {}, uint UInt5_ = {}, uint UInt6_ = {}, uint UInt7_ = {}, int SInt0_ = {}, int SInt1_ = {}, int SInt2_ = {}, int SInt3_ = {}, int SInt4_ = {}, int SInt5_ = {}, int SInt6_ = {}, int SInt7_ = {}, uint64_t ULong0_ = {}, uint64_t ULong1_ = {}, uint64_t ULong2_ = {}, uint64_t ULong3_ = {}, int64_t SLong0_ = {}, int64_t SLong1_ = {}, int64_t SLong2_ = {}, int64_t SLong3_ = {}, float Float0_ = {}, float Float1_ = {}, float Float2_ = {}, float Float3_ = {}, float Float4_ = {}, float Float5_ = {}, float Float6_ = {}, float Float7_ = {}, double Double0_ = {}, double Double1_ = {}, double Double2_ = {}, double Double3_ = {}, ::Unity::Burst::Intrinsics::v128 Lo128_ = {}, ::Unity::Burst::Intrinsics::v128 Hi128_ = {}) noexcept : Byte0{Byte0_}, Byte1{Byte1_}, Byte2{Byte2_}, Byte3{Byte3_}, Byte4{Byte4_}, Byte5{Byte5_}, Byte6{Byte6_}, Byte7{Byte7_}, Byte8{Byte8_}, Byte9{Byte9_}, Byte10{Byte10_}, Byte11{Byte11_}, Byte12{Byte12_}, Byte13{Byte13_}, Byte14{Byte14_}, Byte15{Byte15_}, Byte16{Byte16_}, Byte17{Byte17_}, Byte18{Byte18_}, Byte19{Byte19_}, Byte20{Byte20_}, Byte21{Byte21_}, Byte22{Byte22_}, Byte23{Byte23_}, Byte24{Byte24_}, Byte25{Byte25_}, Byte26{Byte26_}, Byte27{Byte27_}, Byte28{Byte28_}, Byte29{Byte29_}, Byte30{Byte30_}, Byte31{Byte31_}, SByte0{SByte0_}, SByte1{SByte1_}, SByte2{SByte2_}, SByte3{SByte3_}, SByte4{SByte4_}, SByte5{SByte5_}, SByte6{SByte6_}, SByte7{SByte7_}, SByte8{SByte8_}, SByte9{SByte9_}, SByte10{SByte10_}, SByte11{SByte11_}, SByte12{SByte12_}, SByte13{SByte13_}, SByte14{SByte14_}, SByte15{SByte15_}, SByte16{SByte16_}, SByte17{SByte17_}, SByte18{SByte18_}, SByte19{SByte19_}, SByte20{SByte20_}, SByte21{SByte21_}, SByte22{SByte22_}, SByte23{SByte23_}, SByte24{SByte24_}, SByte25{SByte25_}, SByte26{SByte26_}, SByte27{SByte27_}, SByte28{SByte28_}, SByte29{SByte29_}, SByte30{SByte30_}, SByte31{SByte31_}, UShort0{UShort0_}, UShort1{UShort1_}, UShort2{UShort2_}, UShort3{UShort3_}, UShort4{UShort4_}, UShort5{UShort5_}, UShort6{UShort6_}, UShort7{UShort7_}, UShort8{UShort8_}, UShort9{UShort9_}, UShort10{UShort10_}, UShort11{UShort11_}, UShort12{UShort12_}, UShort13{UShort13_}, UShort14{UShort14_}, UShort15{UShort15_}, SShort0{SShort0_}, SShort1{SShort1_}, SShort2{SShort2_}, SShort3{SShort3_}, SShort4{SShort4_}, SShort5{SShort5_}, SShort6{SShort6_}, SShort7{SShort7_}, SShort8{SShort8_}, SShort9{SShort9_}, SShort10{SShort10_}, SShort11{SShort11_}, SShort12{SShort12_}, SShort13{SShort13_}, SShort14{SShort14_}, SShort15{SShort15_}, UInt0{UInt0_}, UInt1{UInt1_}, UInt2{UInt2_}, UInt3{UInt3_}, UInt4{UInt4_}, UInt5{UInt5_}, UInt6{UInt6_}, UInt7{UInt7_}, SInt0{SInt0_}, SInt1{SInt1_}, SInt2{SInt2_}, SInt3{SInt3_}, SInt4{SInt4_}, SInt5{SInt5_}, SInt6{SInt6_}, SInt7{SInt7_}, ULong0{ULong0_}, ULong1{ULong1_}, ULong2{ULong2_}, ULong3{ULong3_}, SLong0{SLong0_}, SLong1{SLong1_}, SLong2{SLong2_}, SLong3{SLong3_}, Float0{Float0_}, Float1{Float1_}, Float2{Float2_}, Float3{Float3_}, Float4{Float4_}, Float5{Float5_}, Float6{Float6_}, Float7{Float7_}, Double0{Double0_}, Double1{Double1_}, Double2{Double2_}, Double3{Double3_}, Lo128{Lo128_}, Hi128{Hi128_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Byte Byte0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte0();
    // Get instance field reference: public System.Byte Byte1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte1();
    // Get instance field reference: public System.Byte Byte2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte2();
    // Get instance field reference: public System.Byte Byte3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte3();
    // Get instance field reference: public System.Byte Byte4
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte4();
    // Get instance field reference: public System.Byte Byte5
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte5();
    // Get instance field reference: public System.Byte Byte6
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte6();
    // Get instance field reference: public System.Byte Byte7
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte7();
    // Get instance field reference: public System.Byte Byte8
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte8();
    // Get instance field reference: public System.Byte Byte9
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte9();
    // Get instance field reference: public System.Byte Byte10
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte10();
    // Get instance field reference: public System.Byte Byte11
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte11();
    // Get instance field reference: public System.Byte Byte12
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte12();
    // Get instance field reference: public System.Byte Byte13
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte13();
    // Get instance field reference: public System.Byte Byte14
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte14();
    // Get instance field reference: public System.Byte Byte15
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte15();
    // Get instance field reference: public System.Byte Byte16
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte16();
    // Get instance field reference: public System.Byte Byte17
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte17();
    // Get instance field reference: public System.Byte Byte18
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte18();
    // Get instance field reference: public System.Byte Byte19
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte19();
    // Get instance field reference: public System.Byte Byte20
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte20();
    // Get instance field reference: public System.Byte Byte21
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte21();
    // Get instance field reference: public System.Byte Byte22
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte22();
    // Get instance field reference: public System.Byte Byte23
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte23();
    // Get instance field reference: public System.Byte Byte24
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte24();
    // Get instance field reference: public System.Byte Byte25
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte25();
    // Get instance field reference: public System.Byte Byte26
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte26();
    // Get instance field reference: public System.Byte Byte27
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte27();
    // Get instance field reference: public System.Byte Byte28
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte28();
    // Get instance field reference: public System.Byte Byte29
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte29();
    // Get instance field reference: public System.Byte Byte30
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte30();
    // Get instance field reference: public System.Byte Byte31
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte31();
    // Get instance field reference: public System.SByte SByte0
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte0();
    // Get instance field reference: public System.SByte SByte1
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte1();
    // Get instance field reference: public System.SByte SByte2
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte2();
    // Get instance field reference: public System.SByte SByte3
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte3();
    // Get instance field reference: public System.SByte SByte4
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte4();
    // Get instance field reference: public System.SByte SByte5
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte5();
    // Get instance field reference: public System.SByte SByte6
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte6();
    // Get instance field reference: public System.SByte SByte7
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte7();
    // Get instance field reference: public System.SByte SByte8
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte8();
    // Get instance field reference: public System.SByte SByte9
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte9();
    // Get instance field reference: public System.SByte SByte10
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte10();
    // Get instance field reference: public System.SByte SByte11
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte11();
    // Get instance field reference: public System.SByte SByte12
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte12();
    // Get instance field reference: public System.SByte SByte13
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte13();
    // Get instance field reference: public System.SByte SByte14
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte14();
    // Get instance field reference: public System.SByte SByte15
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte15();
    // Get instance field reference: public System.SByte SByte16
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte16();
    // Get instance field reference: public System.SByte SByte17
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte17();
    // Get instance field reference: public System.SByte SByte18
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte18();
    // Get instance field reference: public System.SByte SByte19
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte19();
    // Get instance field reference: public System.SByte SByte20
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte20();
    // Get instance field reference: public System.SByte SByte21
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte21();
    // Get instance field reference: public System.SByte SByte22
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte22();
    // Get instance field reference: public System.SByte SByte23
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte23();
    // Get instance field reference: public System.SByte SByte24
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte24();
    // Get instance field reference: public System.SByte SByte25
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte25();
    // Get instance field reference: public System.SByte SByte26
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte26();
    // Get instance field reference: public System.SByte SByte27
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte27();
    // Get instance field reference: public System.SByte SByte28
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte28();
    // Get instance field reference: public System.SByte SByte29
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte29();
    // Get instance field reference: public System.SByte SByte30
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte30();
    // Get instance field reference: public System.SByte SByte31
    [[deprecated("Use field access instead!")]] int8_t& dyn_SByte31();
    // Get instance field reference: public System.UInt16 UShort0
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort0();
    // Get instance field reference: public System.UInt16 UShort1
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort1();
    // Get instance field reference: public System.UInt16 UShort2
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort2();
    // Get instance field reference: public System.UInt16 UShort3
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort3();
    // Get instance field reference: public System.UInt16 UShort4
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort4();
    // Get instance field reference: public System.UInt16 UShort5
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort5();
    // Get instance field reference: public System.UInt16 UShort6
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort6();
    // Get instance field reference: public System.UInt16 UShort7
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort7();
    // Get instance field reference: public System.UInt16 UShort8
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort8();
    // Get instance field reference: public System.UInt16 UShort9
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort9();
    // Get instance field reference: public System.UInt16 UShort10
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort10();
    // Get instance field reference: public System.UInt16 UShort11
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort11();
    // Get instance field reference: public System.UInt16 UShort12
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort12();
    // Get instance field reference: public System.UInt16 UShort13
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort13();
    // Get instance field reference: public System.UInt16 UShort14
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort14();
    // Get instance field reference: public System.UInt16 UShort15
    [[deprecated("Use field access instead!")]] uint16_t& dyn_UShort15();
    // Get instance field reference: public System.Int16 SShort0
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort0();
    // Get instance field reference: public System.Int16 SShort1
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort1();
    // Get instance field reference: public System.Int16 SShort2
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort2();
    // Get instance field reference: public System.Int16 SShort3
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort3();
    // Get instance field reference: public System.Int16 SShort4
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort4();
    // Get instance field reference: public System.Int16 SShort5
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort5();
    // Get instance field reference: public System.Int16 SShort6
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort6();
    // Get instance field reference: public System.Int16 SShort7
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort7();
    // Get instance field reference: public System.Int16 SShort8
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort8();
    // Get instance field reference: public System.Int16 SShort9
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort9();
    // Get instance field reference: public System.Int16 SShort10
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort10();
    // Get instance field reference: public System.Int16 SShort11
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort11();
    // Get instance field reference: public System.Int16 SShort12
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort12();
    // Get instance field reference: public System.Int16 SShort13
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort13();
    // Get instance field reference: public System.Int16 SShort14
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort14();
    // Get instance field reference: public System.Int16 SShort15
    [[deprecated("Use field access instead!")]] int16_t& dyn_SShort15();
    // Get instance field reference: public System.UInt32 UInt0
    [[deprecated("Use field access instead!")]] uint& dyn_UInt0();
    // Get instance field reference: public System.UInt32 UInt1
    [[deprecated("Use field access instead!")]] uint& dyn_UInt1();
    // Get instance field reference: public System.UInt32 UInt2
    [[deprecated("Use field access instead!")]] uint& dyn_UInt2();
    // Get instance field reference: public System.UInt32 UInt3
    [[deprecated("Use field access instead!")]] uint& dyn_UInt3();
    // Get instance field reference: public System.UInt32 UInt4
    [[deprecated("Use field access instead!")]] uint& dyn_UInt4();
    // Get instance field reference: public System.UInt32 UInt5
    [[deprecated("Use field access instead!")]] uint& dyn_UInt5();
    // Get instance field reference: public System.UInt32 UInt6
    [[deprecated("Use field access instead!")]] uint& dyn_UInt6();
    // Get instance field reference: public System.UInt32 UInt7
    [[deprecated("Use field access instead!")]] uint& dyn_UInt7();
    // Get instance field reference: public System.Int32 SInt0
    [[deprecated("Use field access instead!")]] int& dyn_SInt0();
    // Get instance field reference: public System.Int32 SInt1
    [[deprecated("Use field access instead!")]] int& dyn_SInt1();
    // Get instance field reference: public System.Int32 SInt2
    [[deprecated("Use field access instead!")]] int& dyn_SInt2();
    // Get instance field reference: public System.Int32 SInt3
    [[deprecated("Use field access instead!")]] int& dyn_SInt3();
    // Get instance field reference: public System.Int32 SInt4
    [[deprecated("Use field access instead!")]] int& dyn_SInt4();
    // Get instance field reference: public System.Int32 SInt5
    [[deprecated("Use field access instead!")]] int& dyn_SInt5();
    // Get instance field reference: public System.Int32 SInt6
    [[deprecated("Use field access instead!")]] int& dyn_SInt6();
    // Get instance field reference: public System.Int32 SInt7
    [[deprecated("Use field access instead!")]] int& dyn_SInt7();
    // Get instance field reference: public System.UInt64 ULong0
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ULong0();
    // Get instance field reference: public System.UInt64 ULong1
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ULong1();
    // Get instance field reference: public System.UInt64 ULong2
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ULong2();
    // Get instance field reference: public System.UInt64 ULong3
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ULong3();
    // Get instance field reference: public System.Int64 SLong0
    [[deprecated("Use field access instead!")]] int64_t& dyn_SLong0();
    // Get instance field reference: public System.Int64 SLong1
    [[deprecated("Use field access instead!")]] int64_t& dyn_SLong1();
    // Get instance field reference: public System.Int64 SLong2
    [[deprecated("Use field access instead!")]] int64_t& dyn_SLong2();
    // Get instance field reference: public System.Int64 SLong3
    [[deprecated("Use field access instead!")]] int64_t& dyn_SLong3();
    // Get instance field reference: public System.Single Float0
    [[deprecated("Use field access instead!")]] float& dyn_Float0();
    // Get instance field reference: public System.Single Float1
    [[deprecated("Use field access instead!")]] float& dyn_Float1();
    // Get instance field reference: public System.Single Float2
    [[deprecated("Use field access instead!")]] float& dyn_Float2();
    // Get instance field reference: public System.Single Float3
    [[deprecated("Use field access instead!")]] float& dyn_Float3();
    // Get instance field reference: public System.Single Float4
    [[deprecated("Use field access instead!")]] float& dyn_Float4();
    // Get instance field reference: public System.Single Float5
    [[deprecated("Use field access instead!")]] float& dyn_Float5();
    // Get instance field reference: public System.Single Float6
    [[deprecated("Use field access instead!")]] float& dyn_Float6();
    // Get instance field reference: public System.Single Float7
    [[deprecated("Use field access instead!")]] float& dyn_Float7();
    // Get instance field reference: public System.Double Double0
    [[deprecated("Use field access instead!")]] double& dyn_Double0();
    // Get instance field reference: public System.Double Double1
    [[deprecated("Use field access instead!")]] double& dyn_Double1();
    // Get instance field reference: public System.Double Double2
    [[deprecated("Use field access instead!")]] double& dyn_Double2();
    // Get instance field reference: public System.Double Double3
    [[deprecated("Use field access instead!")]] double& dyn_Double3();
    // Get instance field reference: public Unity.Burst.Intrinsics.v128 Lo128
    [[deprecated("Use field access instead!")]] ::Unity::Burst::Intrinsics::v128& dyn_Lo128();
    // Get instance field reference: public Unity.Burst.Intrinsics.v128 Hi128
    [[deprecated("Use field access instead!")]] ::Unity::Burst::Intrinsics::v128& dyn_Hi128();
    // public System.Void .ctor(System.Int32 v)
    // Offset: 0x508570C
    v256(int v);
    // public System.Void .ctor(Unity.Burst.Intrinsics.v128 lo, Unity.Burst.Intrinsics.v128 hi)
    // Offset: 0x5085718
    v256(::Unity::Burst::Intrinsics::v128 lo, ::Unity::Burst::Intrinsics::v128 hi);
  }; // Unity.Burst.Intrinsics.v256
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::Intrinsics::v256::v256
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Burst::Intrinsics::v256::v256
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
