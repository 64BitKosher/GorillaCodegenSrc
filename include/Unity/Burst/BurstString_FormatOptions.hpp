// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Burst.BurstString
#include "Unity/Burst/BurstString.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Burst.BurstString/NumberFormatKind
#include "Unity/Burst/BurstString_NumberFormatKind.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::BurstString::FormatOptions, "Unity.Burst", "BurstString/FormatOptions");
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Burst.BurstString/FormatOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct BurstString::FormatOptions/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Burst.BurstString/NumberFormatKind Kind
    // Size: 0x1
    // Offset: 0x0
    ::Unity::Burst::BurstString::NumberFormatKind Kind;
    // Field size check
    static_assert(sizeof(::Unity::Burst::BurstString::NumberFormatKind) == 0x1);
    // public System.SByte AlignAndSize
    // Size: 0x1
    // Offset: 0x1
    int8_t AlignAndSize;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // public System.Byte Specifier
    // Size: 0x1
    // Offset: 0x2
    uint8_t Specifier;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Boolean Lowercase
    // Size: 0x1
    // Offset: 0x3
    bool Lowercase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: FormatOptions
    constexpr FormatOptions(::Unity::Burst::BurstString::NumberFormatKind Kind_ = {}, int8_t AlignAndSize_ = {}, uint8_t Specifier_ = {}, bool Lowercase_ = {}) noexcept : Kind{Kind_}, AlignAndSize{AlignAndSize_}, Specifier{Specifier_}, Lowercase{Lowercase_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Unity.Burst.BurstString/NumberFormatKind Kind
    [[deprecated("Use field access instead!")]] ::Unity::Burst::BurstString::NumberFormatKind& dyn_Kind();
    // Get instance field reference: public System.SByte AlignAndSize
    [[deprecated("Use field access instead!")]] int8_t& dyn_AlignAndSize();
    // Get instance field reference: public System.Byte Specifier
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Specifier();
    // Get instance field reference: public System.Boolean Lowercase
    [[deprecated("Use field access instead!")]] bool& dyn_Lowercase();
    // public System.Void .ctor(Unity.Burst.BurstString/NumberFormatKind kind, System.SByte alignAndSize, System.Byte specifier, System.Boolean lowercase)
    // Offset: 0x5083858
    // ABORTED: conflicts with another method.  FormatOptions(::Unity::Burst::BurstString::NumberFormatKind kind, int8_t alignAndSize, uint8_t specifier, bool lowercase);
    // public System.Boolean get_Uppercase()
    // Offset: 0x5083038
    bool get_Uppercase();
    // public System.Int32 GetBase()
    // Offset: 0x5083020
    int GetBase();
    // public override System.String ToString()
    // Offset: 0x5085314
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Burst.BurstString/FormatOptions
  #pragma pack(pop)
  static check_size<sizeof(BurstString::FormatOptions), 3 + sizeof(bool)> __Unity_Burst_BurstString_FormatOptionsSizeCheck;
  static_assert(sizeof(BurstString::FormatOptions) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::BurstString::FormatOptions::FormatOptions
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Burst::BurstString::FormatOptions::get_Uppercase
// Il2CppName: get_Uppercase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Burst::BurstString::FormatOptions::*)()>(&Unity::Burst::BurstString::FormatOptions::get_Uppercase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::FormatOptions), "get_Uppercase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstString::FormatOptions::GetBase
// Il2CppName: GetBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Burst::BurstString::FormatOptions::*)()>(&Unity::Burst::BurstString::FormatOptions::GetBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::FormatOptions), "GetBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstString::FormatOptions::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Burst::BurstString::FormatOptions::*)()>(&Unity::Burst::BurstString::FormatOptions::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstString::FormatOptions), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
