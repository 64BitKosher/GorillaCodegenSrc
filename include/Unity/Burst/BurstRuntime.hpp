// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Burst
namespace Unity::Burst {
}
// Completed forward declares
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // Forward declaring type: BurstRuntime
  class BurstRuntime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Burst::BurstRuntime);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::BurstRuntime*, "Unity.Burst", "BurstRuntime");
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Burst.BurstRuntime
  // [TokenAttribute] Offset: FFFFFFFF
  class BurstRuntime : public ::Il2CppObject {
    public:
    // Nested type: ::Unity::Burst::BurstRuntime::PreserveAttribute
    class PreserveAttribute;
    // static System.Void RuntimeLog(System.Byte* message, System.Int32 logType, System.Byte* fileName, System.Int32 lineNumber)
    // Offset: 0x5081AE4
    static void RuntimeLog(uint8_t* message, int logType, uint8_t* fileName, int lineNumber);
    // static System.Void PreventRequiredAttributeStrip()
    // Offset: 0x5081AFC
    static void PreventRequiredAttributeStrip();
    // static System.Void Log(System.Byte* message, System.Int32 logType, System.Byte* fileName, System.Int32 lineNumber)
    // Offset: 0x5081B88
    static void Log(uint8_t* message, int logType, uint8_t* fileName, int lineNumber);
  }; // Unity.Burst.BurstRuntime
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::BurstRuntime::RuntimeLog
// Il2CppName: RuntimeLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int, uint8_t*, int)>(&Unity::Burst::BurstRuntime::RuntimeLog)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* logType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileName = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstRuntime*), "RuntimeLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, logType, fileName, lineNumber});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstRuntime::PreventRequiredAttributeStrip
// Il2CppName: PreventRequiredAttributeStrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Burst::BurstRuntime::PreventRequiredAttributeStrip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstRuntime*), "PreventRequiredAttributeStrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Burst::BurstRuntime::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int, uint8_t*, int)>(&Unity::Burst::BurstRuntime::Log)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* logType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileName = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstRuntime*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, logType, fileName, lineNumber});
  }
};
