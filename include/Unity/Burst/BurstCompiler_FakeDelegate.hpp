// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Burst.BurstCompiler
#include "Unity/Burst/BurstCompiler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Burst::BurstCompiler::FakeDelegate);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Burst::BurstCompiler::FakeDelegate*, "Unity.Burst", "BurstCompiler/FakeDelegate");
// Type namespace: Unity.Burst
namespace Unity::Burst {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Burst.BurstCompiler/FakeDelegate
  // [TokenAttribute] Offset: FFFFFFFF
  class BurstCompiler::FakeDelegate : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Reflection.MethodInfo <Method>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MethodInfo* Method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Reflection::MethodInfo*
    constexpr operator ::System::Reflection::MethodInfo*() const noexcept {
      return Method;
    }
    // Get instance field reference: private readonly System.Reflection.MethodInfo <Method>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_$Method$k__BackingField();
    // public System.Void .ctor(System.Reflection.MethodInfo method)
    // Offset: 0x5080898
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BurstCompiler::FakeDelegate* New_ctor(::System::Reflection::MethodInfo* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Burst::BurstCompiler::FakeDelegate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BurstCompiler::FakeDelegate*, creationType>(method)));
    }
    // public System.Reflection.MethodInfo get_Method()
    // Offset: 0x5081288
    ::System::Reflection::MethodInfo* get_Method();
  }; // Unity.Burst.BurstCompiler/FakeDelegate
  #pragma pack(pop)
  static check_size<sizeof(BurstCompiler::FakeDelegate), 16 + sizeof(::System::Reflection::MethodInfo*)> __Unity_Burst_BurstCompiler_FakeDelegateSizeCheck;
  static_assert(sizeof(BurstCompiler::FakeDelegate) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Burst::BurstCompiler::FakeDelegate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Burst::BurstCompiler::FakeDelegate::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (Unity::Burst::BurstCompiler::FakeDelegate::*)()>(&Unity::Burst::BurstCompiler::FakeDelegate::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Burst::BurstCompiler::FakeDelegate*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
