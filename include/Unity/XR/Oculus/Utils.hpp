// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: Unity::XR::Oculus
namespace Unity::XR::Oculus {
  // Forward declaring type: SystemHeadset
  struct SystemHeadset;
}
// Completed forward declares
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Forward declaring type: Utils
  class Utils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::Oculus::Utils);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::Oculus::Utils*, "Unity.XR.Oculus", "Utils");
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.Oculus.Utils
  // [TokenAttribute] Offset: FFFFFFFF
  class Utils : public ::Il2CppObject {
    public:
    // static public System.Void SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset)
    // Offset: 0x54476C8
    static void SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset);
    // static public Unity.XR.Oculus.SystemHeadset GetSystemHeadsetType()
    // Offset: 0x5447710
    static ::Unity::XR::Oculus::SystemHeadset GetSystemHeadsetType();
    // static private System.Void PermissionGrantedCallback(System.String permissionName)
    // Offset: 0x5447718
    static void PermissionGrantedCallback(::StringW permissionName);
    // static public System.Boolean IsEyeTrackingPermissionGranted()
    // Offset: 0x5447784
    static bool IsEyeTrackingPermissionGranted();
    // static public System.Boolean get_useDynamicFoveatedRendering()
    // Offset: 0x54477C8
    static bool get_useDynamicFoveatedRendering();
    // static public System.Void set_useDynamicFoveatedRendering(System.Boolean value)
    // Offset: 0x54477D0
    static void set_useDynamicFoveatedRendering(bool value);
    // static public System.Int32 get_foveatedRenderingLevel()
    // Offset: 0x5447854
    static int get_foveatedRenderingLevel();
    // static public System.Void set_foveatedRenderingLevel(System.Int32 value)
    // Offset: 0x54478D0
    static void set_foveatedRenderingLevel(int value);
    // static public System.Boolean get_eyeTrackedFoveatedRenderingSupported()
    // Offset: 0x5447950
    static bool get_eyeTrackedFoveatedRenderingSupported();
    // static public System.Boolean get_eyeTrackedFoveatedRenderingEnabled()
    // Offset: 0x5447958
    static bool get_eyeTrackedFoveatedRenderingEnabled();
    // static public System.Void set_eyeTrackedFoveatedRenderingEnabled(System.Boolean value)
    // Offset: 0x544797C
    static void set_eyeTrackedFoveatedRenderingEnabled(bool value);
    // static public System.Boolean SetFoveationLevel(System.Int32 level)
    // Offset: 0x5447A84
    static bool SetFoveationLevel(int level);
    // static public System.Boolean EnableDynamicFFR(System.Boolean enable)
    // Offset: 0x5447B10
    static bool EnableDynamicFFR(bool enable);
    // static public System.Int32 GetFoveationLevel()
    // Offset: 0x5447B9C
    static int GetFoveationLevel();
  }; // Unity.XR.Oculus.Utils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::SetColorScaleAndOffset
// Il2CppName: SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&Unity::XR::Oculus::Utils::SetColorScaleAndOffset)> {
  static const MethodInfo* get() {
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScale, colorOffset});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::GetSystemHeadsetType
// Il2CppName: GetSystemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::Oculus::SystemHeadset (*)()>(&Unity::XR::Oculus::Utils::GetSystemHeadsetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "GetSystemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::PermissionGrantedCallback
// Il2CppName: PermissionGrantedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Unity::XR::Oculus::Utils::PermissionGrantedCallback)> {
  static const MethodInfo* get() {
    static auto* permissionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "PermissionGrantedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permissionName});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::IsEyeTrackingPermissionGranted
// Il2CppName: IsEyeTrackingPermissionGranted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Unity::XR::Oculus::Utils::IsEyeTrackingPermissionGranted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "IsEyeTrackingPermissionGranted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::get_useDynamicFoveatedRendering
// Il2CppName: get_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Unity::XR::Oculus::Utils::get_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "get_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::set_useDynamicFoveatedRendering
// Il2CppName: set_useDynamicFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Unity::XR::Oculus::Utils::set_useDynamicFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "set_useDynamicFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::get_foveatedRenderingLevel
// Il2CppName: get_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Unity::XR::Oculus::Utils::get_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "get_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::set_foveatedRenderingLevel
// Il2CppName: set_foveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Unity::XR::Oculus::Utils::set_foveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "set_foveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::get_eyeTrackedFoveatedRenderingSupported
// Il2CppName: get_eyeTrackedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Unity::XR::Oculus::Utils::get_eyeTrackedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "get_eyeTrackedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::get_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: get_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Unity::XR::Oculus::Utils::get_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "get_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::set_eyeTrackedFoveatedRenderingEnabled
// Il2CppName: set_eyeTrackedFoveatedRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Unity::XR::Oculus::Utils::set_eyeTrackedFoveatedRenderingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "set_eyeTrackedFoveatedRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::SetFoveationLevel
// Il2CppName: SetFoveationLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Unity::XR::Oculus::Utils::SetFoveationLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "SetFoveationLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::EnableDynamicFFR
// Il2CppName: EnableDynamicFFR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&Unity::XR::Oculus::Utils::EnableDynamicFFR)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "EnableDynamicFFR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::Utils::GetFoveationLevel
// Il2CppName: GetFoveationLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Unity::XR::Oculus::Utils::GetFoveationLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::Utils*), "GetFoveationLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
