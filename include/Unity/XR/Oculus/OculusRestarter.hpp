// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::Oculus
namespace Unity::XR::Oculus {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Forward declaring type: OculusRestarter
  class OculusRestarter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::Oculus::OculusRestarter);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::Oculus::OculusRestarter*, "Unity.XR.Oculus", "OculusRestarter");
// Type namespace: Unity.XR.Oculus
namespace Unity::XR::Oculus {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.Oculus.OculusRestarter
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusRestarter : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Unity::XR::Oculus::OculusRestarter::$PauseAndRestartCoroutine$d__22
    class $PauseAndRestartCoroutine$d__22;
    // Nested type: ::Unity::XR::Oculus::OculusRestarter::$RestartCoroutine$d__23
    class $RestartCoroutine$d__23;
    public:
    // System.Action onAfterRestart
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* onAfterRestart;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // System.Action onAfterShutdown
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* onAfterShutdown;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // System.Action onQuit
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* onQuit;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // System.Action onAfterCoroutine
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* onAfterCoroutine;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Coroutine m_Coroutine
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Coroutine* m_Coroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.Coroutine m_pauseAndRestartCoroutine
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Coroutine* m_pauseAndRestartCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get static field: static private readonly System.String k_GameObjectName
    static ::StringW _get_k_GameObjectName();
    // Set static field: static private readonly System.String k_GameObjectName
    static void _set_k_GameObjectName(::StringW value);
    // Get static field: static private Unity.XR.Oculus.OculusRestarter s_Instance
    static ::Unity::XR::Oculus::OculusRestarter* _get_s_Instance();
    // Set static field: static private Unity.XR.Oculus.OculusRestarter s_Instance
    static void _set_s_Instance(::Unity::XR::Oculus::OculusRestarter* value);
    // Get static field: static private System.Int32 m_pauseAndRestartAttempts
    static int _get_m_pauseAndRestartAttempts();
    // Set static field: static private System.Int32 m_pauseAndRestartAttempts
    static void _set_m_pauseAndRestartAttempts(int value);
    // Get static field: static private System.Single <TimeBetweenRestartAttempts>k__BackingField
    static float _get_$TimeBetweenRestartAttempts$k__BackingField();
    // Set static field: static private System.Single <TimeBetweenRestartAttempts>k__BackingField
    static void _set_$TimeBetweenRestartAttempts$k__BackingField(float value);
    // Get instance field reference: System.Action onAfterRestart
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onAfterRestart();
    // Get instance field reference: System.Action onAfterShutdown
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onAfterShutdown();
    // Get instance field reference: System.Action onQuit
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onQuit();
    // Get instance field reference: System.Action onAfterCoroutine
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onAfterCoroutine();
    // Get instance field reference: private UnityEngine.Coroutine m_Coroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_m_Coroutine();
    // Get instance field reference: private UnityEngine.Coroutine m_pauseAndRestartCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_m_pauseAndRestartCoroutine();
    // static private System.Void .cctor()
    // Offset: 0x544B5F0
    static void _cctor();
    // public System.Void ResetCallbacks()
    // Offset: 0x544B6BC
    void ResetCallbacks();
    // public System.Boolean get_isRunning()
    // Offset: 0x544B758
    bool get_isRunning();
    // static public System.Single get_TimeBetweenRestartAttempts()
    // Offset: 0x544B768
    static float get_TimeBetweenRestartAttempts();
    // static public System.Void set_TimeBetweenRestartAttempts(System.Single value)
    // Offset: 0x544B7C0
    static void set_TimeBetweenRestartAttempts(float value);
    // static public System.Int32 get_PauseAndRestartAttempts()
    // Offset: 0x544B824
    static int get_PauseAndRestartAttempts();
    // static public Unity.XR.Oculus.OculusRestarter get_Instance()
    // Offset: 0x544B87C
    static ::Unity::XR::Oculus::OculusRestarter* get_Instance();
    // public System.Void PauseAndRestart()
    // Offset: 0x544BA4C
    void PauseAndRestart();
    // public System.Collections.IEnumerator PauseAndRestartCoroutine(System.Single pauseTimeInSeconds)
    // Offset: 0x544BB84
    ::System::Collections::IEnumerator* PauseAndRestartCoroutine(float pauseTimeInSeconds);
    // private System.Collections.IEnumerator RestartCoroutine(System.Boolean shouldRestart)
    // Offset: 0x544BC28
    ::System::Collections::IEnumerator* RestartCoroutine(bool shouldRestart);
    // public System.Void .ctor()
    // Offset: 0x544BCD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusRestarter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::Oculus::OculusRestarter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusRestarter*, creationType>()));
    }
  }; // Unity.XR.Oculus.OculusRestarter
  #pragma pack(pop)
  static check_size<sizeof(OculusRestarter), 72 + sizeof(::UnityEngine::Coroutine*)> __Unity_XR_Oculus_OculusRestarterSizeCheck;
  static_assert(sizeof(OculusRestarter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::XR::Oculus::OculusRestarter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::ResetCallbacks
// Il2CppName: ResetCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::OculusRestarter::*)()>(&Unity::XR::Oculus::OculusRestarter::ResetCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "ResetCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::get_isRunning
// Il2CppName: get_isRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::Oculus::OculusRestarter::*)()>(&Unity::XR::Oculus::OculusRestarter::get_isRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "get_isRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::get_TimeBetweenRestartAttempts
// Il2CppName: get_TimeBetweenRestartAttempts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Unity::XR::Oculus::OculusRestarter::get_TimeBetweenRestartAttempts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "get_TimeBetweenRestartAttempts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::set_TimeBetweenRestartAttempts
// Il2CppName: set_TimeBetweenRestartAttempts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&Unity::XR::Oculus::OculusRestarter::set_TimeBetweenRestartAttempts)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "set_TimeBetweenRestartAttempts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::get_PauseAndRestartAttempts
// Il2CppName: get_PauseAndRestartAttempts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Unity::XR::Oculus::OculusRestarter::get_PauseAndRestartAttempts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "get_PauseAndRestartAttempts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::Oculus::OculusRestarter* (*)()>(&Unity::XR::Oculus::OculusRestarter::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::PauseAndRestart
// Il2CppName: PauseAndRestart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::Oculus::OculusRestarter::*)()>(&Unity::XR::Oculus::OculusRestarter::PauseAndRestart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "PauseAndRestart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::PauseAndRestartCoroutine
// Il2CppName: PauseAndRestartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Unity::XR::Oculus::OculusRestarter::*)(float)>(&Unity::XR::Oculus::OculusRestarter::PauseAndRestartCoroutine)> {
  static const MethodInfo* get() {
    static auto* pauseTimeInSeconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "PauseAndRestartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pauseTimeInSeconds});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::RestartCoroutine
// Il2CppName: RestartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Unity::XR::Oculus::OculusRestarter::*)(bool)>(&Unity::XR::Oculus::OculusRestarter::RestartCoroutine)> {
  static const MethodInfo* get() {
    static auto* shouldRestart = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::Oculus::OculusRestarter*), "RestartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldRestart});
  }
};
// Writing MetadataGetter for method: Unity::XR::Oculus::OculusRestarter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
