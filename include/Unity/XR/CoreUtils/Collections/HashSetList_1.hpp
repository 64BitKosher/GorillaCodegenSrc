// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Collections.Generic.ISet`1
#include "System/Collections/Generic/ISet_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Collections.Generic.List`1/Enumerator
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: List`1 because it is already included!
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Skipping declaration: IEnumerator`1 because it is already included!
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Collections
namespace Unity::XR::CoreUtils::Collections {
  // Forward declaring type: HashSetList`1<T>
  template<typename T>
  class HashSetList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::XR::CoreUtils::Collections::HashSetList_1, "Unity.XR.CoreUtils.Collections", "HashSetList`1");
// Type namespace: Unity.XR.CoreUtils.Collections
namespace Unity::XR::CoreUtils::Collections {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.XR.CoreUtils.Collections.HashSetList`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class HashSetList_1 : public ::Il2CppObject/*, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback, public ::System::Collections::Generic::ISet_1<T>, public ::System::Collections::Generic::IReadOnlyCollection_1<T>*/ {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<T> m_InternalList
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* m_InternalList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<T> m_InternalHashSet
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::HashSet_1<T>* m_InternalHashSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<T>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::ISet_1<T>
    operator ::System::Collections::Generic::ISet_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::ISet_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<T>
    operator ::System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<T> m_InternalList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_m_InternalList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::dyn_m_InternalList");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalList"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.HashSet`1<T> m_InternalHashSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<T>*& dyn_m_InternalHashSet() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::dyn_m_InternalHashSet");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalHashSet"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::HashSet_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSetList_1<T>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSetList_1<T>*, creationType>(capacity)));
    }
    // public System.Collections.Generic.List`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::List_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::List_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::System.Collections.Generic.ICollection<T>.Add");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Boolean Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::Add");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::Remove");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::Clear");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::Contains");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::GetObjectData");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::OnDeserialization");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Collections::HashSetList_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
    }
    // private System.Void RefreshList()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RefreshList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::RefreshList");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IReadOnlyList`1<T> AsList()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IReadOnlyList_1<T>* AsList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Collections::HashSetList_1::AsList");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AsList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IReadOnlyList_1<T>*, false>(this, ___internal__method);
    }
  }; // Unity.XR.CoreUtils.Collections.HashSetList`1
  // Could not write size check! Type: Unity.XR.CoreUtils.Collections.HashSetList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
