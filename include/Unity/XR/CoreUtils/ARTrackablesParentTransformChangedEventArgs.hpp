// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils
namespace Unity::XR::CoreUtils {
  // Forward declaring type: XROrigin
  class XROrigin;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Unity.XR.CoreUtils
namespace Unity::XR::CoreUtils {
  // Forward declaring type: ARTrackablesParentTransformChangedEventArgs
  struct ARTrackablesParentTransformChangedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs, "Unity.XR.CoreUtils", "ARTrackablesParentTransformChangedEventArgs");
// Type namespace: Unity.XR.CoreUtils
namespace Unity::XR::CoreUtils {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.XR.CoreUtils.ARTrackablesParentTransformChangedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct ARTrackablesParentTransformChangedEventArgs/*, public ::System::ValueType, public ::System::IEquatable_1<::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs>*/ {
    public:
    public:
    // private readonly Unity.XR.CoreUtils.XROrigin <Origin>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Unity::XR::CoreUtils::XROrigin* Origin;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::XROrigin*) == 0x8);
    // private readonly UnityEngine.Transform <TrackablesParent>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Transform* TrackablesParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating value type constructor for type: ARTrackablesParentTransformChangedEventArgs
    constexpr ARTrackablesParentTransformChangedEventArgs(::Unity::XR::CoreUtils::XROrigin* Origin_ = {}, ::UnityEngine::Transform* TrackablesParent_ = {}) noexcept : Origin{Origin_}, TrackablesParent{TrackablesParent_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs>
    operator ::System::IEquatable_1<::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs>*>(this);
    }
    // Get instance field reference: private readonly Unity.XR.CoreUtils.XROrigin <Origin>k__BackingField
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::XROrigin*& dyn_$Origin$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Transform <TrackablesParent>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$TrackablesParent$k__BackingField();
    // public Unity.XR.CoreUtils.XROrigin get_Origin()
    // Offset: 0x53D0030
    ::Unity::XR::CoreUtils::XROrigin* get_Origin();
    // public UnityEngine.Transform get_TrackablesParent()
    // Offset: 0x53D0038
    ::UnityEngine::Transform* get_TrackablesParent();
    // public System.Void .ctor(Unity.XR.CoreUtils.XROrigin origin, UnityEngine.Transform trackablesParent)
    // Offset: 0x53D0040
    // ABORTED: conflicts with another method.  ARTrackablesParentTransformChangedEventArgs(::Unity::XR::CoreUtils::XROrigin* origin, ::UnityEngine::Transform* trackablesParent);
    // public System.Boolean Equals(Unity.XR.CoreUtils.ARTrackablesParentTransformChangedEventArgs other)
    // Offset: 0x53D015C
    bool Equals(::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x53D0208
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x53D0280
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Unity.XR.CoreUtils.ARTrackablesParentTransformChangedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ARTrackablesParentTransformChangedEventArgs), 8 + sizeof(::UnityEngine::Transform*)> __Unity_XR_CoreUtils_ARTrackablesParentTransformChangedEventArgsSizeCheck;
  static_assert(sizeof(ARTrackablesParentTransformChangedEventArgs) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::get_Origin
// Il2CppName: get_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::XR::CoreUtils::XROrigin* (Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::*)()>(&Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::get_Origin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs), "get_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::get_TrackablesParent
// Il2CppName: get_TrackablesParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::*)()>(&Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::get_TrackablesParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs), "get_TrackablesParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::ARTrackablesParentTransformChangedEventArgs
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::*)(::Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs)>(&Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Unity.XR.CoreUtils", "ARTrackablesParentTransformChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::*)(::Il2CppObject*)>(&Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::*)()>(&Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::ARTrackablesParentTransformChangedEventArgs), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
