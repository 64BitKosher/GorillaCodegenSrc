// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings::Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Forward declaring type: BindableVariableAlloc`1<T>
  template<typename T>
  class BindableVariableAlloc_1;
  // Forward declaring type: IReadOnlyBindableVariable`1<T>
  template<typename T>
  class IReadOnlyBindableVariable_1;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Datums
namespace Unity::XR::CoreUtils::Datums {
  // Forward declaring type: Datum`1<T>
  template<typename T>
  class Datum_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::XR::CoreUtils::Datums::Datum_1, "Unity.XR.CoreUtils.Datums", "Datum`1");
// Type namespace: Unity.XR.CoreUtils.Datums
namespace Unity::XR::CoreUtils::Datums {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.XR.CoreUtils.Datums.Datum`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Datum_1 : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private System.String m_Comments
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Comments;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_ReadOnly
    // Size: 0x1
    // Offset: 0x0
    bool m_ReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private T m_Value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_Value;
    // private readonly Unity.XR.CoreUtils.Bindings.Variables.BindableVariableAlloc`1<T> m_BindableVariableReference
    // Size: 0x8
    // Offset: 0x0
    ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableAlloc_1<T>* m_BindableVariableReference;
    // Field size check
    static_assert(sizeof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableAlloc_1<T>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private System.String m_Comments
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Comments() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::dyn_m_Comments");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Comments"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_ReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::dyn_m_ReadOnly");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ReadOnly"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T m_Value
    [[deprecated("Use field access instead!")]] T& dyn_m_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::dyn_m_Value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Unity.XR.CoreUtils.Bindings.Variables.BindableVariableAlloc`1<T> m_BindableVariableReference
    [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableAlloc_1<T>*& dyn_m_BindableVariableReference() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::dyn_m_BindableVariableReference");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BindableVariableReference"))->offset;
      return *reinterpret_cast<::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableAlloc_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.String get_Comments()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Comments() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::get_Comments");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_Comments(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Comments(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::set_Comments");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_ReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::get_ReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_ReadOnly(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ReadOnly(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::set_ReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<T> get_BindableVariableReference()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>* get_BindableVariableReference() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::get_BindableVariableReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindableVariableReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>*, false>(this, ___internal__method);
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_Value(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Value(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::set_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void OnEnable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnEnable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::OnEnable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Datum_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Datums::Datum_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Datum_1<T>*, creationType>()));
    }
  }; // Unity.XR.CoreUtils.Datums.Datum`1
  // Could not write size check! Type: Unity.XR.CoreUtils.Datums.Datum`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
