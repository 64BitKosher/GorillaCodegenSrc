// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: IEventBinding
  class IEventBinding;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: BindingsGroup
  class BindingsGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::XR::CoreUtils::Bindings::BindingsGroup);
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::CoreUtils::Bindings::BindingsGroup*, "Unity.XR.CoreUtils.Bindings", "BindingsGroup");
// Type namespace: Unity.XR.CoreUtils.Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Unity.XR.CoreUtils.Bindings.BindingsGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class BindingsGroup : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<Unity.XR.CoreUtils.Bindings.IEventBinding> m_Bindings
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>* m_Bindings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>*
    constexpr operator ::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>*() const noexcept {
      return m_Bindings;
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Unity.XR.CoreUtils.Bindings.IEventBinding> m_Bindings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>*& dyn_m_Bindings();
    // public System.Void AddBinding(Unity.XR.CoreUtils.Bindings.IEventBinding binding)
    // Offset: 0x53D281C
    void AddBinding(::Unity::XR::CoreUtils::Bindings::IEventBinding* binding);
    // public System.Void Clear()
    // Offset: 0x53D28C8
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x53D2A0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindingsGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::BindingsGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindingsGroup*, creationType>()));
    }
  }; // Unity.XR.CoreUtils.Bindings.BindingsGroup
  #pragma pack(pop)
  static check_size<sizeof(BindingsGroup), 16 + sizeof(::System::Collections::Generic::List_1<::Unity::XR::CoreUtils::Bindings::IEventBinding*>*)> __Unity_XR_CoreUtils_Bindings_BindingsGroupSizeCheck;
  static_assert(sizeof(BindingsGroup) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::BindingsGroup::AddBinding
// Il2CppName: AddBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::BindingsGroup::*)(::Unity::XR::CoreUtils::Bindings::IEventBinding*)>(&Unity::XR::CoreUtils::Bindings::BindingsGroup::AddBinding)> {
  static const MethodInfo* get() {
    static auto* binding = &::il2cpp_utils::GetClassFromName("Unity.XR.CoreUtils.Bindings", "IEventBinding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::BindingsGroup*), "AddBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binding});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::BindingsGroup::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::BindingsGroup::*)()>(&Unity::XR::CoreUtils::Bindings::BindingsGroup::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::BindingsGroup*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::BindingsGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
