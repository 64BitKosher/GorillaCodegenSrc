// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.XR.CoreUtils.Bindings.IEventBinding
#include "Unity/XR/CoreUtils/Bindings/IEventBinding.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: EventBinding
  struct EventBinding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::XR::CoreUtils::Bindings::EventBinding, "Unity.XR.CoreUtils.Bindings", "EventBinding");
// Type namespace: Unity.XR.CoreUtils.Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.XR.CoreUtils.Bindings.EventBinding
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventBinding/*, public ::System::ValueType, public ::Unity::XR::CoreUtils::Bindings::IEventBinding*/ {
    public:
    public:
    // private System.Action <BindAction>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* BindAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action <UnbindAction>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::System::Action* UnbindAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean m_IsBound
    // Size: 0x1
    // Offset: 0x10
    bool m_IsBound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: EventBinding
    constexpr EventBinding(::System::Action* BindAction_ = {}, ::System::Action* UnbindAction_ = {}, bool m_IsBound_ = {}) noexcept : BindAction{BindAction_}, UnbindAction{UnbindAction_}, m_IsBound{m_IsBound_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::XR::CoreUtils::Bindings::IEventBinding
    operator ::Unity::XR::CoreUtils::Bindings::IEventBinding() noexcept {
      return *reinterpret_cast<::Unity::XR::CoreUtils::Bindings::IEventBinding*>(this);
    }
    // Get instance field reference: private System.Action <BindAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$BindAction$k__BackingField();
    // Get instance field reference: private System.Action <UnbindAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$UnbindAction$k__BackingField();
    // Get instance field reference: private System.Boolean m_IsBound
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsBound();
    // public System.Action get_BindAction()
    // Offset: 0x53D2A94
    ::System::Action* get_BindAction();
    // public System.Void set_BindAction(System.Action value)
    // Offset: 0x53D2A9C
    void set_BindAction(::System::Action* value);
    // public System.Action get_UnbindAction()
    // Offset: 0x53D2AA4
    ::System::Action* get_UnbindAction();
    // public System.Void set_UnbindAction(System.Action value)
    // Offset: 0x53D2AAC
    void set_UnbindAction(::System::Action* value);
    // public System.Void Bind()
    // Offset: 0x53D2AB4
    void Bind();
    // public System.Void Unbind()
    // Offset: 0x53D2AEC
    void Unbind();
    // public System.Void ClearBinding()
    // Offset: 0x53D2B20
    void ClearBinding();
  }; // Unity.XR.CoreUtils.Bindings.EventBinding
  #pragma pack(pop)
  static check_size<sizeof(EventBinding), 16 + sizeof(bool)> __Unity_XR_CoreUtils_Bindings_EventBindingSizeCheck;
  static_assert(sizeof(EventBinding) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::get_BindAction
// Il2CppName: get_BindAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Unity::XR::CoreUtils::Bindings::EventBinding::*)()>(&Unity::XR::CoreUtils::Bindings::EventBinding::get_BindAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "get_BindAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::set_BindAction
// Il2CppName: set_BindAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::EventBinding::*)(::System::Action*)>(&Unity::XR::CoreUtils::Bindings::EventBinding::set_BindAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "set_BindAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::get_UnbindAction
// Il2CppName: get_UnbindAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Unity::XR::CoreUtils::Bindings::EventBinding::*)()>(&Unity::XR::CoreUtils::Bindings::EventBinding::get_UnbindAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "get_UnbindAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::set_UnbindAction
// Il2CppName: set_UnbindAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::EventBinding::*)(::System::Action*)>(&Unity::XR::CoreUtils::Bindings::EventBinding::set_UnbindAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "set_UnbindAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::EventBinding::*)()>(&Unity::XR::CoreUtils::Bindings::EventBinding::Bind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::Unbind
// Il2CppName: Unbind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::EventBinding::*)()>(&Unity::XR::CoreUtils::Bindings::EventBinding::Unbind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "Unbind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::XR::CoreUtils::Bindings::EventBinding::ClearBinding
// Il2CppName: ClearBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::XR::CoreUtils::Bindings::EventBinding::*)()>(&Unity::XR::CoreUtils::Bindings::EventBinding::ClearBinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::XR::CoreUtils::Bindings::EventBinding), "ClearBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
