// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1
#include "Unity/XR/CoreUtils/Bindings/Variables/IReadOnlyBindableVariable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings::Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Skipping declaration: <>c__DisplayClass14_0 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: IEventBinding
  class IEventBinding;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Bindings.Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Forward declaring type: BindableVariableBase`1<T>
  template<typename T>
  class BindableVariableBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1, "Unity.XR.CoreUtils.Bindings.Variables", "BindableVariableBase`1");
// Type namespace: Unity.XR.CoreUtils.Bindings.Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class BindableVariableBase_1 : public ::Il2CppObject/*, public ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>*/ {
    public:
    // Nested type: ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0<T>
    class $$c__DisplayClass14_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1/<>c__DisplayClass14_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass14_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindableVariableBase_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass14_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*) == 0x8);
      // public System.Action`1<T> callbackReference
      // Size: 0x8
      // Offset: 0x0
      ::System::Action_1<T>* callbackReference;
      // Field size check
      static_assert(sizeof(::System::Action_1<T>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`1<T> callbackReference
      [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_callbackReference() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0::dyn_callbackReference");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbackReference"))->offset;
        return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindableVariableBase_1<T>::$$c__DisplayClass14_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindableVariableBase_1<T>::$$c__DisplayClass14_0*, creationType>()));
      }
      // System.Void <Subscribe>b__0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $Subscribe$b__0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0::<Subscribe>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Subscribe>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // System.Void <Subscribe>b__1()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $Subscribe$b__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::$$c__DisplayClass14_0::<Subscribe>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Subscribe>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1/<>c__DisplayClass14_0
    // Could not write size check! Type: Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1/<>c__DisplayClass14_0 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Action`1<T> valueUpdated
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* valueUpdated;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    // private T m_InternalValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_InternalValue;
    // private readonly System.Boolean m_CheckEquality
    // Size: 0x1
    // Offset: 0x0
    bool m_CheckEquality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsInitialized
    // Size: 0x1
    // Offset: 0x0
    bool m_IsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Func`3<T,T,System.Boolean> m_EqualityMethod
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_3<T, T, bool>* m_EqualityMethod;
    // Field size check
    static_assert(sizeof(::System::Func_3<T, T, bool>*) == 0x8);
    // private System.Int32 m_BindingCount
    // Size: 0x4
    // Offset: 0x0
    int m_BindingCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>
    operator ::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>() noexcept {
      return *reinterpret_cast<::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<T> valueUpdated
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_valueUpdated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_valueUpdated");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "valueUpdated"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T m_InternalValue
    [[deprecated("Use field access instead!")]] T& dyn_m_InternalValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_m_InternalValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalValue"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean m_CheckEquality
    [[deprecated("Use field access instead!")]] bool& dyn_m_CheckEquality() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_m_CheckEquality");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CheckEquality"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean m_IsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsInitialized() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_m_IsInitialized");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IsInitialized"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Func`3<T,T,System.Boolean> m_EqualityMethod
    [[deprecated("Use field access instead!")]] ::System::Func_3<T, T, bool>*& dyn_m_EqualityMethod() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_m_EqualityMethod");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EqualityMethod"))->offset;
      return *reinterpret_cast<::System::Func_3<T, T, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_BindingCount
    [[deprecated("Use field access instead!")]] int& dyn_m_BindingCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::dyn_m_BindingCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BindingCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Void add_valueUpdated(System.Action`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_valueUpdated(::System::Action_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::add_valueUpdated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_valueUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Void remove_valueUpdated(System.Action`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_valueUpdated(::System::Action_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::remove_valueUpdated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_valueUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::get_Value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void set_Value(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Value(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::set_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean SetValueWithoutNotify(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool SetValueWithoutNotify(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::SetValueWithoutNotify");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValueWithoutNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public Unity.XR.CoreUtils.Bindings.IEventBinding Subscribe(System.Action`1<T> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::XR::CoreUtils::Bindings::IEventBinding* Subscribe(::System::Action_1<T>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::Subscribe");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::XR::CoreUtils::Bindings::IEventBinding*, false>(this, ___internal__method, callback);
    }
    // public Unity.XR.CoreUtils.Bindings.IEventBinding SubscribeAndUpdate(System.Action`1<T> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::XR::CoreUtils::Bindings::IEventBinding* SubscribeAndUpdate(::System::Action_1<T>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::SubscribeAndUpdate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::XR::CoreUtils::Bindings::IEventBinding*, false>(this, ___internal__method, callback);
    }
    // private System.Void IncrementReferenceCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IncrementReferenceCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::IncrementReferenceCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementReferenceCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void DecrementReferenceCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DecrementReferenceCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::DecrementReferenceCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecrementReferenceCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void .ctor(T initialValue, System.Boolean checkEquality, System.Func`3<T,T,System.Boolean> equalityMethod, System.Boolean startInitialized)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableVariableBase_1<T>* New_ctor(T initialValue, bool checkEquality, ::System::Func_3<T, T, bool>* equalityMethod, bool startInitialized) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableVariableBase_1<T>*, creationType>(initialValue, checkEquality, equalityMethod, startInitialized)));
    }
    // public System.Void BroadcastValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void BroadcastValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::BroadcastValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BroadcastValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean ValueEquals(T other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ValueEquals(T other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1::ValueEquals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::BindableVariableBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
  }; // Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1
  // Could not write size check! Type: Unity.XR.CoreUtils.Bindings.Variables.BindableVariableBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
