// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::XR::CoreUtils::Bindings
namespace Unity::XR::CoreUtils::Bindings {
  // Forward declaring type: IEventBinding
  class IEventBinding;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Unity.XR.CoreUtils.Bindings.Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // Forward declaring type: IReadOnlyBindableVariable`1<T>
  template<typename T>
  class IReadOnlyBindableVariable_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1, "Unity.XR.CoreUtils.Bindings.Variables", "IReadOnlyBindableVariable`1");
// Type namespace: Unity.XR.CoreUtils.Bindings.Variables
namespace Unity::XR::CoreUtils::Bindings::Variables {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IReadOnlyBindableVariable_1 {
    public:
    // public Unity.XR.CoreUtils.Bindings.IEventBinding Subscribe(System.Action`1<T> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Unity::XR::CoreUtils::Bindings::IEventBinding* Subscribe(::System::Action_1<T>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1::Subscribe");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::XR::CoreUtils::Bindings::IEventBinding*, false>(this, ___internal__method, callback);
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1::get_Value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::XR::CoreUtils::Bindings::Variables::IReadOnlyBindableVariable_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1
  // Could not write size check! Type: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
