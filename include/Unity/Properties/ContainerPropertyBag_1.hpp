// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Properties.PropertyBag`1
#include "Unity/Properties/PropertyBag_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Unity::Properties
namespace Unity::Properties {
  // Forward declaring type: IProperty`1<TContainer>
  template<typename TContainer>
  class IProperty_1;
  // Forward declaring type: Property`2<TContainer, TValue>
  template<typename TContainer, typename TValue>
  class Property_2;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: ContainerPropertyBag`1<TContainer>
  template<typename TContainer>
  class ContainerPropertyBag_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::Properties::ContainerPropertyBag_1, "Unity.Properties", "ContainerPropertyBag`1");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.Properties.ContainerPropertyBag`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TContainer>
  class ContainerPropertyBag_1 : public ::Unity::Properties::PropertyBag_1<TContainer> {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<Unity.Properties.IProperty`1<TContainer>> m_PropertiesList
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::Unity::Properties::IProperty_1<TContainer>*>* m_PropertiesList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Unity::Properties::IProperty_1<TContainer>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,Unity.Properties.IProperty`1<TContainer>> m_PropertiesHash
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Unity::Properties::IProperty_1<TContainer>*>* m_PropertiesHash;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Unity::Properties::IProperty_1<TContainer>*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::Unity::Properties::InstantiationKind
    constexpr operator ::Unity::Properties::InstantiationKind() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<Unity.Properties.IProperty`1<TContainer>> m_PropertiesList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Unity::Properties::IProperty_1<TContainer>*>*& dyn_m_PropertiesList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::dyn_m_PropertiesList");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PropertiesList"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::Unity::Properties::IProperty_1<TContainer>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,Unity.Properties.IProperty`1<TContainer>> m_PropertiesHash
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Unity::Properties::IProperty_1<TContainer>*>*& dyn_m_PropertiesHash() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::dyn_m_PropertiesHash");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PropertiesHash"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Unity::Properties::IProperty_1<TContainer>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected System.Void AddProperty(Unity.Properties.Property`2<TContainer,TValue> property)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    void AddProperty(::Unity::Properties::Property_2<TContainer, TValue>* property) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::AddProperty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddProperty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, property);
    }
    // public System.Boolean TryGetProperty(ref TContainer container, System.String name, out Unity.Properties.IProperty`1<TContainer> property)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetProperty(ByRef<TContainer> container, ::StringW name, ByRef<::Unity::Properties::IProperty_1<TContainer>*> property) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::TryGetProperty");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::ContainerPropertyBag_1<TContainer>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(container), name, byref(property));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Unity.Properties.PropertyBag`1
    // Base method: System.Void PropertyBag_1::.cctor()
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ContainerPropertyBag_1<TContainer>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Unity.Properties.PropertyBag`1
    // Base method: System.Void PropertyBag_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContainerPropertyBag_1<TContainer>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::ContainerPropertyBag_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContainerPropertyBag_1<TContainer>*, creationType>()));
    }
  }; // Unity.Properties.ContainerPropertyBag`1
  // Could not write size check! Type: Unity.Properties.ContainerPropertyBag`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
