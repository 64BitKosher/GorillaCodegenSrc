// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Properties
namespace Unity::Properties {
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: UnityEngine::Pool
namespace UnityEngine::Pool {
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: TypeUtility
  class TypeUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Properties::TypeUtility);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Properties::TypeUtility*, "Unity.Properties", "TypeUtility");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Properties.TypeUtility
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TypeUtility : public ::Il2CppObject {
    public:
    // Nested type: ::Unity::Properties::TypeUtility::ITypeConstructor
    class ITypeConstructor;
    // Nested type: ::Unity::Properties::TypeUtility::ITypeConstructor_1<T>
    template<typename T>
    class ITypeConstructor_1;
    // Nested type: ::Unity::Properties::TypeUtility::TypeConstructor_1<T>
    template<typename T>
    class TypeConstructor_1;
    // Nested type: ::Unity::Properties::TypeUtility::NonConstructable
    class NonConstructable;
    // Nested type: ::Unity::Properties::TypeUtility::Cache_1<T>
    template<typename T>
    struct Cache_1;
    // Nested type: ::Unity::Properties::TypeUtility::TypeConstructorVisitor
    class TypeConstructorVisitor;
    // Nested type: ::Unity::Properties::TypeUtility::$$c
    class $$c;
    // Get static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,Unity.Properties.TypeUtility/ITypeConstructor> s_TypeConstructors
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::Unity::Properties::TypeUtility::ITypeConstructor*>* _get_s_TypeConstructors();
    // Set static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,Unity.Properties.TypeUtility/ITypeConstructor> s_TypeConstructors
    static void _set_s_TypeConstructors(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::Unity::Properties::TypeUtility::ITypeConstructor*>* value);
    // Get static field: static private readonly System.Reflection.MethodInfo s_CreateTypeConstructor
    static ::System::Reflection::MethodInfo* _get_s_CreateTypeConstructor();
    // Set static field: static private readonly System.Reflection.MethodInfo s_CreateTypeConstructor
    static void _set_s_CreateTypeConstructor(::System::Reflection::MethodInfo* value);
    // Get static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,System.String> s_CachedResolvedName
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::StringW>* _get_s_CachedResolvedName();
    // Set static field: static private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,System.String> s_CachedResolvedName
    static void _set_s_CachedResolvedName(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::StringW>* value);
    // Get static field: static private readonly UnityEngine.Pool.ObjectPool`1<System.Text.StringBuilder> s_Builders
    static ::UnityEngine::Pool::ObjectPool_1<::System::Text::StringBuilder*>* _get_s_Builders();
    // Set static field: static private readonly UnityEngine.Pool.ObjectPool`1<System.Text.StringBuilder> s_Builders
    static void _set_s_Builders(::UnityEngine::Pool::ObjectPool_1<::System::Text::StringBuilder*>* value);
    // Get static field: static private readonly System.Object syncedPoolObject
    static ::Il2CppObject* _get_syncedPoolObject();
    // Set static field: static private readonly System.Object syncedPoolObject
    static void _set_syncedPoolObject(::Il2CppObject* value);
    // static private System.Void .cctor()
    // Offset: 0x5536540
    static void _cctor();
    // static public System.String GetTypeDisplayName(System.Type type)
    // Offset: 0x5536984
    static ::StringW GetTypeDisplayName(::System::Type* type);
    // static private System.String GetTypeDisplayName(System.Type type, System.Collections.Generic.IReadOnlyList`1<System.Type> args, ref System.Int32 argIndex)
    // Offset: 0x5536A9C
    static ::StringW GetTypeDisplayName(::System::Type* type, ::System::Collections::Generic::IReadOnlyList_1<::System::Type*>* args, ByRef<int> argIndex);
    // static public System.Type GetRootType(System.Type type)
    // Offset: 0x5537440
    static ::System::Type* GetRootType(::System::Type* type);
    // static private Unity.Properties.TypeUtility/ITypeConstructor CreateTypeConstructor(System.Type type)
    // Offset: 0x5537574
    static ::Unity::Properties::TypeUtility::ITypeConstructor* CreateTypeConstructor(::System::Type* type);
    // static private Unity.Properties.TypeUtility/ITypeConstructor`1<T> CreateTypeConstructor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Unity::Properties::TypeUtility::ITypeConstructor_1<T>* CreateTypeConstructor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::CreateTypeConstructor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "CreateTypeConstructor", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Properties::TypeUtility::ITypeConstructor_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static private Unity.Properties.TypeUtility/ITypeConstructor GetTypeConstructor(System.Type type)
    // Offset: 0x5537A8C
    static ::Unity::Properties::TypeUtility::ITypeConstructor* GetTypeConstructor(::System::Type* type);
    // static private Unity.Properties.TypeUtility/ITypeConstructor`1<T> GetTypeConstructor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Unity::Properties::TypeUtility::ITypeConstructor_1<T>* GetTypeConstructor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::GetTypeConstructor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "GetTypeConstructor", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Properties::TypeUtility::ITypeConstructor_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Boolean CanBeInstantiated(System.Type type)
    // Offset: 0x5537B44
    static bool CanBeInstantiated(::System::Type* type);
    // static public System.Boolean CanBeInstantiated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool CanBeInstantiated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::CanBeInstantiated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "CanBeInstantiated", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Void SetExplicitInstantiationMethod(System.Func`1<T> constructor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void SetExplicitInstantiationMethod(::System::Func_1<T>* constructor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::SetExplicitInstantiationMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "SetExplicitInstantiationMethod", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(constructor)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, constructor);
    }
    // static public T Instantiate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Instantiate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Boolean TryInstantiate(out T instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryInstantiate(ByRef<T> instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::TryInstantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "TryInstantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(instance));
    }
    // static public T Instantiate(System.Type derivedType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Instantiate(::System::Type* derivedType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::Instantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "Instantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(derivedType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, derivedType);
    }
    // static public System.Boolean TryInstantiate(System.Type derivedType, out T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryInstantiate(::System::Type* derivedType, ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::TryInstantiate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "TryInstantiate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(derivedType), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, derivedType, byref(value));
    }
    // static public TArray InstantiateArray(System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TArray>
    static TArray InstantiateArray(int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::InstantiateArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "InstantiateArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TArray, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, count);
    }
    // static public System.Boolean TryInstantiateArray(System.Int32 count, out TArray instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TArray>
    static bool TryInstantiateArray(int count, ByRef<TArray> instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::TryInstantiateArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "TryInstantiateArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractIndependentType<TArray&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, count, byref(instance));
    }
    // static public TArray InstantiateArray(System.Type derivedType, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TArray>
    static TArray InstantiateArray(::System::Type* derivedType, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::InstantiateArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "InstantiateArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(derivedType), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TArray>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TArray, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, derivedType, count);
    }
    // static private System.Void CheckIsAssignableFrom(System.Type type, System.Type derivedType)
    // Offset: 0x5537C10
    static void CheckIsAssignableFrom(::System::Type* type, ::System::Type* derivedType);
    // static private System.Void CheckCanBeInstantiated(Unity.Properties.TypeUtility/ITypeConstructor`1<T> constructor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void CheckCanBeInstantiated(::Unity::Properties::TypeUtility::ITypeConstructor_1<T>* constructor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::CheckCanBeInstantiated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Properties", "TypeUtility", "CheckCanBeInstantiated", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(constructor)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, constructor);
    }
    // static private System.Void CheckCanBeInstantiated(Unity.Properties.TypeUtility/ITypeConstructor constructor, System.Type type)
    // Offset: 0x5537D78
    static void CheckCanBeInstantiated(::Unity::Properties::TypeUtility::ITypeConstructor* constructor, ::System::Type* type);
  }; // Unity.Properties.TypeUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Properties::TypeUtility::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::GetTypeDisplayName
// Il2CppName: GetTypeDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*)>(&Unity::Properties::TypeUtility::GetTypeDisplayName)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "GetTypeDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::GetTypeDisplayName
// Il2CppName: GetTypeDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*, ::System::Collections::Generic::IReadOnlyList_1<::System::Type*>*, ByRef<int>)>(&Unity::Properties::TypeUtility::GetTypeDisplayName)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* args = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    static auto* argIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "GetTypeDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, args, argIndex});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::GetRootType
// Il2CppName: GetRootType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&Unity::Properties::TypeUtility::GetRootType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "GetRootType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CreateTypeConstructor
// Il2CppName: CreateTypeConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Properties::TypeUtility::ITypeConstructor* (*)(::System::Type*)>(&Unity::Properties::TypeUtility::CreateTypeConstructor)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "CreateTypeConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CreateTypeConstructor
// Il2CppName: CreateTypeConstructor
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::GetTypeConstructor
// Il2CppName: GetTypeConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Properties::TypeUtility::ITypeConstructor* (*)(::System::Type*)>(&Unity::Properties::TypeUtility::GetTypeConstructor)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "GetTypeConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::GetTypeConstructor
// Il2CppName: GetTypeConstructor
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CanBeInstantiated
// Il2CppName: CanBeInstantiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Unity::Properties::TypeUtility::CanBeInstantiated)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "CanBeInstantiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CanBeInstantiated
// Il2CppName: CanBeInstantiated
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::SetExplicitInstantiationMethod
// Il2CppName: SetExplicitInstantiationMethod
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::TryInstantiate
// Il2CppName: TryInstantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::TryInstantiate
// Il2CppName: TryInstantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::InstantiateArray
// Il2CppName: InstantiateArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::TryInstantiateArray
// Il2CppName: TryInstantiateArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::InstantiateArray
// Il2CppName: InstantiateArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CheckIsAssignableFrom
// Il2CppName: CheckIsAssignableFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ::System::Type*)>(&Unity::Properties::TypeUtility::CheckIsAssignableFrom)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* derivedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "CheckIsAssignableFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, derivedType});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CheckCanBeInstantiated
// Il2CppName: CheckCanBeInstantiated
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::CheckCanBeInstantiated
// Il2CppName: CheckCanBeInstantiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Properties::TypeUtility::ITypeConstructor*, ::System::Type*)>(&Unity::Properties::TypeUtility::CheckCanBeInstantiated)> {
  static const MethodInfo* get() {
    static auto* constructor = &::il2cpp_utils::GetClassFromName("Unity.Properties", "TypeUtility/ITypeConstructor")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility*), "CheckCanBeInstantiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constructor, type});
  }
};
