// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Properties.PropertyBag`1
#include "Unity/Properties/PropertyBag_1.hpp"
// Including type: Unity.Properties.IConstructorWithCount`1
#include "Unity/Properties/IConstructorWithCount_1.hpp"
// Including type: Unity.Properties.Property`2
#include "Unity/Properties/Property_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Properties
namespace Unity::Properties {
  // Skipping declaration: ListElementProperty because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: IndexedCollectionPropertyBag`2<TList, TElement>
  template<typename TList, typename TElement>
  class IndexedCollectionPropertyBag_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::Properties::IndexedCollectionPropertyBag_2, "Unity.Properties", "IndexedCollectionPropertyBag`2");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.Properties.IndexedCollectionPropertyBag`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TList, typename TElement>
  class IndexedCollectionPropertyBag_2 : public ::Unity::Properties::PropertyBag_1<TList>/*, public ::Unity::Properties::IConstructorWithCount_1<TList>*/ {
    public:
    // Nested type: ::Unity::Properties::IndexedCollectionPropertyBag_2::ListElementProperty<TList, TElement>
    class ListElementProperty;
    // WARNING Size may be invalid!
    // Autogenerated type: Unity.Properties.IndexedCollectionPropertyBag`2/ListElementProperty
    // [TokenAttribute] Offset: FFFFFFFF
    class ListElementProperty : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Unity::Properties::Property_2<TList, TElement> {
      public:
      using declaring_type = IndexedCollectionPropertyBag_2<TList, TElement>*;
      static constexpr std::string_view NESTED_NAME = "ListElementProperty";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // System.Int32 m_Index
      // Size: 0x4
      // Offset: 0x0
      int m_Index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Deleting conversion operator: operator ::System::Collections::Generic::List_1<::System::Attribute*>*
      constexpr operator ::System::Collections::Generic::List_1<::System::Attribute*>*() const noexcept = delete;
      // Autogenerated instance field getter
      // Get instance field: System.Int32 m_Index
      [[deprecated("Use field access instead!")]] int& dyn_m_Index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::ListElementProperty::dyn_m_Index");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Int32 get_Index()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_Index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::ListElementProperty::get_Index");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public override System.String get_Name()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: Unity.Properties.Property`2
      // Base method: System.String Property_2::get_Name()
      ::StringW get_Name() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::ListElementProperty::get_Name");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: Unity.Properties.Property`2
      // Base method: System.Void Property_2::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::ListElementProperty::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty*, creationType>()));
      }
    }; // Unity.Properties.IndexedCollectionPropertyBag`2/ListElementProperty
    // Could not write size check! Type: Unity.Properties.IndexedCollectionPropertyBag`2/ListElementProperty is generic, or has no fields that are valid for size checks!
    public:
    // private readonly Unity.Properties.IndexedCollectionPropertyBag`2/ListElementProperty<TList,TElement> m_Property
    // Size: 0x8
    // Offset: 0x0
    typename ::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty* m_Property;
    // Field size check
    static_assert(sizeof(typename ::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Unity::Properties::IConstructorWithCount_1<TList>
    operator ::Unity::Properties::IConstructorWithCount_1<TList>() noexcept {
      return *reinterpret_cast<::Unity::Properties::IConstructorWithCount_1<TList>*>(this);
    }
    // Deleting conversion operator: operator ::Unity::Properties::InstantiationKind
    constexpr operator ::Unity::Properties::InstantiationKind() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private readonly Unity.Properties.IndexedCollectionPropertyBag`2/ListElementProperty<TList,TElement> m_Property
    [[deprecated("Use field access instead!")]] typename ::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty*& dyn_m_Property() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::dyn_m_Property");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Property"))->offset;
      return *reinterpret_cast<typename ::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>::ListElementProperty**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private TList Unity.Properties.IConstructorWithCount<TList>.InstantiateWithCount(System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TList Unity_Properties_IConstructorWithCount$TList$_InstantiateWithCount(int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::Unity.Properties.IConstructorWithCount<TList>.InstantiateWithCount");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TList, false>(this, ___internal__method, count);
    }
    // protected TList InstantiateWithCount(System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TList InstantiateWithCount(int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::InstantiateWithCount");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::IndexedCollectionPropertyBag_2<TList, TElement>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TList, false>(this, ___internal__method, count);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Unity.Properties.PropertyBag`1
    // Base method: System.Void PropertyBag_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IndexedCollectionPropertyBag_2<TList, TElement>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::IndexedCollectionPropertyBag_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IndexedCollectionPropertyBag_2<TList, TElement>*, creationType>()));
    }
  }; // Unity.Properties.IndexedCollectionPropertyBag`2
  // Could not write size check! Type: Unity.Properties.IndexedCollectionPropertyBag`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
