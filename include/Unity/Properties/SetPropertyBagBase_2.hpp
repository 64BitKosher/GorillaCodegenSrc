// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Properties.PropertyBag`1
#include "Unity/Properties/PropertyBag_1.hpp"
// Including type: Unity.Properties.Property`2
#include "Unity/Properties/Property_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Properties
namespace Unity::Properties {
  // Skipping declaration: SetElementProperty because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: ISet`1<T>
  template<typename T>
  class ISet_1;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: SetPropertyBagBase`2<TSet, TElement>
  template<typename TSet, typename TElement>
  class SetPropertyBagBase_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::Properties::SetPropertyBagBase_2, "Unity.Properties", "SetPropertyBagBase`2");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.Properties.SetPropertyBagBase`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TSet, typename TElement>
  class SetPropertyBagBase_2 : public ::Unity::Properties::PropertyBag_1<TSet> {
    public:
    // Nested type: ::Unity::Properties::SetPropertyBagBase_2::SetElementProperty<TSet, TElement>
    class SetElementProperty;
    // WARNING Size may be invalid!
    // Autogenerated type: Unity.Properties.SetPropertyBagBase`2/SetElementProperty
    // [TokenAttribute] Offset: FFFFFFFF
    class SetElementProperty : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Unity::Properties::Property_2<TSet, TElement> {
      public:
      using declaring_type = SetPropertyBagBase_2<TSet, TElement>*;
      static constexpr std::string_view NESTED_NAME = "SetElementProperty";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // TElement m_Value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TElement m_Value;
      public:
      // Deleting conversion operator: operator ::System::Collections::Generic::List_1<::System::Attribute*>*
      constexpr operator ::System::Collections::Generic::List_1<::System::Attribute*>*() const noexcept = delete;
      // Autogenerated instance field getter
      // Get instance field: TElement m_Value
      [[deprecated("Use field access instead!")]] TElement& dyn_m_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::SetPropertyBagBase_2::SetElementProperty::dyn_m_Value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
        return *reinterpret_cast<TElement*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public override System.String get_Name()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: Unity.Properties.Property`2
      // Base method: System.String Property_2::get_Name()
      ::StringW get_Name() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::SetPropertyBagBase_2::SetElementProperty::get_Name");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: Unity.Properties.Property`2
      // Base method: System.Void Property_2::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename SetPropertyBagBase_2<TSet, TElement>::SetElementProperty* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::SetPropertyBagBase_2::SetElementProperty::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SetPropertyBagBase_2<TSet, TElement>::SetElementProperty*, creationType>()));
      }
    }; // Unity.Properties.SetPropertyBagBase`2/SetElementProperty
    // Could not write size check! Type: Unity.Properties.SetPropertyBagBase`2/SetElementProperty is generic, or has no fields that are valid for size checks!
    public:
    // private readonly Unity.Properties.SetPropertyBagBase`2/SetElementProperty<TSet,TElement> m_Property
    // Size: 0x8
    // Offset: 0x0
    typename ::Unity::Properties::SetPropertyBagBase_2<TSet, TElement>::SetElementProperty* m_Property;
    // Field size check
    static_assert(sizeof(typename ::Unity::Properties::SetPropertyBagBase_2<TSet, TElement>::SetElementProperty*) == 0x8);
    public:
    // Deleting conversion operator: operator ::Unity::Properties::InstantiationKind
    constexpr operator ::Unity::Properties::InstantiationKind() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private readonly Unity.Properties.SetPropertyBagBase`2/SetElementProperty<TSet,TElement> m_Property
    [[deprecated("Use field access instead!")]] typename ::Unity::Properties::SetPropertyBagBase_2<TSet, TElement>::SetElementProperty*& dyn_m_Property() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::SetPropertyBagBase_2::dyn_m_Property");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Property"))->offset;
      return *reinterpret_cast<typename ::Unity::Properties::SetPropertyBagBase_2<TSet, TElement>::SetElementProperty**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Unity.Properties.PropertyBag`1
    // Base method: System.Void PropertyBag_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetPropertyBagBase_2<TSet, TElement>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::SetPropertyBagBase_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetPropertyBagBase_2<TSet, TElement>*, creationType>()));
    }
  }; // Unity.Properties.SetPropertyBagBase`2
  // Could not write size check! Type: Unity.Properties.SetPropertyBagBase`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
