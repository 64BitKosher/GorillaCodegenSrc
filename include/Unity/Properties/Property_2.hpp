// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Properties.IProperty`1
#include "Unity/Properties/IProperty_1.hpp"
// Including type: Unity.Properties.Internal.IAttributes
#include "Unity/Properties/Internal/IAttributes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Attribute
  class Attribute;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: Property`2<TContainer, TValue>
  template<typename TContainer, typename TValue>
  class Property_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Unity::Properties::Property_2, "Unity.Properties", "Property`2");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // WARNING Size may be invalid!
  // Autogenerated type: Unity.Properties.Property`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TContainer, typename TValue>
  class Property_2 : public ::Il2CppObject/*, public ::Unity::Properties::IProperty_1<TContainer>, public ::Unity::Properties::Internal::IAttributes*/ {
    public:
    public:
    // private System.Collections.Generic.List`1<System.Attribute> m_Attributes
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::System::Attribute*>* m_Attributes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Attribute*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Unity::Properties::IProperty_1<TContainer>
    operator ::Unity::Properties::IProperty_1<TContainer>() noexcept {
      return *reinterpret_cast<::Unity::Properties::IProperty_1<TContainer>*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Properties::Internal::IAttributes
    operator ::Unity::Properties::Internal::IAttributes() noexcept {
      return *reinterpret_cast<::Unity::Properties::Internal::IAttributes*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::System::Attribute*>*
    constexpr operator ::System::Collections::Generic::List_1<::System::Attribute*>*() const noexcept {
      return m_Attributes;
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<System.Attribute> m_Attributes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Attribute*>*& dyn_m_Attributes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::dyn_m_Attributes");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Attributes"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Attribute*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.String get_Name()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::get_Name");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Type DeclaredValueType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Type* DeclaredValueType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::DeclaredValueType");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
    }
    // protected System.Void AddAttribute(System.Attribute attribute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddAttribute(::System::Attribute* attribute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::AddAttribute");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attribute)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attribute);
    }
    // protected System.Void AddAttributes(System.Collections.Generic.IEnumerable`1<System.Attribute> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddAttributes(::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* attributes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::AddAttributes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributes)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attributes);
    }
    // private System.Void Unity.Properties.Internal.IAttributes.AddAttribute(System.Attribute attribute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unity_Properties_Internal_IAttributes_AddAttribute(::System::Attribute* attribute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::Unity.Properties.Internal.IAttributes.AddAttribute");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attribute);
    }
    // private System.Void Unity.Properties.Internal.IAttributes.AddAttributes(System.Collections.Generic.IEnumerable`1<System.Attribute> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unity_Properties_Internal_IAttributes_AddAttributes(::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* attributes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::Unity.Properties.Internal.IAttributes.AddAttributes");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attributes);
    }
    // public System.Boolean HasAttribute()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TAttribute>
    bool HasAttribute() {
      static_assert(std::is_convertible_v<TAttribute, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::HasAttribute");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Unity::Properties::Property_2<TContainer, TValue>*), -1)));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAttribute>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Property_2<TContainer, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::Property_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Property_2<TContainer, TValue>*, creationType>()));
    }
  }; // Unity.Properties.Property`2
  // Could not write size check! Type: Unity.Properties.Property`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
