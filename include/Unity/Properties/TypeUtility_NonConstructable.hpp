// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Properties.TypeUtility
#include "Unity/Properties/TypeUtility.hpp"
// Including type: Unity.Properties.TypeUtility/ITypeConstructor
#include "Unity/Properties/TypeUtility_ITypeConstructor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Properties::TypeUtility::NonConstructable);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Properties::TypeUtility::NonConstructable*, "Unity.Properties", "TypeUtility/NonConstructable");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Properties.TypeUtility/NonConstructable
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeUtility::NonConstructable : public ::Il2CppObject/*, public ::Unity::Properties::TypeUtility::ITypeConstructor*/ {
    public:
    // Creating interface conversion operator: operator ::Unity::Properties::TypeUtility::ITypeConstructor
    operator ::Unity::Properties::TypeUtility::ITypeConstructor() noexcept {
      return *reinterpret_cast<::Unity::Properties::TypeUtility::ITypeConstructor*>(this);
    }
    // private System.Boolean Unity.Properties.TypeUtility.ITypeConstructor.get_CanBeInstantiated()
    // Offset: 0x5537EA8
    bool Unity_Properties_TypeUtility_ITypeConstructor_get_CanBeInstantiated();
    // public System.Object Instantiate()
    // Offset: 0x5537EB0
    ::Il2CppObject* Instantiate();
    // public System.Void .ctor()
    // Offset: 0x5537A84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeUtility::NonConstructable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Properties::TypeUtility::NonConstructable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeUtility::NonConstructable*, creationType>()));
    }
  }; // Unity.Properties.TypeUtility/NonConstructable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::NonConstructable::Unity_Properties_TypeUtility_ITypeConstructor_get_CanBeInstantiated
// Il2CppName: Unity.Properties.TypeUtility.ITypeConstructor.get_CanBeInstantiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Properties::TypeUtility::NonConstructable::*)()>(&Unity::Properties::TypeUtility::NonConstructable::Unity_Properties_TypeUtility_ITypeConstructor_get_CanBeInstantiated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility::NonConstructable*), "Unity.Properties.TypeUtility.ITypeConstructor.get_CanBeInstantiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::NonConstructable::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Unity::Properties::TypeUtility::NonConstructable::*)()>(&Unity::Properties::TypeUtility::NonConstructable::Instantiate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeUtility::NonConstructable*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::TypeUtility::NonConstructable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
