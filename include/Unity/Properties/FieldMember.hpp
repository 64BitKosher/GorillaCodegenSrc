// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Properties.IMemberInfo
#include "Unity/Properties/IMemberInfo.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: FieldMember
  struct FieldMember;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Properties::FieldMember, "Unity.Properties", "FieldMember");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Properties.FieldMember
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct FieldMember/*, public ::System::ValueType, public ::Unity::Properties::IMemberInfo*/ {
    public:
    public:
    // readonly System.Reflection.FieldInfo m_FieldInfo
    // Size: 0x8
    // Offset: 0x0
    ::System::Reflection::FieldInfo* m_FieldInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    public:
    // Creating value type constructor for type: FieldMember
    constexpr FieldMember(::System::Reflection::FieldInfo* m_FieldInfo_ = {}) noexcept : m_FieldInfo{m_FieldInfo_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Properties::IMemberInfo
    operator ::Unity::Properties::IMemberInfo() noexcept {
      return *reinterpret_cast<::Unity::Properties::IMemberInfo*>(this);
    }
    // Creating conversion operator: operator ::System::Reflection::FieldInfo*
    constexpr operator ::System::Reflection::FieldInfo*() const noexcept {
      return m_FieldInfo;
    }
    // Get instance field reference: readonly System.Reflection.FieldInfo m_FieldInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn_m_FieldInfo();
    // public System.Void .ctor(System.Reflection.FieldInfo fieldInfo)
    // Offset: 0x5536304
    // ABORTED: conflicts with another method.  FieldMember(::System::Reflection::FieldInfo* fieldInfo);
    // public System.String get_Name()
    // Offset: 0x553630C
    ::StringW get_Name();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x553632C
    bool get_IsReadOnly();
    // public System.Type get_ValueType()
    // Offset: 0x5536348
    ::System::Type* get_ValueType();
    // public System.Collections.Generic.IEnumerable`1<System.Attribute> GetCustomAttributes()
    // Offset: 0x553636C
    ::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* GetCustomAttributes();
  }; // Unity.Properties.FieldMember
  #pragma pack(pop)
  static check_size<sizeof(FieldMember), 0 + sizeof(::System::Reflection::FieldInfo*)> __Unity_Properties_FieldMemberSizeCheck;
  static_assert(sizeof(FieldMember) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Properties::FieldMember::FieldMember
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Unity::Properties::FieldMember::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Properties::FieldMember::*)()>(&Unity::Properties::FieldMember::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::FieldMember), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::FieldMember::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Properties::FieldMember::*)()>(&Unity::Properties::FieldMember::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::FieldMember), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::FieldMember::get_ValueType
// Il2CppName: get_ValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Unity::Properties::FieldMember::*)()>(&Unity::Properties::FieldMember::get_ValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::FieldMember), "get_ValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Properties::FieldMember::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* (Unity::Properties::FieldMember::*)()>(&Unity::Properties::FieldMember::GetCustomAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::FieldMember), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
