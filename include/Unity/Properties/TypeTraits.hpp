// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Forward declaring type: TypeTraits
  class TypeTraits;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Properties::TypeTraits);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Properties::TypeTraits*, "Unity.Properties", "TypeTraits");
// Type namespace: Unity.Properties
namespace Unity::Properties {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Properties.TypeTraits
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeTraits : public ::Il2CppObject {
    public:
    // static public System.Boolean IsContainer(System.Type type)
    // Offset: 0x5536400
    static bool IsContainer(::System::Type* type);
  }; // Unity.Properties.TypeTraits
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Properties::TypeTraits::IsContainer
// Il2CppName: IsContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Unity::Properties::TypeTraits::IsContainer)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Properties::TypeTraits*), "IsContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
