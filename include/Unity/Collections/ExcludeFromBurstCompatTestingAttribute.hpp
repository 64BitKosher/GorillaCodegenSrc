// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: ExcludeFromBurstCompatTestingAttribute
  class ExcludeFromBurstCompatTestingAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Collections::ExcludeFromBurstCompatTestingAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::ExcludeFromBurstCompatTestingAttribute*, "Unity.Collections", "ExcludeFromBurstCompatTestingAttribute");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Collections.ExcludeFromBurstCompatTestingAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ExcludeFromBurstCompatTestingAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String <Reason>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Reason;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Reason;
    }
    // Get instance field reference: private System.String <Reason>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Reason$k__BackingField();
    // public System.Void set_Reason(System.String value)
    // Offset: 0x5087C8C
    void set_Reason(::StringW value);
    // public System.Void .ctor(System.String _reason)
    // Offset: 0x5087C94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExcludeFromBurstCompatTestingAttribute* New_ctor(::StringW _reason) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ExcludeFromBurstCompatTestingAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExcludeFromBurstCompatTestingAttribute*, creationType>(_reason)));
    }
  }; // Unity.Collections.ExcludeFromBurstCompatTestingAttribute
  #pragma pack(pop)
  static check_size<sizeof(ExcludeFromBurstCompatTestingAttribute), 16 + sizeof(::StringW)> __Unity_Collections_ExcludeFromBurstCompatTestingAttributeSizeCheck;
  static_assert(sizeof(ExcludeFromBurstCompatTestingAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::ExcludeFromBurstCompatTestingAttribute::set_Reason
// Il2CppName: set_Reason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::ExcludeFromBurstCompatTestingAttribute::*)(::StringW)>(&Unity::Collections::ExcludeFromBurstCompatTestingAttribute::set_Reason)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::ExcludeFromBurstCompatTestingAttribute*), "set_Reason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Unity::Collections::ExcludeFromBurstCompatTestingAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
