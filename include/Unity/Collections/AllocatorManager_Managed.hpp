// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Collections::AllocatorManager::Managed);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::AllocatorManager::Managed*, "Unity.Collections", "AllocatorManager/Managed");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Collections.AllocatorManager/Managed
  // [TokenAttribute] Offset: FFFFFFFF
  class AllocatorManager::Managed : public ::Il2CppObject {
    public:
    // Get static field: static Unity.Collections.AllocatorManager/TryFunction[] TryFunctionDelegates
    static ::ArrayW<::Unity::Collections::AllocatorManager::TryFunction*> _get_TryFunctionDelegates();
    // Set static field: static Unity.Collections.AllocatorManager/TryFunction[] TryFunctionDelegates
    static void _set_TryFunctionDelegates(::ArrayW<::Unity::Collections::AllocatorManager::TryFunction*> value);
    // static private System.Void .cctor()
    // Offset: 0x508740C
    static void _cctor();
  }; // Unity.Collections.AllocatorManager/Managed
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::Managed::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Collections::AllocatorManager::Managed::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::Managed*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
