// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.IIndexable`1
#include "Unity/Collections/IIndexable_1.hpp"
// Including type: Unity.Collections.AllocatorManager/Array4096`1
#include "Unity/Collections/AllocatorManager_Array4096_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::AllocatorManager::Array32768_1, "Unity.Collections", "AllocatorManager/Array32768`1");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AllocatorManager/Array32768`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct AllocatorManager::Array32768_1/*, public ::System::ValueType, public ::Unity::Collections::IIndexable_1<T>*/ {
    public:
    public:
    // Unity.Collections.AllocatorManager/Array4096`1<T> f0
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f0;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f1
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f1;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f2
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f2;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f3
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f3;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f4
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f4;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f5
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f5;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f6
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f6;
    // Unity.Collections.AllocatorManager/Array4096`1<T> f7
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Array4096_1<T> f7;
    public:
    // Creating value type constructor for type: Array32768_1
    constexpr Array32768_1(::Unity::Collections::AllocatorManager::Array4096_1<T> f0_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f1_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f2_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f3_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f4_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f5_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f6_ = {}, ::Unity::Collections::AllocatorManager::Array4096_1<T> f7_ = {}) noexcept : f0{f0_}, f1{f1_}, f2{f2_}, f3{f3_}, f4{f4_}, f5{f5_}, f6{f6_}, f7{f7_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::IIndexable_1<T>
    operator ::Unity::Collections::IIndexable_1<T>() noexcept {
      return *reinterpret_cast<::Unity::Collections::IIndexable_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f0
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f0");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f0"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f1
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f1");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f1"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f2
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f2");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f2"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f3
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f3() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f3");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f3"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f4
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f4() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f4");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f4"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f5
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f5() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f5");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f5"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f6
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f6() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f6");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f6"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/Array4096`1<T> f7
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Array4096_1<T>& dyn_f7() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::dyn_f7");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f7"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::Array4096_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::get_Length");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::AllocatorManager::Array32768_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T ElementAt(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T ElementAt(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array32768_1::ElementAt");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::AllocatorManager::Array32768_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
  }; // Unity.Collections.AllocatorManager/Array32768`1
  // Could not write size check! Type: Unity.Collections.AllocatorManager/Array32768`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
