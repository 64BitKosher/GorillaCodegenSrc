// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/IAllocator
// Already included the same include: Unity/Collections/AllocatorManager.hpp
// Including type: Unity.Collections.FixedList4096Bytes`1
#include "Unity/Collections/FixedList4096Bytes_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::AllocatorManager::SlabAllocator, "Unity.Collections", "AllocatorManager/SlabAllocator");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AllocatorManager/SlabAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct AllocatorManager::SlabAllocator/*, public ::System::ValueType, public ::Unity::Collections::AllocatorManager::IAllocator*/ {
    public:
    // Nested type: ::Unity::Collections::AllocatorManager::SlabAllocator::Try_000000B5$PostfixBurstDelegate
    class Try_000000B5$PostfixBurstDelegate;
    // Nested type: ::Unity::Collections::AllocatorManager::SlabAllocator::Try_000000B5$BurstDirectCall
    class Try_000000B5$BurstDirectCall;
    public:
    // Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_handle;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // Unity.Collections.AllocatorManager/Block Storage
    // Size: 0x20
    // Offset: 0x8
    ::Unity::Collections::AllocatorManager::Block Storage;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::Block) == 0x20);
    // System.Int32 Log2SlabSizeInBytes
    // Size: 0x4
    // Offset: 0x28
    int Log2SlabSizeInBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Unity.Collections.FixedList4096Bytes`1<System.Int32> Occupied
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::FixedList4096Bytes_1<int> Occupied;
    // System.Int64 budgetInBytes
    // Size: 0x8
    // Offset: 0x1030
    int64_t budgetInBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 allocatedBytes
    // Size: 0x8
    // Offset: 0x1038
    int64_t allocatedBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: SlabAllocator
    constexpr SlabAllocator(::Unity::Collections::AllocatorManager::AllocatorHandle m_handle_ = {}, ::Unity::Collections::AllocatorManager::Block Storage_ = {}, int Log2SlabSizeInBytes_ = {}, ::Unity::Collections::FixedList4096Bytes_1<int> Occupied_ = {}, int64_t budgetInBytes_ = {}, int64_t allocatedBytes_ = {}) noexcept : m_handle{m_handle_}, Storage{Storage_}, Log2SlabSizeInBytes{Log2SlabSizeInBytes_}, Occupied{Occupied_}, budgetInBytes{budgetInBytes_}, allocatedBytes{allocatedBytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::AllocatorManager::IAllocator
    operator ::Unity::Collections::AllocatorManager::IAllocator() noexcept {
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::IAllocator*>(this);
    }
    // Get instance field reference: Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_handle();
    // Get instance field reference: Unity.Collections.AllocatorManager/Block Storage
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Block& dyn_Storage();
    // Get instance field reference: System.Int32 Log2SlabSizeInBytes
    [[deprecated("Use field access instead!")]] int& dyn_Log2SlabSizeInBytes();
    // Get instance field reference: Unity.Collections.FixedList4096Bytes`1<System.Int32> Occupied
    [[deprecated("Use field access instead!")]] ::Unity::Collections::FixedList4096Bytes_1<int>& dyn_Occupied();
    // Get instance field reference: System.Int64 budgetInBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_budgetInBytes();
    // Get instance field reference: System.Int64 allocatedBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_allocatedBytes();
    // public Unity.Collections.AllocatorManager/AllocatorHandle get_Handle()
    // Offset: 0x5086D60
    ::Unity::Collections::AllocatorManager::AllocatorHandle get_Handle();
    // System.Int32 get_SlabSizeInBytes()
    // Offset: 0x5086D68
    int get_SlabSizeInBytes();
    // public System.Int32 Try(ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5086D78
    int Try(ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // static public System.Int32 Try(System.IntPtr allocatorState, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5086CFC
    static int Try(::System::IntPtr allocatorState, ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // public System.Void Dispose()
    // Offset: 0x5087094
    void Dispose();
    // static public System.Int32 Try$BurstManaged(System.IntPtr allocatorState, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5087098
    static int Try$BurstManaged(::System::IntPtr allocatorState, ByRef<::Unity::Collections::AllocatorManager::Block> block);
  }; // Unity.Collections.AllocatorManager/SlabAllocator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::AllocatorManager::AllocatorHandle (Unity::Collections::AllocatorManager::SlabAllocator::*)()>(&Unity::Collections::AllocatorManager::SlabAllocator::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::get_SlabSizeInBytes
// Il2CppName: get_SlabSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Collections::AllocatorManager::SlabAllocator::*)()>(&Unity::Collections::AllocatorManager::SlabAllocator::get_SlabSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "get_SlabSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Collections::AllocatorManager::SlabAllocator::*)(ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::SlabAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::SlabAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* allocatorState = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocatorState, block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::AllocatorManager::SlabAllocator::*)()>(&Unity::Collections::AllocatorManager::SlabAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::SlabAllocator::Try$BurstManaged
// Il2CppName: Try$BurstManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::SlabAllocator::Try$BurstManaged)> {
  static const MethodInfo* get() {
    static auto* allocatorState = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::SlabAllocator), "Try$BurstManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocatorState, block});
  }
};
