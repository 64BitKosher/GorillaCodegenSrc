// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueueData
  struct UnsafeQueueData;
  // Forward declaring type: UnsafeQueueBlockPoolData
  struct UnsafeQueueBlockPoolData;
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueue`1<T>
  template<typename T>
  struct UnsafeQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::UnsafeQueue_1, "Unity.Collections", "UnsafeQueue`1");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.UnsafeQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  template<typename T>
  struct UnsafeQueue_1/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // Unity.Collections.UnsafeQueueData* m_Buffer
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::UnsafeQueueData* m_Buffer;
    // Field size check
    static_assert(sizeof(::Unity::Collections::UnsafeQueueData*) == 0x8);
    // Unity.Collections.UnsafeQueueBlockPoolData* m_QueuePool
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::UnsafeQueueBlockPoolData* m_QueuePool;
    // Field size check
    static_assert(sizeof(::Unity::Collections::UnsafeQueueBlockPoolData*) == 0x8);
    // Unity.Collections.AllocatorManager/AllocatorHandle m_AllocatorLabel
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_AllocatorLabel;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeQueue_1
    constexpr UnsafeQueue_1(::Unity::Collections::UnsafeQueueData* m_Buffer_ = {}, ::Unity::Collections::UnsafeQueueBlockPoolData* m_QueuePool_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle m_AllocatorLabel_ = {}) noexcept : m_Buffer{m_Buffer_}, m_QueuePool{m_QueuePool_}, m_AllocatorLabel{m_AllocatorLabel_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.UnsafeQueueData* m_Buffer
    [[deprecated("Use field access instead!")]] ::Unity::Collections::UnsafeQueueData*& dyn_m_Buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::dyn_m_Buffer");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Buffer"))->offset;
      return *reinterpret_cast<::Unity::Collections::UnsafeQueueData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.UnsafeQueueBlockPoolData* m_QueuePool
    [[deprecated("Use field access instead!")]] ::Unity::Collections::UnsafeQueueBlockPoolData*& dyn_m_QueuePool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::dyn_m_QueuePool");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_QueuePool"))->offset;
      return *reinterpret_cast<::Unity::Collections::UnsafeQueueBlockPoolData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.AllocatorManager/AllocatorHandle m_AllocatorLabel
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_AllocatorLabel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::dyn_m_AllocatorLabel");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AllocatorLabel"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::AllocatorHandle*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static System.Void Free(Unity.Collections.UnsafeQueue`1<T>* data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Free(::Unity::Collections::UnsafeQueue_1<T>* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::Free");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UnsafeQueue_1<T>>::get(), "Free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
    }
    // public System.Boolean get_IsCreated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCreated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::get_IsCreated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::UnsafeQueue_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::UnsafeQueue_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Unity.Collections.UnsafeQueue`1
  // Could not write size check! Type: Unity.Collections.UnsafeQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
