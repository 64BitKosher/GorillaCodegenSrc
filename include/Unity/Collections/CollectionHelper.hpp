// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: CollectionHelper
  class CollectionHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Collections::CollectionHelper);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::CollectionHelper*, "Unity.Collections", "CollectionHelper");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Collections.CollectionHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  class CollectionHelper : public ::Il2CppObject {
    public:
    // Nested type: ::Unity::Collections::CollectionHelper::DummyJob
    struct DummyJob;
    // static public System.UInt32 Hash(System.Void* ptr, System.Int32 bytes)
    // Offset: 0x5087C28
    static uint Hash(void* ptr, int bytes);
    // static System.Boolean ShouldDeallocate(Unity.Collections.AllocatorManager/AllocatorHandle allocator)
    // Offset: 0x5087C68
    static bool ShouldDeallocate(::Unity::Collections::AllocatorManager::AllocatorHandle allocator);
    // static System.Int32 AssumePositive(System.Int32 value)
    // Offset: 0x5087C74
    static int AssumePositive(int value);
  }; // Unity.Collections.CollectionHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::CollectionHelper::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(void*, int)>(&Unity::Collections::CollectionHelper::Hash)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::CollectionHelper*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, bytes});
  }
};
// Writing MetadataGetter for method: Unity::Collections::CollectionHelper::ShouldDeallocate
// Il2CppName: ShouldDeallocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Collections::AllocatorManager::AllocatorHandle)>(&Unity::Collections::CollectionHelper::ShouldDeallocate)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::CollectionHelper*), "ShouldDeallocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator});
  }
};
// Writing MetadataGetter for method: Unity::Collections::CollectionHelper::AssumePositive
// Il2CppName: AssumePositive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Unity::Collections::CollectionHelper::AssumePositive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::CollectionHelper*), "AssumePositive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
