// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/IAllocator
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: Unity.Collections.ArrayOfArrays`1
#include "Unity/Collections/ArrayOfArrays_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: AutoFreeAllocator
  struct AutoFreeAllocator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::AutoFreeAllocator, "Unity.Collections", "AutoFreeAllocator");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AutoFreeAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct AutoFreeAllocator/*, public ::System::ValueType, public ::Unity::Collections::AllocatorManager::IAllocator*/ {
    public:
    // Nested type: ::Unity::Collections::AutoFreeAllocator::Try_000000DF$PostfixBurstDelegate
    class Try_000000DF$PostfixBurstDelegate;
    // Nested type: ::Unity::Collections::AutoFreeAllocator::Try_000000DF$BurstDirectCall
    class Try_000000DF$BurstDirectCall;
    public:
    // private Unity.Collections.ArrayOfArrays`1<System.IntPtr> m_allocated
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::ArrayOfArrays_1<::System::IntPtr> m_allocated;
    // private Unity.Collections.ArrayOfArrays`1<System.IntPtr> m_tofree
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::ArrayOfArrays_1<::System::IntPtr> m_tofree;
    // private Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    // Size: 0x4
    // Offset: 0x40
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_handle;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // private Unity.Collections.AllocatorManager/AllocatorHandle m_backingAllocatorHandle
    // Size: 0x4
    // Offset: 0x44
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_backingAllocatorHandle;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    public:
    // Creating value type constructor for type: AutoFreeAllocator
    constexpr AutoFreeAllocator(::Unity::Collections::ArrayOfArrays_1<::System::IntPtr> m_allocated_ = {}, ::Unity::Collections::ArrayOfArrays_1<::System::IntPtr> m_tofree_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle m_handle_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle m_backingAllocatorHandle_ = {}) noexcept : m_allocated{m_allocated_}, m_tofree{m_tofree_}, m_handle{m_handle_}, m_backingAllocatorHandle{m_backingAllocatorHandle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::AllocatorManager::IAllocator
    operator ::Unity::Collections::AllocatorManager::IAllocator() noexcept {
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::IAllocator*>(this);
    }
    // Get instance field reference: private Unity.Collections.ArrayOfArrays`1<System.IntPtr> m_allocated
    [[deprecated("Use field access instead!")]] ::Unity::Collections::ArrayOfArrays_1<::System::IntPtr>& dyn_m_allocated();
    // Get instance field reference: private Unity.Collections.ArrayOfArrays`1<System.IntPtr> m_tofree
    [[deprecated("Use field access instead!")]] ::Unity::Collections::ArrayOfArrays_1<::System::IntPtr>& dyn_m_tofree();
    // Get instance field reference: private Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_handle();
    // Get instance field reference: private Unity.Collections.AllocatorManager/AllocatorHandle m_backingAllocatorHandle
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_backingAllocatorHandle();
    // public System.Void Update()
    // Offset: 0x50874E4
    void Update();
    // public System.Void FreeAll()
    // Offset: 0x5087654
    void FreeAll();
    // public System.Void Dispose()
    // Offset: 0x5087724
    void Dispose();
    // public System.Int32 Try(ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5087780
    int Try(ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // static System.Int32 Try(System.IntPtr state, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5087480
    static int Try(::System::IntPtr state, ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // public Unity.Collections.AllocatorManager/AllocatorHandle get_Handle()
    // Offset: 0x5087928
    ::Unity::Collections::AllocatorManager::AllocatorHandle get_Handle();
    // static public System.Int32 Try$BurstManaged(System.IntPtr state, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5087930
    static int Try$BurstManaged(::System::IntPtr state, ByRef<::Unity::Collections::AllocatorManager::Block> block);
  }; // Unity.Collections.AutoFreeAllocator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::AutoFreeAllocator::*)()>(&Unity::Collections::AutoFreeAllocator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::FreeAll
// Il2CppName: FreeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::AutoFreeAllocator::*)()>(&Unity::Collections::AutoFreeAllocator::FreeAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "FreeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::AutoFreeAllocator::*)()>(&Unity::Collections::AutoFreeAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Collections::AutoFreeAllocator::*)(ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AutoFreeAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AutoFreeAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::AllocatorManager::AllocatorHandle (Unity::Collections::AutoFreeAllocator::*)()>(&Unity::Collections::AutoFreeAllocator::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AutoFreeAllocator::Try$BurstManaged
// Il2CppName: Try$BurstManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AutoFreeAllocator::Try$BurstManaged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AutoFreeAllocator), "Try$BurstManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, block});
  }
};
