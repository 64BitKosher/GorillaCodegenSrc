// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IEquatable`1<T>
  template<typename T>
  class IEquatable_1;
}
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: HashMapHelper`1<TKey>
  template<typename TKey>
  struct HashMapHelper_1;
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: KVPair`2<TKey, TValue>
  template<typename TKey, typename TValue>
  struct KVPair_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::KVPair_2, "Unity.Collections", "KVPair`2");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.KVPair`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  struct KVPair_2/*, public ::System::ValueType*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.HashMapHelper`1<TKey>* m_Data
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>* m_Data;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>*) == 0x8);
    // System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x0
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Next
    // Size: 0x4
    // Offset: 0x0
    int m_Next;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: KVPair_2
    constexpr KVPair_2(::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>* m_Data_ = {}, int m_Index_ = {}, int m_Next_ = {}) noexcept : m_Data{m_Data_}, m_Index{m_Index_}, m_Next{m_Next_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.LowLevel.Unsafe.HashMapHelper`1<TKey>* m_Data
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>*& dyn_m_Data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::KVPair_2::dyn_m_Data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Data"))->offset;
      return *reinterpret_cast<::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::KVPair_2::dyn_m_Index");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Next
    [[deprecated("Use field access instead!")]] int& dyn_m_Next() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::KVPair_2::dyn_m_Next");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Next"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
  }; // Unity.Collections.KVPair`2
  // Could not write size check! Type: Unity.Collections.KVPair`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
