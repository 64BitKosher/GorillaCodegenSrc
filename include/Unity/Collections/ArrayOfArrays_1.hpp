// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: ArrayOfArrays`1<T>
  template<typename T>
  struct ArrayOfArrays_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::ArrayOfArrays_1, "Unity.Collections", "ArrayOfArrays`1");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.ArrayOfArrays`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  struct ArrayOfArrays_1/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private Unity.Collections.AllocatorManager/AllocatorHandle m_backingAllocatorHandle
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_backingAllocatorHandle;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // private System.Int32 m_lengthInElements
    // Size: 0x4
    // Offset: 0x0
    int m_lengthInElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_capacityInElements
    // Size: 0x4
    // Offset: 0x0
    int m_capacityInElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_log2BlockSizeInElements
    // Size: 0x4
    // Offset: 0x0
    int m_log2BlockSizeInElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_blocks
    // Size: 0x4
    // Offset: 0x0
    int m_blocks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.IntPtr* m_block
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr* m_block;
    // Field size check
    static_assert(sizeof(::System::IntPtr*) == 0x8);
    public:
    // Creating value type constructor for type: ArrayOfArrays_1
    constexpr ArrayOfArrays_1(::Unity::Collections::AllocatorManager::AllocatorHandle m_backingAllocatorHandle_ = {}, int m_lengthInElements_ = {}, int m_capacityInElements_ = {}, int m_log2BlockSizeInElements_ = {}, int m_blocks_ = {}, ::System::IntPtr* m_block_ = {}) noexcept : m_backingAllocatorHandle{m_backingAllocatorHandle_}, m_lengthInElements{m_lengthInElements_}, m_capacityInElements{m_capacityInElements_}, m_log2BlockSizeInElements{m_log2BlockSizeInElements_}, m_blocks{m_blocks_}, m_block{m_block_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private Unity.Collections.AllocatorManager/AllocatorHandle m_backingAllocatorHandle
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_backingAllocatorHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_backingAllocatorHandle");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_backingAllocatorHandle"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::AllocatorHandle*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_lengthInElements
    [[deprecated("Use field access instead!")]] int& dyn_m_lengthInElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_lengthInElements");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lengthInElements"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_capacityInElements
    [[deprecated("Use field access instead!")]] int& dyn_m_capacityInElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_capacityInElements");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capacityInElements"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_log2BlockSizeInElements
    [[deprecated("Use field access instead!")]] int& dyn_m_log2BlockSizeInElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_log2BlockSizeInElements");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_log2BlockSizeInElements"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_blocks
    [[deprecated("Use field access instead!")]] int& dyn_m_blocks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_blocks");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_blocks"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.IntPtr* m_block
    [[deprecated("Use field access instead!")]] ::System::IntPtr*& dyn_m_block() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::dyn_m_block");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_block"))->offset;
      return *reinterpret_cast<::System::IntPtr**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Int32 get_BlockSizeInElements()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_BlockSizeInElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::get_BlockSizeInElements");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlockSizeInElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Int32 get_BlockSizeInBytes()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_BlockSizeInBytes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::get_BlockSizeInBytes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlockSizeInBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Int32 get_BlockMask()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_BlockMask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::get_BlockMask");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlockMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void LockfreeAdd(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LockfreeAdd(T t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::LockfreeAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "LockfreeAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
    }
    // public T get_Item(System.Int32 elementIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int elementIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, elementIndex);
    }
    // public System.Void Rewind()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Rewind() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::Rewind");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Rewind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::ArrayOfArrays_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void RemoveAtSwapBack(System.Int32 elementIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAtSwapBack(int elementIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::RemoveAtSwapBack");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveAtSwapBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elementIndex);
    }
    // private System.Int32 BlockIndexOfElement(System.Int32 elementIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int BlockIndexOfElement(int elementIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::BlockIndexOfElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "BlockIndexOfElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, elementIndex);
    }
    // public System.Void TrimExcess()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TrimExcess() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::ArrayOfArrays_1::TrimExcess");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TrimExcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Unity.Collections.ArrayOfArrays`1
  // Could not write size check! Type: Unity.Collections.ArrayOfArrays`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
