// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.LowLevel.Unsafe.UnsafeStream
#include "Unity/Collections/LowLevel/Unsafe/UnsafeStream.hpp"
// Completed includes
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: NativeStreamDispose
  struct NativeStreamDispose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::NativeStreamDispose, "Unity.Collections", "NativeStreamDispose");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.NativeStreamDispose
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeContainerAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct NativeStreamDispose/*, public ::System::ValueType*/ {
    public:
    public:
    // public Unity.Collections.LowLevel.Unsafe.UnsafeStream m_StreamData
    // Size: 0x20
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStream m_StreamData;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStream) == 0x20);
    public:
    // Creating value type constructor for type: NativeStreamDispose
    constexpr NativeStreamDispose(::Unity::Collections::LowLevel::Unsafe::UnsafeStream m_StreamData_ = {}) noexcept : m_StreamData{m_StreamData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::LowLevel::Unsafe::UnsafeStream
    constexpr operator ::Unity::Collections::LowLevel::Unsafe::UnsafeStream() const noexcept {
      return m_StreamData;
    }
    // Get instance field reference: public Unity.Collections.LowLevel.Unsafe.UnsafeStream m_StreamData
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStream& dyn_m_StreamData();
    // public System.Void Dispose()
    // Offset: 0x5088254
    void Dispose();
  }; // Unity.Collections.NativeStreamDispose
  #pragma pack(pop)
  static check_size<sizeof(NativeStreamDispose), 0 + sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStream)> __Unity_Collections_NativeStreamDisposeSizeCheck;
  static_assert(sizeof(NativeStreamDispose) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::NativeStreamDispose::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::NativeStreamDispose::*)()>(&Unity::Collections::NativeStreamDispose::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::NativeStreamDispose), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
