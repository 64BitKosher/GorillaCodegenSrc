// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::AllocatorManager::TableEntry, "Unity.Collections", "AllocatorManager/TableEntry");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AllocatorManager/TableEntry
  // [TokenAttribute] Offset: FFFFFFFF
  struct AllocatorManager::TableEntry/*, public ::System::ValueType*/ {
    public:
    public:
    // System.IntPtr function
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr function;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.IntPtr state
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr state;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: TableEntry
    constexpr TableEntry(::System::IntPtr function_ = {}, ::System::IntPtr state_ = {}) noexcept : function{function_}, state{state_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.IntPtr function
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_function();
    // Get instance field reference: System.IntPtr state
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_state();
  }; // Unity.Collections.AllocatorManager/TableEntry
  #pragma pack(pop)
  static check_size<sizeof(AllocatorManager::TableEntry), 8 + sizeof(::System::IntPtr)> __Unity_Collections_AllocatorManager_TableEntrySizeCheck;
  static_assert(sizeof(AllocatorManager::TableEntry) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
