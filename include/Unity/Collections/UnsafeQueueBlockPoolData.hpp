// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueueBlockHeader
  struct UnsafeQueueBlockHeader;
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueueBlockPoolData
  struct UnsafeQueueBlockPoolData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::UnsafeQueueBlockPoolData, "Unity.Collections", "UnsafeQueueBlockPoolData");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.UnsafeQueueBlockPoolData
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeQueueBlockPoolData/*, public ::System::ValueType*/ {
    public:
    public:
    // System.IntPtr m_FirstBlock
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_FirstBlock;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.Int32 m_NumBlocks
    // Size: 0x4
    // Offset: 0x8
    int m_NumBlocks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_MaxBlocks
    // Size: 0x4
    // Offset: 0xC
    int m_MaxBlocks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_AllocLock
    // Size: 0x4
    // Offset: 0x10
    int m_AllocLock;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeQueueBlockPoolData
    constexpr UnsafeQueueBlockPoolData(::System::IntPtr m_FirstBlock_ = {}, int m_NumBlocks_ = {}, int m_MaxBlocks_ = {}, int m_AllocLock_ = {}) noexcept : m_FirstBlock{m_FirstBlock_}, m_NumBlocks{m_NumBlocks_}, m_MaxBlocks{m_MaxBlocks_}, m_AllocLock{m_AllocLock_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.IntPtr m_FirstBlock
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_FirstBlock();
    // Get instance field reference: System.Int32 m_NumBlocks
    [[deprecated("Use field access instead!")]] int& dyn_m_NumBlocks();
    // Get instance field reference: System.Int32 m_MaxBlocks
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxBlocks();
    // Get instance field reference: System.Int32 m_AllocLock
    [[deprecated("Use field access instead!")]] int& dyn_m_AllocLock();
    // public System.Void FreeBlock(Unity.Collections.UnsafeQueueBlockHeader* block)
    // Offset: 0x508929C
    void FreeBlock(::Unity::Collections::UnsafeQueueBlockHeader* block);
  }; // Unity.Collections.UnsafeQueueBlockPoolData
  #pragma pack(pop)
  static check_size<sizeof(UnsafeQueueBlockPoolData), 16 + sizeof(int)> __Unity_Collections_UnsafeQueueBlockPoolDataSizeCheck;
  static_assert(sizeof(UnsafeQueueBlockPoolData) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::UnsafeQueueBlockPoolData::FreeBlock
// Il2CppName: FreeBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::UnsafeQueueBlockPoolData::*)(::Unity::Collections::UnsafeQueueBlockHeader*)>(&Unity::Collections::UnsafeQueueBlockPoolData::FreeBlock)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections", "UnsafeQueueBlockHeader"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::UnsafeQueueBlockPoolData), "FreeBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
