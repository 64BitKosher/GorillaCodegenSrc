// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: Spinner
  struct Spinner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::Spinner, "Unity.Collections", "Spinner");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.Spinner
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct Spinner/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_Lock
    // Size: 0x4
    // Offset: 0x0
    int m_Lock;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Spinner
    constexpr Spinner(int m_Lock_ = {}) noexcept : m_Lock{m_Lock_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_Lock;
    }
    // Get instance field reference: private System.Int32 m_Lock
    [[deprecated("Use field access instead!")]] int& dyn_m_Lock();
    // System.Void Acquire()
    // Offset: 0x5088310
    void Acquire();
    // System.Void Release()
    // Offset: 0x5088358
    void Release();
  }; // Unity.Collections.Spinner
  #pragma pack(pop)
  static check_size<sizeof(Spinner), 0 + sizeof(int)> __Unity_Collections_SpinnerSizeCheck;
  static_assert(sizeof(Spinner) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::Spinner::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::Spinner::*)()>(&Unity::Collections::Spinner::Acquire)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::Spinner), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::Spinner::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::Spinner::*)()>(&Unity::Collections::Spinner::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::Spinner), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
