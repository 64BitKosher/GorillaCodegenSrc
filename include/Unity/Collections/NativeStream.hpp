// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.LowLevel.Unsafe.UnsafeStream
#include "Unity/Collections/LowLevel/Unsafe/UnsafeStream.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: NativeStream
  struct NativeStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::NativeStream, "Unity.Collections", "NativeStream");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.NativeStream
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  // [NativeContainerAttribute] Offset: FFFFFFFF
  struct NativeStream/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Unity::Collections::NativeStream::ConstructJobList
    struct ConstructJobList;
    // Nested type: ::Unity::Collections::NativeStream::ConstructJob
    struct ConstructJob;
    public:
    // private Unity.Collections.LowLevel.Unsafe.UnsafeStream m_Stream
    // Size: 0x20
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStream m_Stream;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStream) == 0x20);
    public:
    // Creating value type constructor for type: NativeStream
    constexpr NativeStream(::Unity::Collections::LowLevel::Unsafe::UnsafeStream m_Stream_ = {}) noexcept : m_Stream{m_Stream_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::LowLevel::Unsafe::UnsafeStream
    constexpr operator ::Unity::Collections::LowLevel::Unsafe::UnsafeStream() const noexcept {
      return m_Stream;
    }
    // Get instance field reference: private Unity.Collections.LowLevel.Unsafe.UnsafeStream m_Stream
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStream& dyn_m_Stream();
    // public System.Boolean get_IsCreated()
    // Offset: 0x50880D4
    bool get_IsCreated();
    // public System.Void Dispose()
    // Offset: 0x50880E4
    void Dispose();
    // private System.Void AllocateForEach(System.Int32 forEachCount)
    // Offset: 0x5088144
    void AllocateForEach(int forEachCount);
  }; // Unity.Collections.NativeStream
  #pragma pack(pop)
  static check_size<sizeof(NativeStream), 0 + sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStream)> __Unity_Collections_NativeStreamSizeCheck;
  static_assert(sizeof(NativeStream) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::NativeStream::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Collections::NativeStream::*)()>(&Unity::Collections::NativeStream::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::NativeStream), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::NativeStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::NativeStream::*)()>(&Unity::Collections::NativeStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::NativeStream), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::NativeStream::AllocateForEach
// Il2CppName: AllocateForEach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::NativeStream::*)(int)>(&Unity::Collections::NativeStream::AllocateForEach)> {
  static const MethodInfo* get() {
    static auto* forEachCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::NativeStream), "AllocateForEach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forEachCount});
  }
};
