// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueueBlockPoolData
  struct UnsafeQueueBlockPoolData;
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Forward declaring type: UnsafeQueueData
  struct UnsafeQueueData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::UnsafeQueueData, "Unity.Collections", "UnsafeQueueData");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.UnsafeQueueData
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeQueueData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr m_FirstBlock
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr m_FirstBlock;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr m_LastBlock
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr m_LastBlock;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 m_MaxItems
    // Size: 0x4
    // Offset: 0x10
    int m_MaxItems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_CurrentRead
    // Size: 0x4
    // Offset: 0x14
    int m_CurrentRead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Byte* m_CurrentWriteBlockTLS
    // Size: 0x8
    // Offset: 0x18
    uint8_t* m_CurrentWriteBlockTLS;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    public:
    // Creating value type constructor for type: UnsafeQueueData
    constexpr UnsafeQueueData(::System::IntPtr m_FirstBlock_ = {}, ::System::IntPtr m_LastBlock_ = {}, int m_MaxItems_ = {}, int m_CurrentRead_ = {}, uint8_t* m_CurrentWriteBlockTLS_ = {}) noexcept : m_FirstBlock{m_FirstBlock_}, m_LastBlock{m_LastBlock_}, m_MaxItems{m_MaxItems_}, m_CurrentRead{m_CurrentRead_}, m_CurrentWriteBlockTLS{m_CurrentWriteBlockTLS_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr m_FirstBlock
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_FirstBlock();
    // Get instance field reference: public System.IntPtr m_LastBlock
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_LastBlock();
    // Get instance field reference: public System.Int32 m_MaxItems
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxItems();
    // Get instance field reference: public System.Int32 m_CurrentRead
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentRead();
    // Get instance field reference: public System.Byte* m_CurrentWriteBlockTLS
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_m_CurrentWriteBlockTLS();
    // static public System.Void DeallocateQueue(Unity.Collections.UnsafeQueueData* data, Unity.Collections.UnsafeQueueBlockPoolData* pool, Unity.Collections.AllocatorManager/AllocatorHandle allocation)
    // Offset: 0x50893A0
    static void DeallocateQueue(::Unity::Collections::UnsafeQueueData* data, ::Unity::Collections::UnsafeQueueBlockPoolData* pool, ::Unity::Collections::AllocatorManager::AllocatorHandle allocation);
  }; // Unity.Collections.UnsafeQueueData
  #pragma pack(pop)
  static check_size<sizeof(UnsafeQueueData), 24 + sizeof(uint8_t*)> __Unity_Collections_UnsafeQueueDataSizeCheck;
  static_assert(sizeof(UnsafeQueueData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::UnsafeQueueData::DeallocateQueue
// Il2CppName: DeallocateQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::UnsafeQueueData*, ::Unity::Collections::UnsafeQueueBlockPoolData*, ::Unity::Collections::AllocatorManager::AllocatorHandle)>(&Unity::Collections::UnsafeQueueData::DeallocateQueue)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections", "UnsafeQueueData"))->byval_arg;
    static auto* pool = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections", "UnsafeQueueBlockPoolData"))->byval_arg;
    static auto* allocation = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::UnsafeQueueData), "DeallocateQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, pool, allocation});
  }
};
