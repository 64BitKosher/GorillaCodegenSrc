// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::AllocatorManager::Array16_1, "Unity.Collections", "AllocatorManager/Array16`1");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AllocatorManager/Array16`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct AllocatorManager::Array16_1/*, public ::System::ValueType*/ {
    public:
    public:
    // T f0
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f0;
    // T f1
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f1;
    // T f2
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f2;
    // T f3
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f3;
    // T f4
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f4;
    // T f5
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f5;
    // T f6
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f6;
    // T f7
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f7;
    // T f8
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f8;
    // T f9
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f9;
    // T f10
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f10;
    // T f11
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f11;
    // T f12
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f12;
    // T f13
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f13;
    // T f14
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f14;
    // T f15
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T f15;
    public:
    // Creating value type constructor for type: Array16_1
    constexpr Array16_1(T f0_ = {}, T f1_ = {}, T f2_ = {}, T f3_ = {}, T f4_ = {}, T f5_ = {}, T f6_ = {}, T f7_ = {}, T f8_ = {}, T f9_ = {}, T f10_ = {}, T f11_ = {}, T f12_ = {}, T f13_ = {}, T f14_ = {}, T f15_ = {}) noexcept : f0{f0_}, f1{f1_}, f2{f2_}, f3{f3_}, f4{f4_}, f5{f5_}, f6{f6_}, f7{f7_}, f8{f8_}, f9{f9_}, f10{f10_}, f11{f11_}, f12{f12_}, f13{f13_}, f14{f14_}, f15{f15_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: T f0
    [[deprecated("Use field access instead!")]] T& dyn_f0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f0");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f0"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f1
    [[deprecated("Use field access instead!")]] T& dyn_f1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f1");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f1"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f2
    [[deprecated("Use field access instead!")]] T& dyn_f2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f2");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f2"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f3
    [[deprecated("Use field access instead!")]] T& dyn_f3() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f3");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f3"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f4
    [[deprecated("Use field access instead!")]] T& dyn_f4() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f4");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f4"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f5
    [[deprecated("Use field access instead!")]] T& dyn_f5() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f5");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f5"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f6
    [[deprecated("Use field access instead!")]] T& dyn_f6() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f6");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f6"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f7
    [[deprecated("Use field access instead!")]] T& dyn_f7() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f7");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f7"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f8
    [[deprecated("Use field access instead!")]] T& dyn_f8() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f8");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f8"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f9
    [[deprecated("Use field access instead!")]] T& dyn_f9() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f9");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f9"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f10
    [[deprecated("Use field access instead!")]] T& dyn_f10() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f10");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f10"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f11
    [[deprecated("Use field access instead!")]] T& dyn_f11() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f11");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f11"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f12
    [[deprecated("Use field access instead!")]] T& dyn_f12() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f12");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f12"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f13
    [[deprecated("Use field access instead!")]] T& dyn_f13() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f13");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f13"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f14
    [[deprecated("Use field access instead!")]] T& dyn_f14() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f14");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f14"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: T f15
    [[deprecated("Use field access instead!")]] T& dyn_f15() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::AllocatorManager::Array16_1::dyn_f15");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "f15"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
  }; // Unity.Collections.AllocatorManager/Array16`1
  // Could not write size check! Type: Unity.Collections.AllocatorManager/Array16`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
