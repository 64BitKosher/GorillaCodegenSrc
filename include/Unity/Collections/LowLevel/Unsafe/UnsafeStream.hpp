// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.AllocatorManager/Block
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStream
  struct UnsafeStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeStream, "Unity.Collections.LowLevel.Unsafe", "UnsafeStream");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeStream
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeStream/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Unity::Collections::LowLevel::Unsafe::UnsafeStream::DisposeJob
    struct DisposeJob;
    // Nested type: ::Unity::Collections::LowLevel::Unsafe::UnsafeStream::ConstructJobList
    struct ConstructJobList;
    // Nested type: ::Unity::Collections::LowLevel::Unsafe::UnsafeStream::ConstructJob
    struct ConstructJob;
    public:
    // Unity.Collections.AllocatorManager/Block m_BlockData
    // Size: 0x20
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::Block m_BlockData;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::Block) == 0x20);
    public:
    // Creating value type constructor for type: UnsafeStream
    constexpr UnsafeStream(::Unity::Collections::AllocatorManager::Block m_BlockData_ = {}) noexcept : m_BlockData{m_BlockData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::AllocatorManager::Block
    constexpr operator ::Unity::Collections::AllocatorManager::Block() const noexcept {
      return m_BlockData;
    }
    // Get instance field reference: Unity.Collections.AllocatorManager/Block m_BlockData
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Block& dyn_m_BlockData();
    // System.Void AllocateForEach(System.Int32 forEachCount)
    // Offset: 0x5088148
    void AllocateForEach(int forEachCount);
    // public System.Boolean get_IsCreated()
    // Offset: 0x508B024
    bool get_IsCreated();
    // private System.Void Deallocate()
    // Offset: 0x508B034
    void Deallocate();
    // public System.Void Dispose()
    // Offset: 0x5088114
    void Dispose();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeStream
  #pragma pack(pop)
  static check_size<sizeof(UnsafeStream), 0 + sizeof(::Unity::Collections::AllocatorManager::Block)> __Unity_Collections_LowLevel_Unsafe_UnsafeStreamSizeCheck;
  static_assert(sizeof(UnsafeStream) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeStream::AllocateForEach
// Il2CppName: AllocateForEach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeStream::*)(int)>(&Unity::Collections::LowLevel::Unsafe::UnsafeStream::AllocateForEach)> {
  static const MethodInfo* get() {
    static auto* forEachCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeStream), "AllocateForEach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forEachCount});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeStream::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Collections::LowLevel::Unsafe::UnsafeStream::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeStream::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeStream), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeStream::Deallocate
// Il2CppName: Deallocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeStream::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeStream::Deallocate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeStream), "Deallocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeStream::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeStream), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
