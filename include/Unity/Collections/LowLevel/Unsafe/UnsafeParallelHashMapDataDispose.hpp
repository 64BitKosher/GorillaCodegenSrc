// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeParallelHashMapData
  struct UnsafeParallelHashMapData;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeParallelHashMapDataDispose
  struct UnsafeParallelHashMapDataDispose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose, "Unity.Collections.LowLevel.Unsafe", "UnsafeParallelHashMapDataDispose");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDispose
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeContainerAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeParallelHashMapDataDispose/*, public ::System::ValueType*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapData* m_Buffer
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData* m_Buffer;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData*) == 0x8);
    // Unity.Collections.AllocatorManager/AllocatorHandle m_AllocatorLabel
    // Size: 0x4
    // Offset: 0x8
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_AllocatorLabel;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeParallelHashMapDataDispose
    constexpr UnsafeParallelHashMapDataDispose(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData* m_Buffer_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle m_AllocatorLabel_ = {}) noexcept : m_Buffer{m_Buffer_}, m_AllocatorLabel{m_AllocatorLabel_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapData* m_Buffer
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData*& dyn_m_Buffer();
    // Get instance field reference: Unity.Collections.AllocatorManager/AllocatorHandle m_AllocatorLabel
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_AllocatorLabel();
    // public System.Void Dispose()
    // Offset: 0x508AFD4
    void Dispose();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDispose
  #pragma pack(pop)
  static check_size<sizeof(UnsafeParallelHashMapDataDispose), 8 + sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle)> __Unity_Collections_LowLevel_Unsafe_UnsafeParallelHashMapDataDisposeSizeCheck;
  static_assert(sizeof(UnsafeParallelHashMapDataDispose) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
