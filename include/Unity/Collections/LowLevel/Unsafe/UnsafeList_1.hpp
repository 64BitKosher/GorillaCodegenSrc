// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.INativeList`1
#include "Unity/Collections/INativeList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: Unity.Collections.NativeArrayOptions
#include "Unity/Collections/NativeArrayOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeList`1<T>
  template<typename T>
  struct UnsafeList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1, "Unity.Collections.LowLevel.Unsafe", "UnsafeList`1");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeList`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  struct UnsafeList_1/*, public ::System::ValueType, public ::System::IDisposable, public ::Unity::Collections::INativeList_1<T>, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
    public:
    public:
    // public T* Ptr
    // Size: 0x8
    // Offset: 0x0
    T* Ptr;
    // Field size check
    static_assert(sizeof(T*) == 0x8);
    // public System.Int32 m_length
    // Size: 0x4
    // Offset: 0x0
    int m_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_capacity
    // Size: 0x4
    // Offset: 0x0
    int m_capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // private readonly System.Int32 padding
    // Size: 0x4
    // Offset: 0x0
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeList_1
    constexpr UnsafeList_1(T* Ptr_ = {}, int m_length_ = {}, int m_capacity_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}, int padding_ = {}) noexcept : Ptr{Ptr_}, m_length{m_length_}, m_capacity{m_capacity_}, Allocator{Allocator_}, padding{padding_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::INativeList_1<T>
    operator ::Unity::Collections::INativeList_1<T>() noexcept {
      return *reinterpret_cast<::Unity::Collections::INativeList_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public T* Ptr
    [[deprecated("Use field access instead!")]] T*& dyn_Ptr() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::dyn_Ptr");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ptr"))->offset;
      return *reinterpret_cast<T**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 m_length
    [[deprecated("Use field access instead!")]] int& dyn_m_length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::dyn_m_length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_length"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 m_capacity
    [[deprecated("Use field access instead!")]] int& dyn_m_capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::dyn_m_capacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::dyn_Allocator");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Allocator"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::AllocatorHandle*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 padding
    [[deprecated("Use field access instead!")]] int& dyn_padding() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::dyn_padding");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "padding"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::get_Length");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::get_Capacity");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::get_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::set_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public T ElementAt(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T ElementAt(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::ElementAt");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void .ctor(System.Int32 initialCapacity, Unity.Collections.AllocatorManager/AllocatorHandle allocator, Unity.Collections.NativeArrayOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    UnsafeList_1(int initialCapacity, ::Unity::Collections::AllocatorManager::AllocatorHandle allocator, ::Unity::Collections::NativeArrayOptions options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialCapacity), ::il2cpp_utils::ExtractType(allocator), ::il2cpp_utils::ExtractType(options)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initialCapacity, allocator, options);
    }
    // static Unity.Collections.LowLevel.Unsafe.UnsafeList`1<T>* Create(System.Int32 initialCapacity, ref U allocator, Unity.Collections.NativeArrayOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class U>
    static ::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>* Create(int initialCapacity, ByRef<U> allocator, ::Unity::Collections::NativeArrayOptions options) {
      static_assert(std::is_convertible_v<U, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<U>, ::Unity::Collections::AllocatorManager::IAllocator>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UnsafeList_1<T>>::get(), "Create", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialCapacity), ::il2cpp_utils::ExtractType(allocator), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, initialCapacity, byref(allocator), options);
    }
    // static public System.Void Destroy(Unity.Collections.LowLevel.Unsafe.UnsafeList`1<T>* listData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Destroy(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>* listData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::Destroy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UnsafeList_1<T>>::get(), "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listData)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, listData);
    }
    // public System.Boolean get_IsCreated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCreated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::get_IsCreated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Resize(System.Int32 length, Unity.Collections.NativeArrayOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Resize(int length, ::Unity::Collections::NativeArrayOptions options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, length, options);
    }
    // private System.Void ResizeExact(ref U allocator, System.Int32 newCapacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class U>
    void ResizeExact(ByRef<U> allocator, int newCapacity) {
      static_assert(std::is_convertible_v<U, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<U>, ::Unity::Collections::AllocatorManager::IAllocator>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::ResizeExact");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ResizeExact", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allocator), ::il2cpp_utils::ExtractType(newCapacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(allocator), newCapacity);
    }
    // private System.Void SetCapacity(ref U allocator, System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class U>
    void SetCapacity(ByRef<U> allocator, int capacity) {
      static_assert(std::is_convertible_v<U, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<U>, ::Unity::Collections::AllocatorManager::IAllocator>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::SetCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allocator), ::il2cpp_utils::ExtractType(capacity)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(allocator), capacity);
    }
    // public System.Void SetCapacity(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCapacity(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::SetCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
    }
    // public System.Void Add(in T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(value));
    }
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAt(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::RemoveAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeList_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeList`1
  // Could not write size check! Type: Unity.Collections.LowLevel.Unsafe.UnsafeList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
