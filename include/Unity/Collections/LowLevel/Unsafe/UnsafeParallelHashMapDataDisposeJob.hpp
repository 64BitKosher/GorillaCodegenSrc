// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDispose
#include "Unity/Collections/LowLevel/Unsafe/UnsafeParallelHashMapDataDispose.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeParallelHashMapDataDisposeJob
  struct UnsafeParallelHashMapDataDisposeJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDisposeJob, "Unity.Collections.LowLevel.Unsafe", "UnsafeParallelHashMapDataDisposeJob");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDisposeJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct UnsafeParallelHashMapDataDisposeJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDispose Data
    // Size: 0xC
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose Data;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose) == 0xC);
    public:
    // Creating value type constructor for type: UnsafeParallelHashMapDataDisposeJob
    constexpr UnsafeParallelHashMapDataDisposeJob(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose Data_ = {}) noexcept : Data{Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose
    constexpr operator ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose() const noexcept {
      return Data;
    }
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDispose Data
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose& dyn_Data();
    // public System.Void Execute()
    // Offset: 0x508AFE4
    void Execute();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapDataDisposeJob
  #pragma pack(pop)
  static check_size<sizeof(UnsafeParallelHashMapDataDisposeJob), 0 + sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDispose)> __Unity_Collections_LowLevel_Unsafe_UnsafeParallelHashMapDataDisposeJobSizeCheck;
  static_assert(sizeof(UnsafeParallelHashMapDataDisposeJob) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDisposeJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDisposeJob::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDisposeJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapDataDisposeJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
