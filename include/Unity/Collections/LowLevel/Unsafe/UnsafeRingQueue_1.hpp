// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeRingQueue`1<T>
  template<typename T>
  struct UnsafeRingQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1, "Unity.Collections.LowLevel.Unsafe", "UnsafeRingQueue`1");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  template<typename T>
  struct UnsafeRingQueue_1/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public T* Ptr
    // Size: 0x8
    // Offset: 0x0
    T* Ptr;
    // Field size check
    static_assert(sizeof(T*) == 0x8);
    // public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // readonly System.Int32 m_Capacity
    // Size: 0x4
    // Offset: 0x0
    int m_Capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Filled
    // Size: 0x4
    // Offset: 0x0
    int m_Filled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Write
    // Size: 0x4
    // Offset: 0x0
    int m_Write;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_Read
    // Size: 0x4
    // Offset: 0x0
    int m_Read;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeRingQueue_1
    constexpr UnsafeRingQueue_1(T* Ptr_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}, int m_Capacity_ = {}, int m_Filled_ = {}, int m_Write_ = {}, int m_Read_ = {}) noexcept : Ptr{Ptr_}, Allocator{Allocator_}, m_Capacity{m_Capacity_}, m_Filled{m_Filled_}, m_Write{m_Write_}, m_Read{m_Read_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public T* Ptr
    [[deprecated("Use field access instead!")]] T*& dyn_Ptr() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_Ptr");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ptr"))->offset;
      return *reinterpret_cast<T**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_Allocator");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Allocator"))->offset;
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::AllocatorHandle*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.Int32 m_Capacity
    [[deprecated("Use field access instead!")]] int& dyn_m_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_m_Capacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Capacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Filled
    [[deprecated("Use field access instead!")]] int& dyn_m_Filled() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_m_Filled");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Filled"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Write
    [[deprecated("Use field access instead!")]] int& dyn_m_Write() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_m_Write");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Write"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 m_Read
    [[deprecated("Use field access instead!")]] int& dyn_m_Read() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::dyn_m_Read");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Read"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static System.Void Free(Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1<T>* data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void Free(::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1<T>* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::Free");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<UnsafeRingQueue_1<T>>::get(), "Free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
    }
    // public System.Boolean get_IsCreated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCreated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::get_IsCreated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeRingQueue_1<T>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1
  // Could not write size check! Type: Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
