// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeParallelHashMapData
  struct UnsafeParallelHashMapData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData, "Unity.Collections.LowLevel.Unsafe", "UnsafeParallelHashMapData");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapData
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeParallelHashMapData/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Byte* values
    // Size: 0x8
    // Offset: 0x0
    uint8_t* values;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // System.Byte* keys
    // Size: 0x8
    // Offset: 0x8
    uint8_t* keys;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // System.Byte* next
    // Size: 0x8
    // Offset: 0x10
    uint8_t* next;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // System.Byte* buckets
    // Size: 0x8
    // Offset: 0x18
    uint8_t* buckets;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // System.Int32 keyCapacity
    // Size: 0x4
    // Offset: 0x20
    int keyCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 bucketCapacityMask
    // Size: 0x4
    // Offset: 0x24
    int bucketCapacityMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 allocatedIndexLength
    // Size: 0x4
    // Offset: 0x28
    int allocatedIndexLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeParallelHashMapData
    constexpr UnsafeParallelHashMapData(uint8_t* values_ = {}, uint8_t* keys_ = {}, uint8_t* next_ = {}, uint8_t* buckets_ = {}, int keyCapacity_ = {}, int bucketCapacityMask_ = {}, int allocatedIndexLength_ = {}) noexcept : values{values_}, keys{keys_}, next{next_}, buckets{buckets_}, keyCapacity{keyCapacity_}, bucketCapacityMask{bucketCapacityMask_}, allocatedIndexLength{allocatedIndexLength_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Byte* values
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_values();
    // Get instance field reference: System.Byte* keys
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_keys();
    // Get instance field reference: System.Byte* next
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_next();
    // Get instance field reference: System.Byte* buckets
    [[deprecated("Use field access instead!")]] uint8_t*& dyn_buckets();
    // Get instance field reference: System.Int32 keyCapacity
    [[deprecated("Use field access instead!")]] int& dyn_keyCapacity();
    // Get instance field reference: System.Int32 bucketCapacityMask
    [[deprecated("Use field access instead!")]] int& dyn_bucketCapacityMask();
    // Get instance field reference: System.Int32 allocatedIndexLength
    [[deprecated("Use field access instead!")]] int& dyn_allocatedIndexLength();
    // static System.Void DeallocateHashMap(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapData* data, Unity.Collections.AllocatorManager/AllocatorHandle allocator)
    // Offset: 0x508AF54
    static void DeallocateHashMap(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData* data, ::Unity::Collections::AllocatorManager::AllocatorHandle allocator);
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapData
  #pragma pack(pop)
  static check_size<sizeof(UnsafeParallelHashMapData), 40 + sizeof(int)> __Unity_Collections_LowLevel_Unsafe_UnsafeParallelHashMapDataSizeCheck;
  static_assert(sizeof(UnsafeParallelHashMapData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData::DeallocateHashMap
// Il2CppName: DeallocateHashMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData*, ::Unity::Collections::AllocatorManager::AllocatorHandle)>(&Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData::DeallocateHashMap)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections.LowLevel.Unsafe", "UnsafeParallelHashMapData"))->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeParallelHashMapData), "DeallocateHashMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, allocator});
  }
};
