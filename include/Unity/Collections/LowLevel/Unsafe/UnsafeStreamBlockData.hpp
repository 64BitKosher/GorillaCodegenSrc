// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: Unity.Collections.AllocatorManager/Block
// Already included the same include: Unity/Collections/AllocatorManager.hpp
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStreamBlock
  struct UnsafeStreamBlock;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStreamBlockData
  struct UnsafeStreamBlockData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlockData, "Unity.Collections.LowLevel.Unsafe", "UnsafeStreamBlockData");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlockData
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeStreamBlockData/*, public ::System::ValueType*/ {
    public:
    public:
    // Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // Padding between fields: Allocator and: Blocks
    char __padding0[0x4] = {};
    // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock** Blocks
    // Size: 0x8
    // Offset: 0x8
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock** Blocks;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock**) == 0x8);
    // System.Int32 BlockCount
    // Size: 0x4
    // Offset: 0x10
    int BlockCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: BlockCount and: Ranges
    char __padding2[0x4] = {};
    // Unity.Collections.AllocatorManager/Block Ranges
    // Size: 0x20
    // Offset: 0x18
    ::Unity::Collections::AllocatorManager::Block Ranges;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::Block) == 0x20);
    // System.Int32 RangeCount
    // Size: 0x4
    // Offset: 0x38
    int RangeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeStreamBlockData
    constexpr UnsafeStreamBlockData(::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}, ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock** Blocks_ = {}, int BlockCount_ = {}, ::Unity::Collections::AllocatorManager::Block Ranges_ = {}, int RangeCount_ = {}) noexcept : Allocator{Allocator_}, Blocks{Blocks_}, BlockCount{BlockCount_}, Ranges{Ranges_}, RangeCount{RangeCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator();
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock** Blocks
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock**& dyn_Blocks();
    // Get instance field reference: System.Int32 BlockCount
    [[deprecated("Use field access instead!")]] int& dyn_BlockCount();
    // Get instance field reference: Unity.Collections.AllocatorManager/Block Ranges
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Block& dyn_Ranges();
    // Get instance field reference: System.Int32 RangeCount
    [[deprecated("Use field access instead!")]] int& dyn_RangeCount();
    // System.Void Free(Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock* oldBlock)
    // Offset: 0x508B004
    void Free(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock* oldBlock);
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlockData
  #pragma pack(pop)
  static check_size<sizeof(UnsafeStreamBlockData), 56 + sizeof(int)> __Unity_Collections_LowLevel_Unsafe_UnsafeStreamBlockDataSizeCheck;
  static_assert(sizeof(UnsafeStreamBlockData) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlockData::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlockData::*)(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock*)>(&Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlockData::Free)> {
  static const MethodInfo* get() {
    static auto* oldBlock = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections.LowLevel.Unsafe", "UnsafeStreamBlock"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlockData), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldBlock});
  }
};
