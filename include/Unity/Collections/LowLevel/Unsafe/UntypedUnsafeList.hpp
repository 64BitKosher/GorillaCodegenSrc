// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UntypedUnsafeList
  struct UntypedUnsafeList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList, "Unity.Collections.LowLevel.Unsafe", "UntypedUnsafeList");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UntypedUnsafeList
  // [TokenAttribute] Offset: FFFFFFFF
  struct UntypedUnsafeList/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly System.Void* Ptr
    // Size: 0x8
    // Offset: 0x0
    void* Ptr;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // readonly System.Int32 m_length
    // Size: 0x4
    // Offset: 0x8
    int m_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Int32 m_capacity
    // Size: 0x4
    // Offset: 0xC
    int m_capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x10
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // readonly System.Int32 padding
    // Size: 0x4
    // Offset: 0x14
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UntypedUnsafeList
    constexpr UntypedUnsafeList(void* Ptr_ = {}, int m_length_ = {}, int m_capacity_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}, int padding_ = {}) noexcept : Ptr{Ptr_}, m_length{m_length_}, m_capacity{m_capacity_}, Allocator{Allocator_}, padding{padding_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: readonly System.Void* Ptr
    [[deprecated("Use field access instead!")]] void*& dyn_Ptr();
    // Get instance field reference: readonly System.Int32 m_length
    [[deprecated("Use field access instead!")]] int& dyn_m_length();
    // Get instance field reference: readonly System.Int32 m_capacity
    [[deprecated("Use field access instead!")]] int& dyn_m_capacity();
    // Get instance field reference: readonly Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator();
    // Get instance field reference: readonly System.Int32 padding
    [[deprecated("Use field access instead!")]] int& dyn_padding();
  }; // Unity.Collections.LowLevel.Unsafe.UntypedUnsafeList
  #pragma pack(pop)
  static check_size<sizeof(UntypedUnsafeList), 20 + sizeof(int)> __Unity_Collections_LowLevel_Unsafe_UntypedUnsafeListSizeCheck;
  static_assert(sizeof(UntypedUnsafeList) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
