// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStreamBlock
  struct UnsafeStreamBlock;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStreamRange
  struct UnsafeStreamRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamRange, "Unity.Collections.LowLevel.Unsafe", "UnsafeStreamRange");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeStreamRange
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeStreamRange/*, public ::System::ValueType*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock* Block
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock* Block;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock*) == 0x8);
    // System.Int32 OffsetInFirstBlock
    // Size: 0x4
    // Offset: 0x8
    int OffsetInFirstBlock;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 ElementCount
    // Size: 0x4
    // Offset: 0xC
    int ElementCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 LastOffset
    // Size: 0x4
    // Offset: 0x10
    int LastOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 NumberOfBlocks
    // Size: 0x4
    // Offset: 0x14
    int NumberOfBlocks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeStreamRange
    constexpr UnsafeStreamRange(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock* Block_ = {}, int OffsetInFirstBlock_ = {}, int ElementCount_ = {}, int LastOffset_ = {}, int NumberOfBlocks_ = {}) noexcept : Block{Block_}, OffsetInFirstBlock{OffsetInFirstBlock_}, ElementCount{ElementCount_}, LastOffset{LastOffset_}, NumberOfBlocks{NumberOfBlocks_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock* Block
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock*& dyn_Block();
    // Get instance field reference: System.Int32 OffsetInFirstBlock
    [[deprecated("Use field access instead!")]] int& dyn_OffsetInFirstBlock();
    // Get instance field reference: System.Int32 ElementCount
    [[deprecated("Use field access instead!")]] int& dyn_ElementCount();
    // Get instance field reference: System.Int32 LastOffset
    [[deprecated("Use field access instead!")]] int& dyn_LastOffset();
    // Get instance field reference: System.Int32 NumberOfBlocks
    [[deprecated("Use field access instead!")]] int& dyn_NumberOfBlocks();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeStreamRange
  #pragma pack(pop)
  static check_size<sizeof(UnsafeStreamRange), 20 + sizeof(int)> __Unity_Collections_LowLevel_Unsafe_UnsafeStreamRangeSizeCheck;
  static_assert(sizeof(UnsafeStreamRange) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
