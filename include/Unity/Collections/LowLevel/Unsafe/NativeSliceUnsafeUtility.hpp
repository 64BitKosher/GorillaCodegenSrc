// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.NativeSlice`1
#include "Unity/Collections/NativeSlice_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: NativeSliceUnsafeUtility
  class NativeSliceUnsafeUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility*, "Unity.Collections.LowLevel.Unsafe", "NativeSliceUnsafeUtility");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class NativeSliceUnsafeUtility : public ::Il2CppObject {
    public:
    // static public Unity.Collections.NativeSlice`1<T> ConvertExistingDataToNativeSlice(System.Void* dataPointer, System.Int32 stride, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Unity::Collections::NativeSlice_1<T> ConvertExistingDataToNativeSlice(void* dataPointer, int stride, int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::ConvertExistingDataToNativeSlice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "NativeSliceUnsafeUtility", "ConvertExistingDataToNativeSlice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataPointer), ::il2cpp_utils::ExtractType(stride), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeSlice_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, dataPointer, stride, length);
    }
    // static public System.Void* GetUnsafePtr(Unity.Collections.NativeSlice`1<T> nativeSlice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void* GetUnsafePtr(::Unity::Collections::NativeSlice_1<T> nativeSlice) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::GetUnsafePtr");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "NativeSliceUnsafeUtility", "GetUnsafePtr", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativeSlice)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, nativeSlice);
    }
    // static public System.Void* GetUnsafeReadOnlyPtr(Unity.Collections.NativeSlice`1<T> nativeSlice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void* GetUnsafeReadOnlyPtr(::Unity::Collections::NativeSlice_1<T> nativeSlice) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::GetUnsafeReadOnlyPtr");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "NativeSliceUnsafeUtility", "GetUnsafeReadOnlyPtr", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativeSlice)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, nativeSlice);
    }
  }; // Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::ConvertExistingDataToNativeSlice
// Il2CppName: ConvertExistingDataToNativeSlice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::GetUnsafePtr
// Il2CppName: GetUnsafePtr
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::NativeSliceUnsafeUtility::GetUnsafeReadOnlyPtr
// Il2CppName: GetUnsafeReadOnlyPtr
// Cannot write MetadataGetter for generic methods!
