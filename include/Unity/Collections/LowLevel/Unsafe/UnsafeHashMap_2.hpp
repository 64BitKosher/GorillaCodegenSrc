// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Unity.Collections.KVPair`2
#include "Unity/Collections/KVPair_2.hpp"
// Including type: Unity.Collections.LowLevel.Unsafe.HashMapHelper`1
#include "Unity/Collections/LowLevel/Unsafe/HashMapHelper_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IEquatable`1 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeHashMap`2<TKey, TValue>
  template<typename TKey, typename TValue>
  struct UnsafeHashMap_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2, "Unity.Collections.LowLevel.Unsafe", "UnsafeHashMap`2");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  struct UnsafeHashMap_2/*, public ::System::ValueType, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::Unity::Collections::KVPair_2<TKey, TValue>>*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.HashMapHelper`1<TKey> m_Data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey> m_Data;
    public:
    // Creating value type constructor for type: UnsafeHashMap_2
    constexpr UnsafeHashMap_2(::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey> m_Data_ = {}) noexcept : m_Data{m_Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::Unity::Collections::KVPair_2<TKey, TValue>>
    operator ::System::Collections::Generic::IEnumerable_1<::Unity::Collections::KVPair_2<TKey, TValue>>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::Unity::Collections::KVPair_2<TKey, TValue>>*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>
    constexpr operator ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>() const noexcept {
      return m_Data;
    }
    // Autogenerated instance field getter
    // Get instance field: Unity.Collections.LowLevel.Unsafe.HashMapHelper`1<TKey> m_Data
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>& dyn_m_Data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2::dyn_m_Data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Data"))->offset;
      return *reinterpret_cast<::Unity::Collections::LowLevel::Unsafe::HashMapHelper_1<TKey>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2::Dispose");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2<TKey, TValue>), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsCreated()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCreated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2::get_IsCreated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<Unity.Collections.KVPair`2<TKey,TValue>> System.Collections.Generic.IEnumerable<Unity.Collections.KVPair<TKey,TValue>>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::Unity::Collections::KVPair_2<TKey, TValue>>* System_Collections_Generic_IEnumerable$Unity_Collections_KVPair$TKey_TValue$$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2::System.Collections.Generic.IEnumerable<Unity.Collections.KVPair<TKey,TValue>>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2<TKey, TValue>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::Unity::Collections::KVPair_2<TKey, TValue>>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::Unity::Collections::LowLevel::Unsafe::UnsafeHashMap_2<TKey, TValue>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2
  // Could not write size check! Type: Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
