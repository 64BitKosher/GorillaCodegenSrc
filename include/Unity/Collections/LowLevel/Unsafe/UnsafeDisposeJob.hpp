// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeDisposeJob
  struct UnsafeDisposeJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeDisposeJob, "Unity.Collections.LowLevel.Unsafe", "UnsafeDisposeJob");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeDisposeJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct UnsafeDisposeJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public System.Void* Ptr
    // Size: 0x8
    // Offset: 0x0
    void* Ptr;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x8
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeDisposeJob
    constexpr UnsafeDisposeJob(void* Ptr_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}) noexcept : Ptr{Ptr_}, Allocator{Allocator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public System.Void* Ptr
    [[deprecated("Use field access instead!")]] void*& dyn_Ptr();
    // Get instance field reference: public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator();
    // public System.Void Execute()
    // Offset: 0x508AEF4
    void Execute();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeDisposeJob
  #pragma pack(pop)
  static check_size<sizeof(UnsafeDisposeJob), 8 + sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle)> __Unity_Collections_LowLevel_Unsafe_UnsafeDisposeJobSizeCheck;
  static_assert(sizeof(UnsafeDisposeJob) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeDisposeJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeDisposeJob::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeDisposeJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeDisposeJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
