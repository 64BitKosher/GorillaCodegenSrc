// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.IUTF8Bytes
#include "Unity/Collections/IUTF8Bytes.hpp"
// Including type: Unity.Collections.INativeList`1
#include "Unity/Collections/INativeList_1.hpp"
// Including type: Unity.Collections.LowLevel.Unsafe.UntypedUnsafeList
#include "Unity/Collections/LowLevel/Unsafe/UntypedUnsafeList.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeText
  struct UnsafeText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeText, "Unity.Collections.LowLevel.Unsafe", "UnsafeText");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeText
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeText/*, public ::System::ValueType, public ::System::IDisposable, public ::Unity::Collections::IUTF8Bytes, public ::Unity::Collections::INativeList_1<uint8_t>*/ {
    public:
    public:
    // Unity.Collections.LowLevel.Unsafe.UntypedUnsafeList m_UntypedListData
    // Size: 0x18
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList m_UntypedListData;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList) == 0x18);
    public:
    // Creating value type constructor for type: UnsafeText
    constexpr UnsafeText(::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList m_UntypedListData_ = {}) noexcept : m_UntypedListData{m_UntypedListData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::IUTF8Bytes
    operator ::Unity::Collections::IUTF8Bytes() noexcept {
      return *reinterpret_cast<::Unity::Collections::IUTF8Bytes*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::INativeList_1<uint8_t>
    operator ::Unity::Collections::INativeList_1<uint8_t>() noexcept {
      return *reinterpret_cast<::Unity::Collections::INativeList_1<uint8_t>*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList
    constexpr operator ::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList() const noexcept {
      return m_UntypedListData;
    }
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UntypedUnsafeList m_UntypedListData
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList& dyn_m_UntypedListData();
    // public System.Boolean get_IsCreated()
    // Offset: 0x508B1C0
    bool get_IsCreated();
    // static System.Void Free(Unity.Collections.LowLevel.Unsafe.UnsafeText* data)
    // Offset: 0x5088264
    static void Free(::Unity::Collections::LowLevel::Unsafe::UnsafeText* data);
    // public System.Void Dispose()
    // Offset: 0x508B250
    void Dispose();
    // public System.Byte* GetUnsafePtr()
    // Offset: 0x508B2C8
    uint8_t* GetUnsafePtr();
    // public System.Int32 get_Length()
    // Offset: 0x508B2D0
    int get_Length();
    // public override System.String ToString()
    // Offset: 0x508B35C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeText
  #pragma pack(pop)
  static check_size<sizeof(UnsafeText), 0 + sizeof(::Unity::Collections::LowLevel::Unsafe::UntypedUnsafeList)> __Unity_Collections_LowLevel_Unsafe_UnsafeTextSizeCheck;
  static_assert(sizeof(UnsafeText) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Collections::LowLevel::Unsafe::UnsafeText::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::LowLevel::Unsafe::UnsafeText*)>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::Free)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections.LowLevel.Unsafe", "UnsafeText"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeText::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::GetUnsafePtr
// Il2CppName: GetUnsafePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (Unity::Collections::LowLevel::Unsafe::UnsafeText::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::GetUnsafePtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "GetUnsafePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Collections::LowLevel::Unsafe::UnsafeText::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeText::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Unity::Collections::LowLevel::Unsafe::UnsafeText::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeText::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeText), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
