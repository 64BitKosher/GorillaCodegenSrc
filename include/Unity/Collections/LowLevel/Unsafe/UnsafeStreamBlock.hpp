// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeStreamBlock
  struct UnsafeStreamBlock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock, "Unity.Collections.LowLevel.Unsafe", "UnsafeStreamBlock");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x9
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct UnsafeStreamBlock/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer
    struct $Data$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock/<Data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $Data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $Data$e__FixedBuffer
      constexpr $Data$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock/<Data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(UnsafeStreamBlock::$Data$e__FixedBuffer), 0 + sizeof(uint8_t)> __Unity_Collections_LowLevel_Unsafe_UnsafeStreamBlock_$Data$e__FixedBufferSizeCheck;
    static_assert(sizeof(UnsafeStreamBlock::$Data$e__FixedBuffer) == 0x1);
    public:
    // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock* Next
    // Size: 0x8
    // Offset: 0x0
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock* Next;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock*) == 0x8);
    // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock/<Data>e__FixedBuffer Data
    // Size: 0x1
    // Offset: 0x8
    ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer Data;
    // Field size check
    static_assert(sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: UnsafeStreamBlock
    constexpr UnsafeStreamBlock(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock* Next_ = {}, ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer Data_ = {}) noexcept : Next{Next_}, Data{Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock* Next
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock*& dyn_Next();
    // Get instance field reference: Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock/<Data>e__FixedBuffer Data
    [[deprecated("Use field access instead!")]] ::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer& dyn_Data();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeStreamBlock
  #pragma pack(pop)
  static check_size<sizeof(UnsafeStreamBlock), 8 + sizeof(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer)> __Unity_Collections_LowLevel_Unsafe_UnsafeStreamBlockSizeCheck;
  static_assert(sizeof(UnsafeStreamBlock) == 0x9);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeStreamBlock::$Data$e__FixedBuffer, "Unity.Collections.LowLevel.Unsafe", "UnsafeStreamBlock/<Data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
