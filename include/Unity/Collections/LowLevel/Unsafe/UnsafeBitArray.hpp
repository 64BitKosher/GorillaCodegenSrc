// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.AllocatorManager/AllocatorHandle
#include "Unity/Collections/AllocatorManager.hpp"
// Completed includes
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeBitArray
  struct UnsafeBitArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeBitArray, "Unity.Collections.LowLevel.Unsafe", "UnsafeBitArray");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeBitArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  struct UnsafeBitArray/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public System.UInt64* Ptr
    // Size: 0x8
    // Offset: 0x0
    uint64_t* Ptr;
    // Field size check
    static_assert(sizeof(uint64_t*) == 0x8);
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x8
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Capacity
    // Size: 0x4
    // Offset: 0xC
    int Capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    // Size: 0x4
    // Offset: 0x10
    ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeBitArray
    constexpr UnsafeBitArray(uint64_t* Ptr_ = {}, int Length_ = {}, int Capacity_ = {}, ::Unity::Collections::AllocatorManager::AllocatorHandle Allocator_ = {}) noexcept : Ptr{Ptr_}, Length{Length_}, Capacity{Capacity_}, Allocator{Allocator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public System.UInt64* Ptr
    [[deprecated("Use field access instead!")]] uint64_t*& dyn_Ptr();
    // Get instance field reference: public System.Int32 Length
    [[deprecated("Use field access instead!")]] int& dyn_Length();
    // Get instance field reference: public System.Int32 Capacity
    [[deprecated("Use field access instead!")]] int& dyn_Capacity();
    // Get instance field reference: public Unity.Collections.AllocatorManager/AllocatorHandle Allocator
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_Allocator();
    // static System.Void Free(Unity.Collections.LowLevel.Unsafe.UnsafeBitArray* data)
    // Offset: 0x5087EA8
    static void Free(::Unity::Collections::LowLevel::Unsafe::UnsafeBitArray* data);
    // public System.Boolean get_IsCreated()
    // Offset: 0x508AEE4
    bool get_IsCreated();
    // public System.Void Dispose()
    // Offset: 0x508AE4C
    void Dispose();
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeBitArray
  #pragma pack(pop)
  static check_size<sizeof(UnsafeBitArray), 16 + sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle)> __Unity_Collections_LowLevel_Unsafe_UnsafeBitArraySizeCheck;
  static_assert(sizeof(UnsafeBitArray) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Unity::Collections::LowLevel::Unsafe::UnsafeBitArray*)>(&Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::Free)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Unity.Collections.LowLevel.Unsafe", "UnsafeBitArray"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeBitArray), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeBitArray), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::*)()>(&Unity::Collections::LowLevel::Unsafe::UnsafeBitArray::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeBitArray), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
