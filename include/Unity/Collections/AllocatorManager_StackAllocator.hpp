// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager/IAllocator
// Already included the same include: Unity/Collections/AllocatorManager.hpp
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::AllocatorManager::StackAllocator, "Unity.Collections", "AllocatorManager/StackAllocator");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.AllocatorManager/StackAllocator
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct AllocatorManager::StackAllocator/*, public ::System::ValueType, public ::Unity::Collections::AllocatorManager::IAllocator*/ {
    public:
    // Nested type: ::Unity::Collections::AllocatorManager::StackAllocator::Try_000000A7$PostfixBurstDelegate
    class Try_000000A7$PostfixBurstDelegate;
    // Nested type: ::Unity::Collections::AllocatorManager::StackAllocator::Try_000000A7$BurstDirectCall
    class Try_000000A7$BurstDirectCall;
    public:
    // Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    // Size: 0x4
    // Offset: 0x0
    ::Unity::Collections::AllocatorManager::AllocatorHandle m_handle;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::AllocatorHandle) == 0x4);
    // Padding between fields: m_handle and: m_storage
    char __padding0[0x4] = {};
    // Unity.Collections.AllocatorManager/Block m_storage
    // Size: 0x20
    // Offset: 0x8
    ::Unity::Collections::AllocatorManager::Block m_storage;
    // Field size check
    static_assert(sizeof(::Unity::Collections::AllocatorManager::Block) == 0x20);
    // System.Int64 m_top
    // Size: 0x8
    // Offset: 0x28
    int64_t m_top;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: StackAllocator
    constexpr StackAllocator(::Unity::Collections::AllocatorManager::AllocatorHandle m_handle_ = {}, ::Unity::Collections::AllocatorManager::Block m_storage_ = {}, int64_t m_top_ = {}) noexcept : m_handle{m_handle_}, m_storage{m_storage_}, m_top{m_top_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Collections::AllocatorManager::IAllocator
    operator ::Unity::Collections::AllocatorManager::IAllocator() noexcept {
      return *reinterpret_cast<::Unity::Collections::AllocatorManager::IAllocator*>(this);
    }
    // Get instance field reference: Unity.Collections.AllocatorManager/AllocatorHandle m_handle
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::AllocatorHandle& dyn_m_handle();
    // Get instance field reference: Unity.Collections.AllocatorManager/Block m_storage
    [[deprecated("Use field access instead!")]] ::Unity::Collections::AllocatorManager::Block& dyn_m_storage();
    // Get instance field reference: System.Int64 m_top
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_top();
    // public Unity.Collections.AllocatorManager/AllocatorHandle get_Handle()
    // Offset: 0x508683C
    ::Unity::Collections::AllocatorManager::AllocatorHandle get_Handle();
    // public System.Int32 Try(ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5086844
    int Try(ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // static public System.Int32 Try(System.IntPtr allocatorState, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x50867D8
    static int Try(::System::IntPtr allocatorState, ByRef<::Unity::Collections::AllocatorManager::Block> block);
    // public System.Void Dispose()
    // Offset: 0x5086A00
    void Dispose();
    // static public System.Int32 Try$BurstManaged(System.IntPtr allocatorState, ref Unity.Collections.AllocatorManager/Block block)
    // Offset: 0x5086A04
    static int Try$BurstManaged(::System::IntPtr allocatorState, ByRef<::Unity::Collections::AllocatorManager::Block> block);
  }; // Unity.Collections.AllocatorManager/StackAllocator
  #pragma pack(pop)
  static check_size<sizeof(AllocatorManager::StackAllocator), 40 + sizeof(int64_t)> __Unity_Collections_AllocatorManager_StackAllocatorSizeCheck;
  static_assert(sizeof(AllocatorManager::StackAllocator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::StackAllocator::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::AllocatorManager::AllocatorHandle (Unity::Collections::AllocatorManager::StackAllocator::*)()>(&Unity::Collections::AllocatorManager::StackAllocator::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::StackAllocator), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::StackAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Unity::Collections::AllocatorManager::StackAllocator::*)(ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::StackAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::StackAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::StackAllocator::Try
// Il2CppName: Try
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::StackAllocator::Try)> {
  static const MethodInfo* get() {
    static auto* allocatorState = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::StackAllocator), "Try", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocatorState, block});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::StackAllocator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Unity::Collections::AllocatorManager::StackAllocator::*)()>(&Unity::Collections::AllocatorManager::StackAllocator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::StackAllocator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Unity::Collections::AllocatorManager::StackAllocator::Try$BurstManaged
// Il2CppName: Try$BurstManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::Unity::Collections::AllocatorManager::Block>)>(&Unity::Collections::AllocatorManager::StackAllocator::Try$BurstManaged)> {
  static const MethodInfo* get() {
    static auto* allocatorState = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/Block")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::AllocatorManager::StackAllocator), "Try$BurstManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocatorState, block});
  }
};
