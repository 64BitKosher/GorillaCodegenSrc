// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.Memory/Unmanaged
#include "Unity/Collections/Memory_Unmanaged.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.AllocatorManager
#include "Unity/Collections/AllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::Memory::Unmanaged::Array, "Unity.Collections", "Memory/Unmanaged/Array");
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Collections.Memory/Unmanaged/Array
  // [TokenAttribute] Offset: FFFFFFFF
  // [GenerateTestsForBurstCompatibilityAttribute] Offset: FFFFFFFF
  struct Memory::Unmanaged::Array/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: Array
    constexpr Array() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static private System.Boolean IsCustom(Unity.Collections.AllocatorManager/AllocatorHandle allocator)
    // Offset: 0x5087DA4
    static bool IsCustom(::Unity::Collections::AllocatorManager::AllocatorHandle allocator);
    // static private System.Void* CustomResize(System.Void* oldPointer, System.Int64 oldCount, System.Int64 newCount, Unity.Collections.AllocatorManager/AllocatorHandle allocator, System.Int64 size, System.Int32 align)
    // Offset: 0x5087DB0
    static void* CustomResize(void* oldPointer, int64_t oldCount, int64_t newCount, ::Unity::Collections::AllocatorManager::AllocatorHandle allocator, int64_t size, int align);
    // static System.Void* Resize(System.Void* oldPointer, System.Int64 oldCount, System.Int64 newCount, Unity.Collections.AllocatorManager/AllocatorHandle allocator, System.Int64 size, System.Int32 align)
    // Offset: 0x5087CC4
    static void* Resize(void* oldPointer, int64_t oldCount, int64_t newCount, ::Unity::Collections::AllocatorManager::AllocatorHandle allocator, int64_t size, int align);
    // static T* Resize(T* oldPointer, System.Int64 oldCount, System.Int64 newCount, Unity.Collections.AllocatorManager/AllocatorHandle allocator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T* Resize(T* oldPointer, int64_t oldCount, int64_t newCount, ::Unity::Collections::AllocatorManager::AllocatorHandle allocator) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::Memory::Unmanaged::Array::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections", "Memory/Unmanaged/Array", "Resize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldPointer), ::il2cpp_utils::ExtractType(oldCount), ::il2cpp_utils::ExtractType(newCount), ::il2cpp_utils::ExtractType(allocator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, oldPointer, oldCount, newCount, allocator);
    }
  }; // Unity.Collections.Memory/Unmanaged/Array
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::Memory::Unmanaged::Array::IsCustom
// Il2CppName: IsCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Unity::Collections::AllocatorManager::AllocatorHandle)>(&Unity::Collections::Memory::Unmanaged::Array::IsCustom)> {
  static const MethodInfo* get() {
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::Memory::Unmanaged::Array), "IsCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator});
  }
};
// Writing MetadataGetter for method: Unity::Collections::Memory::Unmanaged::Array::CustomResize
// Il2CppName: CustomResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(void*, int64_t, int64_t, ::Unity::Collections::AllocatorManager::AllocatorHandle, int64_t, int)>(&Unity::Collections::Memory::Unmanaged::Array::CustomResize)> {
  static const MethodInfo* get() {
    static auto* oldPointer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* oldCount = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* newCount = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* align = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::Memory::Unmanaged::Array), "CustomResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldPointer, oldCount, newCount, allocator, size, align});
  }
};
// Writing MetadataGetter for method: Unity::Collections::Memory::Unmanaged::Array::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(void*, int64_t, int64_t, ::Unity::Collections::AllocatorManager::AllocatorHandle, int64_t, int)>(&Unity::Collections::Memory::Unmanaged::Array::Resize)> {
  static const MethodInfo* get() {
    static auto* oldPointer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* oldCount = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* newCount = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "AllocatorManager/AllocatorHandle")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* align = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::Memory::Unmanaged::Array), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldPointer, oldCount, newCount, allocator, size, align});
  }
};
// Writing MetadataGetter for method: Unity::Collections::Memory::Unmanaged::Array::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
