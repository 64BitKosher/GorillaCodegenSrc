// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Unity.IO.Archive
namespace Unity::IO::Archive {
  // Forward declaring type: ArchiveFileInfo
  struct ArchiveFileInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Unity::IO::Archive::ArchiveFileInfo, "Unity.IO.Archive", "ArchiveFileInfo");
// Type namespace: Unity.IO.Archive
namespace Unity::IO::Archive {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.IO.Archive.ArchiveFileInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: FFFFFFFF
  struct ArchiveFileInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String Filename
    // Size: 0x8
    // Offset: 0x0
    ::StringW Filename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt64 FileSize
    // Size: 0x8
    // Offset: 0x8
    uint64_t FileSize;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: ArchiveFileInfo
    constexpr ArchiveFileInfo(::StringW Filename_ = {}, uint64_t FileSize_ = {}) noexcept : Filename{Filename_}, FileSize{FileSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String Filename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Filename();
    // Get instance field reference: public System.UInt64 FileSize
    [[deprecated("Use field access instead!")]] uint64_t& dyn_FileSize();
  }; // Unity.IO.Archive.ArchiveFileInfo
  #pragma pack(pop)
  static check_size<sizeof(ArchiveFileInfo), 8 + sizeof(uint64_t)> __Unity_IO_Archive_ArchiveFileInfoSizeCheck;
  static_assert(sizeof(ArchiveFileInfo) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
