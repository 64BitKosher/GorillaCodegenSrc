// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BuildSafe
namespace BuildSafe {
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Attribute
  class Attribute;
}
// Completed forward declares
// Type namespace: BuildSafe
namespace BuildSafe {
  // Forward declaring type: Reflection
  class Reflection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BuildSafe::Reflection);
DEFINE_IL2CPP_ARG_TYPE(::BuildSafe::Reflection*, "BuildSafe", "Reflection");
// Type namespace: BuildSafe
namespace BuildSafe {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BuildSafe.Reflection
  // [TokenAttribute] Offset: FFFFFFFF
  class Reflection : public ::Il2CppObject {
    public:
    // Nested type: ::BuildSafe::Reflection::$$c
    class $$c;
    // Nested type: ::BuildSafe::Reflection::$$c__9_1<T>
    template<typename T>
    class $$c__9_1;
    // Get static field: static private System.Reflection.Assembly[] gAssemblyCache
    static ::ArrayW<::System::Reflection::Assembly*> _get_gAssemblyCache();
    // Set static field: static private System.Reflection.Assembly[] gAssemblyCache
    static void _set_gAssemblyCache(::ArrayW<::System::Reflection::Assembly*> value);
    // Get static field: static private System.Type[] gTypeCache
    static ::ArrayW<::System::Type*> _get_gTypeCache();
    // Set static field: static private System.Type[] gTypeCache
    static void _set_gTypeCache(::ArrayW<::System::Type*> value);
    // static public System.Reflection.Assembly[] get_AllAssemblies()
    // Offset: 0x28165D0
    static ::ArrayW<::System::Reflection::Assembly*> get_AllAssemblies();
    // static public System.Type[] get_AllTypes()
    // Offset: 0x28167DC
    static ::ArrayW<::System::Type*> get_AllTypes();
    // static private System.Void .cctor()
    // Offset: 0x2816AA0
    static void _cctor();
    // static private System.Reflection.Assembly[] PreFetchAllAssemblies()
    // Offset: 0x281661C
    static ::ArrayW<::System::Reflection::Assembly*> PreFetchAllAssemblies();
    // static private System.Type[] PreFetchAllTypes()
    // Offset: 0x2816828
    static ::ArrayW<::System::Type*> PreFetchAllTypes();
    // static public System.Reflection.MethodInfo[] GetMethodsWithAttribute()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<::System::Reflection::MethodInfo*> GetMethodsWithAttribute() {
      static_assert(std::is_convertible_v<T, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BuildSafe::Reflection::GetMethodsWithAttribute");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("BuildSafe", "Reflection", "GetMethodsWithAttribute", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::MethodInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
  }; // BuildSafe.Reflection
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BuildSafe::Reflection::get_AllAssemblies
// Il2CppName: get_AllAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Assembly*> (*)()>(&BuildSafe::Reflection::get_AllAssemblies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BuildSafe::Reflection*), "get_AllAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BuildSafe::Reflection::get_AllTypes
// Il2CppName: get_AllTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (*)()>(&BuildSafe::Reflection::get_AllTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BuildSafe::Reflection*), "get_AllTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BuildSafe::Reflection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BuildSafe::Reflection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BuildSafe::Reflection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BuildSafe::Reflection::PreFetchAllAssemblies
// Il2CppName: PreFetchAllAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Assembly*> (*)()>(&BuildSafe::Reflection::PreFetchAllAssemblies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BuildSafe::Reflection*), "PreFetchAllAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BuildSafe::Reflection::PreFetchAllTypes
// Il2CppName: PreFetchAllTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (*)()>(&BuildSafe::Reflection::PreFetchAllTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BuildSafe::Reflection*), "PreFetchAllTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BuildSafe::Reflection::GetMethodsWithAttribute
// Il2CppName: GetMethodsWithAttribute
// Cannot write MetadataGetter for generic methods!
