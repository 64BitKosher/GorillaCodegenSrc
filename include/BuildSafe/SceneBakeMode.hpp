// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: BuildSafe
namespace BuildSafe {
  // Forward declaring type: SceneBakeMode
  struct SceneBakeMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BuildSafe::SceneBakeMode, "BuildSafe", "SceneBakeMode");
// Type namespace: BuildSafe
namespace BuildSafe {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: BuildSafe.SceneBakeMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct SceneBakeMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SceneBakeMode
    constexpr SceneBakeMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public BuildSafe.SceneBakeMode Always
    static constexpr const int Always = 0;
    // Get static field: static public BuildSafe.SceneBakeMode Always
    static ::BuildSafe::SceneBakeMode _get_Always();
    // Set static field: static public BuildSafe.SceneBakeMode Always
    static void _set_Always(::BuildSafe::SceneBakeMode value);
    // static field const value: static public BuildSafe.SceneBakeMode OnBuildPlayer
    static constexpr const int OnBuildPlayer = 1;
    // Get static field: static public BuildSafe.SceneBakeMode OnBuildPlayer
    static ::BuildSafe::SceneBakeMode _get_OnBuildPlayer();
    // Set static field: static public BuildSafe.SceneBakeMode OnBuildPlayer
    static void _set_OnBuildPlayer(::BuildSafe::SceneBakeMode value);
    // static field const value: static public BuildSafe.SceneBakeMode OnEditorPlayMode
    static constexpr const int OnEditorPlayMode = 2;
    // Get static field: static public BuildSafe.SceneBakeMode OnEditorPlayMode
    static ::BuildSafe::SceneBakeMode _get_OnEditorPlayMode();
    // Set static field: static public BuildSafe.SceneBakeMode OnEditorPlayMode
    static void _set_OnEditorPlayMode(::BuildSafe::SceneBakeMode value);
    // static field const value: static public BuildSafe.SceneBakeMode Disabled
    static constexpr const int Disabled = 3;
    // Get static field: static public BuildSafe.SceneBakeMode Disabled
    static ::BuildSafe::SceneBakeMode _get_Disabled();
    // Set static field: static public BuildSafe.SceneBakeMode Disabled
    static void _set_Disabled(::BuildSafe::SceneBakeMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // BuildSafe.SceneBakeMode
  #pragma pack(pop)
  static check_size<sizeof(SceneBakeMode), 0 + sizeof(int)> __BuildSafe_SceneBakeModeSizeCheck;
  static_assert(sizeof(SceneBakeMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
