// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Forward declaring type: YamlObjectUnionAttribute
  class YamlObjectUnionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Annotations::YamlObjectUnionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Annotations::YamlObjectUnionAttribute*, "VYaml.Annotations", "YamlObjectUnionAttribute");
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Annotations.YamlObjectUnionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class YamlObjectUnionAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.String <Tag>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Tag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Type <SubType>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* SubType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private readonly System.String <Tag>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Tag$k__BackingField();
    // Get instance field reference: private readonly System.Type <SubType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$SubType$k__BackingField();
    // public System.String get_Tag()
    // Offset: 0x574A118
    ::StringW get_Tag();
    // public System.Type get_SubType()
    // Offset: 0x574A120
    ::System::Type* get_SubType();
    // public System.Void .ctor(System.String tagString, System.Type subType)
    // Offset: 0x574A128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlObjectUnionAttribute* New_ctor(::StringW tagString, ::System::Type* subType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Annotations::YamlObjectUnionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlObjectUnionAttribute*, creationType>(tagString, subType)));
    }
  }; // VYaml.Annotations.YamlObjectUnionAttribute
  #pragma pack(pop)
  static check_size<sizeof(YamlObjectUnionAttribute), 24 + sizeof(::System::Type*)> __VYaml_Annotations_YamlObjectUnionAttributeSizeCheck;
  static_assert(sizeof(YamlObjectUnionAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Annotations::YamlObjectUnionAttribute::get_Tag
// Il2CppName: get_Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Annotations::YamlObjectUnionAttribute::*)()>(&VYaml::Annotations::YamlObjectUnionAttribute::get_Tag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Annotations::YamlObjectUnionAttribute*), "get_Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Annotations::YamlObjectUnionAttribute::get_SubType
// Il2CppName: get_SubType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (VYaml::Annotations::YamlObjectUnionAttribute::*)()>(&VYaml::Annotations::YamlObjectUnionAttribute::get_SubType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Annotations::YamlObjectUnionAttribute*), "get_SubType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Annotations::YamlObjectUnionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
