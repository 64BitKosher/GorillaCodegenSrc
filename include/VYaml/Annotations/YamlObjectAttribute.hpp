// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: VYaml.Annotations.NamingConvention
#include "VYaml/Annotations/NamingConvention.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Forward declaring type: YamlObjectAttribute
  class YamlObjectAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Annotations::YamlObjectAttribute);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Annotations::YamlObjectAttribute*, "VYaml.Annotations", "YamlObjectAttribute");
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Annotations.YamlObjectAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class YamlObjectAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly VYaml.Annotations.NamingConvention <NamingConvention>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::VYaml::Annotations::NamingConvention NamingConvention;
    // Field size check
    static_assert(sizeof(::VYaml::Annotations::NamingConvention) == 0x4);
    public:
    // Creating conversion operator: operator ::VYaml::Annotations::NamingConvention
    constexpr operator ::VYaml::Annotations::NamingConvention() const noexcept {
      return NamingConvention;
    }
    // Get instance field reference: private readonly VYaml.Annotations.NamingConvention <NamingConvention>k__BackingField
    [[deprecated("Use field access instead!")]] ::VYaml::Annotations::NamingConvention& dyn_$NamingConvention$k__BackingField();
    // public VYaml.Annotations.NamingConvention get_NamingConvention()
    // Offset: 0x574A090
    ::VYaml::Annotations::NamingConvention get_NamingConvention();
    // public System.Void .ctor(VYaml.Annotations.NamingConvention namingConvention)
    // Offset: 0x574A098
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlObjectAttribute* New_ctor(::VYaml::Annotations::NamingConvention namingConvention) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Annotations::YamlObjectAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlObjectAttribute*, creationType>(namingConvention)));
    }
  }; // VYaml.Annotations.YamlObjectAttribute
  #pragma pack(pop)
  static check_size<sizeof(YamlObjectAttribute), 16 + sizeof(::VYaml::Annotations::NamingConvention)> __VYaml_Annotations_YamlObjectAttributeSizeCheck;
  static_assert(sizeof(YamlObjectAttribute) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Annotations::YamlObjectAttribute::get_NamingConvention
// Il2CppName: get_NamingConvention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Annotations::NamingConvention (VYaml::Annotations::YamlObjectAttribute::*)()>(&VYaml::Annotations::YamlObjectAttribute::get_NamingConvention)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Annotations::YamlObjectAttribute*), "get_NamingConvention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Annotations::YamlObjectAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
