// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Forward declaring type: NamingConvention
  struct NamingConvention;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Annotations::NamingConvention, "VYaml.Annotations", "NamingConvention");
// Type namespace: VYaml.Annotations
namespace VYaml::Annotations {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Annotations.NamingConvention
  // [TokenAttribute] Offset: FFFFFFFF
  struct NamingConvention/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NamingConvention
    constexpr NamingConvention(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public VYaml.Annotations.NamingConvention LowerCamelCase
    static constexpr const int LowerCamelCase = 0;
    // Get static field: static public VYaml.Annotations.NamingConvention LowerCamelCase
    static ::VYaml::Annotations::NamingConvention _get_LowerCamelCase();
    // Set static field: static public VYaml.Annotations.NamingConvention LowerCamelCase
    static void _set_LowerCamelCase(::VYaml::Annotations::NamingConvention value);
    // static field const value: static public VYaml.Annotations.NamingConvention UpperCamelCase
    static constexpr const int UpperCamelCase = 1;
    // Get static field: static public VYaml.Annotations.NamingConvention UpperCamelCase
    static ::VYaml::Annotations::NamingConvention _get_UpperCamelCase();
    // Set static field: static public VYaml.Annotations.NamingConvention UpperCamelCase
    static void _set_UpperCamelCase(::VYaml::Annotations::NamingConvention value);
    // static field const value: static public VYaml.Annotations.NamingConvention SnakeCase
    static constexpr const int SnakeCase = 2;
    // Get static field: static public VYaml.Annotations.NamingConvention SnakeCase
    static ::VYaml::Annotations::NamingConvention _get_SnakeCase();
    // Set static field: static public VYaml.Annotations.NamingConvention SnakeCase
    static void _set_SnakeCase(::VYaml::Annotations::NamingConvention value);
    // static field const value: static public VYaml.Annotations.NamingConvention KebabCase
    static constexpr const int KebabCase = 3;
    // Get static field: static public VYaml.Annotations.NamingConvention KebabCase
    static ::VYaml::Annotations::NamingConvention _get_KebabCase();
    // Set static field: static public VYaml.Annotations.NamingConvention KebabCase
    static void _set_KebabCase(::VYaml::Annotations::NamingConvention value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // VYaml.Annotations.NamingConvention
  #pragma pack(pop)
  static check_size<sizeof(NamingConvention), 0 + sizeof(int)> __VYaml_Annotations_NamingConventionSizeCheck;
  static_assert(sizeof(NamingConvention) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
