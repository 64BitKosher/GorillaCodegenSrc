// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Forward declaring namespace: VYaml::Parser
namespace VYaml::Parser {
  // Forward declaring type: Scalar
  class Scalar;
}
// Completed forward declares
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: ScalarPool
  class ScalarPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Parser::ScalarPool);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::ScalarPool*, "VYaml.Parser", "ScalarPool");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Parser.ScalarPool
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class ScalarPool : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Concurrent.ConcurrentQueue`1<VYaml.Parser.Scalar> queue
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>* queue;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>*
    constexpr operator ::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>*() const noexcept {
      return queue;
    }
    // Get static field: static public readonly VYaml.Parser.ScalarPool Shared
    static ::VYaml::Parser::ScalarPool* _get_Shared();
    // Set static field: static public readonly VYaml.Parser.ScalarPool Shared
    static void _set_Shared(::VYaml::Parser::ScalarPool* value);
    // Get instance field reference: private readonly System.Collections.Concurrent.ConcurrentQueue`1<VYaml.Parser.Scalar> queue
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>*& dyn_queue();
    // public VYaml.Parser.Scalar Rent()
    // Offset: 0x5730F0C
    ::VYaml::Parser::Scalar* Rent();
    // public System.Void Return(VYaml.Parser.Scalar scalar)
    // Offset: 0x5731010
    void Return(::VYaml::Parser::Scalar* scalar);
    // public System.Void .ctor()
    // Offset: 0x5731070
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScalarPool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Parser::ScalarPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScalarPool*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x57310F8
    static void _cctor();
  }; // VYaml.Parser.ScalarPool
  #pragma pack(pop)
  static check_size<sizeof(ScalarPool), 16 + sizeof(::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Parser::Scalar*>*)> __VYaml_Parser_ScalarPoolSizeCheck;
  static_assert(sizeof(ScalarPool) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::ScalarPool::Rent
// Il2CppName: Rent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::Scalar* (VYaml::Parser::ScalarPool::*)()>(&VYaml::Parser::ScalarPool::Rent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::ScalarPool*), "Rent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::ScalarPool::Return
// Il2CppName: Return
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::ScalarPool::*)(::VYaml::Parser::Scalar*)>(&VYaml::Parser::ScalarPool::Return)> {
  static const MethodInfo* get() {
    static auto* scalar = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Scalar")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::ScalarPool*), "Return", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scalar});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::ScalarPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::ScalarPool::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Parser::ScalarPool::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::ScalarPool*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
