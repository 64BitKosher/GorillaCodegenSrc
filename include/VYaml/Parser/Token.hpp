// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: VYaml.Parser.TokenType
#include "VYaml/Parser/TokenType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Parser
namespace VYaml::Parser {
  // Forward declaring type: ITokenContent
  class ITokenContent;
}
// Completed forward declares
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: Token
  struct Token;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::Token, "VYaml.Parser", "Token");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VYaml.Parser.Token
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  struct Token/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly VYaml.Parser.TokenType Type
    // Size: 0x1
    // Offset: 0x0
    ::VYaml::Parser::TokenType Type;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::TokenType) == 0x1);
    // Padding between fields: Type and: Content
    char __padding0[0x7] = {};
    // public readonly VYaml.Parser.ITokenContent Content
    // Size: 0x8
    // Offset: 0x8
    ::VYaml::Parser::ITokenContent* Content;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::ITokenContent*) == 0x8);
    public:
    // Creating value type constructor for type: Token
    constexpr Token(::VYaml::Parser::TokenType Type_ = {}, ::VYaml::Parser::ITokenContent* Content_ = {}) noexcept : Type{Type_}, Content{Content_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly VYaml.Parser.TokenType Type
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::TokenType& dyn_Type();
    // Get instance field reference: public readonly VYaml.Parser.ITokenContent Content
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::ITokenContent*& dyn_Content();
    // public System.Void .ctor(VYaml.Parser.TokenType type, VYaml.Parser.ITokenContent content)
    // Offset: 0x573429C
    // ABORTED: conflicts with another method.  Token(::VYaml::Parser::TokenType type, ::VYaml::Parser::ITokenContent* content);
    // public override System.String ToString()
    // Offset: 0x57342AC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // VYaml.Parser.Token
  #pragma pack(pop)
  static check_size<sizeof(Token), 8 + sizeof(::VYaml::Parser::ITokenContent*)> __VYaml_Parser_TokenSizeCheck;
  static_assert(sizeof(Token) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::Token::Token
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::Token::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Token::*)()>(&VYaml::Parser::Token::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Token), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
