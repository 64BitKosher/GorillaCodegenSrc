// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VYaml.Parser.ITokenContent
#include "VYaml/Parser/ITokenContent.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: LineBreakState
  struct LineBreakState;
}
// Completed forward declares
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: Scalar
  class Scalar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Parser::Scalar);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::Scalar*, "VYaml.Parser", "Scalar");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Parser.Scalar
  // [TokenAttribute] Offset: FFFFFFFF
  class Scalar : public ::Il2CppObject/*, public ::VYaml::Parser::ITokenContent*/ {
    public:
    public:
    // private System.Int32 <Length>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Length and: buffer
    char __padding0[0x4] = {};
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VYaml::Parser::ITokenContent
    operator ::VYaml::Parser::ITokenContent() noexcept {
      return *reinterpret_cast<::VYaml::Parser::ITokenContent*>(this);
    }
    // static field const value: static private System.Int32 MinimumGrow
    static constexpr const int MinimumGrow = 4;
    // Get static field: static private System.Int32 MinimumGrow
    static int _get_MinimumGrow();
    // Set static field: static private System.Int32 MinimumGrow
    static void _set_MinimumGrow(int value);
    // static field const value: static private System.Int32 GrowFactor
    static constexpr const int GrowFactor = 200;
    // Get static field: static private System.Int32 GrowFactor
    static int _get_GrowFactor();
    // Set static field: static private System.Int32 GrowFactor
    static void _set_GrowFactor(int value);
    // Get static field: static public readonly VYaml.Parser.Scalar Null
    static ::VYaml::Parser::Scalar* _get_Null();
    // Set static field: static public readonly VYaml.Parser.Scalar Null
    static void _set_Null(::VYaml::Parser::Scalar* value);
    // Get instance field reference: private System.Int32 <Length>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField();
    // Get instance field reference: private System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // public System.Int32 get_Length()
    // Offset: 0x573115C
    int get_Length();
    // private System.Void set_Length(System.Int32 value)
    // Offset: 0x5731164
    void set_Length(int value);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x5730FA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Scalar* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Parser::Scalar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Scalar*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.ReadOnlySpan`1<System.Byte> content)
    // Offset: 0x573116C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Scalar* New_ctor(::System::ReadOnlySpan_1<uint8_t> content) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Parser::Scalar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Scalar*, creationType>(content)));
    }
    // public System.Span`1<System.Byte> AsSpan()
    // Offset: 0x5731200
    ::System::Span_1<uint8_t> AsSpan();
    // public System.Span`1<System.Byte> AsSpan(System.Int32 start, System.Int32 length)
    // Offset: 0x5731294
    ::System::Span_1<uint8_t> AsSpan(int start, int length);
    // public System.ReadOnlySpan`1<System.Byte> AsUtf8()
    // Offset: 0x5731344
    ::System::ReadOnlySpan_1<uint8_t> AsUtf8();
    // public System.Void Write(System.Byte code)
    // Offset: 0x57313EC
    void Write(uint8_t code);
    // public System.Void Write(VYaml.Internal.LineBreakState lineBreak)
    // Offset: 0x5731490
    void Write(::VYaml::Internal::LineBreakState lineBreak);
    // public System.Void Write(System.ReadOnlySpan`1<System.Byte> codes)
    // Offset: 0x57316D4
    void Write(::System::ReadOnlySpan_1<uint8_t> codes);
    // public System.Void WriteUnicodeCodepoint(System.Int32 codepoint)
    // Offset: 0x573181C
    void WriteUnicodeCodepoint(int codepoint);
    // public System.Void Clear()
    // Offset: 0x5731A18
    void Clear();
    // public System.Boolean IsNull()
    // Offset: 0x5731B38
    bool IsNull();
    // public System.Boolean TryGetBool(out System.Boolean value)
    // Offset: 0x5731D10
    bool TryGetBool(ByRef<bool> value);
    // public System.Boolean TryGetInt32(out System.Int32 value)
    // Offset: 0x5731FCC
    bool TryGetInt32(ByRef<int> value);
    // public System.Boolean TryGetInt64(out System.Int64 value)
    // Offset: 0x57324E4
    bool TryGetInt64(ByRef<int64_t> value);
    // public System.Boolean TryGetUInt32(out System.UInt32 value)
    // Offset: 0x5732938
    bool TryGetUInt32(ByRef<uint> value);
    // public System.Boolean TryGetUInt64(out System.UInt64 value)
    // Offset: 0x5732B90
    bool TryGetUInt64(ByRef<uint64_t> value);
    // public System.Boolean TryGetFloat(out System.Single value)
    // Offset: 0x5732DD8
    bool TryGetFloat(ByRef<float> value);
    // public System.Boolean TryGetDouble(out System.Double value)
    // Offset: 0x57332A0
    bool TryGetDouble(ByRef<double> value);
    // public System.Boolean SequenceEqual(VYaml.Parser.Scalar other)
    // Offset: 0x5733768
    bool SequenceEqual(::VYaml::Parser::Scalar* other);
    // public System.Boolean SequenceEqual(System.ReadOnlySpan`1<System.Byte> span)
    // Offset: 0x57338D8
    bool SequenceEqual(::System::ReadOnlySpan_1<uint8_t> span);
    // public System.Void Grow(System.Int32 sizeHint)
    // Offset: 0x57339AC
    void Grow(int sizeHint);
    // static private System.Boolean TryDetectHex(System.ReadOnlySpan`1<System.Byte> span, out System.ReadOnlySpan`1<System.Byte> slice)
    // Offset: 0x5733A08
    static bool TryDetectHex(::System::ReadOnlySpan_1<uint8_t> span, ByRef<::System::ReadOnlySpan_1<uint8_t>> slice);
    // static private System.Boolean TryDetectHexNegative(System.ReadOnlySpan`1<System.Byte> span, out System.ReadOnlySpan`1<System.Byte> slice)
    // Offset: 0x5733B78
    static bool TryDetectHexNegative(::System::ReadOnlySpan_1<uint8_t> span, ByRef<::System::ReadOnlySpan_1<uint8_t>> slice);
    // static private System.Boolean TryParseOctal(System.ReadOnlySpan`1<System.Byte> span, out System.UInt64 value)
    // Offset: 0x57322B8
    static bool TryParseOctal(::System::ReadOnlySpan_1<uint8_t> span, ByRef<uint64_t> value);
    // private System.Void Grow()
    // Offset: 0x5733CE8
    void Grow();
    // private System.Void SetCapacity(System.Int32 newCapacity)
    // Offset: 0x5733D34
    void SetCapacity(int newCapacity);
    // static private System.Void .cctor()
    // Offset: 0x5733EEC
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x5731A20
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // VYaml.Parser.Scalar
  #pragma pack(pop)
  static check_size<sizeof(Scalar), 24 + sizeof(::ArrayW<uint8_t>)> __VYaml_Parser_ScalarSizeCheck;
  static_assert(sizeof(Scalar) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::Scalar::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(int)>(&VYaml::Parser::Scalar::set_Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::Scalar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::Scalar::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Span_1<uint8_t> (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::AsSpan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Span_1<uint8_t> (VYaml::Parser::Scalar::*)(int, int)>(&VYaml::Parser::Scalar::AsSpan)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, length});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::AsUtf8
// Il2CppName: AsUtf8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<uint8_t> (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::AsUtf8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "AsUtf8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(uint8_t)>(&VYaml::Parser::Scalar::Write)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(::VYaml::Internal::LineBreakState)>(&VYaml::Parser::Scalar::Write)> {
  static const MethodInfo* get() {
    static auto* lineBreak = &::il2cpp_utils::GetClassFromName("VYaml.Internal", "LineBreakState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineBreak});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(::System::ReadOnlySpan_1<uint8_t>)>(&VYaml::Parser::Scalar::Write)> {
  static const MethodInfo* get() {
    static auto* codes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codes});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::WriteUnicodeCodepoint
// Il2CppName: WriteUnicodeCodepoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(int)>(&VYaml::Parser::Scalar::WriteUnicodeCodepoint)> {
  static const MethodInfo* get() {
    static auto* codepoint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "WriteUnicodeCodepoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codepoint});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetBool
// Il2CppName: TryGetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<bool>)>(&VYaml::Parser::Scalar::TryGetBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetInt32
// Il2CppName: TryGetInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<int>)>(&VYaml::Parser::Scalar::TryGetInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetInt64
// Il2CppName: TryGetInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<int64_t>)>(&VYaml::Parser::Scalar::TryGetInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetUInt32
// Il2CppName: TryGetUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<uint>)>(&VYaml::Parser::Scalar::TryGetUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetUInt64
// Il2CppName: TryGetUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<uint64_t>)>(&VYaml::Parser::Scalar::TryGetUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetFloat
// Il2CppName: TryGetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<float>)>(&VYaml::Parser::Scalar::TryGetFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryGetDouble
// Il2CppName: TryGetDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(ByRef<double>)>(&VYaml::Parser::Scalar::TryGetDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryGetDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::SequenceEqual
// Il2CppName: SequenceEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(::VYaml::Parser::Scalar*)>(&VYaml::Parser::Scalar::SequenceEqual)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Scalar")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "SequenceEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::SequenceEqual
// Il2CppName: SequenceEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Scalar::*)(::System::ReadOnlySpan_1<uint8_t>)>(&VYaml::Parser::Scalar::SequenceEqual)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "SequenceEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Grow
// Il2CppName: Grow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(int)>(&VYaml::Parser::Scalar::Grow)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Grow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryDetectHex
// Il2CppName: TryDetectHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::ReadOnlySpan_1<uint8_t>>)>(&VYaml::Parser::Scalar::TryDetectHex)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* slice = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryDetectHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, slice});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryDetectHexNegative
// Il2CppName: TryDetectHexNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::ReadOnlySpan_1<uint8_t>>)>(&VYaml::Parser::Scalar::TryDetectHexNegative)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* slice = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryDetectHexNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, slice});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::TryParseOctal
// Il2CppName: TryParseOctal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint64_t>)>(&VYaml::Parser::Scalar::TryParseOctal)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "TryParseOctal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::Grow
// Il2CppName: Grow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::Grow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "Grow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::SetCapacity
// Il2CppName: SetCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::Scalar::*)(int)>(&VYaml::Parser::Scalar::SetCapacity)> {
  static const MethodInfo* get() {
    static auto* newCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "SetCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCapacity});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Parser::Scalar::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Scalar::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Scalar::*)()>(&VYaml::Parser::Scalar::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Scalar*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
