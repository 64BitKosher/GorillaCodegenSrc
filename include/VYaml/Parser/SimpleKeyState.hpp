// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: VYaml.Parser.Marker
#include "VYaml/Parser/Marker.hpp"
// Completed includes
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: SimpleKeyState
  struct SimpleKeyState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::SimpleKeyState, "VYaml.Parser", "SimpleKeyState");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VYaml.Parser.SimpleKeyState
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimpleKeyState/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean Possible
    // Size: 0x1
    // Offset: 0x0
    bool Possible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Required
    // Size: 0x1
    // Offset: 0x1
    bool Required;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Required and: TokenNumber
    char __padding1[0x2] = {};
    // public System.Int32 TokenNumber
    // Size: 0x4
    // Offset: 0x4
    int TokenNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public VYaml.Parser.Marker Start
    // Size: 0xC
    // Offset: 0x8
    ::VYaml::Parser::Marker Start;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::Marker) == 0xC);
    public:
    // Creating value type constructor for type: SimpleKeyState
    constexpr SimpleKeyState(bool Possible_ = {}, bool Required_ = {}, int TokenNumber_ = {}, ::VYaml::Parser::Marker Start_ = {}) noexcept : Possible{Possible_}, Required{Required_}, TokenNumber{TokenNumber_}, Start{Start_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean Possible
    [[deprecated("Use field access instead!")]] bool& dyn_Possible();
    // Get instance field reference: public System.Boolean Required
    [[deprecated("Use field access instead!")]] bool& dyn_Required();
    // Get instance field reference: public System.Int32 TokenNumber
    [[deprecated("Use field access instead!")]] int& dyn_TokenNumber();
    // Get instance field reference: public VYaml.Parser.Marker Start
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::Marker& dyn_Start();
  }; // VYaml.Parser.SimpleKeyState
  #pragma pack(pop)
  static check_size<sizeof(SimpleKeyState), 8 + sizeof(::VYaml::Parser::Marker)> __VYaml_Parser_SimpleKeyStateSizeCheck;
  static_assert(sizeof(SimpleKeyState) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
