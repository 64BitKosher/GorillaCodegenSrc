// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: TokenType
  struct TokenType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::TokenType, "VYaml.Parser", "TokenType");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Parser.TokenType
  // [TokenAttribute] Offset: FFFFFFFF
  struct TokenType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: TokenType
    constexpr TokenType(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public VYaml.Parser.TokenType None
    static constexpr const uint8_t None = 0u;
    // Get static field: static public VYaml.Parser.TokenType None
    static ::VYaml::Parser::TokenType _get_None();
    // Set static field: static public VYaml.Parser.TokenType None
    static void _set_None(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType StreamStart
    static constexpr const uint8_t StreamStart = 1u;
    // Get static field: static public VYaml.Parser.TokenType StreamStart
    static ::VYaml::Parser::TokenType _get_StreamStart();
    // Set static field: static public VYaml.Parser.TokenType StreamStart
    static void _set_StreamStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType StreamEnd
    static constexpr const uint8_t StreamEnd = 2u;
    // Get static field: static public VYaml.Parser.TokenType StreamEnd
    static ::VYaml::Parser::TokenType _get_StreamEnd();
    // Set static field: static public VYaml.Parser.TokenType StreamEnd
    static void _set_StreamEnd(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType VersionDirective
    static constexpr const uint8_t VersionDirective = 3u;
    // Get static field: static public VYaml.Parser.TokenType VersionDirective
    static ::VYaml::Parser::TokenType _get_VersionDirective();
    // Set static field: static public VYaml.Parser.TokenType VersionDirective
    static void _set_VersionDirective(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType TagDirective
    static constexpr const uint8_t TagDirective = 4u;
    // Get static field: static public VYaml.Parser.TokenType TagDirective
    static ::VYaml::Parser::TokenType _get_TagDirective();
    // Set static field: static public VYaml.Parser.TokenType TagDirective
    static void _set_TagDirective(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType DocumentStart
    static constexpr const uint8_t DocumentStart = 5u;
    // Get static field: static public VYaml.Parser.TokenType DocumentStart
    static ::VYaml::Parser::TokenType _get_DocumentStart();
    // Set static field: static public VYaml.Parser.TokenType DocumentStart
    static void _set_DocumentStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType DocumentEnd
    static constexpr const uint8_t DocumentEnd = 6u;
    // Get static field: static public VYaml.Parser.TokenType DocumentEnd
    static ::VYaml::Parser::TokenType _get_DocumentEnd();
    // Set static field: static public VYaml.Parser.TokenType DocumentEnd
    static void _set_DocumentEnd(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType BlockSequenceStart
    static constexpr const uint8_t BlockSequenceStart = 7u;
    // Get static field: static public VYaml.Parser.TokenType BlockSequenceStart
    static ::VYaml::Parser::TokenType _get_BlockSequenceStart();
    // Set static field: static public VYaml.Parser.TokenType BlockSequenceStart
    static void _set_BlockSequenceStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType BlockMappingStart
    static constexpr const uint8_t BlockMappingStart = 8u;
    // Get static field: static public VYaml.Parser.TokenType BlockMappingStart
    static ::VYaml::Parser::TokenType _get_BlockMappingStart();
    // Set static field: static public VYaml.Parser.TokenType BlockMappingStart
    static void _set_BlockMappingStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType BlockEnd
    static constexpr const uint8_t BlockEnd = 9u;
    // Get static field: static public VYaml.Parser.TokenType BlockEnd
    static ::VYaml::Parser::TokenType _get_BlockEnd();
    // Set static field: static public VYaml.Parser.TokenType BlockEnd
    static void _set_BlockEnd(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FlowSequenceStart
    static constexpr const uint8_t FlowSequenceStart = 10u;
    // Get static field: static public VYaml.Parser.TokenType FlowSequenceStart
    static ::VYaml::Parser::TokenType _get_FlowSequenceStart();
    // Set static field: static public VYaml.Parser.TokenType FlowSequenceStart
    static void _set_FlowSequenceStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FlowSequenceEnd
    static constexpr const uint8_t FlowSequenceEnd = 11u;
    // Get static field: static public VYaml.Parser.TokenType FlowSequenceEnd
    static ::VYaml::Parser::TokenType _get_FlowSequenceEnd();
    // Set static field: static public VYaml.Parser.TokenType FlowSequenceEnd
    static void _set_FlowSequenceEnd(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FlowMappingStart
    static constexpr const uint8_t FlowMappingStart = 12u;
    // Get static field: static public VYaml.Parser.TokenType FlowMappingStart
    static ::VYaml::Parser::TokenType _get_FlowMappingStart();
    // Set static field: static public VYaml.Parser.TokenType FlowMappingStart
    static void _set_FlowMappingStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FlowMappingEnd
    static constexpr const uint8_t FlowMappingEnd = 13u;
    // Get static field: static public VYaml.Parser.TokenType FlowMappingEnd
    static ::VYaml::Parser::TokenType _get_FlowMappingEnd();
    // Set static field: static public VYaml.Parser.TokenType FlowMappingEnd
    static void _set_FlowMappingEnd(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType BlockEntryStart
    static constexpr const uint8_t BlockEntryStart = 14u;
    // Get static field: static public VYaml.Parser.TokenType BlockEntryStart
    static ::VYaml::Parser::TokenType _get_BlockEntryStart();
    // Set static field: static public VYaml.Parser.TokenType BlockEntryStart
    static void _set_BlockEntryStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FlowEntryStart
    static constexpr const uint8_t FlowEntryStart = 15u;
    // Get static field: static public VYaml.Parser.TokenType FlowEntryStart
    static ::VYaml::Parser::TokenType _get_FlowEntryStart();
    // Set static field: static public VYaml.Parser.TokenType FlowEntryStart
    static void _set_FlowEntryStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType KeyStart
    static constexpr const uint8_t KeyStart = 16u;
    // Get static field: static public VYaml.Parser.TokenType KeyStart
    static ::VYaml::Parser::TokenType _get_KeyStart();
    // Set static field: static public VYaml.Parser.TokenType KeyStart
    static void _set_KeyStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType ValueStart
    static constexpr const uint8_t ValueStart = 17u;
    // Get static field: static public VYaml.Parser.TokenType ValueStart
    static ::VYaml::Parser::TokenType _get_ValueStart();
    // Set static field: static public VYaml.Parser.TokenType ValueStart
    static void _set_ValueStart(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType Alias
    static constexpr const uint8_t Alias = 18u;
    // Get static field: static public VYaml.Parser.TokenType Alias
    static ::VYaml::Parser::TokenType _get_Alias();
    // Set static field: static public VYaml.Parser.TokenType Alias
    static void _set_Alias(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType Anchor
    static constexpr const uint8_t Anchor = 19u;
    // Get static field: static public VYaml.Parser.TokenType Anchor
    static ::VYaml::Parser::TokenType _get_Anchor();
    // Set static field: static public VYaml.Parser.TokenType Anchor
    static void _set_Anchor(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType Tag
    static constexpr const uint8_t Tag = 20u;
    // Get static field: static public VYaml.Parser.TokenType Tag
    static ::VYaml::Parser::TokenType _get_Tag();
    // Set static field: static public VYaml.Parser.TokenType Tag
    static void _set_Tag(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType PlainScalar
    static constexpr const uint8_t PlainScalar = 21u;
    // Get static field: static public VYaml.Parser.TokenType PlainScalar
    static ::VYaml::Parser::TokenType _get_PlainScalar();
    // Set static field: static public VYaml.Parser.TokenType PlainScalar
    static void _set_PlainScalar(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType SingleQuotedScaler
    static constexpr const uint8_t SingleQuotedScaler = 22u;
    // Get static field: static public VYaml.Parser.TokenType SingleQuotedScaler
    static ::VYaml::Parser::TokenType _get_SingleQuotedScaler();
    // Set static field: static public VYaml.Parser.TokenType SingleQuotedScaler
    static void _set_SingleQuotedScaler(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType DoubleQuotedScaler
    static constexpr const uint8_t DoubleQuotedScaler = 23u;
    // Get static field: static public VYaml.Parser.TokenType DoubleQuotedScaler
    static ::VYaml::Parser::TokenType _get_DoubleQuotedScaler();
    // Set static field: static public VYaml.Parser.TokenType DoubleQuotedScaler
    static void _set_DoubleQuotedScaler(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType LiteralScalar
    static constexpr const uint8_t LiteralScalar = 24u;
    // Get static field: static public VYaml.Parser.TokenType LiteralScalar
    static ::VYaml::Parser::TokenType _get_LiteralScalar();
    // Set static field: static public VYaml.Parser.TokenType LiteralScalar
    static void _set_LiteralScalar(::VYaml::Parser::TokenType value);
    // static field const value: static public VYaml.Parser.TokenType FoldedScalar
    static constexpr const uint8_t FoldedScalar = 25u;
    // Get static field: static public VYaml.Parser.TokenType FoldedScalar
    static ::VYaml::Parser::TokenType _get_FoldedScalar();
    // Set static field: static public VYaml.Parser.TokenType FoldedScalar
    static void _set_FoldedScalar(::VYaml::Parser::TokenType value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // VYaml.Parser.TokenType
  #pragma pack(pop)
  static check_size<sizeof(TokenType), 0 + sizeof(uint8_t)> __VYaml_Parser_TokenTypeSizeCheck;
  static_assert(sizeof(TokenType) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
