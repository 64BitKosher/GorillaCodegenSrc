// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: Anchor
  class Anchor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Parser::Anchor);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::Anchor*, "VYaml.Parser", "Anchor");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Parser.Anchor
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class Anchor : public ::Il2CppObject/*, public ::System::IEquatable_1<::VYaml::Parser::Anchor*>*/ {
    public:
    public:
    // private readonly System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Int32 <Id>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::VYaml::Parser::Anchor*>
    operator ::System::IEquatable_1<::VYaml::Parser::Anchor*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::VYaml::Parser::Anchor*>*>(this);
    }
    // Get instance field reference: private readonly System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Id>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Id$k__BackingField();
    // public System.String get_Name()
    // Offset: 0x5733F54
    ::StringW get_Name();
    // public System.Int32 get_Id()
    // Offset: 0x5733F5C
    int get_Id();
    // public System.Void .ctor(System.String name, System.Int32 id)
    // Offset: 0x5733F64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Anchor* New_ctor(::StringW name, int id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Parser::Anchor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Anchor*, creationType>(name, id)));
    }
    // public System.Boolean Equals(VYaml.Parser.Anchor other)
    // Offset: 0x5733FA0
    bool Equals(::VYaml::Parser::Anchor* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x5733FC0
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x573404C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x5734054
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // VYaml.Parser.Anchor
  #pragma pack(pop)
  static check_size<sizeof(Anchor), 24 + sizeof(int)> __VYaml_Parser_AnchorSizeCheck;
  static_assert(sizeof(Anchor) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::Anchor::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Anchor::*)()>(&VYaml::Parser::Anchor::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Anchor::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::Anchor::*)()>(&VYaml::Parser::Anchor::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Anchor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::Anchor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Anchor::*)(::VYaml::Parser::Anchor*)>(&VYaml::Parser::Anchor::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Anchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Anchor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Anchor::*)(::Il2CppObject*)>(&VYaml::Parser::Anchor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Anchor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::Anchor::*)()>(&VYaml::Parser::Anchor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Anchor::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Anchor::*)()>(&VYaml::Parser::Anchor::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Anchor*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
