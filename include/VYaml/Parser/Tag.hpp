// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VYaml.Parser.ITokenContent
#include "VYaml/Parser/ITokenContent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: Tag
  class Tag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Parser::Tag);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::Tag*, "VYaml.Parser", "Tag");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Parser.Tag
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class Tag : public ::Il2CppObject/*, public ::VYaml::Parser::ITokenContent*/ {
    public:
    public:
    // private readonly System.String <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Handle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <Suffix>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Suffix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VYaml::Parser::ITokenContent
    operator ::VYaml::Parser::ITokenContent() noexcept {
      return *reinterpret_cast<::VYaml::Parser::ITokenContent*>(this);
    }
    // Get instance field reference: private readonly System.String <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Handle$k__BackingField();
    // Get instance field reference: private readonly System.String <Suffix>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Suffix$k__BackingField();
    // public System.String get_Handle()
    // Offset: 0x57341B0
    ::StringW get_Handle();
    // public System.String get_Suffix()
    // Offset: 0x57341B8
    ::StringW get_Suffix();
    // public System.Void .ctor(System.String handle, System.String suffix)
    // Offset: 0x57341C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tag* New_ctor(::StringW handle, ::StringW suffix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Parser::Tag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tag*, creationType>(handle, suffix)));
    }
    // public System.Boolean Equals(System.String tagString)
    // Offset: 0x5734214
    bool Equals(::StringW tagString);
    // public override System.String ToString()
    // Offset: 0x5734204
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // VYaml.Parser.Tag
  #pragma pack(pop)
  static check_size<sizeof(Tag), 24 + sizeof(::StringW)> __VYaml_Parser_TagSizeCheck;
  static_assert(sizeof(Tag) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::Tag::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Tag::*)()>(&VYaml::Parser::Tag::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Tag*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Tag::get_Suffix
// Il2CppName: get_Suffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Tag::*)()>(&VYaml::Parser::Tag::get_Suffix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Tag*), "get_Suffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Tag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::Tag::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::Tag::*)(::StringW)>(&VYaml::Parser::Tag::Equals)> {
  static const MethodInfo* get() {
    static auto* tagString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Tag*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tagString});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::Tag::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::Tag::*)()>(&VYaml::Parser::Tag::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::Tag*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
