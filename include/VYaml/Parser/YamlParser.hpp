// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: VYaml.Parser.ParseEventType
#include "VYaml/Parser/ParseEventType.hpp"
// Including type: VYaml.Parser.Utf8YamlTokenizer
#include "VYaml/Parser/Utf8YamlTokenizer.hpp"
// Including type: VYaml.Parser.ParseState
#include "VYaml/Parser/ParseState.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Parser
namespace VYaml::Parser {
  // Forward declaring type: Scalar
  class Scalar;
  // Forward declaring type: Tag
  class Tag;
  // Forward declaring type: Anchor
  class Anchor;
  // Skipping declaration: Marker because it is already included!
  // Skipping declaration: TokenType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: ExpandBuffer`1<T>
  template<typename T>
  class ExpandBuffer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Memory`1<T>
  template<typename T>
  struct Memory_1;
  // Skipping declaration: ReadOnlySpan`1 because it is already included!
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Skipping declaration: ReadOnlySequence`1 because it is already included!
}
// Completed forward declares
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // Forward declaring type: YamlParser
  struct YamlParser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Parser::YamlParser, "VYaml.Parser", "YamlParser");
// Type namespace: VYaml.Parser
namespace VYaml::Parser {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VYaml.Parser.YamlParser
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  struct YamlParser/*, public ::System::ValueType*/ {
    public:
    public:
    // private VYaml.Parser.ParseEventType <CurrentEventType>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    ::VYaml::Parser::ParseEventType CurrentEventType;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::ParseEventType) == 0x1);
    // private System.Boolean <UnityStrippedMark>k__BackingField
    // Size: 0x1
    // Offset: 0x1
    bool UnityStrippedMark;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private VYaml.Parser.Utf8YamlTokenizer tokenizer
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::VYaml::Parser::Utf8YamlTokenizer tokenizer;
    // private VYaml.Parser.ParseState currentState
    // Size: 0x4
    // Offset: 0xC8
    ::VYaml::Parser::ParseState currentState;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::ParseState) == 0x4);
    // private VYaml.Parser.Scalar currentScalar
    // Size: 0x8
    // Offset: 0xD0
    ::VYaml::Parser::Scalar* currentScalar;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::Scalar*) == 0x8);
    // private VYaml.Parser.Tag currentTag
    // Size: 0x8
    // Offset: 0xD8
    ::VYaml::Parser::Tag* currentTag;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::Tag*) == 0x8);
    // private VYaml.Parser.Anchor currentAnchor
    // Size: 0x8
    // Offset: 0xE0
    ::VYaml::Parser::Anchor* currentAnchor;
    // Field size check
    static_assert(sizeof(::VYaml::Parser::Anchor*) == 0x8);
    // private System.Int32 lastAnchorId
    // Size: 0x4
    // Offset: 0xE8
    int lastAnchorId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32> anchors
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* anchors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    // private readonly VYaml.Internal.ExpandBuffer`1<VYaml.Parser.ParseState> stateStack
    // Size: 0x8
    // Offset: 0xF8
    ::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>* stateStack;
    // Field size check
    static_assert(sizeof(::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>*) == 0x8);
    public:
    // Creating value type constructor for type: YamlParser
    constexpr YamlParser(::VYaml::Parser::ParseEventType CurrentEventType_ = {}, bool UnityStrippedMark_ = {}, ::VYaml::Parser::Utf8YamlTokenizer tokenizer_ = {}, ::VYaml::Parser::ParseState currentState_ = {}, ::VYaml::Parser::Scalar* currentScalar_ = {}, ::VYaml::Parser::Tag* currentTag_ = {}, ::VYaml::Parser::Anchor* currentAnchor_ = {}, int lastAnchorId_ = {}, ::System::Collections::Generic::Dictionary_2<::StringW, int>* anchors_ = {}, ::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>* stateStack_ = {}) noexcept : CurrentEventType{CurrentEventType_}, UnityStrippedMark{UnityStrippedMark_}, tokenizer{tokenizer_}, currentState{currentState_}, currentScalar{currentScalar_}, currentTag{currentTag_}, currentAnchor{currentAnchor_}, lastAnchorId{lastAnchorId_}, anchors{anchors_}, stateStack{stateStack_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Int32> anchorsBufferStatic
    static ::System::Collections::Generic::Dictionary_2<::StringW, int>* _get_anchorsBufferStatic();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Int32> anchorsBufferStatic
    static void _set_anchorsBufferStatic(::System::Collections::Generic::Dictionary_2<::StringW, int>* value);
    // Get static field: static private VYaml.Internal.ExpandBuffer`1<VYaml.Parser.ParseState> stateStackBufferStatic
    static ::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>* _get_stateStackBufferStatic();
    // Set static field: static private VYaml.Internal.ExpandBuffer`1<VYaml.Parser.ParseState> stateStackBufferStatic
    static void _set_stateStackBufferStatic(::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>* value);
    // Get instance field reference: private VYaml.Parser.ParseEventType <CurrentEventType>k__BackingField
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::ParseEventType& dyn_$CurrentEventType$k__BackingField();
    // Get instance field reference: private System.Boolean <UnityStrippedMark>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UnityStrippedMark$k__BackingField();
    // Get instance field reference: private VYaml.Parser.Utf8YamlTokenizer tokenizer
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::Utf8YamlTokenizer& dyn_tokenizer();
    // Get instance field reference: private VYaml.Parser.ParseState currentState
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::ParseState& dyn_currentState();
    // Get instance field reference: private VYaml.Parser.Scalar currentScalar
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::Scalar*& dyn_currentScalar();
    // Get instance field reference: private VYaml.Parser.Tag currentTag
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::Tag*& dyn_currentTag();
    // Get instance field reference: private VYaml.Parser.Anchor currentAnchor
    [[deprecated("Use field access instead!")]] ::VYaml::Parser::Anchor*& dyn_currentAnchor();
    // Get instance field reference: private System.Int32 lastAnchorId
    [[deprecated("Use field access instead!")]] int& dyn_lastAnchorId();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32> anchors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn_anchors();
    // Get instance field reference: private readonly VYaml.Internal.ExpandBuffer`1<VYaml.Parser.ParseState> stateStack
    [[deprecated("Use field access instead!")]] ::VYaml::Internal::ExpandBuffer_1<::VYaml::Parser::ParseState>*& dyn_stateStack();
    // static public VYaml.Parser.YamlParser FromBytes(System.Memory`1<System.Byte> bytes)
    // Offset: 0x573BC3C
    static ::VYaml::Parser::YamlParser FromBytes(::System::Memory_1<uint8_t> bytes);
    // static public VYaml.Parser.YamlParser FromSequence(in System.Buffers.ReadOnlySequence`1<System.Byte> sequence)
    // Offset: 0x573BEC4
    static ::VYaml::Parser::YamlParser FromSequence(ByRef<::System::Buffers::ReadOnlySequence_1<uint8_t>> sequence);
    // public VYaml.Parser.ParseEventType get_CurrentEventType()
    // Offset: 0x573BF08
    ::VYaml::Parser::ParseEventType get_CurrentEventType();
    // private System.Void set_CurrentEventType(VYaml.Parser.ParseEventType value)
    // Offset: 0x573BF10
    void set_CurrentEventType(::VYaml::Parser::ParseEventType value);
    // public System.Boolean get_UnityStrippedMark()
    // Offset: 0x573BF18
    bool get_UnityStrippedMark();
    // private System.Void set_UnityStrippedMark(System.Boolean value)
    // Offset: 0x573BF20
    void set_UnityStrippedMark(bool value);
    // public VYaml.Parser.Marker get_CurrentMark()
    // Offset: 0x573BF2C
    ::VYaml::Parser::Marker get_CurrentMark();
    // public System.Boolean get_End()
    // Offset: 0x572BB50
    bool get_End();
    // private VYaml.Parser.TokenType get_CurrentTokenType()
    // Offset: 0x573BF3C
    ::VYaml::Parser::TokenType get_CurrentTokenType();
    // public System.Void .ctor(System.Buffers.ReadOnlySequence`1<System.Byte> sequence)
    // Offset: 0x573BD10
    YamlParser(::System::Buffers::ReadOnlySequence_1<uint8_t> sequence);
    // public System.Void .ctor(ref VYaml.Parser.Utf8YamlTokenizer tokenizer)
    // Offset: 0x573BF44
    YamlParser(ByRef<::VYaml::Parser::Utf8YamlTokenizer> tokenizer);
    // public System.Boolean Read()
    // Offset: 0x5726C50
    bool Read();
    // public System.Void ReadWithVerify(VYaml.Parser.ParseEventType eventType)
    // Offset: 0x573CF08
    void ReadWithVerify(::VYaml::Parser::ParseEventType eventType);
    // public System.Void SkipAfter(VYaml.Parser.ParseEventType eventType)
    // Offset: 0x573CFB0
    void SkipAfter(::VYaml::Parser::ParseEventType eventType);
    // public System.Void SkipCurrentNode()
    // Offset: 0x573D000
    void SkipCurrentNode();
    // private System.Void ParseStreamStart()
    // Offset: 0x573C034
    void ParseStreamStart();
    // private System.Void ParseDocumentStart(System.Boolean implicitStarted)
    // Offset: 0x573C080
    void ParseDocumentStart(bool implicitStarted);
    // private System.Void ParseExplicitDocumentStart()
    // Offset: 0x573D0F0
    void ParseExplicitDocumentStart();
    // private System.Void ParseDocumentContent()
    // Offset: 0x573C14C
    void ParseDocumentContent();
    // private System.Void ParseDocumentEnd()
    // Offset: 0x573C198
    void ParseDocumentEnd();
    // private System.Void ParseNode(System.Boolean block, System.Boolean indentlessSequence)
    // Offset: 0x573C1CC
    void ParseNode(bool block, bool indentlessSequence);
    // private System.Void ParseBlockMappingKey(System.Boolean first)
    // Offset: 0x573C810
    void ParseBlockMappingKey(bool first);
    // private System.Void ParseBlockMappingValue()
    // Offset: 0x573C92C
    void ParseBlockMappingValue();
    // private System.Void ParseBlockSequenceEntry(System.Boolean first)
    // Offset: 0x573C9AC
    void ParseBlockSequenceEntry(bool first);
    // private System.Void ParseFlowSequenceEntry(System.Boolean first)
    // Offset: 0x573CAB0
    void ParseFlowSequenceEntry(bool first);
    // private System.Void ParseFlowMappingKey(System.Boolean first)
    // Offset: 0x573CBC8
    void ParseFlowMappingKey(bool first);
    // private System.Void ParseFlowMappingValue(System.Boolean empty)
    // Offset: 0x573CD18
    void ParseFlowMappingValue(bool empty);
    // private System.Void ParseIndentlessSequenceEntry()
    // Offset: 0x573CD88
    void ParseIndentlessSequenceEntry();
    // private System.Void ParseFlowSequenceEntryMappingKey()
    // Offset: 0x573CE20
    void ParseFlowSequenceEntryMappingKey();
    // private System.Void ParseFlowSequenceEntryMappingValue()
    // Offset: 0x573CE94
    void ParseFlowSequenceEntryMappingValue();
    // private System.Void ParseFlowSequenceEntryMappingEnd()
    // Offset: 0x573D21C
    void ParseFlowSequenceEntryMappingEnd();
    // private System.Void PopState()
    // Offset: 0x573D230
    void PopState();
    // private System.Void PushState(VYaml.Parser.ParseState state)
    // Offset: 0x573D2F0
    void PushState(::VYaml::Parser::ParseState state);
    // private System.Void EmptyScalar()
    // Offset: 0x573D3E0
    void EmptyScalar();
    // private System.Void ProcessDirectives()
    // Offset: 0x573D168
    void ProcessDirectives();
    // private System.Int32 RegisterAnchor(System.String anchorName)
    // Offset: 0x573D1AC
    int RegisterAnchor(::StringW anchorName);
    // private System.Void ThrowIfCurrentTokenUnless(VYaml.Parser.TokenType expectedTokenType)
    // Offset: 0x573D3F0
    void ThrowIfCurrentTokenUnless(::VYaml::Parser::TokenType expectedTokenType);
    // public System.Boolean IsNullScalar()
    // Offset: 0x573D498
    bool IsNullScalar();
    // public System.String GetScalarAsString()
    // Offset: 0x573D4C0
    ::StringW GetScalarAsString();
    // public System.ReadOnlySpan`1<System.Byte> GetScalarAsUtf8()
    // Offset: 0x573D4D8
    ::System::ReadOnlySpan_1<uint8_t> GetScalarAsUtf8();
    // public System.Boolean TryGetScalarAsSpan(out System.ReadOnlySpan`1<System.Byte> span)
    // Offset: 0x573D618
    bool TryGetScalarAsSpan(ByRef<::System::ReadOnlySpan_1<uint8_t>> span);
    // public System.Boolean GetScalarAsBool()
    // Offset: 0x573D700
    bool GetScalarAsBool();
    // public System.Int32 GetScalarAsInt32()
    // Offset: 0x573D7C0
    int GetScalarAsInt32();
    // public System.Int64 GetScalarAsInt64()
    // Offset: 0x573D880
    int64_t GetScalarAsInt64();
    // public System.UInt32 GetScalarAsUInt32()
    // Offset: 0x573D93C
    uint GetScalarAsUInt32();
    // public System.UInt64 GetScalarAsUInt64()
    // Offset: 0x573D9FC
    uint64_t GetScalarAsUInt64();
    // public System.Single GetScalarAsFloat()
    // Offset: 0x573DAB8
    float GetScalarAsFloat();
    // public System.Double GetScalarAsDouble()
    // Offset: 0x573DB78
    double GetScalarAsDouble();
    // public System.String ReadScalarAsString()
    // Offset: 0x573DC38
    ::StringW ReadScalarAsString();
    // public System.Boolean ReadScalarAsBool()
    // Offset: 0x573DC84
    bool ReadScalarAsBool();
    // public System.Int32 ReadScalarAsInt32()
    // Offset: 0x573DCBC
    int ReadScalarAsInt32();
    // public System.Int64 ReadScalarAsInt64()
    // Offset: 0x573DD90
    int64_t ReadScalarAsInt64();
    // public System.UInt32 ReadScalarAsUInt32()
    // Offset: 0x573DE64
    uint ReadScalarAsUInt32();
    // public System.UInt64 ReadScalarAsUInt64()
    // Offset: 0x573DF38
    uint64_t ReadScalarAsUInt64();
    // public System.Single ReadScalarAsFloat()
    // Offset: 0x573E00C
    float ReadScalarAsFloat();
    // public System.Double ReadScalarAsDouble()
    // Offset: 0x573E0E8
    double ReadScalarAsDouble();
    // public System.Boolean TryReadScalarAsString(out System.String result)
    // Offset: 0x573E1C4
    bool TryReadScalarAsString(ByRef<::StringW> result);
    // public System.Boolean TryReadScalarAsBool(out System.Boolean result)
    // Offset: 0x573E244
    bool TryReadScalarAsBool(ByRef<bool> result);
    // public System.Boolean TryReadScalarAsInt32(out System.Int32 result)
    // Offset: 0x573E288
    bool TryReadScalarAsInt32(ByRef<int> result);
    // public System.Boolean TryReadScalarAsInt64(out System.Int64 result)
    // Offset: 0x573E2CC
    bool TryReadScalarAsInt64(ByRef<int64_t> result);
    // public System.Boolean TryReadScalarAsUInt32(out System.UInt32 result)
    // Offset: 0x573E310
    bool TryReadScalarAsUInt32(ByRef<uint> result);
    // public System.Boolean TryReadScalarAsUInt64(out System.UInt64 result)
    // Offset: 0x573E354
    bool TryReadScalarAsUInt64(ByRef<uint64_t> result);
    // public System.Boolean TryReadScalarAsFloat(out System.Single result)
    // Offset: 0x573E398
    bool TryReadScalarAsFloat(ByRef<float> result);
    // public System.Boolean TryReadScalarAsDouble(out System.Double result)
    // Offset: 0x573E3DC
    bool TryReadScalarAsDouble(ByRef<double> result);
    // public System.Boolean TryGetScalarAsString(out System.String value)
    // Offset: 0x573E420
    bool TryGetScalarAsString(ByRef<::StringW> value);
    // public System.Boolean TryGetScalarAsBool(out System.Boolean value)
    // Offset: 0x573E48C
    bool TryGetScalarAsBool(ByRef<bool> value);
    // public System.Boolean TryGetScalarAsInt32(out System.Int32 value)
    // Offset: 0x573E4A0
    bool TryGetScalarAsInt32(ByRef<int> value);
    // public System.Boolean TryGetScalarAsUInt32(out System.UInt32 value)
    // Offset: 0x573E4B4
    bool TryGetScalarAsUInt32(ByRef<uint> value);
    // public System.Boolean TryGetScalarAsInt64(out System.Int64 value)
    // Offset: 0x573E4C8
    bool TryGetScalarAsInt64(ByRef<int64_t> value);
    // public System.Boolean TryGetScalarAsUInt64(out System.UInt64 value)
    // Offset: 0x573E4DC
    bool TryGetScalarAsUInt64(ByRef<uint64_t> value);
    // public System.Boolean TryGetScalarAsFloat(out System.Single value)
    // Offset: 0x573E4F0
    bool TryGetScalarAsFloat(ByRef<float> value);
    // public System.Boolean TryGetScalarAsDouble(out System.Double value)
    // Offset: 0x573E504
    bool TryGetScalarAsDouble(ByRef<double> value);
    // public System.Boolean TryGetCurrentTag(out VYaml.Parser.Tag tag)
    // Offset: 0x573E518
    bool TryGetCurrentTag(ByRef<::VYaml::Parser::Tag*> tag);
    // public System.Boolean TryGetCurrentAnchor(out VYaml.Parser.Anchor anchor)
    // Offset: 0x573E550
    bool TryGetCurrentAnchor(ByRef<::VYaml::Parser::Anchor*> anchor);
  }; // VYaml.Parser.YamlParser
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::FromBytes
// Il2CppName: FromBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::YamlParser (*)(::System::Memory_1<uint8_t>)>(&VYaml::Parser::YamlParser::FromBytes)> {
  static const MethodInfo* get() {
    static auto* bytes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Memory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "FromBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::FromSequence
// Il2CppName: FromSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::YamlParser (*)(ByRef<::System::Buffers::ReadOnlySequence_1<uint8_t>>)>(&VYaml::Parser::YamlParser::FromSequence)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Buffers", "ReadOnlySequence`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "FromSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::get_CurrentEventType
// Il2CppName: get_CurrentEventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::ParseEventType (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::get_CurrentEventType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "get_CurrentEventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::set_CurrentEventType
// Il2CppName: set_CurrentEventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(::VYaml::Parser::ParseEventType)>(&VYaml::Parser::YamlParser::set_CurrentEventType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "ParseEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "set_CurrentEventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::get_UnityStrippedMark
// Il2CppName: get_UnityStrippedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::get_UnityStrippedMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "get_UnityStrippedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::set_UnityStrippedMark
// Il2CppName: set_UnityStrippedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::set_UnityStrippedMark)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "set_UnityStrippedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::get_CurrentMark
// Il2CppName: get_CurrentMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::Marker (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::get_CurrentMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "get_CurrentMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::get_End
// Il2CppName: get_End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::get_End)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "get_End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::get_CurrentTokenType
// Il2CppName: get_CurrentTokenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Parser::TokenType (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::get_CurrentTokenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "get_CurrentTokenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::YamlParser
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::YamlParser
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadWithVerify
// Il2CppName: ReadWithVerify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(::VYaml::Parser::ParseEventType)>(&VYaml::Parser::YamlParser::ReadWithVerify)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "ParseEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadWithVerify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::SkipAfter
// Il2CppName: SkipAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(::VYaml::Parser::ParseEventType)>(&VYaml::Parser::YamlParser::SkipAfter)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "ParseEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "SkipAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::SkipCurrentNode
// Il2CppName: SkipCurrentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::SkipCurrentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "SkipCurrentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseStreamStart
// Il2CppName: ParseStreamStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseStreamStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseStreamStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseDocumentStart
// Il2CppName: ParseDocumentStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseDocumentStart)> {
  static const MethodInfo* get() {
    static auto* implicitStarted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseDocumentStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{implicitStarted});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseExplicitDocumentStart
// Il2CppName: ParseExplicitDocumentStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseExplicitDocumentStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseExplicitDocumentStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseDocumentContent
// Il2CppName: ParseDocumentContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseDocumentContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseDocumentContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseDocumentEnd
// Il2CppName: ParseDocumentEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseDocumentEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseDocumentEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseNode
// Il2CppName: ParseNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool, bool)>(&VYaml::Parser::YamlParser::ParseNode)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* indentlessSequence = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, indentlessSequence});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseBlockMappingKey
// Il2CppName: ParseBlockMappingKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseBlockMappingKey)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseBlockMappingKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseBlockMappingValue
// Il2CppName: ParseBlockMappingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseBlockMappingValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseBlockMappingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseBlockSequenceEntry
// Il2CppName: ParseBlockSequenceEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseBlockSequenceEntry)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseBlockSequenceEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowSequenceEntry
// Il2CppName: ParseFlowSequenceEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseFlowSequenceEntry)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowSequenceEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowMappingKey
// Il2CppName: ParseFlowMappingKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseFlowMappingKey)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowMappingKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowMappingValue
// Il2CppName: ParseFlowMappingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(bool)>(&VYaml::Parser::YamlParser::ParseFlowMappingValue)> {
  static const MethodInfo* get() {
    static auto* empty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowMappingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{empty});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseIndentlessSequenceEntry
// Il2CppName: ParseIndentlessSequenceEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseIndentlessSequenceEntry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseIndentlessSequenceEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingKey
// Il2CppName: ParseFlowSequenceEntryMappingKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowSequenceEntryMappingKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingValue
// Il2CppName: ParseFlowSequenceEntryMappingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowSequenceEntryMappingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingEnd
// Il2CppName: ParseFlowSequenceEntryMappingEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ParseFlowSequenceEntryMappingEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ParseFlowSequenceEntryMappingEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::PopState
// Il2CppName: PopState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::PopState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "PopState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::PushState
// Il2CppName: PushState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(::VYaml::Parser::ParseState)>(&VYaml::Parser::YamlParser::PushState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "ParseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "PushState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::EmptyScalar
// Il2CppName: EmptyScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::EmptyScalar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "EmptyScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ProcessDirectives
// Il2CppName: ProcessDirectives
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ProcessDirectives)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ProcessDirectives", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::RegisterAnchor
// Il2CppName: RegisterAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::YamlParser::*)(::StringW)>(&VYaml::Parser::YamlParser::RegisterAnchor)> {
  static const MethodInfo* get() {
    static auto* anchorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "RegisterAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchorName});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ThrowIfCurrentTokenUnless
// Il2CppName: ThrowIfCurrentTokenUnless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Parser::YamlParser::*)(::VYaml::Parser::TokenType)>(&VYaml::Parser::YamlParser::ThrowIfCurrentTokenUnless)> {
  static const MethodInfo* get() {
    static auto* expectedTokenType = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "TokenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ThrowIfCurrentTokenUnless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expectedTokenType});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::IsNullScalar
// Il2CppName: IsNullScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::IsNullScalar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "IsNullScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsString
// Il2CppName: GetScalarAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsUtf8
// Il2CppName: GetScalarAsUtf8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<uint8_t> (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsUtf8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsUtf8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsSpan
// Il2CppName: TryGetScalarAsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<::System::ReadOnlySpan_1<uint8_t>>)>(&VYaml::Parser::YamlParser::TryGetScalarAsSpan)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsBool
// Il2CppName: GetScalarAsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsBool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsInt32
// Il2CppName: GetScalarAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsInt64
// Il2CppName: GetScalarAsInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsUInt32
// Il2CppName: GetScalarAsUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsUInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsUInt64
// Il2CppName: GetScalarAsUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsUInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsFloat
// Il2CppName: GetScalarAsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::GetScalarAsDouble
// Il2CppName: GetScalarAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::GetScalarAsDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "GetScalarAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsString
// Il2CppName: ReadScalarAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsBool
// Il2CppName: ReadScalarAsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsBool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsInt32
// Il2CppName: ReadScalarAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsInt64
// Il2CppName: ReadScalarAsInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsUInt32
// Il2CppName: ReadScalarAsUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsUInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsUInt64
// Il2CppName: ReadScalarAsUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsUInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsFloat
// Il2CppName: ReadScalarAsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::ReadScalarAsDouble
// Il2CppName: ReadScalarAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (VYaml::Parser::YamlParser::*)()>(&VYaml::Parser::YamlParser::ReadScalarAsDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "ReadScalarAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsString
// Il2CppName: TryReadScalarAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<::StringW>)>(&VYaml::Parser::YamlParser::TryReadScalarAsString)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsBool
// Il2CppName: TryReadScalarAsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<bool>)>(&VYaml::Parser::YamlParser::TryReadScalarAsBool)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsInt32
// Il2CppName: TryReadScalarAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<int>)>(&VYaml::Parser::YamlParser::TryReadScalarAsInt32)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsInt64
// Il2CppName: TryReadScalarAsInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<int64_t>)>(&VYaml::Parser::YamlParser::TryReadScalarAsInt64)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsUInt32
// Il2CppName: TryReadScalarAsUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<uint>)>(&VYaml::Parser::YamlParser::TryReadScalarAsUInt32)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsUInt64
// Il2CppName: TryReadScalarAsUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<uint64_t>)>(&VYaml::Parser::YamlParser::TryReadScalarAsUInt64)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsFloat
// Il2CppName: TryReadScalarAsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<float>)>(&VYaml::Parser::YamlParser::TryReadScalarAsFloat)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryReadScalarAsDouble
// Il2CppName: TryReadScalarAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<double>)>(&VYaml::Parser::YamlParser::TryReadScalarAsDouble)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryReadScalarAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsString
// Il2CppName: TryGetScalarAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<::StringW>)>(&VYaml::Parser::YamlParser::TryGetScalarAsString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsBool
// Il2CppName: TryGetScalarAsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<bool>)>(&VYaml::Parser::YamlParser::TryGetScalarAsBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsInt32
// Il2CppName: TryGetScalarAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<int>)>(&VYaml::Parser::YamlParser::TryGetScalarAsInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsUInt32
// Il2CppName: TryGetScalarAsUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<uint>)>(&VYaml::Parser::YamlParser::TryGetScalarAsUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsInt64
// Il2CppName: TryGetScalarAsInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<int64_t>)>(&VYaml::Parser::YamlParser::TryGetScalarAsInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsUInt64
// Il2CppName: TryGetScalarAsUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<uint64_t>)>(&VYaml::Parser::YamlParser::TryGetScalarAsUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsFloat
// Il2CppName: TryGetScalarAsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<float>)>(&VYaml::Parser::YamlParser::TryGetScalarAsFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetScalarAsDouble
// Il2CppName: TryGetScalarAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<double>)>(&VYaml::Parser::YamlParser::TryGetScalarAsDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetScalarAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetCurrentTag
// Il2CppName: TryGetCurrentTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<::VYaml::Parser::Tag*>)>(&VYaml::Parser::YamlParser::TryGetCurrentTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Tag")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetCurrentTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: VYaml::Parser::YamlParser::TryGetCurrentAnchor
// Il2CppName: TryGetCurrentAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Parser::YamlParser::*)(ByRef<::VYaml::Parser::Anchor*>)>(&VYaml::Parser::YamlParser::TryGetCurrentAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Anchor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Parser::YamlParser), "TryGetCurrentAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
