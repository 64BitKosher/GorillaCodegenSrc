// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceBuilder
  class ReusableByteSequenceBuilder;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceBuilderPool
  class ReusableByteSequenceBuilderPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::ReusableByteSequenceBuilderPool);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::ReusableByteSequenceBuilderPool*, "VYaml.Internal", "ReusableByteSequenceBuilderPool");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.ReusableByteSequenceBuilderPool
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class ReusableByteSequenceBuilderPool : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Concurrent.ConcurrentQueue`1<VYaml.Internal.ReusableByteSequenceBuilder> queue
    static ::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Internal::ReusableByteSequenceBuilder*>* _get_queue();
    // Set static field: static private readonly System.Collections.Concurrent.ConcurrentQueue`1<VYaml.Internal.ReusableByteSequenceBuilder> queue
    static void _set_queue(::System::Collections::Concurrent::ConcurrentQueue_1<::VYaml::Internal::ReusableByteSequenceBuilder*>* value);
    // static public VYaml.Internal.ReusableByteSequenceBuilder Rent()
    // Offset: 0x573FA40
    static ::VYaml::Internal::ReusableByteSequenceBuilder* Rent();
    // static public System.Void Return(VYaml.Internal.ReusableByteSequenceBuilder builder)
    // Offset: 0x573FAFC
    static void Return(::VYaml::Internal::ReusableByteSequenceBuilder* builder);
    // static private System.Void .cctor()
    // Offset: 0x573FB8C
    static void _cctor();
  }; // VYaml.Internal.ReusableByteSequenceBuilderPool
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilderPool::Rent
// Il2CppName: Rent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Internal::ReusableByteSequenceBuilder* (*)()>(&VYaml::Internal::ReusableByteSequenceBuilderPool::Rent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilderPool*), "Rent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilderPool::Return
// Il2CppName: Return
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::VYaml::Internal::ReusableByteSequenceBuilder*)>(&VYaml::Internal::ReusableByteSequenceBuilderPool::Return)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("VYaml.Internal", "ReusableByteSequenceBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilderPool*), "Return", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilderPool::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Internal::ReusableByteSequenceBuilderPool::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilderPool*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
