// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: EmitStringInfo
  struct EmitStringInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: EmitStringAnalyzer
  class EmitStringAnalyzer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::EmitStringAnalyzer);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::EmitStringAnalyzer*, "VYaml.Internal", "EmitStringAnalyzer");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.EmitStringAnalyzer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class EmitStringAnalyzer : public ::Il2CppObject {
    public:
    // Get static field: static private System.Text.StringBuilder stringBuilderThreadStatic
    static ::System::Text::StringBuilder* _get_stringBuilderThreadStatic();
    // Set static field: static private System.Text.StringBuilder stringBuilderThreadStatic
    static void _set_stringBuilderThreadStatic(::System::Text::StringBuilder* value);
    // Get static field: static private System.Char[] whiteSpaces
    static ::ArrayW<::Il2CppChar> _get_whiteSpaces();
    // Set static field: static private System.Char[] whiteSpaces
    static void _set_whiteSpaces(::ArrayW<::Il2CppChar> value);
    // static public VYaml.Internal.EmitStringInfo Analyze(System.String value)
    // Offset: 0x573E634
    static ::VYaml::Internal::EmitStringInfo Analyze(::StringW value);
    // static System.Text.StringBuilder BuildLiteralScalar(System.ReadOnlySpan`1<System.Char> originalValue, System.Int32 indentCharCount)
    // Offset: 0x573EA70
    static ::System::Text::StringBuilder* BuildLiteralScalar(::System::ReadOnlySpan_1<::Il2CppChar> originalValue, int indentCharCount);
    // static System.Text.StringBuilder BuildQuotedScalar(System.ReadOnlySpan`1<System.Char> originalValue, System.Boolean doubleQuote)
    // Offset: 0x573ECCC
    static ::System::Text::StringBuilder* BuildQuotedScalar(::System::ReadOnlySpan_1<::Il2CppChar> originalValue, bool doubleQuote);
    // static private System.Boolean IsReservedWord(System.String value)
    // Offset: 0x573E868
    static bool IsReservedWord(::StringW value);
    // static private System.Text.StringBuilder GetStringBuilder()
    // Offset: 0x573F1F8
    static ::System::Text::StringBuilder* GetStringBuilder();
    // static private System.Void AppendWhiteSpace(System.Text.StringBuilder stringBuilder, System.Int32 length)
    // Offset: 0x573F2BC
    static void AppendWhiteSpace(::System::Text::StringBuilder* stringBuilder, int length);
    // static private System.Void .cctor()
    // Offset: 0x573F460
    static void _cctor();
  }; // VYaml.Internal.EmitStringAnalyzer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::Analyze
// Il2CppName: Analyze
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Internal::EmitStringInfo (*)(::StringW)>(&VYaml::Internal::EmitStringAnalyzer::Analyze)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "Analyze", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::BuildLiteralScalar
// Il2CppName: BuildLiteralScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&VYaml::Internal::EmitStringAnalyzer::BuildLiteralScalar)> {
  static const MethodInfo* get() {
    static auto* originalValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* indentCharCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "BuildLiteralScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalValue, indentCharCount});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::BuildQuotedScalar
// Il2CppName: BuildQuotedScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)(::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&VYaml::Internal::EmitStringAnalyzer::BuildQuotedScalar)> {
  static const MethodInfo* get() {
    static auto* originalValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* doubleQuote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "BuildQuotedScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalValue, doubleQuote});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::IsReservedWord
// Il2CppName: IsReservedWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&VYaml::Internal::EmitStringAnalyzer::IsReservedWord)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "IsReservedWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::GetStringBuilder
// Il2CppName: GetStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)()>(&VYaml::Internal::EmitStringAnalyzer::GetStringBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "GetStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::AppendWhiteSpace
// Il2CppName: AppendWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int)>(&VYaml::Internal::EmitStringAnalyzer::AppendWhiteSpace)> {
  static const MethodInfo* get() {
    static auto* stringBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), "AppendWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringBuilder, length});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::EmitStringAnalyzer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Internal::EmitStringAnalyzer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringAnalyzer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
