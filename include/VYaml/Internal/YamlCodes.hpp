// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: YamlCodes
  class YamlCodes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::YamlCodes);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::YamlCodes*, "VYaml.Internal", "YamlCodes");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.YamlCodes
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class YamlCodes : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Byte[] YamlDirectiveName
    static ::ArrayW<uint8_t> _get_YamlDirectiveName();
    // Set static field: static public readonly System.Byte[] YamlDirectiveName
    static void _set_YamlDirectiveName(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] TagDirectiveName
    static ::ArrayW<uint8_t> _get_TagDirectiveName();
    // Set static field: static public readonly System.Byte[] TagDirectiveName
    static void _set_TagDirectiveName(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Utf8Bom
    static ::ArrayW<uint8_t> _get_Utf8Bom();
    // Set static field: static public readonly System.Byte[] Utf8Bom
    static void _set_Utf8Bom(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] StreamStart
    static ::ArrayW<uint8_t> _get_StreamStart();
    // Set static field: static public readonly System.Byte[] StreamStart
    static void _set_StreamStart(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] DocStart
    static ::ArrayW<uint8_t> _get_DocStart();
    // Set static field: static public readonly System.Byte[] DocStart
    static void _set_DocStart(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] CrLf
    static ::ArrayW<uint8_t> _get_CrLf();
    // Set static field: static public readonly System.Byte[] CrLf
    static void _set_CrLf(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Null0
    static ::ArrayW<uint8_t> _get_Null0();
    // Set static field: static public readonly System.Byte[] Null0
    static void _set_Null0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Null1
    static ::ArrayW<uint8_t> _get_Null1();
    // Set static field: static public readonly System.Byte[] Null1
    static void _set_Null1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Null2
    static ::ArrayW<uint8_t> _get_Null2();
    // Set static field: static public readonly System.Byte[] Null2
    static void _set_Null2(::ArrayW<uint8_t> value);
    // static field const value: static public System.Byte NullAlias
    static constexpr const uint8_t NullAlias = 126u;
    // Get static field: static public System.Byte NullAlias
    static uint8_t _get_NullAlias();
    // Set static field: static public System.Byte NullAlias
    static void _set_NullAlias(uint8_t value);
    // Get static field: static public readonly System.Byte[] True0
    static ::ArrayW<uint8_t> _get_True0();
    // Set static field: static public readonly System.Byte[] True0
    static void _set_True0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] True1
    static ::ArrayW<uint8_t> _get_True1();
    // Set static field: static public readonly System.Byte[] True1
    static void _set_True1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] True2
    static ::ArrayW<uint8_t> _get_True2();
    // Set static field: static public readonly System.Byte[] True2
    static void _set_True2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] False0
    static ::ArrayW<uint8_t> _get_False0();
    // Set static field: static public readonly System.Byte[] False0
    static void _set_False0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] False1
    static ::ArrayW<uint8_t> _get_False1();
    // Set static field: static public readonly System.Byte[] False1
    static void _set_False1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] False2
    static ::ArrayW<uint8_t> _get_False2();
    // Set static field: static public readonly System.Byte[] False2
    static void _set_False2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf0
    static ::ArrayW<uint8_t> _get_Inf0();
    // Set static field: static public readonly System.Byte[] Inf0
    static void _set_Inf0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf1
    static ::ArrayW<uint8_t> _get_Inf1();
    // Set static field: static public readonly System.Byte[] Inf1
    static void _set_Inf1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf2
    static ::ArrayW<uint8_t> _get_Inf2();
    // Set static field: static public readonly System.Byte[] Inf2
    static void _set_Inf2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf3
    static ::ArrayW<uint8_t> _get_Inf3();
    // Set static field: static public readonly System.Byte[] Inf3
    static void _set_Inf3(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf4
    static ::ArrayW<uint8_t> _get_Inf4();
    // Set static field: static public readonly System.Byte[] Inf4
    static void _set_Inf4(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Inf5
    static ::ArrayW<uint8_t> _get_Inf5();
    // Set static field: static public readonly System.Byte[] Inf5
    static void _set_Inf5(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Yes0
    static ::ArrayW<uint8_t> _get_Yes0();
    // Set static field: static public readonly System.Byte[] Yes0
    static void _set_Yes0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Yes1
    static ::ArrayW<uint8_t> _get_Yes1();
    // Set static field: static public readonly System.Byte[] Yes1
    static void _set_Yes1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Yes2
    static ::ArrayW<uint8_t> _get_Yes2();
    // Set static field: static public readonly System.Byte[] Yes2
    static void _set_Yes2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] No0
    static ::ArrayW<uint8_t> _get_No0();
    // Set static field: static public readonly System.Byte[] No0
    static void _set_No0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] No1
    static ::ArrayW<uint8_t> _get_No1();
    // Set static field: static public readonly System.Byte[] No1
    static void _set_No1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] No2
    static ::ArrayW<uint8_t> _get_No2();
    // Set static field: static public readonly System.Byte[] No2
    static void _set_No2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] On0
    static ::ArrayW<uint8_t> _get_On0();
    // Set static field: static public readonly System.Byte[] On0
    static void _set_On0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] On1
    static ::ArrayW<uint8_t> _get_On1();
    // Set static field: static public readonly System.Byte[] On1
    static void _set_On1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] On2
    static ::ArrayW<uint8_t> _get_On2();
    // Set static field: static public readonly System.Byte[] On2
    static void _set_On2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Off0
    static ::ArrayW<uint8_t> _get_Off0();
    // Set static field: static public readonly System.Byte[] Off0
    static void _set_Off0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Off1
    static ::ArrayW<uint8_t> _get_Off1();
    // Set static field: static public readonly System.Byte[] Off1
    static void _set_Off1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Off2
    static ::ArrayW<uint8_t> _get_Off2();
    // Set static field: static public readonly System.Byte[] Off2
    static void _set_Off2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] NegInf0
    static ::ArrayW<uint8_t> _get_NegInf0();
    // Set static field: static public readonly System.Byte[] NegInf0
    static void _set_NegInf0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] NegInf1
    static ::ArrayW<uint8_t> _get_NegInf1();
    // Set static field: static public readonly System.Byte[] NegInf1
    static void _set_NegInf1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] NegInf2
    static ::ArrayW<uint8_t> _get_NegInf2();
    // Set static field: static public readonly System.Byte[] NegInf2
    static void _set_NegInf2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Nan0
    static ::ArrayW<uint8_t> _get_Nan0();
    // Set static field: static public readonly System.Byte[] Nan0
    static void _set_Nan0(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Nan1
    static ::ArrayW<uint8_t> _get_Nan1();
    // Set static field: static public readonly System.Byte[] Nan1
    static void _set_Nan1(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] Nan2
    static ::ArrayW<uint8_t> _get_Nan2();
    // Set static field: static public readonly System.Byte[] Nan2
    static void _set_Nan2(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] HexPrefix
    static ::ArrayW<uint8_t> _get_HexPrefix();
    // Set static field: static public readonly System.Byte[] HexPrefix
    static void _set_HexPrefix(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] HexPrefixNegative
    static ::ArrayW<uint8_t> _get_HexPrefixNegative();
    // Set static field: static public readonly System.Byte[] HexPrefixNegative
    static void _set_HexPrefixNegative(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] OctalPrefix
    static ::ArrayW<uint8_t> _get_OctalPrefix();
    // Set static field: static public readonly System.Byte[] OctalPrefix
    static void _set_OctalPrefix(::ArrayW<uint8_t> value);
    // Get static field: static public readonly System.Byte[] UnityStrippedSymbol
    static ::ArrayW<uint8_t> _get_UnityStrippedSymbol();
    // Set static field: static public readonly System.Byte[] UnityStrippedSymbol
    static void _set_UnityStrippedSymbol(::ArrayW<uint8_t> value);
    // static field const value: static public System.Byte Space
    static constexpr const uint8_t Space = 32u;
    // Get static field: static public System.Byte Space
    static uint8_t _get_Space();
    // Set static field: static public System.Byte Space
    static void _set_Space(uint8_t value);
    // static field const value: static public System.Byte Tab
    static constexpr const uint8_t Tab = 9u;
    // Get static field: static public System.Byte Tab
    static uint8_t _get_Tab();
    // Set static field: static public System.Byte Tab
    static void _set_Tab(uint8_t value);
    // static field const value: static public System.Byte Lf
    static constexpr const uint8_t Lf = 10u;
    // Get static field: static public System.Byte Lf
    static uint8_t _get_Lf();
    // Set static field: static public System.Byte Lf
    static void _set_Lf(uint8_t value);
    // static field const value: static public System.Byte Cr
    static constexpr const uint8_t Cr = 13u;
    // Get static field: static public System.Byte Cr
    static uint8_t _get_Cr();
    // Set static field: static public System.Byte Cr
    static void _set_Cr(uint8_t value);
    // static field const value: static public System.Byte Comment
    static constexpr const uint8_t Comment = 35u;
    // Get static field: static public System.Byte Comment
    static uint8_t _get_Comment();
    // Set static field: static public System.Byte Comment
    static void _set_Comment(uint8_t value);
    // static field const value: static public System.Byte DirectiveLine
    static constexpr const uint8_t DirectiveLine = 37u;
    // Get static field: static public System.Byte DirectiveLine
    static uint8_t _get_DirectiveLine();
    // Set static field: static public System.Byte DirectiveLine
    static void _set_DirectiveLine(uint8_t value);
    // static field const value: static public System.Byte Alias
    static constexpr const uint8_t Alias = 42u;
    // Get static field: static public System.Byte Alias
    static uint8_t _get_Alias();
    // Set static field: static public System.Byte Alias
    static void _set_Alias(uint8_t value);
    // static field const value: static public System.Byte Anchor
    static constexpr const uint8_t Anchor = 38u;
    // Get static field: static public System.Byte Anchor
    static uint8_t _get_Anchor();
    // Set static field: static public System.Byte Anchor
    static void _set_Anchor(uint8_t value);
    // static field const value: static public System.Byte Tag
    static constexpr const uint8_t Tag = 33u;
    // Get static field: static public System.Byte Tag
    static uint8_t _get_Tag();
    // Set static field: static public System.Byte Tag
    static void _set_Tag(uint8_t value);
    // static field const value: static public System.Byte SingleQuote
    static constexpr const uint8_t SingleQuote = 39u;
    // Get static field: static public System.Byte SingleQuote
    static uint8_t _get_SingleQuote();
    // Set static field: static public System.Byte SingleQuote
    static void _set_SingleQuote(uint8_t value);
    // static field const value: static public System.Byte DoubleQuote
    static constexpr const uint8_t DoubleQuote = 34u;
    // Get static field: static public System.Byte DoubleQuote
    static uint8_t _get_DoubleQuote();
    // Set static field: static public System.Byte DoubleQuote
    static void _set_DoubleQuote(uint8_t value);
    // static field const value: static public System.Byte LiteralScalerHeader
    static constexpr const uint8_t LiteralScalerHeader = 124u;
    // Get static field: static public System.Byte LiteralScalerHeader
    static uint8_t _get_LiteralScalerHeader();
    // Set static field: static public System.Byte LiteralScalerHeader
    static void _set_LiteralScalerHeader(uint8_t value);
    // static field const value: static public System.Byte FoldedScalerHeader
    static constexpr const uint8_t FoldedScalerHeader = 62u;
    // Get static field: static public System.Byte FoldedScalerHeader
    static uint8_t _get_FoldedScalerHeader();
    // Set static field: static public System.Byte FoldedScalerHeader
    static void _set_FoldedScalerHeader(uint8_t value);
    // static field const value: static public System.Byte Comma
    static constexpr const uint8_t Comma = 44u;
    // Get static field: static public System.Byte Comma
    static uint8_t _get_Comma();
    // Set static field: static public System.Byte Comma
    static void _set_Comma(uint8_t value);
    // static field const value: static public System.Byte BlockEntryIndent
    static constexpr const uint8_t BlockEntryIndent = 45u;
    // Get static field: static public System.Byte BlockEntryIndent
    static uint8_t _get_BlockEntryIndent();
    // Set static field: static public System.Byte BlockEntryIndent
    static void _set_BlockEntryIndent(uint8_t value);
    // static field const value: static public System.Byte ExplicitKeyIndent
    static constexpr const uint8_t ExplicitKeyIndent = 63u;
    // Get static field: static public System.Byte ExplicitKeyIndent
    static uint8_t _get_ExplicitKeyIndent();
    // Set static field: static public System.Byte ExplicitKeyIndent
    static void _set_ExplicitKeyIndent(uint8_t value);
    // static field const value: static public System.Byte MapValueIndent
    static constexpr const uint8_t MapValueIndent = 58u;
    // Get static field: static public System.Byte MapValueIndent
    static uint8_t _get_MapValueIndent();
    // Set static field: static public System.Byte MapValueIndent
    static void _set_MapValueIndent(uint8_t value);
    // static field const value: static public System.Byte FlowMapStart
    static constexpr const uint8_t FlowMapStart = 123u;
    // Get static field: static public System.Byte FlowMapStart
    static uint8_t _get_FlowMapStart();
    // Set static field: static public System.Byte FlowMapStart
    static void _set_FlowMapStart(uint8_t value);
    // static field const value: static public System.Byte FlowMapEnd
    static constexpr const uint8_t FlowMapEnd = 125u;
    // Get static field: static public System.Byte FlowMapEnd
    static uint8_t _get_FlowMapEnd();
    // Set static field: static public System.Byte FlowMapEnd
    static void _set_FlowMapEnd(uint8_t value);
    // static field const value: static public System.Byte FlowSequenceStart
    static constexpr const uint8_t FlowSequenceStart = 91u;
    // Get static field: static public System.Byte FlowSequenceStart
    static uint8_t _get_FlowSequenceStart();
    // Set static field: static public System.Byte FlowSequenceStart
    static void _set_FlowSequenceStart(uint8_t value);
    // static field const value: static public System.Byte FlowSequenceEnd
    static constexpr const uint8_t FlowSequenceEnd = 93u;
    // Get static field: static public System.Byte FlowSequenceEnd
    static uint8_t _get_FlowSequenceEnd();
    // Set static field: static public System.Byte FlowSequenceEnd
    static void _set_FlowSequenceEnd(uint8_t value);
    // static public System.Boolean IsAlphaNumericDashOrUnderscore(System.Byte code)
    // Offset: 0x5743084
    static bool IsAlphaNumericDashOrUnderscore(uint8_t code);
    // static public System.Boolean IsWordChar(System.Byte code)
    // Offset: 0x57430F4
    static bool IsWordChar(uint8_t code);
    // static public System.Boolean IsUriChar(System.Byte code)
    // Offset: 0x5743158
    static bool IsUriChar(uint8_t code);
    // static public System.Boolean IsTagChar(System.Byte code)
    // Offset: 0x5743208
    static bool IsTagChar(uint8_t code);
    // static public System.Boolean IsAscii(System.Byte code)
    // Offset: 0x57432AC
    static bool IsAscii(uint8_t code);
    // static public System.Boolean IsNumber(System.Byte code)
    // Offset: 0x57432B8
    static bool IsNumber(uint8_t code);
    // static public System.Boolean IsEmpty(System.Byte code)
    // Offset: 0x57432CC
    static bool IsEmpty(uint8_t code);
    // static public System.Boolean IsLineBreak(System.Byte code)
    // Offset: 0x57432F8
    static bool IsLineBreak(uint8_t code);
    // static public System.Boolean IsBlank(System.Byte code)
    // Offset: 0x5743314
    static bool IsBlank(uint8_t code);
    // static public System.Boolean IsNumberRepresentation(System.Byte code)
    // Offset: 0x5743330
    static bool IsNumberRepresentation(uint8_t code);
    // static public System.Boolean IsHex(System.Byte code)
    // Offset: 0x5743370
    static bool IsHex(uint8_t code);
    // static public System.Boolean IsAnyFlowSymbol(System.Byte code)
    // Offset: 0x57433C0
    static bool IsAnyFlowSymbol(uint8_t code);
    // static public System.Byte AsHex(System.Byte code)
    // Offset: 0x5743400
    static uint8_t AsHex(uint8_t code);
    // static private System.Void .cctor()
    // Offset: 0x5743488
    static void _cctor();
  }; // VYaml.Internal.YamlCodes
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsAlphaNumericDashOrUnderscore
// Il2CppName: IsAlphaNumericDashOrUnderscore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsAlphaNumericDashOrUnderscore)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsAlphaNumericDashOrUnderscore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsWordChar
// Il2CppName: IsWordChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsWordChar)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsWordChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsUriChar
// Il2CppName: IsUriChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsUriChar)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsUriChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsTagChar
// Il2CppName: IsTagChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsTagChar)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsTagChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsAscii
// Il2CppName: IsAscii
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsAscii)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsNumber
// Il2CppName: IsNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsNumber)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsEmpty
// Il2CppName: IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsEmpty)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsLineBreak
// Il2CppName: IsLineBreak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsLineBreak)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsLineBreak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsBlank
// Il2CppName: IsBlank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsBlank)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsBlank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsNumberRepresentation
// Il2CppName: IsNumberRepresentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsNumberRepresentation)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsNumberRepresentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsHex
// Il2CppName: IsHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsHex)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::IsAnyFlowSymbol
// Il2CppName: IsAnyFlowSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&VYaml::Internal::YamlCodes::IsAnyFlowSymbol)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "IsAnyFlowSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::AsHex
// Il2CppName: AsHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t)>(&VYaml::Internal::YamlCodes::AsHex)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), "AsHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::YamlCodes::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Internal::YamlCodes::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::YamlCodes*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
