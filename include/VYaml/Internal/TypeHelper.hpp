// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: TypeHelper
  class TypeHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::TypeHelper);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::TypeHelper*, "VYaml.Internal", "TypeHelper");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.TypeHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeHelper : public ::Il2CppObject {
    public:
    // static public System.Boolean IsAnonymous(System.Type type)
    // Offset: 0x5742F08
    static bool IsAnonymous(::System::Type* type);
  }; // VYaml.Internal.TypeHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::TypeHelper::IsAnonymous
// Il2CppName: IsAnonymous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&VYaml::Internal::TypeHelper::IsAnonymous)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::TypeHelper*), "IsAnonymous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
