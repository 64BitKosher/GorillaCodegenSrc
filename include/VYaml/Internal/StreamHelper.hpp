// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceBuilder
  class ReusableByteSequenceBuilder;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: ValueTask`1<TResult>
  template<typename TResult>
  struct ValueTask_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: StreamHelper
  class StreamHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::StreamHelper);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::StreamHelper*, "VYaml.Internal", "StreamHelper");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.StreamHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class StreamHelper : public ::Il2CppObject {
    public:
    // Nested type: ::VYaml::Internal::StreamHelper::$ReadAsSequenceAsync$d__0
    struct $ReadAsSequenceAsync$d__0;
    // static field const value: static private System.Int32 ArrayMexLength
    static constexpr const int ArrayMexLength = 2147483591;
    // Get static field: static private System.Int32 ArrayMexLength
    static int _get_ArrayMexLength();
    // Set static field: static private System.Int32 ArrayMexLength
    static void _set_ArrayMexLength(int value);
    // static public System.Threading.Tasks.ValueTask`1<VYaml.Internal.ReusableByteSequenceBuilder> ReadAsSequenceAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellation)
    // Offset: 0x57423BC
    static ::System::Threading::Tasks::ValueTask_1<::VYaml::Internal::ReusableByteSequenceBuilder*> ReadAsSequenceAsync(::System::IO::Stream* stream, ::System::Threading::CancellationToken cancellation);
    // static private System.Int32 NewArrayCapacity(System.Int32 size)
    // Offset: 0x57424F4
    static int NewArrayCapacity(int size);
  }; // VYaml.Internal.StreamHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::StreamHelper::ReadAsSequenceAsync
// Il2CppName: ReadAsSequenceAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::ValueTask_1<::VYaml::Internal::ReusableByteSequenceBuilder*> (*)(::System::IO::Stream*, ::System::Threading::CancellationToken)>(&VYaml::Internal::StreamHelper::ReadAsSequenceAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* cancellation = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::StreamHelper*), "ReadAsSequenceAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, cancellation});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::StreamHelper::NewArrayCapacity
// Il2CppName: NewArrayCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&VYaml::Internal::StreamHelper::NewArrayCapacity)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::StreamHelper*), "NewArrayCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
