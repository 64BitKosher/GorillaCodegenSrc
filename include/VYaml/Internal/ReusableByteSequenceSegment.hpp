// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Buffers.ReadOnlySequenceSegment`1
#include "System/Buffers/ReadOnlySequenceSegment_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ReadOnlyMemory`1 because it is already included!
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceSegment
  class ReusableByteSequenceSegment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::ReusableByteSequenceSegment);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::ReusableByteSequenceSegment*, "VYaml.Internal", "ReusableByteSequenceSegment");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: VYaml.Internal.ReusableByteSequenceSegment
  // [TokenAttribute] Offset: FFFFFFFF
  class ReusableByteSequenceSegment : public ::System::Buffers::ReadOnlySequenceSegment_1<uint8_t> {
    public:
    public:
    // private System.Boolean returnToPool
    // Size: 0x1
    // Offset: 0x30
    bool returnToPool;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return returnToPool;
    }
    // Get instance field reference: private System.Boolean returnToPool
    [[deprecated("Use field access instead!")]] bool& dyn_returnToPool();
    // public System.Void .ctor()
    // Offset: 0x573FC24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReusableByteSequenceSegment* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::ReusableByteSequenceSegment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReusableByteSequenceSegment*, creationType>()));
    }
    // public System.Void SetBuffer(System.ReadOnlyMemory`1<System.Byte> buffer, System.Boolean returnToPool)
    // Offset: 0x573FC74
    void SetBuffer(::System::ReadOnlyMemory_1<uint8_t> buffer, bool returnToPool);
    // public System.Void Reset()
    // Offset: 0x573FCDC
    void Reset();
    // public System.Void SetRunningIndexAndNext(System.Int64 runningIndex, VYaml.Internal.ReusableByteSequenceSegment nextSegment)
    // Offset: 0x573FE64
    void SetRunningIndexAndNext(int64_t runningIndex, ::VYaml::Internal::ReusableByteSequenceSegment* nextSegment);
  }; // VYaml.Internal.ReusableByteSequenceSegment
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceSegment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceSegment::SetBuffer
// Il2CppName: SetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Internal::ReusableByteSequenceSegment::*)(::System::ReadOnlyMemory_1<uint8_t>, bool)>(&VYaml::Internal::ReusableByteSequenceSegment::SetBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* returnToPool = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceSegment*), "SetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, returnToPool});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceSegment::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Internal::ReusableByteSequenceSegment::*)()>(&VYaml::Internal::ReusableByteSequenceSegment::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceSegment*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceSegment::SetRunningIndexAndNext
// Il2CppName: SetRunningIndexAndNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Internal::ReusableByteSequenceSegment::*)(int64_t, ::VYaml::Internal::ReusableByteSequenceSegment*)>(&VYaml::Internal::ReusableByteSequenceSegment::SetRunningIndexAndNext)> {
  static const MethodInfo* get() {
    static auto* runningIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* nextSegment = &::il2cpp_utils::GetClassFromName("VYaml.Internal", "ReusableByteSequenceSegment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceSegment*), "SetRunningIndexAndNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runningIndex, nextSegment});
  }
};
