// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: InsertionQueue`1<T>
  template<typename T>
  class InsertionQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VYaml::Internal::InsertionQueue_1, "VYaml.Internal", "InsertionQueue`1");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: VYaml.Internal.InsertionQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  template<typename T>
  class InsertionQueue_1 : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <Count>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T[] array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> array;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 headIndex
    // Size: 0x4
    // Offset: 0x0
    int headIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 tailIndex
    // Size: 0x4
    // Offset: 0x0
    int tailIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated static field getter
    // Get static field: static private System.Int32 MinimumGrow
    static int _get_MinimumGrow() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::_get_MinimumGrow");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<InsertionQueue_1<T>*>::get(), "MinimumGrow"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 MinimumGrow
    static void _set_MinimumGrow(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::_set_MinimumGrow");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<InsertionQueue_1<T>*>::get(), "MinimumGrow", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 GrowFactor
    static int _get_GrowFactor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::_get_GrowFactor");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<InsertionQueue_1<T>*>::get(), "GrowFactor"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 GrowFactor
    static void _set_GrowFactor(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::_set_GrowFactor");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<InsertionQueue_1<T>*>::get(), "GrowFactor", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <Count>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Count$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::dyn_$Count$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Count>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] array
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_array() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::dyn_array");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "array"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 headIndex
    [[deprecated("Use field access instead!")]] int& dyn_headIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::dyn_headIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 tailIndex
    [[deprecated("Use field access instead!")]] int& dyn_tailIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::dyn_tailIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tailIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Count(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Count(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::set_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InsertionQueue_1<T>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InsertionQueue_1<T>*, creationType>(capacity)));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public T Peek()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Peek() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Peek");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Enqueue(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Enqueue(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Dequeue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Insert(System.Int32 posTo, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Insert(int posTo, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(posTo), ::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, posTo, item);
    }
    // private System.Void Grow()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Grow() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::Grow");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Grow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void SetCapacity(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCapacity(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::SetCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
    }
    // private System.Void MoveNext(ref System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MoveNext(ByRef<int> index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::MoveNext");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(index));
    }
    // static private System.Void ThrowForEmptyQueue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void ThrowForEmptyQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::InsertionQueue_1::ThrowForEmptyQueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<InsertionQueue_1<T>*>::get(), "ThrowForEmptyQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // VYaml.Internal.InsertionQueue`1
  // Could not write size check! Type: VYaml.Internal.InsertionQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
