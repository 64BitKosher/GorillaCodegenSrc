// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceSegment
  class ReusableByteSequenceSegment;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlyMemory`1<T>
  template<typename T>
  struct ReadOnlyMemory_1;
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: ReadOnlySequence`1<T>
  template<typename T>
  struct ReadOnlySequence_1;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: ReusableByteSequenceBuilder
  class ReusableByteSequenceBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::ReusableByteSequenceBuilder);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::ReusableByteSequenceBuilder*, "VYaml.Internal", "ReusableByteSequenceBuilder");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.ReusableByteSequenceBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class ReusableByteSequenceBuilder : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.Stack`1<VYaml.Internal.ReusableByteSequenceSegment> segmentPool
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Stack_1<::VYaml::Internal::ReusableByteSequenceSegment*>* segmentPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::VYaml::Internal::ReusableByteSequenceSegment*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<VYaml.Internal.ReusableByteSequenceSegment> segments
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VYaml::Internal::ReusableByteSequenceSegment*>* segments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VYaml::Internal::ReusableByteSequenceSegment*>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.Stack`1<VYaml.Internal.ReusableByteSequenceSegment> segmentPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::VYaml::Internal::ReusableByteSequenceSegment*>*& dyn_segmentPool();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<VYaml.Internal.ReusableByteSequenceSegment> segments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VYaml::Internal::ReusableByteSequenceSegment*>*& dyn_segments();
    // public System.Void Add(System.ReadOnlyMemory`1<System.Byte> buffer, System.Boolean returnToPool)
    // Offset: 0x5741CC0
    void Add(::System::ReadOnlyMemory_1<uint8_t> buffer, bool returnToPool);
    // public System.Boolean TryGetSingleMemory(out System.ReadOnlyMemory`1<System.Byte> memory)
    // Offset: 0x5741E00
    bool TryGetSingleMemory(ByRef<::System::ReadOnlyMemory_1<uint8_t>> memory);
    // public System.Buffers.ReadOnlySequence`1<System.Byte> Build()
    // Offset: 0x5741EA8
    ::System::Buffers::ReadOnlySequence_1<uint8_t> Build();
    // public System.Void Reset()
    // Offset: 0x5742118
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x57422E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReusableByteSequenceBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Internal::ReusableByteSequenceBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReusableByteSequenceBuilder*, creationType>()));
    }
  }; // VYaml.Internal.ReusableByteSequenceBuilder
  #pragma pack(pop)
  static check_size<sizeof(ReusableByteSequenceBuilder), 24 + sizeof(::System::Collections::Generic::List_1<::VYaml::Internal::ReusableByteSequenceSegment*>*)> __VYaml_Internal_ReusableByteSequenceBuilderSizeCheck;
  static_assert(sizeof(ReusableByteSequenceBuilder) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilder::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Internal::ReusableByteSequenceBuilder::*)(::System::ReadOnlyMemory_1<uint8_t>, bool)>(&VYaml::Internal::ReusableByteSequenceBuilder::Add)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* returnToPool = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilder*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, returnToPool});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilder::TryGetSingleMemory
// Il2CppName: TryGetSingleMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Internal::ReusableByteSequenceBuilder::*)(ByRef<::System::ReadOnlyMemory_1<uint8_t>>)>(&VYaml::Internal::ReusableByteSequenceBuilder::TryGetSingleMemory)> {
  static const MethodInfo* get() {
    static auto* memory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilder*), "TryGetSingleMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memory});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilder::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Buffers::ReadOnlySequence_1<uint8_t> (VYaml::Internal::ReusableByteSequenceBuilder::*)()>(&VYaml::Internal::ReusableByteSequenceBuilder::Build)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilder*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilder::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Internal::ReusableByteSequenceBuilder::*)()>(&VYaml::Internal::ReusableByteSequenceBuilder::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ReusableByteSequenceBuilder*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Internal::ReusableByteSequenceBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
