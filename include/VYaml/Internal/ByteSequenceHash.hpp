// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: ByteSequenceHash
  class ByteSequenceHash;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Internal::ByteSequenceHash);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::ByteSequenceHash*, "VYaml.Internal", "ByteSequenceHash");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Internal.ByteSequenceHash
  // [TokenAttribute] Offset: FFFFFFFF
  class ByteSequenceHash : public ::Il2CppObject {
    public:
    // static public System.Int32 GetHashCode(System.ReadOnlySpan`1<System.Byte> span)
    // Offset: 0x573E588
    static int GetHashCode(::System::ReadOnlySpan_1<uint8_t> span);
  }; // VYaml.Internal.ByteSequenceHash
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::ByteSequenceHash::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<uint8_t>)>(&VYaml::Internal::ByteSequenceHash::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::ByteSequenceHash*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
