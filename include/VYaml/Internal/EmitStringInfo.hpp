// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Emitter
namespace VYaml::Emitter {
  // Forward declaring type: ScalarStyle
  struct ScalarStyle;
}
// Completed forward declares
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Forward declaring type: EmitStringInfo
  struct EmitStringInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Internal::EmitStringInfo, "VYaml.Internal", "EmitStringInfo");
// Type namespace: VYaml.Internal
namespace VYaml::Internal {
  // Size: 0x6
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VYaml.Internal.EmitStringInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct EmitStringInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Int32 Lines
    // Size: 0x4
    // Offset: 0x0
    int Lines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Boolean NeedsQuotes
    // Size: 0x1
    // Offset: 0x4
    bool NeedsQuotes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean IsReservedWord
    // Size: 0x1
    // Offset: 0x5
    bool IsReservedWord;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: EmitStringInfo
    constexpr EmitStringInfo(int Lines_ = {}, bool NeedsQuotes_ = {}, bool IsReservedWord_ = {}) noexcept : Lines{Lines_}, NeedsQuotes{NeedsQuotes_}, IsReservedWord{IsReservedWord_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Int32 Lines
    [[deprecated("Use field access instead!")]] int& dyn_Lines();
    // Get instance field reference: public readonly System.Boolean NeedsQuotes
    [[deprecated("Use field access instead!")]] bool& dyn_NeedsQuotes();
    // Get instance field reference: public readonly System.Boolean IsReservedWord
    [[deprecated("Use field access instead!")]] bool& dyn_IsReservedWord();
    // public System.Void .ctor(System.Int32 lines, System.Boolean needsQuotes, System.Boolean isReservedWord)
    // Offset: 0x573E5F4
    // ABORTED: conflicts with another method.  EmitStringInfo(int lines, bool needsQuotes, bool isReservedWord);
    // public VYaml.Emitter.ScalarStyle SuggestScalarStyle()
    // Offset: 0x573E60C
    ::VYaml::Emitter::ScalarStyle SuggestScalarStyle();
  }; // VYaml.Internal.EmitStringInfo
  #pragma pack(pop)
  static check_size<sizeof(EmitStringInfo), 5 + sizeof(bool)> __VYaml_Internal_EmitStringInfoSizeCheck;
  static_assert(sizeof(EmitStringInfo) == 0x6);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Internal::EmitStringInfo::EmitStringInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Internal::EmitStringInfo::SuggestScalarStyle
// Il2CppName: SuggestScalarStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Emitter::ScalarStyle (VYaml::Internal::EmitStringInfo::*)()>(&VYaml::Internal::EmitStringInfo::SuggestScalarStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Internal::EmitStringInfo), "SuggestScalarStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
