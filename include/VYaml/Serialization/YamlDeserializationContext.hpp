// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VYaml.Parser.YamlParser
#include "VYaml/Parser/YamlParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlSerializerOptions
  class YamlSerializerOptions;
  // Forward declaring type: IYamlFormatterResolver
  class IYamlFormatterResolver;
  // Forward declaring type: IYamlFormatter`1<T>
  template<typename T>
  class IYamlFormatter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: VYaml::Parser
namespace VYaml::Parser {
  // Forward declaring type: Anchor
  class Anchor;
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlDeserializationContext
  class YamlDeserializationContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::YamlDeserializationContext);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::YamlDeserializationContext*, "VYaml.Serialization", "YamlDeserializationContext");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.YamlDeserializationContext
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class YamlDeserializationContext : public ::Il2CppObject {
    public:
    public:
    // private VYaml.Serialization.YamlSerializerOptions <Options>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::VYaml::Serialization::YamlSerializerOptions* Options;
    // Field size check
    static_assert(sizeof(::VYaml::Serialization::YamlSerializerOptions*) == 0x8);
    // private VYaml.Serialization.IYamlFormatterResolver <Resolver>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::VYaml::Serialization::IYamlFormatterResolver* Resolver;
    // Field size check
    static_assert(sizeof(::VYaml::Serialization::IYamlFormatterResolver*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<VYaml.Parser.Anchor,System.Object> aliases
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::VYaml::Parser::Anchor*, ::Il2CppObject*>* aliases;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::VYaml::Parser::Anchor*, ::Il2CppObject*>*) == 0x8);
    public:
    // Get instance field reference: private VYaml.Serialization.YamlSerializerOptions <Options>k__BackingField
    [[deprecated("Use field access instead!")]] ::VYaml::Serialization::YamlSerializerOptions*& dyn_$Options$k__BackingField();
    // Get instance field reference: private VYaml.Serialization.IYamlFormatterResolver <Resolver>k__BackingField
    [[deprecated("Use field access instead!")]] ::VYaml::Serialization::IYamlFormatterResolver*& dyn_$Resolver$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<VYaml.Parser.Anchor,System.Object> aliases
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::VYaml::Parser::Anchor*, ::Il2CppObject*>*& dyn_aliases();
    // public VYaml.Serialization.YamlSerializerOptions get_Options()
    // Offset: 0x57308FC
    ::VYaml::Serialization::YamlSerializerOptions* get_Options();
    // public System.Void set_Options(VYaml.Serialization.YamlSerializerOptions value)
    // Offset: 0x5730904
    void set_Options(::VYaml::Serialization::YamlSerializerOptions* value);
    // public VYaml.Serialization.IYamlFormatterResolver get_Resolver()
    // Offset: 0x573090C
    ::VYaml::Serialization::IYamlFormatterResolver* get_Resolver();
    // public System.Void set_Resolver(VYaml.Serialization.IYamlFormatterResolver value)
    // Offset: 0x5730914
    void set_Resolver(::VYaml::Serialization::IYamlFormatterResolver* value);
    // public System.Void .ctor(VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0x573091C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlDeserializationContext* New_ctor(::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlDeserializationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlDeserializationContext*, creationType>(options)));
    }
    // public System.Void Reset()
    // Offset: 0x57309D0
    void Reset();
    // public T DeserializeWithAlias(ref VYaml.Parser.YamlParser parser)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T DeserializeWithAlias(ByRef<::VYaml::Parser::YamlParser> parser) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlDeserializationContext::DeserializeWithAlias");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeWithAlias", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, byref(parser));
    }
    // public T DeserializeWithAlias(VYaml.Serialization.IYamlFormatter`1<T> innerFormatter, ref VYaml.Parser.YamlParser parser)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T DeserializeWithAlias(::VYaml::Serialization::IYamlFormatter_1<T>* innerFormatter, ByRef<::VYaml::Parser::YamlParser> parser) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlDeserializationContext::DeserializeWithAlias");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeWithAlias", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerFormatter), ::il2cpp_utils::ExtractType(parser)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, innerFormatter, byref(parser));
    }
    // private System.Void RegisterAnchor(VYaml.Parser.Anchor anchor, System.Object value)
    // Offset: 0x5730A20
    void RegisterAnchor(::VYaml::Parser::Anchor* anchor, ::Il2CppObject* value);
    // private System.Boolean TryResolveCurrentAlias(ref VYaml.Parser.YamlParser parser, out T aliasValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryResolveCurrentAlias(ByRef<::VYaml::Parser::YamlParser> parser, ByRef<T> aliasValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlDeserializationContext::TryResolveCurrentAlias");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryResolveCurrentAlias", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(parser), byref(aliasValue));
    }
  }; // VYaml.Serialization.YamlDeserializationContext
  #pragma pack(pop)
  static check_size<sizeof(YamlDeserializationContext), 32 + sizeof(::System::Collections::Generic::Dictionary_2<::VYaml::Parser::Anchor*, ::Il2CppObject*>*)> __VYaml_Serialization_YamlDeserializationContextSizeCheck;
  static_assert(sizeof(YamlDeserializationContext) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::get_Options
// Il2CppName: get_Options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::YamlSerializerOptions* (VYaml::Serialization::YamlDeserializationContext::*)()>(&VYaml::Serialization::YamlDeserializationContext::get_Options)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "get_Options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::set_Options
// Il2CppName: set_Options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::YamlDeserializationContext::*)(::VYaml::Serialization::YamlSerializerOptions*)>(&VYaml::Serialization::YamlDeserializationContext::set_Options)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "YamlSerializerOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "set_Options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::get_Resolver
// Il2CppName: get_Resolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::IYamlFormatterResolver* (VYaml::Serialization::YamlDeserializationContext::*)()>(&VYaml::Serialization::YamlDeserializationContext::get_Resolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "get_Resolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::set_Resolver
// Il2CppName: set_Resolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::YamlDeserializationContext::*)(::VYaml::Serialization::IYamlFormatterResolver*)>(&VYaml::Serialization::YamlDeserializationContext::set_Resolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatterResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "set_Resolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::YamlDeserializationContext::*)()>(&VYaml::Serialization::YamlDeserializationContext::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::DeserializeWithAlias
// Il2CppName: DeserializeWithAlias
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::DeserializeWithAlias
// Il2CppName: DeserializeWithAlias
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::RegisterAnchor
// Il2CppName: RegisterAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::YamlDeserializationContext::*)(::VYaml::Parser::Anchor*, ::Il2CppObject*)>(&VYaml::Serialization::YamlDeserializationContext::RegisterAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("VYaml.Parser", "Anchor")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlDeserializationContext*), "RegisterAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, value});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlDeserializationContext::TryResolveCurrentAlias
// Il2CppName: TryResolveCurrentAlias
// Cannot write MetadataGetter for generic methods!
