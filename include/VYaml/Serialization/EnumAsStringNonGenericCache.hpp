// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: EnumAsStringNonGenericCache
  class EnumAsStringNonGenericCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::EnumAsStringNonGenericCache);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::EnumAsStringNonGenericCache*, "VYaml.Serialization", "EnumAsStringNonGenericCache");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.EnumAsStringNonGenericCache
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class EnumAsStringNonGenericCache : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Object,System.String> stringValues
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Concurrent::ConcurrentDictionary_2<::Il2CppObject*, ::StringW>* stringValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentDictionary_2<::Il2CppObject*, ::StringW>*) == 0x8);
    // private readonly System.Func`3<System.Object,System.Type,System.String> valueFactory
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_3<::Il2CppObject*, ::System::Type*, ::StringW>* valueFactory;
    // Field size check
    static_assert(sizeof(::System::Func_3<::Il2CppObject*, ::System::Type*, ::StringW>*) == 0x8);
    public:
    // Get static field: static public readonly VYaml.Serialization.EnumAsStringNonGenericCache Instance
    static ::VYaml::Serialization::EnumAsStringNonGenericCache* _get_Instance();
    // Set static field: static public readonly VYaml.Serialization.EnumAsStringNonGenericCache Instance
    static void _set_Instance(::VYaml::Serialization::EnumAsStringNonGenericCache* value);
    // Get instance field reference: private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Object,System.String> stringValues
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentDictionary_2<::Il2CppObject*, ::StringW>*& dyn_stringValues();
    // Get instance field reference: private readonly System.Func`3<System.Object,System.Type,System.String> valueFactory
    [[deprecated("Use field access instead!")]] ::System::Func_3<::Il2CppObject*, ::System::Type*, ::StringW>*& dyn_valueFactory();
    // public System.String GetStringValue(System.Type type, System.Object value)
    // Offset: 0x5728D3C
    ::StringW GetStringValue(::System::Type* type, ::Il2CppObject* value);
    // static private System.String CreateValue(System.Object value, System.Type type)
    // Offset: 0x5728DE8
    static ::StringW CreateValue(::Il2CppObject* value, ::System::Type* type);
    // public System.Void .ctor()
    // Offset: 0x5728F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumAsStringNonGenericCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::EnumAsStringNonGenericCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumAsStringNonGenericCache*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x572901C
    static void _cctor();
  }; // VYaml.Serialization.EnumAsStringNonGenericCache
  #pragma pack(pop)
  static check_size<sizeof(EnumAsStringNonGenericCache), 24 + sizeof(::System::Func_3<::Il2CppObject*, ::System::Type*, ::StringW>*)> __VYaml_Serialization_EnumAsStringNonGenericCacheSizeCheck;
  static_assert(sizeof(EnumAsStringNonGenericCache) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::EnumAsStringNonGenericCache::GetStringValue
// Il2CppName: GetStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VYaml::Serialization::EnumAsStringNonGenericCache::*)(::System::Type*, ::Il2CppObject*)>(&VYaml::Serialization::EnumAsStringNonGenericCache::GetStringValue)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::EnumAsStringNonGenericCache*), "GetStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, value});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::EnumAsStringNonGenericCache::CreateValue
// Il2CppName: CreateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*, ::System::Type*)>(&VYaml::Serialization::EnumAsStringNonGenericCache::CreateValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::EnumAsStringNonGenericCache*), "CreateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::EnumAsStringNonGenericCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Serialization::EnumAsStringNonGenericCache::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Serialization::EnumAsStringNonGenericCache::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::EnumAsStringNonGenericCache*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
