// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: VYaml::Serialization
namespace VYaml::Serialization {
  // Forward declaring type: IYamlFormatterResolver
  class IYamlFormatterResolver;
  // Forward declaring type: IYamlFormatter
  class IYamlFormatter;
  // Forward declaring type: IYamlFormatter`1<T>
  template<typename T>
  class IYamlFormatter_1;
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlFormatterResolverExtensions
  class YamlFormatterResolverExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::YamlFormatterResolverExtensions);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::YamlFormatterResolverExtensions*, "VYaml.Serialization", "YamlFormatterResolverExtensions");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.YamlFormatterResolverExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class YamlFormatterResolverExtensions : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Func`2<VYaml.Serialization.IYamlFormatterResolver,VYaml.Serialization.IYamlFormatter>> FormatterGetters
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Func_2<::VYaml::Serialization::IYamlFormatterResolver*, ::VYaml::Serialization::IYamlFormatter*>*>* _get_FormatterGetters();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Func`2<VYaml.Serialization.IYamlFormatterResolver,VYaml.Serialization.IYamlFormatter>> FormatterGetters
    static void _set_FormatterGetters(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Func_2<::VYaml::Serialization::IYamlFormatterResolver*, ::VYaml::Serialization::IYamlFormatter*>*>* value);
    // static public VYaml.Serialization.IYamlFormatter`1<T> GetFormatterWithVerify(VYaml.Serialization.IYamlFormatterResolver resolver)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::VYaml::Serialization::IYamlFormatter_1<T>* GetFormatterWithVerify(::VYaml::Serialization::IYamlFormatterResolver* resolver) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlFormatterResolverExtensions::GetFormatterWithVerify");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlFormatterResolverExtensions", "GetFormatterWithVerify", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resolver)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::VYaml::Serialization::IYamlFormatter_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, resolver);
    }
    // static private System.Void Throw(System.Type t, VYaml.Serialization.IYamlFormatterResolver resolver)
    // Offset: 0x572D8C8
    static void Throw(::System::Type* t, ::VYaml::Serialization::IYamlFormatterResolver* resolver);
    // static private System.Void .cctor()
    // Offset: 0x572D970
    static void _cctor();
  }; // VYaml.Serialization.YamlFormatterResolverExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::YamlFormatterResolverExtensions::GetFormatterWithVerify
// Il2CppName: GetFormatterWithVerify
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlFormatterResolverExtensions::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ::VYaml::Serialization::IYamlFormatterResolver*)>(&VYaml::Serialization::YamlFormatterResolverExtensions::Throw)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* resolver = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatterResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlFormatterResolverExtensions*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, resolver});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlFormatterResolverExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Serialization::YamlFormatterResolverExtensions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlFormatterResolverExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
