// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: VYaml.Parser.Marker
#include "VYaml/Parser/Marker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlSerializerException
  class YamlSerializerException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::YamlSerializerException);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::YamlSerializerException*, "VYaml.Serialization", "YamlSerializerException");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.YamlSerializerException
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class YamlSerializerException : public ::System::Exception {
    public:
    // static public System.Void ThrowInvalidType(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ThrowInvalidType(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializerException::ThrowInvalidType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializerException", "ThrowInvalidType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public System.Void ThrowInvalidType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ThrowInvalidType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializerException::ThrowInvalidType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializerException", "ThrowInvalidType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // public System.Void .ctor(System.String message)
    // Offset: 0x5727E5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlSerializerException* New_ctor(::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializerException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlSerializerException*, creationType>(message)));
    }
    // public System.Void .ctor(VYaml.Parser.Marker mark, System.String message)
    // Offset: 0x5730A88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlSerializerException* New_ctor(::VYaml::Parser::Marker mark, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializerException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlSerializerException*, creationType>(mark, message)));
    }
  }; // VYaml.Serialization.YamlSerializerException
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializerException::ThrowInvalidType
// Il2CppName: ThrowInvalidType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializerException::ThrowInvalidType
// Il2CppName: ThrowInvalidType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializerException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializerException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
