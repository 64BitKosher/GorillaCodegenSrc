// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VYaml.Serialization.IYamlFormatterResolver
#include "VYaml/Serialization/IYamlFormatterResolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Serialization
namespace VYaml::Serialization {
  // Forward declaring type: IYamlFormatter`1<T>
  template<typename T>
  class IYamlFormatter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: BuiltinResolver
  class BuiltinResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::BuiltinResolver);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::BuiltinResolver*, "VYaml.Serialization", "BuiltinResolver");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.BuiltinResolver
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class BuiltinResolver : public ::Il2CppObject/*, public ::VYaml::Serialization::IYamlFormatterResolver*/ {
    public:
    // Nested type: ::VYaml::Serialization::BuiltinResolver::FormatterCache_1<T>
    template<typename T>
    class FormatterCache_1;
    // Creating interface conversion operator: operator ::VYaml::Serialization::IYamlFormatterResolver
    operator ::VYaml::Serialization::IYamlFormatterResolver() noexcept {
      return *reinterpret_cast<::VYaml::Serialization::IYamlFormatterResolver*>(this);
    }
    // Get static field: static public readonly VYaml.Serialization.BuiltinResolver Instance
    static ::VYaml::Serialization::BuiltinResolver* _get_Instance();
    // Set static field: static public readonly VYaml.Serialization.BuiltinResolver Instance
    static void _set_Instance(::VYaml::Serialization::BuiltinResolver* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Object> FormatterMap
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Il2CppObject*>* _get_FormatterMap();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Object> FormatterMap
    static void _set_FormatterMap(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Il2CppObject*>* value);
    // Get static field: static public readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type> KnownGenericTypes
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>* _get_KnownGenericTypes();
    // Set static field: static public readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type> KnownGenericTypes
    static void _set_KnownGenericTypes(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>* value);
    // public VYaml.Serialization.IYamlFormatter`1<T> GetFormatter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::VYaml::Serialization::IYamlFormatter_1<T>* GetFormatter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::BuiltinResolver::GetFormatter");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VYaml::Serialization::BuiltinResolver*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::VYaml::Serialization::IYamlFormatter_1<T>*, false>(this, ___generic__method);
    }
    // static private System.Object TryCreateGenericFormatter(System.Type type)
    // Offset: 0x572DA08
    static ::Il2CppObject* TryCreateGenericFormatter(::System::Type* type);
    // static private System.Type TryCreateGenericFormatterType(System.Type type, System.Collections.Generic.IDictionary`2<System.Type,System.Type> knownTypes)
    // Offset: 0x572DC64
    static ::System::Type* TryCreateGenericFormatterType(::System::Type* type, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Type*>* knownTypes);
    // public System.Void .ctor()
    // Offset: 0x572DD94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuiltinResolver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::BuiltinResolver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuiltinResolver*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x572DD9C
    static void _cctor();
  }; // VYaml.Serialization.BuiltinResolver
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::BuiltinResolver::GetFormatter
// Il2CppName: GetFormatter
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::BuiltinResolver::TryCreateGenericFormatter
// Il2CppName: TryCreateGenericFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*)>(&VYaml::Serialization::BuiltinResolver::TryCreateGenericFormatter)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::BuiltinResolver*), "TryCreateGenericFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::BuiltinResolver::TryCreateGenericFormatterType
// Il2CppName: TryCreateGenericFormatterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Type*>*)>(&VYaml::Serialization::BuiltinResolver::TryCreateGenericFormatterType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* knownTypes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type"), ::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::BuiltinResolver*), "TryCreateGenericFormatterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, knownTypes});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::BuiltinResolver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Serialization::BuiltinResolver::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Serialization::BuiltinResolver::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::BuiltinResolver*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
