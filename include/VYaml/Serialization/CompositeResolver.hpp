// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VYaml.Serialization.IYamlFormatterResolver
#include "VYaml/Serialization/IYamlFormatterResolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: VYaml::Serialization
namespace VYaml::Serialization {
  // Forward declaring type: IYamlFormatter
  class IYamlFormatter;
  // Forward declaring type: IYamlFormatter`1<T>
  template<typename T>
  class IYamlFormatter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: CompositeResolver
  class CompositeResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::CompositeResolver);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::CompositeResolver*, "VYaml.Serialization", "CompositeResolver");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.CompositeResolver
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class CompositeResolver : public ::Il2CppObject/*, public ::VYaml::Serialization::IYamlFormatterResolver*/ {
    public:
    public:
    // private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,VYaml.Serialization.IYamlFormatter> formattersCache
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::VYaml::Serialization::IYamlFormatter*>* formattersCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::VYaml::Serialization::IYamlFormatter*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatter> formatters
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatter*>* formatters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatter*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatterResolver> resolvers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatterResolver*>* resolvers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatterResolver*>*) == 0x8);
    // private readonly System.Object gate
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* gate;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VYaml::Serialization::IYamlFormatterResolver
    operator ::VYaml::Serialization::IYamlFormatterResolver() noexcept {
      return *reinterpret_cast<::VYaml::Serialization::IYamlFormatterResolver*>(this);
    }
    // Get instance field reference: private readonly System.Collections.Concurrent.ConcurrentDictionary`2<System.Type,VYaml.Serialization.IYamlFormatter> formattersCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Type*, ::VYaml::Serialization::IYamlFormatter*>*& dyn_formattersCache();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatter> formatters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatter*>*& dyn_formatters();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatterResolver> resolvers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatterResolver*>*& dyn_resolvers();
    // Get instance field reference: private readonly System.Object gate
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_gate();
    // static public VYaml.Serialization.CompositeResolver Create(System.Collections.Generic.IEnumerable`1<VYaml.Serialization.IYamlFormatter> formatters, System.Collections.Generic.IEnumerable`1<VYaml.Serialization.IYamlFormatterResolver> resolvers)
    // Offset: 0x572FFF0
    static ::VYaml::Serialization::CompositeResolver* Create(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatter*>* formatters, ::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatterResolver*>* resolvers);
    // static public VYaml.Serialization.CompositeResolver Create(System.Collections.Generic.IEnumerable`1<VYaml.Serialization.IYamlFormatter> formatters)
    // Offset: 0x573021C
    static ::VYaml::Serialization::CompositeResolver* Create(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatter*>* formatters);
    // static public VYaml.Serialization.CompositeResolver Create(System.Collections.Generic.IEnumerable`1<VYaml.Serialization.IYamlFormatterResolver> resolvers)
    // Offset: 0x57302A8
    static ::VYaml::Serialization::CompositeResolver* Create(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatterResolver*>* resolvers);
    // private System.Void .ctor(System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatter> formatters, System.Collections.Generic.List`1<VYaml.Serialization.IYamlFormatterResolver> resolvers)
    // Offset: 0x57300AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompositeResolver* New_ctor(::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatter*>* formatters, ::System::Collections::Generic::List_1<::VYaml::Serialization::IYamlFormatterResolver*>* resolvers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::CompositeResolver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompositeResolver*, creationType>(formatters, resolvers)));
    }
    // public VYaml.Serialization.IYamlFormatter`1<T> GetFormatter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::VYaml::Serialization::IYamlFormatter_1<T>* GetFormatter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::CompositeResolver::GetFormatter");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VYaml::Serialization::CompositeResolver*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::VYaml::Serialization::IYamlFormatter_1<T>*, false>(this, ___generic__method);
    }
    // public System.Void AddFormatter(VYaml.Serialization.IYamlFormatter formatter)
    // Offset: 0x5730334
    void AddFormatter(::VYaml::Serialization::IYamlFormatter* formatter);
    // public System.Void AddResolver(VYaml.Serialization.IYamlFormatterResolver resolver)
    // Offset: 0x5730484
    void AddResolver(::VYaml::Serialization::IYamlFormatterResolver* resolver);
  }; // VYaml.Serialization.CompositeResolver
  #pragma pack(pop)
  static check_size<sizeof(CompositeResolver), 40 + sizeof(::Il2CppObject*)> __VYaml_Serialization_CompositeResolverSizeCheck;
  static_assert(sizeof(CompositeResolver) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::CompositeResolver* (*)(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatter*>*, ::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatterResolver*>*)>(&VYaml::Serialization::CompositeResolver::Create)> {
  static const MethodInfo* get() {
    static auto* formatters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatter")})->byval_arg;
    static auto* resolvers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatterResolver")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::CompositeResolver*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatters, resolvers});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::CompositeResolver* (*)(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatter*>*)>(&VYaml::Serialization::CompositeResolver::Create)> {
  static const MethodInfo* get() {
    static auto* formatters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatter")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::CompositeResolver*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatters});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::CompositeResolver* (*)(::System::Collections::Generic::IEnumerable_1<::VYaml::Serialization::IYamlFormatterResolver*>*)>(&VYaml::Serialization::CompositeResolver::Create)> {
  static const MethodInfo* get() {
    static auto* resolvers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatterResolver")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::CompositeResolver*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolvers});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::GetFormatter
// Il2CppName: GetFormatter
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::AddFormatter
// Il2CppName: AddFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::CompositeResolver::*)(::VYaml::Serialization::IYamlFormatter*)>(&VYaml::Serialization::CompositeResolver::AddFormatter)> {
  static const MethodInfo* get() {
    static auto* formatter = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::CompositeResolver*), "AddFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatter});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::CompositeResolver::AddResolver
// Il2CppName: AddResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Serialization::CompositeResolver::*)(::VYaml::Serialization::IYamlFormatterResolver*)>(&VYaml::Serialization::CompositeResolver::AddResolver)> {
  static const MethodInfo* get() {
    static auto* resolver = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "IYamlFormatterResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::CompositeResolver*), "AddResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolver});
  }
};
