// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ReadOnlyMemory`1
#include "System/ReadOnlyMemory_1.hpp"
// Including type: VYaml.Emitter.Utf8YamlEmitter
#include "VYaml/Emitter/Utf8YamlEmitter.hpp"
// Including type: System.Buffers.ReadOnlySequence`1
#include "System/Buffers/ReadOnlySequence_1.hpp"
// Including type: System.Threading.Tasks.ValueTask`1
#include "System/Threading/Tasks/ValueTask_1.hpp"
// Including type: VYaml.Parser.YamlParser
#include "VYaml/Parser/YamlParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VYaml::Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlDeserializationContext
  class YamlDeserializationContext;
  // Forward declaring type: YamlSerializationContext
  class YamlSerializationContext;
  // Forward declaring type: YamlSerializerOptions
  class YamlSerializerOptions;
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: IBufferWriter`1<T>
  template<typename T>
  class IBufferWriter_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerable`1 because it is already included!
}
// Completed forward declares
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Forward declaring type: YamlSerializer
  class YamlSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Serialization::YamlSerializer);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Serialization::YamlSerializer*, "VYaml.Serialization", "YamlSerializer");
// Type namespace: VYaml.Serialization
namespace VYaml::Serialization {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Serialization.YamlSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class YamlSerializer : public ::Il2CppObject {
    public:
    // Nested type: ::VYaml::Serialization::YamlSerializer::$DeserializeAsync$d__14_1<T>
    template<typename T>
    struct $DeserializeAsync$d__14_1;
    // Nested type: ::VYaml::Serialization::YamlSerializer::$DeserializeMultipleDocumentsAsync$d__16_1<T>
    template<typename T>
    struct $DeserializeMultipleDocumentsAsync$d__16_1;
    // Get static field: static private VYaml.Serialization.YamlDeserializationContext deserializationContext
    static ::VYaml::Serialization::YamlDeserializationContext* _get_deserializationContext();
    // Set static field: static private VYaml.Serialization.YamlDeserializationContext deserializationContext
    static void _set_deserializationContext(::VYaml::Serialization::YamlDeserializationContext* value);
    // Get static field: static private VYaml.Serialization.YamlSerializationContext serializationContext
    static ::VYaml::Serialization::YamlSerializationContext* _get_serializationContext();
    // Set static field: static private VYaml.Serialization.YamlSerializationContext serializationContext
    static void _set_serializationContext(::VYaml::Serialization::YamlSerializationContext* value);
    // Get static field: static private VYaml.Serialization.YamlSerializerOptions defaultOptions
    static ::VYaml::Serialization::YamlSerializerOptions* _get_defaultOptions();
    // Set static field: static private VYaml.Serialization.YamlSerializerOptions defaultOptions
    static void _set_defaultOptions(::VYaml::Serialization::YamlSerializerOptions* value);
    // static private VYaml.Serialization.YamlDeserializationContext GetThreadLocalDeserializationContext(VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0x5730B70
    static ::VYaml::Serialization::YamlDeserializationContext* GetThreadLocalDeserializationContext(::VYaml::Serialization::YamlSerializerOptions* options);
    // static private VYaml.Serialization.YamlSerializationContext GetThreadLocalSerializationContext(VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0x5730CA4
    static ::VYaml::Serialization::YamlSerializationContext* GetThreadLocalSerializationContext(::VYaml::Serialization::YamlSerializerOptions* options);
    // static public VYaml.Serialization.YamlSerializerOptions get_DefaultOptions()
    // Offset: 0x5730C30
    static ::VYaml::Serialization::YamlSerializerOptions* get_DefaultOptions();
    // static public System.Void set_DefaultOptions(VYaml.Serialization.YamlSerializerOptions value)
    // Offset: 0x5730E0C
    static void set_DefaultOptions(::VYaml::Serialization::YamlSerializerOptions* value);
    // static public System.ReadOnlyMemory`1<System.Byte> Serialize(T value, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::ReadOnlyMemory_1<uint8_t> Serialize(T value, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Serialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Serialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlyMemory_1<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value, options);
    }
    // static public System.Void Serialize(System.Buffers.IBufferWriter`1<System.Byte> writer, T value, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Serialize(::System::Buffers::IBufferWriter_1<uint8_t>* writer, T value, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Serialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Serialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, writer, value, options);
    }
    // static public System.Void Serialize(ref VYaml.Emitter.Utf8YamlEmitter emitter, T value, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Serialize(ByRef<::VYaml::Emitter::Utf8YamlEmitter> emitter, T value, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Serialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Serialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(emitter), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(emitter), value, options);
    }
    // static public System.String SerializeToString(T value, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW SerializeToString(T value, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::SerializeToString");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "SerializeToString", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value, options);
    }
    // static public T Deserialize(System.ReadOnlyMemory`1<System.Byte> memory, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Deserialize(::System::ReadOnlyMemory_1<uint8_t> memory, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Deserialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Deserialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, memory, options);
    }
    // static public T Deserialize(in System.Buffers.ReadOnlySequence`1<System.Byte> sequence, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Deserialize(ByRef<::System::Buffers::ReadOnlySequence_1<uint8_t>> sequence, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Deserialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Deserialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequence), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(sequence), options);
    }
    // static public System.Threading.Tasks.ValueTask`1<T> DeserializeAsync(System.IO.Stream stream, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Threading::Tasks::ValueTask_1<T> DeserializeAsync(::System::IO::Stream* stream, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::DeserializeAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "DeserializeAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::ValueTask_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, stream, options);
    }
    // static public T Deserialize(ref VYaml.Parser.YamlParser parser, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Deserialize(ByRef<::VYaml::Parser::YamlParser> parser, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::Deserialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "Deserialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(parser), options);
    }
    // static public System.Threading.Tasks.ValueTask`1<System.Collections.Generic.IEnumerable`1<T>> DeserializeMultipleDocumentsAsync(System.IO.Stream stream, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Threading::Tasks::ValueTask_1<::System::Collections::Generic::IEnumerable_1<T>*> DeserializeMultipleDocumentsAsync(::System::IO::Stream* stream, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::DeserializeMultipleDocumentsAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "DeserializeMultipleDocumentsAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::ValueTask_1<::System::Collections::Generic::IEnumerable_1<T>*>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, stream, options);
    }
    // static public System.Collections.Generic.IEnumerable`1<T> DeserializeMultipleDocuments(System.ReadOnlyMemory`1<System.Byte> memory, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::IEnumerable_1<T>* DeserializeMultipleDocuments(::System::ReadOnlyMemory_1<uint8_t> memory, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "DeserializeMultipleDocuments", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, memory, options);
    }
    // static public System.Collections.Generic.IEnumerable`1<T> DeserializeMultipleDocuments(in System.Buffers.ReadOnlySequence`1<System.Byte> sequence, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::IEnumerable_1<T>* DeserializeMultipleDocuments(ByRef<::System::Buffers::ReadOnlySequence_1<uint8_t>> sequence, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "DeserializeMultipleDocuments", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequence), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(sequence), options);
    }
    // static public System.Collections.Generic.IEnumerable`1<T> DeserializeMultipleDocuments(ref VYaml.Parser.YamlParser parser, VYaml.Serialization.YamlSerializerOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::IEnumerable_1<T>* DeserializeMultipleDocuments(ByRef<::VYaml::Parser::YamlParser> parser, ::VYaml::Serialization::YamlSerializerOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VYaml.Serialization", "YamlSerializer", "DeserializeMultipleDocuments", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(options)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(parser), options);
    }
  }; // VYaml.Serialization.YamlSerializer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::GetThreadLocalDeserializationContext
// Il2CppName: GetThreadLocalDeserializationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::YamlDeserializationContext* (*)(::VYaml::Serialization::YamlSerializerOptions*)>(&VYaml::Serialization::YamlSerializer::GetThreadLocalDeserializationContext)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "YamlSerializerOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlSerializer*), "GetThreadLocalDeserializationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::GetThreadLocalSerializationContext
// Il2CppName: GetThreadLocalSerializationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::YamlSerializationContext* (*)(::VYaml::Serialization::YamlSerializerOptions*)>(&VYaml::Serialization::YamlSerializer::GetThreadLocalSerializationContext)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "YamlSerializerOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlSerializer*), "GetThreadLocalSerializationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::get_DefaultOptions
// Il2CppName: get_DefaultOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Serialization::YamlSerializerOptions* (*)()>(&VYaml::Serialization::YamlSerializer::get_DefaultOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlSerializer*), "get_DefaultOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::set_DefaultOptions
// Il2CppName: set_DefaultOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::VYaml::Serialization::YamlSerializerOptions*)>(&VYaml::Serialization::YamlSerializer::set_DefaultOptions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VYaml.Serialization", "YamlSerializerOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Serialization::YamlSerializer*), "set_DefaultOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Serialize
// Il2CppName: Serialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Serialize
// Il2CppName: Serialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Serialize
// Il2CppName: Serialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::SerializeToString
// Il2CppName: SerializeToString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Deserialize
// Il2CppName: Deserialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Deserialize
// Il2CppName: Deserialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::DeserializeAsync
// Il2CppName: DeserializeAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::Deserialize
// Il2CppName: Deserialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::DeserializeMultipleDocumentsAsync
// Il2CppName: DeserializeMultipleDocumentsAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments
// Il2CppName: DeserializeMultipleDocuments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments
// Il2CppName: DeserializeMultipleDocuments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: VYaml::Serialization::YamlSerializer::DeserializeMultipleDocuments
// Il2CppName: DeserializeMultipleDocuments
// Cannot write MetadataGetter for generic methods!
