// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VYaml.Emitter
namespace VYaml::Emitter {
  // Forward declaring type: YamlEmitOptions
  class YamlEmitOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VYaml::Emitter::YamlEmitOptions);
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Emitter::YamlEmitOptions*, "VYaml.Emitter", "YamlEmitOptions");
// Type namespace: VYaml.Emitter
namespace VYaml::Emitter {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: VYaml.Emitter.YamlEmitOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class YamlEmitOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <IndentWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int IndentWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return IndentWidth;
    }
    // Get static field: static public readonly VYaml.Emitter.YamlEmitOptions Default
    static ::VYaml::Emitter::YamlEmitOptions* _get_Default();
    // Set static field: static public readonly VYaml.Emitter.YamlEmitOptions Default
    static void _set_Default(::VYaml::Emitter::YamlEmitOptions* value);
    // Get instance field reference: private System.Int32 <IndentWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$IndentWidth$k__BackingField();
    // public System.Int32 get_IndentWidth()
    // Offset: 0x574A000
    int get_IndentWidth();
    // public System.Void set_IndentWidth(System.Int32 value)
    // Offset: 0x574A008
    void set_IndentWidth(int value);
    // public System.Void .ctor()
    // Offset: 0x574A010
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static YamlEmitOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VYaml::Emitter::YamlEmitOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<YamlEmitOptions*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x574A020
    static void _cctor();
  }; // VYaml.Emitter.YamlEmitOptions
  #pragma pack(pop)
  static check_size<sizeof(YamlEmitOptions), 16 + sizeof(int)> __VYaml_Emitter_YamlEmitOptionsSizeCheck;
  static_assert(sizeof(YamlEmitOptions) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Emitter::YamlEmitOptions::get_IndentWidth
// Il2CppName: get_IndentWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Emitter::YamlEmitOptions::*)()>(&VYaml::Emitter::YamlEmitOptions::get_IndentWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::YamlEmitOptions*), "get_IndentWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::YamlEmitOptions::set_IndentWidth
// Il2CppName: set_IndentWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::YamlEmitOptions::*)(int)>(&VYaml::Emitter::YamlEmitOptions::set_IndentWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::YamlEmitOptions*), "set_IndentWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::YamlEmitOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Emitter::YamlEmitOptions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Emitter::YamlEmitOptions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::YamlEmitOptions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
