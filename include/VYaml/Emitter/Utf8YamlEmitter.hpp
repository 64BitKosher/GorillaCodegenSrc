// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: VYaml.Emitter.EmitState
#include "VYaml/Emitter/EmitState.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: IBufferWriter`1<T>
  template<typename T>
  class IBufferWriter_1;
}
// Forward declaring namespace: VYaml::Emitter
namespace VYaml::Emitter {
  // Forward declaring type: YamlEmitOptions
  class YamlEmitOptions;
  // Forward declaring type: SequenceStyle
  struct SequenceStyle;
  // Forward declaring type: MappingStyle
  struct MappingStyle;
  // Forward declaring type: ScalarStyle
  struct ScalarStyle;
}
// Forward declaring namespace: VYaml::Internal
namespace VYaml::Internal {
  // Forward declaring type: ExpandBuffer`1<T>
  template<typename T>
  class ExpandBuffer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
// Type namespace: VYaml.Emitter
namespace VYaml::Emitter {
  // Forward declaring type: Utf8YamlEmitter
  struct Utf8YamlEmitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VYaml::Emitter::Utf8YamlEmitter, "VYaml.Emitter", "Utf8YamlEmitter");
// Type namespace: VYaml.Emitter
namespace VYaml::Emitter {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VYaml.Emitter.Utf8YamlEmitter
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  struct Utf8YamlEmitter/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Buffers.IBufferWriter`1<System.Byte> writer
    // Size: 0x8
    // Offset: 0x0
    ::System::Buffers::IBufferWriter_1<uint8_t>* writer;
    // Field size check
    static_assert(sizeof(::System::Buffers::IBufferWriter_1<uint8_t>*) == 0x8);
    // private readonly VYaml.Emitter.YamlEmitOptions options
    // Size: 0x8
    // Offset: 0x8
    ::VYaml::Emitter::YamlEmitOptions* options;
    // Field size check
    static_assert(sizeof(::VYaml::Emitter::YamlEmitOptions*) == 0x8);
    // private readonly VYaml.Internal.ExpandBuffer`1<System.Char> stringBuffer
    // Size: 0x8
    // Offset: 0x10
    ::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>* stringBuffer;
    // Field size check
    static_assert(sizeof(::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>*) == 0x8);
    // private readonly VYaml.Internal.ExpandBuffer`1<VYaml.Emitter.EmitState> stateStack
    // Size: 0x8
    // Offset: 0x18
    ::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>* stateStack;
    // Field size check
    static_assert(sizeof(::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>*) == 0x8);
    // private readonly VYaml.Internal.ExpandBuffer`1<System.Int32> elementCountStack
    // Size: 0x8
    // Offset: 0x20
    ::VYaml::Internal::ExpandBuffer_1<int>* elementCountStack;
    // Field size check
    static_assert(sizeof(::VYaml::Internal::ExpandBuffer_1<int>*) == 0x8);
    // private readonly VYaml.Internal.ExpandBuffer`1<System.String> tagStack
    // Size: 0x8
    // Offset: 0x28
    ::VYaml::Internal::ExpandBuffer_1<::StringW>* tagStack;
    // Field size check
    static_assert(sizeof(::VYaml::Internal::ExpandBuffer_1<::StringW>*) == 0x8);
    // private System.Int32 currentIndentLevel
    // Size: 0x4
    // Offset: 0x30
    int currentIndentLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentElementCount
    // Size: 0x4
    // Offset: 0x34
    int currentElementCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Utf8YamlEmitter
    constexpr Utf8YamlEmitter(::System::Buffers::IBufferWriter_1<uint8_t>* writer_ = {}, ::VYaml::Emitter::YamlEmitOptions* options_ = {}, ::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>* stringBuffer_ = {}, ::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>* stateStack_ = {}, ::VYaml::Internal::ExpandBuffer_1<int>* elementCountStack_ = {}, ::VYaml::Internal::ExpandBuffer_1<::StringW>* tagStack_ = {}, int currentIndentLevel_ = {}, int currentElementCount_ = {}) noexcept : writer{writer_}, options{options_}, stringBuffer{stringBuffer_}, stateStack{stateStack_}, elementCountStack{elementCountStack_}, tagStack{tagStack_}, currentIndentLevel{currentIndentLevel_}, currentElementCount{currentElementCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private System.Byte[] whiteSpaces
    static ::ArrayW<uint8_t> _get_whiteSpaces();
    // Set static field: static private System.Byte[] whiteSpaces
    static void _set_whiteSpaces(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] BlockSequenceEntryHeader
    static ::ArrayW<uint8_t> _get_BlockSequenceEntryHeader();
    // Set static field: static private readonly System.Byte[] BlockSequenceEntryHeader
    static void _set_BlockSequenceEntryHeader(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] FlowSequenceEmpty
    static ::ArrayW<uint8_t> _get_FlowSequenceEmpty();
    // Set static field: static private readonly System.Byte[] FlowSequenceEmpty
    static void _set_FlowSequenceEmpty(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] FlowSequenceSeparator
    static ::ArrayW<uint8_t> _get_FlowSequenceSeparator();
    // Set static field: static private readonly System.Byte[] FlowSequenceSeparator
    static void _set_FlowSequenceSeparator(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] MappingKeyFooter
    static ::ArrayW<uint8_t> _get_MappingKeyFooter();
    // Set static field: static private readonly System.Byte[] MappingKeyFooter
    static void _set_MappingKeyFooter(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] FlowMappingHeader
    static ::ArrayW<uint8_t> _get_FlowMappingHeader();
    // Set static field: static private readonly System.Byte[] FlowMappingHeader
    static void _set_FlowMappingHeader(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] FlowMappingFooter
    static ::ArrayW<uint8_t> _get_FlowMappingFooter();
    // Set static field: static private readonly System.Byte[] FlowMappingFooter
    static void _set_FlowMappingFooter(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] FlowMappingEmpty
    static ::ArrayW<uint8_t> _get_FlowMappingEmpty();
    // Set static field: static private readonly System.Byte[] FlowMappingEmpty
    static void _set_FlowMappingEmpty(::ArrayW<uint8_t> value);
    // Get static field: static private VYaml.Internal.ExpandBuffer`1<System.Char> stringBufferStatic
    static ::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>* _get_stringBufferStatic();
    // Set static field: static private VYaml.Internal.ExpandBuffer`1<System.Char> stringBufferStatic
    static void _set_stringBufferStatic(::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>* value);
    // Get static field: static private VYaml.Internal.ExpandBuffer`1<VYaml.Emitter.EmitState> stateBufferStatic
    static ::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>* _get_stateBufferStatic();
    // Set static field: static private VYaml.Internal.ExpandBuffer`1<VYaml.Emitter.EmitState> stateBufferStatic
    static void _set_stateBufferStatic(::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>* value);
    // Get static field: static private VYaml.Internal.ExpandBuffer`1<System.Int32> elementCountBufferSTatic
    static ::VYaml::Internal::ExpandBuffer_1<int>* _get_elementCountBufferSTatic();
    // Set static field: static private VYaml.Internal.ExpandBuffer`1<System.Int32> elementCountBufferSTatic
    static void _set_elementCountBufferSTatic(::VYaml::Internal::ExpandBuffer_1<int>* value);
    // Get static field: static private VYaml.Internal.ExpandBuffer`1<System.String> tagBufferStatic
    static ::VYaml::Internal::ExpandBuffer_1<::StringW>* _get_tagBufferStatic();
    // Set static field: static private VYaml.Internal.ExpandBuffer`1<System.String> tagBufferStatic
    static void _set_tagBufferStatic(::VYaml::Internal::ExpandBuffer_1<::StringW>* value);
    // Get instance field reference: private readonly System.Buffers.IBufferWriter`1<System.Byte> writer
    [[deprecated("Use field access instead!")]] ::System::Buffers::IBufferWriter_1<uint8_t>*& dyn_writer();
    // Get instance field reference: private readonly VYaml.Emitter.YamlEmitOptions options
    [[deprecated("Use field access instead!")]] ::VYaml::Emitter::YamlEmitOptions*& dyn_options();
    // Get instance field reference: private readonly VYaml.Internal.ExpandBuffer`1<System.Char> stringBuffer
    [[deprecated("Use field access instead!")]] ::VYaml::Internal::ExpandBuffer_1<::Il2CppChar>*& dyn_stringBuffer();
    // Get instance field reference: private readonly VYaml.Internal.ExpandBuffer`1<VYaml.Emitter.EmitState> stateStack
    [[deprecated("Use field access instead!")]] ::VYaml::Internal::ExpandBuffer_1<::VYaml::Emitter::EmitState>*& dyn_stateStack();
    // Get instance field reference: private readonly VYaml.Internal.ExpandBuffer`1<System.Int32> elementCountStack
    [[deprecated("Use field access instead!")]] ::VYaml::Internal::ExpandBuffer_1<int>*& dyn_elementCountStack();
    // Get instance field reference: private readonly VYaml.Internal.ExpandBuffer`1<System.String> tagStack
    [[deprecated("Use field access instead!")]] ::VYaml::Internal::ExpandBuffer_1<::StringW>*& dyn_tagStack();
    // Get instance field reference: private System.Int32 currentIndentLevel
    [[deprecated("Use field access instead!")]] int& dyn_currentIndentLevel();
    // Get instance field reference: private System.Int32 currentElementCount
    [[deprecated("Use field access instead!")]] int& dyn_currentElementCount();
    // private VYaml.Emitter.EmitState get_CurrentState()
    // Offset: 0x5744104
    ::VYaml::Emitter::EmitState get_CurrentState();
    // private VYaml.Emitter.EmitState get_PreviousState()
    // Offset: 0x574417C
    ::VYaml::Emitter::EmitState get_PreviousState();
    // private System.Boolean get_IsFirstElement()
    // Offset: 0x57441F4
    bool get_IsFirstElement();
    // public System.Void .ctor(System.Buffers.IBufferWriter`1<System.Byte> writer, VYaml.Emitter.YamlEmitOptions options)
    // Offset: 0x5744204
    Utf8YamlEmitter(::System::Buffers::IBufferWriter_1<uint8_t>* writer, ::VYaml::Emitter::YamlEmitOptions* options);
    // System.Buffers.IBufferWriter`1<System.Byte> GetWriter()
    // Offset: 0x5744578
    ::System::Buffers::IBufferWriter_1<uint8_t>* GetWriter();
    // public System.Void BeginSequence(VYaml.Emitter.SequenceStyle style)
    // Offset: 0x5744580
    void BeginSequence(::VYaml::Emitter::SequenceStyle style);
    // public System.Void EndSequence()
    // Offset: 0x5744E88
    void EndSequence();
    // public System.Void BeginMapping(VYaml.Emitter.MappingStyle style)
    // Offset: 0x5745464
    void BeginMapping(::VYaml::Emitter::MappingStyle style);
    // public System.Void EndMapping()
    // Offset: 0x5745B3C
    void EndMapping();
    // public System.Void WriteRaw(System.ReadOnlySpan`1<System.Byte> value, System.Boolean indent, System.Boolean lineBreak)
    // Offset: 0x5746264
    void WriteRaw(::System::ReadOnlySpan_1<uint8_t> value, bool indent, bool lineBreak);
    // private System.Void WriteRaw(System.ReadOnlySpan`1<System.Byte> value1, System.ReadOnlySpan`1<System.Byte> value2, System.Boolean indent, System.Boolean lineBreak)
    // Offset: 0x57464AC
    void WriteRaw(::System::ReadOnlySpan_1<uint8_t> value1, ::System::ReadOnlySpan_1<uint8_t> value2, bool indent, bool lineBreak);
    // public System.Void Tag(System.String value)
    // Offset: 0x5746748
    void Tag(::StringW value);
    // public System.Void WriteScalar(System.ReadOnlySpan`1<System.Byte> value)
    // Offset: 0x574683C
    void WriteScalar(::System::ReadOnlySpan_1<uint8_t> value);
    // public System.Void WriteNull()
    // Offset: 0x5746A60
    void WriteNull();
    // public System.Void WriteBool(System.Boolean value)
    // Offset: 0x5746AF0
    void WriteBool(bool value);
    // public System.Void WriteInt32(System.Int32 value)
    // Offset: 0x5746B9C
    void WriteInt32(int value);
    // public System.Void WriteUInt32(System.UInt32 value)
    // Offset: 0x5746E40
    void WriteUInt32(uint value);
    // public System.Void WriteInt64(System.Int64 value)
    // Offset: 0x57470E4
    void WriteInt64(int64_t value);
    // public System.Void WriteUInt64(System.UInt64 value)
    // Offset: 0x5747388
    void WriteUInt64(uint64_t value);
    // public System.Void WriteFloat(System.Single value)
    // Offset: 0x574762C
    void WriteFloat(float value);
    // public System.Void WriteDouble(System.Double value)
    // Offset: 0x57478D0
    void WriteDouble(double value);
    // public System.Void WriteString(System.String value, VYaml.Emitter.ScalarStyle style)
    // Offset: 0x5747B74
    void WriteString(::StringW value, ::VYaml::Emitter::ScalarStyle style);
    // private System.Void WritePlainScalar(System.String value)
    // Offset: 0x5747D08
    void WritePlainScalar(::StringW value);
    // private System.Void WriteLiteralScalar(System.String value)
    // Offset: 0x57483C8
    void WriteLiteralScalar(::StringW value);
    // private System.Void WriteQuotedScalar(System.String value, System.Boolean doubleQuote)
    // Offset: 0x5747FBC
    void WriteQuotedScalar(::StringW value, bool doubleQuote);
    // private System.Void WriteRaw1(System.Byte value)
    // Offset: 0x5748894
    void WriteRaw1(uint8_t value);
    // private System.Void WriteBlockSequenceEntryHeader()
    // Offset: 0x57489B8
    void WriteBlockSequenceEntryHeader();
    // private System.Void WriteBlockSequenceEntryHeader(System.Span`1<System.Byte> output, ref System.Int32 offset)
    // Offset: 0x5748B4C
    void WriteBlockSequenceEntryHeader(::System::Span_1<uint8_t> output, ByRef<int> offset);
    // private System.Void WriteIndent(System.Span`1<System.Byte> output, ref System.Int32 offset, System.Int32 forceWidth)
    // Offset: 0x5748D8C
    void WriteIndent(::System::Span_1<uint8_t> output, ByRef<int> offset, int forceWidth);
    // private System.Int32 CalculateMaxScalarBufferLength(System.Int32 length)
    // Offset: 0x5748FB0
    int CalculateMaxScalarBufferLength(int length);
    // private System.Void BeginScalar(System.Span`1<System.Byte> output, ref System.Int32 offset)
    // Offset: 0x5748FF0
    void BeginScalar(::System::Span_1<uint8_t> output, ByRef<int> offset);
    // private System.Void EndScalar(System.Span`1<System.Byte> output, ref System.Int32 offset)
    // Offset: 0x57495C4
    void EndScalar(::System::Span_1<uint8_t> output, ByRef<int> offset);
    // private System.Void ReplaceCurrentState(VYaml.Emitter.EmitState newState)
    // Offset: 0x5749A64
    void ReplaceCurrentState(::VYaml::Emitter::EmitState newState);
    // private System.Void PushState(VYaml.Emitter.EmitState state)
    // Offset: 0x5749AE0
    void PushState(::VYaml::Emitter::EmitState state);
    // private System.Void PopState()
    // Offset: 0x5749C90
    void PopState();
    // private System.Void IncreaseIndent()
    // Offset: 0x5749D9C
    void IncreaseIndent();
    // private System.Void DecreaseIndent()
    // Offset: 0x5749DAC
    void DecreaseIndent();
    // private System.Boolean TryWriteTag(System.Span`1<System.Byte> output, ref System.Int32 offset)
    // Offset: 0x5744CE0
    bool TryWriteTag(::System::Span_1<uint8_t> output, ByRef<int> offset);
    // private System.Int32 GetTagLength()
    // Offset: 0x5744BFC
    int GetTagLength();
    // static private System.Void .cctor()
    // Offset: 0x5749DC0
    static void _cctor();
  }; // VYaml.Emitter.Utf8YamlEmitter
  #pragma pack(pop)
  static check_size<sizeof(Utf8YamlEmitter), 52 + sizeof(int)> __VYaml_Emitter_Utf8YamlEmitterSizeCheck;
  static_assert(sizeof(Utf8YamlEmitter) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Emitter::EmitState (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::get_PreviousState
// Il2CppName: get_PreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VYaml::Emitter::EmitState (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::get_PreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "get_PreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::get_IsFirstElement
// Il2CppName: get_IsFirstElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::get_IsFirstElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "get_IsFirstElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::Utf8YamlEmitter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::GetWriter
// Il2CppName: GetWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Buffers::IBufferWriter_1<uint8_t>* (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::GetWriter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "GetWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::BeginSequence
// Il2CppName: BeginSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::VYaml::Emitter::SequenceStyle)>(&VYaml::Emitter::Utf8YamlEmitter::BeginSequence)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("VYaml.Emitter", "SequenceStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "BeginSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::EndSequence
// Il2CppName: EndSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::EndSequence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "EndSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::BeginMapping
// Il2CppName: BeginMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::VYaml::Emitter::MappingStyle)>(&VYaml::Emitter::Utf8YamlEmitter::BeginMapping)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("VYaml.Emitter", "MappingStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "BeginMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::EndMapping
// Il2CppName: EndMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::EndMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "EndMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::ReadOnlySpan_1<uint8_t>, bool, bool)>(&VYaml::Emitter::Utf8YamlEmitter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* indent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lineBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, indent, lineBreak});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::ReadOnlySpan_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>, bool, bool)>(&VYaml::Emitter::Utf8YamlEmitter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* indent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lineBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2, indent, lineBreak});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::Tag
// Il2CppName: Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::StringW)>(&VYaml::Emitter::Utf8YamlEmitter::Tag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteScalar
// Il2CppName: WriteScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::ReadOnlySpan_1<uint8_t>)>(&VYaml::Emitter::Utf8YamlEmitter::WriteScalar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteNull
// Il2CppName: WriteNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::WriteNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteBool
// Il2CppName: WriteBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(bool)>(&VYaml::Emitter::Utf8YamlEmitter::WriteBool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteInt32
// Il2CppName: WriteInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(int)>(&VYaml::Emitter::Utf8YamlEmitter::WriteInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteUInt32
// Il2CppName: WriteUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(uint)>(&VYaml::Emitter::Utf8YamlEmitter::WriteUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteInt64
// Il2CppName: WriteInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(int64_t)>(&VYaml::Emitter::Utf8YamlEmitter::WriteInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteUInt64
// Il2CppName: WriteUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(uint64_t)>(&VYaml::Emitter::Utf8YamlEmitter::WriteUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteFloat
// Il2CppName: WriteFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(float)>(&VYaml::Emitter::Utf8YamlEmitter::WriteFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteDouble
// Il2CppName: WriteDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(double)>(&VYaml::Emitter::Utf8YamlEmitter::WriteDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::StringW, ::VYaml::Emitter::ScalarStyle)>(&VYaml::Emitter::Utf8YamlEmitter::WriteString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("VYaml.Emitter", "ScalarStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, style});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WritePlainScalar
// Il2CppName: WritePlainScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::StringW)>(&VYaml::Emitter::Utf8YamlEmitter::WritePlainScalar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WritePlainScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteLiteralScalar
// Il2CppName: WriteLiteralScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::StringW)>(&VYaml::Emitter::Utf8YamlEmitter::WriteLiteralScalar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteLiteralScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteQuotedScalar
// Il2CppName: WriteQuotedScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::StringW, bool)>(&VYaml::Emitter::Utf8YamlEmitter::WriteQuotedScalar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* doubleQuote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteQuotedScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, doubleQuote});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteRaw1
// Il2CppName: WriteRaw1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(uint8_t)>(&VYaml::Emitter::Utf8YamlEmitter::WriteRaw1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteRaw1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteBlockSequenceEntryHeader
// Il2CppName: WriteBlockSequenceEntryHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::WriteBlockSequenceEntryHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteBlockSequenceEntryHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteBlockSequenceEntryHeader
// Il2CppName: WriteBlockSequenceEntryHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&VYaml::Emitter::Utf8YamlEmitter::WriteBlockSequenceEntryHeader)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteBlockSequenceEntryHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::Span_1<uint8_t>, ByRef<int>, int)>(&VYaml::Emitter::Utf8YamlEmitter::WriteIndent)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* forceWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset, forceWidth});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::CalculateMaxScalarBufferLength
// Il2CppName: CalculateMaxScalarBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Emitter::Utf8YamlEmitter::*)(int)>(&VYaml::Emitter::Utf8YamlEmitter::CalculateMaxScalarBufferLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "CalculateMaxScalarBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::BeginScalar
// Il2CppName: BeginScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&VYaml::Emitter::Utf8YamlEmitter::BeginScalar)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "BeginScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::EndScalar
// Il2CppName: EndScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&VYaml::Emitter::Utf8YamlEmitter::EndScalar)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "EndScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::ReplaceCurrentState
// Il2CppName: ReplaceCurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::VYaml::Emitter::EmitState)>(&VYaml::Emitter::Utf8YamlEmitter::ReplaceCurrentState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("VYaml.Emitter", "EmitState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "ReplaceCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::PushState
// Il2CppName: PushState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)(::VYaml::Emitter::EmitState)>(&VYaml::Emitter::Utf8YamlEmitter::PushState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("VYaml.Emitter", "EmitState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "PushState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::PopState
// Il2CppName: PopState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::PopState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "PopState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::IncreaseIndent
// Il2CppName: IncreaseIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::IncreaseIndent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "IncreaseIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::DecreaseIndent
// Il2CppName: DecreaseIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::DecreaseIndent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "DecreaseIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::TryWriteTag
// Il2CppName: TryWriteTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VYaml::Emitter::Utf8YamlEmitter::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&VYaml::Emitter::Utf8YamlEmitter::TryWriteTag)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "TryWriteTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::GetTagLength
// Il2CppName: GetTagLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VYaml::Emitter::Utf8YamlEmitter::*)()>(&VYaml::Emitter::Utf8YamlEmitter::GetTagLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), "GetTagLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VYaml::Emitter::Utf8YamlEmitter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VYaml::Emitter::Utf8YamlEmitter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VYaml::Emitter::Utf8YamlEmitter), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
