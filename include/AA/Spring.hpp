// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: AA
namespace AA {
  // Forward declaring type: Spring
  class Spring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AA::Spring);
DEFINE_IL2CPP_ARG_TYPE(::AA::Spring*, "AA", "Spring");
// Type namespace: AA
namespace AA {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: AA.Spring
  // [TokenAttribute] Offset: FFFFFFFF
  class Spring : public ::Il2CppObject {
    public:
    // static public System.Single Damper(System.Single x, System.Single g, System.Single factor)
    // Offset: 0x27CC140
    static float Damper(float x, float g, float factor);
    // static public System.Single DamperExponential(System.Single x, System.Single g, System.Single damping, System.Single dt, System.Single ft)
    // Offset: 0x27CC164
    static float DamperExponential(float x, float g, float damping, float dt, float ft);
    // static public System.Single FastNegExp(System.Single x)
    // Offset: 0x27CC1C4
    static float FastNegExp(float x);
    // static public System.Single DamperExact(System.Single x, System.Single g, System.Single halflife, System.Single dt, System.Single eps)
    // Offset: 0x27CC200
    static float DamperExact(float x, float g, float halflife, float dt, float eps);
    // static public System.Single DamperDecayExact(System.Single x, System.Single halflife, System.Single dt, System.Single eps)
    // Offset: 0x27CC270
    static float DamperDecayExact(float x, float halflife, float dt, float eps);
    // static public System.Single CopySign(System.Single a, System.Single s)
    // Offset: 0x27CC2C4
    static float CopySign(float a, float s);
    // static public System.Single FastAtan(System.Single x)
    // Offset: 0x27CC2D8
    static float FastAtan(float x);
    // static public System.Single Square(System.Single x)
    // Offset: 0x27CC348
    static float Square(float x);
    // static public System.Void SpringDamperExactStiffnessDamping(ref System.Single x, ref System.Single v, System.Single x_goal, System.Single v_goal, System.Single stiffness, System.Single damping, System.Single dt, System.Single eps)
    // Offset: 0x27CC350
    static void SpringDamperExactStiffnessDamping(ByRef<float> x, ByRef<float> v, float x_goal, float v_goal, float stiffness, float damping, float dt, float eps);
    // static public System.Single HalflifeToDamping(System.Single halflife, System.Single eps)
    // Offset: 0x27CC668
    static float HalflifeToDamping(float halflife, float eps);
    // static public System.Single DampingToHalflife(System.Single damping, System.Single eps)
    // Offset: 0x27CC67C
    static float DampingToHalflife(float damping, float eps);
    // static public System.Single FrequencyToStiffness(System.Single frequency)
    // Offset: 0x27CC690
    static float FrequencyToStiffness(float frequency);
    // static public System.Single stiffness_to_frequency(System.Single stiffness)
    // Offset: 0x27CC6A4
    static float stiffness_to_frequency(float stiffness);
    // static public System.Single critical_halflife(System.Single frequency)
    // Offset: 0x27CC6B8
    static float critical_halflife(float frequency);
    // static public System.Single critical_frequency(System.Single halflife)
    // Offset: 0x27CC6F0
    static float critical_frequency(float halflife);
    // static public System.Void SpringDamperExact(ref System.Single x, ref System.Single v, System.Single x_goal, System.Single v_goal, System.Single frequency, System.Single halflife, System.Single dt, System.Single eps)
    // Offset: 0x27CC728
    static void SpringDamperExact(ByRef<float> x, ByRef<float> v, float x_goal, float v_goal, float frequency, float halflife, float dt, float eps);
    // static public System.Single DampingRatioToStiffness(System.Single ratio, System.Single damping)
    // Offset: 0x27CCA6C
    static float DampingRatioToStiffness(float ratio, float damping);
    // static public System.Single DampingRatioToDamping(System.Single ratio, System.Single stiffness)
    // Offset: 0x27CCA7C
    static float DampingRatioToDamping(float ratio, float stiffness);
    // static public System.Void SpringDamperExactRatio(ref System.Single x, ref System.Single v, System.Single x_goal, System.Single v_goal, System.Single damping_ratio, System.Single halflife, System.Single dt, System.Single eps)
    // Offset: 0x27CCA8C
    static void SpringDamperExactRatio(ByRef<float> x, ByRef<float> v, float x_goal, float v_goal, float damping_ratio, float halflife, float dt, float eps);
    // static public System.Void CriticalSpringDamperExact(ref System.Single x, ref System.Single v, System.Single x_goal, System.Single v_goal, System.Single halflife, System.Single dt)
    // Offset: 0x27CCDD4
    static void CriticalSpringDamperExact(ByRef<float> x, ByRef<float> v, float x_goal, float v_goal, float halflife, float dt);
    // static public System.Void SimpleSpringDamperExact(ref System.Single x, ref System.Single v, System.Single x_goal, System.Single halflife, System.Single dt)
    // Offset: 0x27CCE8C
    static void SimpleSpringDamperExact(ByRef<float> x, ByRef<float> v, float x_goal, float halflife, float dt);
    // static public System.Void DecaySringDamperExact(ref System.Single x, ref System.Single v, System.Single halflife, System.Single dt)
    // Offset: 0x27CCF2C
    static void DecaySringDamperExact(ByRef<float> x, ByRef<float> v, float halflife, float dt);
    // public System.Void .ctor()
    // Offset: 0x27CCFC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Spring* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AA::Spring::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Spring*, creationType>()));
    }
  }; // AA.Spring
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AA::Spring::Damper
// Il2CppName: Damper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&AA::Spring::Damper)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "Damper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, g, factor});
  }
};
// Writing MetadataGetter for method: AA::Spring::DamperExponential
// Il2CppName: DamperExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&AA::Spring::DamperExponential)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* damping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DamperExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, g, damping, dt, ft});
  }
};
// Writing MetadataGetter for method: AA::Spring::FastNegExp
// Il2CppName: FastNegExp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::FastNegExp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "FastNegExp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: AA::Spring::DamperExact
// Il2CppName: DamperExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&AA::Spring::DamperExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DamperExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, g, halflife, dt, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::DamperDecayExact
// Il2CppName: DamperDecayExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float)>(&AA::Spring::DamperDecayExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DamperDecayExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, halflife, dt, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::CopySign
// Il2CppName: CopySign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&AA::Spring::CopySign)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "CopySign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, s});
  }
};
// Writing MetadataGetter for method: AA::Spring::FastAtan
// Il2CppName: FastAtan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::FastAtan)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "FastAtan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: AA::Spring::Square
// Il2CppName: Square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::Square)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "Square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: AA::Spring::SpringDamperExactStiffnessDamping
// Il2CppName: SpringDamperExactStiffnessDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float, float, float, float, float)>(&AA::Spring::SpringDamperExactStiffnessDamping)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* stiffness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* damping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "SpringDamperExactStiffnessDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, x_goal, v_goal, stiffness, damping, dt, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::HalflifeToDamping
// Il2CppName: HalflifeToDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&AA::Spring::HalflifeToDamping)> {
  static const MethodInfo* get() {
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "HalflifeToDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{halflife, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::DampingToHalflife
// Il2CppName: DampingToHalflife
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&AA::Spring::DampingToHalflife)> {
  static const MethodInfo* get() {
    static auto* damping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DampingToHalflife", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{damping, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::FrequencyToStiffness
// Il2CppName: FrequencyToStiffness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::FrequencyToStiffness)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "FrequencyToStiffness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: AA::Spring::stiffness_to_frequency
// Il2CppName: stiffness_to_frequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::stiffness_to_frequency)> {
  static const MethodInfo* get() {
    static auto* stiffness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "stiffness_to_frequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stiffness});
  }
};
// Writing MetadataGetter for method: AA::Spring::critical_halflife
// Il2CppName: critical_halflife
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::critical_halflife)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "critical_halflife", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: AA::Spring::critical_frequency
// Il2CppName: critical_frequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AA::Spring::critical_frequency)> {
  static const MethodInfo* get() {
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "critical_frequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{halflife});
  }
};
// Writing MetadataGetter for method: AA::Spring::SpringDamperExact
// Il2CppName: SpringDamperExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float, float, float, float, float)>(&AA::Spring::SpringDamperExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "SpringDamperExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, x_goal, v_goal, frequency, halflife, dt, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::DampingRatioToStiffness
// Il2CppName: DampingRatioToStiffness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&AA::Spring::DampingRatioToStiffness)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* damping = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DampingRatioToStiffness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio, damping});
  }
};
// Writing MetadataGetter for method: AA::Spring::DampingRatioToDamping
// Il2CppName: DampingRatioToDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&AA::Spring::DampingRatioToDamping)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* stiffness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DampingRatioToDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio, stiffness});
  }
};
// Writing MetadataGetter for method: AA::Spring::SpringDamperExactRatio
// Il2CppName: SpringDamperExactRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float, float, float, float, float)>(&AA::Spring::SpringDamperExactRatio)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* damping_ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "SpringDamperExactRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, x_goal, v_goal, damping_ratio, halflife, dt, eps});
  }
};
// Writing MetadataGetter for method: AA::Spring::CriticalSpringDamperExact
// Il2CppName: CriticalSpringDamperExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float, float, float)>(&AA::Spring::CriticalSpringDamperExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "CriticalSpringDamperExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, x_goal, v_goal, halflife, dt});
  }
};
// Writing MetadataGetter for method: AA::Spring::SimpleSpringDamperExact
// Il2CppName: SimpleSpringDamperExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float, float)>(&AA::Spring::SimpleSpringDamperExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_goal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "SimpleSpringDamperExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, x_goal, halflife, dt});
  }
};
// Writing MetadataGetter for method: AA::Spring::DecaySringDamperExact
// Il2CppName: DecaySringDamperExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ByRef<float>, float, float)>(&AA::Spring::DecaySringDamperExact)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* halflife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AA::Spring*), "DecaySringDamperExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, halflife, dt});
  }
};
// Writing MetadataGetter for method: AA::Spring::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
