// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.Buffers.StandardFormat
#include "System/Buffers/StandardFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Forward declaring type: EnumUtil`1<T>
  template<typename T>
  class EnumUtil_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Cysharp::Text::EnumUtil_1, "Cysharp.Text", "EnumUtil`1");
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // WARNING Size may be invalid!
  // Autogenerated type: Cysharp.Text.EnumUtil`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class EnumUtil_1 : public ::Il2CppObject {
    public:
    // Autogenerated static field getter
    // Get static field: static private System.String InvalidName
    static ::StringW _get_InvalidName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_get_InvalidName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "InvalidName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String InvalidName
    static void _set_InvalidName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_set_InvalidName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "InvalidName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<T,System.String> names
    static ::System::Collections::Generic::Dictionary_2<T, ::StringW>* _get_names() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_get_names");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<T, ::StringW>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "names")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<T,System.String> names
    static void _set_names(::System::Collections::Generic::Dictionary_2<T, ::StringW>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_set_names");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "names", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<T,System.Byte[]> utf8names
    static ::System::Collections::Generic::Dictionary_2<T, ::ArrayW<uint8_t>>* _get_utf8names() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_get_utf8names");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<T, ::ArrayW<uint8_t>>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "utf8names")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<T,System.Byte[]> utf8names
    static void _set_utf8names(::System::Collections::Generic::Dictionary_2<T, ::ArrayW<uint8_t>>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::_set_utf8names");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "utf8names", value));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static public System.Boolean TryFormatUtf16(T value, System.Span`1<System.Char> dest, out System.Int32 written, System.ReadOnlySpan`1<System.Char> _)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool TryFormatUtf16(T value, ::System::Span_1<::Il2CppChar> dest, ByRef<int> written, ::System::ReadOnlySpan_1<::Il2CppChar> _) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::TryFormatUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "TryFormatUtf16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(_)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, dest, byref(written), _);
    }
    // static public System.Boolean TryFormatUtf8(T value, System.Span`1<System.Byte> dest, out System.Int32 written, System.Buffers.StandardFormat _)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool TryFormatUtf8(T value, ::System::Span_1<uint8_t> dest, ByRef<int> written, ::System::Buffers::StandardFormat _) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::EnumUtil_1::TryFormatUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<EnumUtil_1<T>*>::get(), "TryFormatUtf8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(dest), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(_)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, dest, byref(written), _);
    }
  }; // Cysharp.Text.EnumUtil`1
  // Could not write size check! Type: Cysharp.Text.EnumUtil`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
