// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Cysharp.Text.IResettableBufferWriter`1
#include "Cysharp/Text/IResettableBufferWriter_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cysharp::Text
namespace Cysharp::Text {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: ReadOnlyMemory`1<T>
  template<typename T>
  struct ReadOnlyMemory_1;
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
  // Skipping declaration: Span`1 because it is already included!
  // Forward declaring type: Memory`1<T>
  template<typename T>
  struct Memory_1;
}
// Completed forward declares
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Forward declaring type: Utf16ValueStringBuilder
  struct Utf16ValueStringBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cysharp::Text::Utf16ValueStringBuilder, "Cysharp.Text", "Utf16ValueStringBuilder");
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cysharp.Text.Utf16ValueStringBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  struct Utf16ValueStringBuilder/*, public ::System::ValueType, public ::System::IDisposable, public ::Cysharp::Text::IResettableBufferWriter_1<::Il2CppChar>*/ {
    public:
    // Nested type: ::Cysharp::Text::Utf16ValueStringBuilder::TryFormat_1<T>
    template<typename T>
    class TryFormat_1;
    // Nested type: ::Cysharp::Text::Utf16ValueStringBuilder::ExceptionUtil
    class ExceptionUtil;
    // Nested type: ::Cysharp::Text::Utf16ValueStringBuilder::FormatterCache_1<T>
    template<typename T>
    class FormatterCache_1;
    // Nested type: ::Cysharp::Text::Utf16ValueStringBuilder::$$c
    class $$c;
    // Nested type: ::Cysharp::Text::Utf16ValueStringBuilder::$$c__170_1<T>
    template<typename T>
    class $$c__170_1;
    public:
    // private System.Char[] buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::Il2CppChar> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x8
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean disposeImmediately
    // Size: 0x1
    // Offset: 0xC
    bool disposeImmediately;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Utf16ValueStringBuilder
    constexpr Utf16ValueStringBuilder(::ArrayW<::Il2CppChar> buffer_ = ::ArrayW<::Il2CppChar>(static_cast<void*>(nullptr)), int index_ = {}, bool disposeImmediately_ = {}) noexcept : buffer{buffer_}, index{index_}, disposeImmediately{disposeImmediately_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::Cysharp::Text::IResettableBufferWriter_1<::Il2CppChar>
    operator ::Cysharp::Text::IResettableBufferWriter_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::Cysharp::Text::IResettableBufferWriter_1<::Il2CppChar>*>(this);
    }
    // static field const value: static private System.Int32 ThreadStaticBufferSize
    static constexpr const int ThreadStaticBufferSize = 31111;
    // Get static field: static private System.Int32 ThreadStaticBufferSize
    static int _get_ThreadStaticBufferSize();
    // Set static field: static private System.Int32 ThreadStaticBufferSize
    static void _set_ThreadStaticBufferSize(int value);
    // static field const value: static private System.Int32 DefaultBufferSize
    static constexpr const int DefaultBufferSize = 32768;
    // Get static field: static private System.Int32 DefaultBufferSize
    static int _get_DefaultBufferSize();
    // Set static field: static private System.Int32 DefaultBufferSize
    static void _set_DefaultBufferSize(int value);
    // Get static field: static private System.Char newLine1
    static ::Il2CppChar _get_newLine1();
    // Set static field: static private System.Char newLine1
    static void _set_newLine1(::Il2CppChar value);
    // Get static field: static private System.Char newLine2
    static ::Il2CppChar _get_newLine2();
    // Set static field: static private System.Char newLine2
    static void _set_newLine2(::Il2CppChar value);
    // Get static field: static private System.Boolean crlf
    static bool _get_crlf();
    // Set static field: static private System.Boolean crlf
    static void _set_crlf(bool value);
    // Get static field: static private System.Char[] scratchBuffer
    static ::ArrayW<::Il2CppChar> _get_scratchBuffer();
    // Set static field: static private System.Char[] scratchBuffer
    static void _set_scratchBuffer(::ArrayW<::Il2CppChar> value);
    // Get static field: static System.Boolean scratchBufferUsed
    static bool _get_scratchBufferUsed();
    // Set static field: static System.Boolean scratchBufferUsed
    static void _set_scratchBufferUsed(bool value);
    // Get instance field reference: private System.Char[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_buffer();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: private System.Boolean disposeImmediately
    [[deprecated("Use field access instead!")]] bool& dyn_disposeImmediately();
    // public System.Void AppendJoin(System.Char separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    void AppendFormat(::StringW format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // public System.Void AppendFormat(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    void AppendFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static private System.Object CreateFormatter(System.Type type)
    // Offset: 0x57613BC
    static ::Il2CppObject* CreateFormatter(::System::Type* type);
    // public System.Void Append(System.Byte value)
    // Offset: 0x5762B44
    void Append(uint8_t value);
    // public System.Void Append(System.Byte value, System.String format)
    // Offset: 0x5762F20
    void Append(uint8_t value, ::StringW format);
    // public System.Void AppendLine(System.Byte value)
    // Offset: 0x5763138
    void AppendLine(uint8_t value);
    // public System.Void AppendLine(System.Byte value, System.String format)
    // Offset: 0x5763158
    void AppendLine(uint8_t value, ::StringW format);
    // public System.Void Append(System.DateTime value)
    // Offset: 0x5763178
    void Append(::System::DateTime value);
    // public System.Void Append(System.DateTime value, System.String format)
    // Offset: 0x57632FC
    void Append(::System::DateTime value, ::StringW format);
    // public System.Void AppendLine(System.DateTime value)
    // Offset: 0x5763518
    void AppendLine(::System::DateTime value);
    // public System.Void AppendLine(System.DateTime value, System.String format)
    // Offset: 0x5763538
    void AppendLine(::System::DateTime value, ::StringW format);
    // public System.Void Append(System.DateTimeOffset value)
    // Offset: 0x5763558
    void Append(::System::DateTimeOffset value);
    // public System.Void Append(System.DateTimeOffset value, System.String format)
    // Offset: 0x57636E0
    void Append(::System::DateTimeOffset value, ::StringW format);
    // public System.Void AppendLine(System.DateTimeOffset value)
    // Offset: 0x5763900
    void AppendLine(::System::DateTimeOffset value);
    // public System.Void AppendLine(System.DateTimeOffset value, System.String format)
    // Offset: 0x5763920
    void AppendLine(::System::DateTimeOffset value, ::StringW format);
    // public System.Void Append(System.Decimal value)
    // Offset: 0x5763940
    void Append(::System::Decimal value);
    // public System.Void Append(System.Decimal value, System.String format)
    // Offset: 0x5763AE8
    void Append(::System::Decimal value, ::StringW format);
    // public System.Void AppendLine(System.Decimal value)
    // Offset: 0x5763D28
    void AppendLine(::System::Decimal value);
    // public System.Void AppendLine(System.Decimal value, System.String format)
    // Offset: 0x5763D48
    void AppendLine(::System::Decimal value, ::StringW format);
    // public System.Void Append(System.Double value)
    // Offset: 0x5763D68
    void Append(double value);
    // public System.Void Append(System.Double value, System.String format)
    // Offset: 0x5763EF0
    void Append(double value, ::StringW format);
    // public System.Void AppendLine(System.Double value)
    // Offset: 0x5764110
    void AppendLine(double value);
    // public System.Void AppendLine(System.Double value, System.String format)
    // Offset: 0x5764130
    void AppendLine(double value, ::StringW format);
    // public System.Void Append(System.Int16 value)
    // Offset: 0x5764150
    void Append(int16_t value);
    // public System.Void Append(System.Int16 value, System.String format)
    // Offset: 0x57642D0
    void Append(int16_t value, ::StringW format);
    // public System.Void AppendLine(System.Int16 value)
    // Offset: 0x57644E8
    void AppendLine(int16_t value);
    // public System.Void AppendLine(System.Int16 value, System.String format)
    // Offset: 0x5764508
    void AppendLine(int16_t value, ::StringW format);
    // public System.Void Append(System.Int32 value)
    // Offset: 0x5764528
    void Append(int value);
    // public System.Void Append(System.Int32 value, System.String format)
    // Offset: 0x57646A8
    void Append(int value, ::StringW format);
    // public System.Void AppendLine(System.Int32 value)
    // Offset: 0x57648C0
    void AppendLine(int value);
    // public System.Void AppendLine(System.Int32 value, System.String format)
    // Offset: 0x57648E0
    void AppendLine(int value, ::StringW format);
    // public System.Void Append(System.Int64 value)
    // Offset: 0x5764900
    void Append(int64_t value);
    // public System.Void Append(System.Int64 value, System.String format)
    // Offset: 0x5764A84
    void Append(int64_t value, ::StringW format);
    // public System.Void AppendLine(System.Int64 value)
    // Offset: 0x5764CA0
    void AppendLine(int64_t value);
    // public System.Void AppendLine(System.Int64 value, System.String format)
    // Offset: 0x5764CC0
    void AppendLine(int64_t value, ::StringW format);
    // public System.Void Append(System.SByte value)
    // Offset: 0x5764CE0
    void Append(int8_t value);
    // public System.Void Append(System.SByte value, System.String format)
    // Offset: 0x5764E60
    void Append(int8_t value, ::StringW format);
    // public System.Void AppendLine(System.SByte value)
    // Offset: 0x5765078
    void AppendLine(int8_t value);
    // public System.Void AppendLine(System.SByte value, System.String format)
    // Offset: 0x5765098
    void AppendLine(int8_t value, ::StringW format);
    // public System.Void Append(System.Single value)
    // Offset: 0x57650B8
    void Append(float value);
    // public System.Void Append(System.Single value, System.String format)
    // Offset: 0x5765238
    void Append(float value, ::StringW format);
    // public System.Void AppendLine(System.Single value)
    // Offset: 0x5765450
    void AppendLine(float value);
    // public System.Void AppendLine(System.Single value, System.String format)
    // Offset: 0x5765470
    void AppendLine(float value, ::StringW format);
    // public System.Void Append(System.TimeSpan value)
    // Offset: 0x5765490
    void Append(::System::TimeSpan value);
    // public System.Void Append(System.TimeSpan value, System.String format)
    // Offset: 0x5765614
    void Append(::System::TimeSpan value, ::StringW format);
    // public System.Void AppendLine(System.TimeSpan value)
    // Offset: 0x5765830
    void AppendLine(::System::TimeSpan value);
    // public System.Void AppendLine(System.TimeSpan value, System.String format)
    // Offset: 0x5765850
    void AppendLine(::System::TimeSpan value, ::StringW format);
    // public System.Void Append(System.UInt16 value)
    // Offset: 0x5765870
    void Append(uint16_t value);
    // public System.Void Append(System.UInt16 value, System.String format)
    // Offset: 0x57659F0
    void Append(uint16_t value, ::StringW format);
    // public System.Void AppendLine(System.UInt16 value)
    // Offset: 0x5765C08
    void AppendLine(uint16_t value);
    // public System.Void AppendLine(System.UInt16 value, System.String format)
    // Offset: 0x5765C28
    void AppendLine(uint16_t value, ::StringW format);
    // public System.Void Append(System.UInt32 value)
    // Offset: 0x5765C48
    void Append(uint value);
    // public System.Void Append(System.UInt32 value, System.String format)
    // Offset: 0x5765DC8
    void Append(uint value, ::StringW format);
    // public System.Void AppendLine(System.UInt32 value)
    // Offset: 0x5765FE0
    void AppendLine(uint value);
    // public System.Void AppendLine(System.UInt32 value, System.String format)
    // Offset: 0x5766000
    void AppendLine(uint value, ::StringW format);
    // public System.Void Append(System.UInt64 value)
    // Offset: 0x5766020
    void Append(uint64_t value);
    // public System.Void Append(System.UInt64 value, System.String format)
    // Offset: 0x57661A4
    void Append(uint64_t value, ::StringW format);
    // public System.Void AppendLine(System.UInt64 value)
    // Offset: 0x57663C0
    void AppendLine(uint64_t value);
    // public System.Void AppendLine(System.UInt64 value, System.String format)
    // Offset: 0x57663E0
    void AppendLine(uint64_t value, ::StringW format);
    // public System.Void Append(System.Guid value)
    // Offset: 0x5766400
    void Append(::System::Guid value);
    // public System.Void Append(System.Guid value, System.String format)
    // Offset: 0x5766580
    void Append(::System::Guid value, ::StringW format);
    // public System.Void AppendLine(System.Guid value)
    // Offset: 0x5766798
    void AppendLine(::System::Guid value);
    // public System.Void AppendLine(System.Guid value, System.String format)
    // Offset: 0x57667B8
    void AppendLine(::System::Guid value, ::StringW format);
    // static private System.Void .cctor()
    // Offset: 0x57667D8
    static void _cctor();
    // public System.Int32 get_Length()
    // Offset: 0x5766864
    int get_Length();
    // public System.ReadOnlySpan`1<System.Char> AsSpan()
    // Offset: 0x576686C
    ::System::ReadOnlySpan_1<::Il2CppChar> AsSpan();
    // public System.ReadOnlyMemory`1<System.Char> AsMemory()
    // Offset: 0x5766914
    ::System::ReadOnlyMemory_1<::Il2CppChar> AsMemory();
    // public System.ArraySegment`1<System.Char> AsArraySegment()
    // Offset: 0x5766988
    ::System::ArraySegment_1<::Il2CppChar> AsArraySegment();
    // public System.Void .ctor(System.Boolean disposeImmediately)
    // Offset: 0x57669F0
    Utf16ValueStringBuilder(bool disposeImmediately);
    // public System.Void Dispose()
    // Offset: 0x5766C34
    void Dispose();
    // public System.Void Clear()
    // Offset: 0x5766D78
    void Clear();
    // public System.Void TryGrow(System.Int32 sizeHint)
    // Offset: 0x5766D80
    void TryGrow(int sizeHint);
    // public System.Void Grow(System.Int32 sizeHint)
    // Offset: 0x5762CC4
    void Grow(int sizeHint);
    // public System.Void AppendLine()
    // Offset: 0x5766DB4
    void AppendLine();
    // public System.Void Append(System.Char value)
    // Offset: 0x5766F14
    void Append(::Il2CppChar value);
    // public System.Void Append(System.Char value, System.Int32 repeatCount)
    // Offset: 0x5766F94
    void Append(::Il2CppChar value, int repeatCount);
    // public System.Void AppendLine(System.Char value)
    // Offset: 0x5767148
    void AppendLine(::Il2CppChar value);
    // public System.Void Append(System.String value)
    // Offset: 0x57671D0
    void Append(::StringW value);
    // public System.Void AppendLine(System.String value)
    // Offset: 0x576723C
    void AppendLine(::StringW value);
    // public System.Void Append(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x57672B4
    void Append(::StringW value, int startIndex, int count);
    // public System.Void Append(System.Char[] value, System.Int32 startIndex, System.Int32 charCount)
    // Offset: 0x57673A0
    void Append(::ArrayW<::Il2CppChar> value, int startIndex, int charCount);
    // public System.Void Append(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x5767420
    void Append(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.Void AppendLine(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x5767538
    void AppendLine(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.Void Append(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Append(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::Append");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Append", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, value);
    }
    // public System.Void AppendLine(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendLine(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendLine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendLine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, value);
    }
    // public System.Void Insert(System.Int32 index, System.String value, System.Int32 count)
    // Offset: 0x5767558
    void Insert(int index, ::StringW value, int count);
    // public System.Void Insert(System.Int32 index, System.String value)
    // Offset: 0x5767A6C
    void Insert(int index, ::StringW value);
    // public System.Void Insert(System.Int32 index, System.ReadOnlySpan`1<System.Char> value, System.Int32 count)
    // Offset: 0x57675D8
    void Insert(int index, ::System::ReadOnlySpan_1<::Il2CppChar> value, int count);
    // public System.Void Replace(System.Char oldChar, System.Char newChar)
    // Offset: 0x5767B2C
    void Replace(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // public System.Void Replace(System.Char oldChar, System.Char newChar, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x5767B38
    void Replace(::Il2CppChar oldChar, ::Il2CppChar newChar, int startIndex, int count);
    // public System.Void Replace(System.String oldValue, System.String newValue)
    // Offset: 0x5767C2C
    void Replace(::StringW oldValue, ::StringW newValue);
    // public System.Void Replace(System.ReadOnlySpan`1<System.Char> oldValue, System.ReadOnlySpan`1<System.Char> newValue)
    // Offset: 0x5767D48
    void Replace(::System::ReadOnlySpan_1<::Il2CppChar> oldValue, ::System::ReadOnlySpan_1<::Il2CppChar> newValue);
    // public System.Void Replace(System.String oldValue, System.String newValue, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x5767C38
    void Replace(::StringW oldValue, ::StringW newValue, int startIndex, int count);
    // public System.Void Replace(System.ReadOnlySpan`1<System.Char> oldValue, System.ReadOnlySpan`1<System.Char> newValue, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x5767D54
    void Replace(::System::ReadOnlySpan_1<::Il2CppChar> oldValue, ::System::ReadOnlySpan_1<::Il2CppChar> newValue, int startIndex, int count);
    // public System.Void ReplaceAt(System.Char newChar, System.Int32 replaceIndex)
    // Offset: 0x5768444
    void ReplaceAt(::Il2CppChar newChar, int replaceIndex);
    // public System.Void Remove(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x57684CC
    void Remove(int startIndex, int length);
    // public System.Boolean TryCopyTo(System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x576868C
    bool TryCopyTo(::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // public System.Memory`1<System.Char> GetMemory(System.Int32 sizeHint)
    // Offset: 0x5768804
    ::System::Memory_1<::Il2CppChar> GetMemory(int sizeHint);
    // public System.Span`1<System.Char> GetSpan(System.Int32 sizeHint)
    // Offset: 0x5767064
    ::System::Span_1<::Il2CppChar> GetSpan(int sizeHint);
    // public System.Void Advance(System.Int32 count)
    // Offset: 0x5767138
    void Advance(int count);
    // private System.Void Cysharp.Text.IResettableBufferWriter<System.Char>.Reset()
    // Offset: 0x5768880
    void Cysharp_Text_IResettableBufferWriter$System_Char$_Reset();
    // private System.Void ThrowArgumentException(System.String paramName)
    // Offset: 0x5762EC8
    void ThrowArgumentException(::StringW paramName);
    // static private System.Void ThrowFormatException()
    // Offset: 0x5768888
    static void ThrowFormatException();
    // private System.Void AppendFormatInternal(T arg, System.Int32 width, System.ReadOnlySpan`1<System.Char> format, System.String argName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendFormatInternal(T arg, int width, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::StringW argName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::AppendFormatInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormatInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(argName)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, arg, width, format, argName);
    }
    // static private System.Void ThrowNestedException()
    // Offset: 0x5766BD4
    static void ThrowNestedException();
    // static public System.Void RegisterTryFormat(Cysharp.Text.Utf16ValueStringBuilder/TryFormat`1<T> formatMethod)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RegisterTryFormat(::Cysharp::Text::Utf16ValueStringBuilder::TryFormat_1<T>* formatMethod) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::RegisterTryFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf16ValueStringBuilder", "RegisterTryFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(formatMethod)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, formatMethod);
    }
    // static private Cysharp.Text.Utf16ValueStringBuilder/TryFormat`1<System.Nullable`1<T>> CreateNullableFormatter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Cysharp::Text::Utf16ValueStringBuilder::TryFormat_1<::System::Nullable_1<T>>* CreateNullableFormatter() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::CreateNullableFormatter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf16ValueStringBuilder", "CreateNullableFormatter", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16ValueStringBuilder::TryFormat_1<::System::Nullable_1<T>>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Void EnableNullableFormat()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void EnableNullableFormat() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf16ValueStringBuilder::EnableNullableFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf16ValueStringBuilder", "EnableNullableFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // public override System.String ToString()
    // Offset: 0x5768794
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Cysharp.Text.Utf16ValueStringBuilder
  #pragma pack(pop)
  static check_size<sizeof(Utf16ValueStringBuilder), 12 + sizeof(bool)> __Cysharp_Text_Utf16ValueStringBuilderSizeCheck;
  static_assert(sizeof(Utf16ValueStringBuilder) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::CreateFormatter
// Il2CppName: CreateFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*)>(&Cysharp::Text::Utf16ValueStringBuilder::CreateFormatter)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "CreateFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint8_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint8_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint8_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint8_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTime)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTime, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTime)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTime, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTimeOffset)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTimeOffset, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTimeOffset)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::DateTimeOffset, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Decimal)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Decimal, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Decimal)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Decimal, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(double)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(double, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(double)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(double, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int16_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int16_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int16_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int16_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int64_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int64_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int64_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int64_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int8_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int8_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int8_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int8_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(float)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(float, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(float)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(float, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::TimeSpan)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::TimeSpan, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::TimeSpan)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::TimeSpan, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint16_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint16_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint16_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint16_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint64_t)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint64_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint64_t)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(uint64_t, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Guid)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Guid, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Guid)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Guid, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::Utf16ValueStringBuilder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::AsSpan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AsMemory
// Il2CppName: AsMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlyMemory_1<::Il2CppChar> (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::AsMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AsMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AsArraySegment
// Il2CppName: AsArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<::Il2CppChar> (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::AsArraySegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AsArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Utf16ValueStringBuilder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::TryGrow
// Il2CppName: TryGrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::TryGrow)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "TryGrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Grow
// Il2CppName: Grow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::Grow)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Grow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* repeatCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, repeatCount});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW, int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::ArrayW<::Il2CppChar>, int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, charCount});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&Cysharp::Text::Utf16ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&Cysharp::Text::Utf16ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Append
// Il2CppName: Append
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, ::StringW, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, ::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar, ::Il2CppChar)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* newChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldChar, newChar});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar, ::Il2CppChar, int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* newChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldChar, newChar, startIndex, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW, ::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* newValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW, ::StringW, int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue, startIndex, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Replace)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* newValue = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue, startIndex, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::ReplaceAt
// Il2CppName: ReplaceAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::Il2CppChar, int)>(&Cysharp::Text::Utf16ValueStringBuilder::ReplaceAt)> {
  static const MethodInfo* get() {
    static auto* newChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* replaceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "ReplaceAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChar, replaceIndex});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int, int)>(&Cysharp::Text::Utf16ValueStringBuilder::Remove)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, length});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::TryCopyTo
// Il2CppName: TryCopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cysharp::Text::Utf16ValueStringBuilder::*)(::System::Span_1<::Il2CppChar>, ByRef<int>)>(&Cysharp::Text::Utf16ValueStringBuilder::TryCopyTo)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "TryCopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, charsWritten});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::GetMemory
// Il2CppName: GetMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Memory_1<::Il2CppChar> (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::GetMemory)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "GetMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::GetSpan
// Il2CppName: GetSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Span_1<::Il2CppChar> (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::GetSpan)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "GetSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf16ValueStringBuilder::Advance)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::Cysharp_Text_IResettableBufferWriter$System_Char$_Reset
// Il2CppName: Cysharp.Text.IResettableBufferWriter<System.Char>.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::Cysharp_Text_IResettableBufferWriter$System_Char$_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "Cysharp.Text.IResettableBufferWriter<System.Char>.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::ThrowArgumentException
// Il2CppName: ThrowArgumentException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf16ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf16ValueStringBuilder::ThrowArgumentException)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "ThrowArgumentException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::ThrowFormatException
// Il2CppName: ThrowFormatException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::Utf16ValueStringBuilder::ThrowFormatException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "ThrowFormatException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::AppendFormatInternal
// Il2CppName: AppendFormatInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::ThrowNestedException
// Il2CppName: ThrowNestedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::Utf16ValueStringBuilder::ThrowNestedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "ThrowNestedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::RegisterTryFormat
// Il2CppName: RegisterTryFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::CreateNullableFormatter
// Il2CppName: CreateNullableFormatter
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::EnableNullableFormat
// Il2CppName: EnableNullableFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf16ValueStringBuilder::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cysharp::Text::Utf16ValueStringBuilder::*)()>(&Cysharp::Text::Utf16ValueStringBuilder::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf16ValueStringBuilder), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
