// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Cysharp.Text.IResettableBufferWriter`1
#include "Cysharp/Text/IResettableBufferWriter_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Buffers.StandardFormat
#include "System/Buffers/StandardFormat.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cysharp::Text
namespace Cysharp::Text {
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: ReadOnlyMemory`1<T>
  template<typename T>
  struct ReadOnlyMemory_1;
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
  // Skipping declaration: Span`1 because it is already included!
  // Forward declaring type: Memory`1<T>
  template<typename T>
  struct Memory_1;
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Skipping declaration: IBufferWriter`1 because it is already included!
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Forward declaring type: Utf8ValueStringBuilder
  struct Utf8ValueStringBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cysharp::Text::Utf8ValueStringBuilder, "Cysharp.Text", "Utf8ValueStringBuilder");
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cysharp.Text.Utf8ValueStringBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  struct Utf8ValueStringBuilder/*, public ::System::ValueType, public ::System::IDisposable, public ::Cysharp::Text::IResettableBufferWriter_1<uint8_t>*/ {
    public:
    // Nested type: ::Cysharp::Text::Utf8ValueStringBuilder::TryFormat_1<T>
    template<typename T>
    class TryFormat_1;
    // Nested type: ::Cysharp::Text::Utf8ValueStringBuilder::FormatterCache_1<T>
    template<typename T>
    class FormatterCache_1;
    // Nested type: ::Cysharp::Text::Utf8ValueStringBuilder::$$c
    class $$c;
    // Nested type: ::Cysharp::Text::Utf8ValueStringBuilder::$$c__150_1<T>
    template<typename T>
    class $$c__150_1;
    public:
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x8
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean disposeImmediately
    // Size: 0x1
    // Offset: 0xC
    bool disposeImmediately;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Utf8ValueStringBuilder
    constexpr Utf8ValueStringBuilder(::ArrayW<uint8_t> buffer_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int index_ = {}, bool disposeImmediately_ = {}) noexcept : buffer{buffer_}, index{index_}, disposeImmediately{disposeImmediately_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::Cysharp::Text::IResettableBufferWriter_1<uint8_t>
    operator ::Cysharp::Text::IResettableBufferWriter_1<uint8_t>() noexcept {
      return *reinterpret_cast<::Cysharp::Text::IResettableBufferWriter_1<uint8_t>*>(this);
    }
    // static field const value: static private System.Int32 ThreadStaticBufferSize
    static constexpr const int ThreadStaticBufferSize = 64444;
    // Get static field: static private System.Int32 ThreadStaticBufferSize
    static int _get_ThreadStaticBufferSize();
    // Set static field: static private System.Int32 ThreadStaticBufferSize
    static void _set_ThreadStaticBufferSize(int value);
    // static field const value: static private System.Int32 DefaultBufferSize
    static constexpr const int DefaultBufferSize = 65536;
    // Get static field: static private System.Int32 DefaultBufferSize
    static int _get_DefaultBufferSize();
    // Set static field: static private System.Int32 DefaultBufferSize
    static void _set_DefaultBufferSize(int value);
    // Get static field: static private System.Text.Encoding UTF8NoBom
    static ::System::Text::Encoding* _get_UTF8NoBom();
    // Set static field: static private System.Text.Encoding UTF8NoBom
    static void _set_UTF8NoBom(::System::Text::Encoding* value);
    // Get static field: static private System.Byte newLine1
    static uint8_t _get_newLine1();
    // Set static field: static private System.Byte newLine1
    static void _set_newLine1(uint8_t value);
    // Get static field: static private System.Byte newLine2
    static uint8_t _get_newLine2();
    // Set static field: static private System.Byte newLine2
    static void _set_newLine2(uint8_t value);
    // Get static field: static private System.Boolean crlf
    static bool _get_crlf();
    // Set static field: static private System.Boolean crlf
    static void _set_crlf(bool value);
    // Get static field: static private System.Byte[] scratchBuffer
    static ::ArrayW<uint8_t> _get_scratchBuffer();
    // Set static field: static private System.Byte[] scratchBuffer
    static void _set_scratchBuffer(::ArrayW<uint8_t> value);
    // Get static field: static System.Boolean scratchBufferUsed
    static bool _get_scratchBufferUsed();
    // Set static field: static System.Boolean scratchBufferUsed
    static void _set_scratchBufferUsed(bool value);
    // Get instance field reference: private System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: private System.Boolean disposeImmediately
    [[deprecated("Use field access instead!")]] bool& dyn_disposeImmediately();
    // public System.Void AppendJoin(System.Char separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.Char separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendJoin(System.String separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoin(::StringW separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoin", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // System.Void AppendJoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendJoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendJoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, separator, values);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    void AppendFormat(::StringW format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // public System.Void AppendFormat(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    void AppendFormat(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static private System.Object CreateFormatter(System.Type type)
    // Offset: 0x5769238
    static ::Il2CppObject* CreateFormatter(::System::Type* type);
    // public System.Void Append(System.Byte value)
    // Offset: 0x576AA14
    void Append(uint8_t value);
    // public System.Void Append(System.Byte value, System.Buffers.StandardFormat format)
    // Offset: 0x576AE28
    void Append(uint8_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Byte value)
    // Offset: 0x576AFF0
    void AppendLine(uint8_t value);
    // public System.Void AppendLine(System.Byte value, System.Buffers.StandardFormat format)
    // Offset: 0x576B010
    void AppendLine(uint8_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.DateTime value)
    // Offset: 0x576B034
    void Append(::System::DateTime value);
    // public System.Void Append(System.DateTime value, System.Buffers.StandardFormat format)
    // Offset: 0x576B1EC
    void Append(::System::DateTime value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.DateTime value)
    // Offset: 0x576B3B4
    void AppendLine(::System::DateTime value);
    // public System.Void AppendLine(System.DateTime value, System.Buffers.StandardFormat format)
    // Offset: 0x576B3D4
    void AppendLine(::System::DateTime value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.DateTimeOffset value)
    // Offset: 0x576B3F8
    void Append(::System::DateTimeOffset value);
    // public System.Void Append(System.DateTimeOffset value, System.Buffers.StandardFormat format)
    // Offset: 0x576B5C4
    void Append(::System::DateTimeOffset value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.DateTimeOffset value)
    // Offset: 0x576B798
    void AppendLine(::System::DateTimeOffset value);
    // public System.Void AppendLine(System.DateTimeOffset value, System.Buffers.StandardFormat format)
    // Offset: 0x576B7B8
    void AppendLine(::System::DateTimeOffset value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Decimal value)
    // Offset: 0x576B7DC
    void Append(::System::Decimal value);
    // public System.Void Append(System.Decimal value, System.Buffers.StandardFormat format)
    // Offset: 0x576B9A8
    void Append(::System::Decimal value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Decimal value)
    // Offset: 0x576BB7C
    void AppendLine(::System::Decimal value);
    // public System.Void AppendLine(System.Decimal value, System.Buffers.StandardFormat format)
    // Offset: 0x576BB9C
    void AppendLine(::System::Decimal value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Double value)
    // Offset: 0x576BBC0
    void Append(double value);
    // public System.Void Append(System.Double value, System.Buffers.StandardFormat format)
    // Offset: 0x576BD78
    void Append(double value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Double value)
    // Offset: 0x576BF48
    void AppendLine(double value);
    // public System.Void AppendLine(System.Double value, System.Buffers.StandardFormat format)
    // Offset: 0x576BF68
    void AppendLine(double value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Int16 value)
    // Offset: 0x576BF8C
    void Append(int16_t value);
    // public System.Void Append(System.Int16 value, System.Buffers.StandardFormat format)
    // Offset: 0x576C144
    void Append(int16_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Int16 value)
    // Offset: 0x576C30C
    void AppendLine(int16_t value);
    // public System.Void AppendLine(System.Int16 value, System.Buffers.StandardFormat format)
    // Offset: 0x576C32C
    void AppendLine(int16_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Int32 value)
    // Offset: 0x576C350
    void Append(int value);
    // public System.Void Append(System.Int32 value, System.Buffers.StandardFormat format)
    // Offset: 0x576C508
    void Append(int value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Int32 value)
    // Offset: 0x576C6D0
    void AppendLine(int value);
    // public System.Void AppendLine(System.Int32 value, System.Buffers.StandardFormat format)
    // Offset: 0x576C6F0
    void AppendLine(int value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Int64 value)
    // Offset: 0x576C714
    void Append(int64_t value);
    // public System.Void Append(System.Int64 value, System.Buffers.StandardFormat format)
    // Offset: 0x576C8CC
    void Append(int64_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Int64 value)
    // Offset: 0x576CA94
    void AppendLine(int64_t value);
    // public System.Void AppendLine(System.Int64 value, System.Buffers.StandardFormat format)
    // Offset: 0x576CAB4
    void AppendLine(int64_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.SByte value)
    // Offset: 0x576CAD8
    void Append(int8_t value);
    // public System.Void Append(System.SByte value, System.Buffers.StandardFormat format)
    // Offset: 0x576CC90
    void Append(int8_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.SByte value)
    // Offset: 0x576CE58
    void AppendLine(int8_t value);
    // public System.Void AppendLine(System.SByte value, System.Buffers.StandardFormat format)
    // Offset: 0x576CE78
    void AppendLine(int8_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Single value)
    // Offset: 0x576CE9C
    void Append(float value);
    // public System.Void Append(System.Single value, System.Buffers.StandardFormat format)
    // Offset: 0x576D054
    void Append(float value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Single value)
    // Offset: 0x576D224
    void AppendLine(float value);
    // public System.Void AppendLine(System.Single value, System.Buffers.StandardFormat format)
    // Offset: 0x576D244
    void AppendLine(float value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.TimeSpan value)
    // Offset: 0x576D268
    void Append(::System::TimeSpan value);
    // public System.Void Append(System.TimeSpan value, System.Buffers.StandardFormat format)
    // Offset: 0x576D420
    void Append(::System::TimeSpan value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.TimeSpan value)
    // Offset: 0x576D5E8
    void AppendLine(::System::TimeSpan value);
    // public System.Void AppendLine(System.TimeSpan value, System.Buffers.StandardFormat format)
    // Offset: 0x576D608
    void AppendLine(::System::TimeSpan value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.UInt16 value)
    // Offset: 0x576D62C
    void Append(uint16_t value);
    // public System.Void Append(System.UInt16 value, System.Buffers.StandardFormat format)
    // Offset: 0x576D7E4
    void Append(uint16_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.UInt16 value)
    // Offset: 0x576D9AC
    void AppendLine(uint16_t value);
    // public System.Void AppendLine(System.UInt16 value, System.Buffers.StandardFormat format)
    // Offset: 0x576D9CC
    void AppendLine(uint16_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.UInt32 value)
    // Offset: 0x576D9F0
    void Append(uint value);
    // public System.Void Append(System.UInt32 value, System.Buffers.StandardFormat format)
    // Offset: 0x576DBA8
    void Append(uint value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.UInt32 value)
    // Offset: 0x576DD70
    void AppendLine(uint value);
    // public System.Void AppendLine(System.UInt32 value, System.Buffers.StandardFormat format)
    // Offset: 0x576DD90
    void AppendLine(uint value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.UInt64 value)
    // Offset: 0x576DDB4
    void Append(uint64_t value);
    // public System.Void Append(System.UInt64 value, System.Buffers.StandardFormat format)
    // Offset: 0x576DF6C
    void Append(uint64_t value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.UInt64 value)
    // Offset: 0x576E134
    void AppendLine(uint64_t value);
    // public System.Void AppendLine(System.UInt64 value, System.Buffers.StandardFormat format)
    // Offset: 0x576E154
    void AppendLine(uint64_t value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Guid value)
    // Offset: 0x576E178
    void Append(::System::Guid value);
    // public System.Void Append(System.Guid value, System.Buffers.StandardFormat format)
    // Offset: 0x576E344
    void Append(::System::Guid value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Guid value)
    // Offset: 0x576E518
    void AppendLine(::System::Guid value);
    // public System.Void AppendLine(System.Guid value, System.Buffers.StandardFormat format)
    // Offset: 0x576E538
    void AppendLine(::System::Guid value, ::System::Buffers::StandardFormat format);
    // public System.Void Append(System.Boolean value)
    // Offset: 0x576E55C
    void Append(bool value);
    // public System.Void Append(System.Boolean value, System.Buffers.StandardFormat format)
    // Offset: 0x576E714
    void Append(bool value, ::System::Buffers::StandardFormat format);
    // public System.Void AppendLine(System.Boolean value)
    // Offset: 0x576E8DC
    void AppendLine(bool value);
    // public System.Void AppendLine(System.Boolean value, System.Buffers.StandardFormat format)
    // Offset: 0x576E900
    void AppendLine(bool value, ::System::Buffers::StandardFormat format);
    // static private System.Void .cctor()
    // Offset: 0x576E928
    static void _cctor();
    // public System.Int32 get_Length()
    // Offset: 0x576EA20
    int get_Length();
    // public System.ReadOnlySpan`1<System.Byte> AsSpan()
    // Offset: 0x576EA28
    ::System::ReadOnlySpan_1<uint8_t> AsSpan();
    // public System.ReadOnlyMemory`1<System.Byte> AsMemory()
    // Offset: 0x576EAD0
    ::System::ReadOnlyMemory_1<uint8_t> AsMemory();
    // public System.ArraySegment`1<System.Byte> AsArraySegment()
    // Offset: 0x576EB44
    ::System::ArraySegment_1<uint8_t> AsArraySegment();
    // public System.Void .ctor(System.Boolean disposeImmediately)
    // Offset: 0x576EBAC
    Utf8ValueStringBuilder(bool disposeImmediately);
    // public System.Void Dispose()
    // Offset: 0x576EDF0
    void Dispose();
    // public System.Void Clear()
    // Offset: 0x576EF34
    void Clear();
    // public System.Void TryGrow(System.Int32 sizeHint)
    // Offset: 0x576EF3C
    void TryGrow(int sizeHint);
    // public System.Void Grow(System.Int32 sizeHint)
    // Offset: 0x576ABCC
    void Grow(int sizeHint);
    // public System.Void AppendLine()
    // Offset: 0x576EF70
    void AppendLine();
    // public System.Void Append(System.Char value)
    // Offset: 0x576F0D8
    void Append(::Il2CppChar value);
    // public System.Void Append(System.Char value, System.Int32 repeatCount)
    // Offset: 0x576F1F8
    void Append(::Il2CppChar value, int repeatCount);
    // public System.Void AppendLine(System.Char value)
    // Offset: 0x576F580
    void AppendLine(::Il2CppChar value);
    // public System.Void Append(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x576F5A0
    void Append(::StringW value, int startIndex, int count);
    // public System.Void Append(System.String value)
    // Offset: 0x576F68C
    void Append(::StringW value);
    // public System.Void AppendLine(System.String value)
    // Offset: 0x576F6F8
    void AppendLine(::StringW value);
    // public System.Void Append(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x576F770
    void Append(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.Void AppendLine(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x576F8F4
    void AppendLine(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.Void AppendLiteral(System.ReadOnlySpan`1<System.Byte> value)
    // Offset: 0x576F914
    void AppendLiteral(::System::ReadOnlySpan_1<uint8_t> value);
    // public System.Void Append(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Append(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::Append");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Append", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, value);
    }
    // public System.Void AppendLine(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendLine(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendLine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendLine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, value);
    }
    // public System.Void CopyTo(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter)
    // Offset: 0x576FA2C
    void CopyTo(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter);
    // public System.Boolean TryCopyTo(System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x576FB60
    bool TryCopyTo(::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // public System.Threading.Tasks.Task WriteToAsync(System.IO.Stream stream)
    // Offset: 0x576FC68
    ::System::Threading::Tasks::Task* WriteToAsync(::System::IO::Stream* stream);
    // public System.Threading.Tasks.Task WriteToAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x576FC94
    ::System::Threading::Tasks::Task* WriteToAsync(::System::IO::Stream* stream, ::System::Threading::CancellationToken cancellationToken);
    // public System.Memory`1<System.Byte> GetMemory(System.Int32 sizeHint)
    // Offset: 0x576FD7C
    ::System::Memory_1<uint8_t> GetMemory(int sizeHint);
    // public System.Span`1<System.Byte> GetSpan(System.Int32 sizeHint)
    // Offset: 0x576F49C
    ::System::Span_1<uint8_t> GetSpan(int sizeHint);
    // public System.Void Advance(System.Int32 count)
    // Offset: 0x576F570
    void Advance(int count);
    // private System.Void Cysharp.Text.IResettableBufferWriter<System.Byte>.Reset()
    // Offset: 0x576FDF8
    void Cysharp_Text_IResettableBufferWriter$System_Byte$_Reset();
    // private System.Void ThrowArgumentException(System.String paramName)
    // Offset: 0x576ADD0
    void ThrowArgumentException(::StringW paramName);
    // private System.Void ThrowFormatException()
    // Offset: 0x576FE00
    void ThrowFormatException();
    // static private System.Void ThrowNestedException()
    // Offset: 0x576ED90
    static void ThrowNestedException();
    // private System.Void AppendFormatInternal(T arg, System.Int32 width, System.Buffers.StandardFormat format, System.String argName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AppendFormatInternal(T arg, int width, ::System::Buffers::StandardFormat format, ::StringW argName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::AppendFormatInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AppendFormatInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(argName)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, arg, width, format, argName);
    }
    // static public System.Void RegisterTryFormat(Cysharp.Text.Utf8ValueStringBuilder/TryFormat`1<T> formatMethod)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RegisterTryFormat(::Cysharp::Text::Utf8ValueStringBuilder::TryFormat_1<T>* formatMethod) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::RegisterTryFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf8ValueStringBuilder", "RegisterTryFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(formatMethod)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, formatMethod);
    }
    // static private Cysharp.Text.Utf8ValueStringBuilder/TryFormat`1<System.Nullable`1<T>> CreateNullableFormatter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Cysharp::Text::Utf8ValueStringBuilder::TryFormat_1<::System::Nullable_1<T>>* CreateNullableFormatter() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::CreateNullableFormatter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf8ValueStringBuilder", "CreateNullableFormatter", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8ValueStringBuilder::TryFormat_1<::System::Nullable_1<T>>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Void EnableNullableFormat()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void EnableNullableFormat() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::Utf8ValueStringBuilder::EnableNullableFormat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "Utf8ValueStringBuilder", "EnableNullableFormat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // public override System.String ToString()
    // Offset: 0x576FCCC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Cysharp.Text.Utf8ValueStringBuilder
  #pragma pack(pop)
  static check_size<sizeof(Utf8ValueStringBuilder), 12 + sizeof(bool)> __Cysharp_Text_Utf8ValueStringBuilderSizeCheck;
  static_assert(sizeof(Utf8ValueStringBuilder) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoin
// Il2CppName: AppendJoin
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendJoinInternal
// Il2CppName: AppendJoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormat
// Il2CppName: AppendFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::CreateFormatter
// Il2CppName: CreateFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*)>(&Cysharp::Text::Utf8ValueStringBuilder::CreateFormatter)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "CreateFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint8_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint8_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint8_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint8_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTime)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTime, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTime)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTime, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTimeOffset)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTimeOffset, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTimeOffset)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::DateTimeOffset, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Decimal)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Decimal, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Decimal)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Decimal, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(double)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(double, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(double)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(double, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int16_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int16_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int16_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int16_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int64_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int64_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int64_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int64_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int8_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int8_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int8_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int8_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(float)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(float, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(float)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(float, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::TimeSpan)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::TimeSpan, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::TimeSpan)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::TimeSpan, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint16_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint16_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint16_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint16_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint64_t)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint64_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint64_t)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(uint64_t, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Guid)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Guid, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Guid)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Guid, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(bool)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(bool, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(bool)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(bool, ::System::Buffers::StandardFormat)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::Utf8ValueStringBuilder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<uint8_t> (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::AsSpan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AsMemory
// Il2CppName: AsMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlyMemory_1<uint8_t> (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::AsMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AsMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AsArraySegment
// Il2CppName: AsArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint8_t> (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::AsArraySegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AsArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Utf8ValueStringBuilder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::TryGrow
// Il2CppName: TryGrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::TryGrow)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "TryGrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Grow
// Il2CppName: Grow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::Grow)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Grow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::Il2CppChar)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::Il2CppChar, int)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* repeatCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, repeatCount});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::Il2CppChar)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::StringW, int, int)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&Cysharp::Text::Utf8ValueStringBuilder::Append)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLiteral
// Il2CppName: AppendLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::ReadOnlySpan_1<uint8_t>)>(&Cysharp::Text::Utf8ValueStringBuilder::AppendLiteral)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "AppendLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Append
// Il2CppName: Append
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendLine
// Il2CppName: AppendLine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Buffers::IBufferWriter_1<uint8_t>*)>(&Cysharp::Text::Utf8ValueStringBuilder::CopyTo)> {
  static const MethodInfo* get() {
    static auto* bufferWriter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Buffers", "IBufferWriter`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferWriter});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::TryCopyTo
// Il2CppName: TryCopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&Cysharp::Text::Utf8ValueStringBuilder::TryCopyTo)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "TryCopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::WriteToAsync
// Il2CppName: WriteToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::IO::Stream*)>(&Cysharp::Text::Utf8ValueStringBuilder::WriteToAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "WriteToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::WriteToAsync
// Il2CppName: WriteToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Cysharp::Text::Utf8ValueStringBuilder::*)(::System::IO::Stream*, ::System::Threading::CancellationToken)>(&Cysharp::Text::Utf8ValueStringBuilder::WriteToAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "WriteToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, cancellationToken});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::GetMemory
// Il2CppName: GetMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Memory_1<uint8_t> (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::GetMemory)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "GetMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::GetSpan
// Il2CppName: GetSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Span_1<uint8_t> (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::GetSpan)> {
  static const MethodInfo* get() {
    static auto* sizeHint = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "GetSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeHint});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(int)>(&Cysharp::Text::Utf8ValueStringBuilder::Advance)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::Cysharp_Text_IResettableBufferWriter$System_Byte$_Reset
// Il2CppName: Cysharp.Text.IResettableBufferWriter<System.Byte>.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::Cysharp_Text_IResettableBufferWriter$System_Byte$_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "Cysharp.Text.IResettableBufferWriter<System.Byte>.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::ThrowArgumentException
// Il2CppName: ThrowArgumentException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)(::StringW)>(&Cysharp::Text::Utf8ValueStringBuilder::ThrowArgumentException)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "ThrowArgumentException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::ThrowFormatException
// Il2CppName: ThrowFormatException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::ThrowFormatException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "ThrowFormatException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::ThrowNestedException
// Il2CppName: ThrowNestedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::Utf8ValueStringBuilder::ThrowNestedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "ThrowNestedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::AppendFormatInternal
// Il2CppName: AppendFormatInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::RegisterTryFormat
// Il2CppName: RegisterTryFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::CreateNullableFormatter
// Il2CppName: CreateNullableFormatter
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::EnableNullableFormat
// Il2CppName: EnableNullableFormat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::Utf8ValueStringBuilder::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cysharp::Text::Utf8ValueStringBuilder::*)()>(&Cysharp::Text::Utf8ValueStringBuilder::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::Utf8ValueStringBuilder), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
