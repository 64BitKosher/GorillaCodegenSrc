// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cysharp::Text
namespace Cysharp::Text {
  // Forward declaring type: Utf16ValueStringBuilder
  struct Utf16ValueStringBuilder;
  // Forward declaring type: Utf8ValueStringBuilder
  struct Utf8ValueStringBuilder;
  // Forward declaring type: Utf16PreparedFormat`1<T1>
  template<typename T1>
  class Utf16PreparedFormat_1;
  // Forward declaring type: Utf8PreparedFormat`1<T1>
  template<typename T1>
  class Utf8PreparedFormat_1;
  // Forward declaring type: Utf16PreparedFormat`2<T1, T2>
  template<typename T1, typename T2>
  class Utf16PreparedFormat_2;
  // Forward declaring type: Utf8PreparedFormat`2<T1, T2>
  template<typename T1, typename T2>
  class Utf8PreparedFormat_2;
  // Forward declaring type: Utf16PreparedFormat`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Utf16PreparedFormat_3;
  // Forward declaring type: Utf8PreparedFormat`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Utf8PreparedFormat_3;
  // Forward declaring type: Utf16PreparedFormat`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Utf16PreparedFormat_4;
  // Forward declaring type: Utf8PreparedFormat`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Utf8PreparedFormat_4;
  // Forward declaring type: Utf16PreparedFormat`5<T1, T2, T3, T4, T5>
  template<typename T1, typename T2, typename T3, typename T4, typename T5>
  class Utf16PreparedFormat_5;
  // Forward declaring type: Utf8PreparedFormat`5<T1, T2, T3, T4, T5>
  template<typename T1, typename T2, typename T3, typename T4, typename T5>
  class Utf8PreparedFormat_5;
  // Forward declaring type: Utf16PreparedFormat`6<T1, T2, T3, T4, T5, T6>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  class Utf16PreparedFormat_6;
  // Forward declaring type: Utf8PreparedFormat`6<T1, T2, T3, T4, T5, T6>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  class Utf8PreparedFormat_6;
  // Forward declaring type: Utf16PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
  class Utf16PreparedFormat_7;
  // Forward declaring type: Utf8PreparedFormat`7<T1, T2, T3, T4, T5, T6, T7>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
  class Utf8PreparedFormat_7;
  // Forward declaring type: Utf16PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
  class Utf16PreparedFormat_8;
  // Forward declaring type: Utf8PreparedFormat`8<T1, T2, T3, T4, T5, T6, T7, T8>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
  class Utf8PreparedFormat_8;
  // Forward declaring type: Utf16PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  class Utf16PreparedFormat_9;
  // Forward declaring type: Utf8PreparedFormat`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  class Utf8PreparedFormat_9;
  // Forward declaring type: Utf16PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
  class Utf16PreparedFormat_10;
  // Forward declaring type: Utf8PreparedFormat`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
  class Utf8PreparedFormat_10;
  // Forward declaring type: Utf16PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
  class Utf16PreparedFormat_11;
  // Forward declaring type: Utf8PreparedFormat`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
  class Utf8PreparedFormat_11;
  // Forward declaring type: Utf16PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12>
  class Utf16PreparedFormat_12;
  // Forward declaring type: Utf8PreparedFormat`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12>
  class Utf8PreparedFormat_12;
  // Forward declaring type: Utf16PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13>
  class Utf16PreparedFormat_13;
  // Forward declaring type: Utf8PreparedFormat`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13>
  class Utf8PreparedFormat_13;
  // Forward declaring type: Utf16PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14>
  class Utf16PreparedFormat_14;
  // Forward declaring type: Utf8PreparedFormat`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14>
  class Utf8PreparedFormat_14;
  // Forward declaring type: Utf16PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15>
  class Utf16PreparedFormat_15;
  // Forward declaring type: Utf8PreparedFormat`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15>
  class Utf8PreparedFormat_15;
  // Forward declaring type: Utf16PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16>
  class Utf16PreparedFormat_16;
  // Forward declaring type: Utf8PreparedFormat`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16>
  class Utf8PreparedFormat_16;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: IBufferWriter`1<T>
  template<typename T>
  class IBufferWriter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Forward declaring type: ZString
  class ZString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cysharp::Text::ZString);
DEFINE_IL2CPP_ARG_TYPE(::Cysharp::Text::ZString*, "Cysharp.Text", "ZString");
// Type namespace: Cysharp.Text
namespace Cysharp::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cysharp.Text.ZString
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  class ZString : public ::Il2CppObject {
    public:
    // Nested type: ::Cysharp::Text::ZString::$$c
    class $$c;
    // Get static field: static private System.Text.Encoding UTF8NoBom
    static ::System::Text::Encoding* _get_UTF8NoBom();
    // Set static field: static private System.Text.Encoding UTF8NoBom
    static void _set_UTF8NoBom(::System::Text::Encoding* value);
    // static public System.String Concat(T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static ::StringW Concat(T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1);
    }
    // static public System.String Concat(T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static ::StringW Concat(T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // static public System.String Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static ::StringW Concat(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static System.Void AppendChars(ref TBufferWriter sb, System.ReadOnlySpan`1<System.Char> chars)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TBufferWriter>
    static void AppendChars(ByRef<TBufferWriter> sb, ::System::ReadOnlySpan_1<::Il2CppChar> chars) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TBufferWriter>, ::System::Buffers::IBufferWriter_1<uint8_t>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::AppendChars");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "AppendChars", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TBufferWriter>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(chars)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TBufferWriter>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(sb), chars);
    }
    // static public Cysharp.Text.Utf16ValueStringBuilder CreateStringBuilder()
    // Offset: 0x57709F4
    static ::Cysharp::Text::Utf16ValueStringBuilder CreateStringBuilder();
    // static public Cysharp.Text.Utf8ValueStringBuilder CreateUtf8StringBuilder()
    // Offset: 0x5770A20
    static ::Cysharp::Text::Utf8ValueStringBuilder CreateUtf8StringBuilder();
    // static public Cysharp.Text.Utf16ValueStringBuilder CreateStringBuilder(System.Boolean notNested)
    // Offset: 0x5770A4C
    static ::Cysharp::Text::Utf16ValueStringBuilder CreateStringBuilder(bool notNested);
    // static public Cysharp.Text.Utf8ValueStringBuilder CreateUtf8StringBuilder(System.Boolean notNested)
    // Offset: 0x5770A78
    static ::Cysharp::Text::Utf8ValueStringBuilder CreateUtf8StringBuilder(bool notNested);
    // static public System.String Join(System.Char separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::Il2CppChar separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Join(::StringW separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.Char separator, System.ReadOnlySpan`1<System.String> values)
    // Offset: 0x5770AA4
    static ::StringW Join(::Il2CppChar separator, ::System::ReadOnlySpan_1<::StringW> values);
    // static public System.String Join(System.Char separator, params System.String[] values)
    // Offset: 0x5770F14
    static ::StringW Join(::Il2CppChar separator, ::ArrayW<::StringW> values);
    // static public System.String Join(System.String separator, params System.String[] values)
    // Offset: 0x5771028
    static ::StringW Join(::StringW separator, ::ArrayW<::StringW> values);
    // static public System.String Concat(params T[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::ArrayW<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.List`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::List_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.ICollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::ICollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.IReadOnlyCollection`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::IReadOnlyCollection_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static public System.String Concat(System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW Concat(::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Concat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Concat", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, values);
    }
    // static private System.String JoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW JoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::JoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "JoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static private System.String JoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IReadOnlyList`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW JoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IReadOnlyList_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::JoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "JoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static private System.String JoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW JoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::ReadOnlySpan_1<T> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::JoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "JoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static private System.String JoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW JoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::JoinInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "JoinInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, separator, values);
    }
    // static private System.String JoinInternal(System.ReadOnlySpan`1<System.Char> separator, System.ReadOnlySpan`1<System.String> values)
    // Offset: 0x5770B6C
    static ::StringW JoinInternal(::System::ReadOnlySpan_1<::Il2CppChar> separator, ::System::ReadOnlySpan_1<::StringW> values);
    // static public System.String Format(System.String format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static ::StringW Format(::StringW format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // static public System.String Format(System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static ::StringW Format(::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static public System.String Format(System.ReadOnlySpan`1<System.Char> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static ::StringW Format(::System::ReadOnlySpan_1<::Il2CppChar> format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`1<T1> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static ::Cysharp::Text::Utf16PreparedFormat_1<T1>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_1<T1>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`1<T1> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static ::Cysharp::Text::Utf8PreparedFormat_1<T1>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_1<T1>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`2<T1,T2> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static ::Cysharp::Text::Utf16PreparedFormat_2<T1, T2>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_2<T1, T2>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`2<T1,T2> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static ::Cysharp::Text::Utf8PreparedFormat_2<T1, T2>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_2<T1, T2>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`3<T1,T2,T3> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static ::Cysharp::Text::Utf16PreparedFormat_3<T1, T2, T3>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_3<T1, T2, T3>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`3<T1,T2,T3> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static ::Cysharp::Text::Utf8PreparedFormat_3<T1, T2, T3>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_3<T1, T2, T3>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`4<T1,T2,T3,T4> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static ::Cysharp::Text::Utf16PreparedFormat_4<T1, T2, T3, T4>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_4<T1, T2, T3, T4>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`4<T1,T2,T3,T4> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static ::Cysharp::Text::Utf8PreparedFormat_4<T1, T2, T3, T4>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_4<T1, T2, T3, T4>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`5<T1,T2,T3,T4,T5> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static ::Cysharp::Text::Utf16PreparedFormat_5<T1, T2, T3, T4, T5>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_5<T1, T2, T3, T4, T5>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`5<T1,T2,T3,T4,T5> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static ::Cysharp::Text::Utf8PreparedFormat_5<T1, T2, T3, T4, T5>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_5<T1, T2, T3, T4, T5>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`6<T1,T2,T3,T4,T5,T6> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static ::Cysharp::Text::Utf16PreparedFormat_6<T1, T2, T3, T4, T5, T6>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_6<T1, T2, T3, T4, T5, T6>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`6<T1,T2,T3,T4,T5,T6> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static ::Cysharp::Text::Utf8PreparedFormat_6<T1, T2, T3, T4, T5, T6>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_6<T1, T2, T3, T4, T5, T6>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`7<T1,T2,T3,T4,T5,T6,T7> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static ::Cysharp::Text::Utf16PreparedFormat_7<T1, T2, T3, T4, T5, T6, T7>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_7<T1, T2, T3, T4, T5, T6, T7>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`7<T1,T2,T3,T4,T5,T6,T7> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static ::Cysharp::Text::Utf8PreparedFormat_7<T1, T2, T3, T4, T5, T6, T7>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_7<T1, T2, T3, T4, T5, T6, T7>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`8<T1,T2,T3,T4,T5,T6,T7,T8> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static ::Cysharp::Text::Utf16PreparedFormat_8<T1, T2, T3, T4, T5, T6, T7, T8>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_8<T1, T2, T3, T4, T5, T6, T7, T8>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`8<T1,T2,T3,T4,T5,T6,T7,T8> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static ::Cysharp::Text::Utf8PreparedFormat_8<T1, T2, T3, T4, T5, T6, T7, T8>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_8<T1, T2, T3, T4, T5, T6, T7, T8>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`9<T1,T2,T3,T4,T5,T6,T7,T8,T9> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static ::Cysharp::Text::Utf16PreparedFormat_9<T1, T2, T3, T4, T5, T6, T7, T8, T9>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_9<T1, T2, T3, T4, T5, T6, T7, T8, T9>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`9<T1,T2,T3,T4,T5,T6,T7,T8,T9> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static ::Cysharp::Text::Utf8PreparedFormat_9<T1, T2, T3, T4, T5, T6, T7, T8, T9>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_9<T1, T2, T3, T4, T5, T6, T7, T8, T9>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static ::Cysharp::Text::Utf16PreparedFormat_10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static ::Cysharp::Text::Utf8PreparedFormat_10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`11<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static ::Cysharp::Text::Utf16PreparedFormat_11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`11<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static ::Cysharp::Text::Utf8PreparedFormat_11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`12<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static ::Cysharp::Text::Utf16PreparedFormat_12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`12<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static ::Cysharp::Text::Utf8PreparedFormat_12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`13<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static ::Cysharp::Text::Utf16PreparedFormat_13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`13<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static ::Cysharp::Text::Utf8PreparedFormat_13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`14<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static ::Cysharp::Text::Utf16PreparedFormat_14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`14<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static ::Cysharp::Text::Utf8PreparedFormat_14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`15<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static ::Cysharp::Text::Utf16PreparedFormat_15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`15<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static ::Cysharp::Text::Utf8PreparedFormat_15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf16PreparedFormat`16<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> PrepareUtf16(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static ::Cysharp::Text::Utf16PreparedFormat_16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>* PrepareUtf16(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf16");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf16", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf16PreparedFormat_16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public Cysharp.Text.Utf8PreparedFormat`16<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> PrepareUtf8(System.String format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static ::Cysharp::Text::Utf8PreparedFormat_16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>* PrepareUtf8(::StringW format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::PrepareUtf8");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "PrepareUtf8", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::Cysharp::Text::Utf8PreparedFormat_16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, format);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
    }
    // static public System.Void Utf8Format(System.Buffers.IBufferWriter`1<System.Byte> bufferWriter, System.String format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
    static void Utf8Format(::System::Buffers::IBufferWriter_1<uint8_t>* bufferWriter, ::StringW format, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cysharp::Text::ZString::Utf8Format");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cysharp.Text", "ZString", "Utf8Format", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferWriter), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(arg4), ::il2cpp_utils::ExtractType(arg5), ::il2cpp_utils::ExtractType(arg6), ::il2cpp_utils::ExtractType(arg7), ::il2cpp_utils::ExtractType(arg8), ::il2cpp_utils::ExtractType(arg9), ::il2cpp_utils::ExtractType(arg10), ::il2cpp_utils::ExtractType(arg11), ::il2cpp_utils::ExtractType(arg12), ::il2cpp_utils::ExtractType(arg13), ::il2cpp_utils::ExtractType(arg14), ::il2cpp_utils::ExtractType(arg15), ::il2cpp_utils::ExtractType(arg16)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T9>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T10>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T11>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T12>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T13>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T14>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T15>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T16>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, bufferWriter, format, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
    }
    // static private System.Void .cctor()
    // Offset: 0x5771120
    static void _cctor();
  }; // Cysharp.Text.ZString
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::AppendChars
// Il2CppName: AppendChars
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::CreateStringBuilder
// Il2CppName: CreateStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cysharp::Text::Utf16ValueStringBuilder (*)()>(&Cysharp::Text::ZString::CreateStringBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "CreateStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::CreateUtf8StringBuilder
// Il2CppName: CreateUtf8StringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cysharp::Text::Utf8ValueStringBuilder (*)()>(&Cysharp::Text::ZString::CreateUtf8StringBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "CreateUtf8StringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::CreateStringBuilder
// Il2CppName: CreateStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cysharp::Text::Utf16ValueStringBuilder (*)(bool)>(&Cysharp::Text::ZString::CreateStringBuilder)> {
  static const MethodInfo* get() {
    static auto* notNested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "CreateStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notNested});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::CreateUtf8StringBuilder
// Il2CppName: CreateUtf8StringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cysharp::Text::Utf8ValueStringBuilder (*)(bool)>(&Cysharp::Text::ZString::CreateUtf8StringBuilder)> {
  static const MethodInfo* get() {
    static auto* notNested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "CreateUtf8StringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notNested});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppChar, ::System::ReadOnlySpan_1<::StringW>)>(&Cysharp::Text::ZString::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* values = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppChar, ::ArrayW<::StringW>)>(&Cysharp::Text::ZString::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::ArrayW<::StringW>)>(&Cysharp::Text::ZString::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Concat
// Il2CppName: Concat
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::JoinInternal
// Il2CppName: JoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::JoinInternal
// Il2CppName: JoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::JoinInternal
// Il2CppName: JoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::JoinInternal
// Il2CppName: JoinInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::JoinInternal
// Il2CppName: JoinInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::StringW>)>(&Cysharp::Text::ZString::JoinInternal)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* values = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), "JoinInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Format
// Il2CppName: Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf16
// Il2CppName: PrepareUtf16
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::PrepareUtf8
// Il2CppName: PrepareUtf8
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::Utf8Format
// Il2CppName: Utf8Format
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cysharp::Text::ZString::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cysharp::Text::ZString::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cysharp::Text::ZString*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
