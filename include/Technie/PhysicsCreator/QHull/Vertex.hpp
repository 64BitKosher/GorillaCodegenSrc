// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator::QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Point3d
  class Point3d;
  // Forward declaring type: Face
  class Face;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Vertex
  class Vertex;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::Vertex);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::Vertex*, "Technie.PhysicsCreator.QHull", "Vertex");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.Vertex
  // [TokenAttribute] Offset: FFFFFFFF
  class Vertex : public ::Il2CppObject {
    public:
    public:
    // public Technie.PhysicsCreator.QHull.Point3d pnt
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::QHull::Point3d* pnt;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Point3d*) == 0x8);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x18
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: index and: prev
    char __padding1[0x4] = {};
    // public Technie.PhysicsCreator.QHull.Vertex prev
    // Size: 0x8
    // Offset: 0x20
    ::Technie::PhysicsCreator::QHull::Vertex* prev;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vertex*) == 0x8);
    // public Technie.PhysicsCreator.QHull.Vertex next
    // Size: 0x8
    // Offset: 0x28
    ::Technie::PhysicsCreator::QHull::Vertex* next;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vertex*) == 0x8);
    // public Technie.PhysicsCreator.QHull.Face face
    // Size: 0x8
    // Offset: 0x30
    ::Technie::PhysicsCreator::QHull::Face* face;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Face*) == 0x8);
    public:
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Point3d pnt
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Point3d*& dyn_pnt();
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Vertex prev
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vertex*& dyn_prev();
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Vertex next
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vertex*& dyn_next();
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Face face
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Face*& dyn_face();
    // public System.Void .ctor()
    // Offset: 0x503F1B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vertex* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Vertex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vertex*, creationType>()));
    }
    // public System.Void .ctor(System.Double x, System.Double y, System.Double z, System.Int32 idx)
    // Offset: 0x5041860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vertex* New_ctor(double x, double y, double z, int idx) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Vertex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vertex*, creationType>(x, y, z, idx)));
    }
  }; // Technie.PhysicsCreator.QHull.Vertex
  #pragma pack(pop)
  static check_size<sizeof(Vertex), 48 + sizeof(::Technie::PhysicsCreator::QHull::Face*)> __Technie_PhysicsCreator_QHull_VertexSizeCheck;
  static_assert(sizeof(Vertex) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vertex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vertex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
