// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Double
#include "System/Double.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Vector3d
  class Vector3d;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::Vector3d);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::Vector3d*, "Technie.PhysicsCreator.QHull", "Vector3d");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.Vector3d
  // [TokenAttribute] Offset: FFFFFFFF
  class Vector3d : public ::Il2CppObject {
    public:
    public:
    // public System.Double x
    // Size: 0x8
    // Offset: 0x10
    double x;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double y
    // Size: 0x8
    // Offset: 0x18
    double y;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double z
    // Size: 0x8
    // Offset: 0x20
    double z;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static private System.Double DOUBLE_PREC
    static constexpr const double DOUBLE_PREC = 2.220446049250313e-16;
    // Get static field: static private System.Double DOUBLE_PREC
    static double _get_DOUBLE_PREC();
    // Set static field: static private System.Double DOUBLE_PREC
    static void _set_DOUBLE_PREC(double value);
    // Get instance field reference: public System.Double x
    [[deprecated("Use field access instead!")]] double& dyn_x();
    // Get instance field reference: public System.Double y
    [[deprecated("Use field access instead!")]] double& dyn_y();
    // Get instance field reference: public System.Double z
    [[deprecated("Use field access instead!")]] double& dyn_z();
    // public System.Void .ctor()
    // Offset: 0x503C668
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vector3d* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Vector3d::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vector3d*, creationType>()));
    }
    // public System.Void .ctor(Technie.PhysicsCreator.QHull.Vector3d v)
    // Offset: 0x50414EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vector3d* New_ctor(::Technie::PhysicsCreator::QHull::Vector3d* v) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Vector3d::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vector3d*, creationType>(v)));
    }
    // public System.Void .ctor(System.Double x, System.Double y, System.Double z)
    // Offset: 0x5041528
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vector3d* New_ctor(double x, double y, double z) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Vector3d::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vector3d*, creationType>(x, y, z)));
    }
    // public System.Double get(System.Int32 i)
    // Offset: 0x503FE2C
    double get(int i);
    // public System.Void set(System.Int32 i, System.Double value)
    // Offset: 0x5041564
    void set(int i, double value);
    // public System.Void set(Technie.PhysicsCreator.QHull.Vector3d v1)
    // Offset: 0x503D754
    void set(::Technie::PhysicsCreator::QHull::Vector3d* v1);
    // public System.Void add(Technie.PhysicsCreator.QHull.Vector3d v1, Technie.PhysicsCreator.QHull.Vector3d v2)
    // Offset: 0x5041604
    void add(::Technie::PhysicsCreator::QHull::Vector3d* v1, ::Technie::PhysicsCreator::QHull::Vector3d* v2);
    // public System.Void add(Technie.PhysicsCreator.QHull.Vector3d v1)
    // Offset: 0x503BB04
    void add(::Technie::PhysicsCreator::QHull::Vector3d* v1);
    // public System.Void sub(Technie.PhysicsCreator.QHull.Vector3d v1, Technie.PhysicsCreator.QHull.Vector3d v2)
    // Offset: 0x503FECC
    void sub(::Technie::PhysicsCreator::QHull::Vector3d* v1, ::Technie::PhysicsCreator::QHull::Vector3d* v2);
    // public System.Void sub(Technie.PhysicsCreator.QHull.Vector3d v1)
    // Offset: 0x504163C
    void sub(::Technie::PhysicsCreator::QHull::Vector3d* v1);
    // public System.Void scale(System.Double s)
    // Offset: 0x503BB38
    void scale(double s);
    // public System.Void scale(System.Double s, Technie.PhysicsCreator.QHull.Vector3d v1)
    // Offset: 0x5041670
    void scale(double s, ::Technie::PhysicsCreator::QHull::Vector3d* v1);
    // public System.Double norm()
    // Offset: 0x503BF14
    double norm();
    // public System.Double normSquared()
    // Offset: 0x503FF58
    double normSquared();
    // public System.Double distance(Technie.PhysicsCreator.QHull.Vector3d v)
    // Offset: 0x503D634
    double distance(::Technie::PhysicsCreator::QHull::Vector3d* v);
    // public System.Double distanceSquared(Technie.PhysicsCreator.QHull.Vector3d v)
    // Offset: 0x503D6D8
    double distanceSquared(::Technie::PhysicsCreator::QHull::Vector3d* v);
    // public System.Double dot(Technie.PhysicsCreator.QHull.Vector3d v1)
    // Offset: 0x503C14C
    double dot(::Technie::PhysicsCreator::QHull::Vector3d* v1);
    // public System.Void normalize()
    // Offset: 0x503BE58
    void normalize();
    // public System.Void setZero()
    // Offset: 0x503BAF8
    void setZero();
    // public System.Void set(System.Double x, System.Double y, System.Double z)
    // Offset: 0x503D7B4
    void set(double x, double y, double z);
    // public System.Void cross(Technie.PhysicsCreator.QHull.Vector3d v1, Technie.PhysicsCreator.QHull.Vector3d v2)
    // Offset: 0x503FF04
    void cross(::Technie::PhysicsCreator::QHull::Vector3d* v1, ::Technie::PhysicsCreator::QHull::Vector3d* v2);
    // protected System.Void setRandom(System.Double lower, System.Double upper, System.Random generator)
    // Offset: 0x504169C
    void setRandom(double lower, double upper, ::System::Random* generator);
    // public System.String toString()
    // Offset: 0x5041724
    ::StringW toString();
  }; // Technie.PhysicsCreator.QHull.Vector3d
  #pragma pack(pop)
  static check_size<sizeof(Vector3d), 32 + sizeof(double)> __Technie_PhysicsCreator_QHull_Vector3dSizeCheck;
  static_assert(sizeof(Vector3d) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::get
// Il2CppName: get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)(int)>(&Technie::PhysicsCreator::QHull::Vector3d::get)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::set
// Il2CppName: set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(int, double)>(&Technie::PhysicsCreator::QHull::Vector3d::set)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, value});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::set
// Il2CppName: set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::set)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*, ::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::add)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::add)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::sub
// Il2CppName: sub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*, ::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::sub)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "sub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::sub
// Il2CppName: sub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::sub)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "sub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::scale
// Il2CppName: scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(double)>(&Technie::PhysicsCreator::QHull::Vector3d::scale)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::scale
// Il2CppName: scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(double, ::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::scale)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, v1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::norm
// Il2CppName: norm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)()>(&Technie::PhysicsCreator::QHull::Vector3d::norm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "norm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::normSquared
// Il2CppName: normSquared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)()>(&Technie::PhysicsCreator::QHull::Vector3d::normSquared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "normSquared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::distance
// Il2CppName: distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::distance)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::distanceSquared
// Il2CppName: distanceSquared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::distanceSquared)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "distanceSquared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::dot
// Il2CppName: dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::dot)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::normalize
// Il2CppName: normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)()>(&Technie::PhysicsCreator::QHull::Vector3d::normalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::setZero
// Il2CppName: setZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)()>(&Technie::PhysicsCreator::QHull::Vector3d::setZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "setZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::set
// Il2CppName: set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(double, double, double)>(&Technie::PhysicsCreator::QHull::Vector3d::set)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::cross
// Il2CppName: cross
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(::Technie::PhysicsCreator::QHull::Vector3d*, ::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Vector3d::cross)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "cross", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::setRandom
// Il2CppName: setRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Vector3d::*)(double, double, ::System::Random*)>(&Technie::PhysicsCreator::QHull::Vector3d::setRandom)> {
  static const MethodInfo* get() {
    static auto* lower = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* upper = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* generator = &::il2cpp_utils::GetClassFromName("System", "Random")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "setRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lower, upper, generator});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Vector3d::toString
// Il2CppName: toString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Technie::PhysicsCreator::QHull::Vector3d::*)()>(&Technie::PhysicsCreator::QHull::Vector3d::toString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Vector3d*), "toString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
