// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator::QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Vertex
  class Vertex;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: VertexList
  class VertexList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::VertexList);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::VertexList*, "Technie.PhysicsCreator.QHull", "VertexList");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.VertexList
  // [TokenAttribute] Offset: FFFFFFFF
  class VertexList : public ::Il2CppObject {
    public:
    public:
    // private Technie.PhysicsCreator.QHull.Vertex head
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::QHull::Vertex* head;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vertex*) == 0x8);
    // private Technie.PhysicsCreator.QHull.Vertex tail
    // Size: 0x8
    // Offset: 0x18
    ::Technie::PhysicsCreator::QHull::Vertex* tail;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vertex*) == 0x8);
    public:
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Vertex head
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vertex*& dyn_head();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Vertex tail
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vertex*& dyn_tail();
    // public System.Void clear()
    // Offset: 0x503F220
    void clear();
    // public System.Void add(Technie.PhysicsCreator.QHull.Vertex vtx)
    // Offset: 0x503D85C
    void add(::Technie::PhysicsCreator::QHull::Vertex* vtx);
    // public System.Void addAll(Technie.PhysicsCreator.QHull.Vertex vtx)
    // Offset: 0x5040678
    void addAll(::Technie::PhysicsCreator::QHull::Vertex* vtx);
    // public System.Void delete(Technie.PhysicsCreator.QHull.Vertex vtx)
    // Offset: 0x503D9BC
    void delete_(::Technie::PhysicsCreator::QHull::Vertex* vtx);
    // public System.Void delete(Technie.PhysicsCreator.QHull.Vertex vtx1, Technie.PhysicsCreator.QHull.Vertex vtx2)
    // Offset: 0x503DA88
    void delete_(::Technie::PhysicsCreator::QHull::Vertex* vtx1, ::Technie::PhysicsCreator::QHull::Vertex* vtx2);
    // public System.Void insertBefore(Technie.PhysicsCreator.QHull.Vertex vtx, Technie.PhysicsCreator.QHull.Vertex next)
    // Offset: 0x503D8CC
    void insertBefore(::Technie::PhysicsCreator::QHull::Vertex* vtx, ::Technie::PhysicsCreator::QHull::Vertex* next);
    // public Technie.PhysicsCreator.QHull.Vertex first()
    // Offset: 0x5041904
    ::Technie::PhysicsCreator::QHull::Vertex* first();
    // public System.Boolean isEmpty()
    // Offset: 0x5040D64
    bool isEmpty();
    // public System.Void .ctor()
    // Offset: 0x503DD58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VertexList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::VertexList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VertexList*, creationType>()));
    }
  }; // Technie.PhysicsCreator.QHull.VertexList
  #pragma pack(pop)
  static check_size<sizeof(VertexList), 24 + sizeof(::Technie::PhysicsCreator::QHull::Vertex*)> __Technie_PhysicsCreator_QHull_VertexListSizeCheck;
  static_assert(sizeof(VertexList) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::clear
// Il2CppName: clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)()>(&Technie::PhysicsCreator::QHull::VertexList::clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)(::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::VertexList::add)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::addAll
// Il2CppName: addAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)(::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::VertexList::addAll)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "addAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::delete_
// Il2CppName: delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)(::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::VertexList::delete_)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::delete_
// Il2CppName: delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::VertexList::delete_)> {
  static const MethodInfo* get() {
    static auto* vtx1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* vtx2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx1, vtx2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::insertBefore
// Il2CppName: insertBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::VertexList::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::VertexList::insertBefore)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* next = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "insertBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx, next});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::first
// Il2CppName: first
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Vertex* (Technie::PhysicsCreator::QHull::VertexList::*)()>(&Technie::PhysicsCreator::QHull::VertexList::first)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "first", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::isEmpty
// Il2CppName: isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::VertexList::*)()>(&Technie::PhysicsCreator::QHull::VertexList::isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::VertexList*), "isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::VertexList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
