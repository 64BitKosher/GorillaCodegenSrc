// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator::QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Face
  class Face;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: FaceList
  class FaceList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::FaceList);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::FaceList*, "Technie.PhysicsCreator.QHull", "FaceList");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.FaceList
  // [TokenAttribute] Offset: FFFFFFFF
  class FaceList : public ::Il2CppObject {
    public:
    public:
    // private Technie.PhysicsCreator.QHull.Face head
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::QHull::Face* head;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Face*) == 0x8);
    // private Technie.PhysicsCreator.QHull.Face tail
    // Size: 0x8
    // Offset: 0x18
    ::Technie::PhysicsCreator::QHull::Face* tail;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Face*) == 0x8);
    public:
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Face head
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Face*& dyn_head();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Face tail
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Face*& dyn_tail();
    // public System.Void clear()
    // Offset: 0x503D56C
    void clear();
    // public System.Void add(Technie.PhysicsCreator.QHull.Face vtx)
    // Offset: 0x503D50C
    void add(::Technie::PhysicsCreator::QHull::Face* vtx);
    // public Technie.PhysicsCreator.QHull.Face first()
    // Offset: 0x503D594
    ::Technie::PhysicsCreator::QHull::Face* first();
    // public System.Boolean isEmpty()
    // Offset: 0x503D59C
    bool isEmpty();
    // public System.Void .ctor()
    // Offset: 0x503D5AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FaceList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::FaceList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FaceList*, creationType>()));
    }
  }; // Technie.PhysicsCreator.QHull.FaceList
  #pragma pack(pop)
  static check_size<sizeof(FaceList), 24 + sizeof(::Technie::PhysicsCreator::QHull::Face*)> __Technie_PhysicsCreator_QHull_FaceListSizeCheck;
  static_assert(sizeof(FaceList) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::FaceList::clear
// Il2CppName: clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::FaceList::*)()>(&Technie::PhysicsCreator::QHull::FaceList::clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::FaceList*), "clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::FaceList::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::FaceList::*)(::Technie::PhysicsCreator::QHull::Face*)>(&Technie::PhysicsCreator::QHull::FaceList::add)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::FaceList*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::FaceList::first
// Il2CppName: first
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Face* (Technie::PhysicsCreator::QHull::FaceList::*)()>(&Technie::PhysicsCreator::QHull::FaceList::first)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::FaceList*), "first", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::FaceList::isEmpty
// Il2CppName: isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::FaceList::*)()>(&Technie::PhysicsCreator::QHull::FaceList::isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::FaceList*), "isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::FaceList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
