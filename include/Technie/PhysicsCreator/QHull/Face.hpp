// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator::QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: HalfEdge
  class HalfEdge;
  // Forward declaring type: Vector3d
  class Vector3d;
  // Forward declaring type: Point3d
  class Point3d;
  // Forward declaring type: Vertex
  class Vertex;
  // Forward declaring type: FaceList
  class FaceList;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Face
  class Face;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::Face);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::Face*, "Technie.PhysicsCreator.QHull", "Face");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.Face
  // [TokenAttribute] Offset: FFFFFFFF
  class Face : public ::Il2CppObject {
    public:
    public:
    // public Technie.PhysicsCreator.QHull.HalfEdge he0
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::QHull::HalfEdge* he0;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::HalfEdge*) == 0x8);
    // private Technie.PhysicsCreator.QHull.Vector3d normal
    // Size: 0x8
    // Offset: 0x18
    ::Technie::PhysicsCreator::QHull::Vector3d* normal;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vector3d*) == 0x8);
    // public System.Double area
    // Size: 0x8
    // Offset: 0x20
    double area;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Technie.PhysicsCreator.QHull.Point3d centroid
    // Size: 0x8
    // Offset: 0x28
    ::Technie::PhysicsCreator::QHull::Point3d* centroid;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Point3d*) == 0x8);
    // public System.Double planeOffset
    // Size: 0x8
    // Offset: 0x30
    double planeOffset;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x38
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numVerts
    // Size: 0x4
    // Offset: 0x3C
    int numVerts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Technie.PhysicsCreator.QHull.Face next
    // Size: 0x8
    // Offset: 0x40
    ::Technie::PhysicsCreator::QHull::Face* next;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Face*) == 0x8);
    // public System.Int32 mark
    // Size: 0x4
    // Offset: 0x48
    int mark;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mark and: outside
    char __padding8[0x4] = {};
    // public Technie.PhysicsCreator.QHull.Vertex outside
    // Size: 0x8
    // Offset: 0x50
    ::Technie::PhysicsCreator::QHull::Vertex* outside;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::Vertex*) == 0x8);
    public:
    // static field const value: static public System.Int32 VISIBLE
    static constexpr const int VISIBLE = 1;
    // Get static field: static public System.Int32 VISIBLE
    static int _get_VISIBLE();
    // Set static field: static public System.Int32 VISIBLE
    static void _set_VISIBLE(int value);
    // static field const value: static public System.Int32 NON_CONVEX
    static constexpr const int NON_CONVEX = 2;
    // Get static field: static public System.Int32 NON_CONVEX
    static int _get_NON_CONVEX();
    // Set static field: static public System.Int32 NON_CONVEX
    static void _set_NON_CONVEX(int value);
    // static field const value: static public System.Int32 DELETED
    static constexpr const int DELETED = 3;
    // Get static field: static public System.Int32 DELETED
    static int _get_DELETED();
    // Set static field: static public System.Int32 DELETED
    static void _set_DELETED(int value);
    // Get instance field reference: public Technie.PhysicsCreator.QHull.HalfEdge he0
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::HalfEdge*& dyn_he0();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Vector3d normal
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vector3d*& dyn_normal();
    // Get instance field reference: public System.Double area
    [[deprecated("Use field access instead!")]] double& dyn_area();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Point3d centroid
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Point3d*& dyn_centroid();
    // Get instance field reference: public System.Double planeOffset
    [[deprecated("Use field access instead!")]] double& dyn_planeOffset();
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public System.Int32 numVerts
    [[deprecated("Use field access instead!")]] int& dyn_numVerts();
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Face next
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Face*& dyn_next();
    // Get instance field reference: public System.Int32 mark
    [[deprecated("Use field access instead!")]] int& dyn_mark();
    // Get instance field reference: public Technie.PhysicsCreator.QHull.Vertex outside
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::Vertex*& dyn_outside();
    // public System.Void computeCentroid(Technie.PhysicsCreator.QHull.Point3d centroid)
    // Offset: 0x503BA78
    void computeCentroid(::Technie::PhysicsCreator::QHull::Point3d* centroid);
    // public System.Void computeNormal(Technie.PhysicsCreator.QHull.Vector3d normal, System.Double minArea)
    // Offset: 0x503BB54
    void computeNormal(::Technie::PhysicsCreator::QHull::Vector3d* normal, double minArea);
    // public System.Void computeNormal(Technie.PhysicsCreator.QHull.Vector3d normal)
    // Offset: 0x503BCAC
    void computeNormal(::Technie::PhysicsCreator::QHull::Vector3d* normal);
    // private System.Void computeNormalAndCentroid()
    // Offset: 0x503BF94
    void computeNormalAndCentroid();
    // private System.Void computeNormalAndCentroid(System.Double minArea)
    // Offset: 0x503C24C
    void computeNormalAndCentroid(double minArea);
    // static public Technie.PhysicsCreator.QHull.Face createTriangle(Technie.PhysicsCreator.QHull.Vertex v0, Technie.PhysicsCreator.QHull.Vertex v1, Technie.PhysicsCreator.QHull.Vertex v2)
    // Offset: 0x503C288
    static ::Technie::PhysicsCreator::QHull::Face* createTriangle(::Technie::PhysicsCreator::QHull::Vertex* v0, ::Technie::PhysicsCreator::QHull::Vertex* v1, ::Technie::PhysicsCreator::QHull::Vertex* v2);
    // static public Technie.PhysicsCreator.QHull.Face createTriangle(Technie.PhysicsCreator.QHull.Vertex v0, Technie.PhysicsCreator.QHull.Vertex v1, Technie.PhysicsCreator.QHull.Vertex v2, System.Double minArea)
    // Offset: 0x503C290
    static ::Technie::PhysicsCreator::QHull::Face* createTriangle(::Technie::PhysicsCreator::QHull::Vertex* v0, ::Technie::PhysicsCreator::QHull::Vertex* v1, ::Technie::PhysicsCreator::QHull::Vertex* v2, double minArea);
    // static public Technie.PhysicsCreator.QHull.Face create(Technie.PhysicsCreator.QHull.Vertex[] vtxArray, System.Int32[] indices)
    // Offset: 0x503C4F4
    static ::Technie::PhysicsCreator::QHull::Face* create(::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*> vtxArray, ::ArrayW<int> indices);
    // public System.Void .ctor()
    // Offset: 0x503C3F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>()));
    }
    // public Technie.PhysicsCreator.QHull.HalfEdge getEdge(System.Int32 i)
    // Offset: 0x503C678
    ::Technie::PhysicsCreator::QHull::HalfEdge* getEdge(int i);
    // public Technie.PhysicsCreator.QHull.HalfEdge getFirstEdge()
    // Offset: 0x503C6C4
    ::Technie::PhysicsCreator::QHull::HalfEdge* getFirstEdge();
    // public Technie.PhysicsCreator.QHull.HalfEdge findEdge(Technie.PhysicsCreator.QHull.Vertex vt, Technie.PhysicsCreator.QHull.Vertex vh)
    // Offset: 0x503C6CC
    ::Technie::PhysicsCreator::QHull::HalfEdge* findEdge(::Technie::PhysicsCreator::QHull::Vertex* vt, ::Technie::PhysicsCreator::QHull::Vertex* vh);
    // public System.Double distanceToPlane(Technie.PhysicsCreator.QHull.Point3d p)
    // Offset: 0x503C718
    double distanceToPlane(::Technie::PhysicsCreator::QHull::Point3d* p);
    // public Technie.PhysicsCreator.QHull.Vector3d getNormal()
    // Offset: 0x503C760
    ::Technie::PhysicsCreator::QHull::Vector3d* getNormal();
    // public Technie.PhysicsCreator.QHull.Point3d getCentroid()
    // Offset: 0x503C768
    ::Technie::PhysicsCreator::QHull::Point3d* getCentroid();
    // public System.Int32 numVertices()
    // Offset: 0x503C770
    int numVertices();
    // public System.String getVertexString()
    // Offset: 0x503C184
    ::StringW getVertexString();
    // public System.Void getVertexIndices(System.Int32[] idxs)
    // Offset: 0x503C778
    void getVertexIndices(::ArrayW<int> idxs);
    // private Technie.PhysicsCreator.QHull.Face connectHalfEdges(Technie.PhysicsCreator.QHull.HalfEdge hedgePrev, Technie.PhysicsCreator.QHull.HalfEdge hedge)
    // Offset: 0x503C7D0
    ::Technie::PhysicsCreator::QHull::Face* connectHalfEdges(::Technie::PhysicsCreator::QHull::HalfEdge* hedgePrev, ::Technie::PhysicsCreator::QHull::HalfEdge* hedge);
    // public System.Void checkConsistency()
    // Offset: 0x503C97C
    void checkConsistency();
    // public System.Int32 mergeAdjacentFace(Technie.PhysicsCreator.QHull.HalfEdge hedgeAdj, Technie.PhysicsCreator.QHull.Face[] discarded)
    // Offset: 0x503D024
    int mergeAdjacentFace(::Technie::PhysicsCreator::QHull::HalfEdge* hedgeAdj, ::ArrayW<::Technie::PhysicsCreator::QHull::Face*> discarded);
    // private System.Double areaSquared(Technie.PhysicsCreator.QHull.HalfEdge hedge0, Technie.PhysicsCreator.QHull.HalfEdge hedge1)
    // Offset: 0x503D248
    double areaSquared(::Technie::PhysicsCreator::QHull::HalfEdge* hedge0, ::Technie::PhysicsCreator::QHull::HalfEdge* hedge1);
    // public System.Void triangulate(Technie.PhysicsCreator.QHull.FaceList newFaces, System.Double minArea)
    // Offset: 0x503D300
    void triangulate(::Technie::PhysicsCreator::QHull::FaceList* newFaces, double minArea);
  }; // Technie.PhysicsCreator.QHull.Face
  #pragma pack(pop)
  static check_size<sizeof(Face), 80 + sizeof(::Technie::PhysicsCreator::QHull::Vertex*)> __Technie_PhysicsCreator_QHull_FaceSizeCheck;
  static_assert(sizeof(Face) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::computeCentroid
// Il2CppName: computeCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::Point3d*)>(&Technie::PhysicsCreator::QHull::Face::computeCentroid)> {
  static const MethodInfo* get() {
    static auto* centroid = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "computeCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{centroid});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::computeNormal
// Il2CppName: computeNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::Vector3d*, double)>(&Technie::PhysicsCreator::QHull::Face::computeNormal)> {
  static const MethodInfo* get() {
    static auto* normal = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "computeNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normal, minArea});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::computeNormal
// Il2CppName: computeNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::Vector3d*)>(&Technie::PhysicsCreator::QHull::Face::computeNormal)> {
  static const MethodInfo* get() {
    static auto* normal = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vector3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "computeNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normal});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::computeNormalAndCentroid
// Il2CppName: computeNormalAndCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::computeNormalAndCentroid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "computeNormalAndCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::computeNormalAndCentroid
// Il2CppName: computeNormalAndCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(double)>(&Technie::PhysicsCreator::QHull::Face::computeNormalAndCentroid)> {
  static const MethodInfo* get() {
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "computeNormalAndCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minArea});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::createTriangle
// Il2CppName: createTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Face* (*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::Face::createTriangle)> {
  static const MethodInfo* get() {
    static auto* v0 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "createTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v0, v1, v2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::createTriangle
// Il2CppName: createTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Face* (*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*, double)>(&Technie::PhysicsCreator::QHull::Face::createTriangle)> {
  static const MethodInfo* get() {
    static auto* v0 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "createTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v0, v1, v2, minArea});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::create
// Il2CppName: create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Face* (*)(::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>, ::ArrayW<int>)>(&Technie::PhysicsCreator::QHull::Face::create)> {
  static const MethodInfo* get() {
    static auto* vtxArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex"), 1)->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtxArray, indices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getEdge
// Il2CppName: getEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::HalfEdge* (Technie::PhysicsCreator::QHull::Face::*)(int)>(&Technie::PhysicsCreator::QHull::Face::getEdge)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getFirstEdge
// Il2CppName: getFirstEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::HalfEdge* (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::getFirstEdge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getFirstEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::findEdge
// Il2CppName: findEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::HalfEdge* (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::Face::findEdge)> {
  static const MethodInfo* get() {
    static auto* vt = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* vh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "findEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vt, vh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::distanceToPlane
// Il2CppName: distanceToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::Point3d*)>(&Technie::PhysicsCreator::QHull::Face::distanceToPlane)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "distanceToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getNormal
// Il2CppName: getNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Vector3d* (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::getNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getCentroid
// Il2CppName: getCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Point3d* (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::getCentroid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::numVertices
// Il2CppName: numVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::numVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "numVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getVertexString
// Il2CppName: getVertexString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::getVertexString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getVertexString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::getVertexIndices
// Il2CppName: getVertexIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(::ArrayW<int>)>(&Technie::PhysicsCreator::QHull::Face::getVertexIndices)> {
  static const MethodInfo* get() {
    static auto* idxs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "getVertexIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idxs});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::connectHalfEdges
// Il2CppName: connectHalfEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Face* (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::HalfEdge*, ::Technie::PhysicsCreator::QHull::HalfEdge*)>(&Technie::PhysicsCreator::QHull::Face::connectHalfEdges)> {
  static const MethodInfo* get() {
    static auto* hedgePrev = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    static auto* hedge = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "connectHalfEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hedgePrev, hedge});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::checkConsistency
// Il2CppName: checkConsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)()>(&Technie::PhysicsCreator::QHull::Face::checkConsistency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "checkConsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::mergeAdjacentFace
// Il2CppName: mergeAdjacentFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::HalfEdge*, ::ArrayW<::Technie::PhysicsCreator::QHull::Face*>)>(&Technie::PhysicsCreator::QHull::Face::mergeAdjacentFace)> {
  static const MethodInfo* get() {
    static auto* hedgeAdj = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    static auto* discarded = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "mergeAdjacentFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hedgeAdj, discarded});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::areaSquared
// Il2CppName: areaSquared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::HalfEdge*, ::Technie::PhysicsCreator::QHull::HalfEdge*)>(&Technie::PhysicsCreator::QHull::Face::areaSquared)> {
  static const MethodInfo* get() {
    static auto* hedge0 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    static auto* hedge1 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "areaSquared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hedge0, hedge1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::Face::triangulate
// Il2CppName: triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::Face::*)(::Technie::PhysicsCreator::QHull::FaceList*, double)>(&Technie::PhysicsCreator::QHull::Face::triangulate)> {
  static const MethodInfo* get() {
    static auto* newFaces = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "FaceList")->byval_arg;
    static auto* minArea = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::Face*), "triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newFaces, minArea});
  }
};
