// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Double
#include "System/Double.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator::QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: Vertex
  class Vertex;
  // Forward declaring type: Face
  class Face;
  // Forward declaring type: HalfEdge
  class HalfEdge;
  // Forward declaring type: FaceList
  class FaceList;
  // Forward declaring type: VertexList
  class VertexList;
  // Forward declaring type: Point3d
  class Point3d;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Forward declaring type: QuickHull3D
  class QuickHull3D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::QHull::QuickHull3D);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::QHull::QuickHull3D*, "Technie.PhysicsCreator.QHull", "QuickHull3D");
// Type namespace: Technie.PhysicsCreator.QHull
namespace Technie::PhysicsCreator::QHull {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.QHull.QuickHull3D
  // [TokenAttribute] Offset: FFFFFFFF
  class QuickHull3D : public ::Il2CppObject {
    public:
    public:
    // protected System.Int32 findIndex
    // Size: 0x4
    // Offset: 0x10
    int findIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: findIndex and: charLength
    char __padding0[0x4] = {};
    // protected System.Double charLength
    // Size: 0x8
    // Offset: 0x18
    double charLength;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // protected System.Boolean debug
    // Size: 0x1
    // Offset: 0x20
    bool debug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debug and: pointBuffer
    char __padding2[0x7] = {};
    // protected Technie.PhysicsCreator.QHull.Vertex[] pointBuffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*> pointBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>) == 0x8);
    // protected System.Int32[] vertexPointIndices
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> vertexPointIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private Technie.PhysicsCreator.QHull.Face[] discardedFaces
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Technie::PhysicsCreator::QHull::Face*> discardedFaces;
    // Field size check
    static_assert(sizeof(::ArrayW<::Technie::PhysicsCreator::QHull::Face*>) == 0x8);
    // private Technie.PhysicsCreator.QHull.Vertex[] maxVtxs
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*> maxVtxs;
    // Field size check
    static_assert(sizeof(::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>) == 0x8);
    // private Technie.PhysicsCreator.QHull.Vertex[] minVtxs
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*> minVtxs;
    // Field size check
    static_assert(sizeof(::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>) == 0x8);
    // protected System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.Face> faces
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::Face*>* faces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::Face*>*) == 0x8);
    // protected System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.HalfEdge> horizon
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>* horizon;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>*) == 0x8);
    // private Technie.PhysicsCreator.QHull.FaceList newFaces
    // Size: 0x8
    // Offset: 0x60
    ::Technie::PhysicsCreator::QHull::FaceList* newFaces;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::FaceList*) == 0x8);
    // private Technie.PhysicsCreator.QHull.VertexList unclaimed
    // Size: 0x8
    // Offset: 0x68
    ::Technie::PhysicsCreator::QHull::VertexList* unclaimed;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::VertexList*) == 0x8);
    // private Technie.PhysicsCreator.QHull.VertexList claimed
    // Size: 0x8
    // Offset: 0x70
    ::Technie::PhysicsCreator::QHull::VertexList* claimed;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::QHull::VertexList*) == 0x8);
    // protected System.Int32 numVertices
    // Size: 0x4
    // Offset: 0x78
    int numVertices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 numFaces
    // Size: 0x4
    // Offset: 0x7C
    int numFaces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 numPoints
    // Size: 0x4
    // Offset: 0x80
    int numPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numPoints and: explicitTolerance
    char __padding15[0x4] = {};
    // protected System.Double explicitTolerance
    // Size: 0x8
    // Offset: 0x88
    double explicitTolerance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // protected System.Double tolerance
    // Size: 0x8
    // Offset: 0x90
    double tolerance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static public System.Int32 CLOCKWISE
    static constexpr const int CLOCKWISE = 1;
    // Get static field: static public System.Int32 CLOCKWISE
    static int _get_CLOCKWISE();
    // Set static field: static public System.Int32 CLOCKWISE
    static void _set_CLOCKWISE(int value);
    // static field const value: static public System.Int32 INDEXED_FROM_ONE
    static constexpr const int INDEXED_FROM_ONE = 2;
    // Get static field: static public System.Int32 INDEXED_FROM_ONE
    static int _get_INDEXED_FROM_ONE();
    // Set static field: static public System.Int32 INDEXED_FROM_ONE
    static void _set_INDEXED_FROM_ONE(int value);
    // static field const value: static public System.Int32 INDEXED_FROM_ZERO
    static constexpr const int INDEXED_FROM_ZERO = 4;
    // Get static field: static public System.Int32 INDEXED_FROM_ZERO
    static int _get_INDEXED_FROM_ZERO();
    // Set static field: static public System.Int32 INDEXED_FROM_ZERO
    static void _set_INDEXED_FROM_ZERO(int value);
    // static field const value: static public System.Int32 POINT_RELATIVE
    static constexpr const int POINT_RELATIVE = 8;
    // Get static field: static public System.Int32 POINT_RELATIVE
    static int _get_POINT_RELATIVE();
    // Set static field: static public System.Int32 POINT_RELATIVE
    static void _set_POINT_RELATIVE(int value);
    // static field const value: static public System.Double AUTOMATIC_TOLERANCE
    static constexpr const double AUTOMATIC_TOLERANCE = -1;
    // Get static field: static public System.Double AUTOMATIC_TOLERANCE
    static double _get_AUTOMATIC_TOLERANCE();
    // Set static field: static public System.Double AUTOMATIC_TOLERANCE
    static void _set_AUTOMATIC_TOLERANCE(double value);
    // static field const value: static private System.Double DOUBLE_PREC
    static constexpr const double DOUBLE_PREC = 2.220446049250313e-16;
    // Get static field: static private System.Double DOUBLE_PREC
    static double _get_DOUBLE_PREC();
    // Set static field: static private System.Double DOUBLE_PREC
    static void _set_DOUBLE_PREC(double value);
    // static field const value: static private System.Int32 NONCONVEX_WRT_LARGER_FACE
    static constexpr const int NONCONVEX_WRT_LARGER_FACE = 1;
    // Get static field: static private System.Int32 NONCONVEX_WRT_LARGER_FACE
    static int _get_NONCONVEX_WRT_LARGER_FACE();
    // Set static field: static private System.Int32 NONCONVEX_WRT_LARGER_FACE
    static void _set_NONCONVEX_WRT_LARGER_FACE(int value);
    // static field const value: static private System.Int32 NONCONVEX
    static constexpr const int NONCONVEX = 2;
    // Get static field: static private System.Int32 NONCONVEX
    static int _get_NONCONVEX();
    // Set static field: static private System.Int32 NONCONVEX
    static void _set_NONCONVEX(int value);
    // Get instance field reference: protected System.Int32 findIndex
    [[deprecated("Use field access instead!")]] int& dyn_findIndex();
    // Get instance field reference: protected System.Double charLength
    [[deprecated("Use field access instead!")]] double& dyn_charLength();
    // Get instance field reference: protected System.Boolean debug
    [[deprecated("Use field access instead!")]] bool& dyn_debug();
    // Get instance field reference: protected Technie.PhysicsCreator.QHull.Vertex[] pointBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>& dyn_pointBuffer();
    // Get instance field reference: protected System.Int32[] vertexPointIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_vertexPointIndices();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Face[] discardedFaces
    [[deprecated("Use field access instead!")]] ::ArrayW<::Technie::PhysicsCreator::QHull::Face*>& dyn_discardedFaces();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Vertex[] maxVtxs
    [[deprecated("Use field access instead!")]] ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>& dyn_maxVtxs();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.Vertex[] minVtxs
    [[deprecated("Use field access instead!")]] ::ArrayW<::Technie::PhysicsCreator::QHull::Vertex*>& dyn_minVtxs();
    // Get instance field reference: protected System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.Face> faces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::Face*>*& dyn_faces();
    // Get instance field reference: protected System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.HalfEdge> horizon
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>*& dyn_horizon();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.FaceList newFaces
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::FaceList*& dyn_newFaces();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.VertexList unclaimed
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::VertexList*& dyn_unclaimed();
    // Get instance field reference: private Technie.PhysicsCreator.QHull.VertexList claimed
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::QHull::VertexList*& dyn_claimed();
    // Get instance field reference: protected System.Int32 numVertices
    [[deprecated("Use field access instead!")]] int& dyn_numVertices();
    // Get instance field reference: protected System.Int32 numFaces
    [[deprecated("Use field access instead!")]] int& dyn_numFaces();
    // Get instance field reference: protected System.Int32 numPoints
    [[deprecated("Use field access instead!")]] int& dyn_numPoints();
    // Get instance field reference: protected System.Double explicitTolerance
    [[deprecated("Use field access instead!")]] double& dyn_explicitTolerance();
    // Get instance field reference: protected System.Double tolerance
    [[deprecated("Use field access instead!")]] double& dyn_tolerance();
    // public System.Boolean getDebug()
    // Offset: 0x503D7C0
    bool getDebug();
    // public System.Void setDebug(System.Boolean enable)
    // Offset: 0x503D7C8
    void setDebug(bool enable);
    // public System.Double getDistanceTolerance()
    // Offset: 0x503D7D4
    double getDistanceTolerance();
    // public System.Void setExplicitDistanceTolerance(System.Double tol)
    // Offset: 0x503D7DC
    void setExplicitDistanceTolerance(double tol);
    // public System.Double getExplicitDistanceTolerance()
    // Offset: 0x503D7E4
    double getExplicitDistanceTolerance();
    // private System.Void addPointToFace(Technie.PhysicsCreator.QHull.Vertex vtx, Technie.PhysicsCreator.QHull.Face face)
    // Offset: 0x503D7EC
    void addPointToFace(::Technie::PhysicsCreator::QHull::Vertex* vtx, ::Technie::PhysicsCreator::QHull::Face* face);
    // private System.Void removePointFromFace(Technie.PhysicsCreator.QHull.Vertex vtx, Technie.PhysicsCreator.QHull.Face face)
    // Offset: 0x503D950
    void removePointFromFace(::Technie::PhysicsCreator::QHull::Vertex* vtx, ::Technie::PhysicsCreator::QHull::Face* face);
    // private Technie.PhysicsCreator.QHull.Vertex removeAllPointsFromFace(Technie.PhysicsCreator.QHull.Face face)
    // Offset: 0x503DA14
    ::Technie::PhysicsCreator::QHull::Vertex* removeAllPointsFromFace(::Technie::PhysicsCreator::QHull::Face* face);
    // public System.Void .ctor()
    // Offset: 0x503DAF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuickHull3D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::QuickHull3D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuickHull3D*, creationType>()));
    }
    // public System.Void .ctor(System.Double[] coords)
    // Offset: 0x503DD60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuickHull3D* New_ctor(::ArrayW<double> coords) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::QuickHull3D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuickHull3D*, creationType>(coords)));
    }
    // public System.Void .ctor(Technie.PhysicsCreator.QHull.Point3d[] points)
    // Offset: 0x503E0CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuickHull3D* New_ctor(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> points) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::QHull::QuickHull3D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuickHull3D*, creationType>(points)));
    }
    // private Technie.PhysicsCreator.QHull.HalfEdge findHalfEdge(Technie.PhysicsCreator.QHull.Vertex tail, Technie.PhysicsCreator.QHull.Vertex head)
    // Offset: 0x503E408
    ::Technie::PhysicsCreator::QHull::HalfEdge* findHalfEdge(::Technie::PhysicsCreator::QHull::Vertex* tail, ::Technie::PhysicsCreator::QHull::Vertex* head);
    // protected System.Void setHull(System.Double[] coords, System.Int32 nump, System.Int32[][] faceIndices, System.Int32 numf)
    // Offset: 0x503E570
    void setHull(::ArrayW<double> coords, int nump, ::ArrayW<::ArrayW<int>> faceIndices, int numf);
    // public System.Void build(System.Double[] coords)
    // Offset: 0x503EE50
    void build(::ArrayW<double> coords);
    // public System.Void build(System.Double[] coords, System.Int32 nump)
    // Offset: 0x503DFF4
    void build(::ArrayW<double> coords, int nump);
    // public System.Void build(Technie.PhysicsCreator.QHull.Point3d[] points)
    // Offset: 0x503EEC8
    void build(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> points);
    // public System.Void build(Technie.PhysicsCreator.QHull.Point3d[] points, System.Int32 nump)
    // Offset: 0x503E348
    void build(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> points, int nump);
    // public System.Void triangulate()
    // Offset: 0x503EF68
    void triangulate();
    // protected System.Void initBuffers(System.Int32 nump)
    // Offset: 0x503E6EC
    void initBuffers(int nump);
    // protected System.Void setPoints(System.Double[] coords, System.Int32 nump)
    // Offset: 0x503E938
    void setPoints(::ArrayW<double> coords, int nump);
    // protected System.Void setPoints(Technie.PhysicsCreator.QHull.Point3d[] pnts, System.Int32 nump)
    // Offset: 0x503EEE0
    void setPoints(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> pnts, int nump);
    // protected System.Void computeMaxAndMin()
    // Offset: 0x503E9E0
    void computeMaxAndMin();
    // protected System.Void createInitialSimplex()
    // Offset: 0x503F248
    void createInitialSimplex();
    // public System.Int32 getNumVertices()
    // Offset: 0x503FF78
    int getNumVertices();
    // public Technie.PhysicsCreator.QHull.Point3d[] getVertices()
    // Offset: 0x503FF80
    ::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> getVertices();
    // public System.Int32 getVertices(System.Double[] coords)
    // Offset: 0x504009C
    int getVertices(::ArrayW<double> coords);
    // public System.Int32[] getVertexPointIndices()
    // Offset: 0x5040168
    ::ArrayW<int> getVertexPointIndices();
    // public System.Int32 getNumFaces()
    // Offset: 0x5040210
    int getNumFaces();
    // public System.Int32[][] getFaces()
    // Offset: 0x5040258
    ::ArrayW<::ArrayW<int>> getFaces();
    // public System.Int32[][] getFaces(System.Int32 indexFlags)
    // Offset: 0x5040260
    ::ArrayW<::ArrayW<int>> getFaces(int indexFlags);
    // private System.Void getFaceIndices(System.Int32[] indices, Technie.PhysicsCreator.QHull.Face face, System.Int32 flags)
    // Offset: 0x5040484
    void getFaceIndices(::ArrayW<int> indices, ::Technie::PhysicsCreator::QHull::Face* face, int flags);
    // protected System.Void resolveUnclaimedPoints(Technie.PhysicsCreator.QHull.FaceList newFaces)
    // Offset: 0x504051C
    void resolveUnclaimedPoints(::Technie::PhysicsCreator::QHull::FaceList* newFaces);
    // protected System.Void deleteFacePoints(Technie.PhysicsCreator.QHull.Face face, Technie.PhysicsCreator.QHull.Face absorbingFace)
    // Offset: 0x50405DC
    void deleteFacePoints(::Technie::PhysicsCreator::QHull::Face* face, ::Technie::PhysicsCreator::QHull::Face* absorbingFace);
    // protected System.Double oppFaceDistance(Technie.PhysicsCreator.QHull.HalfEdge he)
    // Offset: 0x50406E0
    double oppFaceDistance(::Technie::PhysicsCreator::QHull::HalfEdge* he);
    // private System.Boolean doAdjacentMerge(Technie.PhysicsCreator.QHull.Face face, System.Int32 mergeType)
    // Offset: 0x5040710
    bool doAdjacentMerge(::Technie::PhysicsCreator::QHull::Face* face, int mergeType);
    // protected System.Void calculateHorizon(Technie.PhysicsCreator.QHull.Point3d eyePnt, Technie.PhysicsCreator.QHull.HalfEdge edge0, Technie.PhysicsCreator.QHull.Face face, System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.HalfEdge> horizon)
    // Offset: 0x5040884
    void calculateHorizon(::Technie::PhysicsCreator::QHull::Point3d* eyePnt, ::Technie::PhysicsCreator::QHull::HalfEdge* edge0, ::Technie::PhysicsCreator::QHull::Face* face, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>* horizon);
    // private Technie.PhysicsCreator.QHull.HalfEdge addAdjoiningFace(Technie.PhysicsCreator.QHull.Vertex eyeVtx, Technie.PhysicsCreator.QHull.HalfEdge he)
    // Offset: 0x50409D8
    ::Technie::PhysicsCreator::QHull::HalfEdge* addAdjoiningFace(::Technie::PhysicsCreator::QHull::Vertex* eyeVtx, ::Technie::PhysicsCreator::QHull::HalfEdge* he);
    // protected System.Void addNewFaces(Technie.PhysicsCreator.QHull.FaceList newFaces, Technie.PhysicsCreator.QHull.Vertex eyeVtx, System.Collections.Generic.List`1<Technie.PhysicsCreator.QHull.HalfEdge> horizon)
    // Offset: 0x5040ADC
    void addNewFaces(::Technie::PhysicsCreator::QHull::FaceList* newFaces, ::Technie::PhysicsCreator::QHull::Vertex* eyeVtx, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>* horizon);
    // protected Technie.PhysicsCreator.QHull.Vertex nextPointToAdd()
    // Offset: 0x5040CE4
    ::Technie::PhysicsCreator::QHull::Vertex* nextPointToAdd();
    // protected System.Void addPointToHull(Technie.PhysicsCreator.QHull.Vertex eyeVtx)
    // Offset: 0x5040D74
    void addPointToHull(::Technie::PhysicsCreator::QHull::Vertex* eyeVtx);
    // protected System.Void buildHull()
    // Offset: 0x503EE80
    void buildHull();
    // private System.Void markFaceVertices(Technie.PhysicsCreator.QHull.Face face, System.Int32 mark)
    // Offset: 0x5041094
    void markFaceVertices(::Technie::PhysicsCreator::QHull::Face* face, int mark);
    // protected System.Void reindexFacesAndVertices()
    // Offset: 0x5040EEC
    void reindexFacesAndVertices();
    // protected System.Boolean checkFaceConvexity(Technie.PhysicsCreator.QHull.Face face, System.Double tol)
    // Offset: 0x50410CC
    bool checkFaceConvexity(::Technie::PhysicsCreator::QHull::Face* face, double tol);
    // protected System.Boolean checkFaces(System.Double tol)
    // Offset: 0x504116C
    bool checkFaces(double tol);
    // public System.Boolean check()
    // Offset: 0x50412E0
    bool check();
    // public System.Boolean check(System.Double tol)
    // Offset: 0x50412E8
    bool check(double tol);
  }; // Technie.PhysicsCreator.QHull.QuickHull3D
  #pragma pack(pop)
  static check_size<sizeof(QuickHull3D), 144 + sizeof(double)> __Technie_PhysicsCreator_QHull_QuickHull3DSizeCheck;
  static_assert(sizeof(QuickHull3D) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getDebug
// Il2CppName: getDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getDebug)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::setDebug
// Il2CppName: setDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(bool)>(&Technie::PhysicsCreator::QHull::QuickHull3D::setDebug)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "setDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getDistanceTolerance
// Il2CppName: getDistanceTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getDistanceTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getDistanceTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::setExplicitDistanceTolerance
// Il2CppName: setExplicitDistanceTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(double)>(&Technie::PhysicsCreator::QHull::QuickHull3D::setExplicitDistanceTolerance)> {
  static const MethodInfo* get() {
    static auto* tol = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "setExplicitDistanceTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tol});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getExplicitDistanceTolerance
// Il2CppName: getExplicitDistanceTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getExplicitDistanceTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getExplicitDistanceTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::addPointToFace
// Il2CppName: addPointToFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Face*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::addPointToFace)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "addPointToFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx, face});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::removePointFromFace
// Il2CppName: removePointFromFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Face*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::removePointFromFace)> {
  static const MethodInfo* get() {
    static auto* vtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "removePointFromFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vtx, face});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::removeAllPointsFromFace
// Il2CppName: removeAllPointsFromFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Vertex* (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Face*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::removeAllPointsFromFace)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "removeAllPointsFromFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::findHalfEdge
// Il2CppName: findHalfEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::HalfEdge* (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::findHalfEdge)> {
  static const MethodInfo* get() {
    static auto* tail = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* head = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "findHalfEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tail, head});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::setHull
// Il2CppName: setHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<double>, int, ::ArrayW<::ArrayW<int>>, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::setHull)> {
  static const MethodInfo* get() {
    static auto* coords = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->byval_arg;
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceIndices = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)->byval_arg;
    static auto* numf = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "setHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coords, nump, faceIndices, numf});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::build
// Il2CppName: build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<double>)>(&Technie::PhysicsCreator::QHull::QuickHull3D::build)> {
  static const MethodInfo* get() {
    static auto* coords = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coords});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::build
// Il2CppName: build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<double>, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::build)> {
  static const MethodInfo* get() {
    static auto* coords = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->byval_arg;
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coords, nump});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::build
// Il2CppName: build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*>)>(&Technie::PhysicsCreator::QHull::QuickHull3D::build)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::build
// Il2CppName: build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*>, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::build)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d"), 1)->byval_arg;
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, nump});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::triangulate
// Il2CppName: triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::triangulate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::initBuffers
// Il2CppName: initBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::initBuffers)> {
  static const MethodInfo* get() {
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "initBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nump});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::setPoints
// Il2CppName: setPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<double>, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::setPoints)> {
  static const MethodInfo* get() {
    static auto* coords = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->byval_arg;
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "setPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coords, nump});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::setPoints
// Il2CppName: setPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*>, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::setPoints)> {
  static const MethodInfo* get() {
    static auto* pnts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d"), 1)->byval_arg;
    static auto* nump = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "setPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pnts, nump});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::computeMaxAndMin
// Il2CppName: computeMaxAndMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::computeMaxAndMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "computeMaxAndMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::createInitialSimplex
// Il2CppName: createInitialSimplex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::createInitialSimplex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "createInitialSimplex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getNumVertices
// Il2CppName: getNumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getNumVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getNumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getVertices
// Il2CppName: getVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Technie::PhysicsCreator::QHull::Point3d*> (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getVertices
// Il2CppName: getVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<double>)>(&Technie::PhysicsCreator::QHull::QuickHull3D::getVertices)> {
  static const MethodInfo* get() {
    static auto* coords = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coords});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getVertexPointIndices
// Il2CppName: getVertexPointIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getVertexPointIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getVertexPointIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getNumFaces
// Il2CppName: getNumFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getNumFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getNumFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getFaces
// Il2CppName: getFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<int>> (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::getFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getFaces
// Il2CppName: getFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<int>> (Technie::PhysicsCreator::QHull::QuickHull3D::*)(int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::getFaces)> {
  static const MethodInfo* get() {
    static auto* indexFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexFlags});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::getFaceIndices
// Il2CppName: getFaceIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::ArrayW<int>, ::Technie::PhysicsCreator::QHull::Face*, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::getFaceIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "getFaceIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, face, flags});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::resolveUnclaimedPoints
// Il2CppName: resolveUnclaimedPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::FaceList*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::resolveUnclaimedPoints)> {
  static const MethodInfo* get() {
    static auto* newFaces = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "FaceList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "resolveUnclaimedPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newFaces});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::deleteFacePoints
// Il2CppName: deleteFacePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Face*, ::Technie::PhysicsCreator::QHull::Face*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::deleteFacePoints)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* absorbingFace = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "deleteFacePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face, absorbingFace});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::oppFaceDistance
// Il2CppName: oppFaceDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::HalfEdge*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::oppFaceDistance)> {
  static const MethodInfo* get() {
    static auto* he = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "oppFaceDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{he});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::doAdjacentMerge
// Il2CppName: doAdjacentMerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Face*, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::doAdjacentMerge)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* mergeType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "doAdjacentMerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face, mergeType});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::calculateHorizon
// Il2CppName: calculateHorizon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Point3d*, ::Technie::PhysicsCreator::QHull::HalfEdge*, ::Technie::PhysicsCreator::QHull::Face*, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::calculateHorizon)> {
  static const MethodInfo* get() {
    static auto* eyePnt = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Point3d")->byval_arg;
    static auto* edge0 = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* horizon = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "calculateHorizon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyePnt, edge0, face, horizon});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::addAdjoiningFace
// Il2CppName: addAdjoiningFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::HalfEdge* (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Vertex*, ::Technie::PhysicsCreator::QHull::HalfEdge*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::addAdjoiningFace)> {
  static const MethodInfo* get() {
    static auto* eyeVtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* he = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "addAdjoiningFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeVtx, he});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::addNewFaces
// Il2CppName: addNewFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::FaceList*, ::Technie::PhysicsCreator::QHull::Vertex*, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::QHull::HalfEdge*>*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::addNewFaces)> {
  static const MethodInfo* get() {
    static auto* newFaces = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "FaceList")->byval_arg;
    static auto* eyeVtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    static auto* horizon = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "HalfEdge")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "addNewFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newFaces, eyeVtx, horizon});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::nextPointToAdd
// Il2CppName: nextPointToAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::QHull::Vertex* (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::nextPointToAdd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "nextPointToAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::addPointToHull
// Il2CppName: addPointToHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Vertex*)>(&Technie::PhysicsCreator::QHull::QuickHull3D::addPointToHull)> {
  static const MethodInfo* get() {
    static auto* eyeVtx = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Vertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "addPointToHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeVtx});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::buildHull
// Il2CppName: buildHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::buildHull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "buildHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::markFaceVertices
// Il2CppName: markFaceVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Face*, int)>(&Technie::PhysicsCreator::QHull::QuickHull3D::markFaceVertices)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* mark = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "markFaceVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face, mark});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::reindexFacesAndVertices
// Il2CppName: reindexFacesAndVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::reindexFacesAndVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "reindexFacesAndVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::checkFaceConvexity
// Il2CppName: checkFaceConvexity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)(::Technie::PhysicsCreator::QHull::Face*, double)>(&Technie::PhysicsCreator::QHull::QuickHull3D::checkFaceConvexity)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.QHull", "Face")->byval_arg;
    static auto* tol = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "checkFaceConvexity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face, tol});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::checkFaces
// Il2CppName: checkFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)(double)>(&Technie::PhysicsCreator::QHull::QuickHull3D::checkFaces)> {
  static const MethodInfo* get() {
    static auto* tol = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "checkFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tol});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::check
// Il2CppName: check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)()>(&Technie::PhysicsCreator::QHull::QuickHull3D::check)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::QHull::QuickHull3D::check
// Il2CppName: check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::QHull::QuickHull3D::*)(double)>(&Technie::PhysicsCreator::QHull::QuickHull3D::check)> {
  static const MethodInfo* get() {
    static auto* tol = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::QHull::QuickHull3D*), "check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tol});
  }
};
