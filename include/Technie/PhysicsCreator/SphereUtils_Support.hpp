// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Technie.PhysicsCreator.SphereUtils
#include "Technie/PhysicsCreator/SphereUtils.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::SphereUtils::Support);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::SphereUtils::Support*, "Technie.PhysicsCreator", "SphereUtils/Support");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.SphereUtils/Support
  // [TokenAttribute] Offset: FFFFFFFF
  class SphereUtils::Support : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 m_iQuantity
    // Size: 0x4
    // Offset: 0x10
    int m_iQuantity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_iQuantity and: m_aiIndex
    char __padding0[0x4] = {};
    // public System.Int32[] m_aiIndex
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> m_aiIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 m_iQuantity
    [[deprecated("Use field access instead!")]] int& dyn_m_iQuantity();
    // Get instance field reference: public System.Int32[] m_aiIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_aiIndex();
    // public System.Boolean Contains(System.Int32 iIndex, System.Collections.Generic.List`1<UnityEngine.Vector3> points)
    // Offset: 0x5035344
    bool Contains(int iIndex, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points);
    // public System.Void .ctor()
    // Offset: 0x50351C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SphereUtils::Support* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::SphereUtils::Support::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SphereUtils::Support*, creationType>()));
    }
  }; // Technie.PhysicsCreator.SphereUtils/Support
  #pragma pack(pop)
  static check_size<sizeof(SphereUtils::Support), 24 + sizeof(::ArrayW<int>)> __Technie_PhysicsCreator_SphereUtils_SupportSizeCheck;
  static_assert(sizeof(SphereUtils::Support) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::Support::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::SphereUtils::Support::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Technie::PhysicsCreator::SphereUtils::Support::Contains)> {
  static const MethodInfo* get() {
    static auto* iIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils::Support*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iIndex, points});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::Support::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
