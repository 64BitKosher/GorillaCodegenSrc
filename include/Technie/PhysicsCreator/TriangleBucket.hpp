// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: Triangle
  class Triangle;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: TriangleBucket
  class TriangleBucket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::TriangleBucket);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::TriangleBucket*, "Technie.PhysicsCreator", "TriangleBucket");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.TriangleBucket
  // [TokenAttribute] Offset: FFFFFFFF
  class TriangleBucket : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<Technie.PhysicsCreator.Triangle> triangles
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::Triangle*>* triangles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::Triangle*>*) == 0x8);
    // private UnityEngine.Vector3 averagedNormal
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 averagedNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 averagedCenter
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 averagedCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single totalArea
    // Size: 0x4
    // Offset: 0x30
    float totalArea;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<Technie.PhysicsCreator.Triangle> triangles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::Triangle*>*& dyn_triangles();
    // Get instance field reference: private UnityEngine.Vector3 averagedNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_averagedNormal();
    // Get instance field reference: private UnityEngine.Vector3 averagedCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_averagedCenter();
    // Get instance field reference: private System.Single totalArea
    [[deprecated("Use field access instead!")]] float& dyn_totalArea();
    // public System.Single get_Area()
    // Offset: 0x5023C48
    float get_Area();
    // public System.Void .ctor(Technie.PhysicsCreator.Triangle initialTriangle)
    // Offset: 0x5023C50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriangleBucket* New_ctor(::Technie::PhysicsCreator::Triangle* initialTriangle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::TriangleBucket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriangleBucket*, creationType>(initialTriangle)));
    }
    // public System.Void Add(Technie.PhysicsCreator.Triangle t)
    // Offset: 0x5024124
    void Add(::Technie::PhysicsCreator::Triangle* t);
    // public System.Void Add(Technie.PhysicsCreator.TriangleBucket otherBucket)
    // Offset: 0x50241DC
    void Add(::Technie::PhysicsCreator::TriangleBucket* otherBucket);
    // private System.Void CalculateNormal()
    // Offset: 0x5023D6C
    void CalculateNormal();
    // public UnityEngine.Vector3 GetAverageNormal()
    // Offset: 0x50243AC
    ::UnityEngine::Vector3 GetAverageNormal();
    // public UnityEngine.Vector3 GetAverageCenter()
    // Offset: 0x50243B8
    ::UnityEngine::Vector3 GetAverageCenter();
    // private System.Void CalcTotalArea()
    // Offset: 0x5023FE0
    void CalcTotalArea();
  }; // Technie.PhysicsCreator.TriangleBucket
  #pragma pack(pop)
  static check_size<sizeof(TriangleBucket), 48 + sizeof(float)> __Technie_PhysicsCreator_TriangleBucketSizeCheck;
  static_assert(sizeof(TriangleBucket) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::get_Area
// Il2CppName: get_Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Technie::PhysicsCreator::TriangleBucket::*)()>(&Technie::PhysicsCreator::TriangleBucket::get_Area)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "get_Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::TriangleBucket::*)(::Technie::PhysicsCreator::Triangle*)>(&Technie::PhysicsCreator::TriangleBucket::Add)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "Triangle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::TriangleBucket::*)(::Technie::PhysicsCreator::TriangleBucket*)>(&Technie::PhysicsCreator::TriangleBucket::Add)> {
  static const MethodInfo* get() {
    static auto* otherBucket = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "TriangleBucket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherBucket});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::CalculateNormal
// Il2CppName: CalculateNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::TriangleBucket::*)()>(&Technie::PhysicsCreator::TriangleBucket::CalculateNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "CalculateNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::GetAverageNormal
// Il2CppName: GetAverageNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Technie::PhysicsCreator::TriangleBucket::*)()>(&Technie::PhysicsCreator::TriangleBucket::GetAverageNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "GetAverageNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::GetAverageCenter
// Il2CppName: GetAverageCenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Technie::PhysicsCreator::TriangleBucket::*)()>(&Technie::PhysicsCreator::TriangleBucket::GetAverageCenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "GetAverageCenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::TriangleBucket::CalcTotalArea
// Il2CppName: CalcTotalArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::TriangleBucket::*)()>(&Technie::PhysicsCreator::TriangleBucket::CalcTotalArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::TriangleBucket*), "CalcTotalArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
