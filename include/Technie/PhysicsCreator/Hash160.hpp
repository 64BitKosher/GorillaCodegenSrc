// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: Hash160
  class Hash160;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::Hash160);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::Hash160*, "Technie.PhysicsCreator", "Hash160");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.Hash160
  // [TokenAttribute] Offset: FFFFFFFF
  class Hash160 : public ::Il2CppObject {
    public:
    public:
    // public System.Byte[] data
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<uint8_t>
    constexpr operator ::ArrayW<uint8_t>() const noexcept {
      return data;
    }
    // Get instance field reference: public System.Byte[] data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_data();
    // public System.Void .ctor()
    // Offset: 0x5027FF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hash160* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::Hash160::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hash160*, creationType>()));
    }
    // public System.Void .ctor(System.Byte[] data)
    // Offset: 0x502805C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hash160* New_ctor(::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::Hash160::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hash160*, creationType>(data)));
    }
    // public System.Boolean IsValid()
    // Offset: 0x502808C
    bool IsValid();
    // public override System.Int32 GetHashCode()
    // Offset: 0x50280AC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x5028110
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // Technie.PhysicsCreator.Hash160
  #pragma pack(pop)
  static check_size<sizeof(Hash160), 16 + sizeof(::ArrayW<uint8_t>)> __Technie_PhysicsCreator_Hash160SizeCheck;
  static_assert(sizeof(Hash160) == 0x18);
  // static public System.Boolean op_Equality(Technie.PhysicsCreator.Hash160 lhs, Technie.PhysicsCreator.Hash160 rhs)
  // Offset: 0x5028228
  bool operator ==(::Technie::PhysicsCreator::Hash160* lhs, ::Technie::PhysicsCreator::Hash160& rhs);
  // static public System.Boolean op_Inequality(Technie.PhysicsCreator.Hash160 lhs, Technie.PhysicsCreator.Hash160 rhs)
  // Offset: 0x5028244
  bool operator !=(::Technie::PhysicsCreator::Hash160* lhs, ::Technie::PhysicsCreator::Hash160& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::Hash160::*)()>(&Technie::PhysicsCreator::Hash160::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Hash160*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::Hash160::*)()>(&Technie::PhysicsCreator::Hash160::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Hash160*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::Hash160::*)(::Il2CppObject*)>(&Technie::PhysicsCreator::Hash160::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Hash160*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Technie::PhysicsCreator::Hash160::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
