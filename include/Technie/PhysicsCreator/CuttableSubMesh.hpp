// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: CuttableSubMesh
  class CuttableSubMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::CuttableSubMesh);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::CuttableSubMesh*, "Technie.PhysicsCreator", "CuttableSubMesh");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.CuttableSubMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class CuttableSubMesh : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* normals;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Color32> colours
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Color32>* colours;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Color32>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector2> uvs
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uvs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1s
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* uv1s;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_vertices();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_normals();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Color32> colours
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Color32>*& dyn_colours();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector2> uvs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_uvs();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector2> uv1s
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_uv1s();
    // public System.Void .ctor(System.Boolean hasNormals, System.Boolean hasColours, System.Boolean hasUvs, System.Boolean hasUv1)
    // Offset: 0x5029D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CuttableSubMesh* New_ctor(bool hasNormals, bool hasColours, bool hasUvs, bool hasUv1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::CuttableSubMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CuttableSubMesh*, creationType>(hasNormals, hasColours, hasUvs, hasUv1)));
    }
    // public System.Void .ctor(System.Int32[] indices, UnityEngine.Vector3[] inputVertices, UnityEngine.Vector3[] inputNormals, UnityEngine.Color32[] inputColours, UnityEngine.Vector2[] inputUvs, UnityEngine.Vector2[] inputUv1)
    // Offset: 0x5028AB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CuttableSubMesh* New_ctor(::ArrayW<int> indices, ::ArrayW<::UnityEngine::Vector3> inputVertices, ::ArrayW<::UnityEngine::Vector3> inputNormals, ::ArrayW<::UnityEngine::Color32> inputColours, ::ArrayW<::UnityEngine::Vector2> inputUvs, ::ArrayW<::UnityEngine::Vector2> inputUv1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::CuttableSubMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CuttableSubMesh*, creationType>(indices, inputVertices, inputNormals, inputColours, inputUvs, inputUv1)));
    }
    // public System.Void Add(Technie.PhysicsCreator.CuttableSubMesh other)
    // Offset: 0x5029154
    void Add(::Technie::PhysicsCreator::CuttableSubMesh* other);
    // public System.Int32 NumVertices()
    // Offset: 0x502A238
    int NumVertices();
    // public UnityEngine.Vector3 GetVertex(System.Int32 index)
    // Offset: 0x502A280
    ::UnityEngine::Vector3 GetVertex(int index);
    // public System.Boolean HasNormals()
    // Offset: 0x502A2D8
    bool HasNormals();
    // public System.Boolean HasColours()
    // Offset: 0x502A2E8
    bool HasColours();
    // public System.Boolean HasUvs()
    // Offset: 0x502A2F8
    bool HasUvs();
    // public System.Boolean HasUv1()
    // Offset: 0x502A308
    bool HasUv1();
    // public System.Void CopyVertex(System.Int32 srcIndex, Technie.PhysicsCreator.CuttableSubMesh srcMesh)
    // Offset: 0x5029F38
    void CopyVertex(int srcIndex, ::Technie::PhysicsCreator::CuttableSubMesh* srcMesh);
    // public System.Void AddInterpolatedVertex(System.Int32 i0, System.Int32 i1, System.Single weight, Technie.PhysicsCreator.CuttableSubMesh srcMesh)
    // Offset: 0x502A318
    void AddInterpolatedVertex(int i0, int i1, float weight, ::Technie::PhysicsCreator::CuttableSubMesh* srcMesh);
    // public System.Void AddTo(System.Collections.Generic.List`1<UnityEngine.Vector3> destVertices, System.Collections.Generic.List`1<UnityEngine.Vector3> destNormals, System.Collections.Generic.List`1<UnityEngine.Color32> destColours, System.Collections.Generic.List`1<UnityEngine.Vector2> destUvs, System.Collections.Generic.List`1<UnityEngine.Vector2> destUv1s)
    // Offset: 0x5029BD4
    void AddTo(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* destVertices, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* destNormals, ::System::Collections::Generic::List_1<::UnityEngine::Color32>* destColours, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* destUvs, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* destUv1s);
    // public System.Int32 NumIndices()
    // Offset: 0x5029B8C
    int NumIndices();
    // public System.Int32[] GenIndices()
    // Offset: 0x5029CE8
    ::ArrayW<int> GenIndices();
  }; // Technie.PhysicsCreator.CuttableSubMesh
  #pragma pack(pop)
  static check_size<sizeof(CuttableSubMesh), 48 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)> __Technie_PhysicsCreator_CuttableSubMeshSizeCheck;
  static_assert(sizeof(CuttableSubMesh) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableSubMesh::*)(::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::CuttableSubMesh::Add)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::NumVertices
// Il2CppName: NumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::NumVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "NumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::GetVertex
// Il2CppName: GetVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Technie::PhysicsCreator::CuttableSubMesh::*)(int)>(&Technie::PhysicsCreator::CuttableSubMesh::GetVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "GetVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::HasNormals
// Il2CppName: HasNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::HasNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "HasNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::HasColours
// Il2CppName: HasColours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::HasColours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "HasColours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::HasUvs
// Il2CppName: HasUvs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::HasUvs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "HasUvs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::HasUv1
// Il2CppName: HasUv1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::HasUv1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "HasUv1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::CopyVertex
// Il2CppName: CopyVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableSubMesh::*)(int, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::CuttableSubMesh::CopyVertex)> {
  static const MethodInfo* get() {
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "CopyVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcIndex, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::AddInterpolatedVertex
// Il2CppName: AddInterpolatedVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableSubMesh::*)(int, int, float, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::CuttableSubMesh::AddInterpolatedVertex)> {
  static const MethodInfo* get() {
    static auto* i0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "AddInterpolatedVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i0, i1, weight, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::AddTo
// Il2CppName: AddTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableSubMesh::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::System::Collections::Generic::List_1<::UnityEngine::Color32>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*)>(&Technie::PhysicsCreator::CuttableSubMesh::AddTo)> {
  static const MethodInfo* get() {
    static auto* destVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* destNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* destColours = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    static auto* destUvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* destUv1s = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "AddTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destVertices, destNormals, destColours, destUvs, destUv1s});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::NumIndices
// Il2CppName: NumIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::NumIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "NumIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableSubMesh::GenIndices
// Il2CppName: GenIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Technie::PhysicsCreator::CuttableSubMesh::*)()>(&Technie::PhysicsCreator::CuttableSubMesh::GenIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableSubMesh*), "GenIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
