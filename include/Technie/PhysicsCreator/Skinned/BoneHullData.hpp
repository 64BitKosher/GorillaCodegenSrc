// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Technie.PhysicsCreator.IHull
#include "Technie/PhysicsCreator/IHull.hpp"
// Including type: Technie.PhysicsCreator.Skinned.HullType
#include "Technie/PhysicsCreator/Skinned/HullType.hpp"
// Including type: Technie.PhysicsCreator.Skinned.ColliderType
#include "Technie/PhysicsCreator/Skinned/ColliderType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: PhysicMaterial
  class PhysicMaterial;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.Skinned
namespace Technie::PhysicsCreator::Skinned {
  // Forward declaring type: BoneHullData
  class BoneHullData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::Skinned::BoneHullData);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::Skinned::BoneHullData*, "Technie.PhysicsCreator.Skinned", "BoneHullData");
// Type namespace: Technie.PhysicsCreator.Skinned
namespace Technie::PhysicsCreator::Skinned {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.Skinned.BoneHullData
  // [TokenAttribute] Offset: FFFFFFFF
  class BoneHullData : public ::Il2CppObject/*, public ::Technie::PhysicsCreator::IHull*/ {
    public:
    public:
    // public System.String targetBoneName
    // Size: 0x8
    // Offset: 0x10
    ::StringW targetBoneName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Technie.PhysicsCreator.Skinned.HullType type
    // Size: 0x4
    // Offset: 0x18
    ::Technie::PhysicsCreator::Skinned::HullType type;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::Skinned::HullType) == 0x4);
    // public Technie.PhysicsCreator.Skinned.ColliderType colliderType
    // Size: 0x4
    // Offset: 0x1C
    ::Technie::PhysicsCreator::Skinned::ColliderType colliderType;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::Skinned::ColliderType) == 0x4);
    // public UnityEngine.Color previewColour
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color previewColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Mesh hullMesh
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Mesh* hullMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.PhysicMaterial material
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::PhysicMaterial* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicMaterial*) == 0x8);
    // public System.Boolean isTrigger
    // Size: 0x1
    // Offset: 0x40
    bool isTrigger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isTrigger and: minThreshold
    char __padding6[0x3] = {};
    // private System.Single minThreshold
    // Size: 0x4
    // Offset: 0x44
    float minThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxThreshold
    // Size: 0x4
    // Offset: 0x48
    float maxThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxThreshold and: selectedFaces
    char __padding8[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32> selectedFaces
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<int>* selectedFaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> cachedTriangleVertices
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* cachedTriangleVertices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Technie::PhysicsCreator::IHull
    operator ::Technie::PhysicsCreator::IHull() noexcept {
      return *reinterpret_cast<::Technie::PhysicsCreator::IHull*>(this);
    }
    // Get instance field reference: public System.String targetBoneName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetBoneName();
    // Get instance field reference: public Technie.PhysicsCreator.Skinned.HullType type
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::Skinned::HullType& dyn_type();
    // Get instance field reference: public Technie.PhysicsCreator.Skinned.ColliderType colliderType
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::Skinned::ColliderType& dyn_colliderType();
    // Get instance field reference: public UnityEngine.Color previewColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_previewColour();
    // Get instance field reference: public UnityEngine.Mesh hullMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_hullMesh();
    // Get instance field reference: public UnityEngine.PhysicMaterial material
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicMaterial*& dyn_material();
    // Get instance field reference: public System.Boolean isTrigger
    [[deprecated("Use field access instead!")]] bool& dyn_isTrigger();
    // Get instance field reference: private System.Single minThreshold
    [[deprecated("Use field access instead!")]] float& dyn_minThreshold();
    // Get instance field reference: private System.Single maxThreshold
    [[deprecated("Use field access instead!")]] float& dyn_maxThreshold();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> selectedFaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_selectedFaces();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> cachedTriangleVertices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_cachedTriangleVertices();
    // public System.String get_Name()
    // Offset: 0x5037AEC
    ::StringW get_Name();
    // public System.Single get_MinThreshold()
    // Offset: 0x5037AF4
    float get_MinThreshold();
    // public System.Single get_MaxThreshold()
    // Offset: 0x5037AFC
    float get_MaxThreshold();
    // public System.Int32 get_NumSelectedTriangles()
    // Offset: 0x5037B04
    int get_NumSelectedTriangles();
    // public UnityEngine.Vector3[] get_CachedTriangleVertices()
    // Offset: 0x5037B4C
    ::ArrayW<::UnityEngine::Vector3> get_CachedTriangleVertices();
    // public System.Void set_CachedTriangleVertices(UnityEngine.Vector3[] value)
    // Offset: 0x5037B9C
    void set_CachedTriangleVertices(::ArrayW<::UnityEngine::Vector3> value);
    // public System.Boolean IsTriangleSelected(System.Int32 triIndex, UnityEngine.Renderer renderer, UnityEngine.Mesh targetMesh)
    // Offset: 0x5037C0C
    bool IsTriangleSelected(int triIndex, ::UnityEngine::Renderer* renderer, ::UnityEngine::Mesh* targetMesh);
    // public System.Int32[] GetSelectedFaces()
    // Offset: 0x5037EFC
    ::ArrayW<int> GetSelectedFaces();
    // public System.Void AddToSelection(System.Int32 newTriangleIndex, UnityEngine.Mesh srcMesh)
    // Offset: 0x5037F4C
    void AddToSelection(int newTriangleIndex, ::UnityEngine::Mesh* srcMesh);
    // public System.Void RemoveFromSelection(System.Int32 existingTriangleIndex, UnityEngine.Mesh srcMesh)
    // Offset: 0x503803C
    void RemoveFromSelection(int existingTriangleIndex, ::UnityEngine::Mesh* srcMesh);
    // public System.Void SetMinThreshold(System.Single newMinThreshold)
    // Offset: 0x50380AC
    void SetMinThreshold(float newMinThreshold);
    // public System.Void SetMaxThreshold(System.Single newMaxThreshold)
    // Offset: 0x50380B4
    void SetMaxThreshold(float newMaxThreshold);
    // public System.Void SetThresholds(System.Single newMinThreshold, System.Single newMaxThreshold, UnityEngine.SkinnedMeshRenderer renderer, UnityEngine.Mesh targetMesh)
    // Offset: 0x50380BC
    void SetThresholds(float newMinThreshold, float newMaxThreshold, ::UnityEngine::SkinnedMeshRenderer* renderer, ::UnityEngine::Mesh* targetMesh);
    // public System.Void ClearSelectedFaces()
    // Offset: 0x50380C4
    void ClearSelectedFaces();
    // public System.Void SetSelectedFaces(System.Collections.Generic.List`1<System.Int32> newSelectedFaceIndices, UnityEngine.Mesh srcMesh)
    // Offset: 0x5038140
    void SetSelectedFaces(::System::Collections::Generic::List_1<int>* newSelectedFaceIndices, ::UnityEngine::Mesh* srcMesh);
    // public UnityEngine.Vector3[] GetCachedTriangleVertices()
    // Offset: 0x50381E4
    ::ArrayW<::UnityEngine::Vector3> GetCachedTriangleVertices();
    // public System.Void .ctor()
    // Offset: 0x5038234
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoneHullData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::Skinned::BoneHullData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoneHullData*, creationType>()));
    }
  }; // Technie.PhysicsCreator.Skinned.BoneHullData
  #pragma pack(pop)
  static check_size<sizeof(BoneHullData), 88 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __Technie_PhysicsCreator_Skinned_BoneHullDataSizeCheck;
  static_assert(sizeof(BoneHullData) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::get_MinThreshold
// Il2CppName: get_MinThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::get_MinThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "get_MinThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::get_MaxThreshold
// Il2CppName: get_MaxThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::get_MaxThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "get_MaxThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::get_NumSelectedTriangles
// Il2CppName: get_NumSelectedTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::get_NumSelectedTriangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "get_NumSelectedTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::get_CachedTriangleVertices
// Il2CppName: get_CachedTriangleVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::get_CachedTriangleVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "get_CachedTriangleVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::set_CachedTriangleVertices
// Il2CppName: set_CachedTriangleVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(::ArrayW<::UnityEngine::Vector3>)>(&Technie::PhysicsCreator::Skinned::BoneHullData::set_CachedTriangleVertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "set_CachedTriangleVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::IsTriangleSelected
// Il2CppName: IsTriangleSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::Skinned::BoneHullData::*)(int, ::UnityEngine::Renderer*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Skinned::BoneHullData::IsTriangleSelected)> {
  static const MethodInfo* get() {
    static auto* triIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* targetMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "IsTriangleSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triIndex, renderer, targetMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::GetSelectedFaces
// Il2CppName: GetSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::GetSelectedFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "GetSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::AddToSelection
// Il2CppName: AddToSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(int, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Skinned::BoneHullData::AddToSelection)> {
  static const MethodInfo* get() {
    static auto* newTriangleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "AddToSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTriangleIndex, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::RemoveFromSelection
// Il2CppName: RemoveFromSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(int, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Skinned::BoneHullData::RemoveFromSelection)> {
  static const MethodInfo* get() {
    static auto* existingTriangleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "RemoveFromSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{existingTriangleIndex, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::SetMinThreshold
// Il2CppName: SetMinThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(float)>(&Technie::PhysicsCreator::Skinned::BoneHullData::SetMinThreshold)> {
  static const MethodInfo* get() {
    static auto* newMinThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "SetMinThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMinThreshold});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::SetMaxThreshold
// Il2CppName: SetMaxThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(float)>(&Technie::PhysicsCreator::Skinned::BoneHullData::SetMaxThreshold)> {
  static const MethodInfo* get() {
    static auto* newMaxThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "SetMaxThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMaxThreshold});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::SetThresholds
// Il2CppName: SetThresholds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(float, float, ::UnityEngine::SkinnedMeshRenderer*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Skinned::BoneHullData::SetThresholds)> {
  static const MethodInfo* get() {
    static auto* newMinThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* newMaxThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* targetMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "SetThresholds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMinThreshold, newMaxThreshold, renderer, targetMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::ClearSelectedFaces
// Il2CppName: ClearSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::ClearSelectedFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "ClearSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::SetSelectedFaces
// Il2CppName: SetSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Skinned::BoneHullData::*)(::System::Collections::Generic::List_1<int>*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Skinned::BoneHullData::SetSelectedFaces)> {
  static const MethodInfo* get() {
    static auto* newSelectedFaceIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "SetSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSelectedFaceIndices, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::GetCachedTriangleVertices
// Il2CppName: GetCachedTriangleVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::Skinned::BoneHullData::*)()>(&Technie::PhysicsCreator::Skinned::BoneHullData::GetCachedTriangleVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Skinned::BoneHullData*), "GetCachedTriangleVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Skinned::BoneHullData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
