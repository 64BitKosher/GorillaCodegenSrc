// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: VhacdParameters
  class VhacdParameters;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::VhacdParameters);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::VhacdParameters*, "Technie.PhysicsCreator", "VhacdParameters");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.VhacdParameters
  // [TokenAttribute] Offset: FFFFFFFF
  class VhacdParameters : public ::Il2CppObject {
    public:
    public:
    // public System.Single concavity
    // Size: 0x4
    // Offset: 0x10
    float concavity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single alpha
    // Size: 0x4
    // Offset: 0x14
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single beta
    // Size: 0x4
    // Offset: 0x18
    float beta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVolumePerCH
    // Size: 0x4
    // Offset: 0x1C
    float minVolumePerCH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.UInt32 resolution
    // Size: 0x4
    // Offset: 0x20
    uint resolution;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 maxNumVerticesPerCH
    // Size: 0x4
    // Offset: 0x24
    uint maxNumVerticesPerCH;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 planeDownsampling
    // Size: 0x4
    // Offset: 0x28
    uint planeDownsampling;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 convexhullDownsampling
    // Size: 0x4
    // Offset: 0x2C
    uint convexhullDownsampling;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 pca
    // Size: 0x4
    // Offset: 0x30
    uint pca;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 mode
    // Size: 0x4
    // Offset: 0x34
    uint mode;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 convexhullApproximation
    // Size: 0x4
    // Offset: 0x38
    uint convexhullApproximation;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 oclAcceleration
    // Size: 0x4
    // Offset: 0x3C
    uint oclAcceleration;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 maxConvexHulls
    // Size: 0x4
    // Offset: 0x40
    uint maxConvexHulls;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Boolean projectHullVertices
    // Size: 0x1
    // Offset: 0x44
    bool projectHullVertices;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Single concavity
    [[deprecated("Use field access instead!")]] float& dyn_concavity();
    // Get instance field reference: public System.Single alpha
    [[deprecated("Use field access instead!")]] float& dyn_alpha();
    // Get instance field reference: public System.Single beta
    [[deprecated("Use field access instead!")]] float& dyn_beta();
    // Get instance field reference: public System.Single minVolumePerCH
    [[deprecated("Use field access instead!")]] float& dyn_minVolumePerCH();
    // Get instance field reference: public System.UInt32 resolution
    [[deprecated("Use field access instead!")]] uint& dyn_resolution();
    // Get instance field reference: public System.UInt32 maxNumVerticesPerCH
    [[deprecated("Use field access instead!")]] uint& dyn_maxNumVerticesPerCH();
    // Get instance field reference: public System.UInt32 planeDownsampling
    [[deprecated("Use field access instead!")]] uint& dyn_planeDownsampling();
    // Get instance field reference: public System.UInt32 convexhullDownsampling
    [[deprecated("Use field access instead!")]] uint& dyn_convexhullDownsampling();
    // Get instance field reference: public System.UInt32 pca
    [[deprecated("Use field access instead!")]] uint& dyn_pca();
    // Get instance field reference: public System.UInt32 mode
    [[deprecated("Use field access instead!")]] uint& dyn_mode();
    // Get instance field reference: public System.UInt32 convexhullApproximation
    [[deprecated("Use field access instead!")]] uint& dyn_convexhullApproximation();
    // Get instance field reference: public System.UInt32 oclAcceleration
    [[deprecated("Use field access instead!")]] uint& dyn_oclAcceleration();
    // Get instance field reference: public System.UInt32 maxConvexHulls
    [[deprecated("Use field access instead!")]] uint& dyn_maxConvexHulls();
    // Get instance field reference: public System.Boolean projectHullVertices
    [[deprecated("Use field access instead!")]] bool& dyn_projectHullVertices();
    // public System.Void .ctor()
    // Offset: 0x502D634
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VhacdParameters* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::VhacdParameters::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VhacdParameters*, creationType>()));
    }
  }; // Technie.PhysicsCreator.VhacdParameters
  #pragma pack(pop)
  static check_size<sizeof(VhacdParameters), 68 + sizeof(bool)> __Technie_PhysicsCreator_VhacdParametersSizeCheck;
  static_assert(sizeof(VhacdParameters) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::VhacdParameters::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
