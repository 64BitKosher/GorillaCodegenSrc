// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: BoxDef
  struct BoxDef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::BoxDef, "Technie.PhysicsCreator", "BoxDef");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Technie.PhysicsCreator.BoxDef
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoxDef/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Bounds collisionBox
    // Size: 0x18
    // Offset: 0x0
    ::UnityEngine::Bounds collisionBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public UnityEngine.Vector3 boxPosition
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 boxPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion boxRotation
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Quaternion boxRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: BoxDef
    constexpr BoxDef(::UnityEngine::Bounds collisionBox_ = {}, ::UnityEngine::Vector3 boxPosition_ = {}, ::UnityEngine::Quaternion boxRotation_ = {}) noexcept : collisionBox{collisionBox_}, boxPosition{boxPosition_}, boxRotation{boxRotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Bounds collisionBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_collisionBox();
    // Get instance field reference: public UnityEngine.Vector3 boxPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_boxPosition();
    // Get instance field reference: public UnityEngine.Quaternion boxRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_boxRotation();
  }; // Technie.PhysicsCreator.BoxDef
  #pragma pack(pop)
  static check_size<sizeof(BoxDef), 36 + sizeof(::UnityEngine::Quaternion)> __Technie_PhysicsCreator_BoxDefSizeCheck;
  static_assert(sizeof(BoxDef) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
