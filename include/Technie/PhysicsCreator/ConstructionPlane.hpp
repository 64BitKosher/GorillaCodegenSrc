// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: ConstructionPlane
  class ConstructionPlane;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::ConstructionPlane);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::ConstructionPlane*, "Technie.PhysicsCreator", "ConstructionPlane");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0xC4
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.ConstructionPlane
  // [TokenAttribute] Offset: FFFFFFFF
  class ConstructionPlane : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 normal
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 tangent
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 tangent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Matrix4x4 planeToWorld
    // Size: 0x40
    // Offset: 0x44
    ::UnityEngine::Matrix4x4 planeToWorld;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Matrix4x4 worldToPlane
    // Size: 0x40
    // Offset: 0x84
    ::UnityEngine::Matrix4x4 worldToPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector3 normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_normal();
    // Get instance field reference: public UnityEngine.Vector3 tangent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tangent();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.Matrix4x4 planeToWorld
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_planeToWorld();
    // Get instance field reference: public UnityEngine.Matrix4x4 worldToPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_worldToPlane();
    // public System.Void .ctor(UnityEngine.Vector3 c)
    // Offset: 0x5022D38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructionPlane* New_ctor(::UnityEngine::Vector3 c) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::ConstructionPlane::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructionPlane*, creationType>(c)));
    }
    // public System.Void .ctor(UnityEngine.Vector3 c, UnityEngine.Vector3 n, UnityEngine.Vector3 t)
    // Offset: 0x5022FC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructionPlane* New_ctor(::UnityEngine::Vector3 c, ::UnityEngine::Vector3 n, ::UnityEngine::Vector3 t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::ConstructionPlane::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructionPlane*, creationType>(c, n, t)));
    }
    // public System.Void .ctor(Technie.PhysicsCreator.ConstructionPlane basePlane, System.Single angle)
    // Offset: 0x5025638
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructionPlane* New_ctor(::Technie::PhysicsCreator::ConstructionPlane* basePlane, float angle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::ConstructionPlane::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructionPlane*, creationType>(basePlane, angle)));
    }
    // public System.Void .ctor(Technie.PhysicsCreator.ConstructionPlane basePlane, UnityEngine.Vector3 positionOffset)
    // Offset: 0x50256C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructionPlane* New_ctor(::Technie::PhysicsCreator::ConstructionPlane* basePlane, ::UnityEngine::Vector3 positionOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::ConstructionPlane::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructionPlane*, creationType>(basePlane, positionOffset)));
    }
    // private System.Void Init()
    // Offset: 0x502544C
    void Init();
  }; // Technie.PhysicsCreator.ConstructionPlane
  #pragma pack(pop)
  static check_size<sizeof(ConstructionPlane), 132 + sizeof(::UnityEngine::Matrix4x4)> __Technie_PhysicsCreator_ConstructionPlaneSizeCheck;
  static_assert(sizeof(ConstructionPlane) == 0xC4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::ConstructionPlane::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::ConstructionPlane::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::ConstructionPlane::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::ConstructionPlane::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::ConstructionPlane::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::ConstructionPlane::*)()>(&Technie::PhysicsCreator::ConstructionPlane::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::ConstructionPlane*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
