// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: CuttableSubMesh
  class CuttableSubMesh;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: CuttableMesh
  class CuttableMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::CuttableMesh);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::CuttableMesh*, "Technie.PhysicsCreator", "CuttableMesh");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.CuttableMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class CuttableMesh : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.MeshRenderer inputMeshRenderer
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::MeshRenderer* inputMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Boolean hasUvs
    // Size: 0x1
    // Offset: 0x18
    bool hasUvs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasUv1s
    // Size: 0x1
    // Offset: 0x19
    bool hasUv1s;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasColours
    // Size: 0x1
    // Offset: 0x1A
    bool hasColours;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasColours and: subMeshes
    char __padding3[0x5] = {};
    // private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> subMeshes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* subMeshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.MeshRenderer inputMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_inputMeshRenderer();
    // Get instance field reference: private System.Boolean hasUvs
    [[deprecated("Use field access instead!")]] bool& dyn_hasUvs();
    // Get instance field reference: private System.Boolean hasUv1s
    [[deprecated("Use field access instead!")]] bool& dyn_hasUv1s();
    // Get instance field reference: private System.Boolean hasColours
    [[deprecated("Use field access instead!")]] bool& dyn_hasColours();
    // Get instance field reference: private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> subMeshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*& dyn_subMeshes();
    // public System.Void .ctor(UnityEngine.Mesh inputMesh)
    // Offset: 0x50286FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CuttableMesh* New_ctor(::UnityEngine::Mesh* inputMesh) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::CuttableMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CuttableMesh*, creationType>(inputMesh)));
    }
    // public System.Void .ctor(UnityEngine.MeshRenderer input)
    // Offset: 0x5028A14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CuttableMesh* New_ctor(::UnityEngine::MeshRenderer* input) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::CuttableMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CuttableMesh*, creationType>(input)));
    }
    // private System.Void Init(UnityEngine.Mesh inputMesh, System.String debugName)
    // Offset: 0x5028740
    void Init(::UnityEngine::Mesh* inputMesh, ::StringW debugName);
    // public System.Void .ctor(Technie.PhysicsCreator.CuttableMesh inputMesh, System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> newSubMeshes)
    // Offset: 0x5028F48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CuttableMesh* New_ctor(::Technie::PhysicsCreator::CuttableMesh* inputMesh, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* newSubMeshes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::CuttableMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CuttableMesh*, creationType>(inputMesh, newSubMeshes)));
    }
    // public System.Void Add(Technie.PhysicsCreator.CuttableMesh other)
    // Offset: 0x5029030
    void Add(::Technie::PhysicsCreator::CuttableMesh* other);
    // public System.Int32 NumSubMeshes()
    // Offset: 0x50291CC
    int NumSubMeshes();
    // public System.Boolean HasUvs()
    // Offset: 0x5029214
    bool HasUvs();
    // public System.Boolean HasColours()
    // Offset: 0x502921C
    bool HasColours();
    // public System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> GetSubMeshes()
    // Offset: 0x5029224
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* GetSubMeshes();
    // public Technie.PhysicsCreator.CuttableSubMesh GetSubMesh(System.Int32 index)
    // Offset: 0x502922C
    ::Technie::PhysicsCreator::CuttableSubMesh* GetSubMesh(int index);
    // public UnityEngine.Transform GetTransform()
    // Offset: 0x5029284
    ::UnityEngine::Transform* GetTransform();
    // public UnityEngine.MeshRenderer ConvertToRenderer(System.String newObjectName)
    // Offset: 0x502930C
    ::UnityEngine::MeshRenderer* ConvertToRenderer(::StringW newObjectName);
    // public UnityEngine.Mesh CreateMesh()
    // Offset: 0x50295BC
    ::UnityEngine::Mesh* CreateMesh();
  }; // Technie.PhysicsCreator.CuttableMesh
  #pragma pack(pop)
  static check_size<sizeof(CuttableMesh), 32 + sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*)> __Technie_PhysicsCreator_CuttableMeshSizeCheck;
  static_assert(sizeof(CuttableMesh) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableMesh::*)(::UnityEngine::Mesh*, ::StringW)>(&Technie::PhysicsCreator::CuttableMesh::Init)> {
  static const MethodInfo* get() {
    static auto* inputMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* debugName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputMesh, debugName});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::CuttableMesh::*)(::Technie::PhysicsCreator::CuttableMesh*)>(&Technie::PhysicsCreator::CuttableMesh::Add)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::NumSubMeshes
// Il2CppName: NumSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::NumSubMeshes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "NumSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::HasUvs
// Il2CppName: HasUvs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::HasUvs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "HasUvs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::HasColours
// Il2CppName: HasColours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::HasColours)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "HasColours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::GetSubMeshes
// Il2CppName: GetSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::GetSubMeshes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "GetSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::GetSubMesh
// Il2CppName: GetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::CuttableSubMesh* (Technie::PhysicsCreator::CuttableMesh::*)(int)>(&Technie::PhysicsCreator::CuttableMesh::GetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "GetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::GetTransform
// Il2CppName: GetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::GetTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "GetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::ConvertToRenderer
// Il2CppName: ConvertToRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshRenderer* (Technie::PhysicsCreator::CuttableMesh::*)(::StringW)>(&Technie::PhysicsCreator::CuttableMesh::ConvertToRenderer)> {
  static const MethodInfo* get() {
    static auto* newObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "ConvertToRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newObjectName});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::CuttableMesh::CreateMesh
// Il2CppName: CreateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (Technie::PhysicsCreator::CuttableMesh::*)()>(&Technie::PhysicsCreator::CuttableMesh::CreateMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::CuttableMesh*), "CreateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
