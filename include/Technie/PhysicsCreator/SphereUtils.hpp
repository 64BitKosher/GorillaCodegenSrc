// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: Sphere
  class Sphere;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: SphereUtils
  class SphereUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::SphereUtils);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::SphereUtils*, "Technie.PhysicsCreator", "SphereUtils");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.SphereUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SphereUtils : public ::Il2CppObject {
    public:
    // Nested type: ::Technie::PhysicsCreator::SphereUtils::Support
    class Support;
    // static field const value: static private System.Single kEpsilon
    static constexpr const float kEpsilon = 0.001;
    // Get static field: static private System.Single kEpsilon
    static float _get_kEpsilon();
    // Set static field: static private System.Single kEpsilon
    static void _set_kEpsilon(float value);
    // static field const value: static private System.Single kOnePlusEpsilon
    static constexpr const float kOnePlusEpsilon = 1.001;
    // Get static field: static private System.Single kOnePlusEpsilon
    static float _get_kOnePlusEpsilon();
    // Set static field: static private System.Single kOnePlusEpsilon
    static void _set_kOnePlusEpsilon(float value);
    // static private System.Boolean PointInsideSphere(UnityEngine.Vector3 rkP, Technie.PhysicsCreator.Sphere rkS)
    // Offset: 0x5032D24
    static bool PointInsideSphere(::UnityEngine::Vector3 rkP, ::Technie::PhysicsCreator::Sphere* rkS);
    // static private Technie.PhysicsCreator.Sphere ExactSphere1(UnityEngine.Vector3 rkP)
    // Offset: 0x5032D74
    static ::Technie::PhysicsCreator::Sphere* ExactSphere1(::UnityEngine::Vector3 rkP);
    // static private Technie.PhysicsCreator.Sphere ExactSphere2(UnityEngine.Vector3 rkP0, UnityEngine.Vector3 rkP1)
    // Offset: 0x5032DF8
    static ::Technie::PhysicsCreator::Sphere* ExactSphere2(::UnityEngine::Vector3 rkP0, ::UnityEngine::Vector3 rkP1);
    // static private Technie.PhysicsCreator.Sphere ExactSphere3(UnityEngine.Vector3 rkP0, UnityEngine.Vector3 rkP1, UnityEngine.Vector3 rkP2)
    // Offset: 0x5032ED0
    static ::Technie::PhysicsCreator::Sphere* ExactSphere3(::UnityEngine::Vector3 rkP0, ::UnityEngine::Vector3 rkP1, ::UnityEngine::Vector3 rkP2);
    // static private Technie.PhysicsCreator.Sphere ExactSphere4(UnityEngine.Vector3 rkP0, UnityEngine.Vector3 rkP1, UnityEngine.Vector3 rkP2, UnityEngine.Vector3 rkP3)
    // Offset: 0x50330B8
    static ::Technie::PhysicsCreator::Sphere* ExactSphere4(::UnityEngine::Vector3 rkP0, ::UnityEngine::Vector3 rkP1, ::UnityEngine::Vector3 rkP2, ::UnityEngine::Vector3 rkP3);
    // static private Technie.PhysicsCreator.Sphere UpdateSupport1(System.Int32 i, System.Collections.Generic.List`1<UnityEngine.Vector3> apkPerm, Technie.PhysicsCreator.SphereUtils/Support rkSupp)
    // Offset: 0x50337C0
    static ::Technie::PhysicsCreator::Sphere* UpdateSupport1(int i, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* apkPerm, ::Technie::PhysicsCreator::SphereUtils::Support* rkSupp);
    // static private Technie.PhysicsCreator.Sphere UpdateSupport2(System.Int32 i, System.Collections.Generic.List`1<UnityEngine.Vector3> apkPerm, Technie.PhysicsCreator.SphereUtils/Support rkSupp)
    // Offset: 0x50338A8
    static ::Technie::PhysicsCreator::Sphere* UpdateSupport2(int i, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* apkPerm, ::Technie::PhysicsCreator::SphereUtils::Support* rkSupp);
    // static private Technie.PhysicsCreator.Sphere UpdateSupport3(System.Int32 i, System.Collections.Generic.List`1<UnityEngine.Vector3> apkPerm, Technie.PhysicsCreator.SphereUtils/Support rkSupp)
    // Offset: 0x5033BB4
    static ::Technie::PhysicsCreator::Sphere* UpdateSupport3(int i, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* apkPerm, ::Technie::PhysicsCreator::SphereUtils::Support* rkSupp);
    // static public Technie.PhysicsCreator.Sphere UpdateSupport4(System.Int32 i, System.Collections.Generic.List`1<UnityEngine.Vector3> apkPerm, Technie.PhysicsCreator.SphereUtils/Support rkSupp)
    // Offset: 0x50342E4
    static ::Technie::PhysicsCreator::Sphere* UpdateSupport4(int i, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* apkPerm, ::Technie::PhysicsCreator::SphereUtils::Support* rkSupp);
    // static private Technie.PhysicsCreator.Sphere Update(System.Int32 funcIndex, System.Int32 numPoints, System.Collections.Generic.List`1<UnityEngine.Vector3> points, Technie.PhysicsCreator.SphereUtils/Support support)
    // Offset: 0x5035158
    static ::Technie::PhysicsCreator::Sphere* Update(int funcIndex, int numPoints, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, ::Technie::PhysicsCreator::SphereUtils::Support* support);
    // static public Technie.PhysicsCreator.Sphere MinSphere(System.Collections.Generic.List`1<UnityEngine.Vector3> inputPoints)
    // Offset: 0x5027BBC
    static ::Technie::PhysicsCreator::Sphere* MinSphere(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* inputPoints);
    // static public System.Void Shuffle(System.Collections.Generic.List`1<UnityEngine.Vector3> list)
    // Offset: 0x5035228
    static void Shuffle(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* list);
    // public System.Void .ctor()
    // Offset: 0x5035454
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SphereUtils* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::SphereUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SphereUtils*, creationType>()));
    }
  }; // Technie.PhysicsCreator.SphereUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::PointInsideSphere
// Il2CppName: PointInsideSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::Technie::PhysicsCreator::Sphere*)>(&Technie::PhysicsCreator::SphereUtils::PointInsideSphere)> {
  static const MethodInfo* get() {
    static auto* rkP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkS = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "Sphere")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "PointInsideSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rkP, rkS});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::ExactSphere1
// Il2CppName: ExactSphere1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(::UnityEngine::Vector3)>(&Technie::PhysicsCreator::SphereUtils::ExactSphere1)> {
  static const MethodInfo* get() {
    static auto* rkP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "ExactSphere1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rkP});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::ExactSphere2
// Il2CppName: ExactSphere2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::SphereUtils::ExactSphere2)> {
  static const MethodInfo* get() {
    static auto* rkP0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "ExactSphere2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rkP0, rkP1});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::ExactSphere3
// Il2CppName: ExactSphere3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::SphereUtils::ExactSphere3)> {
  static const MethodInfo* get() {
    static auto* rkP0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "ExactSphere3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rkP0, rkP1, rkP2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::ExactSphere4
// Il2CppName: ExactSphere4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::SphereUtils::ExactSphere4)> {
  static const MethodInfo* get() {
    static auto* rkP0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rkP3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "ExactSphere4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rkP0, rkP1, rkP2, rkP3});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::UpdateSupport1
// Il2CppName: UpdateSupport1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::Technie::PhysicsCreator::SphereUtils::Support*)>(&Technie::PhysicsCreator::SphereUtils::UpdateSupport1)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* apkPerm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rkSupp = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "SphereUtils/Support")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "UpdateSupport1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, apkPerm, rkSupp});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::UpdateSupport2
// Il2CppName: UpdateSupport2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::Technie::PhysicsCreator::SphereUtils::Support*)>(&Technie::PhysicsCreator::SphereUtils::UpdateSupport2)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* apkPerm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rkSupp = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "SphereUtils/Support")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "UpdateSupport2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, apkPerm, rkSupp});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::UpdateSupport3
// Il2CppName: UpdateSupport3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::Technie::PhysicsCreator::SphereUtils::Support*)>(&Technie::PhysicsCreator::SphereUtils::UpdateSupport3)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* apkPerm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rkSupp = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "SphereUtils/Support")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "UpdateSupport3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, apkPerm, rkSupp});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::UpdateSupport4
// Il2CppName: UpdateSupport4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::Technie::PhysicsCreator::SphereUtils::Support*)>(&Technie::PhysicsCreator::SphereUtils::UpdateSupport4)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* apkPerm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rkSupp = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "SphereUtils/Support")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "UpdateSupport4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, apkPerm, rkSupp});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(int, int, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::Technie::PhysicsCreator::SphereUtils::Support*)>(&Technie::PhysicsCreator::SphereUtils::Update)> {
  static const MethodInfo* get() {
    static auto* funcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* support = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "SphereUtils/Support")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{funcIndex, numPoints, points, support});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::MinSphere
// Il2CppName: MinSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::Sphere* (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Technie::PhysicsCreator::SphereUtils::MinSphere)> {
  static const MethodInfo* get() {
    static auto* inputPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "MinSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputPoints});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::Shuffle
// Il2CppName: Shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Technie::PhysicsCreator::SphereUtils::Shuffle)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::SphereUtils*), "Shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::SphereUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
