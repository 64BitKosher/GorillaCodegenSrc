// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: CuttableMesh
  class CuttableMesh;
  // Forward declaring type: CuttableSubMesh
  class CuttableSubMesh;
  // Forward declaring type: VertexClassification
  struct VertexClassification;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Plane
  struct Plane;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: MeshCutter
  class MeshCutter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::MeshCutter);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::MeshCutter*, "Technie.PhysicsCreator", "MeshCutter");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.MeshCutter
  // [TokenAttribute] Offset: FFFFFFFF
  class MeshCutter : public ::Il2CppObject {
    public:
    public:
    // private Technie.PhysicsCreator.CuttableMesh inputMesh
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::CuttableMesh* inputMesh;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::CuttableMesh*) == 0x8);
    // private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> outputFrontSubMeshes
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* outputFrontSubMeshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*) == 0x8);
    // private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> outputBackSubMeshes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>* outputBackSubMeshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*) == 0x8);
    public:
    // Get instance field reference: private Technie.PhysicsCreator.CuttableMesh inputMesh
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::CuttableMesh*& dyn_inputMesh();
    // Get instance field reference: private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> outputFrontSubMeshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*& dyn_outputFrontSubMeshes();
    // Get instance field reference: private System.Collections.Generic.List`1<Technie.PhysicsCreator.CuttableSubMesh> outputBackSubMeshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*& dyn_outputBackSubMeshes();
    // public System.Void .ctor()
    // Offset: 0x502A8D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeshCutter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::MeshCutter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeshCutter*, creationType>()));
    }
    // public System.Void Cut(Technie.PhysicsCreator.CuttableMesh input, UnityEngine.Plane worldCutPlane)
    // Offset: 0x502A8DC
    void Cut(::Technie::PhysicsCreator::CuttableMesh* input, ::UnityEngine::Plane worldCutPlane);
    // static private UnityEngine.Vector3 ClosestPointOnPlane(UnityEngine.Plane plane, UnityEngine.Vector3 point)
    // Offset: 0x502AC90
    static ::UnityEngine::Vector3 ClosestPointOnPlane(::UnityEngine::Plane plane, ::UnityEngine::Vector3 point);
    // public Technie.PhysicsCreator.CuttableMesh GetFrontOutput()
    // Offset: 0x502B2B8
    ::Technie::PhysicsCreator::CuttableMesh* GetFrontOutput();
    // public Technie.PhysicsCreator.CuttableMesh GetBackOutput()
    // Offset: 0x502B318
    ::Technie::PhysicsCreator::CuttableMesh* GetBackOutput();
    // private System.Void Cut(Technie.PhysicsCreator.CuttableSubMesh inputSubMesh, UnityEngine.Plane cutPlane)
    // Offset: 0x502ACC4
    void Cut(::Technie::PhysicsCreator::CuttableSubMesh* inputSubMesh, ::UnityEngine::Plane cutPlane);
    // private Technie.PhysicsCreator.VertexClassification Classify(UnityEngine.Vector3 vertex, UnityEngine.Plane cutPlane)
    // Offset: 0x502B37C
    ::Technie::PhysicsCreator::VertexClassification Classify(::UnityEngine::Vector3 vertex, ::UnityEngine::Plane cutPlane);
    // private System.Void CountSides(Technie.PhysicsCreator.VertexClassification c, ref System.Int32 numFront, ref System.Int32 numBehind)
    // Offset: 0x502B3C4
    void CountSides(::Technie::PhysicsCreator::VertexClassification c, ByRef<int> numFront, ByRef<int> numBehind);
    // private System.Void KeepTriangle(System.Int32 i0, System.Int32 i1, System.Int32 i2, Technie.PhysicsCreator.CuttableSubMesh inputSubMesh, Technie.PhysicsCreator.CuttableSubMesh destSubMesh)
    // Offset: 0x502B3E8
    void KeepTriangle(int i0, int i1, int i2, ::Technie::PhysicsCreator::CuttableSubMesh* inputSubMesh, ::Technie::PhysicsCreator::CuttableSubMesh* destSubMesh);
    // private System.Void SplitA(System.Int32 i0, System.Int32 i1, System.Int32 i2, Technie.PhysicsCreator.CuttableSubMesh inputSubMesh, UnityEngine.Plane cutPlane, Technie.PhysicsCreator.CuttableSubMesh frontSubMesh, Technie.PhysicsCreator.CuttableSubMesh backSubMesh)
    // Offset: 0x502B444
    void SplitA(int i0, int i1, int i2, ::Technie::PhysicsCreator::CuttableSubMesh* inputSubMesh, ::UnityEngine::Plane cutPlane, ::Technie::PhysicsCreator::CuttableSubMesh* frontSubMesh, ::Technie::PhysicsCreator::CuttableSubMesh* backSubMesh);
    // private System.Void SplitB(System.Int32 i0, System.Int32 i1, System.Int32 i2, Technie.PhysicsCreator.CuttableSubMesh inputSubMesh, UnityEngine.Plane cutPlane, Technie.PhysicsCreator.CuttableSubMesh frontSubMesh, Technie.PhysicsCreator.CuttableSubMesh backSubMesh)
    // Offset: 0x502B608
    void SplitB(int i0, int i1, int i2, ::Technie::PhysicsCreator::CuttableSubMesh* inputSubMesh, ::UnityEngine::Plane cutPlane, ::Technie::PhysicsCreator::CuttableSubMesh* frontSubMesh, ::Technie::PhysicsCreator::CuttableSubMesh* backSubMesh);
    // private System.Void SplitBFlipped(System.Int32 i0, System.Int32 i1, System.Int32 i2, Technie.PhysicsCreator.CuttableSubMesh inputSubMesh, UnityEngine.Plane cutPlane, Technie.PhysicsCreator.CuttableSubMesh frontSubMesh, Technie.PhysicsCreator.CuttableSubMesh backSubMesh)
    // Offset: 0x502B73C
    void SplitBFlipped(int i0, int i1, int i2, ::Technie::PhysicsCreator::CuttableSubMesh* inputSubMesh, ::UnityEngine::Plane cutPlane, ::Technie::PhysicsCreator::CuttableSubMesh* frontSubMesh, ::Technie::PhysicsCreator::CuttableSubMesh* backSubMesh);
    // private UnityEngine.Vector3 CalcIntersection(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Plane plane, out System.Single weight)
    // Offset: 0x502B87C
    ::UnityEngine::Vector3 CalcIntersection(::UnityEngine::Vector3 v0, ::UnityEngine::Vector3 v1, ::UnityEngine::Plane plane, ByRef<float> weight);
  }; // Technie.PhysicsCreator.MeshCutter
  #pragma pack(pop)
  static check_size<sizeof(MeshCutter), 32 + sizeof(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::CuttableSubMesh*>*)> __Technie_PhysicsCreator_MeshCutterSizeCheck;
  static_assert(sizeof(MeshCutter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(::Technie::PhysicsCreator::CuttableMesh*, ::UnityEngine::Plane)>(&Technie::PhysicsCreator::MeshCutter::Cut)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableMesh")->byval_arg;
    static auto* worldCutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, worldCutPlane});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::ClosestPointOnPlane
// Il2CppName: ClosestPointOnPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Plane, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::MeshCutter::ClosestPointOnPlane)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "ClosestPointOnPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane, point});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::GetFrontOutput
// Il2CppName: GetFrontOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::CuttableMesh* (Technie::PhysicsCreator::MeshCutter::*)()>(&Technie::PhysicsCreator::MeshCutter::GetFrontOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "GetFrontOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::GetBackOutput
// Il2CppName: GetBackOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::CuttableMesh* (Technie::PhysicsCreator::MeshCutter::*)()>(&Technie::PhysicsCreator::MeshCutter::GetBackOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "GetBackOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(::Technie::PhysicsCreator::CuttableSubMesh*, ::UnityEngine::Plane)>(&Technie::PhysicsCreator::MeshCutter::Cut)> {
  static const MethodInfo* get() {
    static auto* inputSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* cutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputSubMesh, cutPlane});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::Classify
// Il2CppName: Classify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::VertexClassification (Technie::PhysicsCreator::MeshCutter::*)(::UnityEngine::Vector3, ::UnityEngine::Plane)>(&Technie::PhysicsCreator::MeshCutter::Classify)> {
  static const MethodInfo* get() {
    static auto* vertex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* cutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "Classify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertex, cutPlane});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::CountSides
// Il2CppName: CountSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(::Technie::PhysicsCreator::VertexClassification, ByRef<int>, ByRef<int>)>(&Technie::PhysicsCreator::MeshCutter::CountSides)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "VertexClassification")->byval_arg;
    static auto* numFront = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numBehind = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "CountSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, numFront, numBehind});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::KeepTriangle
// Il2CppName: KeepTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(int, int, int, ::Technie::PhysicsCreator::CuttableSubMesh*, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::MeshCutter::KeepTriangle)> {
  static const MethodInfo* get() {
    static auto* i0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* destSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "KeepTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i0, i1, i2, inputSubMesh, destSubMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::SplitA
// Il2CppName: SplitA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(int, int, int, ::Technie::PhysicsCreator::CuttableSubMesh*, ::UnityEngine::Plane, ::Technie::PhysicsCreator::CuttableSubMesh*, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::MeshCutter::SplitA)> {
  static const MethodInfo* get() {
    static auto* i0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* cutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* frontSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* backSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "SplitA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i0, i1, i2, inputSubMesh, cutPlane, frontSubMesh, backSubMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::SplitB
// Il2CppName: SplitB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(int, int, int, ::Technie::PhysicsCreator::CuttableSubMesh*, ::UnityEngine::Plane, ::Technie::PhysicsCreator::CuttableSubMesh*, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::MeshCutter::SplitB)> {
  static const MethodInfo* get() {
    static auto* i0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* cutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* frontSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* backSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "SplitB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i0, i1, i2, inputSubMesh, cutPlane, frontSubMesh, backSubMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::SplitBFlipped
// Il2CppName: SplitBFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::MeshCutter::*)(int, int, int, ::Technie::PhysicsCreator::CuttableSubMesh*, ::UnityEngine::Plane, ::Technie::PhysicsCreator::CuttableSubMesh*, ::Technie::PhysicsCreator::CuttableSubMesh*)>(&Technie::PhysicsCreator::MeshCutter::SplitBFlipped)> {
  static const MethodInfo* get() {
    static auto* i0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* cutPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* frontSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    static auto* backSubMesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "CuttableSubMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "SplitBFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i0, i1, i2, inputSubMesh, cutPlane, frontSubMesh, backSubMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::MeshCutter::CalcIntersection
// Il2CppName: CalcIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Technie::PhysicsCreator::MeshCutter::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Plane, ByRef<float>)>(&Technie::PhysicsCreator::MeshCutter::CalcIntersection)> {
  static const MethodInfo* get() {
    static auto* v0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::MeshCutter*), "CalcIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v0, v1, plane, weight});
  }
};
