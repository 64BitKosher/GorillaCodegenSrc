// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: BoxDef
  struct BoxDef;
  // Forward declaring type: ConstructionPlane
  class ConstructionPlane;
  // Forward declaring type: RotatedBox
  class RotatedBox;
}
// Forward declaring namespace: Technie::PhysicsCreator::Rigid
namespace Technie::PhysicsCreator::Rigid {
  // Forward declaring type: Hull
  class Hull;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: RotatedBoxFitter
  class RotatedBoxFitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::RotatedBoxFitter);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::RotatedBoxFitter*, "Technie.PhysicsCreator", "RotatedBoxFitter");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.RotatedBoxFitter
  // [TokenAttribute] Offset: FFFFFFFF
  class RotatedBoxFitter : public ::Il2CppObject {
    public:
    // public System.Void .ctor()
    // Offset: 0x5025A38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotatedBoxFitter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::RotatedBoxFitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotatedBoxFitter*, creationType>()));
    }
    // public Technie.PhysicsCreator.BoxDef Fit(Technie.PhysicsCreator.Rigid.Hull hull, UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices)
    // Offset: 0x5025A40
    ::Technie::PhysicsCreator::BoxDef Fit(::Technie::PhysicsCreator::Rigid::Hull* hull, ::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices);
    // public Technie.PhysicsCreator.BoxDef Fit(UnityEngine.Vector3[] hullVertices, System.Int32[] hullIndices)
    // Offset: 0x5025F70
    ::Technie::PhysicsCreator::BoxDef Fit(::ArrayW<::UnityEngine::Vector3> hullVertices, ::ArrayW<int> hullIndices);
    // static private System.Void GeneratePlaneVariants(Technie.PhysicsCreator.ConstructionPlane basePlane, System.Int32 numVariants, System.Single angleRange, System.Collections.Generic.List`1<Technie.PhysicsCreator.ConstructionPlane> variantPlanes)
    // Offset: 0x5026998
    static void GeneratePlaneVariants(::Technie::PhysicsCreator::ConstructionPlane* basePlane, int numVariants, float angleRange, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::ConstructionPlane*>* variantPlanes);
    // static private System.Void UnifyOffsets(Technie.PhysicsCreator.RotatedBox inputBox)
    // Offset: 0x5026B3C
    static void UnifyOffsets(::Technie::PhysicsCreator::RotatedBox* inputBox);
    // static public Technie.PhysicsCreator.BoxDef ToBoxDef(Technie.PhysicsCreator.RotatedBox computedBox)
    // Offset: 0x5026BE0
    static ::Technie::PhysicsCreator::BoxDef ToBoxDef(::Technie::PhysicsCreator::RotatedBox* computedBox);
    // static public System.Void ApplyToHull(Technie.PhysicsCreator.RotatedBox computedBox, Technie.PhysicsCreator.Rigid.Hull targetHull)
    // Offset: 0x5023A04
    static void ApplyToHull(::Technie::PhysicsCreator::RotatedBox* computedBox, ::Technie::PhysicsCreator::Rigid::Hull* targetHull);
    // static private System.Collections.Generic.List`1<Technie.PhysicsCreator.RotatedBox> FindTightestBoxes(System.Collections.Generic.List`1<Technie.PhysicsCreator.ConstructionPlane> planes, UnityEngine.Vector3[] inputVertices)
    // Offset: 0x5026768
    static ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::RotatedBox*>* FindTightestBoxes(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::ConstructionPlane*>* planes, ::ArrayW<::UnityEngine::Vector3> inputVertices);
    // static public Technie.PhysicsCreator.RotatedBox FindTightestBox(Technie.PhysicsCreator.ConstructionPlane plane, UnityEngine.Vector3[] inputVertices)
    // Offset: 0x5022DF4
    static ::Technie::PhysicsCreator::RotatedBox* FindTightestBox(::Technie::PhysicsCreator::ConstructionPlane* plane, ::ArrayW<::UnityEngine::Vector3> inputVertices);
  }; // Technie.PhysicsCreator.RotatedBoxFitter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::Fit
// Il2CppName: Fit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::BoxDef (Technie::PhysicsCreator::RotatedBoxFitter::*)(::Technie::PhysicsCreator::Rigid::Hull*, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>)>(&Technie::PhysicsCreator::RotatedBoxFitter::Fit)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "Fit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, meshVertices, meshIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::Fit
// Il2CppName: Fit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::BoxDef (Technie::PhysicsCreator::RotatedBoxFitter::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>)>(&Technie::PhysicsCreator::RotatedBoxFitter::Fit)> {
  static const MethodInfo* get() {
    static auto* hullVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* hullIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "Fit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hullVertices, hullIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::GeneratePlaneVariants
// Il2CppName: GeneratePlaneVariants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Technie::PhysicsCreator::ConstructionPlane*, int, float, ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::ConstructionPlane*>*)>(&Technie::PhysicsCreator::RotatedBoxFitter::GeneratePlaneVariants)> {
  static const MethodInfo* get() {
    static auto* basePlane = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "ConstructionPlane")->byval_arg;
    static auto* numVariants = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* angleRange = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* variantPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "ConstructionPlane")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "GeneratePlaneVariants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basePlane, numVariants, angleRange, variantPlanes});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::UnifyOffsets
// Il2CppName: UnifyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Technie::PhysicsCreator::RotatedBox*)>(&Technie::PhysicsCreator::RotatedBoxFitter::UnifyOffsets)> {
  static const MethodInfo* get() {
    static auto* inputBox = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "RotatedBox")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "UnifyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBox});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::ToBoxDef
// Il2CppName: ToBoxDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::BoxDef (*)(::Technie::PhysicsCreator::RotatedBox*)>(&Technie::PhysicsCreator::RotatedBoxFitter::ToBoxDef)> {
  static const MethodInfo* get() {
    static auto* computedBox = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "RotatedBox")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "ToBoxDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computedBox});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::ApplyToHull
// Il2CppName: ApplyToHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Technie::PhysicsCreator::RotatedBox*, ::Technie::PhysicsCreator::Rigid::Hull*)>(&Technie::PhysicsCreator::RotatedBoxFitter::ApplyToHull)> {
  static const MethodInfo* get() {
    static auto* computedBox = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "RotatedBox")->byval_arg;
    static auto* targetHull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "ApplyToHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computedBox, targetHull});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::FindTightestBoxes
// Il2CppName: FindTightestBoxes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Technie::PhysicsCreator::RotatedBox*>* (*)(::System::Collections::Generic::List_1<::Technie::PhysicsCreator::ConstructionPlane*>*, ::ArrayW<::UnityEngine::Vector3>)>(&Technie::PhysicsCreator::RotatedBoxFitter::FindTightestBoxes)> {
  static const MethodInfo* get() {
    static auto* planes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "ConstructionPlane")})->byval_arg;
    static auto* inputVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "FindTightestBoxes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planes, inputVertices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBoxFitter::FindTightestBox
// Il2CppName: FindTightestBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::RotatedBox* (*)(::Technie::PhysicsCreator::ConstructionPlane*, ::ArrayW<::UnityEngine::Vector3>)>(&Technie::PhysicsCreator::RotatedBoxFitter::FindTightestBox)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "ConstructionPlane")->byval_arg;
    static auto* inputVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBoxFitter*), "FindTightestBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane, inputVertices});
  }
};
