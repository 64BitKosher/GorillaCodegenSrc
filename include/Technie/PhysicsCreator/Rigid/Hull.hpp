// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Technie.PhysicsCreator.IHull
#include "Technie/PhysicsCreator/IHull.hpp"
// Including type: Technie.PhysicsCreator.HullType
#include "Technie/PhysicsCreator/HullType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Technie.PhysicsCreator.BoxFitMethod
#include "Technie/PhysicsCreator/BoxFitMethod.hpp"
// Including type: Technie.PhysicsCreator.BoxDef
#include "Technie/PhysicsCreator/BoxDef.hpp"
// Including type: Technie.PhysicsCreator.CapsuleDef
#include "Technie/PhysicsCreator/CapsuleDef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: PhysicMaterial
  class PhysicMaterial;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: Sphere
  class Sphere;
  // Forward declaring type: Triangle
  class Triangle;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator.Rigid
namespace Technie::PhysicsCreator::Rigid {
  // Forward declaring type: Hull
  class Hull;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::Rigid::Hull);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::Rigid::Hull*, "Technie.PhysicsCreator.Rigid", "Hull");
// Type namespace: Technie.PhysicsCreator.Rigid
namespace Technie::PhysicsCreator::Rigid {
  // Size: 0x119
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.Rigid.Hull
  // [TokenAttribute] Offset: FFFFFFFF
  class Hull : public ::Il2CppObject/*, public ::Technie::PhysicsCreator::IHull*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean isVisible
    // Size: 0x1
    // Offset: 0x18
    bool isVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isVisible and: type
    char __padding1[0x3] = {};
    // public Technie.PhysicsCreator.HullType type
    // Size: 0x4
    // Offset: 0x1C
    ::Technie::PhysicsCreator::HullType type;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::HullType) == 0x4);
    // public UnityEngine.Color colour
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color colour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.PhysicMaterial material
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::PhysicMaterial* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicMaterial*) == 0x8);
    // public System.Boolean enableInflation
    // Size: 0x1
    // Offset: 0x38
    bool enableInflation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableInflation and: inflationAmount
    char __padding5[0x3] = {};
    // public System.Single inflationAmount
    // Size: 0x4
    // Offset: 0x3C
    float inflationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Technie.PhysicsCreator.BoxFitMethod boxFitMethod
    // Size: 0x4
    // Offset: 0x40
    ::Technie::PhysicsCreator::BoxFitMethod boxFitMethod;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::BoxFitMethod) == 0x4);
    // public System.Boolean isTrigger
    // Size: 0x1
    // Offset: 0x44
    bool isTrigger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isChildCollider
    // Size: 0x1
    // Offset: 0x45
    bool isChildCollider;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isChildCollider and: selectedFaces
    char __padding9[0x2] = {};
    // private System.Collections.Generic.List`1<System.Int32> selectedFaces
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* selectedFaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> cachedTriangleVertices
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* cachedTriangleVertices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public UnityEngine.Mesh collisionMesh
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Mesh* collisionMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public Technie.PhysicsCreator.BoxDef collisionBox
    // Size: 0x34
    // Offset: 0x60
    ::Technie::PhysicsCreator::BoxDef collisionBox;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::BoxDef) == 0x34);
    // Padding between fields: collisionBox and: collisionSphere
    char __padding13[0x4] = {};
    // public Technie.PhysicsCreator.Sphere collisionSphere
    // Size: 0x8
    // Offset: 0x98
    ::Technie::PhysicsCreator::Sphere* collisionSphere;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::Sphere*) == 0x8);
    // public UnityEngine.Mesh faceCollisionMesh
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Mesh* faceCollisionMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Vector3 faceBoxCenter
    // Size: 0xC
    // Offset: 0xA8
    ::UnityEngine::Vector3 faceBoxCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 faceBoxSize
    // Size: 0xC
    // Offset: 0xB4
    ::UnityEngine::Vector3 faceBoxSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion faceAsBoxRotation
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Quaternion faceAsBoxRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public Technie.PhysicsCreator.CapsuleDef collisionCapsule
    // Size: 0x34
    // Offset: 0xD0
    ::Technie::PhysicsCreator::CapsuleDef collisionCapsule;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::CapsuleDef) == 0x34);
    // Padding between fields: collisionCapsule and: autoMeshes
    char __padding19[0x4] = {};
    // public UnityEngine.Mesh[] autoMeshes
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Mesh*> autoMeshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Mesh*>) == 0x8);
    // public System.Boolean hasColliderError
    // Size: 0x1
    // Offset: 0x110
    bool hasColliderError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasColliderError and: numColliderFaces
    char __padding21[0x3] = {};
    // public System.Int32 numColliderFaces
    // Size: 0x4
    // Offset: 0x114
    int numColliderFaces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean noInputError
    // Size: 0x1
    // Offset: 0x118
    bool noInputError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Technie::PhysicsCreator::IHull
    operator ::Technie::PhysicsCreator::IHull() noexcept {
      return *reinterpret_cast<::Technie::PhysicsCreator::IHull*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Boolean isVisible
    [[deprecated("Use field access instead!")]] bool& dyn_isVisible();
    // Get instance field reference: public Technie.PhysicsCreator.HullType type
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::HullType& dyn_type();
    // Get instance field reference: public UnityEngine.Color colour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colour();
    // Get instance field reference: public UnityEngine.PhysicMaterial material
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicMaterial*& dyn_material();
    // Get instance field reference: public System.Boolean enableInflation
    [[deprecated("Use field access instead!")]] bool& dyn_enableInflation();
    // Get instance field reference: public System.Single inflationAmount
    [[deprecated("Use field access instead!")]] float& dyn_inflationAmount();
    // Get instance field reference: public Technie.PhysicsCreator.BoxFitMethod boxFitMethod
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::BoxFitMethod& dyn_boxFitMethod();
    // Get instance field reference: public System.Boolean isTrigger
    [[deprecated("Use field access instead!")]] bool& dyn_isTrigger();
    // Get instance field reference: public System.Boolean isChildCollider
    [[deprecated("Use field access instead!")]] bool& dyn_isChildCollider();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> selectedFaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_selectedFaces();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> cachedTriangleVertices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_cachedTriangleVertices();
    // Get instance field reference: public UnityEngine.Mesh collisionMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_collisionMesh();
    // Get instance field reference: public Technie.PhysicsCreator.BoxDef collisionBox
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::BoxDef& dyn_collisionBox();
    // Get instance field reference: public Technie.PhysicsCreator.Sphere collisionSphere
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::Sphere*& dyn_collisionSphere();
    // Get instance field reference: public UnityEngine.Mesh faceCollisionMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_faceCollisionMesh();
    // Get instance field reference: public UnityEngine.Vector3 faceBoxCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_faceBoxCenter();
    // Get instance field reference: public UnityEngine.Vector3 faceBoxSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_faceBoxSize();
    // Get instance field reference: public UnityEngine.Quaternion faceAsBoxRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_faceAsBoxRotation();
    // Get instance field reference: public Technie.PhysicsCreator.CapsuleDef collisionCapsule
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::CapsuleDef& dyn_collisionCapsule();
    // Get instance field reference: public UnityEngine.Mesh[] autoMeshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Mesh*>& dyn_autoMeshes();
    // Get instance field reference: public System.Boolean hasColliderError
    [[deprecated("Use field access instead!")]] bool& dyn_hasColliderError();
    // Get instance field reference: public System.Int32 numColliderFaces
    [[deprecated("Use field access instead!")]] int& dyn_numColliderFaces();
    // Get instance field reference: public System.Boolean noInputError
    [[deprecated("Use field access instead!")]] bool& dyn_noInputError();
    // public System.String get_Name()
    // Offset: 0x5039058
    ::StringW get_Name();
    // public System.Int32 get_NumSelectedTriangles()
    // Offset: 0x5039060
    int get_NumSelectedTriangles();
    // public UnityEngine.Vector3[] get_CachedTriangleVertices()
    // Offset: 0x50390A8
    ::ArrayW<::UnityEngine::Vector3> get_CachedTriangleVertices();
    // public System.Void set_CachedTriangleVertices(UnityEngine.Vector3[] value)
    // Offset: 0x50390F8
    void set_CachedTriangleVertices(::ArrayW<::UnityEngine::Vector3> value);
    // public System.Void Destroy()
    // Offset: 0x502CFC8
    void Destroy();
    // public System.Boolean ContainsAutoMesh(UnityEngine.Mesh m)
    // Offset: 0x5031DE8
    bool ContainsAutoMesh(::UnityEngine::Mesh* m);
    // public System.Boolean IsTriangleSelected(System.Int32 triIndex, UnityEngine.Renderer renderer, UnityEngine.Mesh targetMesh)
    // Offset: 0x5039168
    bool IsTriangleSelected(int triIndex, ::UnityEngine::Renderer* renderer, ::UnityEngine::Mesh* targetMesh);
    // public System.Int32[] GetSelectedFaces()
    // Offset: 0x5027D98
    ::ArrayW<int> GetSelectedFaces();
    // public System.Void ClearSelectedFaces()
    // Offset: 0x50391C0
    void ClearSelectedFaces();
    // public System.Void AddToSelection(System.Int32 newTriangleIndex, UnityEngine.Mesh srcMesh)
    // Offset: 0x5039230
    void AddToSelection(int newTriangleIndex, ::UnityEngine::Mesh* srcMesh);
    // public System.Void RemoveFromSelection(System.Int32 existingTriangleIndex, UnityEngine.Mesh srcMesh)
    // Offset: 0x5039320
    void RemoveFromSelection(int existingTriangleIndex, ::UnityEngine::Mesh* srcMesh);
    // public System.Void SetSelectedFaces(System.Collections.Generic.List`1<System.Int32> newSelectedFaceIndices, UnityEngine.Mesh srcMesh)
    // Offset: 0x5039390
    void SetSelectedFaces(::System::Collections::Generic::List_1<int>* newSelectedFaceIndices, ::UnityEngine::Mesh* srcMesh);
    // public System.Int32 GetSelectedFaceIndex(System.Int32 index)
    // Offset: 0x5039418
    int GetSelectedFaceIndex(int index);
    // public System.Void FindConvexHull(UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, out UnityEngine.Vector3[] hullVertices, out System.Int32[] hullIndices, System.Boolean showErrorInLog)
    // Offset: 0x5022938
    void FindConvexHull(::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, ByRef<::ArrayW<::UnityEngine::Vector3>> hullVertices, ByRef<::ArrayW<int>> hullIndices, bool showErrorInLog);
    // public System.Collections.Generic.List`1<Technie.PhysicsCreator.Triangle> FindSelectedTriangles(UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices)
    // Offset: 0x50248C0
    ::System::Collections::Generic::List_1<::Technie::PhysicsCreator::Triangle*>* FindSelectedTriangles(::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices);
    // public System.Void FindTriangles(UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, out UnityEngine.Vector3[] hullVertices, out System.Int32[] hullIndices)
    // Offset: 0x5025AEC
    void FindTriangles(::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, ByRef<::ArrayW<::UnityEngine::Vector3>> hullVertices, ByRef<::ArrayW<int>> hullIndices);
    // public UnityEngine.Vector3[] GetSelectedVertices(UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices)
    // Offset: 0x5023584
    ::ArrayW<::UnityEngine::Vector3> GetSelectedVertices(::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices);
    // public System.Void GenerateCollisionMesh(UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, UnityEngine.Mesh[] autoHulls, System.Single faceThickness)
    // Offset: 0x5039470
    void GenerateCollisionMesh(::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, ::ArrayW<::UnityEngine::Mesh*> autoHulls, float faceThickness);
    // private UnityEngine.Vector3[] ExtractUniqueVertices(Technie.PhysicsCreator.Rigid.Hull hull, UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices)
    // Offset: 0x503AE54
    ::ArrayW<::UnityEngine::Vector3> ExtractUniqueVertices(::Technie::PhysicsCreator::Rigid::Hull* hull, ::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices);
    // static private System.Boolean Contains(System.Collections.Generic.List`1<UnityEngine.Vector3> list, UnityEngine.Vector3 p)
    // Offset: 0x503B880
    static bool Contains(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* list, ::UnityEngine::Vector3 p);
    // private System.Void GenerateConvexHull(Technie.PhysicsCreator.Rigid.Hull hull, UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, UnityEngine.Mesh destMesh)
    // Offset: 0x503A640
    void GenerateConvexHull(::Technie::PhysicsCreator::Rigid::Hull* hull, ::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, ::UnityEngine::Mesh* destMesh);
    // private System.Void GenerateFace(Technie.PhysicsCreator.Rigid.Hull hull, UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, System.Single faceThickness)
    // Offset: 0x503A8C0
    void GenerateFace(::Technie::PhysicsCreator::Rigid::Hull* hull, ::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, float faceThickness);
    // static private System.Single CalcRequiredArea(System.Single angleDeg, UnityEngine.Vector3 primaryAxis, UnityEngine.Vector3 primaryUp, UnityEngine.Vector3[] vertices, out UnityEngine.Vector3 min, out UnityEngine.Vector3 max, out UnityEngine.Quaternion outBasis)
    // Offset: 0x503B668
    static float CalcRequiredArea(float angleDeg, ::UnityEngine::Vector3 primaryAxis, ::UnityEngine::Vector3 primaryUp, ::ArrayW<::UnityEngine::Vector3> vertices, ByRef<::UnityEngine::Vector3> min, ByRef<::UnityEngine::Vector3> max, ByRef<::UnityEngine::Quaternion> outBasis);
    // static private UnityEngine.Vector3 CalcPrimaryAxis(Technie.PhysicsCreator.Rigid.Hull hull, UnityEngine.Vector3[] meshVertices, System.Int32[] meshIndices, System.Boolean snapToAxies)
    // Offset: 0x503B1A4
    static ::UnityEngine::Vector3 CalcPrimaryAxis(::Technie::PhysicsCreator::Rigid::Hull* hull, ::ArrayW<::UnityEngine::Vector3> meshVertices, ::ArrayW<int> meshIndices, bool snapToAxies);
    // public System.Void .ctor()
    // Offset: 0x502CDC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hull* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::Rigid::Hull::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hull*, creationType>()));
    }
  }; // Technie.PhysicsCreator.Rigid.Hull
  #pragma pack(pop)
  static check_size<sizeof(Hull), 280 + sizeof(bool)> __Technie_PhysicsCreator_Rigid_HullSizeCheck;
  static_assert(sizeof(Hull) == 0x119);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::get_NumSelectedTriangles
// Il2CppName: get_NumSelectedTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::get_NumSelectedTriangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "get_NumSelectedTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::get_CachedTriangleVertices
// Il2CppName: get_CachedTriangleVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::get_CachedTriangleVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "get_CachedTriangleVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::set_CachedTriangleVertices
// Il2CppName: set_CachedTriangleVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>)>(&Technie::PhysicsCreator::Rigid::Hull::set_CachedTriangleVertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "set_CachedTriangleVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::ContainsAutoMesh
// Il2CppName: ContainsAutoMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::Rigid::Hull::*)(::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::ContainsAutoMesh)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "ContainsAutoMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::IsTriangleSelected
// Il2CppName: IsTriangleSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Technie::PhysicsCreator::Rigid::Hull::*)(int, ::UnityEngine::Renderer*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::IsTriangleSelected)> {
  static const MethodInfo* get() {
    static auto* triIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* targetMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "IsTriangleSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triIndex, renderer, targetMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GetSelectedFaces
// Il2CppName: GetSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::GetSelectedFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GetSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::ClearSelectedFaces
// Il2CppName: ClearSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)()>(&Technie::PhysicsCreator::Rigid::Hull::ClearSelectedFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "ClearSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::AddToSelection
// Il2CppName: AddToSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(int, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::AddToSelection)> {
  static const MethodInfo* get() {
    static auto* newTriangleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "AddToSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTriangleIndex, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::RemoveFromSelection
// Il2CppName: RemoveFromSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(int, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::RemoveFromSelection)> {
  static const MethodInfo* get() {
    static auto* existingTriangleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "RemoveFromSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{existingTriangleIndex, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::SetSelectedFaces
// Il2CppName: SetSelectedFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::System::Collections::Generic::List_1<int>*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::SetSelectedFaces)> {
  static const MethodInfo* get() {
    static auto* newSelectedFaceIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "SetSelectedFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSelectedFaceIndices, srcMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GetSelectedFaceIndex
// Il2CppName: GetSelectedFaceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::Rigid::Hull::*)(int)>(&Technie::PhysicsCreator::Rigid::Hull::GetSelectedFaceIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GetSelectedFaceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::FindConvexHull
// Il2CppName: FindConvexHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<::ArrayW<int>>, bool)>(&Technie::PhysicsCreator::Rigid::Hull::FindConvexHull)> {
  static const MethodInfo* get() {
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hullVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* hullIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* showErrorInLog = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "FindConvexHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshVertices, meshIndices, hullVertices, hullIndices, showErrorInLog});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::FindSelectedTriangles
// Il2CppName: FindSelectedTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Technie::PhysicsCreator::Triangle*>* (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>)>(&Technie::PhysicsCreator::Rigid::Hull::FindSelectedTriangles)> {
  static const MethodInfo* get() {
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "FindSelectedTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshVertices, meshIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::FindTriangles
// Il2CppName: FindTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<::ArrayW<int>>)>(&Technie::PhysicsCreator::Rigid::Hull::FindTriangles)> {
  static const MethodInfo* get() {
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* hullVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* hullIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "FindTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshVertices, meshIndices, hullVertices, hullIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GetSelectedVertices
// Il2CppName: GetSelectedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>)>(&Technie::PhysicsCreator::Rigid::Hull::GetSelectedVertices)> {
  static const MethodInfo* get() {
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GetSelectedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshVertices, meshIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GenerateCollisionMesh
// Il2CppName: GenerateCollisionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ::ArrayW<::UnityEngine::Mesh*>, float)>(&Technie::PhysicsCreator::Rigid::Hull::GenerateCollisionMesh)> {
  static const MethodInfo* get() {
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* autoHulls = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh"), 1)->byval_arg;
    static auto* faceThickness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GenerateCollisionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshVertices, meshIndices, autoHulls, faceThickness});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::ExtractUniqueVertices
// Il2CppName: ExtractUniqueVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::Rigid::Hull::*)(::Technie::PhysicsCreator::Rigid::Hull*, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>)>(&Technie::PhysicsCreator::Rigid::Hull::ExtractUniqueVertices)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "ExtractUniqueVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, meshVertices, meshIndices});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::Rigid::Hull::Contains)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list, p});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GenerateConvexHull
// Il2CppName: GenerateConvexHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::Technie::PhysicsCreator::Rigid::Hull*, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Rigid::Hull::GenerateConvexHull)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* destMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GenerateConvexHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, meshVertices, meshIndices, destMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::GenerateFace
// Il2CppName: GenerateFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::Rigid::Hull::*)(::Technie::PhysicsCreator::Rigid::Hull*, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, float)>(&Technie::PhysicsCreator::Rigid::Hull::GenerateFace)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* faceThickness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "GenerateFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, meshVertices, meshIndices, faceThickness});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::CalcRequiredArea
// Il2CppName: CalcRequiredArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Technie::PhysicsCreator::Rigid::Hull::CalcRequiredArea)> {
  static const MethodInfo* get() {
    static auto* angleDeg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* primaryAxis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* primaryUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* outBasis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "CalcRequiredArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angleDeg, primaryAxis, primaryUp, vertices, min, max, outBasis});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::CalcPrimaryAxis
// Il2CppName: CalcPrimaryAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::Technie::PhysicsCreator::Rigid::Hull*, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, bool)>(&Technie::PhysicsCreator::Rigid::Hull::CalcPrimaryAxis)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator.Rigid", "Hull")->byval_arg;
    static auto* meshVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* meshIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* snapToAxies = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Rigid::Hull*), "CalcPrimaryAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, meshVertices, meshIndices, snapToAxies});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Rigid::Hull::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
