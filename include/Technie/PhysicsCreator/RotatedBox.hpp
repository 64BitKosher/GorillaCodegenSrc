// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: ConstructionPlane
  class ConstructionPlane;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: RotatedBox
  class RotatedBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::RotatedBox);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::RotatedBox*, "Technie.PhysicsCreator", "RotatedBox");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.RotatedBox
  // [TokenAttribute] Offset: FFFFFFFF
  class RotatedBox : public ::Il2CppObject {
    public:
    public:
    // public Technie.PhysicsCreator.ConstructionPlane plane
    // Size: 0x8
    // Offset: 0x10
    ::Technie::PhysicsCreator::ConstructionPlane* plane;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::ConstructionPlane*) == 0x8);
    // public UnityEngine.Vector3 localCenter
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 localCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 size
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single volume
    // Size: 0x4
    // Offset: 0x3C
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Technie.PhysicsCreator.ConstructionPlane plane
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::ConstructionPlane*& dyn_plane();
    // Get instance field reference: public UnityEngine.Vector3 localCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localCenter();
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector3 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_size();
    // Get instance field reference: public System.Single volume
    [[deprecated("Use field access instead!")]] float& dyn_volume();
    // public System.Single get_VolumeCm3()
    // Offset: 0x502574C
    float get_VolumeCm3();
    // public System.Void .ctor(Technie.PhysicsCreator.ConstructionPlane p, UnityEngine.Vector3 localCenter, UnityEngine.Vector3 c, UnityEngine.Vector3 s)
    // Offset: 0x5025760
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotatedBox* New_ctor(::Technie::PhysicsCreator::ConstructionPlane* p, ::UnityEngine::Vector3 localCenter, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::RotatedBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotatedBox*, creationType>(p, localCenter, c, s)));
    }
    // public System.Void DrawWireframe()
    // Offset: 0x50257F4
    void DrawWireframe();
  }; // Technie.PhysicsCreator.RotatedBox
  #pragma pack(pop)
  static check_size<sizeof(RotatedBox), 60 + sizeof(float)> __Technie_PhysicsCreator_RotatedBoxSizeCheck;
  static_assert(sizeof(RotatedBox) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBox::get_VolumeCm3
// Il2CppName: get_VolumeCm3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Technie::PhysicsCreator::RotatedBox::*)()>(&Technie::PhysicsCreator::RotatedBox::get_VolumeCm3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBox*), "get_VolumeCm3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedBox::DrawWireframe
// Il2CppName: DrawWireframe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::RotatedBox::*)()>(&Technie::PhysicsCreator::RotatedBox::DrawWireframe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedBox*), "DrawWireframe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
