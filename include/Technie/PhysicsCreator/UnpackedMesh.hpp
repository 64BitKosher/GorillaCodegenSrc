// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: UnpackedMesh
  class UnpackedMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::UnpackedMesh);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::UnpackedMesh*, "Technie.PhysicsCreator", "UnpackedMesh");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.UnpackedMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class UnpackedMesh : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.MeshRenderer rigidRenderer
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::MeshRenderer* rigidRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer skinnedRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::SkinnedMeshRenderer* skinnedRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private UnityEngine.Mesh srcMesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* srcMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.BoneWeight[] weights
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::BoneWeight> weights;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoneWeight>) == 0x8);
    // private System.Int32[] indices
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> indices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Vector3[] modelSpaceVertices
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector3> modelSpaceVertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.MeshRenderer rigidRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_rigidRenderer();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer skinnedRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_skinnedRenderer();
    // Get instance field reference: private UnityEngine.Mesh srcMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_srcMesh();
    // Get instance field reference: private UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: private UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: private UnityEngine.BoneWeight[] weights
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoneWeight>& dyn_weights();
    // Get instance field reference: private System.Int32[] indices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_indices();
    // Get instance field reference: private UnityEngine.Vector3[] modelSpaceVertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_modelSpaceVertices();
    // public UnityEngine.SkinnedMeshRenderer get_SkinnedRenderer()
    // Offset: 0x5035A94
    ::UnityEngine::SkinnedMeshRenderer* get_SkinnedRenderer();
    // public UnityEngine.Mesh get_Mesh()
    // Offset: 0x5035A9C
    ::UnityEngine::Mesh* get_Mesh();
    // public UnityEngine.Transform get_ModelSpaceTransform()
    // Offset: 0x5035AA4
    ::UnityEngine::Transform* get_ModelSpaceTransform();
    // public UnityEngine.Vector3[] get_RawVertices()
    // Offset: 0x5035B40
    ::ArrayW<::UnityEngine::Vector3> get_RawVertices();
    // public UnityEngine.Vector3[] get_ModelSpaceVertices()
    // Offset: 0x5035B48
    ::ArrayW<::UnityEngine::Vector3> get_ModelSpaceVertices();
    // public UnityEngine.BoneWeight[] get_BoneWeights()
    // Offset: 0x5035B50
    ::ArrayW<::UnityEngine::BoneWeight> get_BoneWeights();
    // public System.Int32 get_NumVertices()
    // Offset: 0x5035B58
    int get_NumVertices();
    // public System.Int32[] get_Indices()
    // Offset: 0x5035B74
    ::ArrayW<int> get_Indices();
    // static public Technie.PhysicsCreator.UnpackedMesh Create(UnityEngine.Renderer renderer)
    // Offset: 0x5035B7C
    static ::Technie::PhysicsCreator::UnpackedMesh* Create(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor(UnityEngine.MeshRenderer rigidRenderer)
    // Offset: 0x5035F3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnpackedMesh* New_ctor(::UnityEngine::MeshRenderer* rigidRenderer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::UnpackedMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnpackedMesh*, creationType>(rigidRenderer)));
    }
    // public System.Void .ctor(UnityEngine.SkinnedMeshRenderer skinnedRenderer)
    // Offset: 0x5035CF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnpackedMesh* New_ctor(::UnityEngine::SkinnedMeshRenderer* skinnedRenderer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Technie::PhysicsCreator::UnpackedMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnpackedMesh*, creationType>(skinnedRenderer)));
    }
    // static private UnityEngine.Vector3 ApplyBindPoseWeighted(UnityEngine.Vector3 inputVertex, UnityEngine.BoneWeight weight, UnityEngine.Matrix4x4[] bindPoses, UnityEngine.Transform[] bones, UnityEngine.Transform outputLocalSpace)
    // Offset: 0x50360E4
    static ::UnityEngine::Vector3 ApplyBindPoseWeighted(::UnityEngine::Vector3 inputVertex, ::UnityEngine::BoneWeight weight, ::ArrayW<::UnityEngine::Matrix4x4> bindPoses, ::ArrayW<::UnityEngine::Transform*> bones, ::UnityEngine::Transform* outputLocalSpace);
  }; // Technie.PhysicsCreator.UnpackedMesh
  #pragma pack(pop)
  static check_size<sizeof(UnpackedMesh), 72 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __Technie_PhysicsCreator_UnpackedMeshSizeCheck;
  static_assert(sizeof(UnpackedMesh) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_SkinnedRenderer
// Il2CppName: get_SkinnedRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SkinnedMeshRenderer* (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_SkinnedRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_SkinnedRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_Mesh
// Il2CppName: get_Mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_Mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_Mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_ModelSpaceTransform
// Il2CppName: get_ModelSpaceTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_ModelSpaceTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_ModelSpaceTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_RawVertices
// Il2CppName: get_RawVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_RawVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_RawVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_ModelSpaceVertices
// Il2CppName: get_ModelSpaceVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_ModelSpaceVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_ModelSpaceVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_BoneWeights
// Il2CppName: get_BoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::BoneWeight> (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_BoneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_BoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_NumVertices
// Il2CppName: get_NumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_NumVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_NumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::get_Indices
// Il2CppName: get_Indices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Technie::PhysicsCreator::UnpackedMesh::*)()>(&Technie::PhysicsCreator::UnpackedMesh::get_Indices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "get_Indices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Technie::PhysicsCreator::UnpackedMesh* (*)(::UnityEngine::Renderer*)>(&Technie::PhysicsCreator::UnpackedMesh::Create)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Technie::PhysicsCreator::UnpackedMesh::ApplyBindPoseWeighted
// Il2CppName: ApplyBindPoseWeighted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::BoneWeight, ::ArrayW<::UnityEngine::Matrix4x4>, ::ArrayW<::UnityEngine::Transform*>, ::UnityEngine::Transform*)>(&Technie::PhysicsCreator::UnpackedMesh::ApplyBindPoseWeighted)> {
  static const MethodInfo* get() {
    static auto* inputVertex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight")->byval_arg;
    static auto* bindPoses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* outputLocalSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::UnpackedMesh*), "ApplyBindPoseWeighted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputVertex, weight, bindPoses, bones, outputLocalSpace});
  }
};
