// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: BoneWeight
  struct BoneWeight;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Technie::PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: UnpackedMesh
  class UnpackedMesh;
  // Forward declaring type: IHull
  class IHull;
}
// Completed forward declares
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: Utils
  class Utils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Technie::PhysicsCreator::Utils);
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::Utils*, "Technie.PhysicsCreator", "Utils");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Technie.PhysicsCreator.Utils
  // [TokenAttribute] Offset: FFFFFFFF
  class Utils : public ::Il2CppObject {
    public:
    // static public UnityEngine.Matrix4x4 CreateSkewableTRS(UnityEngine.Transform target)
    // Offset: 0x503642C
    static ::UnityEngine::Matrix4x4 CreateSkewableTRS(::UnityEngine::Transform* target);
    // static public System.Void Inflate(UnityEngine.Vector3 point, ref UnityEngine.Vector3 min, ref UnityEngine.Vector3 max)
    // Offset: 0x503662C
    static void Inflate(::UnityEngine::Vector3 point, ByRef<::UnityEngine::Vector3> min, ByRef<::UnityEngine::Vector3> max);
    // static public UnityEngine.Plane[] ConvertToPlanes(UnityEngine.Mesh convexMesh, System.Boolean show)
    // Offset: 0x5036680
    static ::ArrayW<::UnityEngine::Plane> ConvertToPlanes(::UnityEngine::Mesh* convexMesh, bool show);
    // static public System.Boolean Contains(UnityEngine.Plane toTest, System.Collections.Generic.List`1<UnityEngine.Plane> planes)
    // Offset: 0x5036E88
    static bool Contains(::UnityEngine::Plane toTest, ::System::Collections::Generic::List_1<::UnityEngine::Plane>* planes);
    // static public UnityEngine.Mesh Clip(UnityEngine.Mesh boundingMesh, UnityEngine.Mesh inputMesh)
    // Offset: 0x503710C
    static ::UnityEngine::Mesh* Clip(::UnityEngine::Mesh* boundingMesh, ::UnityEngine::Mesh* inputMesh);
    // static public System.Single CalcTriangleArea(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x503732C
    static float CalcTriangleArea(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2);
    // static public System.Single TimeProgression(System.Single elapsedTime, System.Single maxTime)
    // Offset: 0x50373F4
    static float TimeProgression(float elapsedTime, float maxTime);
    // static public System.Single AsymtopicProgression(System.Single inputProgress, System.Single maxProgression, System.Single rate)
    // Offset: 0x5037408
    static float AsymtopicProgression(float inputProgress, float maxProgression, float rate);
    // static public System.Int32 FindBoneIndex(UnityEngine.SkinnedMeshRenderer skinnedRenderer, UnityEngine.Transform bone)
    // Offset: 0x5037418
    static int FindBoneIndex(::UnityEngine::SkinnedMeshRenderer* skinnedRenderer, ::UnityEngine::Transform* bone);
    // static public System.Boolean IsWeightAboveThreshold(UnityEngine.BoneWeight weights, System.Int32 ownBoneIndex, System.Single minThreshold, System.Single maxThreshold)
    // Offset: 0x50374EC
    static bool IsWeightAboveThreshold(::UnityEngine::BoneWeight weights, int ownBoneIndex, float minThreshold, float maxThreshold);
    // static public System.Boolean IsWeightAboveThreshold(System.Int32 boneIndex, System.Single boneWeight, System.Int32 ourIndex, System.Single minThreshold, System.Single maxThreshold)
    // Offset: 0x50375F4
    static bool IsWeightAboveThreshold(int boneIndex, float boneWeight, int ourIndex, float minThreshold, float maxThreshold);
    // static public System.Int32 NumVerticesForBone(Technie.PhysicsCreator.UnpackedMesh mesh, UnityEngine.Transform bone, System.Single minThreshold, System.Single maxThreshold)
    // Offset: 0x5037618
    static int NumVerticesForBone(::Technie::PhysicsCreator::UnpackedMesh* mesh, ::UnityEngine::Transform* bone, float minThreshold, float maxThreshold);
    // static public System.Void UpdateCachedVertices(Technie.PhysicsCreator.IHull hull, UnityEngine.Mesh srcMesh)
    // Offset: 0x50376DC
    static void UpdateCachedVertices(::Technie::PhysicsCreator::IHull* hull, ::UnityEngine::Mesh* srcMesh);
  }; // Technie.PhysicsCreator.Utils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::CreateSkewableTRS
// Il2CppName: CreateSkewableTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(::UnityEngine::Transform*)>(&Technie::PhysicsCreator::Utils::CreateSkewableTRS)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "CreateSkewableTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::Inflate
// Il2CppName: Inflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Technie::PhysicsCreator::Utils::Inflate)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "Inflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, min, max});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::ConvertToPlanes
// Il2CppName: ConvertToPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Plane> (*)(::UnityEngine::Mesh*, bool)>(&Technie::PhysicsCreator::Utils::ConvertToPlanes)> {
  static const MethodInfo* get() {
    static auto* convexMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "ConvertToPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{convexMesh, show});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Plane, ::System::Collections::Generic::List_1<::UnityEngine::Plane>*)>(&Technie::PhysicsCreator::Utils::Contains)> {
  static const MethodInfo* get() {
    static auto* toTest = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* planes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toTest, planes});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::Clip
// Il2CppName: Clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)(::UnityEngine::Mesh*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Utils::Clip)> {
  static const MethodInfo* get() {
    static auto* boundingMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* inputMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "Clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundingMesh, inputMesh});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::CalcTriangleArea
// Il2CppName: CalcTriangleArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Technie::PhysicsCreator::Utils::CalcTriangleArea)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "CalcTriangleArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::TimeProgression
// Il2CppName: TimeProgression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Technie::PhysicsCreator::Utils::TimeProgression)> {
  static const MethodInfo* get() {
    static auto* elapsedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "TimeProgression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elapsedTime, maxTime});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::AsymtopicProgression
// Il2CppName: AsymtopicProgression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Technie::PhysicsCreator::Utils::AsymtopicProgression)> {
  static const MethodInfo* get() {
    static auto* inputProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxProgression = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "AsymtopicProgression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputProgress, maxProgression, rate});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::FindBoneIndex
// Il2CppName: FindBoneIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::SkinnedMeshRenderer*, ::UnityEngine::Transform*)>(&Technie::PhysicsCreator::Utils::FindBoneIndex)> {
  static const MethodInfo* get() {
    static auto* skinnedRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* bone = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "FindBoneIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skinnedRenderer, bone});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::IsWeightAboveThreshold
// Il2CppName: IsWeightAboveThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::BoneWeight, int, float, float)>(&Technie::PhysicsCreator::Utils::IsWeightAboveThreshold)> {
  static const MethodInfo* get() {
    static auto* weights = &::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight")->byval_arg;
    static auto* ownBoneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "IsWeightAboveThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weights, ownBoneIndex, minThreshold, maxThreshold});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::IsWeightAboveThreshold
// Il2CppName: IsWeightAboveThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, float, int, float, float)>(&Technie::PhysicsCreator::Utils::IsWeightAboveThreshold)> {
  static const MethodInfo* get() {
    static auto* boneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* boneWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ourIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "IsWeightAboveThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneIndex, boneWeight, ourIndex, minThreshold, maxThreshold});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::NumVerticesForBone
// Il2CppName: NumVerticesForBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Technie::PhysicsCreator::UnpackedMesh*, ::UnityEngine::Transform*, float, float)>(&Technie::PhysicsCreator::Utils::NumVerticesForBone)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "UnpackedMesh")->byval_arg;
    static auto* bone = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* minThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "NumVerticesForBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, bone, minThreshold, maxThreshold});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::Utils::UpdateCachedVertices
// Il2CppName: UpdateCachedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Technie::PhysicsCreator::IHull*, ::UnityEngine::Mesh*)>(&Technie::PhysicsCreator::Utils::UpdateCachedVertices)> {
  static const MethodInfo* get() {
    static auto* hull = &::il2cpp_utils::GetClassFromName("Technie.PhysicsCreator", "IHull")->byval_arg;
    static auto* srcMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::Utils*), "UpdateCachedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hull, srcMesh});
  }
};
