// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: RotatedCapsule
  struct RotatedCapsule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::RotatedCapsule, "Technie.PhysicsCreator", "RotatedCapsule");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Technie.PhysicsCreator.RotatedCapsule
  // [TokenAttribute] Offset: FFFFFFFF
  struct RotatedCapsule/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 dir
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 dir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x18
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x1C
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: RotatedCapsule
    constexpr RotatedCapsule(::UnityEngine::Vector3 center_ = {}, ::UnityEngine::Vector3 dir_ = {}, float radius_ = {}, float height_ = {}) noexcept : center{center_}, dir{dir_}, radius{radius_}, height{height_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector3 dir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_dir();
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // public System.Single CalcVolume()
    // Offset: 0x5026C64
    float CalcVolume();
    // public System.Void DrawWireframe()
    // Offset: 0x5026CA0
    void DrawWireframe();
  }; // Technie.PhysicsCreator.RotatedCapsule
  #pragma pack(pop)
  static check_size<sizeof(RotatedCapsule), 28 + sizeof(float)> __Technie_PhysicsCreator_RotatedCapsuleSizeCheck;
  static_assert(sizeof(RotatedCapsule) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedCapsule::CalcVolume
// Il2CppName: CalcVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Technie::PhysicsCreator::RotatedCapsule::*)()>(&Technie::PhysicsCreator::RotatedCapsule::CalcVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedCapsule), "CalcVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Technie::PhysicsCreator::RotatedCapsule::DrawWireframe
// Il2CppName: DrawWireframe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Technie::PhysicsCreator::RotatedCapsule::*)()>(&Technie::PhysicsCreator::RotatedCapsule::DrawWireframe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Technie::PhysicsCreator::RotatedCapsule), "DrawWireframe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
