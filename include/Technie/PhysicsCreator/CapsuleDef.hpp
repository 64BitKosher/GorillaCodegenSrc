// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Technie.PhysicsCreator.CapsuleAxis
#include "Technie/PhysicsCreator/CapsuleAxis.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Forward declaring type: CapsuleDef
  struct CapsuleDef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Technie::PhysicsCreator::CapsuleDef, "Technie.PhysicsCreator", "CapsuleDef");
// Type namespace: Technie.PhysicsCreator
namespace Technie::PhysicsCreator {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Technie.PhysicsCreator.CapsuleDef
  // [TokenAttribute] Offset: FFFFFFFF
  struct CapsuleDef/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 capsuleCenter
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 capsuleCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Technie.PhysicsCreator.CapsuleAxis capsuleDirection
    // Size: 0x4
    // Offset: 0xC
    ::Technie::PhysicsCreator::CapsuleAxis capsuleDirection;
    // Field size check
    static_assert(sizeof(::Technie::PhysicsCreator::CapsuleAxis) == 0x4);
    // public System.Single capsuleRadius
    // Size: 0x4
    // Offset: 0x10
    float capsuleRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single capsuleHeight
    // Size: 0x4
    // Offset: 0x14
    float capsuleHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 capsulePosition
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 capsulePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion capsuleRotation
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Quaternion capsuleRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: CapsuleDef
    constexpr CapsuleDef(::UnityEngine::Vector3 capsuleCenter_ = {}, ::Technie::PhysicsCreator::CapsuleAxis capsuleDirection_ = {}, float capsuleRadius_ = {}, float capsuleHeight_ = {}, ::UnityEngine::Vector3 capsulePosition_ = {}, ::UnityEngine::Quaternion capsuleRotation_ = {}) noexcept : capsuleCenter{capsuleCenter_}, capsuleDirection{capsuleDirection_}, capsuleRadius{capsuleRadius_}, capsuleHeight{capsuleHeight_}, capsulePosition{capsulePosition_}, capsuleRotation{capsuleRotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 capsuleCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_capsuleCenter();
    // Get instance field reference: public Technie.PhysicsCreator.CapsuleAxis capsuleDirection
    [[deprecated("Use field access instead!")]] ::Technie::PhysicsCreator::CapsuleAxis& dyn_capsuleDirection();
    // Get instance field reference: public System.Single capsuleRadius
    [[deprecated("Use field access instead!")]] float& dyn_capsuleRadius();
    // Get instance field reference: public System.Single capsuleHeight
    [[deprecated("Use field access instead!")]] float& dyn_capsuleHeight();
    // Get instance field reference: public UnityEngine.Vector3 capsulePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_capsulePosition();
    // Get instance field reference: public UnityEngine.Quaternion capsuleRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_capsuleRotation();
  }; // Technie.PhysicsCreator.CapsuleDef
  #pragma pack(pop)
  static check_size<sizeof(CapsuleDef), 36 + sizeof(::UnityEngine::Quaternion)> __Technie_PhysicsCreator_CapsuleDefSizeCheck;
  static_assert(sizeof(CapsuleDef) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
