// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaNetworking.PlayFabTitleDataCache
#include "GorillaNetworking/PlayFabTitleDataCache.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::PlayFabTitleDataCache::DataRequest);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PlayFabTitleDataCache::DataRequest*, "GorillaNetworking", "PlayFabTitleDataCache/DataRequest");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.PlayFabTitleDataCache/DataRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabTitleDataCache::DataRequest : public ::Il2CppObject {
    public:
    public:
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Action`1<System.String> <Callback>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::StringW>* Callback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action`1<PlayFab.PlayFabError> <ErrorCallback>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::PlayFab::PlayFabError*>* ErrorCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::PlayFab::PlayFabError*>*) == 0x8);
    public:
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Action`1<System.String> <Callback>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_$Callback$k__BackingField();
    // Get instance field reference: private System.Action`1<PlayFab.PlayFabError> <ErrorCallback>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::PlayFab::PlayFabError*>*& dyn_$ErrorCallback$k__BackingField();
    // public System.String get_Name()
    // Offset: 0x2860448
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x2860450
    void set_Name(::StringW value);
    // public System.Action`1<System.String> get_Callback()
    // Offset: 0x2860458
    ::System::Action_1<::StringW>* get_Callback();
    // public System.Void set_Callback(System.Action`1<System.String> value)
    // Offset: 0x2860460
    void set_Callback(::System::Action_1<::StringW>* value);
    // public System.Action`1<PlayFab.PlayFabError> get_ErrorCallback()
    // Offset: 0x2860468
    ::System::Action_1<::PlayFab::PlayFabError*>* get_ErrorCallback();
    // public System.Void set_ErrorCallback(System.Action`1<PlayFab.PlayFabError> value)
    // Offset: 0x2860470
    void set_ErrorCallback(::System::Action_1<::PlayFab::PlayFabError*>* value);
    // public System.Void .ctor()
    // Offset: 0x285F9D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabTitleDataCache::DataRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::PlayFabTitleDataCache::DataRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabTitleDataCache::DataRequest*, creationType>()));
    }
  }; // GorillaNetworking.PlayFabTitleDataCache/DataRequest
  #pragma pack(pop)
  static check_size<sizeof(PlayFabTitleDataCache::DataRequest), 32 + sizeof(::System::Action_1<::PlayFab::PlayFabError*>*)> __GorillaNetworking_PlayFabTitleDataCache_DataRequestSizeCheck;
  static_assert(sizeof(PlayFabTitleDataCache::DataRequest) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)()>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)(::StringW)>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_Callback
// Il2CppName: get_Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::StringW>* (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)()>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_Callback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "get_Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_Callback
// Il2CppName: set_Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)(::System::Action_1<::StringW>*)>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_Callback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "set_Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_ErrorCallback
// Il2CppName: get_ErrorCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::PlayFab::PlayFabError*>* (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)()>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::get_ErrorCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "get_ErrorCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_ErrorCallback
// Il2CppName: set_ErrorCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::DataRequest::*)(::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::PlayFabTitleDataCache::DataRequest::set_ErrorCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache::DataRequest*), "set_ErrorCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::DataRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
