// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: FeatureFlagData
  class FeatureFlagData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::FeatureFlagData);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::FeatureFlagData*, "GorillaNetworking", "FeatureFlagData");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.FeatureFlagData
  // [TokenAttribute] Offset: FFFFFFFF
  class FeatureFlagData : public ::Il2CppObject {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 value
    // Size: 0x4
    // Offset: 0x18
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: value and: valueType
    char __padding1[0x4] = {};
    // public System.String valueType
    // Size: 0x8
    // Offset: 0x20
    ::StringW valueType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Int32 value
    [[deprecated("Use field access instead!")]] int& dyn_value();
    // Get instance field reference: public System.String valueType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_valueType();
    // public System.Void .ctor()
    // Offset: 0x2857434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FeatureFlagData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::FeatureFlagData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FeatureFlagData*, creationType>()));
    }
  }; // GorillaNetworking.FeatureFlagData
  #pragma pack(pop)
  static check_size<sizeof(FeatureFlagData), 32 + sizeof(::StringW)> __GorillaNetworking_FeatureFlagDataSizeCheck;
  static_assert(sizeof(FeatureFlagData) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::FeatureFlagData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
