// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticItemInstance
  class CosmeticItemInstance;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticItemRegistry
  class CosmeticItemRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::CosmeticItemRegistry);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::CosmeticItemRegistry*, "GorillaNetworking", "CosmeticItemRegistry");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.CosmeticItemRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticItemRegistry : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x10
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: nameToCosmeticMap
    char __padding0[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,GorillaNetworking.CosmeticItemInstance> nameToCosmeticMap
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GorillaNetworking::CosmeticItemInstance*>* nameToCosmeticMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GorillaNetworking::CosmeticItemInstance*>*) == 0x8);
    // private UnityEngine.GameObject nullItem
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* nullItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,GorillaNetworking.CosmeticItemInstance> nameToCosmeticMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GorillaNetworking::CosmeticItemInstance*>*& dyn_nameToCosmeticMap();
    // Get instance field reference: private UnityEngine.GameObject nullItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_nullItem();
    // public System.Void Initialize(UnityEngine.GameObject[] cosmetics)
    // Offset: 0x2832024
    void Initialize(::ArrayW<::UnityEngine::GameObject*> cosmetics);
    // public GorillaNetworking.CosmeticItemInstance Cosmetic(System.String itemName)
    // Offset: 0x283239C
    ::GorillaNetworking::CosmeticItemInstance* Cosmetic(::StringW itemName);
    // public System.Void .ctor()
    // Offset: 0x2832484
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticItemRegistry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::CosmeticItemRegistry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticItemRegistry*, creationType>()));
    }
  }; // GorillaNetworking.CosmeticItemRegistry
  #pragma pack(pop)
  static check_size<sizeof(CosmeticItemRegistry), 32 + sizeof(::UnityEngine::GameObject*)> __GorillaNetworking_CosmeticItemRegistrySizeCheck;
  static_assert(sizeof(CosmeticItemRegistry) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemRegistry::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::CosmeticItemRegistry::*)(::ArrayW<::UnityEngine::GameObject*>)>(&GorillaNetworking::CosmeticItemRegistry::Initialize)> {
  static const MethodInfo* get() {
    static auto* cosmetics = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::CosmeticItemRegistry*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cosmetics});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemRegistry::Cosmetic
// Il2CppName: Cosmetic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::CosmeticItemInstance* (GorillaNetworking::CosmeticItemRegistry::*)(::StringW)>(&GorillaNetworking::CosmeticItemRegistry::Cosmetic)> {
  static const MethodInfo* get() {
    static auto* itemName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::CosmeticItemRegistry*), "Cosmetic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemName});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemRegistry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
