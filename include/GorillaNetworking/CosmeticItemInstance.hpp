// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaNetworking.CosmeticsController
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticItemInstance
  class CosmeticItemInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::CosmeticItemInstance);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::CosmeticItemInstance*, "GorillaNetworking", "CosmeticItemInstance");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.CosmeticItemInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticItemInstance : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> leftObjects
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* leftObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> rightObjects
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* rightObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> objects
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> leftObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_leftObjects();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> rightObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_rightObjects();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> objects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_objects();
    // private System.Void EnableItem(UnityEngine.GameObject obj, System.Boolean enable)
    // Offset: 0x283250C
    void EnableItem(::UnityEngine::GameObject* obj, bool enable);
    // public System.Void DisableItem(GorillaNetworking.CosmeticsController/CosmeticSlots cosmeticSlot)
    // Offset: 0x2832614
    void DisableItem(::GorillaNetworking::CosmeticsController::CosmeticSlots cosmeticSlot);
    // public System.Void EnableItem(GorillaNetworking.CosmeticsController/CosmeticSlots cosmeticSlot)
    // Offset: 0x283293C
    void EnableItem(::GorillaNetworking::CosmeticsController::CosmeticSlots cosmeticSlot);
    // public System.Void .ctor()
    // Offset: 0x28322CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticItemInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::CosmeticItemInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticItemInstance*, creationType>()));
    }
  }; // GorillaNetworking.CosmeticItemInstance
  #pragma pack(pop)
  static check_size<sizeof(CosmeticItemInstance), 32 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)> __GorillaNetworking_CosmeticItemInstanceSizeCheck;
  static_assert(sizeof(CosmeticItemInstance) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemInstance::EnableItem
// Il2CppName: EnableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::CosmeticItemInstance::*)(::UnityEngine::GameObject*, bool)>(&GorillaNetworking::CosmeticItemInstance::EnableItem)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::CosmeticItemInstance*), "EnableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, enable});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemInstance::DisableItem
// Il2CppName: DisableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::CosmeticItemInstance::*)(::GorillaNetworking::CosmeticsController::CosmeticSlots)>(&GorillaNetworking::CosmeticItemInstance::DisableItem)> {
  static const MethodInfo* get() {
    static auto* cosmeticSlot = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSlots")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::CosmeticItemInstance*), "DisableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cosmeticSlot});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemInstance::EnableItem
// Il2CppName: EnableItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::CosmeticItemInstance::*)(::GorillaNetworking::CosmeticsController::CosmeticSlots)>(&GorillaNetworking::CosmeticItemInstance::EnableItem)> {
  static const MethodInfo* get() {
    static auto* cosmeticSlot = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticSlots")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::CosmeticItemInstance*), "EnableItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cosmeticSlot});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::CosmeticItemInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
