// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaNetworking.GorillaKeyboardBindings
#include "GorillaNetworking/GorillaKeyboardBindings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ButtonColorSettings
  class ButtonColorSettings;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaKeyboardButton
  class GorillaKeyboardButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaKeyboardButton);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaKeyboardButton*, "GorillaNetworking", "GorillaKeyboardButton");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaKeyboardButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaKeyboardButton : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaNetworking::GorillaKeyboardButton::$$PressButtonColourUpdate$g__ButtonColorUpdate_Local|13_0$d
    class $$PressButtonColourUpdate$g__ButtonColorUpdate_Local|13_0$d;
    public:
    // public System.String characterString
    // Size: 0x8
    // Offset: 0x20
    ::StringW characterString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.GorillaKeyboardBindings Binding
    // Size: 0x4
    // Offset: 0x28
    ::GorillaNetworking::GorillaKeyboardBindings Binding;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaKeyboardBindings) == 0x4);
    // public System.Single pressTime
    // Size: 0x4
    // Offset: 0x2C
    float pressTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean functionKey
    // Size: 0x1
    // Offset: 0x30
    bool functionKey;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testClick
    // Size: 0x1
    // Offset: 0x31
    bool testClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean repeatTestClick
    // Size: 0x1
    // Offset: 0x32
    bool repeatTestClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: repeatTestClick and: repeatCooldown
    char __padding5[0x1] = {};
    // public System.Single repeatCooldown
    // Size: 0x4
    // Offset: 0x34
    float repeatCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Renderer ButtonRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Renderer* ButtonRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public GorillaTag.ButtonColorSettings ButtonColorSettings
    // Size: 0x8
    // Offset: 0x40
    ::GorillaTag::ButtonColorSettings* ButtonColorSettings;
    // Field size check
    static_assert(sizeof(::GorillaTag::ButtonColorSettings*) == 0x8);
    // private System.Single lastTestClick
    // Size: 0x4
    // Offset: 0x48
    float lastTestClick;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastTestClick and: propBlock
    char __padding9[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock propBlock
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::MaterialPropertyBlock* propBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get instance field reference: public System.String characterString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterString();
    // Get instance field reference: public GorillaNetworking.GorillaKeyboardBindings Binding
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaKeyboardBindings& dyn_Binding();
    // Get instance field reference: public System.Single pressTime
    [[deprecated("Use field access instead!")]] float& dyn_pressTime();
    // Get instance field reference: public System.Boolean functionKey
    [[deprecated("Use field access instead!")]] bool& dyn_functionKey();
    // Get instance field reference: public System.Boolean testClick
    [[deprecated("Use field access instead!")]] bool& dyn_testClick();
    // Get instance field reference: public System.Boolean repeatTestClick
    [[deprecated("Use field access instead!")]] bool& dyn_repeatTestClick();
    // Get instance field reference: public System.Single repeatCooldown
    [[deprecated("Use field access instead!")]] float& dyn_repeatCooldown();
    // Get instance field reference: public UnityEngine.Renderer ButtonRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_ButtonRenderer();
    // Get instance field reference: public GorillaTag.ButtonColorSettings ButtonColorSettings
    [[deprecated("Use field access instead!")]] ::GorillaTag::ButtonColorSettings*& dyn_ButtonColorSettings();
    // Get instance field reference: private System.Single lastTestClick
    [[deprecated("Use field access instead!")]] float& dyn_lastTestClick();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock propBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_propBlock();
    // private System.Void Start()
    // Offset: 0x28529C4
    void Start();
    // private System.Void OnTriggerEnter(UnityEngine.Collider collider)
    // Offset: 0x2852AA4
    void OnTriggerEnter(::UnityEngine::Collider* collider);
    // public System.Void PressButtonColourUpdate()
    // Offset: 0x2852EE8
    void PressButtonColourUpdate();
    // public System.Void .ctor()
    // Offset: 0x2853028
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaKeyboardButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaKeyboardButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaKeyboardButton*, creationType>()));
    }
    // private System.Collections.IEnumerator <PressButtonColourUpdate>g__ButtonColorUpdate_Local|13_0()
    // Offset: 0x2852FBC
    ::System::Collections::IEnumerator* $PressButtonColourUpdate$g__ButtonColorUpdate_Local_13_0();
  }; // GorillaNetworking.GorillaKeyboardButton
  #pragma pack(pop)
  static check_size<sizeof(GorillaKeyboardButton), 80 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GorillaNetworking_GorillaKeyboardButtonSizeCheck;
  static_assert(sizeof(GorillaKeyboardButton) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)()>(&GorillaNetworking::GorillaKeyboardButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)(::UnityEngine::Collider*)>(&GorillaNetworking::GorillaKeyboardButton::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::PressButtonColourUpdate
// Il2CppName: PressButtonColourUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaKeyboardButton::*)()>(&GorillaNetworking::GorillaKeyboardButton::PressButtonColourUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "PressButtonColourUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::GorillaKeyboardButton::$PressButtonColourUpdate$g__ButtonColorUpdate_Local_13_0
// Il2CppName: <PressButtonColourUpdate>g__ButtonColorUpdate_Local|13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::GorillaKeyboardButton::*)()>(&GorillaNetworking::GorillaKeyboardButton::$PressButtonColourUpdate$g__ButtonColorUpdate_Local_13_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaKeyboardButton*), "<PressButtonColourUpdate>g__ButtonColorUpdate_Local|13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
