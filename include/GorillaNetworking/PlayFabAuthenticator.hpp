// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Platform.AccountAgeCategory
#include "Oculus/Platform/AccountAgeCategory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaComputer
  class GorillaComputer;
  // Skipping declaration: SafetyType because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message
  class Message;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: LoginResult
  class LoginResult;
  // Forward declaring type: GetPlayerProfileResult
  class GetPlayerProfileResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PlayFabAuthenticator
  class PlayFabAuthenticator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::PlayFabAuthenticator);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PlayFabAuthenticator*, "GorillaNetworking", "PlayFabAuthenticator");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0xD1
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.PlayFabAuthenticator
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabAuthenticator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::SafetyType
    struct SafetyType;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::CachePlayFabIdRequest
    class CachePlayFabIdRequest;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthRequestData
    class PlayfabAuthRequestData;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthResponseData
    class PlayfabAuthResponseData;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::BanInfo
    class BanInfo;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$$c
    class $$c;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$$c__DisplayClass65_0
    class $$c__DisplayClass65_0;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$CachePlayFabId$d__73
    class $CachePlayFabId$d__73;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$ComputerOnConnectedToMaster$d__60
    class $ComputerOnConnectedToMaster$d__60;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame$d__54
    class $DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame$d__54;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$DoubleCheckEntitlement$d__45
    class $DoubleCheckEntitlement$d__45;
    // Nested type: ::GorillaNetworking::PlayFabAuthenticator::$PlayfabAuthenticate$d__71
    class $PlayfabAuthenticate$d__71;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaNetworking.PlayFabAuthenticator/SafetyType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SafetyType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SafetyType
      constexpr SafetyType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaNetworking.PlayFabAuthenticator/SafetyType None
      static constexpr const int None = 0;
      // Get static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType None
      static ::GorillaNetworking::PlayFabAuthenticator::SafetyType _get_None();
      // Set static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType None
      static void _set_None(::GorillaNetworking::PlayFabAuthenticator::SafetyType value);
      // static field const value: static public GorillaNetworking.PlayFabAuthenticator/SafetyType Auto
      static constexpr const int Auto = 1;
      // Get static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType Auto
      static ::GorillaNetworking::PlayFabAuthenticator::SafetyType _get_Auto();
      // Set static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType Auto
      static void _set_Auto(::GorillaNetworking::PlayFabAuthenticator::SafetyType value);
      // static field const value: static public GorillaNetworking.PlayFabAuthenticator/SafetyType OptIn
      static constexpr const int OptIn = 2;
      // Get static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType OptIn
      static ::GorillaNetworking::PlayFabAuthenticator::SafetyType _get_OptIn();
      // Set static field: static public GorillaNetworking.PlayFabAuthenticator/SafetyType OptIn
      static void _set_OptIn(::GorillaNetworking::PlayFabAuthenticator::SafetyType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaNetworking.PlayFabAuthenticator/SafetyType
    #pragma pack(pop)
    static check_size<sizeof(PlayFabAuthenticator::SafetyType), 0 + sizeof(int)> __GorillaNetworking_PlayFabAuthenticator_SafetyTypeSizeCheck;
    static_assert(sizeof(PlayFabAuthenticator::SafetyType) == 0x4);
    public:
    // public System.String _playFabPlayerIdCache
    // Size: 0x8
    // Offset: 0x20
    ::StringW playFabPlayerIdCache;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _sessionTicket
    // Size: 0x8
    // Offset: 0x28
    ::StringW sessionTicket;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _playFabId
    // Size: 0x8
    // Offset: 0x30
    ::StringW playFabId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _displayName
    // Size: 0x8
    // Offset: 0x38
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _nonce
    // Size: 0x8
    // Offset: 0x40
    ::StringW nonce;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _orgScopedId
    // Size: 0x8
    // Offset: 0x48
    ::StringW orgScopedId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String userID
    // Size: 0x8
    // Offset: 0x50
    ::StringW userID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UInt64 userIDLong
    // Size: 0x8
    // Offset: 0x58
    uint64_t userIDLong;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.String userToken
    // Size: 0x8
    // Offset: 0x60
    ::StringW userToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String platform
    // Size: 0x8
    // Offset: 0x68
    ::StringW platform;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isSafeAccount
    // Size: 0x1
    // Offset: 0x70
    bool isSafeAccount;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean doubleCheckEntitlement
    // Size: 0x1
    // Offset: 0x71
    bool doubleCheckEntitlement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doubleCheckEntitlement and: OnSafetyUpdate
    char __padding11[0x6] = {};
    // public System.Action`1<System.Boolean> OnSafetyUpdate
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_1<bool>* OnSafetyUpdate;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private GorillaNetworking.PlayFabAuthenticator/SafetyType safetyType
    // Size: 0x4
    // Offset: 0x80
    ::GorillaNetworking::PlayFabAuthenticator::SafetyType safetyType;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PlayFabAuthenticator::SafetyType) == 0x4);
    // public Oculus.Platform.AccountAgeCategory category
    // Size: 0x4
    // Offset: 0x84
    ::Oculus::Platform::AccountAgeCategory category;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::AccountAgeCategory) == 0x4);
    // private System.Byte[] m_Ticket
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<uint8_t> m_Ticket;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.UInt32 m_pcbTicket
    // Size: 0x4
    // Offset: 0x90
    uint m_pcbTicket;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_pcbTicket and: debugText
    char __padding16[0x4] = {};
    // public UnityEngine.UI.Text debugText
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::UI::Text* debugText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.Boolean screenDebugMode
    // Size: 0x1
    // Offset: 0xA0
    bool screenDebugMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean loginFailed
    // Size: 0x1
    // Offset: 0xA1
    bool loginFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loginFailed and: oculusID
    char __padding19[0x6] = {};
    // public System.String oculusID
    // Size: 0x8
    // Offset: 0xA8
    ::StringW oculusID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject emptyObject
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* emptyObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 playFabAuthRetryCount
    // Size: 0x4
    // Offset: 0xB8
    int playFabAuthRetryCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playFabMaxRetries
    // Size: 0x4
    // Offset: 0xBC
    int playFabMaxRetries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playFabCacheRetryCount
    // Size: 0x4
    // Offset: 0xC0
    int playFabCacheRetryCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playFabCacheMaxRetries
    // Size: 0x4
    // Offset: 0xC4
    int playFabCacheMaxRetries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxLoginAttempts
    // Size: 0x4
    // Offset: 0xC8
    int maxLoginAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentLoginAttempts
    // Size: 0x4
    // Offset: 0xCC
    int currentLoginAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isModded
    // Size: 0x1
    // Offset: 0xD0
    bool isModded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public GorillaNetworking.PlayFabAuthenticator instance
    static ::GorillaNetworking::PlayFabAuthenticator* _get_instance();
    // Set static field: static public GorillaNetworking.PlayFabAuthenticator instance
    static void _set_instance(::GorillaNetworking::PlayFabAuthenticator* value);
    // static field const value: static public System.String Playfab_TitleId_Prod
    static constexpr const char* Playfab_TitleId_Prod = "63FDD";
    // Get static field: static public System.String Playfab_TitleId_Prod
    static ::StringW _get_Playfab_TitleId_Prod();
    // Set static field: static public System.String Playfab_TitleId_Prod
    static void _set_Playfab_TitleId_Prod(::StringW value);
    // static field const value: static public System.String Playfab_TitleId_Dev
    static constexpr const char* Playfab_TitleId_Dev = "195C0";
    // Get static field: static public System.String Playfab_TitleId_Dev
    static ::StringW _get_Playfab_TitleId_Dev();
    // Set static field: static public System.String Playfab_TitleId_Dev
    static void _set_Playfab_TitleId_Dev(::StringW value);
    // static field const value: static public System.String Photon_AppIdRealtime_Prod
    static constexpr const char* Photon_AppIdRealtime_Prod = "75dc33b5-d5fc-4b4c-bf88-eb70baabe183";
    // Get static field: static public System.String Photon_AppIdRealtime_Prod
    static ::StringW _get_Photon_AppIdRealtime_Prod();
    // Set static field: static public System.String Photon_AppIdRealtime_Prod
    static void _set_Photon_AppIdRealtime_Prod(::StringW value);
    // static field const value: static public System.String Photon_AppIdVoice_Prod
    static constexpr const char* Photon_AppIdVoice_Prod = "c5fddf06-024c-41f9-81ec-9411dc9c1b27";
    // Get static field: static public System.String Photon_AppIdVoice_Prod
    static ::StringW _get_Photon_AppIdVoice_Prod();
    // Set static field: static public System.String Photon_AppIdVoice_Prod
    static void _set_Photon_AppIdVoice_Prod(::StringW value);
    // static field const value: static public System.String Photon_AppIdRealtime_Dev
    static constexpr const char* Photon_AppIdRealtime_Dev = "6a3946c5-d4ea-4705-bdb7-0a0c7e831ca7";
    // Get static field: static public System.String Photon_AppIdRealtime_Dev
    static ::StringW _get_Photon_AppIdRealtime_Dev();
    // Set static field: static public System.String Photon_AppIdRealtime_Dev
    static void _set_Photon_AppIdRealtime_Dev(::StringW value);
    // static field const value: static public System.String Photon_AppIdVoice_Dev
    static constexpr const char* Photon_AppIdVoice_Dev = "456d1e18-05c7-4a54-abc9-330fa0bcd2aa";
    // Get static field: static public System.String Photon_AppIdVoice_Dev
    static ::StringW _get_Photon_AppIdVoice_Dev();
    // Set static field: static public System.String Photon_AppIdVoice_Dev
    static void _set_Photon_AppIdVoice_Dev(::StringW value);
    // static field const value: static public System.String Playfab_Auth_API
    static constexpr const char* Playfab_Auth_API = "https://auth-prod.gtag-cf.com";
    // Get static field: static public System.String Playfab_Auth_API
    static ::StringW _get_Playfab_Auth_API();
    // Set static field: static public System.String Playfab_Auth_API
    static void _set_Playfab_Auth_API(::StringW value);
    // Get instance field reference: public System.String _playFabPlayerIdCache
    [[deprecated("Use field access instead!")]] ::StringW& dyn__playFabPlayerIdCache();
    // Get instance field reference: private System.String _sessionTicket
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sessionTicket();
    // Get instance field reference: private System.String _playFabId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__playFabId();
    // Get instance field reference: private System.String _displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__displayName();
    // Get instance field reference: private System.String _nonce
    [[deprecated("Use field access instead!")]] ::StringW& dyn__nonce();
    // Get instance field reference: private System.String _orgScopedId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__orgScopedId();
    // Get instance field reference: public System.String userID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userID();
    // Get instance field reference: private System.UInt64 userIDLong
    [[deprecated("Use field access instead!")]] uint64_t& dyn_userIDLong();
    // Get instance field reference: private System.String userToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userToken();
    // Get instance field reference: private System.String platform
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platform();
    // Get instance field reference: private System.Boolean isSafeAccount
    [[deprecated("Use field access instead!")]] bool& dyn_isSafeAccount();
    // Get instance field reference: private System.Boolean doubleCheckEntitlement
    [[deprecated("Use field access instead!")]] bool& dyn_doubleCheckEntitlement();
    // Get instance field reference: public System.Action`1<System.Boolean> OnSafetyUpdate
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_OnSafetyUpdate();
    // Get instance field reference: private GorillaNetworking.PlayFabAuthenticator/SafetyType safetyType
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PlayFabAuthenticator::SafetyType& dyn_safetyType();
    // Get instance field reference: public Oculus.Platform.AccountAgeCategory category
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::AccountAgeCategory& dyn_category();
    // Get instance field reference: private System.Byte[] m_Ticket
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_m_Ticket();
    // Get instance field reference: private System.UInt32 m_pcbTicket
    [[deprecated("Use field access instead!")]] uint& dyn_m_pcbTicket();
    // Get instance field reference: public UnityEngine.UI.Text debugText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_debugText();
    // Get instance field reference: public System.Boolean screenDebugMode
    [[deprecated("Use field access instead!")]] bool& dyn_screenDebugMode();
    // Get instance field reference: public System.Boolean loginFailed
    [[deprecated("Use field access instead!")]] bool& dyn_loginFailed();
    // Get instance field reference: public System.String oculusID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_oculusID();
    // Get instance field reference: public UnityEngine.GameObject emptyObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_emptyObject();
    // Get instance field reference: private System.Int32 playFabAuthRetryCount
    [[deprecated("Use field access instead!")]] int& dyn_playFabAuthRetryCount();
    // Get instance field reference: private System.Int32 playFabMaxRetries
    [[deprecated("Use field access instead!")]] int& dyn_playFabMaxRetries();
    // Get instance field reference: private System.Int32 playFabCacheRetryCount
    [[deprecated("Use field access instead!")]] int& dyn_playFabCacheRetryCount();
    // Get instance field reference: private System.Int32 playFabCacheMaxRetries
    [[deprecated("Use field access instead!")]] int& dyn_playFabCacheMaxRetries();
    // Get instance field reference: public System.Int32 maxLoginAttempts
    [[deprecated("Use field access instead!")]] int& dyn_maxLoginAttempts();
    // Get instance field reference: public System.Int32 currentLoginAttempts
    [[deprecated("Use field access instead!")]] int& dyn_currentLoginAttempts();
    // Get instance field reference: public System.Boolean isModded
    [[deprecated("Use field access instead!")]] bool& dyn_isModded();
    // public GorillaNetworking.GorillaComputer get_gorillaComputer()
    // Offset: 0x285B5E8
    ::GorillaNetworking::GorillaComputer* get_gorillaComputer();
    // public System.Void Awake()
    // Offset: 0x285B638
    void Awake();
    // private System.Void Start()
    // Offset: 0x285B964
    void Start();
    // private System.Void OculusLoginFail()
    // Offset: 0x285B968
    void OculusLoginFail();
    // private System.Boolean RegularLogin()
    // Offset: 0x285BA1C
    bool RegularLogin();
    // private System.Void OculusAttemptFail()
    // Offset: 0x285BAC8
    void OculusAttemptFail();
    // private System.Collections.IEnumerator DoubleCheckEntitlement()
    // Offset: 0x285BC14
    ::System::Collections::IEnumerator* DoubleCheckEntitlement();
    // private System.Void EntitlementCallback(Oculus.Platform.Message msg)
    // Offset: 0x285BC88
    void EntitlementCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetOculusUserCallback(Oculus.Platform.Message msg)
    // Offset: 0x285BDB8
    void GetOculusUserCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetOculusUserAgeCallback(Oculus.Platform.Message msg)
    // Offset: 0x285BF30
    void GetOculusUserAgeCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetOculusOrgScopedIDCallback(Oculus.Platform.Message msg)
    // Offset: 0x285C380
    void GetOculusOrgScopedIDCallback(::Oculus::Platform::Message* msg);
    // private System.Void GetNonceForPlayfabCallback(Oculus.Platform.Message msg)
    // Offset: 0x285C49C
    void GetNonceForPlayfabCallback(::Oculus::Platform::Message* msg);
    // private System.Void OnPlayFabAuthResponse(GorillaNetworking.PlayFabAuthenticator/PlayfabAuthResponseData response)
    // Offset: 0x285C720
    void OnPlayFabAuthResponse(::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthResponseData* response);
    // private System.Void GetOculusNonceCallback(Oculus.Platform.Message msg)
    // Offset: 0x285CB9C
    void GetOculusNonceCallback(::Oculus::Platform::Message* msg);
    // public System.Void AuthenticateWithPlayFab()
    // Offset: 0x2850B18
    void AuthenticateWithPlayFab();
    // private System.Collections.IEnumerator DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame()
    // Offset: 0x285D218
    ::System::Collections::IEnumerator* DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame();
    // private System.Void OnLoginWithSteamResponse(PlayFab.ClientModels.LoginResult obj)
    // Offset: 0x285D28C
    void OnLoginWithSteamResponse(::PlayFab::ClientModels::LoginResult* obj);
    // private System.Void OnCachePlayFabIdRequest(System.Boolean success)
    // Offset: 0x285D460
    void OnCachePlayFabIdRequest(bool success);
    // private System.Void MaybeGetNonce(PlayFab.ClientModels.LoginResult obj)
    // Offset: 0x285D514
    void MaybeGetNonce(::PlayFab::ClientModels::LoginResult* obj);
    // private System.Void AdvanceLogin()
    // Offset: 0x285C8A4
    void AdvanceLogin();
    // private System.Void AuthenticateWithPhoton()
    // Offset: 0x285CC90
    void AuthenticateWithPhoton();
    // private System.Collections.IEnumerator ComputerOnConnectedToMaster()
    // Offset: 0x285D754
    ::System::Collections::IEnumerator* ComputerOnConnectedToMaster();
    // private System.Void OnPlayFabError(PlayFab.PlayFabError obj)
    // Offset: 0x285D7C8
    void OnPlayFabError(::PlayFab::PlayFabError* obj);
    // static private System.Void AddGenericId(System.String serviceName, System.String userId)
    // Offset: 0x285C960
    static void AddGenericId(::StringW serviceName, ::StringW userId);
    // public System.Void LogMessage(System.String message)
    // Offset: 0x285D568
    void LogMessage(::StringW message);
    // private System.Void GetPlayerDisplayName(System.String playFabId)
    // Offset: 0x285D56C
    void GetPlayerDisplayName(::StringW playFabId);
    // public System.Void SetDisplayName(System.String playerName)
    // Offset: 0x285A8B8
    void SetDisplayName(::StringW playerName);
    // public System.Void ScreenDebug(System.String debugString)
    // Offset: 0x285C2A8
    void ScreenDebug(::StringW debugString);
    // public System.Void ScreenDebugClear()
    // Offset: 0x285DE74
    void ScreenDebugClear();
    // public System.Collections.IEnumerator PlayfabAuthenticate(GorillaNetworking.PlayFabAuthenticator/PlayfabAuthRequestData data, System.Action`1<GorillaNetworking.PlayFabAuthenticator/PlayfabAuthResponseData> callback)
    // Offset: 0x285C67C
    ::System::Collections::IEnumerator* PlayfabAuthenticate(::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthRequestData* data, ::System::Action_1<::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthResponseData*>* callback);
    // private System.Void ShowBanMessage(GorillaNetworking.PlayFabAuthenticator/BanInfo banInfo)
    // Offset: 0x285DED0
    void ShowBanMessage(::GorillaNetworking::PlayFabAuthenticator::BanInfo* banInfo);
    // public System.Collections.IEnumerator CachePlayFabId(GorillaNetworking.PlayFabAuthenticator/CachePlayFabIdRequest data, System.Action`1<System.Boolean> callback)
    // Offset: 0x285D3BC
    ::System::Collections::IEnumerator* CachePlayFabId(::GorillaNetworking::PlayFabAuthenticator::CachePlayFabIdRequest* data, ::System::Action_1<bool>* callback);
    // public System.Void SetSafety(System.Boolean isSafety, System.Boolean isAutoSet, System.Boolean setPlayfab)
    // Offset: 0x285C0C8
    void SetSafety(bool isSafety, bool isAutoSet, bool setPlayfab);
    // public System.Boolean GetSafety()
    // Offset: 0x285E114
    bool GetSafety();
    // public GorillaNetworking.PlayFabAuthenticator/SafetyType GetSafetyType()
    // Offset: 0x285E11C
    ::GorillaNetworking::PlayFabAuthenticator::SafetyType GetSafetyType();
    // public System.Void .ctor()
    // Offset: 0x285E124
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabAuthenticator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::PlayFabAuthenticator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabAuthenticator*, creationType>()));
    }
    // private System.Void <GetPlayerDisplayName>b__64_0(PlayFab.ClientModels.GetPlayerProfileResult result)
    // Offset: 0x285E18C
    void $GetPlayerDisplayName$b__64_0(::PlayFab::ClientModels::GetPlayerProfileResult* result);
  }; // GorillaNetworking.PlayFabAuthenticator
  #pragma pack(pop)
  static check_size<sizeof(PlayFabAuthenticator), 208 + sizeof(bool)> __GorillaNetworking_PlayFabAuthenticatorSizeCheck;
  static_assert(sizeof(PlayFabAuthenticator) == 0xD1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PlayFabAuthenticator::SafetyType, "GorillaNetworking", "PlayFabAuthenticator/SafetyType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::get_gorillaComputer
// Il2CppName: get_gorillaComputer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::GorillaComputer* (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::get_gorillaComputer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "get_gorillaComputer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OculusLoginFail
// Il2CppName: OculusLoginFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::OculusLoginFail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OculusLoginFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::RegularLogin
// Il2CppName: RegularLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::RegularLogin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "RegularLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OculusAttemptFail
// Il2CppName: OculusAttemptFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::OculusAttemptFail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OculusAttemptFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::DoubleCheckEntitlement
// Il2CppName: DoubleCheckEntitlement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::DoubleCheckEntitlement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "DoubleCheckEntitlement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::EntitlementCallback
// Il2CppName: EntitlementCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::EntitlementCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "EntitlementCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetOculusUserCallback
// Il2CppName: GetOculusUserCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::GetOculusUserCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetOculusUserCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetOculusUserAgeCallback
// Il2CppName: GetOculusUserAgeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::GetOculusUserAgeCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetOculusUserAgeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetOculusOrgScopedIDCallback
// Il2CppName: GetOculusOrgScopedIDCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::GetOculusOrgScopedIDCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetOculusOrgScopedIDCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetNonceForPlayfabCallback
// Il2CppName: GetNonceForPlayfabCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::GetNonceForPlayfabCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetNonceForPlayfabCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OnPlayFabAuthResponse
// Il2CppName: OnPlayFabAuthResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthResponseData*)>(&GorillaNetworking::PlayFabAuthenticator::OnPlayFabAuthResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabAuthenticator/PlayfabAuthResponseData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OnPlayFabAuthResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetOculusNonceCallback
// Il2CppName: GetOculusNonceCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::Oculus::Platform::Message*)>(&GorillaNetworking::PlayFabAuthenticator::GetOculusNonceCallback)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetOculusNonceCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::AuthenticateWithPlayFab
// Il2CppName: AuthenticateWithPlayFab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::AuthenticateWithPlayFab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "AuthenticateWithPlayFab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame
// Il2CppName: DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "DisplayGeneralFailureMessageOnGorillaComputerAfter1Frame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OnLoginWithSteamResponse
// Il2CppName: OnLoginWithSteamResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::PlayFab::ClientModels::LoginResult*)>(&GorillaNetworking::PlayFabAuthenticator::OnLoginWithSteamResponse)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "LoginResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OnLoginWithSteamResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OnCachePlayFabIdRequest
// Il2CppName: OnCachePlayFabIdRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(bool)>(&GorillaNetworking::PlayFabAuthenticator::OnCachePlayFabIdRequest)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OnCachePlayFabIdRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::MaybeGetNonce
// Il2CppName: MaybeGetNonce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::PlayFab::ClientModels::LoginResult*)>(&GorillaNetworking::PlayFabAuthenticator::MaybeGetNonce)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "LoginResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "MaybeGetNonce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::AdvanceLogin
// Il2CppName: AdvanceLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::AdvanceLogin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "AdvanceLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::AuthenticateWithPhoton
// Il2CppName: AuthenticateWithPhoton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::AuthenticateWithPhoton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "AuthenticateWithPhoton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::ComputerOnConnectedToMaster
// Il2CppName: ComputerOnConnectedToMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::ComputerOnConnectedToMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "ComputerOnConnectedToMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::OnPlayFabError
// Il2CppName: OnPlayFabError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::PlayFabAuthenticator::OnPlayFabError)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "OnPlayFabError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::AddGenericId
// Il2CppName: AddGenericId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&GorillaNetworking::PlayFabAuthenticator::AddGenericId)> {
  static const MethodInfo* get() {
    static auto* serviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "AddGenericId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serviceName, userId});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::LogMessage
// Il2CppName: LogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::StringW)>(&GorillaNetworking::PlayFabAuthenticator::LogMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "LogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetPlayerDisplayName
// Il2CppName: GetPlayerDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::StringW)>(&GorillaNetworking::PlayFabAuthenticator::GetPlayerDisplayName)> {
  static const MethodInfo* get() {
    static auto* playFabId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetPlayerDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playFabId});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::SetDisplayName
// Il2CppName: SetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::StringW)>(&GorillaNetworking::PlayFabAuthenticator::SetDisplayName)> {
  static const MethodInfo* get() {
    static auto* playerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "SetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerName});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::ScreenDebug
// Il2CppName: ScreenDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::StringW)>(&GorillaNetworking::PlayFabAuthenticator::ScreenDebug)> {
  static const MethodInfo* get() {
    static auto* debugString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "ScreenDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugString});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::ScreenDebugClear
// Il2CppName: ScreenDebugClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::ScreenDebugClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "ScreenDebugClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::PlayfabAuthenticate
// Il2CppName: PlayfabAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabAuthenticator::*)(::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthRequestData*, ::System::Action_1<::GorillaNetworking::PlayFabAuthenticator::PlayfabAuthResponseData*>*)>(&GorillaNetworking::PlayFabAuthenticator::PlayfabAuthenticate)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabAuthenticator/PlayfabAuthRequestData")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabAuthenticator/PlayfabAuthResponseData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "PlayfabAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, callback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::ShowBanMessage
// Il2CppName: ShowBanMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::GorillaNetworking::PlayFabAuthenticator::BanInfo*)>(&GorillaNetworking::PlayFabAuthenticator::ShowBanMessage)> {
  static const MethodInfo* get() {
    static auto* banInfo = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabAuthenticator/BanInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "ShowBanMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{banInfo});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::CachePlayFabId
// Il2CppName: CachePlayFabId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabAuthenticator::*)(::GorillaNetworking::PlayFabAuthenticator::CachePlayFabIdRequest*, ::System::Action_1<bool>*)>(&GorillaNetworking::PlayFabAuthenticator::CachePlayFabId)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabAuthenticator/CachePlayFabIdRequest")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "CachePlayFabId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, callback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::SetSafety
// Il2CppName: SetSafety
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(bool, bool, bool)>(&GorillaNetworking::PlayFabAuthenticator::SetSafety)> {
  static const MethodInfo* get() {
    static auto* isSafety = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isAutoSet = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* setPlayfab = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "SetSafety", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSafety, isAutoSet, setPlayfab});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetSafety
// Il2CppName: GetSafety
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::GetSafety)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetSafety", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::GetSafetyType
// Il2CppName: GetSafetyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::PlayFabAuthenticator::SafetyType (GorillaNetworking::PlayFabAuthenticator::*)()>(&GorillaNetworking::PlayFabAuthenticator::GetSafetyType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "GetSafetyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::PlayFabAuthenticator::$GetPlayerDisplayName$b__64_0
// Il2CppName: <GetPlayerDisplayName>b__64_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabAuthenticator::*)(::PlayFab::ClientModels::GetPlayerProfileResult*)>(&GorillaNetworking::PlayFabAuthenticator::$GetPlayerDisplayName$b__64_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetPlayerProfileResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabAuthenticator*), "<GetPlayerDisplayName>b__64_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
