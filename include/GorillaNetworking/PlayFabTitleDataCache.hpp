// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PlayFabTitleDataCache
  class PlayFabTitleDataCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::PlayFabTitleDataCache);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PlayFabTitleDataCache*, "GorillaNetworking", "PlayFabTitleDataCache");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.PlayFabTitleDataCache
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabTitleDataCache : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaNetworking::PlayFabTitleDataCache::DataUpdate
    class DataUpdate;
    // Nested type: ::GorillaNetworking::PlayFabTitleDataCache::DataRequest
    class DataRequest;
    // Nested type: ::GorillaNetworking::PlayFabTitleDataCache::$UpdateDataCo$d__22
    class $UpdateDataCo$d__22;
    public:
    // public GorillaNetworking.PlayFabTitleDataCache/DataUpdate OnTitleDataUpdate
    // Size: 0x8
    // Offset: 0x20
    ::GorillaNetworking::PlayFabTitleDataCache::DataUpdate* OnTitleDataUpdate;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PlayFabTitleDataCache::DataUpdate*) == 0x8);
    // private readonly System.Collections.Generic.List`1<GorillaNetworking.PlayFabTitleDataCache/DataRequest> requests
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GorillaNetworking::PlayFabTitleDataCache::DataRequest*>* requests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaNetworking::PlayFabTitleDataCache::DataRequest*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> titleData
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* titleData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private System.String titleDataKey
    // Size: 0x8
    // Offset: 0x38
    ::StringW titleDataKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isDataUpToDate
    // Size: 0x1
    // Offset: 0x40
    bool isDataUpToDate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDataUpToDate and: updateDataCoroutine
    char __padding4[0x7] = {};
    // private UnityEngine.Coroutine updateDataCoroutine
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Coroutine* updateDataCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get static field: static private GorillaNetworking.PlayFabTitleDataCache <Instance>k__BackingField
    static ::GorillaNetworking::PlayFabTitleDataCache* _get_$Instance$k__BackingField();
    // Set static field: static private GorillaNetworking.PlayFabTitleDataCache <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::GorillaNetworking::PlayFabTitleDataCache* value);
    // static field const value: static private System.String FileName
    static constexpr const char* FileName = "TitleDataCache.json";
    // Get static field: static private System.String FileName
    static ::StringW _get_FileName();
    // Set static field: static private System.String FileName
    static void _set_FileName(::StringW value);
    // static field const value: static private System.String titleDataUrl
    static constexpr const char* titleDataUrl = "https://title-data.gtag-cf.com";
    // Get static field: static private System.String titleDataUrl
    static ::StringW _get_titleDataUrl();
    // Set static field: static private System.String titleDataUrl
    static void _set_titleDataUrl(::StringW value);
    // Get instance field reference: public GorillaNetworking.PlayFabTitleDataCache/DataUpdate OnTitleDataUpdate
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PlayFabTitleDataCache::DataUpdate*& dyn_OnTitleDataUpdate();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaNetworking.PlayFabTitleDataCache/DataRequest> requests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaNetworking::PlayFabTitleDataCache::DataRequest*>*& dyn_requests();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> titleData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_titleData();
    // Get instance field reference: private System.String titleDataKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_titleDataKey();
    // Get instance field reference: private System.Boolean isDataUpToDate
    [[deprecated("Use field access instead!")]] bool& dyn_isDataUpToDate();
    // Get instance field reference: private UnityEngine.Coroutine updateDataCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_updateDataCoroutine();
    // static public GorillaNetworking.PlayFabTitleDataCache get_Instance()
    // Offset: 0x285F6C8
    static ::GorillaNetworking::PlayFabTitleDataCache* get_Instance();
    // static private System.Void set_Instance(GorillaNetworking.PlayFabTitleDataCache value)
    // Offset: 0x285F710
    static void set_Instance(::GorillaNetworking::PlayFabTitleDataCache* value);
    // static private System.String get_FilePath()
    // Offset: 0x285F768
    static ::StringW get_FilePath();
    // public System.Void GetTitleData(System.String name, System.Action`1<System.String> callback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x285F808
    void GetTitleData(::StringW name, ::System::Action_1<::StringW>* callback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // private System.Void Awake()
    // Offset: 0x285FA08
    void Awake();
    // private System.Void Start()
    // Offset: 0x285FB08
    void Start();
    // public System.Void LoadDataFromFile()
    // Offset: 0x285FB0C
    void LoadDataFromFile();
    // private System.Void SaveDataToFile(System.String filepath)
    // Offset: 0x285FCF8
    void SaveDataToFile(::StringW filepath);
    // public System.Void UpdateData()
    // Offset: 0x285F9D8
    void UpdateData();
    // private System.Collections.IEnumerator UpdateDataCo()
    // Offset: 0x285FE38
    ::System::Collections::IEnumerator* UpdateDataCo();
    // private System.Void LoadKey()
    // Offset: 0x285FECC
    void LoadKey();
    // static private System.String MD5(System.String value)
    // Offset: 0x285FF50
    static ::StringW MD5(::StringW value);
    // private System.Void ClearRequestWithError(PlayFab.PlayFabError e)
    // Offset: 0x28600AC
    void ClearRequestWithError(::PlayFab::PlayFabError* e);
    // public System.Void .ctor()
    // Offset: 0x2860284
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabTitleDataCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::PlayFabTitleDataCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabTitleDataCache*, creationType>()));
    }
    // private System.Boolean <UpdateDataCo>b__22_0(GorillaNetworking.PlayFabTitleDataCache/DataRequest request)
    // Offset: 0x2860360
    bool $UpdateDataCo$b__22_0(::GorillaNetworking::PlayFabTitleDataCache::DataRequest* request);
  }; // GorillaNetworking.PlayFabTitleDataCache
  #pragma pack(pop)
  static check_size<sizeof(PlayFabTitleDataCache), 72 + sizeof(::UnityEngine::Coroutine*)> __GorillaNetworking_PlayFabTitleDataCacheSizeCheck;
  static_assert(sizeof(PlayFabTitleDataCache) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::PlayFabTitleDataCache* (*)()>(&GorillaNetworking::PlayFabTitleDataCache::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaNetworking::PlayFabTitleDataCache*)>(&GorillaNetworking::PlayFabTitleDataCache::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabTitleDataCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::get_FilePath
// Il2CppName: get_FilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GorillaNetworking::PlayFabTitleDataCache::get_FilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "get_FilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::GetTitleData
// Il2CppName: GetTitleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)(::StringW, ::System::Action_1<::StringW>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::PlayFabTitleDataCache::GetTitleData)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "GetTitleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, callback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::LoadDataFromFile
// Il2CppName: LoadDataFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::LoadDataFromFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "LoadDataFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::SaveDataToFile
// Il2CppName: SaveDataToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)(::StringW)>(&GorillaNetworking::PlayFabTitleDataCache::SaveDataToFile)> {
  static const MethodInfo* get() {
    static auto* filepath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "SaveDataToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filepath});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::UpdateDataCo
// Il2CppName: UpdateDataCo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::UpdateDataCo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "UpdateDataCo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::LoadKey
// Il2CppName: LoadKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)()>(&GorillaNetworking::PlayFabTitleDataCache::LoadKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "LoadKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::MD5
// Il2CppName: MD5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GorillaNetworking::PlayFabTitleDataCache::MD5)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "MD5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::ClearRequestWithError
// Il2CppName: ClearRequestWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PlayFabTitleDataCache::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::PlayFabTitleDataCache::ClearRequestWithError)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "ClearRequestWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::PlayFabTitleDataCache::$UpdateDataCo$b__22_0
// Il2CppName: <UpdateDataCo>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::PlayFabTitleDataCache::*)(::GorillaNetworking::PlayFabTitleDataCache::DataRequest*)>(&GorillaNetworking::PlayFabTitleDataCache::$UpdateDataCo$b__22_0)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "PlayFabTitleDataCache/DataRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PlayFabTitleDataCache*), "<UpdateDataCo>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
