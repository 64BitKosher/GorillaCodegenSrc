// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: FriendshipBracelet
  class FriendshipBracelet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::FriendshipBracelet);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::FriendshipBracelet*, "GorillaNetworking", "FriendshipBracelet");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.FriendshipBracelet
  // [TokenAttribute] Offset: FFFFFFFF
  class FriendshipBracelet : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.SkinnedMeshRenderer[] braceletStrings
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> braceletStrings;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    // private UnityEngine.MeshRenderer[] braceletBeads
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::MeshRenderer*> braceletBeads;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // private UnityEngine.MeshRenderer[] braceletBananas
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::MeshRenderer*> braceletBananas;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // private System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x38
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: braceletFormedSound
    char __padding3[0x7] = {};
    // private UnityEngine.AudioClip braceletFormedSound
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* braceletFormedSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip braceletBrokenSound
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioClip* braceletBrokenSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.ParticleSystem braceletFormedParticle
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem* braceletFormedParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem braceletBrokenParticle
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::ParticleSystem* braceletBrokenParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private VRRig ownerRig
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer[] braceletStrings
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_braceletStrings();
    // Get instance field reference: private UnityEngine.MeshRenderer[] braceletBeads
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_braceletBeads();
    // Get instance field reference: private UnityEngine.MeshRenderer[] braceletBananas
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_braceletBananas();
    // Get instance field reference: private System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: private UnityEngine.AudioClip braceletFormedSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_braceletFormedSound();
    // Get instance field reference: private UnityEngine.AudioClip braceletBrokenSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_braceletBrokenSound();
    // Get instance field reference: private UnityEngine.ParticleSystem braceletFormedParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_braceletFormedParticle();
    // Get instance field reference: private UnityEngine.ParticleSystem braceletBrokenParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_braceletBrokenParticle();
    // Get instance field reference: private VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // protected System.Void Awake()
    // Offset: 0x284624C
    void Awake();
    // private UnityEngine.AudioSource GetAudioSource()
    // Offset: 0x28462A4
    ::UnityEngine::AudioSource* GetAudioSource();
    // private System.Void OnEnable()
    // Offset: 0x28462D4
    void OnEnable();
    // public System.Void PlayAppearEffects()
    // Offset: 0x28462D8
    void PlayAppearEffects();
    // private System.Void OnDisable()
    // Offset: 0x2846388
    void OnDisable();
    // public System.Void UpdateBeads(System.Collections.Generic.List`1<UnityEngine.Color> colors, System.Int32 selfIndex)
    // Offset: 0x2846458
    void UpdateBeads(::System::Collections::Generic::List_1<::UnityEngine::Color>* colors, int selfIndex);
    // public System.Void .ctor()
    // Offset: 0x2846698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FriendshipBracelet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::FriendshipBracelet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FriendshipBracelet*, creationType>()));
    }
  }; // GorillaNetworking.FriendshipBracelet
  #pragma pack(pop)
  static check_size<sizeof(FriendshipBracelet), 96 + sizeof(::GlobalNamespace::VRRig*)> __GorillaNetworking_FriendshipBraceletSizeCheck;
  static_assert(sizeof(FriendshipBracelet) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::FriendshipBracelet::*)()>(&GorillaNetworking::FriendshipBracelet::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::GetAudioSource
// Il2CppName: GetAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSource* (GorillaNetworking::FriendshipBracelet::*)()>(&GorillaNetworking::FriendshipBracelet::GetAudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "GetAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::FriendshipBracelet::*)()>(&GorillaNetworking::FriendshipBracelet::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::PlayAppearEffects
// Il2CppName: PlayAppearEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::FriendshipBracelet::*)()>(&GorillaNetworking::FriendshipBracelet::PlayAppearEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "PlayAppearEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::FriendshipBracelet::*)()>(&GorillaNetworking::FriendshipBracelet::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::UpdateBeads
// Il2CppName: UpdateBeads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::FriendshipBracelet::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*, int)>(&GorillaNetworking::FriendshipBracelet::UpdateBeads)> {
  static const MethodInfo* get() {
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* selfIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::FriendshipBracelet*), "UpdateBeads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, selfIndex});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::FriendshipBracelet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
