// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: TitleDataFeatureFlags
  class TitleDataFeatureFlags;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::TitleDataFeatureFlags);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::TitleDataFeatureFlags*, "GorillaNetworking", "TitleDataFeatureFlags");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.TitleDataFeatureFlags
  // [TokenAttribute] Offset: FFFFFFFF
  class TitleDataFeatureFlags : public ::Il2CppObject {
    public:
    public:
    // public System.String TitleDataKey
    // Size: 0x8
    // Offset: 0x10
    ::StringW TitleDataKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <ready>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool ready;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ready and: defaults
    char __padding1[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> defaults
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::StringW, bool>* defaults;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, bool>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> flagValueByName
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* flagValueByName;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    public:
    // Get instance field reference: public System.String TitleDataKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TitleDataKey();
    // Get instance field reference: private System.Boolean <ready>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ready$k__BackingField();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> defaults
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, bool>*& dyn_defaults();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> flagValueByName
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn_flagValueByName();
    // public System.Boolean get_ready()
    // Offset: 0x2857444
    bool get_ready();
    // private System.Void set_ready(System.Boolean value)
    // Offset: 0x285744C
    void set_ready(bool value);
    // public System.Void FetchFeatureFlags()
    // Offset: 0x28546D0
    void FetchFeatureFlags();
    // public System.Boolean IsEnabledForUser(System.String flagName, System.String userId)
    // Offset: 0x28548C4
    bool IsEnabledForUser(::StringW flagName, ::StringW userId);
    // public System.Void .ctor()
    // Offset: 0x2856CB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TitleDataFeatureFlags* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::TitleDataFeatureFlags::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TitleDataFeatureFlags*, creationType>()));
    }
    // private System.Void <FetchFeatureFlags>b__7_0(System.String json)
    // Offset: 0x2857458
    void $FetchFeatureFlags$b__7_0(::StringW json);
    // private System.Void <FetchFeatureFlags>b__7_1(PlayFab.PlayFabError e)
    // Offset: 0x28575B8
    void $FetchFeatureFlags$b__7_1(::PlayFab::PlayFabError* e);
  }; // GorillaNetworking.TitleDataFeatureFlags
  #pragma pack(pop)
  static check_size<sizeof(TitleDataFeatureFlags), 40 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*)> __GorillaNetworking_TitleDataFeatureFlagsSizeCheck;
  static_assert(sizeof(TitleDataFeatureFlags) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::get_ready
// Il2CppName: get_ready
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::TitleDataFeatureFlags::*)()>(&GorillaNetworking::TitleDataFeatureFlags::get_ready)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "get_ready", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::set_ready
// Il2CppName: set_ready
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::TitleDataFeatureFlags::*)(bool)>(&GorillaNetworking::TitleDataFeatureFlags::set_ready)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "set_ready", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::FetchFeatureFlags
// Il2CppName: FetchFeatureFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::TitleDataFeatureFlags::*)()>(&GorillaNetworking::TitleDataFeatureFlags::FetchFeatureFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "FetchFeatureFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::IsEnabledForUser
// Il2CppName: IsEnabledForUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::TitleDataFeatureFlags::*)(::StringW, ::StringW)>(&GorillaNetworking::TitleDataFeatureFlags::IsEnabledForUser)> {
  static const MethodInfo* get() {
    static auto* flagName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "IsEnabledForUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flagName, userId});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::$FetchFeatureFlags$b__7_0
// Il2CppName: <FetchFeatureFlags>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::TitleDataFeatureFlags::*)(::StringW)>(&GorillaNetworking::TitleDataFeatureFlags::$FetchFeatureFlags$b__7_0)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "<FetchFeatureFlags>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::TitleDataFeatureFlags::$FetchFeatureFlags$b__7_1
// Il2CppName: <FetchFeatureFlags>b__7_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::TitleDataFeatureFlags::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::TitleDataFeatureFlags::$FetchFeatureFlags$b__7_1)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::TitleDataFeatureFlags*), "<FetchFeatureFlags>b__7_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
