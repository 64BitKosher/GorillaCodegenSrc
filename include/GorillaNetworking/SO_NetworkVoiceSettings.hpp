// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
// Including type: Photon.Voice.OpusCodec/FrameDuration
#include "Photon/Voice/OpusCodec_FrameDuration.hpp"
// Including type: POpusCodec.Enums.SamplingRate
#include "POpusCodec/Enums/SamplingRate.hpp"
// Including type: Photon.Voice.Unity.Recorder/InputSourceType
#include "Photon/Voice/Unity/Recorder.hpp"
// Including type: Photon.Voice.Unity.Recorder/MicType
// Already included the same include: Photon/Voice/Unity/Recorder.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: SO_NetworkVoiceSettings
  class SO_NetworkVoiceSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::SO_NetworkVoiceSettings);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::SO_NetworkVoiceSettings*, "GorillaNetworking", "SO_NetworkVoiceSettings");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.SO_NetworkVoiceSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class SO_NetworkVoiceSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.Boolean AutoConnectAndJoin
    // Size: 0x1
    // Offset: 0x18
    bool AutoConnectAndJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoLeaveAndDisconnect
    // Size: 0x1
    // Offset: 0x19
    bool AutoLeaveAndDisconnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean WorkInOfflineMode
    // Size: 0x1
    // Offset: 0x1A
    bool WorkInOfflineMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public ExitGames.Client.Photon.DebugLevel LogLevel
    // Size: 0x1
    // Offset: 0x1B
    ::ExitGames::Client::Photon::DebugLevel LogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // public ExitGames.Client.Photon.DebugLevel GlobalRecordersLogLevel
    // Size: 0x1
    // Offset: 0x1C
    ::ExitGames::Client::Photon::DebugLevel GlobalRecordersLogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // public ExitGames.Client.Photon.DebugLevel GlobalSpeakersLogLevel
    // Size: 0x1
    // Offset: 0x1D
    ::ExitGames::Client::Photon::DebugLevel GlobalSpeakersLogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // public System.Boolean CreateSpeakerIfNotFound
    // Size: 0x1
    // Offset: 0x1E
    bool CreateSpeakerIfNotFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CreateSpeakerIfNotFound and: UpdateInterval
    char __padding6[0x1] = {};
    // public System.Int32 UpdateInterval
    // Size: 0x4
    // Offset: 0x20
    int UpdateInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean SupportLogger
    // Size: 0x1
    // Offset: 0x24
    bool SupportLogger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SupportLogger and: BackgroundTimeout
    char __padding8[0x3] = {};
    // public System.Int32 BackgroundTimeout
    // Size: 0x4
    // Offset: 0x28
    int BackgroundTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean RecordOnlyWhenEnabled
    // Size: 0x1
    // Offset: 0x2C
    bool RecordOnlyWhenEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean RecordOnlyWhenJoined
    // Size: 0x1
    // Offset: 0x2D
    bool RecordOnlyWhenJoined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean StopRecordingWhenPaused
    // Size: 0x1
    // Offset: 0x2E
    bool StopRecordingWhenPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean TransmitEnabled
    // Size: 0x1
    // Offset: 0x2F
    bool TransmitEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoStart
    // Size: 0x1
    // Offset: 0x30
    bool AutoStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Encrypt
    // Size: 0x1
    // Offset: 0x31
    bool Encrypt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Byte InterestGroup
    // Size: 0x1
    // Offset: 0x32
    uint8_t InterestGroup;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Boolean DebugEcho
    // Size: 0x1
    // Offset: 0x33
    bool DebugEcho;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ReliableMode
    // Size: 0x1
    // Offset: 0x34
    bool ReliableMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ReliableMode and: FrameDuration
    char __padding18[0x3] = {};
    // public Photon.Voice.OpusCodec/FrameDuration FrameDuration
    // Size: 0x4
    // Offset: 0x38
    ::Photon::Voice::OpusCodec::FrameDuration FrameDuration;
    // Field size check
    static_assert(sizeof(::Photon::Voice::OpusCodec::FrameDuration) == 0x4);
    // public POpusCodec.Enums.SamplingRate SamplingRate
    // Size: 0x4
    // Offset: 0x3C
    ::POpusCodec::Enums::SamplingRate SamplingRate;
    // Field size check
    static_assert(sizeof(::POpusCodec::Enums::SamplingRate) == 0x4);
    // public System.Int32 Bitrate
    // Size: 0x4
    // Offset: 0x40
    int Bitrate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Photon.Voice.Unity.Recorder/InputSourceType InputSourceType
    // Size: 0x4
    // Offset: 0x44
    ::Photon::Voice::Unity::Recorder::InputSourceType InputSourceType;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder::InputSourceType) == 0x4);
    // public Photon.Voice.Unity.Recorder/MicType MicrophoneType
    // Size: 0x4
    // Offset: 0x48
    ::Photon::Voice::Unity::Recorder::MicType MicrophoneType;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder::MicType) == 0x4);
    // public System.Boolean UseFallback
    // Size: 0x1
    // Offset: 0x4C
    bool UseFallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Detect
    // Size: 0x1
    // Offset: 0x4D
    bool Detect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Detect and: Threshold
    char __padding25[0x2] = {};
    // public System.Single Threshold
    // Size: 0x4
    // Offset: 0x50
    float Threshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 Delay
    // Size: 0x4
    // Offset: 0x54
    int Delay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean AutoConnectAndJoin
    [[deprecated("Use field access instead!")]] bool& dyn_AutoConnectAndJoin();
    // Get instance field reference: public System.Boolean AutoLeaveAndDisconnect
    [[deprecated("Use field access instead!")]] bool& dyn_AutoLeaveAndDisconnect();
    // Get instance field reference: public System.Boolean WorkInOfflineMode
    [[deprecated("Use field access instead!")]] bool& dyn_WorkInOfflineMode();
    // Get instance field reference: public ExitGames.Client.Photon.DebugLevel LogLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_LogLevel();
    // Get instance field reference: public ExitGames.Client.Photon.DebugLevel GlobalRecordersLogLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_GlobalRecordersLogLevel();
    // Get instance field reference: public ExitGames.Client.Photon.DebugLevel GlobalSpeakersLogLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_GlobalSpeakersLogLevel();
    // Get instance field reference: public System.Boolean CreateSpeakerIfNotFound
    [[deprecated("Use field access instead!")]] bool& dyn_CreateSpeakerIfNotFound();
    // Get instance field reference: public System.Int32 UpdateInterval
    [[deprecated("Use field access instead!")]] int& dyn_UpdateInterval();
    // Get instance field reference: public System.Boolean SupportLogger
    [[deprecated("Use field access instead!")]] bool& dyn_SupportLogger();
    // Get instance field reference: public System.Int32 BackgroundTimeout
    [[deprecated("Use field access instead!")]] int& dyn_BackgroundTimeout();
    // Get instance field reference: public System.Boolean RecordOnlyWhenEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_RecordOnlyWhenEnabled();
    // Get instance field reference: public System.Boolean RecordOnlyWhenJoined
    [[deprecated("Use field access instead!")]] bool& dyn_RecordOnlyWhenJoined();
    // Get instance field reference: public System.Boolean StopRecordingWhenPaused
    [[deprecated("Use field access instead!")]] bool& dyn_StopRecordingWhenPaused();
    // Get instance field reference: public System.Boolean TransmitEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_TransmitEnabled();
    // Get instance field reference: public System.Boolean AutoStart
    [[deprecated("Use field access instead!")]] bool& dyn_AutoStart();
    // Get instance field reference: public System.Boolean Encrypt
    [[deprecated("Use field access instead!")]] bool& dyn_Encrypt();
    // Get instance field reference: public System.Byte InterestGroup
    [[deprecated("Use field access instead!")]] uint8_t& dyn_InterestGroup();
    // Get instance field reference: public System.Boolean DebugEcho
    [[deprecated("Use field access instead!")]] bool& dyn_DebugEcho();
    // Get instance field reference: public System.Boolean ReliableMode
    [[deprecated("Use field access instead!")]] bool& dyn_ReliableMode();
    // Get instance field reference: public Photon.Voice.OpusCodec/FrameDuration FrameDuration
    [[deprecated("Use field access instead!")]] ::Photon::Voice::OpusCodec::FrameDuration& dyn_FrameDuration();
    // Get instance field reference: public POpusCodec.Enums.SamplingRate SamplingRate
    [[deprecated("Use field access instead!")]] ::POpusCodec::Enums::SamplingRate& dyn_SamplingRate();
    // Get instance field reference: public System.Int32 Bitrate
    [[deprecated("Use field access instead!")]] int& dyn_Bitrate();
    // Get instance field reference: public Photon.Voice.Unity.Recorder/InputSourceType InputSourceType
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder::InputSourceType& dyn_InputSourceType();
    // Get instance field reference: public Photon.Voice.Unity.Recorder/MicType MicrophoneType
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder::MicType& dyn_MicrophoneType();
    // Get instance field reference: public System.Boolean UseFallback
    [[deprecated("Use field access instead!")]] bool& dyn_UseFallback();
    // Get instance field reference: public System.Boolean Detect
    [[deprecated("Use field access instead!")]] bool& dyn_Detect();
    // Get instance field reference: public System.Single Threshold
    [[deprecated("Use field access instead!")]] float& dyn_Threshold();
    // Get instance field reference: public System.Int32 Delay
    [[deprecated("Use field access instead!")]] int& dyn_Delay();
    // public System.Void .ctor()
    // Offset: 0x2831FC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SO_NetworkVoiceSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::SO_NetworkVoiceSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SO_NetworkVoiceSettings*, creationType>()));
    }
  }; // GorillaNetworking.SO_NetworkVoiceSettings
  #pragma pack(pop)
  static check_size<sizeof(SO_NetworkVoiceSettings), 84 + sizeof(int)> __GorillaNetworking_SO_NetworkVoiceSettingsSizeCheck;
  static_assert(sizeof(SO_NetworkVoiceSettings) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::SO_NetworkVoiceSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
