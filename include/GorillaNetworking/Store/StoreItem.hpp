// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: GorillaNetworking.CosmeticsController
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: GorillaNetworking.Store
namespace GorillaNetworking::Store {
  // Forward declaring type: StoreItem
  class StoreItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::Store::StoreItem);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::Store::StoreItem*, "GorillaNetworking.Store", "StoreItem");
// Type namespace: GorillaNetworking.Store
namespace GorillaNetworking::Store {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.Store.StoreItem
  // [TokenAttribute] Offset: FFFFFFFF
  class StoreItem : public ::Il2CppObject {
    public:
    public:
    // public System.String itemName
    // Size: 0x8
    // Offset: 0x10
    ::StringW itemName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 itemCategory
    // Size: 0x4
    // Offset: 0x18
    int itemCategory;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: itemCategory and: itemPictureResourceString
    char __padding1[0x4] = {};
    // public System.String itemPictureResourceString
    // Size: 0x8
    // Offset: 0x20
    ::StringW itemPictureResourceString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x28
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String overrideDisplayName
    // Size: 0x8
    // Offset: 0x30
    ::StringW overrideDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] bundledItems
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::StringW> bundledItems;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean canTryOn
    // Size: 0x1
    // Offset: 0x40
    bool canTryOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bothHandsHoldable
    // Size: 0x1
    // Offset: 0x41
    bool bothHandsHoldable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bothHandsHoldable and: AssetBundleName
    char __padding7[0x6] = {};
    // public System.String AssetBundleName
    // Size: 0x8
    // Offset: 0x48
    ::StringW AssetBundleName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean bUsesMeshAtlas
    // Size: 0x1
    // Offset: 0x50
    bool bUsesMeshAtlas;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bUsesMeshAtlas and: MeshAtlasResourceName
    char __padding9[0x7] = {};
    // public System.String MeshAtlasResourceName
    // Size: 0x8
    // Offset: 0x58
    ::StringW MeshAtlasResourceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String MeshResourceName
    // Size: 0x8
    // Offset: 0x60
    ::StringW MeshResourceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String MaterialResrouceName
    // Size: 0x8
    // Offset: 0x68
    ::StringW MaterialResrouceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Vector3 translationOffset
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 translationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rotationOffset
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 scale
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public System.String itemName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemName();
    // Get instance field reference: public System.Int32 itemCategory
    [[deprecated("Use field access instead!")]] int& dyn_itemCategory();
    // Get instance field reference: public System.String itemPictureResourceString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_itemPictureResourceString();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.String overrideDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_overrideDisplayName();
    // Get instance field reference: public System.String[] bundledItems
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_bundledItems();
    // Get instance field reference: public System.Boolean canTryOn
    [[deprecated("Use field access instead!")]] bool& dyn_canTryOn();
    // Get instance field reference: public System.Boolean bothHandsHoldable
    [[deprecated("Use field access instead!")]] bool& dyn_bothHandsHoldable();
    // Get instance field reference: public System.String AssetBundleName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AssetBundleName();
    // Get instance field reference: public System.Boolean bUsesMeshAtlas
    [[deprecated("Use field access instead!")]] bool& dyn_bUsesMeshAtlas();
    // Get instance field reference: public System.String MeshAtlasResourceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MeshAtlasResourceName();
    // Get instance field reference: public System.String MeshResourceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MeshResourceName();
    // Get instance field reference: public System.String MaterialResrouceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MaterialResrouceName();
    // Get instance field reference: public UnityEngine.Vector3 translationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_translationOffset();
    // Get instance field reference: public UnityEngine.Vector3 rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotationOffset();
    // Get instance field reference: public UnityEngine.Vector3 scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scale();
    // static public System.Void SerializeItemsAsJSON(GorillaNetworking.Store.StoreItem[] items)
    // Offset: 0x2866D34
    static void SerializeItemsAsJSON(::ArrayW<::GorillaNetworking::Store::StoreItem*> items);
    // static public System.Void ConvertCosmeticItemToSToreItem(GorillaNetworking.CosmeticsController/CosmeticItem cosmeticItem, ref GorillaNetworking.Store.StoreItem storeItem)
    // Offset: 0x2866E78
    static void ConvertCosmeticItemToSToreItem(::GorillaNetworking::CosmeticsController::CosmeticItem cosmeticItem, ByRef<::GorillaNetworking::Store::StoreItem*> storeItem);
    // public System.Void .ctor()
    // Offset: 0x2866F9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StoreItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::Store::StoreItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StoreItem*, creationType>()));
    }
  }; // GorillaNetworking.Store.StoreItem
  #pragma pack(pop)
  static check_size<sizeof(StoreItem), 136 + sizeof(::UnityEngine::Vector3)> __GorillaNetworking_Store_StoreItemSizeCheck;
  static_assert(sizeof(StoreItem) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::Store::StoreItem::SerializeItemsAsJSON
// Il2CppName: SerializeItemsAsJSON
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::GorillaNetworking::Store::StoreItem*>)>(&GorillaNetworking::Store::StoreItem::SerializeItemsAsJSON)> {
  static const MethodInfo* get() {
    static auto* items = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("GorillaNetworking.Store", "StoreItem"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::Store::StoreItem*), "SerializeItemsAsJSON", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{items});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::Store::StoreItem::ConvertCosmeticItemToSToreItem
// Il2CppName: ConvertCosmeticItemToSToreItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaNetworking::CosmeticsController::CosmeticItem, ByRef<::GorillaNetworking::Store::StoreItem*>)>(&GorillaNetworking::Store::StoreItem::ConvertCosmeticItemToSToreItem)> {
  static const MethodInfo* get() {
    static auto* cosmeticItem = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CosmeticsController/CosmeticItem")->byval_arg;
    static auto* storeItem = &::il2cpp_utils::GetClassFromName("GorillaNetworking.Store", "StoreItem")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::Store::StoreItem*), "ConvertCosmeticItemToSToreItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cosmeticItem, storeItem});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::Store::StoreItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
