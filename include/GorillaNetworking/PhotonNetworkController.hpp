// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaNetworking.JoinType
#include "GorillaNetworking/JoinType.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PlayFabAuthenticator
  class PlayFabAuthenticator;
  // Forward declaring type: GorillaNetworkJoinTrigger
  class GorillaNetworkJoinTrigger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaGeoHideShowTrigger
  class GorillaGeoHideShowTrigger;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObject
  class NetworkObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::PhotonNetworkController);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::PhotonNetworkController*, "GorillaNetworking", "PhotonNetworkController");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaNetworking.PhotonNetworkController
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonNetworkController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$AttemptToJoinPublicRoomAsync$d__65
    struct $AttemptToJoinPublicRoomAsync$d__65;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$AttemptToJoinSpecificRoomAsync$d__68
    struct $AttemptToJoinSpecificRoomAsync$d__68;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$DisableOnStart$d__60
    class $DisableOnStart$d__60;
    // Nested type: ::GorillaNetworking::PhotonNetworkController::$SendPartyFollowCommands$d__66
    struct $SendPartyFollowCommands$d__66;
    public:
    // public System.Int32 incrementCounter
    // Size: 0x4
    // Offset: 0x20
    int incrementCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaNetworking.PlayFabAuthenticator playFabAuthenticator
    // Size: 0x8
    // Offset: 0x28
    ::GorillaNetworking::PlayFabAuthenticator* playFabAuthenticator;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PlayFabAuthenticator*) == 0x8);
    // public System.String[] serverRegions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> serverRegions;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean isPrivate
    // Size: 0x1
    // Offset: 0x38
    bool isPrivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.String customRoomID
    // Size: 0x8
    // Offset: 0x40
    ::StringW customRoomID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject playerOffset
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* playerOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer[] offlineVRRig
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> offlineVRRig;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    // public System.Boolean attemptingToConnect
    // Size: 0x1
    // Offset: 0x58
    bool attemptingToConnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 currentRegionIndex
    // Size: 0x4
    // Offset: 0x5C
    int currentRegionIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String currentGameType
    // Size: 0x8
    // Offset: 0x60
    ::StringW currentGameType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean roomCosmeticsInitialized
    // Size: 0x1
    // Offset: 0x68
    bool roomCosmeticsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.GameObject photonVoiceObjectPrefab
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* photonVoiceObjectPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> playerCosmeticsLookup
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Dictionary_2<::StringW, bool>* playerCosmeticsLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, bool>*) == 0x8);
    // private System.Boolean pastFirstConnection
    // Size: 0x1
    // Offset: 0x80
    bool pastFirstConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single lastHeadRightHandDistance
    // Size: 0x4
    // Offset: 0x84
    float lastHeadRightHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastHeadLeftHandDistance
    // Size: 0x4
    // Offset: 0x88
    float lastHeadLeftHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pauseTime
    // Size: 0x4
    // Offset: 0x8C
    float pauseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single disconnectTime
    // Size: 0x4
    // Offset: 0x90
    float disconnectTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean disableAFKKick
    // Size: 0x1
    // Offset: 0x94
    bool disableAFKKick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single headRightHandDistance
    // Size: 0x4
    // Offset: 0x98
    float headRightHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single headLeftHandDistance
    // Size: 0x4
    // Offset: 0x9C
    float headLeftHandDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion headQuat
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Quaternion headQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion lastHeadQuat
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Quaternion lastHeadQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.GameObject[] disableOnStartup
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::UnityEngine::GameObject*> disableOnStartup;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] enableOnStartup
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::GameObject*> enableOnStartup;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.Boolean updatedName
    // Size: 0x1
    // Offset: 0xD0
    bool updatedName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32[] playersInRegion
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<int> playersInRegion;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32[] pingInRegion
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<int> pingInRegion;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Collections.Generic.List`1<System.String> friendIDList
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::StringW>* friendIDList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private GorillaNetworking.JoinType currentJoinType
    // Size: 0x4
    // Offset: 0xF0
    ::GorillaNetworking::JoinType currentJoinType;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::JoinType) == 0x4);
    // private System.String friendToFollow
    // Size: 0x8
    // Offset: 0xF8
    ::StringW friendToFollow;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String keyToFollow
    // Size: 0x8
    // Offset: 0x100
    ::StringW keyToFollow;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String shuffler
    // Size: 0x8
    // Offset: 0x108
    ::StringW shuffler;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String keyStr
    // Size: 0x8
    // Offset: 0x110
    ::StringW keyStr;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String platformTag
    // Size: 0x8
    // Offset: 0x118
    ::StringW platformTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String startLevel
    // Size: 0x8
    // Offset: 0x120
    ::StringW startLevel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private GTZone startZone
    // Size: 0x4
    // Offset: 0x128
    ::GlobalNamespace::GTZone startZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // private GorillaGeoHideShowTrigger startGeoTrigger
    // Size: 0x8
    // Offset: 0x130
    ::GlobalNamespace::GorillaGeoHideShowTrigger* startGeoTrigger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaGeoHideShowTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger privateTrigger
    // Size: 0x8
    // Offset: 0x138
    ::GorillaNetworking::GorillaNetworkJoinTrigger* privateTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // System.String initialGameMode
    // Size: 0x8
    // Offset: 0x140
    ::StringW initialGameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger currentJoinTrigger
    // Size: 0x8
    // Offset: 0x148
    ::GorillaNetworking::GorillaNetworkJoinTrigger* currentJoinTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public System.String autoJoinRoom
    // Size: 0x8
    // Offset: 0x150
    ::StringW autoJoinRoom;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean deferredJoin
    // Size: 0x1
    // Offset: 0x158
    bool deferredJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single partyJoinDeferredUntilTimestamp
    // Size: 0x4
    // Offset: 0x15C
    float partyJoinDeferredUntilTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Nullable`1<System.DateTime> timeWhenApplicationPaused
    // Size: 0xFFFFFFFF
    // Offset: 0x160
    ::System::Nullable_1<::System::DateTime> timeWhenApplicationPaused;
    // private Fusion.NetworkObject testPlayerPrefab
    // Size: 0x8
    // Offset: 0x170
    ::Fusion::NetworkObject* testPlayerPrefab;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObject*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaNetworking.GorillaNetworkJoinTrigger> allJoinTriggers
    // Size: 0x8
    // Offset: 0x178
    ::System::Collections::Generic::List_1<::GorillaNetworking::GorillaNetworkJoinTrigger*>* allJoinTriggers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaNetworking::GorillaNetworkJoinTrigger*>*) == 0x8);
    public:
    // Get static field: static public GorillaNetworking.PhotonNetworkController Instance
    static ::GorillaNetworking::PhotonNetworkController* _get_Instance();
    // Set static field: static public GorillaNetworking.PhotonNetworkController Instance
    static void _set_Instance(::GorillaNetworking::PhotonNetworkController* value);
    // Get instance field reference: public System.Int32 incrementCounter
    [[deprecated("Use field access instead!")]] int& dyn_incrementCounter();
    // Get instance field reference: public GorillaNetworking.PlayFabAuthenticator playFabAuthenticator
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PlayFabAuthenticator*& dyn_playFabAuthenticator();
    // Get instance field reference: public System.String[] serverRegions
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_serverRegions();
    // Get instance field reference: public System.Boolean isPrivate
    [[deprecated("Use field access instead!")]] bool& dyn_isPrivate();
    // Get instance field reference: public System.String customRoomID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_customRoomID();
    // Get instance field reference: public UnityEngine.GameObject playerOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerOffset();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer[] offlineVRRig
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_offlineVRRig();
    // Get instance field reference: public System.Boolean attemptingToConnect
    [[deprecated("Use field access instead!")]] bool& dyn_attemptingToConnect();
    // Get instance field reference: private System.Int32 currentRegionIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentRegionIndex();
    // Get instance field reference: public System.String currentGameType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentGameType();
    // Get instance field reference: public System.Boolean roomCosmeticsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_roomCosmeticsInitialized();
    // Get instance field reference: public UnityEngine.GameObject photonVoiceObjectPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_photonVoiceObjectPrefab();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Boolean> playerCosmeticsLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, bool>*& dyn_playerCosmeticsLookup();
    // Get instance field reference: private System.Boolean pastFirstConnection
    [[deprecated("Use field access instead!")]] bool& dyn_pastFirstConnection();
    // Get instance field reference: private System.Single lastHeadRightHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_lastHeadRightHandDistance();
    // Get instance field reference: private System.Single lastHeadLeftHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_lastHeadLeftHandDistance();
    // Get instance field reference: private System.Single pauseTime
    [[deprecated("Use field access instead!")]] float& dyn_pauseTime();
    // Get instance field reference: private System.Single disconnectTime
    [[deprecated("Use field access instead!")]] float& dyn_disconnectTime();
    // Get instance field reference: public System.Boolean disableAFKKick
    [[deprecated("Use field access instead!")]] bool& dyn_disableAFKKick();
    // Get instance field reference: private System.Single headRightHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_headRightHandDistance();
    // Get instance field reference: private System.Single headLeftHandDistance
    [[deprecated("Use field access instead!")]] float& dyn_headLeftHandDistance();
    // Get instance field reference: private UnityEngine.Quaternion headQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headQuat();
    // Get instance field reference: private UnityEngine.Quaternion lastHeadQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastHeadQuat();
    // Get instance field reference: public UnityEngine.GameObject[] disableOnStartup
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_disableOnStartup();
    // Get instance field reference: public UnityEngine.GameObject[] enableOnStartup
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_enableOnStartup();
    // Get instance field reference: public System.Boolean updatedName
    [[deprecated("Use field access instead!")]] bool& dyn_updatedName();
    // Get instance field reference: private System.Int32[] playersInRegion
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_playersInRegion();
    // Get instance field reference: private System.Int32[] pingInRegion
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_pingInRegion();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> friendIDList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_friendIDList();
    // Get instance field reference: private GorillaNetworking.JoinType currentJoinType
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::JoinType& dyn_currentJoinType();
    // Get instance field reference: private System.String friendToFollow
    [[deprecated("Use field access instead!")]] ::StringW& dyn_friendToFollow();
    // Get instance field reference: private System.String keyToFollow
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keyToFollow();
    // Get instance field reference: public System.String shuffler
    [[deprecated("Use field access instead!")]] ::StringW& dyn_shuffler();
    // Get instance field reference: public System.String keyStr
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keyStr();
    // Get instance field reference: private System.String platformTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platformTag();
    // Get instance field reference: private System.String startLevel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_startLevel();
    // Get instance field reference: private GTZone startZone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_startZone();
    // Get instance field reference: private GorillaGeoHideShowTrigger startGeoTrigger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaGeoHideShowTrigger*& dyn_startGeoTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger privateTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_privateTrigger();
    // Get instance field reference: System.String initialGameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialGameMode();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger currentJoinTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_currentJoinTrigger();
    // Get instance field reference: public System.String autoJoinRoom
    [[deprecated("Use field access instead!")]] ::StringW& dyn_autoJoinRoom();
    // Get instance field reference: private System.Boolean deferredJoin
    [[deprecated("Use field access instead!")]] bool& dyn_deferredJoin();
    // Get instance field reference: private System.Single partyJoinDeferredUntilTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_partyJoinDeferredUntilTimestamp();
    // Get instance field reference: private System.Nullable`1<System.DateTime> timeWhenApplicationPaused
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::DateTime>& dyn_timeWhenApplicationPaused();
    // Get instance field reference: private Fusion.NetworkObject testPlayerPrefab
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject*& dyn_testPlayerPrefab();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaNetworking.GorillaNetworkJoinTrigger> allJoinTriggers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaNetworking::GorillaNetworkJoinTrigger*>*& dyn_allJoinTriggers();
    // public System.String get_StartLevel()
    // Offset: 0x2857650
    ::StringW get_StartLevel();
    // public System.Void set_StartLevel(System.String value)
    // Offset: 0x2857658
    void set_StartLevel(::StringW value);
    // public GTZone get_StartZone()
    // Offset: 0x2857668
    ::GlobalNamespace::GTZone get_StartZone();
    // public System.Void set_StartZone(GTZone value)
    // Offset: 0x2857670
    void set_StartZone(::GlobalNamespace::GTZone value);
    // public GTZone get_CurrentRoomZone()
    // Offset: 0x2857678
    ::GlobalNamespace::GTZone get_CurrentRoomZone();
    // public GorillaGeoHideShowTrigger get_StartGeoTrigger()
    // Offset: 0x28576F8
    ::GlobalNamespace::GorillaGeoHideShowTrigger* get_StartGeoTrigger();
    // public System.Void set_StartGeoTrigger(GorillaGeoHideShowTrigger value)
    // Offset: 0x2857700
    void set_StartGeoTrigger(::GlobalNamespace::GorillaGeoHideShowTrigger* value);
    // public System.Void Awake()
    // Offset: 0x2857710
    void Awake();
    // public System.Void Start()
    // Offset: 0x285788C
    void Start();
    // private System.Collections.IEnumerator DisableOnStart()
    // Offset: 0x2857A30
    ::System::Collections::IEnumerator* DisableOnStart();
    // public System.Void FixedUpdate()
    // Offset: 0x2857AC4
    void FixedUpdate();
    // public System.Void DeferJoining(System.Single duration)
    // Offset: 0x285458C
    void DeferJoining(float duration);
    // public System.Void ClearDeferredJoin()
    // Offset: 0x28545C4
    void ClearDeferredJoin();
    // public System.Void AttemptToJoinPublicRoom(GorillaNetworking.GorillaNetworkJoinTrigger triggeredTrigger, GorillaNetworking.JoinType roomJoinType)
    // Offset: 0x284D4E0
    void AttemptToJoinPublicRoom(::GorillaNetworking::GorillaNetworkJoinTrigger* triggeredTrigger, ::GorillaNetworking::JoinType roomJoinType);
    // private System.Void AttemptToJoinPublicRoomAsync(GorillaNetworking.GorillaNetworkJoinTrigger triggeredTrigger, GorillaNetworking.JoinType roomJoinType)
    // Offset: 0x2858124
    void AttemptToJoinPublicRoomAsync(::GorillaNetworking::GorillaNetworkJoinTrigger* triggeredTrigger, ::GorillaNetworking::JoinType roomJoinType);
    // private System.Threading.Tasks.Task SendPartyFollowCommands()
    // Offset: 0x2858200
    ::System::Threading::Tasks::Task* SendPartyFollowCommands();
    // public System.Void AttemptToJoinSpecificRoom(System.String roomID, GorillaNetworking.JoinType roomJoinType)
    // Offset: 0x284FAAC
    void AttemptToJoinSpecificRoom(::StringW roomID, ::GorillaNetworking::JoinType roomJoinType);
    // public System.Threading.Tasks.Task AttemptToJoinSpecificRoomAsync(System.String roomID, GorillaNetworking.JoinType roomJoinType)
    // Offset: 0x28582C8
    ::System::Threading::Tasks::Task* AttemptToJoinSpecificRoomAsync(::StringW roomID, ::GorillaNetworking::JoinType roomJoinType);
    // private System.Void DisconnectCleanup()
    // Offset: 0x28583D0
    void DisconnectCleanup();
    // public System.Void OnJoinedRoom()
    // Offset: 0x285873C
    void OnJoinedRoom();
    // public System.Void RegisterJoinTrigger(GorillaNetworking.GorillaNetworkJoinTrigger trigger)
    // Offset: 0x2853684
    void RegisterJoinTrigger(::GorillaNetworking::GorillaNetworkJoinTrigger* trigger);
    // private System.Void UpdateCurrentJoinTrigger()
    // Offset: 0x2858DF0
    void UpdateCurrentJoinTrigger();
    // public System.Void UpdateTriggerScreens()
    // Offset: 0x2850784
    void UpdateTriggerScreens();
    // public System.Void AttemptToFollowIntoPub(System.String userIDToFollow, System.Int32 actorNumberToFollow, System.String newKeyStr, System.String shufflerStr, GorillaNetworking.JoinType joinType)
    // Offset: 0x28593FC
    void AttemptToFollowIntoPub(::StringW userIDToFollow, int actorNumberToFollow, ::StringW newKeyStr, ::StringW shufflerStr, ::GorillaNetworking::JoinType joinType);
    // public System.Void OnDisconnected()
    // Offset: 0x2859544
    void OnDisconnected();
    // public System.Void OnApplicationQuit()
    // Offset: 0x2859548
    void OnApplicationQuit();
    // private System.String ReturnRoomName()
    // Offset: 0x28595F4
    ::StringW ReturnRoomName();
    // private System.String RandomRoomName()
    // Offset: 0x2859608
    ::StringW RandomRoomName();
    // public System.Byte GetRoomSize(System.String gameModeName)
    // Offset: 0x28596F4
    uint8_t GetRoomSize(::StringW gameModeName);
    // private System.String GetRegionWithLowestPing()
    // Offset: 0x285975C
    ::StringW GetRegionWithLowestPing();
    // public System.Int32 TotalUsers()
    // Offset: 0x28598DC
    int TotalUsers();
    // public System.String CurrentState()
    // Offset: 0x2859934
    ::StringW CurrentState();
    // private System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0x2859A6C
    void OnApplicationPause(bool pause);
    // private System.Void OnApplicationFocus(System.Boolean focus)
    // Offset: 0x2859CCC
    void OnApplicationFocus(bool focus);
    // public System.Void .ctor()
    // Offset: 0x2859E00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonNetworkController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::PhotonNetworkController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonNetworkController*, creationType>()));
    }
  }; // GorillaNetworking.PhotonNetworkController
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::get_StartLevel
// Il2CppName: get_StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::get_StartLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "get_StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::set_StartLevel
// Il2CppName: set_StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::set_StartLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "set_StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::get_StartZone
// Il2CppName: get_StartZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GTZone (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::get_StartZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "get_StartZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::set_StartZone
// Il2CppName: set_StartZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GlobalNamespace::GTZone)>(&GorillaNetworking::PhotonNetworkController::set_StartZone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GTZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "set_StartZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::get_CurrentRoomZone
// Il2CppName: get_CurrentRoomZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GTZone (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::get_CurrentRoomZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "get_CurrentRoomZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::get_StartGeoTrigger
// Il2CppName: get_StartGeoTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaGeoHideShowTrigger* (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::get_StartGeoTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "get_StartGeoTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::set_StartGeoTrigger
// Il2CppName: set_StartGeoTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GlobalNamespace::GorillaGeoHideShowTrigger*)>(&GorillaNetworking::PhotonNetworkController::set_StartGeoTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GorillaGeoHideShowTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "set_StartGeoTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DisableOnStart
// Il2CppName: DisableOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::DisableOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DisableOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DeferJoining
// Il2CppName: DeferJoining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(float)>(&GorillaNetworking::PhotonNetworkController::DeferJoining)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DeferJoining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ClearDeferredJoin
// Il2CppName: ClearDeferredJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::ClearDeferredJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ClearDeferredJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoom
// Il2CppName: AttemptToJoinPublicRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::GorillaNetworkJoinTrigger*, ::GorillaNetworking::JoinType)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoom)> {
  static const MethodInfo* get() {
    static auto* triggeredTrigger = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaNetworkJoinTrigger")->byval_arg;
    static auto* roomJoinType = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinPublicRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggeredTrigger, roomJoinType});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoomAsync
// Il2CppName: AttemptToJoinPublicRoomAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::GorillaNetworkJoinTrigger*, ::GorillaNetworking::JoinType)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinPublicRoomAsync)> {
  static const MethodInfo* get() {
    static auto* triggeredTrigger = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaNetworkJoinTrigger")->byval_arg;
    static auto* roomJoinType = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinPublicRoomAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggeredTrigger, roomJoinType});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::SendPartyFollowCommands
// Il2CppName: SendPartyFollowCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::SendPartyFollowCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "SendPartyFollowCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoom
// Il2CppName: AttemptToJoinSpecificRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW, ::GorillaNetworking::JoinType)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoom)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomJoinType = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinSpecificRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, roomJoinType});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoomAsync
// Il2CppName: AttemptToJoinSpecificRoomAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GorillaNetworking::PhotonNetworkController::*)(::StringW, ::GorillaNetworking::JoinType)>(&GorillaNetworking::PhotonNetworkController::AttemptToJoinSpecificRoomAsync)> {
  static const MethodInfo* get() {
    static auto* roomID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* roomJoinType = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToJoinSpecificRoomAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomID, roomJoinType});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::DisconnectCleanup
// Il2CppName: DisconnectCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::DisconnectCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "DisconnectCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::RegisterJoinTrigger
// Il2CppName: RegisterJoinTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::GorillaNetworking::GorillaNetworkJoinTrigger*)>(&GorillaNetworking::PhotonNetworkController::RegisterJoinTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaNetworkJoinTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "RegisterJoinTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::UpdateCurrentJoinTrigger
// Il2CppName: UpdateCurrentJoinTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::UpdateCurrentJoinTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "UpdateCurrentJoinTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::UpdateTriggerScreens
// Il2CppName: UpdateTriggerScreens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::UpdateTriggerScreens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "UpdateTriggerScreens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::AttemptToFollowIntoPub
// Il2CppName: AttemptToFollowIntoPub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(::StringW, int, ::StringW, ::StringW, ::GorillaNetworking::JoinType)>(&GorillaNetworking::PhotonNetworkController::AttemptToFollowIntoPub)> {
  static const MethodInfo* get() {
    static auto* userIDToFollow = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* actorNumberToFollow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newKeyStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shufflerStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* joinType = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "AttemptToFollowIntoPub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userIDToFollow, actorNumberToFollow, newKeyStr, shufflerStr, joinType});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnDisconnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::ReturnRoomName
// Il2CppName: ReturnRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::ReturnRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "ReturnRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::RandomRoomName
// Il2CppName: RandomRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::RandomRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "RandomRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::GetRoomSize
// Il2CppName: GetRoomSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (GorillaNetworking::PhotonNetworkController::*)(::StringW)>(&GorillaNetworking::PhotonNetworkController::GetRoomSize)> {
  static const MethodInfo* get() {
    static auto* gameModeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "GetRoomSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameModeName});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::GetRegionWithLowestPing
// Il2CppName: GetRegionWithLowestPing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::GetRegionWithLowestPing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "GetRegionWithLowestPing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::TotalUsers
// Il2CppName: TotalUsers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::TotalUsers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "TotalUsers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::CurrentState
// Il2CppName: CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::PhotonNetworkController::*)()>(&GorillaNetworking::PhotonNetworkController::CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(bool)>(&GorillaNetworking::PhotonNetworkController::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::PhotonNetworkController::*)(bool)>(&GorillaNetworking::PhotonNetworkController::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::PhotonNetworkController*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::PhotonNetworkController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
