// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Realtime.IMatchmakingCallbacks
#include "Photon/Realtime/IMatchmakingCallbacks.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: GorillaSnapTurn
  class GorillaSnapTurn;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaText
  class GorillaText;
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
  // Forward declaring type: GorillaNetworkJoinTrigger
  class GorillaNetworkJoinTrigger;
  // Forward declaring type: CreditsView
  class CreditsView;
  // Skipping declaration: ComputerState because it is already included!
  // Forward declaring type: GorillaKeyboardBindings
  struct GorillaKeyboardBindings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: TextAsset
  class TextAsset;
  // Forward declaring type: WaitForSeconds
  class WaitForSeconds;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: WatchableStringSO
  class WatchableStringSO;
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
  // Forward declaring type: ModeSelectButton
  class ModeSelectButton;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: PlayFab::CloudScriptModels
namespace PlayFab::CloudScriptModels {
  // Forward declaring type: ExecuteFunctionResult
  class ExecuteFunctionResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetTimeResult
  class GetTimeResult;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: FriendInfo
  class FriendInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaComputer
  class GorillaComputer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaComputer);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaComputer*, "GorillaNetworking", "GorillaComputer");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x2B0
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaComputer
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaComputer : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Realtime::IMatchmakingCallbacks*/ {
    public:
    // Nested type: ::GorillaNetworking::GorillaComputer::ComputerState
    struct ComputerState;
    // Nested type: ::GorillaNetworking::GorillaComputer::NameCheckResult
    struct NameCheckResult;
    // Nested type: ::GorillaNetworking::GorillaComputer::StateOrderItem
    class StateOrderItem;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$LoadingScreen$g__LoadingScreenLocal|150_0$d
    class $$LoadingScreen$g__LoadingScreenLocal|150_0$d;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$Start$g__Start_Local|98_0$d
    class $$Start$g__Start_Local|98_0$d;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$c
    class $$c;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$c__DisplayClass124_0
    class $$c__DisplayClass124_0;
    // Nested type: ::GorillaNetworking::GorillaComputer::$$c__DisplayClass183_0
    class $$c__DisplayClass183_0;
    // Nested type: ::GorillaNetworking::GorillaComputer::$DisconnectAfterDelay$d__138
    struct $DisconnectAfterDelay$d__138;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaNetworking.GorillaComputer/ComputerState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComputerState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ComputerState
      constexpr ComputerState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Startup
      static constexpr const int Startup = 0;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Startup
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Startup();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Startup
      static void _set_Startup(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Color
      static constexpr const int Color = 1;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Color
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Color();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Color
      static void _set_Color(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Name
      static constexpr const int Name = 2;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Name
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Name();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Name
      static void _set_Name(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Turn
      static constexpr const int Turn = 3;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Turn
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Turn();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Turn
      static void _set_Turn(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Mic
      static constexpr const int Mic = 4;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Mic
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Mic();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Mic
      static void _set_Mic(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Room
      static constexpr const int Room = 5;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Room
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Room();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Room
      static void _set_Room(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Queue
      static constexpr const int Queue = 6;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Queue
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Queue();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Queue
      static void _set_Queue(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Group
      static constexpr const int Group = 7;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Group
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Group();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Group
      static void _set_Group(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Voice
      static constexpr const int Voice = 8;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Voice
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Voice();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Voice
      static void _set_Voice(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState AutoMute
      static constexpr const int AutoMute = 9;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState AutoMute
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_AutoMute();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState AutoMute
      static void _set_AutoMute(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Credits
      static constexpr const int Credits = 10;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Credits
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Credits();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Credits
      static void _set_Credits(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Visuals
      static constexpr const int Visuals = 11;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Visuals
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Visuals();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Visuals
      static void _set_Visuals(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Time
      static constexpr const int Time = 12;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Time
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Time();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Time
      static void _set_Time(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState NameWarning
      static constexpr const int NameWarning = 13;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState NameWarning
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_NameWarning();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState NameWarning
      static void _set_NameWarning(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Loading
      static constexpr const int Loading = 14;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Loading
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Loading();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Loading
      static void _set_Loading(::GorillaNetworking::GorillaComputer::ComputerState value);
      // static field const value: static public GorillaNetworking.GorillaComputer/ComputerState Support
      static constexpr const int Support = 15;
      // Get static field: static public GorillaNetworking.GorillaComputer/ComputerState Support
      static ::GorillaNetworking::GorillaComputer::ComputerState _get_Support();
      // Set static field: static public GorillaNetworking.GorillaComputer/ComputerState Support
      static void _set_Support(::GorillaNetworking::GorillaComputer::ComputerState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaNetworking.GorillaComputer/ComputerState
    #pragma pack(pop)
    static check_size<sizeof(GorillaComputer::ComputerState), 0 + sizeof(int)> __GorillaNetworking_GorillaComputer_ComputerStateSizeCheck;
    static_assert(sizeof(GorillaComputer::ComputerState) == 0x4);
    public:
    // public System.Boolean tryGetTimeAgain
    // Size: 0x1
    // Offset: 0x20
    bool tryGetTimeAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tryGetTimeAgain and: unpressedMaterial
    char __padding0[0x7] = {};
    // public UnityEngine.Material unpressedMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* unpressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material pressedMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* pressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.String currentTextField
    // Size: 0x8
    // Offset: 0x38
    ::StringW currentTextField;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single buttonFadeTime
    // Size: 0x4
    // Offset: 0x40
    float buttonFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: buttonFadeTime and: offlineTextInitialString
    char __padding4[0x4] = {};
    // public System.String offlineTextInitialString
    // Size: 0x8
    // Offset: 0x48
    ::StringW offlineTextInitialString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.GorillaText screenText
    // Size: 0x8
    // Offset: 0x50
    ::GorillaNetworking::GorillaText* screenText;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaText*) == 0x8);
    // public GorillaNetworking.GorillaText functionSelectText
    // Size: 0x8
    // Offset: 0x58
    ::GorillaNetworking::GorillaText* functionSelectText;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaText*) == 0x8);
    // public GorillaNetworking.GorillaText wallScreenText
    // Size: 0x8
    // Offset: 0x60
    ::GorillaNetworking::GorillaText* wallScreenText;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaText*) == 0x8);
    // public UnityEngine.UI.Text offlineVRRigNametagText
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UI::Text* offlineVRRigNametagText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.String versionMismatch
    // Size: 0x8
    // Offset: 0x70
    ::StringW versionMismatch;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String unableToConnect
    // Size: 0x8
    // Offset: 0x78
    ::StringW unableToConnect;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Material wrongVersionMaterial
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Material* wrongVersionMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer wallScreenRenderer
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::MeshRenderer* wallScreenRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer computerScreenRenderer
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::MeshRenderer* computerScreenRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public System.Int64 startupMillis
    // Size: 0x8
    // Offset: 0x98
    int64_t startupMillis;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.DateTime startupTime
    // Size: 0x8
    // Offset: 0xA0
    ::System::DateTime startupTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public WatchableStringSO currentGameMode
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::WatchableStringSO* currentGameMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WatchableStringSO*) == 0x8);
    // public WatchableStringSO currentGameModeText
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::WatchableStringSO* currentGameModeText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::WatchableStringSO*) == 0x8);
    // public System.Int32 includeUpdatedServerSynchTest
    // Size: 0x4
    // Offset: 0xB8
    int includeUpdatedServerSynchTest;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: includeUpdatedServerSynchTest and: networkController
    char __padding19[0x4] = {};
    // public GorillaNetworking.PhotonNetworkController networkController
    // Size: 0x8
    // Offset: 0xC0
    ::GorillaNetworking::PhotonNetworkController* networkController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController*) == 0x8);
    // public System.Single updateCooldown
    // Size: 0x4
    // Offset: 0xC8
    float updateCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastUpdateTime
    // Size: 0x4
    // Offset: 0xCC
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isConnectedToMaster
    // Size: 0x1
    // Offset: 0xD0
    bool isConnectedToMaster;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean internetFailure
    // Size: 0x1
    // Offset: 0xD1
    bool internetFailure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: internetFailure and: allowedMapsToJoin
    char __padding24[0x6] = {};
    // public System.String[] allowedMapsToJoin
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::StringW> allowedMapsToJoin;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean stateUpdated
    // Size: 0x1
    // Offset: 0xE0
    bool stateUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean screenChanged
    // Size: 0x1
    // Offset: 0xE1
    bool screenChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean initialized
    // Size: 0x1
    // Offset: 0xE2
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: OrderList
    char __padding28[0x5] = {};
    // public System.Collections.Generic.List`1<GorillaNetworking.GorillaComputer/StateOrderItem> OrderList
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::GorillaNetworking::GorillaComputer::StateOrderItem*>* OrderList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaNetworking::GorillaComputer::StateOrderItem*>*) == 0x8);
    // public System.String Pointer
    // Size: 0x8
    // Offset: 0xF0
    ::StringW Pointer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 highestCharacterCount
    // Size: 0x4
    // Offset: 0xF8
    int highestCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: highestCharacterCount and: FunctionNames
    char __padding31[0x4] = {};
    // public System.Collections.Generic.List`1<System.String> FunctionNames
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::StringW>* FunctionNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Int32 FunctionsCount
    // Size: 0x4
    // Offset: 0x108
    int FunctionsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: FunctionsCount and: roomToJoin
    char __padding33[0x4] = {};
    // public System.String roomToJoin
    // Size: 0x8
    // Offset: 0x110
    ::StringW roomToJoin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean roomFull
    // Size: 0x1
    // Offset: 0x118
    bool roomFull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean roomNotAllowed
    // Size: 0x1
    // Offset: 0x119
    bool roomNotAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: roomNotAllowed and: pttType
    char __padding36[0x6] = {};
    // public System.String pttType
    // Size: 0x8
    // Offset: 0x120
    ::StringW pttType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String autoMuteType
    // Size: 0x8
    // Offset: 0x128
    ::StringW autoMuteType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String currentQueue
    // Size: 0x8
    // Offset: 0x130
    ::StringW currentQueue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean allowedInCompetitive
    // Size: 0x1
    // Offset: 0x138
    bool allowedInCompetitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowedInCompetitive and: groupMapJoin
    char __padding40[0x7] = {};
    // public System.String groupMapJoin
    // Size: 0x8
    // Offset: 0x140
    ::StringW groupMapJoin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 groupMapJoinIndex
    // Size: 0x4
    // Offset: 0x148
    int groupMapJoinIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: groupMapJoinIndex and: friendJoinCollider
    char __padding42[0x4] = {};
    // public GorillaFriendCollider friendJoinCollider
    // Size: 0x8
    // Offset: 0x150
    ::GlobalNamespace::GorillaFriendCollider* friendJoinCollider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaFriendCollider*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger caveMapTrigger
    // Size: 0x8
    // Offset: 0x158
    ::GorillaNetworking::GorillaNetworkJoinTrigger* caveMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger forestMapTrigger
    // Size: 0x8
    // Offset: 0x160
    ::GorillaNetworking::GorillaNetworkJoinTrigger* forestMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger canyonMapTrigger
    // Size: 0x8
    // Offset: 0x168
    ::GorillaNetworking::GorillaNetworkJoinTrigger* canyonMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger cityMapTrigger
    // Size: 0x8
    // Offset: 0x170
    ::GorillaNetworking::GorillaNetworkJoinTrigger* cityMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger mountainMapTrigger
    // Size: 0x8
    // Offset: 0x178
    ::GorillaNetworking::GorillaNetworkJoinTrigger* mountainMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger skyjungleMapTrigger
    // Size: 0x8
    // Offset: 0x180
    ::GorillaNetworking::GorillaNetworkJoinTrigger* skyjungleMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger basementMapTrigger
    // Size: 0x8
    // Offset: 0x188
    ::GorillaNetworking::GorillaNetworkJoinTrigger* basementMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger beachMapTrigger
    // Size: 0x8
    // Offset: 0x190
    ::GorillaNetworking::GorillaNetworkJoinTrigger* beachMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger rotatingMapTrigger
    // Size: 0x8
    // Offset: 0x198
    ::GorillaNetworking::GorillaNetworkJoinTrigger* rotatingMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public GorillaNetworking.GorillaNetworkJoinTrigger metroMapTrigger
    // Size: 0x8
    // Offset: 0x1A0
    ::GorillaNetworking::GorillaNetworkJoinTrigger* metroMapTrigger;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaNetworkJoinTrigger*) == 0x8);
    // public System.String voiceChatOn
    // Size: 0x8
    // Offset: 0x1A8
    ::StringW voiceChatOn;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public ModeSelectButton[] modeSelectButtons
    // Size: 0x8
    // Offset: 0x1B0
    ::ArrayW<::GlobalNamespace::ModeSelectButton*> modeSelectButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ModeSelectButton*>) == 0x8);
    // public System.String version
    // Size: 0x8
    // Offset: 0x1B8
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String buildDate
    // Size: 0x8
    // Offset: 0x1C0
    ::StringW buildDate;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String buildCode
    // Size: 0x8
    // Offset: 0x1C8
    ::StringW buildCode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean disableParticles
    // Size: 0x1
    // Offset: 0x1D0
    bool disableParticles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableParticles and: instrumentVolume
    char __padding59[0x3] = {};
    // public System.Single instrumentVolume
    // Size: 0x4
    // Offset: 0x1D4
    float instrumentVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public GorillaNetworking.CreditsView creditsView
    // Size: 0x8
    // Offset: 0x1D8
    ::GorillaNetworking::CreditsView* creditsView;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CreditsView*) == 0x8);
    // public System.Boolean leftHanded
    // Size: 0x1
    // Offset: 0x1E0
    bool leftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftHanded and: savedName
    char __padding62[0x7] = {};
    // public System.String savedName
    // Size: 0x8
    // Offset: 0x1E8
    ::StringW savedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String currentName
    // Size: 0x8
    // Offset: 0x1F0
    ::StringW currentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.TextAsset exactOneWeekFile
    // Size: 0x8
    // Offset: 0x1F8
    ::UnityEngine::TextAsset* exactOneWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public UnityEngine.TextAsset anywhereOneWeekFile
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::TextAsset* anywhereOneWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public UnityEngine.TextAsset anywhereTwoWeekFile
    // Size: 0x8
    // Offset: 0x208
    ::UnityEngine::TextAsset* anywhereTwoWeekFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // private System.Collections.Generic.Stack`1<GorillaNetworking.GorillaComputer/ComputerState> stateStack
    // Size: 0x8
    // Offset: 0x210
    ::System::Collections::Generic::Stack_1<::GorillaNetworking::GorillaComputer::ComputerState>* stateStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::GorillaNetworking::GorillaComputer::ComputerState>*) == 0x8);
    // private GorillaNetworking.GorillaComputer/ComputerState currentComputerState
    // Size: 0x4
    // Offset: 0x218
    ::GorillaNetworking::GorillaComputer::ComputerState currentComputerState;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaComputer::ComputerState) == 0x4);
    // private GorillaNetworking.GorillaComputer/ComputerState previousComputerState
    // Size: 0x4
    // Offset: 0x21C
    ::GorillaNetworking::GorillaComputer::ComputerState previousComputerState;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::GorillaComputer::ComputerState) == 0x4);
    // private System.Int32 currentStateIndex
    // Size: 0x4
    // Offset: 0x220
    int currentStateIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 usersBanned
    // Size: 0x4
    // Offset: 0x224
    int usersBanned;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single redValue
    // Size: 0x4
    // Offset: 0x228
    float redValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: redValue and: redText
    char __padding73[0x4] = {};
    // private System.String redText
    // Size: 0x8
    // Offset: 0x230
    ::StringW redText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single blueValue
    // Size: 0x4
    // Offset: 0x238
    float blueValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blueValue and: blueText
    char __padding75[0x4] = {};
    // private System.String blueText
    // Size: 0x8
    // Offset: 0x240
    ::StringW blueText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single greenValue
    // Size: 0x4
    // Offset: 0x248
    float greenValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: greenValue and: greenText
    char __padding77[0x4] = {};
    // private System.String greenText
    // Size: 0x8
    // Offset: 0x250
    ::StringW greenText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 colorCursorLine
    // Size: 0x4
    // Offset: 0x258
    int colorCursorLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 turnValue
    // Size: 0x4
    // Offset: 0x25C
    int turnValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String turnType
    // Size: 0x8
    // Offset: 0x260
    ::StringW turnType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn gorillaTurn
    // Size: 0x8
    // Offset: 0x268
    ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn* gorillaTurn;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*) == 0x8);
    // private System.String warningConfirmationInputString
    // Size: 0x8
    // Offset: 0x270
    ::StringW warningConfirmationInputString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean displaySupport
    // Size: 0x1
    // Offset: 0x278
    bool displaySupport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: displaySupport and: exactOneWeek
    char __padding84[0x7] = {};
    // private System.String[] exactOneWeek
    // Size: 0x8
    // Offset: 0x280
    ::ArrayW<::StringW> exactOneWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] anywhereOneWeek
    // Size: 0x8
    // Offset: 0x288
    ::ArrayW<::StringW> anywhereOneWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] anywhereTwoWeek
    // Size: 0x8
    // Offset: 0x290
    ::ArrayW<::StringW> anywhereTwoWeek;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.WaitForSeconds waitOneSecond
    // Size: 0x8
    // Offset: 0x298
    ::UnityEngine::WaitForSeconds* waitOneSecond;
    // Field size check
    static_assert(sizeof(::UnityEngine::WaitForSeconds*) == 0x8);
    // private UnityEngine.Coroutine LoadingRoutine
    // Size: 0x8
    // Offset: 0x2A0
    ::UnityEngine::Coroutine* LoadingRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // public System.Action OnServerTimeUpdated
    // Size: 0x8
    // Offset: 0x2A8
    ::System::Action* OnServerTimeUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IMatchmakingCallbacks
    operator ::Photon::Realtime::IMatchmakingCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IMatchmakingCallbacks*>(this);
    }
    // Get static field: static public GorillaNetworking.GorillaComputer instance
    static ::GorillaNetworking::GorillaComputer* _get_instance();
    // Set static field: static public GorillaNetworking.GorillaComputer instance
    static void _set_instance(::GorillaNetworking::GorillaComputer* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // Get instance field reference: public System.Boolean tryGetTimeAgain
    [[deprecated("Use field access instead!")]] bool& dyn_tryGetTimeAgain();
    // Get instance field reference: public UnityEngine.Material unpressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_unpressedMaterial();
    // Get instance field reference: public UnityEngine.Material pressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pressedMaterial();
    // Get instance field reference: public System.String currentTextField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentTextField();
    // Get instance field reference: public System.Single buttonFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_buttonFadeTime();
    // Get instance field reference: public System.String offlineTextInitialString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_offlineTextInitialString();
    // Get instance field reference: public GorillaNetworking.GorillaText screenText
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaText*& dyn_screenText();
    // Get instance field reference: public GorillaNetworking.GorillaText functionSelectText
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaText*& dyn_functionSelectText();
    // Get instance field reference: public GorillaNetworking.GorillaText wallScreenText
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaText*& dyn_wallScreenText();
    // Get instance field reference: public UnityEngine.UI.Text offlineVRRigNametagText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_offlineVRRigNametagText();
    // Get instance field reference: public System.String versionMismatch
    [[deprecated("Use field access instead!")]] ::StringW& dyn_versionMismatch();
    // Get instance field reference: public System.String unableToConnect
    [[deprecated("Use field access instead!")]] ::StringW& dyn_unableToConnect();
    // Get instance field reference: public UnityEngine.Material wrongVersionMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_wrongVersionMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer wallScreenRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_wallScreenRenderer();
    // Get instance field reference: public UnityEngine.MeshRenderer computerScreenRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_computerScreenRenderer();
    // Get instance field reference: public System.Int64 startupMillis
    [[deprecated("Use field access instead!")]] int64_t& dyn_startupMillis();
    // Get instance field reference: public System.DateTime startupTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_startupTime();
    // Get instance field reference: public WatchableStringSO currentGameMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WatchableStringSO*& dyn_currentGameMode();
    // Get instance field reference: public WatchableStringSO currentGameModeText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::WatchableStringSO*& dyn_currentGameModeText();
    // Get instance field reference: public System.Int32 includeUpdatedServerSynchTest
    [[deprecated("Use field access instead!")]] int& dyn_includeUpdatedServerSynchTest();
    // Get instance field reference: public GorillaNetworking.PhotonNetworkController networkController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& dyn_networkController();
    // Get instance field reference: public System.Single updateCooldown
    [[deprecated("Use field access instead!")]] float& dyn_updateCooldown();
    // Get instance field reference: public System.Single lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_lastUpdateTime();
    // Get instance field reference: public System.Boolean isConnectedToMaster
    [[deprecated("Use field access instead!")]] bool& dyn_isConnectedToMaster();
    // Get instance field reference: public System.Boolean internetFailure
    [[deprecated("Use field access instead!")]] bool& dyn_internetFailure();
    // Get instance field reference: public System.String[] allowedMapsToJoin
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_allowedMapsToJoin();
    // Get instance field reference: public System.Boolean stateUpdated
    [[deprecated("Use field access instead!")]] bool& dyn_stateUpdated();
    // Get instance field reference: public System.Boolean screenChanged
    [[deprecated("Use field access instead!")]] bool& dyn_screenChanged();
    // Get instance field reference: public System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaNetworking.GorillaComputer/StateOrderItem> OrderList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaNetworking::GorillaComputer::StateOrderItem*>*& dyn_OrderList();
    // Get instance field reference: public System.String Pointer
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Pointer();
    // Get instance field reference: public System.Int32 highestCharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_highestCharacterCount();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> FunctionNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_FunctionNames();
    // Get instance field reference: public System.Int32 FunctionsCount
    [[deprecated("Use field access instead!")]] int& dyn_FunctionsCount();
    // Get instance field reference: public System.String roomToJoin
    [[deprecated("Use field access instead!")]] ::StringW& dyn_roomToJoin();
    // Get instance field reference: public System.Boolean roomFull
    [[deprecated("Use field access instead!")]] bool& dyn_roomFull();
    // Get instance field reference: public System.Boolean roomNotAllowed
    [[deprecated("Use field access instead!")]] bool& dyn_roomNotAllowed();
    // Get instance field reference: public System.String pttType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_pttType();
    // Get instance field reference: public System.String autoMuteType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_autoMuteType();
    // Get instance field reference: public System.String currentQueue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentQueue();
    // Get instance field reference: public System.Boolean allowedInCompetitive
    [[deprecated("Use field access instead!")]] bool& dyn_allowedInCompetitive();
    // Get instance field reference: public System.String groupMapJoin
    [[deprecated("Use field access instead!")]] ::StringW& dyn_groupMapJoin();
    // Get instance field reference: public System.Int32 groupMapJoinIndex
    [[deprecated("Use field access instead!")]] int& dyn_groupMapJoinIndex();
    // Get instance field reference: public GorillaFriendCollider friendJoinCollider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaFriendCollider*& dyn_friendJoinCollider();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger caveMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_caveMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger forestMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_forestMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger canyonMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_canyonMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger cityMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_cityMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger mountainMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_mountainMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger skyjungleMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_skyjungleMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger basementMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_basementMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger beachMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_beachMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger rotatingMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_rotatingMapTrigger();
    // Get instance field reference: public GorillaNetworking.GorillaNetworkJoinTrigger metroMapTrigger
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& dyn_metroMapTrigger();
    // Get instance field reference: public System.String voiceChatOn
    [[deprecated("Use field access instead!")]] ::StringW& dyn_voiceChatOn();
    // Get instance field reference: public ModeSelectButton[] modeSelectButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ModeSelectButton*>& dyn_modeSelectButtons();
    // Get instance field reference: public System.String version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_version();
    // Get instance field reference: public System.String buildDate
    [[deprecated("Use field access instead!")]] ::StringW& dyn_buildDate();
    // Get instance field reference: public System.String buildCode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_buildCode();
    // Get instance field reference: public System.Boolean disableParticles
    [[deprecated("Use field access instead!")]] bool& dyn_disableParticles();
    // Get instance field reference: public System.Single instrumentVolume
    [[deprecated("Use field access instead!")]] float& dyn_instrumentVolume();
    // Get instance field reference: public GorillaNetworking.CreditsView creditsView
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CreditsView*& dyn_creditsView();
    // Get instance field reference: public System.Boolean leftHanded
    [[deprecated("Use field access instead!")]] bool& dyn_leftHanded();
    // Get instance field reference: public System.String savedName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_savedName();
    // Get instance field reference: public System.String currentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentName();
    // Get instance field reference: public UnityEngine.TextAsset exactOneWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_exactOneWeekFile();
    // Get instance field reference: public UnityEngine.TextAsset anywhereOneWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_anywhereOneWeekFile();
    // Get instance field reference: public UnityEngine.TextAsset anywhereTwoWeekFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_anywhereTwoWeekFile();
    // Get instance field reference: private System.Collections.Generic.Stack`1<GorillaNetworking.GorillaComputer/ComputerState> stateStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::GorillaNetworking::GorillaComputer::ComputerState>*& dyn_stateStack();
    // Get instance field reference: private GorillaNetworking.GorillaComputer/ComputerState currentComputerState
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaComputer::ComputerState& dyn_currentComputerState();
    // Get instance field reference: private GorillaNetworking.GorillaComputer/ComputerState previousComputerState
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaComputer::ComputerState& dyn_previousComputerState();
    // Get instance field reference: private System.Int32 currentStateIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentStateIndex();
    // Get instance field reference: private System.Int32 usersBanned
    [[deprecated("Use field access instead!")]] int& dyn_usersBanned();
    // Get instance field reference: private System.Single redValue
    [[deprecated("Use field access instead!")]] float& dyn_redValue();
    // Get instance field reference: private System.String redText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_redText();
    // Get instance field reference: private System.Single blueValue
    [[deprecated("Use field access instead!")]] float& dyn_blueValue();
    // Get instance field reference: private System.String blueText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_blueText();
    // Get instance field reference: private System.Single greenValue
    [[deprecated("Use field access instead!")]] float& dyn_greenValue();
    // Get instance field reference: private System.String greenText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_greenText();
    // Get instance field reference: private System.Int32 colorCursorLine
    [[deprecated("Use field access instead!")]] int& dyn_colorCursorLine();
    // Get instance field reference: private System.Int32 turnValue
    [[deprecated("Use field access instead!")]] int& dyn_turnValue();
    // Get instance field reference: private System.String turnType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_turnType();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn gorillaTurn
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*& dyn_gorillaTurn();
    // Get instance field reference: private System.String warningConfirmationInputString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_warningConfirmationInputString();
    // Get instance field reference: private System.Boolean displaySupport
    [[deprecated("Use field access instead!")]] bool& dyn_displaySupport();
    // Get instance field reference: private System.String[] exactOneWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_exactOneWeek();
    // Get instance field reference: private System.String[] anywhereOneWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_anywhereOneWeek();
    // Get instance field reference: private System.String[] anywhereTwoWeek
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_anywhereTwoWeek();
    // Get instance field reference: private UnityEngine.WaitForSeconds waitOneSecond
    [[deprecated("Use field access instead!")]] ::UnityEngine::WaitForSeconds*& dyn_waitOneSecond();
    // Get instance field reference: private UnityEngine.Coroutine LoadingRoutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_LoadingRoutine();
    // Get instance field reference: public System.Action OnServerTimeUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnServerTimeUpdated();
    // public System.DateTime GetServerTime()
    // Offset: 0x284849C
    ::System::DateTime GetServerTime();
    // public GorillaNetworking.GorillaComputer/ComputerState get_currentState()
    // Offset: 0x2848548
    ::GorillaNetworking::GorillaComputer::ComputerState get_currentState();
    // private System.Void Awake()
    // Offset: 0x28485A8
    void Awake();
    // private System.Void Start()
    // Offset: 0x28486DC
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x2848A6C
    void OnEnable();
    // protected System.Void OnDestroy()
    // Offset: 0x2848B70
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x2848CFC
    void Update();
    // private System.Void Initialise()
    // Offset: 0x2848768
    void Initialise();
    // private System.Void InitialiseRoomScreens()
    // Offset: 0x2849148
    void InitialiseRoomScreens();
    // private System.Void InitialiseStrings()
    // Offset: 0x2849218
    void InitialiseStrings();
    // private System.Void InitialiseAllRoomStates()
    // Offset: 0x28492B4
    void InitialiseAllRoomStates();
    // private System.Void InitializeStartupState()
    // Offset: 0x2849A04
    void InitializeStartupState();
    // private System.Void InitializeRoomState()
    // Offset: 0x2849888
    void InitializeRoomState();
    // private System.Void InitializeColorState()
    // Offset: 0x284A090
    void InitializeColorState();
    // private System.Void InitializeNameState()
    // Offset: 0x28494D8
    void InitializeNameState();
    // private System.Void InitializeTurnState()
    // Offset: 0x284988C
    void InitializeTurnState();
    // private System.Void InitializeMicState()
    // Offset: 0x2849B18
    void InitializeMicState();
    // private System.Void InitializeAutoMuteState()
    // Offset: 0x2849CC4
    void InitializeAutoMuteState();
    // private System.Void InitializeQueueState()
    // Offset: 0x2849A08
    void InitializeQueueState();
    // private System.Void InitializeGroupState()
    // Offset: 0x2849B90
    void InitializeGroupState();
    // private System.Void InitializeVoiceState()
    // Offset: 0x2849C4C
    void InitializeVoiceState();
    // private System.Void InitializeGameMode()
    // Offset: 0x2849D84
    void InitializeGameMode();
    // private System.Void InitializeCreditsState()
    // Offset: 0x284A018
    void InitializeCreditsState();
    // private System.Void InitializeTimeState()
    // Offset: 0x284A01C
    void InitializeTimeState();
    // private System.Void InitializeSupportState()
    // Offset: 0x284A088
    void InitializeSupportState();
    // private System.Void InitializeVisualsState()
    // Offset: 0x2849F08
    void InitializeVisualsState();
    // private System.Boolean CheckInternetConnection()
    // Offset: 0x2848DB8
    bool CheckInternetConnection();
    // public System.Void OnConnectedToMasterStuff()
    // Offset: 0x284A2D0
    void OnConnectedToMasterStuff();
    // private System.Void OnReturnCurrentVersion(PlayFab.CloudScriptModels.ExecuteFunctionResult result)
    // Offset: 0x284AF50
    void OnReturnCurrentVersion(::PlayFab::CloudScriptModels::ExecuteFunctionResult* result);
    // public System.Void SaveModAccountData()
    // Offset: 0x284A9F4
    void SaveModAccountData();
    // public System.Void PressButton(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284B614
    void PressButton(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // public System.Void OnModeSelectButtonPress(System.String gameMode, System.Boolean leftHand)
    // Offset: 0x284A21C
    void OnModeSelectButtonPress(::StringW gameMode, bool leftHand);
    // private GorillaNetworking.GorillaNetworkJoinTrigger GetSelectedMapJoinTrigger()
    // Offset: 0x284C998
    ::GorillaNetworking::GorillaNetworkJoinTrigger* GetSelectedMapJoinTrigger();
    // public System.Void OnGroupJoinButtonPress(System.Int32 mapJoinIndex, GorillaFriendCollider chosenFriendJoinCollider)
    // Offset: 0x284CCFC
    void OnGroupJoinButtonPress(int mapJoinIndex, ::GlobalNamespace::GorillaFriendCollider* chosenFriendJoinCollider);
    // public System.Void CompQueueUnlockButtonPress()
    // Offset: 0x284D4E4
    void CompQueueUnlockButtonPress();
    // private System.Void SwitchState(GorillaNetworking.GorillaComputer/ComputerState newState, System.Boolean clearStack)
    // Offset: 0x2849420
    void SwitchState(::GorillaNetworking::GorillaComputer::ComputerState newState, bool clearStack);
    // private System.Void PopState()
    // Offset: 0x284D540
    void PopState();
    // private System.Void SwitchToWarningState()
    // Offset: 0x284D604
    void SwitchToWarningState();
    // private System.Void SwitchToLoadingState()
    // Offset: 0x284D668
    void SwitchToLoadingState();
    // private System.Void ProcessStartupState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284B778
    void ProcessStartupState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessColorState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284B850
    void ProcessColorState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // public System.Void ProcessNameState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284BEA8
    void ProcessNameState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessRoomState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284BC0C
    void ProcessRoomState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void DisconnectAfterDelay(System.Single seconds)
    // Offset: 0x284D710
    void DisconnectAfterDelay(float seconds);
    // private System.Void ProcessTurnState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C000
    void ProcessTurnState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessMicState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C120
    void ProcessMicState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessQueueState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C1F4
    void ProcessQueueState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessGroupState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C2CC
    void ProcessGroupState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessVoiceState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C484
    void ProcessVoiceState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessAutoMuteState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C560
    void ProcessAutoMuteState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessVisualsState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C6EC
    void ProcessVisualsState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessCreditsState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C690
    void ProcessCreditsState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessSupportState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C6D8
    void ProcessSupportState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // private System.Void ProcessNameWarningState(GorillaNetworking.GorillaKeyboardBindings buttonPressed)
    // Offset: 0x284C870
    void ProcessNameWarningState(::GorillaNetworking::GorillaKeyboardBindings buttonPressed);
    // public System.Void UpdateScreen()
    // Offset: 0x2848F8C
    void UpdateScreen();
    // private System.Void LoadingScreen()
    // Offset: 0x284F01C
    void LoadingScreen();
    // private System.Void NameWarningScreen()
    // Offset: 0x284EF34
    void NameWarningScreen();
    // private System.Void SupportScreen()
    // Offset: 0x284EB4C
    void SupportScreen();
    // private System.Void TimeScreen()
    // Offset: 0x284E958
    void TimeScreen();
    // private System.Void CreditsScreen()
    // Offset: 0x284E924
    void CreditsScreen();
    // private System.Void VisualsScreen()
    // Offset: 0x284E7D8
    void VisualsScreen();
    // private System.Void VoiceScreen()
    // Offset: 0x284E670
    void VoiceScreen();
    // private System.Void AutomuteScreen()
    // Offset: 0x284E774
    void AutomuteScreen();
    // private System.Void GroupScreen()
    // Offset: 0x284E4B0
    void GroupScreen();
    // private System.Void MicScreen()
    // Offset: 0x284E42C
    void MicScreen();
    // private System.Void QueueScreen()
    // Offset: 0x284E3A8
    void QueueScreen();
    // private System.Void TurnScreen()
    // Offset: 0x284E30C
    void TurnScreen();
    // private System.Void NameScreen()
    // Offset: 0x284E26C
    void NameScreen();
    // private System.Void StartupScreen()
    // Offset: 0x284D890
    void StartupScreen();
    // private System.Void ColourScreen()
    // Offset: 0x284DAD8
    void ColourScreen();
    // private System.Void RoomScreen()
    // Offset: 0x284DD9C
    void RoomScreen();
    // private System.Void UpdateGameModeText()
    // Offset: 0x284F094
    void UpdateGameModeText();
    // private System.Void UpdateFunctionScreen()
    // Offset: 0x284D854
    void UpdateFunctionScreen();
    // private System.Void CheckAutoBanListForRoomName(System.String nameToCheck)
    // Offset: 0x284D7B8
    void CheckAutoBanListForRoomName(::StringW nameToCheck);
    // private System.Void CheckAutoBanListForPlayerName(System.String nameToCheck)
    // Offset: 0x284D674
    void CheckAutoBanListForPlayerName(::StringW nameToCheck);
    // private System.Void AutoBanPlayfabFunction(System.String nameToCheck, System.Boolean forRoom, System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> resultCallback)
    // Offset: 0x284F40C
    void AutoBanPlayfabFunction(::StringW nameToCheck, bool forRoom, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* resultCallback);
    // private System.Void OnRoomNameChecked(PlayFab.CloudScriptModels.ExecuteFunctionResult result)
    // Offset: 0x284F7B8
    void OnRoomNameChecked(::PlayFab::CloudScriptModels::ExecuteFunctionResult* result);
    // private System.Void OnPlayerNameChecked(PlayFab.CloudScriptModels.ExecuteFunctionResult result)
    // Offset: 0x284FAB0
    void OnPlayerNameChecked(::PlayFab::CloudScriptModels::ExecuteFunctionResult* result);
    // private System.Void OnErrorNameCheck(PlayFab.PlayFabError error)
    // Offset: 0x284FD1C
    void OnErrorNameCheck(::PlayFab::PlayFabError* error);
    // public System.Boolean CheckAutoBanListForName(System.String nameToCheck)
    // Offset: 0x2850508
    bool CheckAutoBanListForName(::StringW nameToCheck);
    // public System.Void UpdateFailureText(System.String failMessage)
    // Offset: 0x2848E14
    void UpdateFailureText(::StringW failMessage);
    // private System.Void RestoreFromFailureState()
    // Offset: 0x2848EDC
    void RestoreFromFailureState();
    // public System.Void GeneralFailureMessage(System.String failMessage)
    // Offset: 0x284B1E8
    void GeneralFailureMessage(::StringW failMessage);
    // static private System.Void OnErrorShared(PlayFab.PlayFabError error)
    // Offset: 0x284FD50
    static void OnErrorShared(::PlayFab::PlayFabError* error);
    // private System.Void DecreaseState()
    // Offset: 0x284B79C
    void DecreaseState();
    // private System.Void IncreaseState()
    // Offset: 0x284B7F4
    void IncreaseState();
    // public GorillaNetworking.GorillaComputer/ComputerState GetState(System.Int32 index)
    // Offset: 0x284D338
    ::GorillaNetworking::GorillaComputer::ComputerState GetState(int index);
    // public System.Int32 GetStateIndex(GorillaNetworking.GorillaComputer/ComputerState state)
    // Offset: 0x2850DB8
    int GetStateIndex(::GorillaNetworking::GorillaComputer::ComputerState state);
    // public System.String GetOrderListForScreen(GorillaNetworking.GorillaComputer/ComputerState currentState)
    // Offset: 0x284F2D4
    ::StringW GetOrderListForScreen(::GorillaNetworking::GorillaComputer::ComputerState currentState);
    // private System.Void GetCurrentTime()
    // Offset: 0x284A8BC
    void GetCurrentTime();
    // private System.Void OnGetTimeSuccess(PlayFab.ClientModels.GetTimeResult result)
    // Offset: 0x2850E98
    void OnGetTimeSuccess(::PlayFab::ClientModels::GetTimeResult* result);
    // private System.Void OnGetTimeFailure(PlayFab.PlayFabError error)
    // Offset: 0x2850FE8
    void OnGetTimeFailure(::PlayFab::PlayFabError* error);
    // private System.Void PlayerCountChangedCallback(System.Int32 playerID)
    // Offset: 0x2851198
    void PlayerCountChangedCallback(int playerID);
    // public System.Void SetNameBySafety(System.Boolean isSafety)
    // Offset: 0x285119C
    void SetNameBySafety(bool isSafety);
    // public System.Void SetComputerSettingsBySafety(System.Boolean isSafety)
    // Offset: 0x284ABF0
    void SetComputerSettingsBySafety(bool isSafety);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(System.Collections.Generic.List`1<Photon.Realtime.FriendInfo> friendList)
    // Offset: 0x285154C
    void Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>* friendList);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
    // Offset: 0x2851550
    void Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom();
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x2851554
    void Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed(int16_t returnCode, ::StringW message);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
    // Offset: 0x2851558
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom();
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x285155C
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed(int16_t returnCode, ::StringW message);
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
    // Offset: 0x2851560
    void Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom();
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom()
    // Offset: 0x2851564
    void Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom();
    // private System.Void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x2851568
    void Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed(int16_t returnCode, ::StringW message);
    // public System.Void .ctor()
    // Offset: 0x2851580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaComputer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaComputer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaComputer*, creationType>()));
    }
    // private System.Collections.IEnumerator <Start>g__Start_Local|98_0()
    // Offset: 0x2848A00
    ::System::Collections::IEnumerator* $Start$g__Start_Local_98_0();
    // private System.Collections.IEnumerator <LoadingScreen>g__LoadingScreenLocal|150_0()
    // Offset: 0x284F268
    ::System::Collections::IEnumerator* $LoadingScreen$g__LoadingScreenLocal_150_0();
    // private System.Void <SetComputerSettingsBySafety>b__191_0(GorillaNetworking.GorillaComputer/StateOrderItem s)
    // Offset: 0x2851E74
    void $SetComputerSettingsBySafety$b__191_0(::GorillaNetworking::GorillaComputer::StateOrderItem* s);
  }; // GorillaNetworking.GorillaComputer
  #pragma pack(pop)
  static check_size<sizeof(GorillaComputer), 680 + sizeof(::System::Action*)> __GorillaNetworking_GorillaComputerSizeCheck;
  static_assert(sizeof(GorillaComputer) == 0x2B0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaComputer::ComputerState, "GorillaNetworking", "GorillaComputer/ComputerState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetServerTime
// Il2CppName: GetServerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::GetServerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetServerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::get_currentState
// Il2CppName: get_currentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::GorillaComputer::ComputerState (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::get_currentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "get_currentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Initialise
// Il2CppName: Initialise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Initialise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Initialise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitialiseRoomScreens
// Il2CppName: InitialiseRoomScreens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitialiseRoomScreens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitialiseRoomScreens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitialiseStrings
// Il2CppName: InitialiseStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitialiseStrings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitialiseStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitialiseAllRoomStates
// Il2CppName: InitialiseAllRoomStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitialiseAllRoomStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitialiseAllRoomStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeStartupState
// Il2CppName: InitializeStartupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeStartupState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeStartupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeRoomState
// Il2CppName: InitializeRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeRoomState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeColorState
// Il2CppName: InitializeColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeColorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeNameState
// Il2CppName: InitializeNameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeNameState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeNameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeTurnState
// Il2CppName: InitializeTurnState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeTurnState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeTurnState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeMicState
// Il2CppName: InitializeMicState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeMicState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeMicState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeAutoMuteState
// Il2CppName: InitializeAutoMuteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeAutoMuteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeAutoMuteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeQueueState
// Il2CppName: InitializeQueueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeQueueState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeQueueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeGroupState
// Il2CppName: InitializeGroupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeGroupState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeGroupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeVoiceState
// Il2CppName: InitializeVoiceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeVoiceState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeVoiceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeGameMode
// Il2CppName: InitializeGameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeGameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeGameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeCreditsState
// Il2CppName: InitializeCreditsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeCreditsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeCreditsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeTimeState
// Il2CppName: InitializeTimeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeTimeState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeTimeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeSupportState
// Il2CppName: InitializeSupportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeSupportState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeSupportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::InitializeVisualsState
// Il2CppName: InitializeVisualsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::InitializeVisualsState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "InitializeVisualsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckInternetConnection
// Il2CppName: CheckInternetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::CheckInternetConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckInternetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnConnectedToMasterStuff
// Il2CppName: OnConnectedToMasterStuff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::OnConnectedToMasterStuff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnConnectedToMasterStuff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnReturnCurrentVersion
// Il2CppName: OnReturnCurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::CloudScriptModels::ExecuteFunctionResult*)>(&GorillaNetworking::GorillaComputer::OnReturnCurrentVersion)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnReturnCurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SaveModAccountData
// Il2CppName: SaveModAccountData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SaveModAccountData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SaveModAccountData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::PressButton
// Il2CppName: PressButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::PressButton)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "PressButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnModeSelectButtonPress
// Il2CppName: OnModeSelectButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW, bool)>(&GorillaNetworking::GorillaComputer::OnModeSelectButtonPress)> {
  static const MethodInfo* get() {
    static auto* gameMode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnModeSelectButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameMode, leftHand});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetSelectedMapJoinTrigger
// Il2CppName: GetSelectedMapJoinTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::GorillaNetworkJoinTrigger* (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::GetSelectedMapJoinTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetSelectedMapJoinTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGroupJoinButtonPress
// Il2CppName: OnGroupJoinButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int, ::GlobalNamespace::GorillaFriendCollider*)>(&GorillaNetworking::GorillaComputer::OnGroupJoinButtonPress)> {
  static const MethodInfo* get() {
    static auto* mapJoinIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* chosenFriendJoinCollider = &::il2cpp_utils::GetClassFromName("", "GorillaFriendCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGroupJoinButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mapJoinIndex, chosenFriendJoinCollider});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CompQueueUnlockButtonPress
// Il2CppName: CompQueueUnlockButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::CompQueueUnlockButtonPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CompQueueUnlockButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchState
// Il2CppName: SwitchState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaComputer::ComputerState, bool)>(&GorillaNetworking::GorillaComputer::SwitchState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaComputer/ComputerState")->byval_arg;
    static auto* clearStack = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, clearStack});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::PopState
// Il2CppName: PopState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::PopState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "PopState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToWarningState
// Il2CppName: SwitchToWarningState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToWarningState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToWarningState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SwitchToLoadingState
// Il2CppName: SwitchToLoadingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SwitchToLoadingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SwitchToLoadingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessStartupState
// Il2CppName: ProcessStartupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessStartupState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessStartupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessColorState
// Il2CppName: ProcessColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessColorState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessNameState
// Il2CppName: ProcessNameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessNameState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessNameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessRoomState
// Il2CppName: ProcessRoomState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessRoomState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessRoomState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::DisconnectAfterDelay
// Il2CppName: DisconnectAfterDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(float)>(&GorillaNetworking::GorillaComputer::DisconnectAfterDelay)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "DisconnectAfterDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessTurnState
// Il2CppName: ProcessTurnState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessTurnState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessTurnState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessMicState
// Il2CppName: ProcessMicState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessMicState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessMicState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessQueueState
// Il2CppName: ProcessQueueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessQueueState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessQueueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessGroupState
// Il2CppName: ProcessGroupState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessGroupState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessGroupState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessVoiceState
// Il2CppName: ProcessVoiceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessVoiceState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessVoiceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessAutoMuteState
// Il2CppName: ProcessAutoMuteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessAutoMuteState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessAutoMuteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessVisualsState
// Il2CppName: ProcessVisualsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessVisualsState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessVisualsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessCreditsState
// Il2CppName: ProcessCreditsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessCreditsState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessCreditsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessSupportState
// Il2CppName: ProcessSupportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessSupportState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessSupportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ProcessNameWarningState
// Il2CppName: ProcessNameWarningState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaKeyboardBindings)>(&GorillaNetworking::GorillaComputer::ProcessNameWarningState)> {
  static const MethodInfo* get() {
    static auto* buttonPressed = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaKeyboardBindings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ProcessNameWarningState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonPressed});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateScreen
// Il2CppName: UpdateScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::UpdateScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::LoadingScreen
// Il2CppName: LoadingScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::LoadingScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "LoadingScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::NameWarningScreen
// Il2CppName: NameWarningScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::NameWarningScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "NameWarningScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SupportScreen
// Il2CppName: SupportScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::SupportScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SupportScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::TimeScreen
// Il2CppName: TimeScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::TimeScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "TimeScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CreditsScreen
// Il2CppName: CreditsScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::CreditsScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CreditsScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::VisualsScreen
// Il2CppName: VisualsScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::VisualsScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "VisualsScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::VoiceScreen
// Il2CppName: VoiceScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::VoiceScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "VoiceScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::AutomuteScreen
// Il2CppName: AutomuteScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::AutomuteScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "AutomuteScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GroupScreen
// Il2CppName: GroupScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::GroupScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GroupScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::MicScreen
// Il2CppName: MicScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::MicScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "MicScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::QueueScreen
// Il2CppName: QueueScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::QueueScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "QueueScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::TurnScreen
// Il2CppName: TurnScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::TurnScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "TurnScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::NameScreen
// Il2CppName: NameScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::NameScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "NameScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::StartupScreen
// Il2CppName: StartupScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::StartupScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "StartupScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::ColourScreen
// Il2CppName: ColourScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::ColourScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "ColourScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::RoomScreen
// Il2CppName: RoomScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::RoomScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "RoomScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateGameModeText
// Il2CppName: UpdateGameModeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::UpdateGameModeText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateGameModeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateFunctionScreen
// Il2CppName: UpdateFunctionScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::UpdateFunctionScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateFunctionScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckAutoBanListForRoomName
// Il2CppName: CheckAutoBanListForRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::CheckAutoBanListForRoomName)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckAutoBanListForRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckAutoBanListForPlayerName
// Il2CppName: CheckAutoBanListForPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::CheckAutoBanListForPlayerName)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckAutoBanListForPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::AutoBanPlayfabFunction
// Il2CppName: AutoBanPlayfabFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW, bool, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*)>(&GorillaNetworking::GorillaComputer::AutoBanPlayfabFunction)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forRoom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "AutoBanPlayfabFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck, forRoom, resultCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnRoomNameChecked
// Il2CppName: OnRoomNameChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::CloudScriptModels::ExecuteFunctionResult*)>(&GorillaNetworking::GorillaComputer::OnRoomNameChecked)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnRoomNameChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnPlayerNameChecked
// Il2CppName: OnPlayerNameChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::CloudScriptModels::ExecuteFunctionResult*)>(&GorillaNetworking::GorillaComputer::OnPlayerNameChecked)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnPlayerNameChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnErrorNameCheck
// Il2CppName: OnErrorNameCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::GorillaComputer::OnErrorNameCheck)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnErrorNameCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::CheckAutoBanListForName
// Il2CppName: CheckAutoBanListForName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::CheckAutoBanListForName)> {
  static const MethodInfo* get() {
    static auto* nameToCheck = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "CheckAutoBanListForName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameToCheck});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::UpdateFailureText
// Il2CppName: UpdateFailureText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::UpdateFailureText)> {
  static const MethodInfo* get() {
    static auto* failMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "UpdateFailureText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failMessage});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::RestoreFromFailureState
// Il2CppName: RestoreFromFailureState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::RestoreFromFailureState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "RestoreFromFailureState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GeneralFailureMessage
// Il2CppName: GeneralFailureMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::StringW)>(&GorillaNetworking::GorillaComputer::GeneralFailureMessage)> {
  static const MethodInfo* get() {
    static auto* failMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GeneralFailureMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failMessage});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnErrorShared
// Il2CppName: OnErrorShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::GorillaComputer::OnErrorShared)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnErrorShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::DecreaseState
// Il2CppName: DecreaseState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::DecreaseState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "DecreaseState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::IncreaseState
// Il2CppName: IncreaseState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::IncreaseState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "IncreaseState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaNetworking::GorillaComputer::ComputerState (GorillaNetworking::GorillaComputer::*)(int)>(&GorillaNetworking::GorillaComputer::GetState)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetStateIndex
// Il2CppName: GetStateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaComputer::ComputerState)>(&GorillaNetworking::GorillaComputer::GetStateIndex)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaComputer/ComputerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetStateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetOrderListForScreen
// Il2CppName: GetOrderListForScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaComputer::ComputerState)>(&GorillaNetworking::GorillaComputer::GetOrderListForScreen)> {
  static const MethodInfo* get() {
    static auto* currentState = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaComputer/ComputerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetOrderListForScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentState});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::GetCurrentTime
// Il2CppName: GetCurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::GetCurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "GetCurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGetTimeSuccess
// Il2CppName: OnGetTimeSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::ClientModels::GetTimeResult*)>(&GorillaNetworking::GorillaComputer::OnGetTimeSuccess)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetTimeResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGetTimeSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::OnGetTimeFailure
// Il2CppName: OnGetTimeFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::PlayFab::PlayFabError*)>(&GorillaNetworking::GorillaComputer::OnGetTimeFailure)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "OnGetTimeFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::PlayerCountChangedCallback
// Il2CppName: PlayerCountChangedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int)>(&GorillaNetworking::GorillaComputer::PlayerCountChangedCallback)> {
  static const MethodInfo* get() {
    static auto* playerID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "PlayerCountChangedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerID});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SetNameBySafety
// Il2CppName: SetNameBySafety
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(bool)>(&GorillaNetworking::GorillaComputer::SetNameBySafety)> {
  static const MethodInfo* get() {
    static auto* isSafety = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SetNameBySafety", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSafety});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::SetComputerSettingsBySafety
// Il2CppName: SetComputerSettingsBySafety
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(bool)>(&GorillaNetworking::GorillaComputer::SetComputerSettingsBySafety)> {
  static const MethodInfo* get() {
    static auto* isSafety = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "SetComputerSettingsBySafety", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSafety});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>*)>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate)> {
  static const MethodInfo* get() {
    static auto* friendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "FriendInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendList});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int16_t, ::StringW)>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int16_t, ::StringW)>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed
// Il2CppName: Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(int16_t, ::StringW)>(&GorillaNetworking::GorillaComputer::Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::$Start$g__Start_Local_98_0
// Il2CppName: <Start>g__Start_Local|98_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::$Start$g__Start_Local_98_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "<Start>g__Start_Local|98_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::$LoadingScreen$g__LoadingScreenLocal_150_0
// Il2CppName: <LoadingScreen>g__LoadingScreenLocal|150_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaNetworking::GorillaComputer::*)()>(&GorillaNetworking::GorillaComputer::$LoadingScreen$g__LoadingScreenLocal_150_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "<LoadingScreen>g__LoadingScreenLocal|150_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaComputer::$SetComputerSettingsBySafety$b__191_0
// Il2CppName: <SetComputerSettingsBySafety>b__191_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaComputer::*)(::GorillaNetworking::GorillaComputer::StateOrderItem*)>(&GorillaNetworking::GorillaComputer::$SetComputerSettingsBySafety$b__191_0)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GorillaComputer/StateOrderItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaComputer*), "<SetComputerSettingsBySafety>b__191_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
