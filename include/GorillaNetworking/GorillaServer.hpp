// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: TitleDataFeatureFlags
  class TitleDataFeatureFlags;
  // Forward declaring type: ReturnCurrentVersionRequest
  class ReturnCurrentVersionRequest;
  // Forward declaring type: BroadcastMyRoomRequest
  class BroadcastMyRoomRequest;
  // Forward declaring type: GetAcceptedAgreementsRequest
  class GetAcceptedAgreementsRequest;
  // Forward declaring type: SubmitAcceptedAgreementsRequest
  class SubmitAcceptedAgreementsRequest;
  // Forward declaring type: CheckForBadNameRequest
  class CheckForBadNameRequest;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: PlayFab::CloudScriptModels
namespace PlayFab::CloudScriptModels {
  // Forward declaring type: EntityKey
  class EntityKey;
  // Forward declaring type: ExecuteFunctionResult
  class ExecuteFunctionResult;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: ExecuteCloudScriptResult
  class ExecuteCloudScriptResult;
}
// Completed forward declares
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: GorillaServer
  class GorillaServer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaNetworking::GorillaServer);
DEFINE_IL2CPP_ARG_TYPE(::GorillaNetworking::GorillaServer*, "GorillaNetworking", "GorillaServer");
// Type namespace: GorillaNetworking
namespace GorillaNetworking {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworking.GorillaServer
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaServer : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::GorillaNetworking::GorillaServer::$$c
    class $$c;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass11_0
    class $$c__DisplayClass11_0;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass21_0_1<T>
    template<typename T>
    class $$c__DisplayClass21_0_1;
    // Nested type: ::GorillaNetworking::GorillaServer::$$c__DisplayClass9_0
    class $$c__DisplayClass9_0;
    public:
    // public System.String FeatureFlagsTitleDataKey
    // Size: 0x8
    // Offset: 0x20
    ::StringW FeatureFlagsTitleDataKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<System.String> DefaultDeployFeatureFlagsEnabled
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::StringW>* DefaultDeployFeatureFlagsEnabled;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private GorillaNetworking.TitleDataFeatureFlags featureFlags
    // Size: 0x8
    // Offset: 0x30
    ::GorillaNetworking::TitleDataFeatureFlags* featureFlags;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::TitleDataFeatureFlags*) == 0x8);
    // private System.Boolean debug
    // Size: 0x1
    // Offset: 0x38
    bool debug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Get static field: static public GorillaNetworking.GorillaServer Instance
    static ::GorillaNetworking::GorillaServer* _get_Instance();
    // Set static field: static public GorillaNetworking.GorillaServer Instance
    static void _set_Instance(::GorillaNetworking::GorillaServer* value);
    // Get instance field reference: public System.String FeatureFlagsTitleDataKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FeatureFlagsTitleDataKey();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> DefaultDeployFeatureFlagsEnabled
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_DefaultDeployFeatureFlagsEnabled();
    // Get instance field reference: private GorillaNetworking.TitleDataFeatureFlags featureFlags
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::TitleDataFeatureFlags*& dyn_featureFlags();
    // Get instance field reference: private System.Boolean debug
    [[deprecated("Use field access instead!")]] bool& dyn_debug();
    // private PlayFab.CloudScriptModels.EntityKey get_playerEntity()
    // Offset: 0x28545F8
    ::PlayFab::CloudScriptModels::EntityKey* get_playerEntity();
    // public System.Void Start()
    // Offset: 0x28546B8
    void Start();
    // private System.Void Awake()
    // Offset: 0x28547E8
    void Awake();
    // public System.Void ReturnCurrentVersion(GorillaNetworking.ReturnCurrentVersionRequest request, System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x284A52C
    void ReturnCurrentVersion(::GorillaNetworking::ReturnCurrentVersionRequest* request, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void ReturnMyOculusHash(System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x284B27C
    void ReturnMyOculusHash(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void TryDistributeCurrency(System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x2854E0C
    void TryDistributeCurrency(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void AddOrRemoveDLCOwnership(System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x28551D8
    void AddOrRemoveDLCOwnership(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void BroadcastMyRoom(GorillaNetworking.BroadcastMyRoomRequest request, System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x28555A4
    void BroadcastMyRoom(::GorillaNetworking::BroadcastMyRoomRequest* request, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Boolean NewCosmeticsPath()
    // Offset: 0x2855978
    bool NewCosmeticsPath();
    // public System.Void UpdateUserCosmetics()
    // Offset: 0x28559D8
    void UpdateUserCosmetics();
    // public System.Void GetAcceptedAgreements(GorillaNetworking.GetAcceptedAgreementsRequest request, System.Action`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x2855C0C
    void GetAcceptedAgreements(::GorillaNetworking::GetAcceptedAgreementsRequest* request, ::System::Action_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void SubmitAcceptedAgreements(GorillaNetworking.SubmitAcceptedAgreementsRequest request, System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x2855F18
    void SubmitAcceptedAgreements(::GorillaNetworking::SubmitAcceptedAgreementsRequest* request, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void UploadGorillanalytics(System.Object uploadData)
    // Offset: 0x2856148
    void UploadGorillanalytics(::Il2CppObject* uploadData);
    // public System.Void CheckForBadName(GorillaNetworking.CheckForBadNameRequest request, System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x284F52C
    void CheckForBadName(::GorillaNetworking::CheckForBadNameRequest* request, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // public System.Void GetRandomName(System.Action`1<PlayFab.CloudScriptModels.ExecuteFunctionResult> successCallback, System.Action`1<PlayFab.PlayFabError> errorCallback)
    // Offset: 0x2856400
    void GetRandomName(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>* successCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback);
    // private System.Action`1<T> DebugWrapCb(System.Action`1<T> cb, System.String label)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Action_1<T>* DebugWrapCb(::System::Action_1<T>* cb, ::StringW label) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaServer::DebugWrapCb");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DebugWrapCb", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cb), ::il2cpp_utils::ExtractType(label)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<T>*, false>(this, ___generic__method, cb, label);
    }
    // private PlayFab.CloudScriptModels.ExecuteFunctionResult toFunctionResult(PlayFab.ClientModels.ExecuteCloudScriptResult csResult)
    // Offset: 0x28565F8
    ::PlayFab::CloudScriptModels::ExecuteFunctionResult* toFunctionResult(::PlayFab::ClientModels::ExecuteCloudScriptResult* csResult);
    // public System.Void OnBeforeSerialize()
    // Offset: 0x2856810
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x2856A48
    void OnAfterDeserialize();
    // public System.Void .ctor()
    // Offset: 0x2856BD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaServer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaNetworking::GorillaServer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaServer*, creationType>()));
    }
  }; // GorillaNetworking.GorillaServer
  #pragma pack(pop)
  static check_size<sizeof(GorillaServer), 56 + sizeof(bool)> __GorillaNetworking_GorillaServerSizeCheck;
  static_assert(sizeof(GorillaServer) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::get_playerEntity
// Il2CppName: get_playerEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PlayFab::CloudScriptModels::EntityKey* (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::get_playerEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "get_playerEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::ReturnCurrentVersion
// Il2CppName: ReturnCurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::GorillaNetworking::ReturnCurrentVersionRequest*, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::ReturnCurrentVersion)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "ReturnCurrentVersionRequest")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "ReturnCurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::ReturnMyOculusHash
// Il2CppName: ReturnMyOculusHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::ReturnMyOculusHash)> {
  static const MethodInfo* get() {
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "ReturnMyOculusHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::TryDistributeCurrency
// Il2CppName: TryDistributeCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::TryDistributeCurrency)> {
  static const MethodInfo* get() {
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "TryDistributeCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::AddOrRemoveDLCOwnership
// Il2CppName: AddOrRemoveDLCOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::AddOrRemoveDLCOwnership)> {
  static const MethodInfo* get() {
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "AddOrRemoveDLCOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::BroadcastMyRoom
// Il2CppName: BroadcastMyRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::GorillaNetworking::BroadcastMyRoomRequest*, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::BroadcastMyRoom)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "BroadcastMyRoomRequest")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "BroadcastMyRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::NewCosmeticsPath
// Il2CppName: NewCosmeticsPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::NewCosmeticsPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "NewCosmeticsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::UpdateUserCosmetics
// Il2CppName: UpdateUserCosmetics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::UpdateUserCosmetics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "UpdateUserCosmetics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::GetAcceptedAgreements
// Il2CppName: GetAcceptedAgreements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::GorillaNetworking::GetAcceptedAgreementsRequest*, ::System::Action_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::GetAcceptedAgreements)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "GetAcceptedAgreementsRequest")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "GetAcceptedAgreements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::SubmitAcceptedAgreements
// Il2CppName: SubmitAcceptedAgreements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::GorillaNetworking::SubmitAcceptedAgreementsRequest*, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::SubmitAcceptedAgreements)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "SubmitAcceptedAgreementsRequest")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "SubmitAcceptedAgreements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::UploadGorillanalytics
// Il2CppName: UploadGorillanalytics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::Il2CppObject*)>(&GorillaNetworking::GorillaServer::UploadGorillanalytics)> {
  static const MethodInfo* get() {
    static auto* uploadData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "UploadGorillanalytics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uploadData});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::CheckForBadName
// Il2CppName: CheckForBadName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::GorillaNetworking::CheckForBadNameRequest*, ::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::CheckForBadName)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("GorillaNetworking", "CheckForBadNameRequest")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "CheckForBadName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::GetRandomName
// Il2CppName: GetRandomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)(::System::Action_1<::PlayFab::CloudScriptModels::ExecuteFunctionResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*)>(&GorillaNetworking::GorillaServer::GetRandomName)> {
  static const MethodInfo* get() {
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.CloudScriptModels", "ExecuteFunctionResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "GetRandomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::DebugWrapCb
// Il2CppName: DebugWrapCb
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::toFunctionResult
// Il2CppName: toFunctionResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PlayFab::CloudScriptModels::ExecuteFunctionResult* (GorillaNetworking::GorillaServer::*)(::PlayFab::ClientModels::ExecuteCloudScriptResult*)>(&GorillaNetworking::GorillaServer::toFunctionResult)> {
  static const MethodInfo* get() {
    static auto* csResult = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "ExecuteCloudScriptResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "toFunctionResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{csResult});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaNetworking::GorillaServer::*)()>(&GorillaNetworking::GorillaServer::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaNetworking::GorillaServer*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaNetworking::GorillaServer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
