// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInputList
  class SimulationInputList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationInputList);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationInputList*, "Fusion", "SimulationInputList");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationInputList
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationInputList : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Count
    // Size: 0x4
    // Offset: 0x10
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Count and: Head
    char __padding0[0x4] = {};
    // public Fusion.SimulationInput Head
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::SimulationInput* Head;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput*) == 0x8);
    // public Fusion.SimulationInput Tail
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::SimulationInput* Tail;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Count
    [[deprecated("Use field access instead!")]] int& dyn_Count();
    // Get instance field reference: public Fusion.SimulationInput Head
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput*& dyn_Head();
    // Get instance field reference: public Fusion.SimulationInput Tail
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput*& dyn_Tail();
    // public System.Void AddFirst(Fusion.SimulationInput item)
    // Offset: 0x2B6E768
    void AddFirst(::Fusion::SimulationInput* item);
    // public System.Void AddLast(Fusion.SimulationInput item)
    // Offset: 0x2B6E7FC
    void AddLast(::Fusion::SimulationInput* item);
    // public System.Void AddBefore(Fusion.SimulationInput item, Fusion.SimulationInput before)
    // Offset: 0x2B6E87C
    void AddBefore(::Fusion::SimulationInput* item, ::Fusion::SimulationInput* before);
    // public System.Void AddAfter(Fusion.SimulationInput item, Fusion.SimulationInput after)
    // Offset: 0x2B6E918
    void AddAfter(::Fusion::SimulationInput* item, ::Fusion::SimulationInput* after);
    // public Fusion.SimulationInput RemoveHead()
    // Offset: 0x2B6E9C4
    ::Fusion::SimulationInput* RemoveHead();
    // public System.Void Remove(Fusion.SimulationInput item)
    // Offset: 0x2B6E9E0
    void Remove(::Fusion::SimulationInput* item);
    // private System.Boolean IsInList(Fusion.SimulationInput item)
    // Offset: 0x2B6EAA0
    bool IsInList(::Fusion::SimulationInput* item);
    // public Fusion.SimulationInputList RemoveAll()
    // Offset: 0x2B6EAC4
    ::Fusion::SimulationInputList* RemoveAll();
    // public System.Void Concat(Fusion.SimulationInputList other)
    // Offset: 0x2B6EAF8
    void Concat(::Fusion::SimulationInputList* other);
    // public System.Void .ctor()
    // Offset: 0x2B6EBA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationInputList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationInputList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationInputList*, creationType>()));
    }
  }; // Fusion.SimulationInputList
  #pragma pack(pop)
  static check_size<sizeof(SimulationInputList), 32 + sizeof(::Fusion::SimulationInput*)> __Fusion_SimulationInputListSizeCheck;
  static_assert(sizeof(SimulationInputList) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationInputList::AddFirst
// Il2CppName: AddFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::AddFirst)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "AddFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::AddLast
// Il2CppName: AddLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::AddLast)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "AddLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::AddBefore
// Il2CppName: AddBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*, ::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::AddBefore)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    static auto* before = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "AddBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, before});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::AddAfter
// Il2CppName: AddAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*, ::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::AddAfter)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    static auto* after = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "AddAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, after});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::RemoveHead
// Il2CppName: RemoveHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::SimulationInputList::*)()>(&Fusion::SimulationInputList::RemoveHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "RemoveHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::Remove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::IsInList
// Il2CppName: IsInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationInputList::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInputList::IsInList)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "IsInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::RemoveAll
// Il2CppName: RemoveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInputList* (Fusion::SimulationInputList::*)()>(&Fusion::SimulationInputList::RemoveAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "RemoveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputList::*)(::Fusion::SimulationInputList*)>(&Fusion::SimulationInputList::Concat)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInputList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputList*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
