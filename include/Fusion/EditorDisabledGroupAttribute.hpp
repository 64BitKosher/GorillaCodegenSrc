// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PropertyAttribute
#include "Fusion/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: EditorDisabledGroupAttribute
  class EditorDisabledGroupAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::EditorDisabledGroupAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::EditorDisabledGroupAttribute*, "Fusion", "EditorDisabledGroupAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x15
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.EditorDisabledGroupAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class EditorDisabledGroupAttribute : public ::Fusion::PropertyAttribute {
    public:
    public:
    // private readonly System.Boolean <Begin>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool Begin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private readonly System.Boolean <Begin>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Begin$k__BackingField();
    // public System.Void .ctor(System.Boolean begin)
    // Offset: 0x2AFEFEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EditorDisabledGroupAttribute* New_ctor(bool begin) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EditorDisabledGroupAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EditorDisabledGroupAttribute*, creationType>(begin)));
    }
    // public System.Boolean get_Begin()
    // Offset: 0x2AFF014
    bool get_Begin();
  }; // Fusion.EditorDisabledGroupAttribute
  #pragma pack(pop)
  static check_size<sizeof(EditorDisabledGroupAttribute), 20 + sizeof(bool)> __Fusion_EditorDisabledGroupAttributeSizeCheck;
  static_assert(sizeof(EditorDisabledGroupAttribute) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::EditorDisabledGroupAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::EditorDisabledGroupAttribute::get_Begin
// Il2CppName: get_Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::EditorDisabledGroupAttribute::*)()>(&Fusion::EditorDisabledGroupAttribute::get_Begin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::EditorDisabledGroupAttribute*), "get_Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
