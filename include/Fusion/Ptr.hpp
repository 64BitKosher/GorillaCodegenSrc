// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Ptr
  struct Ptr;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Ptr, "Fusion", "Ptr");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Ptr
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct Ptr/*, public ::System::ValueType, public ::System::IEquatable_1<::Fusion::Ptr>, public ::Fusion::INetworkStruct*/ {
    public:
    // Nested type: ::Fusion::Ptr::EqualityComparer
    class EqualityComparer;
    public:
    // public System.Int32 Address
    // Size: 0x4
    // Offset: 0x0
    int Address;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Ptr
    constexpr Ptr(int Address_ = {}) noexcept : Address{Address_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Fusion::Ptr>
    operator ::System::IEquatable_1<::Fusion::Ptr>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Fusion::Ptr>*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return Address;
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 4;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public System.Int32 Address
    [[deprecated("Use field access instead!")]] int& dyn_Address();
    // static public Fusion.Ptr get_Null()
    // Offset: 0x2AFE820
    static ::Fusion::Ptr get_Null();
    // public System.Boolean Equals(Fusion.Ptr other)
    // Offset: 0x2AFE828
    bool Equals(::Fusion::Ptr other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2AFE838
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2AFE8B0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2AFE8B8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.Ptr
  #pragma pack(pop)
  static check_size<sizeof(Ptr), 0 + sizeof(int)> __Fusion_PtrSizeCheck;
  static_assert(sizeof(Ptr) == 0x4);
  // static public System.Boolean op_Equality(Fusion.Ptr a, Fusion.Ptr b)
  // Offset: 0x2AFE284
  bool operator ==(const ::Fusion::Ptr& a, const ::Fusion::Ptr& b);
  // static public System.Boolean op_Inequality(Fusion.Ptr a, Fusion.Ptr b)
  // Offset: 0x2AFE290
  bool operator !=(const ::Fusion::Ptr& a, const ::Fusion::Ptr& b);
  // static public Fusion.Ptr op_Addition(Fusion.Ptr p, System.Int32 v)
  // Offset: 0x2AFE93C
  ::Fusion::Ptr operator+(const ::Fusion::Ptr& p, const int& v);
  // static public Fusion.Ptr op_Subtraction(Fusion.Ptr p, System.Int32 v)
  // Offset: 0x2AFE944
  ::Fusion::Ptr operator-(const ::Fusion::Ptr& p, const int& v);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Ptr::get_Null
// Il2CppName: get_Null
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Ptr (*)()>(&Fusion::Ptr::get_Null)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ptr), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ptr::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Ptr::*)(::Fusion::Ptr)>(&Fusion::Ptr::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion", "Ptr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ptr), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::Ptr::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Ptr::*)(::Il2CppObject*)>(&Fusion::Ptr::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ptr), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::Ptr::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Ptr::*)()>(&Fusion::Ptr::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ptr), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ptr::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Ptr::*)()>(&Fusion::Ptr::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ptr), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ptr::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Fusion::Ptr::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Fusion::Ptr::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Fusion::Ptr::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
