// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkButtons
  struct NetworkButtons;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkButtons, "Fusion", "NetworkButtons");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkButtons
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct NetworkButtons/*, public ::System::ValueType, public ::Fusion::INetworkStruct*/ {
    public:
    public:
    // private System.Int32 _bits
    // Size: 0x4
    // Offset: 0x0
    int bits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetworkButtons
    constexpr NetworkButtons(int bits_ = {}) noexcept : bits{bits_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return bits;
    }
    // Get instance field reference: private System.Int32 _bits
    [[deprecated("Use field access instead!")]] int& dyn__bits();
    // public System.Int32 get_Bits()
    // Offset: 0x2B48E28
    int get_Bits();
    // public System.Void .ctor(System.Int32 buttons)
    // Offset: 0x2B48E30
    // ABORTED: conflicts with another method.  NetworkButtons(int buttons);
    // public System.Boolean IsSet(System.Int32 button)
    // Offset: 0x2B48E38
    bool IsSet(int button);
    // public System.Void SetDown(System.Int32 button)
    // Offset: 0x2B48E48
    void SetDown(int button);
    // public System.Void SetUp(System.Int32 button)
    // Offset: 0x2B48E60
    void SetUp(int button);
    // public System.Void Set(System.Int32 button, System.Boolean state)
    // Offset: 0x2B48E78
    void Set(int button, bool state);
    // public System.Void SetAllUp()
    // Offset: 0x2B48E9C
    void SetAllUp();
    // public System.Void SetAllDown()
    // Offset: 0x2B48EA4
    void SetAllDown();
    // public System.Boolean IsSet(T button)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool IsSet(T button) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::IsSet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsSet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, button);
    }
    // public System.Void SetDown(T button)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetDown(T button) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::SetDown");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetDown", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, button);
    }
    // public System.Void SetUp(T button)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetUp(T button) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::SetUp");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetUp", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, button);
    }
    // public System.Void Set(T button, System.Boolean state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Set(T button, bool state) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(state)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, button, state);
    }
    // public System.ValueTuple`2<Fusion.NetworkButtons,Fusion.NetworkButtons> GetPressedOrReleased(Fusion.NetworkButtons previous)
    // Offset: 0x2B48EB0
    ::System::ValueTuple_2<::Fusion::NetworkButtons, ::Fusion::NetworkButtons> GetPressedOrReleased(::Fusion::NetworkButtons previous);
    // public Fusion.NetworkButtons GetPressed(Fusion.NetworkButtons previous)
    // Offset: 0x2B48F1C
    ::Fusion::NetworkButtons GetPressed(::Fusion::NetworkButtons previous);
    // public Fusion.NetworkButtons GetReleased(Fusion.NetworkButtons previous)
    // Offset: 0x2B48F28
    ::Fusion::NetworkButtons GetReleased(::Fusion::NetworkButtons previous);
    // public System.Boolean WasPressed(Fusion.NetworkButtons previous, System.Int32 button)
    // Offset: 0x2B48F34
    bool WasPressed(::Fusion::NetworkButtons previous, int button);
    // public System.Boolean WasReleased(Fusion.NetworkButtons previous, System.Int32 button)
    // Offset: 0x2B48F50
    bool WasReleased(::Fusion::NetworkButtons previous, int button);
    // public System.Boolean WasPressed(Fusion.NetworkButtons previous, T button)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool WasPressed(::Fusion::NetworkButtons previous, T button) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::WasPressed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WasPressed", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previous), ::il2cpp_utils::ExtractType(button)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, previous, button);
    }
    // public System.Boolean WasReleased(Fusion.NetworkButtons previous, T button)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool WasReleased(::Fusion::NetworkButtons previous, T button) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<T, ::System::Enum*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkButtons::WasReleased");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WasReleased", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previous), ::il2cpp_utils::ExtractType(button)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, previous, button);
    }
  }; // Fusion.NetworkButtons
  #pragma pack(pop)
  static check_size<sizeof(NetworkButtons), 0 + sizeof(int)> __Fusion_NetworkButtonsSizeCheck;
  static_assert(sizeof(NetworkButtons) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkButtons::get_Bits
// Il2CppName: get_Bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkButtons::*)()>(&Fusion::NetworkButtons::get_Bits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "get_Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::NetworkButtons
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkButtons::IsSet
// Il2CppName: IsSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkButtons::*)(int)>(&Fusion::NetworkButtons::IsSet)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "IsSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetDown
// Il2CppName: SetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkButtons::*)(int)>(&Fusion::NetworkButtons::SetDown)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "SetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetUp
// Il2CppName: SetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkButtons::*)(int)>(&Fusion::NetworkButtons::SetUp)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "SetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkButtons::*)(int, bool)>(&Fusion::NetworkButtons::Set)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, state});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetAllUp
// Il2CppName: SetAllUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkButtons::*)()>(&Fusion::NetworkButtons::SetAllUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "SetAllUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetAllDown
// Il2CppName: SetAllDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkButtons::*)()>(&Fusion::NetworkButtons::SetAllDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "SetAllDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::IsSet
// Il2CppName: IsSet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetDown
// Il2CppName: SetDown
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkButtons::SetUp
// Il2CppName: SetUp
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkButtons::Set
// Il2CppName: Set
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkButtons::GetPressedOrReleased
// Il2CppName: GetPressedOrReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::Fusion::NetworkButtons, ::Fusion::NetworkButtons> (Fusion::NetworkButtons::*)(::Fusion::NetworkButtons)>(&Fusion::NetworkButtons::GetPressedOrReleased)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkButtons")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "GetPressedOrReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::GetPressed
// Il2CppName: GetPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkButtons (Fusion::NetworkButtons::*)(::Fusion::NetworkButtons)>(&Fusion::NetworkButtons::GetPressed)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkButtons")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "GetPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::GetReleased
// Il2CppName: GetReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkButtons (Fusion::NetworkButtons::*)(::Fusion::NetworkButtons)>(&Fusion::NetworkButtons::GetReleased)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkButtons")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "GetReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::WasPressed
// Il2CppName: WasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkButtons::*)(::Fusion::NetworkButtons, int)>(&Fusion::NetworkButtons::WasPressed)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkButtons")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "WasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, button});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::WasReleased
// Il2CppName: WasReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkButtons::*)(::Fusion::NetworkButtons, int)>(&Fusion::NetworkButtons::WasReleased)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkButtons")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkButtons), "WasReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, button});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkButtons::WasPressed
// Il2CppName: WasPressed
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkButtons::WasReleased
// Il2CppName: WasReleased
// Cannot write MetadataGetter for generic methods!
