// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PlayerRef
#include "Fusion/PlayerRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInputHeader
  struct SimulationInputHeader;
  // Forward declaring type: SimulationConfig
  class SimulationConfig;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBufferSerializer
  struct NetBitBufferSerializer;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationInput);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationInput*, "Fusion", "SimulationInput");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationInput
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationInput : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::SimulationInput::Buffer
    class Buffer;
    // Nested type: ::Fusion::SimulationInput::Pool
    class Pool;
    public:
    // private System.Int32 _sent
    // Size: 0x4
    // Offset: 0x10
    int sent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _pooled
    // Size: 0x1
    // Offset: 0x14
    bool pooled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pooled and: player
    char __padding1[0x3] = {};
    // private Fusion.PlayerRef _player
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::PlayerRef player;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRef) == 0x4);
    // Padding between fields: player and: ptr
    char __padding2[0x4] = {};
    // private System.Int32* _ptr
    // Size: 0x8
    // Offset: 0x20
    int* ptr;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // Fusion.SimulationInput Prev
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationInput* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput*) == 0x8);
    // Fusion.SimulationInput Next
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::SimulationInput* Next;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _sent
    [[deprecated("Use field access instead!")]] int& dyn__sent();
    // Get instance field reference: private System.Boolean _pooled
    [[deprecated("Use field access instead!")]] bool& dyn__pooled();
    // Get instance field reference: private Fusion.PlayerRef _player
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRef& dyn__player();
    // Get instance field reference: private System.Int32* _ptr
    [[deprecated("Use field access instead!")]] int*& dyn__ptr();
    // Get instance field reference: Fusion.SimulationInput Prev
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput*& dyn_Prev();
    // Get instance field reference: Fusion.SimulationInput Next
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput*& dyn_Next();
    // public Fusion.PlayerRef get_Player()
    // Offset: 0x2B83544
    ::Fusion::PlayerRef get_Player();
    // public System.Void set_Player(Fusion.PlayerRef value)
    // Offset: 0x2B8354C
    void set_Player(::Fusion::PlayerRef value);
    // public Fusion.SimulationInputHeader* get_Header()
    // Offset: 0x2B83554
    ::Fusion::SimulationInputHeader* get_Header();
    // public System.Int32* get_Data()
    // Offset: 0x2B8355C
    int* get_Data();
    // public System.Int32 get_Sent()
    // Offset: 0x2B83568
    int get_Sent();
    // public System.Void set_Sent(System.Int32 value)
    // Offset: 0x2B83570
    void set_Sent(int value);
    // public System.Void Clear(System.Int32 wordCount)
    // Offset: 0x2B83578
    void Clear(int wordCount);
    // public System.Void CopyFrom(Fusion.SimulationInput source, System.Int32 wordCount)
    // Offset: 0x2B83588
    void CopyFrom(::Fusion::SimulationInput* source, int wordCount);
    // System.Void Serialize(Fusion.SimulationInput previous, Fusion.SimulationConfig config, Fusion.Sockets.NetBitBufferSerializer serializer)
    // Offset: 0x2B835AC
    void Serialize(::Fusion::SimulationInput* previous, ::Fusion::SimulationConfig* config, ::Fusion::Sockets::NetBitBufferSerializer serializer);
    // System.Void Dispose()
    // Offset: 0x2B83800
    void Dispose();
    // public System.Void .ctor()
    // Offset: 0x2B8381C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationInput* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationInput::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationInput*, creationType>()));
    }
  }; // Fusion.SimulationInput
  #pragma pack(pop)
  static check_size<sizeof(SimulationInput), 48 + sizeof(::Fusion::SimulationInput*)> __Fusion_SimulationInputSizeCheck;
  static_assert(sizeof(SimulationInput) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationInput::get_Player
// Il2CppName: get_Player
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::SimulationInput::*)()>(&Fusion::SimulationInput::get_Player)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "get_Player", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::set_Player
// Il2CppName: set_Player
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)(::Fusion::PlayerRef)>(&Fusion::SimulationInput::set_Player)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "set_Player", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::get_Header
// Il2CppName: get_Header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInputHeader* (Fusion::SimulationInput::*)()>(&Fusion::SimulationInput::get_Header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "get_Header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int* (Fusion::SimulationInput::*)()>(&Fusion::SimulationInput::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::get_Sent
// Il2CppName: get_Sent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationInput::*)()>(&Fusion::SimulationInput::get_Sent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "get_Sent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::set_Sent
// Il2CppName: set_Sent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)(int)>(&Fusion::SimulationInput::set_Sent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "set_Sent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)(int)>(&Fusion::SimulationInput::Clear)> {
  static const MethodInfo* get() {
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wordCount});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)(::Fusion::SimulationInput*, int)>(&Fusion::SimulationInput::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, wordCount});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)(::Fusion::SimulationInput*, ::Fusion::SimulationConfig*, ::Fusion::Sockets::NetBitBufferSerializer)>(&Fusion::SimulationInput::Serialize)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConfig")->byval_arg;
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBufferSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, config, serializer});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::*)()>(&Fusion::SimulationInput::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
