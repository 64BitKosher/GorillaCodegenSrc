// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.CommunicatorBase
#include "Fusion/Protocol/CommunicatorBase.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: FusionRelayClient
  class FusionRelayClient;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: CloudCommunicator
  class CloudCommunicator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::CloudCommunicator);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CloudCommunicator*, "Fusion", "CloudCommunicator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.CloudCommunicator
  // [TokenAttribute] Offset: FFFFFFFF
  class CloudCommunicator : public ::Fusion::Protocol::CommunicatorBase/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean <WasExtracted>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool WasExtracted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WasExtracted and: client
    char __padding0[0x7] = {};
    // private Fusion.Photon.Realtime.FusionRelayClient _client
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::Photon::Realtime::FusionRelayClient* client;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::FusionRelayClient*) == 0x8);
    // private readonly System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Boolean <WasExtracted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$WasExtracted$k__BackingField();
    // Get instance field reference: private Fusion.Photon.Realtime.FusionRelayClient _client
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::FusionRelayClient*& dyn__client();
    // Get instance field reference: private readonly System.Byte[] _buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__buffer();
    // public Fusion.Photon.Realtime.FusionRelayClient get_Client()
    // Offset: 0x2AFF8CC
    ::Fusion::Photon::Realtime::FusionRelayClient* get_Client();
    // public System.Boolean get_WasExtracted()
    // Offset: 0x2AFF904
    bool get_WasExtracted();
    // public System.Void set_WasExtracted(System.Boolean value)
    // Offset: 0x2AFF90C
    void set_WasExtracted(bool value);
    // public System.Void .ctor()
    // Offset: 0x2AFF918
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CloudCommunicator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CloudCommunicator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CloudCommunicator*, creationType>()));
    }
    // public System.Void Reset()
    // Offset: 0x2AFFAB8
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x2AFFB60
    void Dispose();
    // public override System.Int32 get_CommunicatorID()
    // Offset: 0x2AFF8D4
    // Implemented from: Fusion.Protocol.CommunicatorBase
    // Base method: System.Int32 CommunicatorBase::get_CommunicatorID()
    int get_CommunicatorID();
    // public override System.Void Service()
    // Offset: 0x2AFF9C0
    // Implemented from: Fusion.Protocol.CommunicatorBase
    // Base method: System.Void CommunicatorBase::Service()
    void Service();
    // public override System.Boolean SendPackage(System.Byte code, System.Int32 targetActor, System.Boolean reliable, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x2AFF9F0
    // Implemented from: Fusion.Protocol.CommunicatorBase
    // Base method: System.Boolean CommunicatorBase::SendPackage(System.Byte code, System.Int32 targetActor, System.Boolean reliable, System.Byte* buffer, System.Int32 bufferLength)
    bool SendPackage(uint8_t code, int targetActor, bool reliable, uint8_t* buffer, int bufferLength);
    // protected override System.Void ConvertData(System.Object data, out System.Byte[] dataBuffer, out System.Int32 maxLength)
    // Offset: 0x2AFFA28
    // Implemented from: Fusion.Protocol.CommunicatorBase
    // Base method: System.Void CommunicatorBase::ConvertData(System.Object data, out System.Byte[] dataBuffer, out System.Int32 maxLength)
    void ConvertData(::Il2CppObject* data, ByRef<::ArrayW<uint8_t>> dataBuffer, ByRef<int> maxLength);
  }; // Fusion.CloudCommunicator
  #pragma pack(pop)
  static check_size<sizeof(CloudCommunicator), 72 + sizeof(::ArrayW<uint8_t>)> __Fusion_CloudCommunicatorSizeCheck;
  static_assert(sizeof(CloudCommunicator) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::CloudCommunicator::get_Client
// Il2CppName: get_Client
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Photon::Realtime::FusionRelayClient* (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::get_Client)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "get_Client", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::get_WasExtracted
// Il2CppName: get_WasExtracted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::get_WasExtracted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "get_WasExtracted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::set_WasExtracted
// Il2CppName: set_WasExtracted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudCommunicator::*)(bool)>(&Fusion::CloudCommunicator::set_WasExtracted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "set_WasExtracted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::CloudCommunicator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::get_CommunicatorID
// Il2CppName: get_CommunicatorID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::get_CommunicatorID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "get_CommunicatorID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudCommunicator::*)()>(&Fusion::CloudCommunicator::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::SendPackage
// Il2CppName: SendPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::CloudCommunicator::*)(uint8_t, int, bool, uint8_t*, int)>(&Fusion::CloudCommunicator::SendPackage)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* targetActor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "SendPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, targetActor, reliable, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::CloudCommunicator::ConvertData
// Il2CppName: ConvertData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudCommunicator::*)(::Il2CppObject*, ByRef<::ArrayW<uint8_t>>, ByRef<int>)>(&Fusion::CloudCommunicator::ConvertData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* dataBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudCommunicator*), "ConvertData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataBuffer, maxLength});
  }
};
