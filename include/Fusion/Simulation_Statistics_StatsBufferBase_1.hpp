// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/Statistics
#include "Fusion/Simulation_Statistics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ISampleData
  class ISampleData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Fusion::Simulation::Statistics::StatsBufferBase_1, "Fusion", "Simulation/Statistics/StatsBufferBase`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.Simulation/Statistics/StatsBufferBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class Simulation::Statistics::StatsBufferBase_1 : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _head
    // Size: 0x4
    // Offset: 0x0
    int head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _tail
    // Size: 0x4
    // Offset: 0x0
    int tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly T[] _array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> array;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private readonly System.Boolean _overwrite
    // Size: 0x1
    // Offset: 0x0
    bool overwrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Paused>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool Paused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _head
    [[deprecated("Use field access instead!")]] int& dyn__head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn__head");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _tail
    [[deprecated("Use field access instead!")]] int& dyn__tail() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn__tail");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tail"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn__count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly T[] _array
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn__array() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn__array");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_array"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean _overwrite
    [[deprecated("Use field access instead!")]] bool& dyn__overwrite() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn__overwrite");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overwrite"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <Paused>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Paused$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::dyn_$Paused$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Paused>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Simulation::Statistics::StatsBufferBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Capacity");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Simulation::Statistics::StatsBufferBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsFull()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsFull() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_IsFull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_IsEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_Paused()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Paused() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Paused");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Paused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_Paused(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Paused(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::set_Paused");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Paused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T get_First()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_First", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T get_Head()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Head");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public T get_Tail()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Tail() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Tail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public Fusion.ISampleData GetSampleAtIndex(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::ISampleData* GetSampleAtIndex(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::GetSampleAtIndex");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Simulation::Statistics::StatsBufferBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::ISampleData*, false>(this, ___internal__method, index);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Void .ctor(System.Int32 size, System.Boolean overwrite)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::Statistics::StatsBufferBase_1<T>* New_ctor(int size, bool overwrite) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::Statistics::StatsBufferBase_1<T>*, creationType>(size, overwrite)));
    }
    // public System.Void Push(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Push(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::Push");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private T Pop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Pop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::StatsBufferBase_1::Pop");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // Fusion.Simulation/Statistics/StatsBufferBase`1
  // Could not write size check! Type: Fusion.Simulation/Statistics/StatsBufferBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
