// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Int32BitSetUtils
  class Int32BitSetUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Int32BitSetUtils);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Int32BitSetUtils*, "Fusion", "Int32BitSetUtils");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Int32BitSetUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class Int32BitSetUtils : public ::Il2CppObject {
    public:
    // static public System.Boolean IsBitSet(System.Int32* bits, System.Int32 bit)
    // Offset: 0x2B48AA8
    static bool IsBitSet(int* bits, int bit);
    // static public System.Boolean IsBitSetOrNull(System.Int32* bits, System.Int32 bit)
    // Offset: 0x2B48AC8
    static bool IsBitSetOrNull(int* bits, int bit);
    // static public System.Void SetBit(System.Int32* bits, System.Int32 bit)
    // Offset: 0x2B48AF4
    static void SetBit(int* bits, int bit);
    // static public System.Void ClearBit(System.Int32* bits, System.Int32 bit)
    // Offset: 0x2B48B1C
    static void ClearBit(int* bits, int bit);
  }; // Fusion.Int32BitSetUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Int32BitSetUtils::IsBitSet
// Il2CppName: IsBitSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int*, int)>(&Fusion::Int32BitSetUtils::IsBitSet)> {
  static const MethodInfo* get() {
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* bit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Int32BitSetUtils*), "IsBitSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, bit});
  }
};
// Writing MetadataGetter for method: Fusion::Int32BitSetUtils::IsBitSetOrNull
// Il2CppName: IsBitSetOrNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int*, int)>(&Fusion::Int32BitSetUtils::IsBitSetOrNull)> {
  static const MethodInfo* get() {
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* bit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Int32BitSetUtils*), "IsBitSetOrNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, bit});
  }
};
// Writing MetadataGetter for method: Fusion::Int32BitSetUtils::SetBit
// Il2CppName: SetBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int*, int)>(&Fusion::Int32BitSetUtils::SetBit)> {
  static const MethodInfo* get() {
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* bit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Int32BitSetUtils*), "SetBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, bit});
  }
};
// Writing MetadataGetter for method: Fusion::Int32BitSetUtils::ClearBit
// Il2CppName: ClearBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int*, int)>(&Fusion::Int32BitSetUtils::ClearBit)> {
  static const MethodInfo* get() {
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* bit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Int32BitSetUtils*), "ClearBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, bit});
  }
};
