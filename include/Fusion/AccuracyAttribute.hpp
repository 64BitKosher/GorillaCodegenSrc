// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: AccuracyAttribute
  class AccuracyAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::AccuracyAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::AccuracyAttribute*, "Fusion", "AccuracyAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.AccuracyAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class AccuracyAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Single _accuracy
    // Size: 0x4
    // Offset: 0x10
    float accuracy;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 <CustomHash>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int CustomHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Single _accuracy
    [[deprecated("Use field access instead!")]] float& dyn__accuracy();
    // Get instance field reference: private readonly System.Int32 <CustomHash>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CustomHash$k__BackingField();
    // System.Int32 get_CustomHash()
    // Offset: 0x2AFE968
    int get_CustomHash();
    // System.Single get_Accuracy()
    // Offset: 0x2AFE970
    float get_Accuracy();
    // public System.Void .ctor(System.Double accuracy)
    // Offset: 0x2AFE978
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyAttribute* New_ctor(double accuracy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyAttribute*, creationType>(accuracy)));
    }
    // public System.Void .ctor(System.Single accuracy)
    // Offset: 0x2AFE9A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyAttribute* New_ctor(float accuracy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyAttribute*, creationType>(accuracy)));
    }
    // public System.Void .ctor(System.String defaultAccuracyTag)
    // Offset: 0x2AFE9CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyAttribute* New_ctor(::StringW defaultAccuracyTag) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyAttribute*, creationType>(defaultAccuracyTag)));
    }
  }; // Fusion.AccuracyAttribute
  #pragma pack(pop)
  static check_size<sizeof(AccuracyAttribute), 20 + sizeof(int)> __Fusion_AccuracyAttributeSizeCheck;
  static_assert(sizeof(AccuracyAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::AccuracyAttribute::get_CustomHash
// Il2CppName: get_CustomHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::AccuracyAttribute::*)()>(&Fusion::AccuracyAttribute::get_CustomHash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::AccuracyAttribute*), "get_CustomHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::AccuracyAttribute::get_Accuracy
// Il2CppName: get_Accuracy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::AccuracyAttribute::*)()>(&Fusion::AccuracyAttribute::get_Accuracy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::AccuracyAttribute*), "get_Accuracy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::AccuracyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::AccuracyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::AccuracyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
