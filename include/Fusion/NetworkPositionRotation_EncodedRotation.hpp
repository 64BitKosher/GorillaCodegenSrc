// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkPositionRotation
#include "Fusion/NetworkPositionRotation.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPositionRotation::EncodedRotation, "Fusion", "NetworkPositionRotation/EncodedRotation");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkPositionRotation/EncodedRotation
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkPositionRotation::EncodedRotation/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer
    struct $Data$e__FixedBuffer;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkPositionRotation/EncodedRotation/<Data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $Data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt64 FixedElementField
      // Size: 0x8
      // Offset: 0x0
      uint64_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      public:
      // Creating value type constructor for type: $Data$e__FixedBuffer
      constexpr $Data$e__FixedBuffer(uint64_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint64_t
      constexpr operator uint64_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.UInt64 FixedElementField
      [[deprecated("Use field access instead!")]] uint64_t& dyn_FixedElementField();
    }; // Fusion.NetworkPositionRotation/EncodedRotation/<Data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer), 0 + sizeof(uint64_t)> __Fusion_NetworkPositionRotation_EncodedRotation_$Data$e__FixedBufferSizeCheck;
    static_assert(sizeof(NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer) == 0x8);
    public:
    // public Fusion.NetworkPositionRotation/EncodedRotation/<Data>e__FixedBuffer Data
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer Data;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer) == 0x8);
    public:
    // Creating value type constructor for type: EncodedRotation
    constexpr EncodedRotation(::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer Data_ = {}) noexcept : Data{Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer
    constexpr operator ::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer() const noexcept {
      return Data;
    }
    // Get instance field reference: public Fusion.NetworkPositionRotation/EncodedRotation/<Data>e__FixedBuffer Data
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer& dyn_Data();
  }; // Fusion.NetworkPositionRotation/EncodedRotation
  #pragma pack(pop)
  static check_size<sizeof(NetworkPositionRotation::EncodedRotation), 0 + sizeof(::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer)> __Fusion_NetworkPositionRotation_EncodedRotationSizeCheck;
  static_assert(sizeof(NetworkPositionRotation::EncodedRotation) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPositionRotation::EncodedRotation::$Data$e__FixedBuffer, "Fusion", "NetworkPositionRotation/EncodedRotation/<Data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
