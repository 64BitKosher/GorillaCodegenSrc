// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Allocator
#include "Fusion/Allocator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Ptr
#include "Fusion/Ptr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Allocator::Block, "Fusion", "Allocator/Block");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Allocator/Block
  // [TokenAttribute] Offset: FFFFFFFF
  struct Allocator::Block/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Ptr Prev
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Ptr Prev;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public Fusion.Ptr Next
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::Ptr Next;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public System.Int32 Bucket
    // Size: 0x4
    // Offset: 0x8
    int Bucket;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.Ptr SegmentsFree
    // Size: 0x4
    // Offset: 0xC
    ::Fusion::Ptr SegmentsFree;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public System.Int32 SegmentsUsed
    // Size: 0x4
    // Offset: 0x10
    int SegmentsUsed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SegmentsAllocated
    // Size: 0x4
    // Offset: 0x14
    int SegmentsAllocated;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Index
    // Size: 0x4
    // Offset: 0x18
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Block
    constexpr Block(::Fusion::Ptr Prev_ = {}, ::Fusion::Ptr Next_ = {}, int Bucket_ = {}, ::Fusion::Ptr SegmentsFree_ = {}, int SegmentsUsed_ = {}, int SegmentsAllocated_ = {}, int Index_ = {}) noexcept : Prev{Prev_}, Next{Next_}, Bucket{Bucket_}, SegmentsFree{SegmentsFree_}, SegmentsUsed{SegmentsUsed_}, SegmentsAllocated{SegmentsAllocated_}, Index{Index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 28;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion.Ptr Prev
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Prev();
    // Get instance field reference: public Fusion.Ptr Next
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Next();
    // Get instance field reference: public System.Int32 Bucket
    [[deprecated("Use field access instead!")]] int& dyn_Bucket();
    // Get instance field reference: public Fusion.Ptr SegmentsFree
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_SegmentsFree();
    // Get instance field reference: public System.Int32 SegmentsUsed
    [[deprecated("Use field access instead!")]] int& dyn_SegmentsUsed();
    // Get instance field reference: public System.Int32 SegmentsAllocated
    [[deprecated("Use field access instead!")]] int& dyn_SegmentsAllocated();
    // Get instance field reference: public System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // public System.Int32 SegmentsFreeCount(Fusion.Allocator* a)
    // Offset: 0x2AFE214
    int SegmentsFreeCount(::Fusion::Allocator* a);
    // public System.Boolean SegmentsFreeContains(Fusion.Allocator* a, System.Void* ptr)
    // Offset: 0x2AFE248
    bool SegmentsFreeContains(::Fusion::Allocator* a, void* ptr);
  }; // Fusion.Allocator/Block
  #pragma pack(pop)
  static check_size<sizeof(Allocator::Block), 24 + sizeof(int)> __Fusion_Allocator_BlockSizeCheck;
  static_assert(sizeof(Allocator::Block) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Allocator::Block::SegmentsFreeCount
// Il2CppName: SegmentsFreeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Allocator::Block::*)(::Fusion::Allocator*)>(&Fusion::Allocator::Block::SegmentsFreeCount)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::Block), "SegmentsFreeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::Block::SegmentsFreeContains
// Il2CppName: SegmentsFreeContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Allocator::Block::*)(::Fusion::Allocator*, void*)>(&Fusion::Allocator::Block::SegmentsFreeContains)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::Block), "SegmentsFreeContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, ptr});
  }
};
