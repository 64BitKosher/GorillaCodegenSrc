// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.NetworkObjectFlags
#include "Fusion/NetworkObjectFlags.hpp"
// Including type: Fusion.NetworkObjectGuid
#include "Fusion/NetworkObjectGuid.hpp"
// Including type: Fusion.NetworkPrefabId
#include "Fusion/NetworkPrefabId.hpp"
// Including type: Fusion.NetworkObjectPredictionKey
#include "Fusion/NetworkObjectPredictionKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkAreaOfInterestBehaviour
  class NetworkAreaOfInterestBehaviour;
  // Forward declaring type: FastReferenceList`1<T>
  template<typename T>
  class FastReferenceList_1;
  // Forward declaring type: NetworkBehaviour
  class NetworkBehaviour;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: SimulationBehaviour
  class SimulationBehaviour;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: NetworkObjectHeaderPtr
  struct NetworkObjectHeaderPtr;
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObject
  class NetworkObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkObject);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObject*, "Fusion", "NetworkObject");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.NetworkObject
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class NetworkObject : public ::Fusion::Behaviour/*, public ::Fusion::ILogBuilder*/ {
    public:
    // Nested type: ::Fusion::NetworkObject::PredictionData
    struct PredictionData;
    // Nested type: ::Fusion::NetworkObject::ObjectInterestModes
    struct ObjectInterestModes;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkObject/PredictionData
    // [TokenAttribute] Offset: FFFFFFFF
    struct PredictionData/*, public ::System::ValueType*/ {
      public:
      public:
      // public Fusion.Tick Tick
      // Size: 0x4
      // Offset: 0x0
      ::Fusion::Tick Tick;
      // Field size check
      static_assert(sizeof(::Fusion::Tick) == 0x4);
      // public Fusion.NetworkPrefabId Prefab
      // Size: 0x4
      // Offset: 0x4
      ::Fusion::NetworkPrefabId Prefab;
      // Field size check
      static_assert(sizeof(::Fusion::NetworkPrefabId) == 0x4);
      // public Fusion.NetworkObjectPredictionKey Key
      // Size: 0xFFFFFFFF
      // Offset: 0x8
      ::Fusion::NetworkObjectPredictionKey Key;
      public:
      // Creating value type constructor for type: PredictionData
      constexpr PredictionData(::Fusion::Tick Tick_ = {}, ::Fusion::NetworkPrefabId Prefab_ = {}, ::Fusion::NetworkObjectPredictionKey Key_ = {}) noexcept : Tick{Tick_}, Prefab{Prefab_}, Key{Key_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Fusion.Tick Tick
      [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_Tick();
      // Get instance field reference: public Fusion.NetworkPrefabId Prefab
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkPrefabId& dyn_Prefab();
      // Get instance field reference: public Fusion.NetworkObjectPredictionKey Key
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectPredictionKey& dyn_Key();
    }; // Fusion.NetworkObject/PredictionData
    // WARNING Not writing size check since size may be invalid!
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkObject/ObjectInterestModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct ObjectInterestModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ObjectInterestModes
      constexpr ObjectInterestModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkObject/ObjectInterestModes AreaOfInterest
      static constexpr const int AreaOfInterest = 0;
      // Get static field: static public Fusion.NetworkObject/ObjectInterestModes AreaOfInterest
      static ::Fusion::NetworkObject::ObjectInterestModes _get_AreaOfInterest();
      // Set static field: static public Fusion.NetworkObject/ObjectInterestModes AreaOfInterest
      static void _set_AreaOfInterest(::Fusion::NetworkObject::ObjectInterestModes value);
      // static field const value: static public Fusion.NetworkObject/ObjectInterestModes AllPlayers
      static constexpr const int AllPlayers = 1;
      // Get static field: static public Fusion.NetworkObject/ObjectInterestModes AllPlayers
      static ::Fusion::NetworkObject::ObjectInterestModes _get_AllPlayers();
      // Set static field: static public Fusion.NetworkObject/ObjectInterestModes AllPlayers
      static void _set_AllPlayers(::Fusion::NetworkObject::ObjectInterestModes value);
      // static field const value: static public Fusion.NetworkObject/ObjectInterestModes ExplicitPlayers
      static constexpr const int ExplicitPlayers = 2;
      // Get static field: static public Fusion.NetworkObject/ObjectInterestModes ExplicitPlayers
      static ::Fusion::NetworkObject::ObjectInterestModes _get_ExplicitPlayers();
      // Set static field: static public Fusion.NetworkObject/ObjectInterestModes ExplicitPlayers
      static void _set_ExplicitPlayers(::Fusion::NetworkObject::ObjectInterestModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkObject/ObjectInterestModes
    #pragma pack(pop)
    static check_size<sizeof(NetworkObject::ObjectInterestModes), 0 + sizeof(int)> __Fusion_NetworkObject_ObjectInterestModesSizeCheck;
    static_assert(sizeof(NetworkObject::ObjectInterestModes) == 0x4);
    public:
    // System.Int32* Ptr
    // Size: 0x8
    // Offset: 0x20
    int* Ptr;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // System.Int32* Changed
    // Size: 0x8
    // Offset: 0x28
    int* Changed;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // Fusion.FastReferenceList`1<Fusion.NetworkBehaviour> CallbackBehaviours
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::FastReferenceList_1<::Fusion::NetworkBehaviour*>* CallbackBehaviours;
    // Field size check
    static_assert(sizeof(::Fusion::FastReferenceList_1<::Fusion::NetworkBehaviour*>*) == 0x8);
    // public Fusion.NetworkId Id
    // Size: 0x4
    // Offset: 0x38
    ::Fusion::NetworkId Id;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkId) == 0x4);
    // public System.Boolean IsResume
    // Size: 0x1
    // Offset: 0x3C
    bool IsResume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public Fusion.NetworkRunner Runner
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::NetworkRunner* Runner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // Fusion.NetworkObject/ObjectInterestModes ObjectInterest
    // Size: 0x4
    // Offset: 0x48
    ::Fusion::NetworkObject::ObjectInterestModes ObjectInterest;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObject::ObjectInterestModes) == 0x4);
    // System.String[] DefaultInterestGroups
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> DefaultInterestGroups;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // System.Boolean DestroyWhenStateAuthorityLeaves
    // Size: 0x1
    // Offset: 0x58
    bool DestroyWhenStateAuthorityLeaves;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean AllowStateAuthorityOverride
    // Size: 0x1
    // Offset: 0x59
    bool AllowStateAuthorityOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Fusion.NetworkAreaOfInterestBehaviour AoiPositionSource
    // Size: 0x8
    // Offset: 0x60
    ::Fusion::NetworkAreaOfInterestBehaviour* AoiPositionSource;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkAreaOfInterestBehaviour*) == 0x8);
    // private Fusion.Tick <LastReceiveTick>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    ::Fusion::Tick LastReceiveTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // public Fusion.NetworkObjectFlags Flags
    // Size: 0x4
    // Offset: 0x6C
    ::Fusion::NetworkObjectFlags Flags;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectFlags) == 0x4);
    // public Fusion.NetworkObjectGuid NetworkGuid
    // Size: 0x10
    // Offset: 0x70
    ::Fusion::NetworkObjectGuid NetworkGuid;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectGuid) == 0x10);
    // public Fusion.NetworkObject/PredictionData PredictedSpawn
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::Fusion::NetworkObject::PredictionData PredictedSpawn;
    // public Fusion.NetworkObject[] NestedObjects
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::Fusion::NetworkObject*> NestedObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::NetworkObject*>) == 0x8);
    // public Fusion.NetworkBehaviour[] NetworkedBehaviours
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Fusion::NetworkBehaviour*> NetworkedBehaviours;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::NetworkBehaviour*>) == 0x8);
    // public Fusion.SimulationBehaviour[] SimulationBehaviours
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::Fusion::SimulationBehaviour*> SimulationBehaviours;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationBehaviour*>) == 0x8);
    // System.Boolean InSimulation
    // Size: 0x1
    // Offset: 0xA8
    bool InSimulation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // static field const value: static public System.Int32 DefaultExecutionOrder
    static constexpr const int DefaultExecutionOrder = 500;
    // Get static field: static public System.Int32 DefaultExecutionOrder
    static int _get_DefaultExecutionOrder();
    // Set static field: static public System.Int32 DefaultExecutionOrder
    static void _set_DefaultExecutionOrder(int value);
    // Get instance field reference: System.Int32* Ptr
    [[deprecated("Use field access instead!")]] int*& dyn_Ptr();
    // Get instance field reference: System.Int32* Changed
    [[deprecated("Use field access instead!")]] int*& dyn_Changed();
    // Get instance field reference: Fusion.FastReferenceList`1<Fusion.NetworkBehaviour> CallbackBehaviours
    [[deprecated("Use field access instead!")]] ::Fusion::FastReferenceList_1<::Fusion::NetworkBehaviour*>*& dyn_CallbackBehaviours();
    // Get instance field reference: public Fusion.NetworkId Id
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkId& dyn_Id();
    // Get instance field reference: public System.Boolean IsResume
    [[deprecated("Use field access instead!")]] bool& dyn_IsResume();
    // Get instance field reference: public Fusion.NetworkRunner Runner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn_Runner();
    // Get instance field reference: Fusion.NetworkObject/ObjectInterestModes ObjectInterest
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject::ObjectInterestModes& dyn_ObjectInterest();
    // Get instance field reference: System.String[] DefaultInterestGroups
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_DefaultInterestGroups();
    // Get instance field reference: System.Boolean DestroyWhenStateAuthorityLeaves
    [[deprecated("Use field access instead!")]] bool& dyn_DestroyWhenStateAuthorityLeaves();
    // Get instance field reference: System.Boolean AllowStateAuthorityOverride
    [[deprecated("Use field access instead!")]] bool& dyn_AllowStateAuthorityOverride();
    // Get instance field reference: Fusion.NetworkAreaOfInterestBehaviour AoiPositionSource
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkAreaOfInterestBehaviour*& dyn_AoiPositionSource();
    // Get instance field reference: private Fusion.Tick <LastReceiveTick>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_$LastReceiveTick$k__BackingField();
    // Get instance field reference: public Fusion.NetworkObjectFlags Flags
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectFlags& dyn_Flags();
    // Get instance field reference: public Fusion.NetworkObjectGuid NetworkGuid
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectGuid& dyn_NetworkGuid();
    // Get instance field reference: public Fusion.NetworkObject/PredictionData PredictedSpawn
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject::PredictionData& dyn_PredictedSpawn();
    // Get instance field reference: public Fusion.NetworkObject[] NestedObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::NetworkObject*>& dyn_NestedObjects();
    // Get instance field reference: public Fusion.NetworkBehaviour[] NetworkedBehaviours
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::NetworkBehaviour*>& dyn_NetworkedBehaviours();
    // Get instance field reference: public Fusion.SimulationBehaviour[] SimulationBehaviours
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationBehaviour*>& dyn_SimulationBehaviours();
    // Get instance field reference: System.Boolean InSimulation
    [[deprecated("Use field access instead!")]] bool& dyn_InSimulation();
    // public Fusion.Tick get_LastReceiveTick()
    // Offset: 0x2B4B460
    ::Fusion::Tick get_LastReceiveTick();
    // System.Void set_LastReceiveTick(Fusion.Tick value)
    // Offset: 0x2B4B468
    void set_LastReceiveTick(::Fusion::Tick value);
    // public System.String get_Name()
    // Offset: 0x2B4B470
    ::StringW get_Name();
    // public System.Boolean get_IsSceneObject()
    // Offset: 0x2B46760
    bool get_IsSceneObject();
    // public System.Boolean get_IsSpawnedPrefabRoot()
    // Offset: 0x2B4B574
    bool get_IsSpawnedPrefabRoot();
    // public System.Boolean get_IsSpawnedPrefabNestedObject()
    // Offset: 0x2B4B588
    bool get_IsSpawnedPrefabNestedObject();
    // public System.Boolean get_IsValid()
    // Offset: 0x2B4B59C
    bool get_IsValid();
    // public System.Boolean get_IsPredictedSpawn()
    // Offset: 0x2B4B624
    bool get_IsPredictedSpawn();
    // public System.Boolean get_IsPredictedDespawn()
    // Offset: 0x2B4B630
    bool get_IsPredictedDespawn();
    // public System.Boolean get_IsInSimulation()
    // Offset: 0x2B4B650
    bool get_IsInSimulation();
    // public Fusion.PlayerRef get_InputAuthority()
    // Offset: 0x2B44780
    ::Fusion::PlayerRef get_InputAuthority();
    // public Fusion.PlayerRef get_StateAuthority()
    // Offset: 0x2B4B658
    ::Fusion::PlayerRef get_StateAuthority();
    // public System.Int32 get_AreaOfInterestLayerMask()
    // Offset: 0x2B4B670
    int get_AreaOfInterestLayerMask();
    // Fusion.NetworkObjectHeader* get_Header()
    // Offset: 0x2B4B688
    ::Fusion::NetworkObjectHeader* get_Header();
    // public System.Boolean get_HasInputAuthority()
    // Offset: 0x2B4B690
    bool get_HasInputAuthority();
    // public System.Boolean get_HasStateAuthority()
    // Offset: 0x2B4B6FC
    bool get_HasStateAuthority();
    // public System.Boolean get_IsProxy()
    // Offset: 0x2B4B788
    bool get_IsProxy();
    // public System.Boolean get_IsSpawnable()
    // Offset: 0x2B4B834
    bool get_IsSpawnable();
    // public System.Void set_IsSpawnable(System.Boolean value)
    // Offset: 0x2B4B844
    void set_IsSpawnable(bool value);
    // protected System.Void Awake()
    // Offset: 0x2B4B848
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x2B4B8DC
    void OnDestroy();
    // System.Void OnDestroyNeverActive()
    // Offset: 0x2B4B9D4
    void OnDestroyNeverActive();
    // private System.Void OnDestroyInternal()
    // Offset: 0x2B4B8E0
    void OnDestroyInternal();
    // System.Void ResetNetworkState()
    // Offset: 0x2B4B9D8
    void ResetNetworkState();
    // System.Void Defaults()
    // Offset: 0x2B4B9EC
    void Defaults();
    // static System.Int32 GetWordCount(Fusion.NetworkObject obj)
    // Offset: 0x2B4BA64
    static int GetWordCount(::Fusion::NetworkObject* obj);
    // public System.Int32 GetLocalAuthorityMask()
    // Offset: 0x2B4B79C
    int GetLocalAuthorityMask();
    // System.Int32 GetRpcSourceAuthorityMask(Fusion.PlayerRef player)
    // Offset: 0x2B4BC78
    int GetRpcSourceAuthorityMask(::Fusion::PlayerRef player);
    // public System.Void AssignInputAuthority(Fusion.PlayerRef player)
    // Offset: 0x2B4BD40
    void AssignInputAuthority(::Fusion::PlayerRef player);
    // public System.Void RequestStateAuthority()
    // Offset: 0x2B4BD8C
    void RequestStateAuthority();
    // public System.Void ReleaseStateAuthority()
    // Offset: 0x2B4BDE4
    void ReleaseStateAuthority();
    // public System.Void RemoveInputAuthority()
    // Offset: 0x2B4BE3C
    void RemoveInputAuthority();
    // public System.Void SetPlayerAlwaysInterested(Fusion.PlayerRef player, System.Boolean alwaysInterested)
    // Offset: 0x2B4BE50
    void SetPlayerAlwaysInterested(::Fusion::PlayerRef player, bool alwaysInterested);
    // public System.Void CopyStateFrom(Fusion.NetworkObject source)
    // Offset: 0x2B4BE88
    void CopyStateFrom(::Fusion::NetworkObject* source);
    // public System.Void CopyStateFromSceneObject(Fusion.NetworkObjectHeaderPtr source)
    // Offset: 0x2B4BF2C
    void CopyStateFromSceneObject(::Fusion::NetworkObjectHeaderPtr source);
    // public System.Void SetInterestGroup(Fusion.PlayerRef player, System.String group, System.Boolean interested)
    // Offset: 0x2B4BF5C
    void SetInterestGroup(::Fusion::PlayerRef player, ::StringW group, bool interested);
    // static public Fusion.NetworkId NetworkWrap(Fusion.NetworkRunner runner, Fusion.NetworkObject obj)
    // Offset: 0x2B4BF90
    static ::Fusion::NetworkId NetworkWrap(::Fusion::NetworkRunner* runner, ::Fusion::NetworkObject* obj);
    // static public System.Void NetworkUnwrap(Fusion.NetworkRunner runner, Fusion.NetworkId wrapper, ref Fusion.NetworkObject result)
    // Offset: 0x2B4C004
    static void NetworkUnwrap(::Fusion::NetworkRunner* runner, ::Fusion::NetworkId wrapper, ByRef<::Fusion::NetworkObject*> result);
    // System.Void DebugNotifySpawned()
    // Offset: 0x2B4C038
    void DebugNotifySpawned();
    // System.Void DebugNotifyDespawning()
    // Offset: 0x2B4C03C
    void DebugNotifyDespawning();
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B4C040
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // System.Void AddDebugMessagePrefix(System.Text.StringBuilder builder, in Fusion.LogOptions options, System.Boolean addGuid, System.Boolean addHashCode)
    // Offset: 0x2B46774
    void AddDebugMessagePrefix(::System::Text::StringBuilder* builder, ByRef<::Fusion::LogOptions> options, bool addGuid, bool addHashCode);
    // public System.Void .ctor()
    // Offset: 0x2B4C0D0
    // Implemented from: Fusion.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkObject*, creationType>()));
    }
  }; // Fusion.NetworkObject
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObject::ObjectInterestModes, "Fusion", "NetworkObject/ObjectInterestModes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObject::PredictionData, "Fusion", "NetworkObject/PredictionData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkObject::get_LastReceiveTick
// Il2CppName: get_LastReceiveTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_LastReceiveTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_LastReceiveTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::set_LastReceiveTick
// Il2CppName: set_LastReceiveTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::Tick)>(&Fusion::NetworkObject::set_LastReceiveTick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "set_LastReceiveTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsSceneObject
// Il2CppName: get_IsSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsSceneObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsSpawnedPrefabRoot
// Il2CppName: get_IsSpawnedPrefabRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsSpawnedPrefabRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsSpawnedPrefabRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsSpawnedPrefabNestedObject
// Il2CppName: get_IsSpawnedPrefabNestedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsSpawnedPrefabNestedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsSpawnedPrefabNestedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsPredictedSpawn
// Il2CppName: get_IsPredictedSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsPredictedSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsPredictedSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsPredictedDespawn
// Il2CppName: get_IsPredictedDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsPredictedDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsPredictedDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsInSimulation
// Il2CppName: get_IsInSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsInSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsInSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_InputAuthority
// Il2CppName: get_InputAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_InputAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_InputAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_StateAuthority
// Il2CppName: get_StateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_StateAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_StateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_AreaOfInterestLayerMask
// Il2CppName: get_AreaOfInterestLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_AreaOfInterestLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_AreaOfInterestLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_Header
// Il2CppName: get_Header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_Header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_Header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_HasInputAuthority
// Il2CppName: get_HasInputAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_HasInputAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_HasInputAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_HasStateAuthority
// Il2CppName: get_HasStateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_HasStateAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_HasStateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsProxy
// Il2CppName: get_IsProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::get_IsSpawnable
// Il2CppName: get_IsSpawnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::get_IsSpawnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "get_IsSpawnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::set_IsSpawnable
// Il2CppName: set_IsSpawnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(bool)>(&Fusion::NetworkObject::set_IsSpawnable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "set_IsSpawnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::OnDestroyNeverActive
// Il2CppName: OnDestroyNeverActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::OnDestroyNeverActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "OnDestroyNeverActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::OnDestroyInternal
// Il2CppName: OnDestroyInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::OnDestroyInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "OnDestroyInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::ResetNetworkState
// Il2CppName: ResetNetworkState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::ResetNetworkState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "ResetNetworkState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::Defaults
// Il2CppName: Defaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::Defaults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "Defaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::GetWordCount
// Il2CppName: GetWordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Fusion::NetworkObject*)>(&Fusion::NetworkObject::GetWordCount)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "GetWordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::GetLocalAuthorityMask
// Il2CppName: GetLocalAuthorityMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::GetLocalAuthorityMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "GetLocalAuthorityMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::GetRpcSourceAuthorityMask
// Il2CppName: GetRpcSourceAuthorityMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkObject::*)(::Fusion::PlayerRef)>(&Fusion::NetworkObject::GetRpcSourceAuthorityMask)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "GetRpcSourceAuthorityMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::AssignInputAuthority
// Il2CppName: AssignInputAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::PlayerRef)>(&Fusion::NetworkObject::AssignInputAuthority)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "AssignInputAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::RequestStateAuthority
// Il2CppName: RequestStateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::RequestStateAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "RequestStateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::ReleaseStateAuthority
// Il2CppName: ReleaseStateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::ReleaseStateAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "ReleaseStateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::RemoveInputAuthority
// Il2CppName: RemoveInputAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::RemoveInputAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "RemoveInputAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::SetPlayerAlwaysInterested
// Il2CppName: SetPlayerAlwaysInterested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::PlayerRef, bool)>(&Fusion::NetworkObject::SetPlayerAlwaysInterested)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* alwaysInterested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "SetPlayerAlwaysInterested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, alwaysInterested});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::CopyStateFrom
// Il2CppName: CopyStateFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkObject::CopyStateFrom)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "CopyStateFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::CopyStateFromSceneObject
// Il2CppName: CopyStateFromSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::NetworkObjectHeaderPtr)>(&Fusion::NetworkObject::CopyStateFromSceneObject)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeaderPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "CopyStateFromSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::SetInterestGroup
// Il2CppName: SetInterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::Fusion::PlayerRef, ::StringW, bool)>(&Fusion::NetworkObject::SetInterestGroup)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* interested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "SetInterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, group, interested});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::NetworkWrap
// Il2CppName: NetworkWrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (*)(::Fusion::NetworkRunner*, ::Fusion::NetworkObject*)>(&Fusion::NetworkObject::NetworkWrap)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "NetworkWrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::NetworkUnwrap
// Il2CppName: NetworkUnwrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkRunner*, ::Fusion::NetworkId, ByRef<::Fusion::NetworkObject*>)>(&Fusion::NetworkObject::NetworkUnwrap)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* wrapper = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "NetworkUnwrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, wrapper, result});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::DebugNotifySpawned
// Il2CppName: DebugNotifySpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::DebugNotifySpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "DebugNotifySpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::DebugNotifyDespawning
// Il2CppName: DebugNotifyDespawning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)()>(&Fusion::NetworkObject::DebugNotifyDespawning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "DebugNotifyDespawning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::NetworkObject::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::AddDebugMessagePrefix
// Il2CppName: AddDebugMessagePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObject::*)(::System::Text::StringBuilder*, ByRef<::Fusion::LogOptions>, bool, bool)>(&Fusion::NetworkObject::AddDebugMessagePrefix)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    static auto* addGuid = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addHashCode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObject*), "AddDebugMessagePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, options, addGuid, addHashCode});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
