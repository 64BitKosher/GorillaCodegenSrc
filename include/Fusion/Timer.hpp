// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Timer
  struct Timer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Timer, "Fusion", "Timer");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Timer
  // [TokenAttribute] Offset: FFFFFFFF
  struct Timer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int64 _start
    // Size: 0x8
    // Offset: 0x0
    int64_t start;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _elapsed
    // Size: 0x8
    // Offset: 0x8
    int64_t elapsed;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Byte _running
    // Size: 0x1
    // Offset: 0x10
    uint8_t running;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: Timer
    constexpr Timer(int64_t start_ = {}, int64_t elapsed_ = {}, uint8_t running_ = {}) noexcept : start{start_}, elapsed{elapsed_}, running{running_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int64 _start
    [[deprecated("Use field access instead!")]] int64_t& dyn__start();
    // Get instance field reference: private System.Int64 _elapsed
    [[deprecated("Use field access instead!")]] int64_t& dyn__elapsed();
    // Get instance field reference: private System.Byte _running
    [[deprecated("Use field access instead!")]] uint8_t& dyn__running();
    // static public Fusion.Timer StartNew()
    // Offset: 0x2AD9330
    static ::Fusion::Timer StartNew();
    // public System.Int64 get_ElapsedInTicks()
    // Offset: 0x2AD93AC
    int64_t get_ElapsedInTicks();
    // public System.Double get_ElapsedInMilliseconds()
    // Offset: 0x2AD9424
    double get_ElapsedInMilliseconds();
    // public System.Double get_ElapsedInSeconds()
    // Offset: 0x2AD94F4
    double get_ElapsedInSeconds();
    // public System.Boolean get_IsRunning()
    // Offset: 0x2AD95B8
    bool get_IsRunning();
    // public System.Void Start()
    // Offset: 0x2AD95C8
    void Start();
    // public System.Void Restart()
    // Offset: 0x2AD9634
    void Restart();
    // private System.Int64 GetDelta()
    // Offset: 0x2AD969C
    int64_t GetDelta();
  }; // Fusion.Timer
  #pragma pack(pop)
  static check_size<sizeof(Timer), 16 + sizeof(uint8_t)> __Fusion_TimerSizeCheck;
  static_assert(sizeof(Timer) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Timer::StartNew
// Il2CppName: StartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Timer (*)()>(&Fusion::Timer::StartNew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "StartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::get_ElapsedInTicks
// Il2CppName: get_ElapsedInTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Fusion::Timer::*)()>(&Fusion::Timer::get_ElapsedInTicks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "get_ElapsedInTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::get_ElapsedInMilliseconds
// Il2CppName: get_ElapsedInMilliseconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Timer::*)()>(&Fusion::Timer::get_ElapsedInMilliseconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "get_ElapsedInMilliseconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::get_ElapsedInSeconds
// Il2CppName: get_ElapsedInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Timer::*)()>(&Fusion::Timer::get_ElapsedInSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "get_ElapsedInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Timer::*)()>(&Fusion::Timer::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Timer::*)()>(&Fusion::Timer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::Restart
// Il2CppName: Restart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Timer::*)()>(&Fusion::Timer::Restart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "Restart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Timer::GetDelta
// Il2CppName: GetDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Fusion::Timer::*)()>(&Fusion::Timer::GetDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Timer), "GetDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
