// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Component because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RunnerVisibilityNode
  class RunnerVisibilityNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::RunnerVisibilityNode);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RunnerVisibilityNode*, "Fusion", "RunnerVisibilityNode");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.RunnerVisibilityNode
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class RunnerVisibilityNode : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Fusion::RunnerVisibilityNode::PreferredRunners
    struct PreferredRunners;
    // Nested type: ::Fusion::RunnerVisibilityNode::ComponentType
    struct ComponentType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.RunnerVisibilityNode/PreferredRunners
    // [TokenAttribute] Offset: FFFFFFFF
    struct PreferredRunners/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PreferredRunners
      constexpr PreferredRunners(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.RunnerVisibilityNode/PreferredRunners InputAuthority
      static constexpr const int InputAuthority = 0;
      // Get static field: static public Fusion.RunnerVisibilityNode/PreferredRunners InputAuthority
      static ::Fusion::RunnerVisibilityNode::PreferredRunners _get_InputAuthority();
      // Set static field: static public Fusion.RunnerVisibilityNode/PreferredRunners InputAuthority
      static void _set_InputAuthority(::Fusion::RunnerVisibilityNode::PreferredRunners value);
      // static field const value: static public Fusion.RunnerVisibilityNode/PreferredRunners Server
      static constexpr const int Server = 1;
      // Get static field: static public Fusion.RunnerVisibilityNode/PreferredRunners Server
      static ::Fusion::RunnerVisibilityNode::PreferredRunners _get_Server();
      // Set static field: static public Fusion.RunnerVisibilityNode/PreferredRunners Server
      static void _set_Server(::Fusion::RunnerVisibilityNode::PreferredRunners value);
      // static field const value: static public Fusion.RunnerVisibilityNode/PreferredRunners Client
      static constexpr const int Client = 2;
      // Get static field: static public Fusion.RunnerVisibilityNode/PreferredRunners Client
      static ::Fusion::RunnerVisibilityNode::PreferredRunners _get_Client();
      // Set static field: static public Fusion.RunnerVisibilityNode/PreferredRunners Client
      static void _set_Client(::Fusion::RunnerVisibilityNode::PreferredRunners value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.RunnerVisibilityNode/PreferredRunners
    #pragma pack(pop)
    static check_size<sizeof(RunnerVisibilityNode::PreferredRunners), 0 + sizeof(int)> __Fusion_RunnerVisibilityNode_PreferredRunnersSizeCheck;
    static_assert(sizeof(RunnerVisibilityNode::PreferredRunners) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.RunnerVisibilityNode/ComponentType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComponentType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ComponentType
      constexpr ComponentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.RunnerVisibilityNode/ComponentType None
      static constexpr const int None = 0;
      // Get static field: static public Fusion.RunnerVisibilityNode/ComponentType None
      static ::Fusion::RunnerVisibilityNode::ComponentType _get_None();
      // Set static field: static public Fusion.RunnerVisibilityNode/ComponentType None
      static void _set_None(::Fusion::RunnerVisibilityNode::ComponentType value);
      // static field const value: static public Fusion.RunnerVisibilityNode/ComponentType Renderer
      static constexpr const int Renderer = 1;
      // Get static field: static public Fusion.RunnerVisibilityNode/ComponentType Renderer
      static ::Fusion::RunnerVisibilityNode::ComponentType _get_Renderer();
      // Set static field: static public Fusion.RunnerVisibilityNode/ComponentType Renderer
      static void _set_Renderer(::Fusion::RunnerVisibilityNode::ComponentType value);
      // static field const value: static public Fusion.RunnerVisibilityNode/ComponentType Behaviour
      static constexpr const int Behaviour = 2;
      // Get static field: static public Fusion.RunnerVisibilityNode/ComponentType Behaviour
      static ::Fusion::RunnerVisibilityNode::ComponentType _get_Behaviour();
      // Set static field: static public Fusion.RunnerVisibilityNode/ComponentType Behaviour
      static void _set_Behaviour(::Fusion::RunnerVisibilityNode::ComponentType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.RunnerVisibilityNode/ComponentType
    #pragma pack(pop)
    static check_size<sizeof(RunnerVisibilityNode::ComponentType), 0 + sizeof(int)> __Fusion_RunnerVisibilityNode_ComponentTypeSizeCheck;
    static_assert(sizeof(RunnerVisibilityNode::ComponentType) == 0x4);
    public:
    // public Fusion.RunnerVisibilityNode/PreferredRunners PreferredRunner
    // Size: 0x4
    // Offset: 0x20
    ::Fusion::RunnerVisibilityNode::PreferredRunners PreferredRunner;
    // Field size check
    static_assert(sizeof(::Fusion::RunnerVisibilityNode::PreferredRunners) == 0x4);
    // Padding between fields: PreferredRunner and: Component
    char __padding0[0x4] = {};
    // public UnityEngine.Component Component
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Component* Component;
    // Field size check
    static_assert(sizeof(::UnityEngine::Component*) == 0x8);
    // System.String Guid
    // Size: 0x8
    // Offset: 0x30
    ::StringW Guid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Boolean _showAtRuntime
    // Size: 0x1
    // Offset: 0x38
    bool showAtRuntime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showAtRuntime and: runner
    char __padding3[0x7] = {};
    // private Fusion.NetworkRunner _runner
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::NetworkRunner* runner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // private Fusion.RunnerVisibilityNode/ComponentType _componentType
    // Size: 0x4
    // Offset: 0x48
    ::Fusion::RunnerVisibilityNode::ComponentType componentType;
    // Field size check
    static_assert(sizeof(::Fusion::RunnerVisibilityNode::ComponentType) == 0x4);
    // private System.Boolean _originalState
    // Size: 0x1
    // Offset: 0x4C
    bool originalState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: originalState and: node
    char __padding6[0x3] = {};
    // private System.Collections.Generic.LinkedListNode`1<Fusion.RunnerVisibilityNode> _node
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>* node;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>*) == 0x8);
    public:
    // Get static field: static private readonly System.Type[] _recognizedBehaviourTypes
    static ::ArrayW<::System::Type*> _get__recognizedBehaviourTypes();
    // Set static field: static private readonly System.Type[] _recognizedBehaviourTypes
    static void _set__recognizedBehaviourTypes(::ArrayW<::System::Type*> value);
    // Get static field: static private readonly System.String[] _recognizedBehaviourNames
    static ::ArrayW<::StringW> _get__recognizedBehaviourNames();
    // Set static field: static private readonly System.String[] _recognizedBehaviourNames
    static void _set__recognizedBehaviourNames(::ArrayW<::StringW> value);
    // Get static field: static readonly System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Fusion.RunnerVisibilityNode>> CommonObjectLookup
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::Fusion::RunnerVisibilityNode*>*>* _get_CommonObjectLookup();
    // Set static field: static readonly System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<Fusion.RunnerVisibilityNode>> CommonObjectLookup
    static void _set_CommonObjectLookup(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::Fusion::RunnerVisibilityNode*>*>* value);
    // Get instance field reference: public Fusion.RunnerVisibilityNode/PreferredRunners PreferredRunner
    [[deprecated("Use field access instead!")]] ::Fusion::RunnerVisibilityNode::PreferredRunners& dyn_PreferredRunner();
    // Get instance field reference: public UnityEngine.Component Component
    [[deprecated("Use field access instead!")]] ::UnityEngine::Component*& dyn_Component();
    // Get instance field reference: System.String Guid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Guid();
    // Get instance field reference: System.Boolean _showAtRuntime
    [[deprecated("Use field access instead!")]] bool& dyn__showAtRuntime();
    // Get instance field reference: private Fusion.NetworkRunner _runner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn__runner();
    // Get instance field reference: private Fusion.RunnerVisibilityNode/ComponentType _componentType
    [[deprecated("Use field access instead!")]] ::Fusion::RunnerVisibilityNode::ComponentType& dyn__componentType();
    // Get instance field reference: private System.Boolean _originalState
    [[deprecated("Use field access instead!")]] bool& dyn__originalState();
    // Get instance field reference: private System.Collections.Generic.LinkedListNode`1<Fusion.RunnerVisibilityNode> _node
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>*& dyn__node();
    // public System.Boolean get_DefaultState()
    // Offset: 0x2B15218
    bool get_DefaultState();
    // public System.Void set_DefaultState(System.Boolean value)
    // Offset: 0x2B15220
    void set_DefaultState(bool value);
    // System.Boolean get_Enabled()
    // Offset: 0x2B1522C
    bool get_Enabled();
    // System.Void set_Enabled(System.Boolean value)
    // Offset: 0x2B15308
    void set_Enabled(bool value);
    // static System.Boolean IsRecognized(System.Type type)
    // Offset: 0x2B15448
    static bool IsRecognized(::System::Type* type);
    // private System.Void Reset()
    // Offset: 0x2B1559C
    void Reset();
    // private System.Boolean AssociateComponent(UnityEngine.Component component)
    // Offset: 0x2B155E4
    bool AssociateComponent(::UnityEngine::Component* component);
    // private System.Void OnValidate()
    // Offset: 0x2B15740
    void OnValidate();
    // private System.Void Awake()
    // Offset: 0x2B158A4
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2B158BC
    void OnDestroy();
    // private System.Void Initialize(UnityEngine.Component comp, Fusion.NetworkRunner runner, System.Collections.Generic.LinkedListNode`1<Fusion.RunnerVisibilityNode> node)
    // Offset: 0x2B15B68
    void Initialize(::UnityEngine::Component* comp, ::Fusion::NetworkRunner* runner, ::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>* node);
    // public System.Void SetEnabled(System.Boolean enabled)
    // Offset: 0x2B15CE4
    void SetEnabled(bool enabled);
    // static public System.Void AddVisibilityNodes(UnityEngine.GameObject go, Fusion.NetworkRunner runner)
    // Offset: 0x2B15D30
    static void AddVisibilityNodes(::UnityEngine::GameObject* go, ::Fusion::NetworkRunner* runner);
    // static private System.Void AddNodeToCommonLookup(Fusion.RunnerVisibilityNode node)
    // Offset: 0x2B167C0
    static void AddNodeToCommonLookup(::Fusion::RunnerVisibilityNode* node);
    // static private System.Void CollectBehavioursAndAddNodes(UnityEngine.GameObject go, Fusion.NetworkRunner runner, Fusion.RunnerVisibilityNode[] existingNodes)
    // Offset: 0x2B161A4
    static void CollectBehavioursAndAddNodes(::UnityEngine::GameObject* go, ::Fusion::NetworkRunner* runner, ::ArrayW<::Fusion::RunnerVisibilityNode*> existingNodes);
    // static private System.Void RegisterNode(Fusion.RunnerVisibilityNode node, Fusion.NetworkRunner runner, UnityEngine.Component comp)
    // Offset: 0x2B16988
    static void RegisterNode(::Fusion::RunnerVisibilityNode* node, ::Fusion::NetworkRunner* runner, ::UnityEngine::Component* comp);
    // static private System.Void UnregisterNode(Fusion.RunnerVisibilityNode node)
    // Offset: 0x2B15910
    static void UnregisterNode(::Fusion::RunnerVisibilityNode* node);
    // static public System.Void RefreshAllRunnerVisibilities()
    // Offset: 0x2B17060
    static void RefreshAllRunnerVisibilities();
    // static System.Void RefreshRunnerVisibility(Fusion.NetworkRunner runner, System.Boolean refreshCommonObjects)
    // Offset: 0x2B165CC
    static void RefreshRunnerVisibility(::Fusion::NetworkRunner* runner, bool refreshCommonObjects);
    // static System.Void RefreshCommonObjectVisibilities()
    // Offset: 0x2B16A08
    static void RefreshCommonObjectVisibilities();
    // static System.Void ResetStatics()
    // Offset: 0x2B17170
    static void ResetStatics();
    // public System.Void .ctor()
    // Offset: 0x2B171E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RunnerVisibilityNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::RunnerVisibilityNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RunnerVisibilityNode*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2B171F0
    static void _cctor();
  }; // Fusion.RunnerVisibilityNode
  #pragma pack(pop)
  static check_size<sizeof(RunnerVisibilityNode), 80 + sizeof(::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>*)> __Fusion_RunnerVisibilityNodeSizeCheck;
  static_assert(sizeof(RunnerVisibilityNode) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RunnerVisibilityNode::ComponentType, "Fusion", "RunnerVisibilityNode/ComponentType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RunnerVisibilityNode::PreferredRunners, "Fusion", "RunnerVisibilityNode/PreferredRunners");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::get_DefaultState
// Il2CppName: get_DefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::get_DefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "get_DefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::set_DefaultState
// Il2CppName: set_DefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)(bool)>(&Fusion::RunnerVisibilityNode::set_DefaultState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "set_DefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::set_Enabled
// Il2CppName: set_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)(bool)>(&Fusion::RunnerVisibilityNode::set_Enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "set_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::IsRecognized
// Il2CppName: IsRecognized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Fusion::RunnerVisibilityNode::IsRecognized)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "IsRecognized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::AssociateComponent
// Il2CppName: AssociateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RunnerVisibilityNode::*)(::UnityEngine::Component*)>(&Fusion::RunnerVisibilityNode::AssociateComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "AssociateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)()>(&Fusion::RunnerVisibilityNode::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)(::UnityEngine::Component*, ::Fusion::NetworkRunner*, ::System::Collections::Generic::LinkedListNode_1<::Fusion::RunnerVisibilityNode*>*)>(&Fusion::RunnerVisibilityNode::Initialize)> {
  static const MethodInfo* get() {
    static auto* comp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* node = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "RunnerVisibilityNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comp, runner, node});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RunnerVisibilityNode::*)(bool)>(&Fusion::RunnerVisibilityNode::SetEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::AddVisibilityNodes
// Il2CppName: AddVisibilityNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ::Fusion::NetworkRunner*)>(&Fusion::RunnerVisibilityNode::AddVisibilityNodes)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "AddVisibilityNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, runner});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::AddNodeToCommonLookup
// Il2CppName: AddNodeToCommonLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::RunnerVisibilityNode*)>(&Fusion::RunnerVisibilityNode::AddNodeToCommonLookup)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Fusion", "RunnerVisibilityNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "AddNodeToCommonLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::CollectBehavioursAndAddNodes
// Il2CppName: CollectBehavioursAndAddNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ::Fusion::NetworkRunner*, ::ArrayW<::Fusion::RunnerVisibilityNode*>)>(&Fusion::RunnerVisibilityNode::CollectBehavioursAndAddNodes)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* existingNodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "RunnerVisibilityNode"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "CollectBehavioursAndAddNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, runner, existingNodes});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::RegisterNode
// Il2CppName: RegisterNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::RunnerVisibilityNode*, ::Fusion::NetworkRunner*, ::UnityEngine::Component*)>(&Fusion::RunnerVisibilityNode::RegisterNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Fusion", "RunnerVisibilityNode")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* comp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "RegisterNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, runner, comp});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::UnregisterNode
// Il2CppName: UnregisterNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::RunnerVisibilityNode*)>(&Fusion::RunnerVisibilityNode::UnregisterNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Fusion", "RunnerVisibilityNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "UnregisterNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::RefreshAllRunnerVisibilities
// Il2CppName: RefreshAllRunnerVisibilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::RunnerVisibilityNode::RefreshAllRunnerVisibilities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "RefreshAllRunnerVisibilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::RefreshRunnerVisibility
// Il2CppName: RefreshRunnerVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkRunner*, bool)>(&Fusion::RunnerVisibilityNode::RefreshRunnerVisibility)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* refreshCommonObjects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "RefreshRunnerVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, refreshCommonObjects});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::RefreshCommonObjectVisibilities
// Il2CppName: RefreshCommonObjectVisibilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::RunnerVisibilityNode::RefreshCommonObjectVisibilities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "RefreshCommonObjectVisibilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::ResetStatics
// Il2CppName: ResetStatics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::RunnerVisibilityNode::ResetStatics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), "ResetStatics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::RunnerVisibilityNode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::RunnerVisibilityNode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RunnerVisibilityNode*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
