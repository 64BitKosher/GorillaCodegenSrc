// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransform
#include "Fusion/NetworkTransform.hpp"
// Including type: Fusion.NetworkTransform/IInterpolationImplementation
#include "Fusion/NetworkTransform_IInterpolationImplementation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: InterpolationData
  struct InterpolationData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkTransform::ConsecutiveStateInterp);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransform::ConsecutiveStateInterp*, "Fusion", "NetworkTransform/ConsecutiveStateInterp");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkTransform/ConsecutiveStateInterp
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkTransform::ConsecutiveStateInterp : public ::Il2CppObject/*, public ::Fusion::NetworkTransform::IInterpolationImplementation*/ {
    public:
    public:
    // private Fusion.NetworkTransform _nt
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::NetworkTransform* nt;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::NetworkTransform::IInterpolationImplementation
    operator ::Fusion::NetworkTransform::IInterpolationImplementation() noexcept {
      return *reinterpret_cast<::Fusion::NetworkTransform::IInterpolationImplementation*>(this);
    }
    // Creating conversion operator: operator ::Fusion::NetworkTransform*
    constexpr operator ::Fusion::NetworkTransform*() const noexcept {
      return nt;
    }
    // Get instance field reference: private Fusion.NetworkTransform _nt
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform*& dyn__nt();
    // public System.Void Reset(Fusion.NetworkTransform nt)
    // Offset: 0x2B225D0
    void Reset(::Fusion::NetworkTransform* nt);
    // private System.Void Fusion.NetworkTransform.IInterpolationImplementation.AfterApplyInterpolatedTransform()
    // Offset: 0x2B225D8
    void Fusion_NetworkTransform_IInterpolationImplementation_AfterApplyInterpolatedTransform();
    // private System.Boolean Fusion.NetworkTransform.IInterpolationImplementation.TryComputeInterpolatedTransform(out Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0x2B225DC
    bool Fusion_NetworkTransform_IInterpolationImplementation_TryComputeInterpolatedTransform(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // public System.Void ComputeInterpolatedTransform(ref Fusion.InterpolationData data, out Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0x2B2265C
    void ComputeInterpolatedTransform(ByRef<::Fusion::InterpolationData> data, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // static public System.Void InterpolatePositionRotation(Fusion.NetworkTransform nt, UnityEngine.Vector3 fromPos, UnityEngine.Quaternion fromRot, UnityEngine.Vector3 toPos, UnityEngine.Quaternion toRot, System.Single alpha, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x2B22764
    static void InterpolatePositionRotation(::Fusion::NetworkTransform* nt, ::UnityEngine::Vector3 fromPos, ::UnityEngine::Quaternion fromRot, ::UnityEngine::Vector3 toPos, ::UnityEngine::Quaternion toRot, float alpha, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot);
    // public System.Void .ctor()
    // Offset: 0x2B20504
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkTransform::ConsecutiveStateInterp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkTransform::ConsecutiveStateInterp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkTransform::ConsecutiveStateInterp*, creationType>()));
    }
  }; // Fusion.NetworkTransform/ConsecutiveStateInterp
  #pragma pack(pop)
  static check_size<sizeof(NetworkTransform::ConsecutiveStateInterp), 16 + sizeof(::Fusion::NetworkTransform*)> __Fusion_NetworkTransform_ConsecutiveStateInterpSizeCheck;
  static_assert(sizeof(NetworkTransform::ConsecutiveStateInterp) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::ConsecutiveStateInterp::*)(::Fusion::NetworkTransform*)>(&Fusion::NetworkTransform::ConsecutiveStateInterp::Reset)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::ConsecutiveStateInterp*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::Fusion_NetworkTransform_IInterpolationImplementation_AfterApplyInterpolatedTransform
// Il2CppName: Fusion.NetworkTransform.IInterpolationImplementation.AfterApplyInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::ConsecutiveStateInterp::*)()>(&Fusion::NetworkTransform::ConsecutiveStateInterp::Fusion_NetworkTransform_IInterpolationImplementation_AfterApplyInterpolatedTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::ConsecutiveStateInterp*), "Fusion.NetworkTransform.IInterpolationImplementation.AfterApplyInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::Fusion_NetworkTransform_IInterpolationImplementation_TryComputeInterpolatedTransform
// Il2CppName: Fusion.NetworkTransform.IInterpolationImplementation.TryComputeInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::ConsecutiveStateInterp::*)(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::ConsecutiveStateInterp::Fusion_NetworkTransform_IInterpolationImplementation_TryComputeInterpolatedTransform)> {
  static const MethodInfo* get() {
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::ConsecutiveStateInterp*), "Fusion.NetworkTransform.IInterpolationImplementation.TryComputeInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::ComputeInterpolatedTransform
// Il2CppName: ComputeInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::ConsecutiveStateInterp::*)(ByRef<::Fusion::InterpolationData>, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::ConsecutiveStateInterp::ComputeInterpolatedTransform)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::ConsecutiveStateInterp*), "ComputeInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::InterpolatePositionRotation
// Il2CppName: InterpolatePositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkTransform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Fusion::NetworkTransform::ConsecutiveStateInterp::InterpolatePositionRotation)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform")->byval_arg;
    static auto* fromPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fromRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* toPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* toRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::ConsecutiveStateInterp*), "InterpolatePositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt, fromPos, fromRot, toPos, toRot, alpha, pos, rot});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ConsecutiveStateInterp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
