// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationPacketEnvelope
  struct SimulationPacketEnvelope;
  // Forward declaring type: NetworkId
  struct NetworkId;
  // Forward declaring type: NetworkObjectDestroyFlags
  struct NetworkObjectDestroyFlags;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::StateReplicator);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::StateReplicator*, "Fusion", "Simulation/StateReplicator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/StateReplicator
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::StateReplicator : public ::Il2CppObject {
    public:
    public:
    // private readonly Fusion.Simulation <Simulation>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Simulation* Simulation;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation*) == 0x8);
    // private readonly Fusion.Tick <SharedTick>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::Tick SharedTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    public:
    // Get instance field reference: private readonly Fusion.Simulation <Simulation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation*& dyn_$Simulation$k__BackingField();
    // Get instance field reference: private readonly Fusion.Tick <SharedTick>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_$SharedTick$k__BackingField();
    // protected Fusion.Simulation get_Simulation()
    // Offset: 0x2B7A43C
    ::Fusion::Simulation* get_Simulation();
    // public System.Boolean get_UseObjectInterest()
    // Offset: 0x2B7A444
    bool get_UseObjectInterest();
    // public System.Boolean get_ClientToServer()
    // Offset: 0x2B7A44C
    bool get_ClientToServer();
    // public Fusion.Tick get_SharedTick()
    // Offset: 0x2B7A454
    ::Fusion::Tick get_SharedTick();
    // protected System.Void .ctor(Fusion.Simulation simulation)
    // Offset: 0x2B7A45C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::StateReplicator* New_ctor(::Fusion::Simulation* simulation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::StateReplicator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::StateReplicator*, creationType>(simulation)));
    }
    // public System.Void SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // public System.Void RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RecvPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void SendBegin()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendBegin();
    // public System.Void SendEnd()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendEnd();
    // public System.Void OnPacketLost(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnPacketLost(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
    // public System.Void OnPacketDelivered(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnPacketDelivered(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
    // public System.Void Dispose()
    // Offset: 0x2B7A48C
    void Dispose();
    // public System.Void UpdateRemotePrefabs()
    // Offset: 0x2B7A490
    void UpdateRemotePrefabs();
    // public System.Void OnObjectDestroyed(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    // Offset: 0x2B7A494
    void OnObjectDestroyed(::Fusion::NetworkId id, ::Fusion::NetworkObjectDestroyFlags flags);
    // public System.Void OnObjectSpawnedLocal(Fusion.NetworkId id)
    // Offset: 0x2B7A498
    void OnObjectSpawnedLocal(::Fusion::NetworkId id);
    // public System.Void OnObjectInterestGroupChange(Fusion.PlayerRef player, Fusion.NetworkId id, System.String group, System.Boolean interested)
    // Offset: 0x2B7A49C
    void OnObjectInterestGroupChange(::Fusion::PlayerRef player, ::Fusion::NetworkId id, ::StringW group, bool interested);
    // System.Boolean HasObjectInterest(Fusion.PlayerRef player, Fusion.NetworkId id)
    // Offset: 0x2B7A4A0
    bool HasObjectInterest(::Fusion::PlayerRef player, ::Fusion::NetworkId id);
    // System.Void AssertVerifyNothingIsPending()
    // Offset: 0x2B7A4A8
    void AssertVerifyNothingIsPending();
  }; // Fusion.Simulation/StateReplicator
  #pragma pack(pop)
  static check_size<sizeof(Simulation::StateReplicator), 24 + sizeof(::Fusion::Tick)> __Fusion_Simulation_StateReplicatorSizeCheck;
  static_assert(sizeof(Simulation::StateReplicator) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::get_Simulation
// Il2CppName: get_Simulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation* (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::get_Simulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "get_Simulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::get_UseObjectInterest
// Il2CppName: get_UseObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::get_UseObjectInterest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "get_UseObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::get_ClientToServer
// Il2CppName: get_ClientToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::get_ClientToServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "get_ClientToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::get_SharedTick
// Il2CppName: get_SharedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::get_SharedTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "get_SharedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::SendPacket
// Il2CppName: SendPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicator::SendPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "SendPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::RecvPacket
// Il2CppName: RecvPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicator::RecvPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "RecvPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::SendBegin
// Il2CppName: SendBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::SendBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "SendBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::SendEnd
// Il2CppName: SendEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::SendEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "SendEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::OnPacketLost
// Il2CppName: OnPacketLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicator::OnPacketLost)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "OnPacketLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::OnPacketDelivered
// Il2CppName: OnPacketDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicator::OnPacketDelivered)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "OnPacketDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::UpdateRemotePrefabs
// Il2CppName: UpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::UpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "UpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::OnObjectDestroyed
// Il2CppName: OnObjectDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::NetworkId, ::Fusion::NetworkObjectDestroyFlags)>(&Fusion::Simulation::StateReplicator::OnObjectDestroyed)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectDestroyFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "OnObjectDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, flags});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::OnObjectSpawnedLocal
// Il2CppName: OnObjectSpawnedLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::NetworkId)>(&Fusion::Simulation::StateReplicator::OnObjectSpawnedLocal)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "OnObjectSpawnedLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::OnObjectInterestGroupChange
// Il2CppName: OnObjectInterestGroupChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)(::Fusion::PlayerRef, ::Fusion::NetworkId, ::StringW, bool)>(&Fusion::Simulation::StateReplicator::OnObjectInterestGroupChange)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* interested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "OnObjectInterestGroupChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, id, group, interested});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::HasObjectInterest
// Il2CppName: HasObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicator::*)(::Fusion::PlayerRef, ::Fusion::NetworkId)>(&Fusion::Simulation::StateReplicator::HasObjectInterest)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "HasObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicator::AssertVerifyNothingIsPending
// Il2CppName: AssertVerifyNothingIsPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicator::*)()>(&Fusion::Simulation::StateReplicator::AssertVerifyNothingIsPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicator*), "AssertVerifyNothingIsPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
