// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Collections
namespace Fusion::Collections {
  // Skipping declaration: _RangeIterator because it is already included!
  // Skipping declaration: _ReverseRangeIterator because it is already included!
  // Skipping declaration: <GetEnumerator>d__29 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Fusion.Collections
namespace Fusion::Collections {
  // Forward declaring type: RingArray`1<T>
  template<typename T>
  class RingArray_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Fusion::Collections::RingArray_1, "Fusion.Collections", "RingArray`1");
// Type namespace: Fusion.Collections
namespace Fusion::Collections {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.Collections.RingArray`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T>
  class RingArray_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
    public:
    // Nested type: ::Fusion::Collections::RingArray_1::_RangeIterator<T>
    struct _RangeIterator;
    // Nested type: ::Fusion::Collections::RingArray_1::_ReverseRangeIterator<T>
    struct _ReverseRangeIterator;
    // Nested type: ::Fusion::Collections::RingArray_1::$GetEnumerator$d__29<T>
    class $GetEnumerator$d__29;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Collections.RingArray`1/_RangeIterator
    // [TokenAttribute] Offset: FFFFFFFF
    struct _RangeIterator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
      public:
      using declaring_type = RingArray_1<T>*;
      static constexpr std::string_view NESTED_NAME = "_RangeIterator";
      static constexpr bool IS_VALUE_TYPE = true;
      // Nested type: ::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1<T>
      class $GetEnumerator$d__1;
      // WARNING Size may be invalid!
      // Autogenerated type: Fusion.Collections.RingArray`1/_RangeIterator/<GetEnumerator>d__1
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      class $GetEnumerator$d__1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
        public:
        using declaring_type = typename RingArray_1<T>::_RangeIterator;
        static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__1";
        static constexpr bool IS_VALUE_TYPE = false;
        public:
        // private System.Int32 <>1__state
        // Size: 0x4
        // Offset: 0x0
        int $$1__state;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private T <>2__current
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        T $$2__current;
        // public Fusion.Collections.RingArray`1/_RangeIterator<T> <>4__this
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator $$4__this;
        // private T[] <array>5__2
        // Size: 0x8
        // Offset: 0x0
        ::ArrayW<T> $array$5__2;
        // Field size check
        static_assert(sizeof(::ArrayW<T>) == 0x8);
        // private System.Int32 <modmask>5__3
        // Size: 0x4
        // Offset: 0x0
        int $modmask$5__3;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <increment>5__4
        // Size: 0x4
        // Offset: 0x0
        int $increment$5__4;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <i>5__5
        // Size: 0x4
        // Offset: 0x0
        int $i$5__5;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <end>5__6
        // Size: 0x4
        // Offset: 0x0
        int $end$5__6;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
        operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
          return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <>1__state
        [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$$1__state");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private T <>2__current
        [[deprecated("Use field access instead!")]] T& dyn_$$2__current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$$2__current");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
          return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: public Fusion.Collections.RingArray`1/_RangeIterator<T> <>4__this
        [[deprecated("Use field access instead!")]] typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator& dyn_$$4__this() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$$4__this");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
          return *reinterpret_cast<typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private T[] <array>5__2
        [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_$array$5__2() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$array$5__2");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<array>5__2"))->offset;
          return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <modmask>5__3
        [[deprecated("Use field access instead!")]] int& dyn_$modmask$5__3() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$modmask$5__3");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<modmask>5__3"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <increment>5__4
        [[deprecated("Use field access instead!")]] int& dyn_$increment$5__4() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$increment$5__4");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<increment>5__4"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <i>5__5
        [[deprecated("Use field access instead!")]] int& dyn_$i$5__5() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$i$5__5");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__5"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <end>5__6
        [[deprecated("Use field access instead!")]] int& dyn_$end$5__6() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::dyn_$end$5__6");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<end>5__6"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // public System.Void .ctor(System.Int32 <>1__state)
        // Offset: 0xFFFFFFFFFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        static typename RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1* New_ctor(int $$1__state) {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::.ctor");
          return THROW_UNLESS((::il2cpp_utils::New<typename RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*, creationType>($$1__state)));
        }
        // private System.Void System.IDisposable.Dispose()
        // Offset: 0xFFFFFFFFFFFFFFFF
        void System_IDisposable_Dispose() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::System.IDisposable.Dispose");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*), -1));
          ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
        }
        // private System.Boolean MoveNext()
        // Offset: 0xFFFFFFFFFFFFFFFF
        bool MoveNext() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::MoveNext");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
        }
        // private T System.Collections.Generic.IEnumerator<T>.get_Current()
        // Offset: 0xFFFFFFFFFFFFFFFF
        T System_Collections_Generic_IEnumerator$T$_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::System.Collections.Generic.IEnumerator<T>.get_Current");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFFFFFFFFFF
        void System_Collections_IEnumerator_Reset() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::System.Collections.IEnumerator.Reset");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*), -1));
          ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFFFFFFFFFF
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::$GetEnumerator$d__1::System.Collections.IEnumerator.get_Current");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
        }
      }; // Fusion.Collections.RingArray`1/_RangeIterator/<GetEnumerator>d__1
      // Could not write size check! Type: Fusion.Collections.RingArray`1/_RangeIterator/<GetEnumerator>d__1 is generic, or has no fields that are valid for size checks!
      public:
      // private Fusion.Collections.RingArray`1<T> ra
      // Size: 0x8
      // Offset: 0x0
      ::Fusion::Collections::RingArray_1<T>* ra;
      // Field size check
      static_assert(sizeof(::Fusion::Collections::RingArray_1<T>*) == 0x8);
      public:
      // Creating value type constructor for type: _RangeIterator
      constexpr _RangeIterator(::Fusion::Collections::RingArray_1<T>* ra_ = {}) noexcept : ra{ra_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
      operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
      }
      // Creating conversion operator: operator ::Fusion::Collections::RingArray_1<T>*
      constexpr operator ::Fusion::Collections::RingArray_1<T>*() const noexcept {
        return ra;
      }
      // Autogenerated instance field getter
      // Get instance field: private Fusion.Collections.RingArray`1<T> ra
      [[deprecated("Use field access instead!")]] ::Fusion::Collections::RingArray_1<T>*& dyn_ra() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::dyn_ra");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ra"))->offset;
        return *reinterpret_cast<::Fusion::Collections::RingArray_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_RangeIterator::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(Fusion.Collections.RingArray`1<T> ringArray)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // ABORTED: conflicts with another method.  _RangeIterator(::Fusion::Collections::RingArray_1<T>* ringArray)
    }; // Fusion.Collections.RingArray`1/_RangeIterator
    // Could not write size check! Type: Fusion.Collections.RingArray`1/_RangeIterator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Collections.RingArray`1/_ReverseRangeIterator
    // [TokenAttribute] Offset: FFFFFFFF
    struct _ReverseRangeIterator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
      public:
      using declaring_type = RingArray_1<T>*;
      static constexpr std::string_view NESTED_NAME = "_ReverseRangeIterator";
      static constexpr bool IS_VALUE_TYPE = true;
      // Nested type: ::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1<T>
      class $GetEnumerator$d__1;
      // WARNING Size may be invalid!
      // Autogenerated type: Fusion.Collections.RingArray`1/_ReverseRangeIterator/<GetEnumerator>d__1
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      class $GetEnumerator$d__1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
        public:
        using declaring_type = typename RingArray_1<T>::_ReverseRangeIterator;
        static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__1";
        static constexpr bool IS_VALUE_TYPE = false;
        public:
        // private System.Int32 <>1__state
        // Size: 0x4
        // Offset: 0x0
        int $$1__state;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private T <>2__current
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        T $$2__current;
        // public Fusion.Collections.RingArray`1/_ReverseRangeIterator<T> <>4__this
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator $$4__this;
        // private T[] <array>5__2
        // Size: 0x8
        // Offset: 0x0
        ::ArrayW<T> $array$5__2;
        // Field size check
        static_assert(sizeof(::ArrayW<T>) == 0x8);
        // private System.Int32 <modmask>5__3
        // Size: 0x4
        // Offset: 0x0
        int $modmask$5__3;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <increment>5__4
        // Size: 0x4
        // Offset: 0x0
        int $increment$5__4;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <i>5__5
        // Size: 0x4
        // Offset: 0x0
        int $i$5__5;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 <end>5__6
        // Size: 0x4
        // Offset: 0x0
        int $end$5__6;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
        operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
          return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <>1__state
        [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$$1__state");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private T <>2__current
        [[deprecated("Use field access instead!")]] T& dyn_$$2__current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$$2__current");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
          return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: public Fusion.Collections.RingArray`1/_ReverseRangeIterator<T> <>4__this
        [[deprecated("Use field access instead!")]] typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator& dyn_$$4__this() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$$4__this");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
          return *reinterpret_cast<typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private T[] <array>5__2
        [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_$array$5__2() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$array$5__2");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<array>5__2"))->offset;
          return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <modmask>5__3
        [[deprecated("Use field access instead!")]] int& dyn_$modmask$5__3() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$modmask$5__3");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<modmask>5__3"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <increment>5__4
        [[deprecated("Use field access instead!")]] int& dyn_$increment$5__4() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$increment$5__4");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<increment>5__4"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <i>5__5
        [[deprecated("Use field access instead!")]] int& dyn_$i$5__5() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$i$5__5");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__5"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // Autogenerated instance field getter
        // Get instance field: private System.Int32 <end>5__6
        [[deprecated("Use field access instead!")]] int& dyn_$end$5__6() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::dyn_$end$5__6");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<end>5__6"))->offset;
          return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // public System.Void .ctor(System.Int32 <>1__state)
        // Offset: 0xFFFFFFFFFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        static typename RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1* New_ctor(int $$1__state) {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::.ctor");
          return THROW_UNLESS((::il2cpp_utils::New<typename RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*, creationType>($$1__state)));
        }
        // private System.Void System.IDisposable.Dispose()
        // Offset: 0xFFFFFFFFFFFFFFFF
        void System_IDisposable_Dispose() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::System.IDisposable.Dispose");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*), -1));
          ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
        }
        // private System.Boolean MoveNext()
        // Offset: 0xFFFFFFFFFFFFFFFF
        bool MoveNext() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::MoveNext");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
        }
        // private T System.Collections.Generic.IEnumerator<T>.get_Current()
        // Offset: 0xFFFFFFFFFFFFFFFF
        T System_Collections_Generic_IEnumerator$T$_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::System.Collections.Generic.IEnumerator<T>.get_Current");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFFFFFFFFFF
        void System_Collections_IEnumerator_Reset() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::System.Collections.IEnumerator.Reset");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*), -1));
          ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFFFFFFFFFF
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::$GetEnumerator$d__1::System.Collections.IEnumerator.get_Current");
          auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator::$GetEnumerator$d__1*), -1));
          return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
        }
      }; // Fusion.Collections.RingArray`1/_ReverseRangeIterator/<GetEnumerator>d__1
      // Could not write size check! Type: Fusion.Collections.RingArray`1/_ReverseRangeIterator/<GetEnumerator>d__1 is generic, or has no fields that are valid for size checks!
      public:
      // private Fusion.Collections.RingArray`1<T> ra
      // Size: 0x8
      // Offset: 0x0
      ::Fusion::Collections::RingArray_1<T>* ra;
      // Field size check
      static_assert(sizeof(::Fusion::Collections::RingArray_1<T>*) == 0x8);
      public:
      // Creating value type constructor for type: _ReverseRangeIterator
      constexpr _ReverseRangeIterator(::Fusion::Collections::RingArray_1<T>* ra_ = {}) noexcept : ra{ra_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
      operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
      }
      // Creating conversion operator: operator ::Fusion::Collections::RingArray_1<T>*
      constexpr operator ::Fusion::Collections::RingArray_1<T>*() const noexcept {
        return ra;
      }
      // Autogenerated instance field getter
      // Get instance field: private Fusion.Collections.RingArray`1<T> ra
      [[deprecated("Use field access instead!")]] ::Fusion::Collections::RingArray_1<T>*& dyn_ra() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::dyn_ra");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ra"))->offset;
        return *reinterpret_cast<::Fusion::Collections::RingArray_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::_ReverseRangeIterator::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(Fusion.Collections.RingArray`1<T> ringArray)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // ABORTED: conflicts with another method.  _ReverseRangeIterator(::Fusion::Collections::RingArray_1<T>* ringArray)
    }; // Fusion.Collections.RingArray`1/_ReverseRangeIterator
    // Could not write size check! Type: Fusion.Collections.RingArray`1/_ReverseRangeIterator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Fusion.Collections.RingArray`1/<GetEnumerator>d__29
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetEnumerator$d__29 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = RingArray_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__29";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T <>2__current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T $$2__current;
      // public Fusion.Collections.RingArray`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Fusion::Collections::RingArray_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Fusion::Collections::RingArray_1<T>*) == 0x8);
      // private System.Int32 <i>5__2
      // Size: 0x4
      // Offset: 0x0
      int $i$5__2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T <>2__current
      [[deprecated("Use field access instead!")]] T& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Fusion.Collections.RingArray`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Fusion::Collections::RingArray_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Fusion::Collections::RingArray_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <i>5__2
      [[deprecated("Use field access instead!")]] int& dyn_$i$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::dyn_$i$5__2");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__2"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RingArray_1<T>::$GetEnumerator$d__29* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RingArray_1<T>::$GetEnumerator$d__29*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::$GetEnumerator$d__29*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::$GetEnumerator$d__29*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private T System.Collections.Generic.IEnumerator<T>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T System_Collections_Generic_IEnumerator$T$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::System.Collections.Generic.IEnumerator<T>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::$GetEnumerator$d__29*), -1));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::$GetEnumerator$d__29*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::$GetEnumerator$d__29::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Fusion::Collections::RingArray_1<T>::$GetEnumerator$d__29*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
    }; // Fusion.Collections.RingArray`1/<GetEnumerator>d__29
    // Could not write size check! Type: Fusion.Collections.RingArray`1/<GetEnumerator>d__29 is generic, or has no fields that are valid for size checks!
    public:
    // public readonly T[] _array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> array;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 <Length>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 modMask
    // Size: 0x4
    // Offset: 0x0
    int modMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _head
    // Size: 0x4
    // Offset: 0x0
    int head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _tail
    // Size: 0x4
    // Offset: 0x0
    int tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _current
    // Size: 0x4
    // Offset: 0x0
    int current;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.IEnumerator`1<T> OffsetEnumerator
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerator_1<T>* OffsetEnumerator;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<T>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public readonly T[] _array
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn__array() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn__array");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_array"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <Length>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn_$Length$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Length>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public readonly System.Int32 modMask
    [[deprecated("Use field access instead!")]] int& dyn_modMask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn_modMask");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modMask"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _head
    [[deprecated("Use field access instead!")]] int& dyn__head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn__head");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _tail
    [[deprecated("Use field access instead!")]] int& dyn__tail() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn__tail");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tail"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _current
    [[deprecated("Use field access instead!")]] int& dyn__current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn__current");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Collections.Generic.IEnumerator`1<T> OffsetEnumerator
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<T>*& dyn_OffsetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::dyn_OffsetEnumerator");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OffsetEnumerator"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Length(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Length(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::set_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Head()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_Head");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_Head(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Head(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::set_Head");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Tail()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Tail() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_Tail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_Tail(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Tail(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::set_Tail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_Current");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_Current(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Current(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::set_Current");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public Fusion.Collections.RingArray`1/_RangeIterator<T> get_RangeIterator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator get_RangeIterator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_RangeIterator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RangeIterator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Fusion::Collections::RingArray_1<T>::_RangeIterator, false>(this, ___internal__method);
    }
    // public Fusion.Collections.RingArray`1/_ReverseRangeIterator<T> get_ReverseRangeIterator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator get_ReverseRangeIterator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_ReverseRangeIterator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReverseRangeIterator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Fusion::Collections::RingArray_1<T>::_ReverseRangeIterator, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 countBits)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RingArray_1<T>* New_ctor(int countBits) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RingArray_1<T>*, creationType>(countBits)));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 frameId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int frameId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameId)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, frameId);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Collections::RingArray_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Collections::RingArray_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Collections::RingArray_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Fusion.Collections.RingArray`1
  // Could not write size check! Type: Fusion.Collections.RingArray`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
