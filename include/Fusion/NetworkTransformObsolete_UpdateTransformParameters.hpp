// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransformObsolete
#include "Fusion/NetworkTransformObsolete.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransformObsolete::UpdateTransformParameters, "Fusion", "NetworkTransformObsolete/UpdateTransformParameters");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkTransformObsolete/UpdateTransformParameters
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkTransformObsolete::UpdateTransformParameters/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 InterpolatedPosition
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 InterpolatedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 UninterpolatedPosition
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 UninterpolatedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 InterpolatedPositionErrorCorrection
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 InterpolatedPositionErrorCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion InterpolatedRotation
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Quaternion InterpolatedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion UninterpolatedRotation
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Quaternion UninterpolatedRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion InterpolatedRotationErrorCorrection
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Quaternion InterpolatedRotationErrorCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // UnityEngine.Vector3 BufferToPosition
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 BufferToPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Quaternion BufferToRotation
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Quaternion BufferToRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: UpdateTransformParameters
    constexpr UpdateTransformParameters(::UnityEngine::Vector3 InterpolatedPosition_ = {}, ::UnityEngine::Vector3 UninterpolatedPosition_ = {}, ::UnityEngine::Vector3 InterpolatedPositionErrorCorrection_ = {}, ::UnityEngine::Quaternion InterpolatedRotation_ = {}, ::UnityEngine::Quaternion UninterpolatedRotation_ = {}, ::UnityEngine::Quaternion InterpolatedRotationErrorCorrection_ = {}, ::UnityEngine::Vector3 BufferToPosition_ = {}, ::UnityEngine::Quaternion BufferToRotation_ = {}) noexcept : InterpolatedPosition{InterpolatedPosition_}, UninterpolatedPosition{UninterpolatedPosition_}, InterpolatedPositionErrorCorrection{InterpolatedPositionErrorCorrection_}, InterpolatedRotation{InterpolatedRotation_}, UninterpolatedRotation{UninterpolatedRotation_}, InterpolatedRotationErrorCorrection{InterpolatedRotationErrorCorrection_}, BufferToPosition{BufferToPosition_}, BufferToRotation{BufferToRotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 InterpolatedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_InterpolatedPosition();
    // Get instance field reference: public UnityEngine.Vector3 UninterpolatedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UninterpolatedPosition();
    // Get instance field reference: public UnityEngine.Vector3 InterpolatedPositionErrorCorrection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_InterpolatedPositionErrorCorrection();
    // Get instance field reference: public UnityEngine.Quaternion InterpolatedRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_InterpolatedRotation();
    // Get instance field reference: public UnityEngine.Quaternion UninterpolatedRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_UninterpolatedRotation();
    // Get instance field reference: public UnityEngine.Quaternion InterpolatedRotationErrorCorrection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_InterpolatedRotationErrorCorrection();
    // Get instance field reference: UnityEngine.Vector3 BufferToPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BufferToPosition();
    // Get instance field reference: UnityEngine.Quaternion BufferToRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_BufferToRotation();
  }; // Fusion.NetworkTransformObsolete/UpdateTransformParameters
  #pragma pack(pop)
  static check_size<sizeof(NetworkTransformObsolete::UpdateTransformParameters), 96 + sizeof(::UnityEngine::Quaternion)> __Fusion_NetworkTransformObsolete_UpdateTransformParametersSizeCheck;
  static_assert(sizeof(NetworkTransformObsolete::UpdateTransformParameters) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
