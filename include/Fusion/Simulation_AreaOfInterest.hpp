// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Radix
#include "Fusion/Radix.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Allocator
  struct Allocator;
  // Forward declaring type: Accuracy
  struct Accuracy;
  // Forward declaring type: NetworkObjectRefMapPtr
  struct NetworkObjectRefMapPtr;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::AreaOfInterest, "Fusion", "Simulation/AreaOfInterest");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Simulation/AreaOfInterest
  // [TokenAttribute] Offset: FFFFFFFF
  struct Simulation::AreaOfInterest/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Simulation::AreaOfInterest::RadixQuery
    struct RadixQuery;
    // Nested type: ::Fusion::Simulation::AreaOfInterest::RadixObject
    struct RadixObject;
    // Nested type: ::Fusion::Simulation::AreaOfInterest::BurstInsertAndResolveDelegate
    class BurstInsertAndResolveDelegate;
    public:
    // private System.Int32 _radixBufferCapacity
    // Size: 0x4
    // Offset: 0x0
    int radixBufferCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: radixBufferCapacity and: radixBuffer
    char __padding0[0x4] = {};
    // private Fusion.Radix/SortTarget* _radixBuffer
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::Radix::SortTarget* radixBuffer;
    // Field size check
    static_assert(sizeof(::Fusion::Radix::SortTarget*) == 0x8);
    // private Fusion.Radix/SortTarget* _radixBufferTemp
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Radix::SortTarget* radixBufferTemp;
    // Field size check
    static_assert(sizeof(::Fusion::Radix::SortTarget*) == 0x8);
    // private Fusion.Simulation/AreaOfInterest/RadixQuery* _radixQueries
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Simulation::AreaOfInterest::RadixQuery* radixQueries;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::AreaOfInterest::RadixQuery*) == 0x8);
    // private Fusion.Simulation/AreaOfInterest/RadixQuery** _radixQueriesActive
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Simulation::AreaOfInterest::RadixQuery** radixQueriesActive;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::AreaOfInterest::RadixQuery**) == 0x8);
    // private System.Int32 _radixQueriesCount
    // Size: 0x4
    // Offset: 0x28
    int radixQueriesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _radixQueriesCapacity
    // Size: 0x4
    // Offset: 0x2C
    int radixQueriesCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.Simulation/AreaOfInterest/RadixObject* _radixObjects
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Simulation::AreaOfInterest::RadixObject* radixObjects;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::AreaOfInterest::RadixObject*) == 0x8);
    // private System.Int32 _radixObjectsCount
    // Size: 0x4
    // Offset: 0x38
    int radixObjectsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _radixObjectsCapacity
    // Size: 0x4
    // Offset: 0x3C
    int radixObjectsCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32* _radixP
    // Size: 0x8
    // Offset: 0x40
    int* radixP;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32* _radixC
    // Size: 0x8
    // Offset: 0x48
    int* radixC;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    public:
    // Creating value type constructor for type: AreaOfInterest
    constexpr AreaOfInterest(int radixBufferCapacity_ = {}, ::Fusion::Radix::SortTarget* radixBuffer_ = {}, ::Fusion::Radix::SortTarget* radixBufferTemp_ = {}, ::Fusion::Simulation::AreaOfInterest::RadixQuery* radixQueries_ = {}, ::Fusion::Simulation::AreaOfInterest::RadixQuery** radixQueriesActive_ = {}, int radixQueriesCount_ = {}, int radixQueriesCapacity_ = {}, ::Fusion::Simulation::AreaOfInterest::RadixObject* radixObjects_ = {}, int radixObjectsCount_ = {}, int radixObjectsCapacity_ = {}, int* radixP_ = {}, int* radixC_ = {}) noexcept : radixBufferCapacity{radixBufferCapacity_}, radixBuffer{radixBuffer_}, radixBufferTemp{radixBufferTemp_}, radixQueries{radixQueries_}, radixQueriesActive{radixQueriesActive_}, radixQueriesCount{radixQueriesCount_}, radixQueriesCapacity{radixQueriesCapacity_}, radixObjects{radixObjects_}, radixObjectsCount{radixObjectsCount_}, radixObjectsCapacity{radixObjectsCapacity_}, radixP{radixP_}, radixC{radixC_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Int32 OFFSET
    static constexpr const int OFFSET = 8192;
    // Get static field: static private System.Int32 OFFSET
    static int _get_OFFSET();
    // Set static field: static private System.Int32 OFFSET
    static void _set_OFFSET(int value);
    // Get static field: static public Fusion.Simulation/AreaOfInterest/BurstInsertAndResolveDelegate BurstInsertAndResolve
    static ::Fusion::Simulation::AreaOfInterest::BurstInsertAndResolveDelegate* _get_BurstInsertAndResolve();
    // Set static field: static public Fusion.Simulation/AreaOfInterest/BurstInsertAndResolveDelegate BurstInsertAndResolve
    static void _set_BurstInsertAndResolve(::Fusion::Simulation::AreaOfInterest::BurstInsertAndResolveDelegate* value);
    // static field const value: static private System.Int32 NO_ACC_INVERSE
    static constexpr const int NO_ACC_INVERSE = 1000;
    // Get static field: static private System.Int32 NO_ACC_INVERSE
    static int _get_NO_ACC_INVERSE();
    // Set static field: static private System.Int32 NO_ACC_INVERSE
    static void _set_NO_ACC_INVERSE(int value);
    // Get instance field reference: private System.Int32 _radixBufferCapacity
    [[deprecated("Use field access instead!")]] int& dyn__radixBufferCapacity();
    // Get instance field reference: private Fusion.Radix/SortTarget* _radixBuffer
    [[deprecated("Use field access instead!")]] ::Fusion::Radix::SortTarget*& dyn__radixBuffer();
    // Get instance field reference: private Fusion.Radix/SortTarget* _radixBufferTemp
    [[deprecated("Use field access instead!")]] ::Fusion::Radix::SortTarget*& dyn__radixBufferTemp();
    // Get instance field reference: private Fusion.Simulation/AreaOfInterest/RadixQuery* _radixQueries
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::AreaOfInterest::RadixQuery*& dyn__radixQueries();
    // Get instance field reference: private Fusion.Simulation/AreaOfInterest/RadixQuery** _radixQueriesActive
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::AreaOfInterest::RadixQuery**& dyn__radixQueriesActive();
    // Get instance field reference: private System.Int32 _radixQueriesCount
    [[deprecated("Use field access instead!")]] int& dyn__radixQueriesCount();
    // Get instance field reference: private System.Int32 _radixQueriesCapacity
    [[deprecated("Use field access instead!")]] int& dyn__radixQueriesCapacity();
    // Get instance field reference: private Fusion.Simulation/AreaOfInterest/RadixObject* _radixObjects
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::AreaOfInterest::RadixObject*& dyn__radixObjects();
    // Get instance field reference: private System.Int32 _radixObjectsCount
    [[deprecated("Use field access instead!")]] int& dyn__radixObjectsCount();
    // Get instance field reference: private System.Int32 _radixObjectsCapacity
    [[deprecated("Use field access instead!")]] int& dyn__radixObjectsCapacity();
    // Get instance field reference: private System.Int32* _radixP
    [[deprecated("Use field access instead!")]] int*& dyn__radixP();
    // Get instance field reference: private System.Int32* _radixC
    [[deprecated("Use field access instead!")]] int*& dyn__radixC();
    // System.Int32 get_QueryCount()
    // Offset: 0x2B7653C
    int get_QueryCount();
    // Fusion.Simulation/AreaOfInterest/RadixQuery* GetQuery(System.Int32 index)
    // Offset: 0x2B73810
    ::Fusion::Simulation::AreaOfInterest::RadixQuery* GetQuery(int index);
    // static Fusion.Simulation/AreaOfInterest* Alloc()
    // Offset: 0x2B6FC60
    static ::Fusion::Simulation::AreaOfInterest* Alloc();
    // static System.Void Reset(Fusion.Simulation/AreaOfInterest* aoi, System.Int32 objects, System.Int32 queries)
    // Offset: 0x2B73234
    static void Reset(::Fusion::Simulation::AreaOfInterest* aoi, int objects, int queries);
    // static System.Void Free(Fusion.Simulation/AreaOfInterest* aoi)
    // Offset: 0x2B71500
    static void Free(::Fusion::Simulation::AreaOfInterest* aoi);
    // static private System.Void EnsureCapacity(Fusion.Simulation/AreaOfInterest* aoi, System.Int32 objects, System.Int32 queries)
    // Offset: 0x2B76544
    static void EnsureCapacity(::Fusion::Simulation::AreaOfInterest* aoi, int objects, int queries);
    // static public System.Void Resolve(Fusion.Simulation/AreaOfInterest* aoi, Fusion.Allocator* local)
    // Offset: 0x2B73614
    static void Resolve(::Fusion::Simulation::AreaOfInterest* aoi, ::Fusion::Allocator* local);
    // static System.Void AddQuery(Fusion.Simulation/AreaOfInterest* aoi, Fusion.Accuracy accuracy, UnityEngine.Vector3 position, System.Single radius, System.Int32 mask, System.Void* userData)
    // Offset: 0x2B73250
    static void AddQuery(::Fusion::Simulation::AreaOfInterest* aoi, ::Fusion::Accuracy accuracy, ::UnityEngine::Vector3 position, float radius, int mask, void* userData);
    // static public System.Void InsertObjects(Fusion.Simulation/AreaOfInterest* aoi, Fusion.Accuracy accuracy, Fusion.Allocator* allocator, Fusion.NetworkObjectRefMapPtr* map)
    // Offset: 0x2B73414
    static void InsertObjects(::Fusion::Simulation::AreaOfInterest* aoi, ::Fusion::Accuracy accuracy, ::Fusion::Allocator* allocator, ::Fusion::NetworkObjectRefMapPtr* map);
  }; // Fusion.Simulation/AreaOfInterest
  #pragma pack(pop)
  static check_size<sizeof(Simulation::AreaOfInterest), 72 + sizeof(int*)> __Fusion_Simulation_AreaOfInterestSizeCheck;
  static_assert(sizeof(Simulation::AreaOfInterest) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::get_QueryCount
// Il2CppName: get_QueryCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::AreaOfInterest::*)()>(&Fusion::Simulation::AreaOfInterest::get_QueryCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "get_QueryCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::GetQuery
// Il2CppName: GetQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::AreaOfInterest::RadixQuery* (Fusion::Simulation::AreaOfInterest::*)(int)>(&Fusion::Simulation::AreaOfInterest::GetQuery)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "GetQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::Alloc
// Il2CppName: Alloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::AreaOfInterest* (*)()>(&Fusion::Simulation::AreaOfInterest::Alloc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "Alloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*, int, int)>(&Fusion::Simulation::AreaOfInterest::Reset)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    static auto* objects = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* queries = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi, objects, queries});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*)>(&Fusion::Simulation::AreaOfInterest::Free)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*, int, int)>(&Fusion::Simulation::AreaOfInterest::EnsureCapacity)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    static auto* objects = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* queries = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi, objects, queries});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*, ::Fusion::Allocator*)>(&Fusion::Simulation::AreaOfInterest::Resolve)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    static auto* local = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi, local});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::AddQuery
// Il2CppName: AddQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*, ::Fusion::Accuracy, ::UnityEngine::Vector3, float, int, void*)>(&Fusion::Simulation::AreaOfInterest::AddQuery)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    static auto* accuracy = &::il2cpp_utils::GetClassFromName("Fusion", "Accuracy")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* userData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "AddQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi, accuracy, position, radius, mask, userData});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterest::InsertObjects
// Il2CppName: InsertObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation::AreaOfInterest*, ::Fusion::Accuracy, ::Fusion::Allocator*, ::Fusion::NetworkObjectRefMapPtr*)>(&Fusion::Simulation::AreaOfInterest::InsertObjects)> {
  static const MethodInfo* get() {
    static auto* aoi = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Simulation/AreaOfInterest"))->byval_arg;
    static auto* accuracy = &::il2cpp_utils::GetClassFromName("Fusion", "Accuracy")->byval_arg;
    static auto* allocator = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::AreaOfInterest), "InsertObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aoi, accuracy, allocator, map});
  }
};
