// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkCharacterController
#include "Fusion/NetworkCharacterController.hpp"
// Including type: Fusion.NetworkCharacterController/BumpBehavior
#include "Fusion/NetworkCharacterController_BumpBehavior.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.QueryTriggerInteraction
#include "UnityEngine/QueryTriggerInteraction.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkCharacterController::Configuration);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkCharacterController::Configuration*, "Fusion", "NetworkCharacterController/Configuration");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkCharacterController/Configuration
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkCharacterController::Configuration : public ::Il2CppObject {
    public:
    public:
    // public System.Single AllowedPenetration
    // Size: 0x4
    // Offset: 0x10
    float AllowedPenetration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PenetrationCorrection
    // Size: 0x4
    // Offset: 0x14
    float PenetrationCorrection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Fusion.NetworkCharacterController/BumpBehavior BumpBehavior
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::NetworkCharacterController::BumpBehavior BumpBehavior;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkCharacterController::BumpBehavior) == 0x4);
    // public UnityEngine.LayerMask LayerMask
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::LayerMask LayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.QueryTriggerInteraction TriggerInteraction
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::QueryTriggerInteraction TriggerInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::QueryTriggerInteraction) == 0x4);
    // public System.Boolean AirControl
    // Size: 0x1
    // Offset: 0x24
    bool AirControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AirControl and: Acceleration
    char __padding5[0x3] = {};
    // public System.Single Acceleration
    // Size: 0x4
    // Offset: 0x28
    float Acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Braking
    // Size: 0x4
    // Offset: 0x2C
    float Braking;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single BaseJumpImpulse
    // Size: 0x4
    // Offset: 0x30
    float BaseJumpImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxSpeed
    // Size: 0x4
    // Offset: 0x34
    float MaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxSlope
    // Size: 0x4
    // Offset: 0x38
    float MaxSlope;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxSlopeSpeed
    // Size: 0x4
    // Offset: 0x3C
    float MaxSlopeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _gravity
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 gravity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // System.Single _gravityStrength
    // Size: 0x4
    // Offset: 0x4C
    float gravityStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.Vector3 _gravityNormalized
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 gravityNormalized;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public System.Single AllowedPenetration
    [[deprecated("Use field access instead!")]] float& dyn_AllowedPenetration();
    // Get instance field reference: public System.Single PenetrationCorrection
    [[deprecated("Use field access instead!")]] float& dyn_PenetrationCorrection();
    // Get instance field reference: public Fusion.NetworkCharacterController/BumpBehavior BumpBehavior
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkCharacterController::BumpBehavior& dyn_BumpBehavior();
    // Get instance field reference: public UnityEngine.LayerMask LayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_LayerMask();
    // Get instance field reference: public UnityEngine.QueryTriggerInteraction TriggerInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::QueryTriggerInteraction& dyn_TriggerInteraction();
    // Get instance field reference: public System.Boolean AirControl
    [[deprecated("Use field access instead!")]] bool& dyn_AirControl();
    // Get instance field reference: public System.Single Acceleration
    [[deprecated("Use field access instead!")]] float& dyn_Acceleration();
    // Get instance field reference: public System.Single Braking
    [[deprecated("Use field access instead!")]] float& dyn_Braking();
    // Get instance field reference: public System.Single BaseJumpImpulse
    [[deprecated("Use field access instead!")]] float& dyn_BaseJumpImpulse();
    // Get instance field reference: public System.Single MaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_MaxSpeed();
    // Get instance field reference: public System.Single MaxSlope
    [[deprecated("Use field access instead!")]] float& dyn_MaxSlope();
    // Get instance field reference: public System.Single MaxSlopeSpeed
    [[deprecated("Use field access instead!")]] float& dyn_MaxSlopeSpeed();
    // Get instance field reference: private UnityEngine.Vector3 _gravity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__gravity();
    // Get instance field reference: System.Single _gravityStrength
    [[deprecated("Use field access instead!")]] float& dyn__gravityStrength();
    // Get instance field reference: UnityEngine.Vector3 _gravityNormalized
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__gravityNormalized();
    // public UnityEngine.Vector3 get_Gravity()
    // Offset: 0x2B2A86C
    ::UnityEngine::Vector3 get_Gravity();
    // public System.Void set_Gravity(UnityEngine.Vector3 value)
    // Offset: 0x2B2A878
    void set_Gravity(::UnityEngine::Vector3 value);
    // System.Void Init()
    // Offset: 0x2B28B84
    void Init();
    // public System.Void .ctor()
    // Offset: 0x2B2A884
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkCharacterController::Configuration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkCharacterController::Configuration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkCharacterController::Configuration*, creationType>()));
    }
  }; // Fusion.NetworkCharacterController/Configuration
  #pragma pack(pop)
  static check_size<sizeof(NetworkCharacterController::Configuration), 80 + sizeof(::UnityEngine::Vector3)> __Fusion_NetworkCharacterController_ConfigurationSizeCheck;
  static_assert(sizeof(NetworkCharacterController::Configuration) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Configuration::get_Gravity
// Il2CppName: get_Gravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkCharacterController::Configuration::*)()>(&Fusion::NetworkCharacterController::Configuration::get_Gravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController::Configuration*), "get_Gravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Configuration::set_Gravity
// Il2CppName: set_Gravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::Configuration::*)(::UnityEngine::Vector3)>(&Fusion::NetworkCharacterController::Configuration::set_Gravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController::Configuration*), "set_Gravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Configuration::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::Configuration::*)()>(&Fusion::NetworkCharacterController::Configuration::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController::Configuration*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Configuration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
