// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
// Including type: Fusion.AccuracyRangePreset
#include "Fusion/AccuracyRangePreset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: AccuracyRangeAttribute
  class AccuracyRangeAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::AccuracyRangeAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::AccuracyRangeAttribute*, "Fusion", "AccuracyRangeAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.AccuracyRangeAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class AccuracyRangeAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    public:
    // public System.Single min
    // Size: 0x4
    // Offset: 0x14
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single max
    // Size: 0x4
    // Offset: 0x18
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 places
    // Size: 0x4
    // Offset: 0x1C
    int places;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean logarithmic
    // Size: 0x1
    // Offset: 0x20
    bool logarithmic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.Single min
    [[deprecated("Use field access instead!")]] float& dyn_min();
    // Get instance field reference: public System.Single max
    [[deprecated("Use field access instead!")]] float& dyn_max();
    // Get instance field reference: public System.Int32 places
    [[deprecated("Use field access instead!")]] int& dyn_places();
    // Get instance field reference: public System.Boolean logarithmic
    [[deprecated("Use field access instead!")]] bool& dyn_logarithmic();
    // public System.Void .ctor(Fusion.AccuracyRangePreset preset)
    // Offset: 0x2AFEA08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyRangeAttribute* New_ctor(::Fusion::AccuracyRangePreset preset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyRangeAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyRangeAttribute*, creationType>(preset)));
    }
    // public System.Void .ctor(System.Single min, System.Single max, System.Boolean logarithmic)
    // Offset: 0x2AFEA38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyRangeAttribute* New_ctor(float min, float max, bool logarithmic) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyRangeAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyRangeAttribute*, creationType>(min, max, logarithmic)));
    }
    // public System.Void .ctor(System.Single min, System.Single max, System.Int32 places, System.Boolean logarithmic)
    // Offset: 0x2AFEA88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccuracyRangeAttribute* New_ctor(float min, float max, int places, bool logarithmic) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::AccuracyRangeAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccuracyRangeAttribute*, creationType>(min, max, places, logarithmic)));
    }
  }; // Fusion.AccuracyRangeAttribute
  #pragma pack(pop)
  static check_size<sizeof(AccuracyRangeAttribute), 32 + sizeof(bool)> __Fusion_AccuracyRangeAttributeSizeCheck;
  static_assert(sizeof(AccuracyRangeAttribute) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::AccuracyRangeAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::AccuracyRangeAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::AccuracyRangeAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
