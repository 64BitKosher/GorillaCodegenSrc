// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: ArraySpecialized
  class ArraySpecialized;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::ArraySpecialized);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::ArraySpecialized*, "Fusion", "ArraySpecialized");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.ArraySpecialized
  // [TokenAttribute] Offset: FFFFFFFF
  class ArraySpecialized : public ::Il2CppObject {
    public:
    // static field const value: static private System.Int32 IntrosortSizeThreshold
    static constexpr const int IntrosortSizeThreshold = 16;
    // Get static field: static private System.Int32 IntrosortSizeThreshold
    static int _get_IntrosortSizeThreshold();
    // Set static field: static private System.Int32 IntrosortSizeThreshold
    static void _set_IntrosortSizeThreshold(int value);
    // static private System.Int32 FloorLog2(System.Int32 n)
    // Offset: 0x2B45340
    static int FloorLog2(int n);
    // static private System.Void Swap(T[] a, System.Int32 i, System.Int32 j)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Swap(::ArrayW<T> a, int i, int j) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ArraySpecialized::Swap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "ArraySpecialized", "Swap", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(j)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, i, j);
    }
    // static public System.Void Sort(System.Int32[] array, System.Int32 index, System.Int32 length)
    // Offset: 0x2B45368
    static void Sort(::ArrayW<int> array, int index, int length);
    // static private System.Int32 Compare(System.Int32 x, System.Int32 y)
    // Offset: 0x2B454CC
    static int Compare(int x, int y);
    // static private System.Void SwapIfGreater(System.Int32[] array, System.Int32 a, System.Int32 b)
    // Offset: 0x2B454D4
    static void SwapIfGreater(::ArrayW<int> array, int a, int b);
    // static private System.Void IntroSort(System.Int32[] array, System.Int32 lo, System.Int32 hi, System.Int32 depthLimit)
    // Offset: 0x2B453B8
    static void IntroSort(::ArrayW<int> array, int lo, int hi, int depthLimit);
    // static private System.Int32 PickPivotAndPartition(System.Int32[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B456BC
    static int PickPivotAndPartition(::ArrayW<int> array, int lo, int hi);
    // static private System.Void Heapsort(System.Int32[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B455C8
    static void Heapsort(::ArrayW<int> array, int lo, int hi);
    // static private System.Void DownHeap(System.Int32[] array, System.Int32 i, System.Int32 n, System.Int32 lo)
    // Offset: 0x2B45800
    static void DownHeap(::ArrayW<int> array, int i, int n, int lo);
    // static private System.Void InsertionSort(System.Int32[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B4552C
    static void InsertionSort(::ArrayW<int> array, int lo, int hi);
    // static public System.Void Sort(Fusion.SimulationInput[] array, System.Int32 index, System.Int32 length)
    // Offset: 0x2B458D0
    static void Sort(::ArrayW<::Fusion::SimulationInput*> array, int index, int length);
    // static private System.Int32 Compare(Fusion.SimulationInput x, Fusion.SimulationInput y)
    // Offset: 0x2B45A34
    static int Compare(::Fusion::SimulationInput* x, ::Fusion::SimulationInput* y);
    // static private System.Void SwapIfGreater(Fusion.SimulationInput[] array, System.Int32 a, System.Int32 b)
    // Offset: 0x2B45A6C
    static void SwapIfGreater(::ArrayW<::Fusion::SimulationInput*> array, int a, int b);
    // static private System.Void IntroSort(Fusion.SimulationInput[] array, System.Int32 lo, System.Int32 hi, System.Int32 depthLimit)
    // Offset: 0x2B45920
    static void IntroSort(::ArrayW<::Fusion::SimulationInput*> array, int lo, int hi, int depthLimit);
    // static private System.Int32 PickPivotAndPartition(Fusion.SimulationInput[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B45E1C
    static int PickPivotAndPartition(::ArrayW<::Fusion::SimulationInput*> array, int lo, int hi);
    // static private System.Void Heapsort(Fusion.SimulationInput[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B45D00
    static void Heapsort(::ArrayW<::Fusion::SimulationInput*> array, int lo, int hi);
    // static private System.Void DownHeap(Fusion.SimulationInput[] array, System.Int32 i, System.Int32 n, System.Int32 lo)
    // Offset: 0x2B46044
    static void DownHeap(::ArrayW<::Fusion::SimulationInput*> array, int i, int n, int lo);
    // static private System.Void InsertionSort(Fusion.SimulationInput[] array, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B45BA0
    static void InsertionSort(::ArrayW<::Fusion::SimulationInput*> array, int lo, int hi);
  }; // Fusion.ArraySpecialized
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::ArraySpecialized::FloorLog2
// Il2CppName: FloorLog2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Fusion::ArraySpecialized::FloorLog2)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "FloorLog2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Swap
// Il2CppName: Swap
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int)>(&Fusion::ArraySpecialized::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Fusion::ArraySpecialized::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::SwapIfGreater
// Il2CppName: SwapIfGreater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int)>(&Fusion::ArraySpecialized::SwapIfGreater)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "SwapIfGreater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, a, b});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::IntroSort
// Il2CppName: IntroSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int, int)>(&Fusion::ArraySpecialized::IntroSort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "IntroSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi, depthLimit});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::PickPivotAndPartition
// Il2CppName: PickPivotAndPartition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>, int, int)>(&Fusion::ArraySpecialized::PickPivotAndPartition)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "PickPivotAndPartition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Heapsort
// Il2CppName: Heapsort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int)>(&Fusion::ArraySpecialized::Heapsort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Heapsort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::DownHeap
// Il2CppName: DownHeap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int, int)>(&Fusion::ArraySpecialized::DownHeap)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "DownHeap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, i, n, lo});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::InsertionSort
// Il2CppName: InsertionSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<int>, int, int)>(&Fusion::ArraySpecialized::InsertionSort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "InsertionSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int)>(&Fusion::ArraySpecialized::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Fusion::SimulationInput*, ::Fusion::SimulationInput*)>(&Fusion::ArraySpecialized::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::SwapIfGreater
// Il2CppName: SwapIfGreater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int)>(&Fusion::ArraySpecialized::SwapIfGreater)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "SwapIfGreater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, a, b});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::IntroSort
// Il2CppName: IntroSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int, int)>(&Fusion::ArraySpecialized::IntroSort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depthLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "IntroSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi, depthLimit});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::PickPivotAndPartition
// Il2CppName: PickPivotAndPartition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Fusion::SimulationInput*>, int, int)>(&Fusion::ArraySpecialized::PickPivotAndPartition)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "PickPivotAndPartition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::Heapsort
// Il2CppName: Heapsort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int)>(&Fusion::ArraySpecialized::Heapsort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "Heapsort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::DownHeap
// Il2CppName: DownHeap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int, int)>(&Fusion::ArraySpecialized::DownHeap)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "DownHeap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, i, n, lo});
  }
};
// Writing MetadataGetter for method: Fusion::ArraySpecialized::InsertionSort
// Il2CppName: InsertionSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::SimulationInput*>, int, int)>(&Fusion::ArraySpecialized::InsertionSort)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ArraySpecialized*), "InsertionSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, lo, hi});
  }
};
