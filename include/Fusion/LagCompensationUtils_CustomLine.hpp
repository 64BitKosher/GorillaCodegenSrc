// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.LagCompensationUtils
#include "Fusion/LagCompensationUtils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensationUtils::CustomLine, "Fusion", "LagCompensationUtils/CustomLine");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensationUtils/CustomLine
  // [TokenAttribute] Offset: FFFFFFFF
  struct LagCompensationUtils::CustomLine/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Start
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 End
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 End;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: CustomLine
    constexpr CustomLine(::UnityEngine::Vector3 Start_ = {}, ::UnityEngine::Vector3 End_ = {}) noexcept : Start{Start_}, End{End_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Start();
    // Get instance field reference: public UnityEngine.Vector3 End
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_End();
    // public System.Void .ctor(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0x2B3B8F0
    // ABORTED: conflicts with another method.  CustomLine(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
  }; // Fusion.LagCompensationUtils/CustomLine
  #pragma pack(pop)
  static check_size<sizeof(LagCompensationUtils::CustomLine), 12 + sizeof(::UnityEngine::Vector3)> __Fusion_LagCompensationUtils_CustomLineSizeCheck;
  static_assert(sizeof(LagCompensationUtils::CustomLine) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::CustomLine::CustomLine
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
