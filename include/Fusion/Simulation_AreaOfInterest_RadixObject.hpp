// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/AreaOfInterest
#include "Fusion/Simulation_AreaOfInterest.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Fusion.Ptr
#include "Fusion/Ptr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::AreaOfInterest::RadixObject, "Fusion", "Simulation/AreaOfInterest/RadixObject");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Simulation/AreaOfInterest/RadixObject
  // [TokenAttribute] Offset: FFFFFFFF
  struct Simulation::AreaOfInterest::RadixObject/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Fusion.Ptr Ptr
    // Size: 0x4
    // Offset: 0xC
    ::Fusion::Ptr Ptr;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public System.Int32 Mask
    // Size: 0x4
    // Offset: 0x10
    int Mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RadixObject
    constexpr RadixObject(::UnityEngine::Vector3 Position_ = {}, ::Fusion::Ptr Ptr_ = {}, int Mask_ = {}) noexcept : Position{Position_}, Ptr{Ptr_}, Mask{Mask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Position();
    // Get instance field reference: public Fusion.Ptr Ptr
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Ptr();
    // Get instance field reference: public System.Int32 Mask
    [[deprecated("Use field access instead!")]] int& dyn_Mask();
  }; // Fusion.Simulation/AreaOfInterest/RadixObject
  #pragma pack(pop)
  static check_size<sizeof(Simulation::AreaOfInterest::RadixObject), 16 + sizeof(int)> __Fusion_Simulation_AreaOfInterest_RadixObjectSizeCheck;
  static_assert(sizeof(Simulation::AreaOfInterest::RadixObject) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
