// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkedWeavedAttribute
  class NetworkedWeavedAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkedWeavedAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkedWeavedAttribute*, "Fusion", "NetworkedWeavedAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkedWeavedAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class NetworkedWeavedAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Int32 <WordOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int WordOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <WordCount>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int WordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <WordOffset>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$WordOffset$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <WordCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$WordCount$k__BackingField();
    // public System.Int32 get_WordOffset()
    // Offset: 0x2AFF200
    int get_WordOffset();
    // public System.Int32 get_WordCount()
    // Offset: 0x2AFF208
    int get_WordCount();
    // public System.Void .ctor(System.Int32 wordOffset, System.Int32 wordCount)
    // Offset: 0x2AFF210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkedWeavedAttribute* New_ctor(int wordOffset, int wordCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkedWeavedAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkedWeavedAttribute*, creationType>(wordOffset, wordCount)));
    }
  }; // Fusion.NetworkedWeavedAttribute
  #pragma pack(pop)
  static check_size<sizeof(NetworkedWeavedAttribute), 20 + sizeof(int)> __Fusion_NetworkedWeavedAttributeSizeCheck;
  static_assert(sizeof(NetworkedWeavedAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkedWeavedAttribute::get_WordOffset
// Il2CppName: get_WordOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkedWeavedAttribute::*)()>(&Fusion::NetworkedWeavedAttribute::get_WordOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedWeavedAttribute*), "get_WordOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedWeavedAttribute::get_WordCount
// Il2CppName: get_WordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkedWeavedAttribute::*)()>(&Fusion::NetworkedWeavedAttribute::get_WordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedWeavedAttribute*), "get_WordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedWeavedAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
