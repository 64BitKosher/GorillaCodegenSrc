// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.AssetObject
#include "Fusion/AssetObject.hpp"
// Including type: Fusion.INetworkPrefabSource
#include "Fusion/INetworkPrefabSource.hpp"
// Including type: Fusion.NetworkObjectGuid
#include "Fusion/NetworkObjectGuid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkPrefabLoadContext
  struct NetworkPrefabLoadContext;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkPrefabSourceUnityBase
  class NetworkPrefabSourceUnityBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkPrefabSourceUnityBase);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPrefabSourceUnityBase*, "Fusion", "NetworkPrefabSourceUnityBase");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkPrefabSourceUnityBase
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkPrefabSourceUnityBase : public ::Fusion::AssetObject/*, public ::Fusion::INetworkPrefabSource*/ {
    public:
    public:
    // public Fusion.NetworkObjectGuid AssetGuid
    // Size: 0x10
    // Offset: 0x18
    ::Fusion::NetworkObjectGuid AssetGuid;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectGuid) == 0x10);
    public:
    // Creating interface conversion operator: operator ::Fusion::INetworkPrefabSource
    operator ::Fusion::INetworkPrefabSource() noexcept {
      return *reinterpret_cast<::Fusion::INetworkPrefabSource*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Fusion.NetworkObjectGuid AssetGuid
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectGuid& dyn_AssetGuid();
    // public System.String get_EditorSummary()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_EditorSummary();
    // public System.Void Load(in Fusion.NetworkPrefabLoadContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Load(ByRef<::Fusion::NetworkPrefabLoadContext> context);
    // public System.Void Unload()
    // Offset: 0x2B4F300
    void Unload();
    // protected System.Void .ctor()
    // Offset: 0x2B4F304
    // Implemented from: Fusion.AssetObject
    // Base method: System.Void AssetObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPrefabSourceUnityBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPrefabSourceUnityBase*, creationType>()));
    }
  }; // Fusion.NetworkPrefabSourceUnityBase
  #pragma pack(pop)
  static check_size<sizeof(NetworkPrefabSourceUnityBase), 24 + sizeof(::Fusion::NetworkObjectGuid)> __Fusion_NetworkPrefabSourceUnityBaseSizeCheck;
  static_assert(sizeof(NetworkPrefabSourceUnityBase) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityBase::get_EditorSummary
// Il2CppName: get_EditorSummary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkPrefabSourceUnityBase::*)()>(&Fusion::NetworkPrefabSourceUnityBase::get_EditorSummary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityBase*), "get_EditorSummary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityBase::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabSourceUnityBase::*)(ByRef<::Fusion::NetworkPrefabLoadContext>)>(&Fusion::NetworkPrefabSourceUnityBase::Load)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabLoadContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityBase*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityBase::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabSourceUnityBase::*)()>(&Fusion::NetworkPrefabSourceUnityBase::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityBase*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
