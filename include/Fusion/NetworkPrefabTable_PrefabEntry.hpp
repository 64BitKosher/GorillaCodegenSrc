// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkPrefabTable
#include "Fusion/NetworkPrefabTable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: INetworkPrefabSource
  class INetworkPrefabSource;
  // Forward declaring type: NetworkPrefabLoadContext
  struct NetworkPrefabLoadContext;
  // Forward declaring type: NetworkObject
  class NetworkObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkPrefabTable::PrefabEntry);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPrefabTable::PrefabEntry*, "Fusion", "NetworkPrefabTable/PrefabEntry");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkPrefabTable/PrefabEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkPrefabTable::PrefabEntry : public ::Il2CppObject {
    public:
    public:
    // public Fusion.INetworkPrefabSource Prefab
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::INetworkPrefabSource* Prefab;
    // Field size check
    static_assert(sizeof(::Fusion::INetworkPrefabSource*) == 0x8);
    // public System.Object State
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* State;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: public Fusion.INetworkPrefabSource Prefab
    [[deprecated("Use field access instead!")]] ::Fusion::INetworkPrefabSource*& dyn_Prefab();
    // Get instance field reference: public System.Object State
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_State();
    // System.Void LoadFinished(in Fusion.NetworkPrefabLoadContext context, Fusion.NetworkObject prefab)
    // Offset: 0x2B4EE94
    void LoadFinished(ByRef<::Fusion::NetworkPrefabLoadContext> context, ::Fusion::NetworkObject* prefab);
    // System.Void LoadFinished(in Fusion.NetworkPrefabLoadContext context, System.Exception error)
    // Offset: 0x2B4EF80
    void LoadFinished(ByRef<::Fusion::NetworkPrefabLoadContext> context, ::System::Exception* error);
    // public System.Void .ctor()
    // Offset: 0x2B4FFFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPrefabTable::PrefabEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabTable::PrefabEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPrefabTable::PrefabEntry*, creationType>()));
    }
  }; // Fusion.NetworkPrefabTable/PrefabEntry
  #pragma pack(pop)
  static check_size<sizeof(NetworkPrefabTable::PrefabEntry), 24 + sizeof(::Il2CppObject*)> __Fusion_NetworkPrefabTable_PrefabEntrySizeCheck;
  static_assert(sizeof(NetworkPrefabTable::PrefabEntry) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::PrefabEntry::LoadFinished
// Il2CppName: LoadFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabTable::PrefabEntry::*)(ByRef<::Fusion::NetworkPrefabLoadContext>, ::Fusion::NetworkObject*)>(&Fusion::NetworkPrefabTable::PrefabEntry::LoadFinished)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabLoadContext")->this_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable::PrefabEntry*), "LoadFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, prefab});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::PrefabEntry::LoadFinished
// Il2CppName: LoadFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabTable::PrefabEntry::*)(ByRef<::Fusion::NetworkPrefabLoadContext>, ::System::Exception*)>(&Fusion::NetworkPrefabTable::PrefabEntry::LoadFinished)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabLoadContext")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable::PrefabEntry*), "LoadFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, error});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::PrefabEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
