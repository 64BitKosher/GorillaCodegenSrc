// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/AreaOfInterest
#include "Fusion/Simulation_AreaOfInterest.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::AreaOfInterest::RadixQuery, "Fusion", "Simulation/AreaOfInterest/RadixQuery");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Simulation/AreaOfInterest/RadixQuery
  // [TokenAttribute] Offset: FFFFFFFF
  struct Simulation::AreaOfInterest::RadixQuery/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Void* UserData
    // Size: 0x8
    // Offset: 0x0
    void* UserData;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // public UnityEngine.Vector3 Position
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single RadiusSqr
    // Size: 0x4
    // Offset: 0x14
    float RadiusSqr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Fusion.NetworkObjectHeader** Hits
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::NetworkObjectHeader** Hits;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectHeader**) == 0x8);
    // public System.Int32 HitsCapacity
    // Size: 0x4
    // Offset: 0x20
    int HitsCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 HitsCount
    // Size: 0x4
    // Offset: 0x24
    int HitsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ActiveIndex
    // Size: 0x4
    // Offset: 0x28
    int ActiveIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Mask
    // Size: 0x4
    // Offset: 0x2C
    int Mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RadixQuery
    constexpr RadixQuery(void* UserData_ = {}, ::UnityEngine::Vector3 Position_ = {}, float RadiusSqr_ = {}, ::Fusion::NetworkObjectHeader** Hits_ = {}, int HitsCapacity_ = {}, int HitsCount_ = {}, int ActiveIndex_ = {}, int Mask_ = {}) noexcept : UserData{UserData_}, Position{Position_}, RadiusSqr{RadiusSqr_}, Hits{Hits_}, HitsCapacity{HitsCapacity_}, HitsCount{HitsCount_}, ActiveIndex{ActiveIndex_}, Mask{Mask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Void* UserData
    [[deprecated("Use field access instead!")]] void*& dyn_UserData();
    // Get instance field reference: public UnityEngine.Vector3 Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Position();
    // Get instance field reference: public System.Single RadiusSqr
    [[deprecated("Use field access instead!")]] float& dyn_RadiusSqr();
    // Get instance field reference: public Fusion.NetworkObjectHeader** Hits
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectHeader**& dyn_Hits();
    // Get instance field reference: public System.Int32 HitsCapacity
    [[deprecated("Use field access instead!")]] int& dyn_HitsCapacity();
    // Get instance field reference: public System.Int32 HitsCount
    [[deprecated("Use field access instead!")]] int& dyn_HitsCount();
    // Get instance field reference: public System.Int32 ActiveIndex
    [[deprecated("Use field access instead!")]] int& dyn_ActiveIndex();
    // Get instance field reference: public System.Int32 Mask
    [[deprecated("Use field access instead!")]] int& dyn_Mask();
  }; // Fusion.Simulation/AreaOfInterest/RadixQuery
  #pragma pack(pop)
  static check_size<sizeof(Simulation::AreaOfInterest::RadixQuery), 44 + sizeof(int)> __Fusion_Simulation_AreaOfInterest_RadixQuerySizeCheck;
  static_assert(sizeof(Simulation::AreaOfInterest::RadixQuery) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
