// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.Message
#include "Fusion/Protocol/Message.hpp"
// Including type: Fusion.Protocol.JoinMessageType
#include "Fusion/Protocol/JoinMessageType.hpp"
// Including type: Fusion.Protocol.PluginGameMode
#include "Fusion/Protocol/PluginGameMode.hpp"
// Including type: Fusion.Protocol.PeerMode
#include "Fusion/Protocol/PeerMode.hpp"
// Including type: Fusion.Protocol.JoinRequests
#include "Fusion/Protocol/JoinRequests.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: Join
  class Join;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::Join);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::Join*, "Fusion.Protocol", "Join");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.Join
  // [TokenAttribute] Offset: FFFFFFFF
  class Join : public ::Fusion::Protocol::Message {
    public:
    public:
    // public Fusion.Protocol.JoinMessageType Type
    // Size: 0x1
    // Offset: 0x28
    ::Fusion::Protocol::JoinMessageType Type;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::JoinMessageType) == 0x1);
    // public Fusion.Protocol.PluginGameMode GameMode
    // Size: 0x1
    // Offset: 0x29
    ::Fusion::Protocol::PluginGameMode GameMode;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::PluginGameMode) == 0x1);
    // public Fusion.Protocol.PeerMode PeerMode
    // Size: 0x1
    // Offset: 0x2A
    ::Fusion::Protocol::PeerMode PeerMode;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::PeerMode) == 0x1);
    // Padding between fields: PeerMode and: JoinRequests
    char __padding2[0x1] = {};
    // public Fusion.Protocol.JoinRequests JoinRequests
    // Size: 0x4
    // Offset: 0x2C
    ::Fusion::Protocol::JoinRequests JoinRequests;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::JoinRequests) == 0x4);
    // public System.Byte[] UniqueId
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> UniqueId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: public Fusion.Protocol.JoinMessageType Type
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::JoinMessageType& dyn_Type();
    // Get instance field reference: public Fusion.Protocol.PluginGameMode GameMode
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::PluginGameMode& dyn_GameMode();
    // Get instance field reference: public Fusion.Protocol.PeerMode PeerMode
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::PeerMode& dyn_PeerMode();
    // Get instance field reference: public Fusion.Protocol.JoinRequests JoinRequests
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::JoinRequests& dyn_JoinRequests();
    // Get instance field reference: public System.Byte[] UniqueId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_UniqueId();
    // public System.Void .ctor()
    // Offset: 0x2B8CC18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Join* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Join::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Join*, creationType>()));
    }
    // public System.Void .ctor(Fusion.Protocol.JoinMessageType type, Fusion.Protocol.PluginGameMode mode, Fusion.Protocol.PeerMode peerMode, Fusion.Protocol.JoinRequests joinRequests, System.Byte[] uniqueID, Fusion.Protocol.ProtocolMessageVersion protocolVersion, System.Version serializationVersion)
    // Offset: 0x2B8CC24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Join* New_ctor(::Fusion::Protocol::JoinMessageType type, ::Fusion::Protocol::PluginGameMode mode, ::Fusion::Protocol::PeerMode peerMode, ::Fusion::Protocol::JoinRequests joinRequests, ::ArrayW<uint8_t> uniqueID, ::Fusion::Protocol::ProtocolMessageVersion protocolVersion, ::System::Version* serializationVersion) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Join::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Join*, creationType>(type, mode, peerMode, joinRequests, uniqueID, protocolVersion, serializationVersion)));
    }
    // protected override System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8CC88
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.Void Message::SerializeProtected(Fusion.Protocol.BitStream stream)
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override System.String ToString()
    // Offset: 0x2B8CD40
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.String Message::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.Join
  #pragma pack(pop)
  static check_size<sizeof(Join), 48 + sizeof(::ArrayW<uint8_t>)> __Fusion_Protocol_JoinSizeCheck;
  static_assert(sizeof(Join) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::Join::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Join::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Join::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Join::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Join::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Join*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Join::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Join::*)()>(&Fusion::Protocol::Join::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Join*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
