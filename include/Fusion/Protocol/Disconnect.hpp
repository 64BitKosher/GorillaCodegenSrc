// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.Message
#include "Fusion/Protocol/Message.hpp"
// Including type: Fusion.Protocol.DisconnectReason
#include "Fusion/Protocol/DisconnectReason.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: Disconnect
  class Disconnect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::Disconnect);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::Disconnect*, "Fusion.Protocol", "Disconnect");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.Disconnect
  // [TokenAttribute] Offset: FFFFFFFF
  class Disconnect : public ::Fusion::Protocol::Message {
    public:
    public:
    // public Fusion.Protocol.DisconnectReason DisconnectReason
    // Size: 0x1
    // Offset: 0x28
    ::Fusion::Protocol::DisconnectReason DisconnectReason;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::DisconnectReason) == 0x1);
    public:
    // Creating conversion operator: operator ::Fusion::Protocol::DisconnectReason
    constexpr operator ::Fusion::Protocol::DisconnectReason() const noexcept {
      return DisconnectReason;
    }
    // Get instance field reference: public Fusion.Protocol.DisconnectReason DisconnectReason
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::DisconnectReason& dyn_DisconnectReason();
    // public System.Void .ctor()
    // Offset: 0x2B8C754
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Disconnect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Disconnect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Disconnect*, creationType>()));
    }
    // protected override System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8C760
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.Void Message::SerializeProtected(Fusion.Protocol.BitStream stream)
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override System.String ToString()
    // Offset: 0x2B8C81C
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.String Message::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.Disconnect
  #pragma pack(pop)
  static check_size<sizeof(Disconnect), 40 + sizeof(::Fusion::Protocol::DisconnectReason)> __Fusion_Protocol_DisconnectSizeCheck;
  static_assert(sizeof(Disconnect) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::Disconnect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Disconnect::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Disconnect::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Disconnect::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Disconnect*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Disconnect::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Disconnect::*)()>(&Fusion::Protocol::Disconnect::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Disconnect*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
