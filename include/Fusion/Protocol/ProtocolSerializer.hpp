// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
  // Forward declaring type: Message
  class Message;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: ProtocolSerializer
  class ProtocolSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::ProtocolSerializer);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::ProtocolSerializer*, "Fusion.Protocol", "ProtocolSerializer");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.ProtocolSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  class ProtocolSerializer : public ::Il2CppObject {
    public:
    public:
    // private readonly Fusion.Protocol.BitStream _writeStream
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Protocol::BitStream* writeStream;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::BitStream*) == 0x8);
    // private readonly Fusion.Protocol.BitStream _readStream
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Protocol::BitStream* readStream;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::BitStream*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Byte> _typeToId
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::System::Type*, uint8_t>* typeToId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, uint8_t>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Byte,Fusion.Protocol.Message> _idToType
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<uint8_t, ::Fusion::Protocol::Message*>* idToType;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint8_t, ::Fusion::Protocol::Message*>*) == 0x8);
    public:
    // Get instance field reference: private readonly Fusion.Protocol.BitStream _writeStream
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::BitStream*& dyn__writeStream();
    // Get instance field reference: private readonly Fusion.Protocol.BitStream _readStream
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::BitStream*& dyn__readStream();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Byte> _typeToId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, uint8_t>*& dyn__typeToId();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Byte,Fusion.Protocol.Message> _idToType
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint8_t, ::Fusion::Protocol::Message*>*& dyn__idToType();
    // public System.Void .ctor()
    // Offset: 0x2B8B44C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProtocolSerializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::ProtocolSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProtocolSerializer*, creationType>()));
    }
    // public System.Boolean ConvertToMessages(System.Byte[] data, System.Collections.Generic.List`1<Fusion.Protocol.Message> messages)
    // Offset: 0x2B8BE04
    bool ConvertToMessages(::ArrayW<uint8_t> data, ::System::Collections::Generic::List_1<::Fusion::Protocol::Message*>* messages);
    // public System.Boolean ConvertToBuffer(Fusion.Protocol.Message message, out Fusion.Protocol.BitStream buffer)
    // Offset: 0x2B8BC4C
    bool ConvertToBuffer(::Fusion::Protocol::Message* message, ByRef<::Fusion::Protocol::BitStream*> buffer);
    // private System.Void RegisterProtocolMsg(System.Byte id, Fusion.Protocol.Message message)
    // Offset: 0x2B8E778
    void RegisterProtocolMsg(uint8_t id, ::Fusion::Protocol::Message* message);
    // private System.Boolean PackNext(Fusion.Protocol.Message msg, Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8E998
    bool PackNext(::Fusion::Protocol::Message* msg, ::Fusion::Protocol::BitStream* stream);
    // private System.Boolean ReadNext(Fusion.Protocol.BitStream stream, out Fusion.Protocol.Message msg)
    // Offset: 0x2B8E820
    bool ReadNext(::Fusion::Protocol::BitStream* stream, ByRef<::Fusion::Protocol::Message*> msg);
  }; // Fusion.Protocol.ProtocolSerializer
  #pragma pack(pop)
  static check_size<sizeof(ProtocolSerializer), 40 + sizeof(::System::Collections::Generic::Dictionary_2<uint8_t, ::Fusion::Protocol::Message*>*)> __Fusion_Protocol_ProtocolSerializerSizeCheck;
  static_assert(sizeof(ProtocolSerializer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::ConvertToMessages
// Il2CppName: ConvertToMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::ProtocolSerializer::*)(::ArrayW<uint8_t>, ::System::Collections::Generic::List_1<::Fusion::Protocol::Message*>*)>(&Fusion::Protocol::ProtocolSerializer::ConvertToMessages)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* messages = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Message")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ProtocolSerializer*), "ConvertToMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, messages});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::ConvertToBuffer
// Il2CppName: ConvertToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::ProtocolSerializer::*)(::Fusion::Protocol::Message*, ByRef<::Fusion::Protocol::BitStream*>)>(&Fusion::Protocol::ProtocolSerializer::ConvertToBuffer)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Message")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ProtocolSerializer*), "ConvertToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::RegisterProtocolMsg
// Il2CppName: RegisterProtocolMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::ProtocolSerializer::*)(uint8_t, ::Fusion::Protocol::Message*)>(&Fusion::Protocol::ProtocolSerializer::RegisterProtocolMsg)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ProtocolSerializer*), "RegisterProtocolMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, message});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::PackNext
// Il2CppName: PackNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::ProtocolSerializer::*)(::Fusion::Protocol::Message*, ::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::ProtocolSerializer::PackNext)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Message")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ProtocolSerializer*), "PackNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::ProtocolSerializer::ReadNext
// Il2CppName: ReadNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::ProtocolSerializer::*)(::Fusion::Protocol::BitStream*, ByRef<::Fusion::Protocol::Message*>)>(&Fusion::Protocol::ProtocolSerializer::ReadNext)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Message")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ProtocolSerializer*), "ReadNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, msg});
  }
};
