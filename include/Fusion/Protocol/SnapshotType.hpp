// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: SnapshotType
  struct SnapshotType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::SnapshotType, "Fusion.Protocol", "SnapshotType");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.SnapshotType
  // [TokenAttribute] Offset: FFFFFFFF
  struct SnapshotType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: SnapshotType
    constexpr SnapshotType(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public Fusion.Protocol.SnapshotType Invalid
    static constexpr const uint8_t Invalid = 0u;
    // Get static field: static public Fusion.Protocol.SnapshotType Invalid
    static ::Fusion::Protocol::SnapshotType _get_Invalid();
    // Set static field: static public Fusion.Protocol.SnapshotType Invalid
    static void _set_Invalid(::Fusion::Protocol::SnapshotType value);
    // static field const value: static public Fusion.Protocol.SnapshotType Data
    static constexpr const uint8_t Data = 1u;
    // Get static field: static public Fusion.Protocol.SnapshotType Data
    static ::Fusion::Protocol::SnapshotType _get_Data();
    // Set static field: static public Fusion.Protocol.SnapshotType Data
    static void _set_Data(::Fusion::Protocol::SnapshotType value);
    // static field const value: static public Fusion.Protocol.SnapshotType Confirmation
    static constexpr const uint8_t Confirmation = 2u;
    // Get static field: static public Fusion.Protocol.SnapshotType Confirmation
    static ::Fusion::Protocol::SnapshotType _get_Confirmation();
    // Set static field: static public Fusion.Protocol.SnapshotType Confirmation
    static void _set_Confirmation(::Fusion::Protocol::SnapshotType value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // Fusion.Protocol.SnapshotType
  #pragma pack(pop)
  static check_size<sizeof(SnapshotType), 0 + sizeof(uint8_t)> __Fusion_Protocol_SnapshotTypeSizeCheck;
  static_assert(sizeof(SnapshotType) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
