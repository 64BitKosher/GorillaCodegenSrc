// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.Message
#include "Fusion/Protocol/Message.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Including type: Fusion.Sockets.Stun.NATType
#include "Fusion/Sockets/Stun/NATType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: ReflexiveInfo
  class ReflexiveInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::ReflexiveInfo);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::ReflexiveInfo*, "Fusion.Protocol", "ReflexiveInfo");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.ReflexiveInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ReflexiveInfo : public ::Fusion::Protocol::Message {
    public:
    public:
    // public System.Int32 ActorNr
    // Size: 0x4
    // Offset: 0x28
    int ActorNr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ActorNr and: PublicAddr
    char __padding0[0x4] = {};
    // public Fusion.Sockets.NetAddress PublicAddr
    // Size: 0x18
    // Offset: 0x30
    ::Fusion::Sockets::NetAddress PublicAddr;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public Fusion.Sockets.NetAddress PrivateAddr
    // Size: 0x18
    // Offset: 0x48
    ::Fusion::Sockets::NetAddress PrivateAddr;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public Fusion.Sockets.Stun.NATType NatType
    // Size: 0x1
    // Offset: 0x60
    ::Fusion::Sockets::Stun::NATType NatType;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::Stun::NATType) == 0x1);
    // Padding between fields: NatType and: UniqueId
    char __padding3[0x7] = {};
    // public System.Byte[] UniqueId
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<uint8_t> UniqueId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 ActorNr
    [[deprecated("Use field access instead!")]] int& dyn_ActorNr();
    // Get instance field reference: public Fusion.Sockets.NetAddress PublicAddr
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_PublicAddr();
    // Get instance field reference: public Fusion.Sockets.NetAddress PrivateAddr
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_PrivateAddr();
    // Get instance field reference: public Fusion.Sockets.Stun.NATType NatType
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::Stun::NATType& dyn_NatType();
    // Get instance field reference: public System.Byte[] UniqueId
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_UniqueId();
    // public System.Void .ctor()
    // Offset: 0x2B8D4EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflexiveInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::ReflexiveInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflexiveInfo*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 actorNr, Fusion.Sockets.NetAddress publicAddr, Fusion.Sockets.NetAddress privateAddr, Fusion.Sockets.Stun.NATType stunNatType, System.Byte[] uniqueID, Fusion.Protocol.ProtocolMessageVersion protocolVersion, System.Version serializationVersion)
    // Offset: 0x2B8D4F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflexiveInfo* New_ctor(int actorNr, ::Fusion::Sockets::NetAddress publicAddr, ::Fusion::Sockets::NetAddress privateAddr, ::Fusion::Sockets::Stun::NATType stunNatType, ::ArrayW<uint8_t> uniqueID, ::Fusion::Protocol::ProtocolMessageVersion protocolVersion, ::System::Version* serializationVersion) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::ReflexiveInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflexiveInfo*, creationType>(actorNr, publicAddr, privateAddr, stunNatType, uniqueID, protocolVersion, serializationVersion)));
    }
    // protected override System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8D574
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.Void Message::SerializeProtected(Fusion.Protocol.BitStream stream)
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override System.String ToString()
    // Offset: 0x2B8D650
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.String Message::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.ReflexiveInfo
  #pragma pack(pop)
  static check_size<sizeof(ReflexiveInfo), 104 + sizeof(::ArrayW<uint8_t>)> __Fusion_Protocol_ReflexiveInfoSizeCheck;
  static_assert(sizeof(ReflexiveInfo) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::ReflexiveInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::ReflexiveInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::ReflexiveInfo::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::ReflexiveInfo::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::ReflexiveInfo::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ReflexiveInfo*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::ReflexiveInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::ReflexiveInfo::*)()>(&Fusion::Protocol::ReflexiveInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::ReflexiveInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
