// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.IMessage
#include "Fusion/Protocol/IMessage.hpp"
// Including type: Fusion.Protocol.ProtocolMessageVersion
#include "Fusion/Protocol/ProtocolMessageVersion.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: Message
  class Message;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::Message);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::Message*, "Fusion.Protocol", "Message");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.Message
  // [TokenAttribute] Offset: FFFFFFFF
  class Message : public ::Il2CppObject/*, public ::Fusion::Protocol::IMessage*/ {
    public:
    public:
    // public Fusion.Protocol.ProtocolMessageVersion ProtocolVersion
    // Size: 0x1
    // Offset: 0x10
    ::Fusion::Protocol::ProtocolMessageVersion ProtocolVersion;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::ProtocolMessageVersion) == 0x1);
    // Padding between fields: ProtocolVersion and: FusionSerializationVersion
    char __padding0[0x7] = {};
    // public System.Version FusionSerializationVersion
    // Size: 0x8
    // Offset: 0x18
    ::System::Version* FusionSerializationVersion;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.String _customData
    // Size: 0x8
    // Offset: 0x20
    ::StringW customData;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::Protocol::IMessage
    operator ::Fusion::Protocol::IMessage() noexcept {
      return *reinterpret_cast<::Fusion::Protocol::IMessage*>(this);
    }
    // static field const value: static private System.Int32 CUSTOM_DATA_LENGHT
    static constexpr const int CUSTOM_DATA_LENGHT = 1024;
    // Get static field: static private System.Int32 CUSTOM_DATA_LENGHT
    static int _get_CUSTOM_DATA_LENGHT();
    // Set static field: static private System.Int32 CUSTOM_DATA_LENGHT
    static void _set_CUSTOM_DATA_LENGHT(int value);
    // Get instance field reference: public Fusion.Protocol.ProtocolMessageVersion ProtocolVersion
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::ProtocolMessageVersion& dyn_ProtocolVersion();
    // Get instance field reference: public System.Version FusionSerializationVersion
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_FusionSerializationVersion();
    // Get instance field reference: private System.String _customData
    [[deprecated("Use field access instead!")]] ::StringW& dyn__customData();
    // public System.String get_CustomData()
    // Offset: 0x2B8C10C
    ::StringW get_CustomData();
    // public Fusion.Protocol.Message Clone()
    // Offset: 0x2B8C114
    ::Fusion::Protocol::Message* Clone();
    // public System.Void .ctor(Fusion.Protocol.ProtocolMessageVersion protocolMessage, System.Version serializationVersion)
    // Offset: 0x2B8C194
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Message* New_ctor(::Fusion::Protocol::ProtocolMessageVersion protocolMessage, ::System::Version* serializationVersion) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Message::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Message*, creationType>(protocolMessage, serializationVersion)));
    }
    // public System.Void Serialize(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8C338
    void Serialize(::Fusion::Protocol::BitStream* stream);
    // protected System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8C500
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override System.String ToString()
    // Offset: 0x2B8C504
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.Message
  #pragma pack(pop)
  static check_size<sizeof(Message), 32 + sizeof(::StringW)> __Fusion_Protocol_MessageSizeCheck;
  static_assert(sizeof(Message) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::Message::get_CustomData
// Il2CppName: get_CustomData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Message::*)()>(&Fusion::Protocol::Message::get_CustomData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Message*), "get_CustomData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Message::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Protocol::Message* (Fusion::Protocol::Message::*)()>(&Fusion::Protocol::Message::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Message*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Message::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Message::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Message::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Message::Serialize)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Message*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Message::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Message::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Message::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Message*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Message::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Message::*)()>(&Fusion::Protocol::Message::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Message*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
