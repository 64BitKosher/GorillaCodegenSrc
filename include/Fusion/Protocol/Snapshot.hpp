// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.Message
#include "Fusion/Protocol/Message.hpp"
// Including type: Fusion.Protocol.SnapshotType
#include "Fusion/Protocol/SnapshotType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: Snapshot
  class Snapshot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::Snapshot);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::Snapshot*, "Fusion.Protocol", "Snapshot");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.Snapshot
  // [TokenAttribute] Offset: FFFFFFFF
  class Snapshot : public ::Fusion::Protocol::Message {
    public:
    public:
    // private System.Int32 <Tick>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int Tick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 <NetworkID>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    uint NetworkID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private Fusion.Protocol.SnapshotType <SnapshotType>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    ::Fusion::Protocol::SnapshotType SnapshotType;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::SnapshotType) == 0x1);
    // Padding between fields: SnapshotType and: TotalSize
    char __padding2[0x3] = {};
    // private System.Int32 <TotalSize>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    int TotalSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte[] <Data>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<uint8_t> Data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.UInt64 <CRC>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    uint64_t CRC;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Byte[] <SnapshotBuffer>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> SnapshotBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 <SnapshotSize>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    int SnapshotSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 <Tick>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Tick$k__BackingField();
    // Get instance field reference: private System.UInt32 <NetworkID>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$NetworkID$k__BackingField();
    // Get instance field reference: private Fusion.Protocol.SnapshotType <SnapshotType>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::SnapshotType& dyn_$SnapshotType$k__BackingField();
    // Get instance field reference: private System.Int32 <TotalSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$TotalSize$k__BackingField();
    // Get instance field reference: private System.Byte[] <Data>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_$Data$k__BackingField();
    // Get instance field reference: private System.UInt64 <CRC>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$CRC$k__BackingField();
    // Get instance field reference: private System.Byte[] <SnapshotBuffer>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_$SnapshotBuffer$k__BackingField();
    // Get instance field reference: private System.Int32 <SnapshotSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SnapshotSize$k__BackingField();
    // public System.Int32 get_Tick()
    // Offset: 0x2B8DB34
    int get_Tick();
    // private System.Void set_Tick(System.Int32 value)
    // Offset: 0x2B8DB3C
    void set_Tick(int value);
    // public System.UInt32 get_NetworkID()
    // Offset: 0x2B8DB44
    uint get_NetworkID();
    // private System.Void set_NetworkID(System.UInt32 value)
    // Offset: 0x2B8DB4C
    void set_NetworkID(uint value);
    // public Fusion.Protocol.SnapshotType get_SnapshotType()
    // Offset: 0x2B8DB54
    ::Fusion::Protocol::SnapshotType get_SnapshotType();
    // private System.Void set_SnapshotType(Fusion.Protocol.SnapshotType value)
    // Offset: 0x2B8DB5C
    void set_SnapshotType(::Fusion::Protocol::SnapshotType value);
    // public System.Int32 get_TotalSize()
    // Offset: 0x2B8DB64
    int get_TotalSize();
    // private System.Void set_TotalSize(System.Int32 value)
    // Offset: 0x2B8DB6C
    void set_TotalSize(int value);
    // public System.Boolean get_IsValid()
    // Offset: 0x2B8DB74
    bool get_IsValid();
    // public System.Byte[] get_Data()
    // Offset: 0x2B8DC10
    ::ArrayW<uint8_t> get_Data();
    // private System.Void set_Data(System.Byte[] value)
    // Offset: 0x2B8DC18
    void set_Data(::ArrayW<uint8_t> value);
    // public System.UInt64 get_CRC()
    // Offset: 0x2B8DC20
    uint64_t get_CRC();
    // private System.Void set_CRC(System.UInt64 value)
    // Offset: 0x2B8DC28
    void set_CRC(uint64_t value);
    // private System.Void set_SnapshotBuffer(System.Byte[] value)
    // Offset: 0x2B8DC30
    void set_SnapshotBuffer(::ArrayW<uint8_t> value);
    // public System.Int32 get_SnapshotSize()
    // Offset: 0x2B8DC38
    int get_SnapshotSize();
    // private System.Void set_SnapshotSize(System.Int32 value)
    // Offset: 0x2B8DC40
    void set_SnapshotSize(int value);
    // public System.Void .ctor()
    // Offset: 0x2B8DC48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Snapshot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Snapshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Snapshot*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 tick, System.UInt32 networkID, Fusion.Protocol.SnapshotType snapshotType, System.Int32 snapshotSize, System.Byte[] data, Fusion.Protocol.ProtocolMessageVersion protocolVersion, System.Version serializationVersion)
    // Offset: 0x2B8DC54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Snapshot* New_ctor(int tick, uint networkID, ::Fusion::Protocol::SnapshotType snapshotType, int snapshotSize, ::ArrayW<uint8_t> data, ::Fusion::Protocol::ProtocolMessageVersion protocolVersion, ::System::Version* serializationVersion) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Snapshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Snapshot*, creationType>(tick, networkID, snapshotType, snapshotSize, data, protocolVersion, serializationVersion)));
    }
    // private System.UInt64 ComputeCRC(System.Byte[] data)
    // Offset: 0x2B8DB90
    uint64_t ComputeCRC(::ArrayW<uint8_t> data);
    // private System.Void SetData(System.Byte[] data)
    // Offset: 0x2B8DCC0
    void SetData(::ArrayW<uint8_t> data);
    // protected override System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8DD64
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.Void Message::SerializeProtected(Fusion.Protocol.BitStream stream)
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override Fusion.Protocol.Message Clone()
    // Offset: 0x2B8DEB0
    // Implemented from: Fusion.Protocol.Message
    // Base method: Fusion.Protocol.Message Message::Clone()
    ::Fusion::Protocol::Message* Clone();
    // public override System.String ToString()
    // Offset: 0x2B8DF08
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.String Message::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.Snapshot
  #pragma pack(pop)
  static check_size<sizeof(Snapshot), 80 + sizeof(int)> __Fusion_Protocol_SnapshotSizeCheck;
  static_assert(sizeof(Snapshot) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_Tick
// Il2CppName: get_Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_Tick
// Il2CppName: set_Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(int)>(&Fusion::Protocol::Snapshot::set_Tick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_NetworkID
// Il2CppName: get_NetworkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_NetworkID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_NetworkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_NetworkID
// Il2CppName: set_NetworkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(uint)>(&Fusion::Protocol::Snapshot::set_NetworkID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_NetworkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_SnapshotType
// Il2CppName: get_SnapshotType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Protocol::SnapshotType (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_SnapshotType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_SnapshotType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_SnapshotType
// Il2CppName: set_SnapshotType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(::Fusion::Protocol::SnapshotType)>(&Fusion::Protocol::Snapshot::set_SnapshotType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "SnapshotType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_SnapshotType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_TotalSize
// Il2CppName: get_TotalSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_TotalSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_TotalSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_TotalSize
// Il2CppName: set_TotalSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(int)>(&Fusion::Protocol::Snapshot::set_TotalSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_TotalSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_Data
// Il2CppName: set_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(::ArrayW<uint8_t>)>(&Fusion::Protocol::Snapshot::set_Data)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_CRC
// Il2CppName: get_CRC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_CRC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_CRC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_CRC
// Il2CppName: set_CRC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(uint64_t)>(&Fusion::Protocol::Snapshot::set_CRC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_CRC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_SnapshotBuffer
// Il2CppName: set_SnapshotBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(::ArrayW<uint8_t>)>(&Fusion::Protocol::Snapshot::set_SnapshotBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_SnapshotBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::get_SnapshotSize
// Il2CppName: get_SnapshotSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::get_SnapshotSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "get_SnapshotSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::set_SnapshotSize
// Il2CppName: set_SnapshotSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(int)>(&Fusion::Protocol::Snapshot::set_SnapshotSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "set_SnapshotSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::ComputeCRC
// Il2CppName: ComputeCRC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Protocol::Snapshot::*)(::ArrayW<uint8_t>)>(&Fusion::Protocol::Snapshot::ComputeCRC)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "ComputeCRC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(::ArrayW<uint8_t>)>(&Fusion::Protocol::Snapshot::SetData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Snapshot::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Snapshot::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Protocol::Message* (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Snapshot::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Snapshot::*)()>(&Fusion::Protocol::Snapshot::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Snapshot*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
