// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.Message
#include "Fusion/Protocol/Message.hpp"
// Including type: Fusion.Protocol.StartRequests
#include "Fusion/Protocol/StartRequests.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: Start
  class Start;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::Start);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::Start*, "Fusion.Protocol", "Start");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.Start
  // [TokenAttribute] Offset: FFFFFFFF
  class Start : public ::Fusion::Protocol::Message {
    public:
    public:
    // public System.Int32 RemoteServerID
    // Size: 0x4
    // Offset: 0x28
    int RemoteServerID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.Protocol.StartRequests StartRequests
    // Size: 0x4
    // Offset: 0x2C
    ::Fusion::Protocol::StartRequests StartRequests;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::StartRequests) == 0x4);
    public:
    // Get instance field reference: public System.Int32 RemoteServerID
    [[deprecated("Use field access instead!")]] int& dyn_RemoteServerID();
    // Get instance field reference: public Fusion.Protocol.StartRequests StartRequests
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::StartRequests& dyn_StartRequests();
    // public System.Void .ctor()
    // Offset: 0x2B8E498
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Start* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::Start::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Start*, creationType>()));
    }
    // protected override System.Void SerializeProtected(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8E4A4
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.Void Message::SerializeProtected(Fusion.Protocol.BitStream stream)
    void SerializeProtected(::Fusion::Protocol::BitStream* stream);
    // public override System.String ToString()
    // Offset: 0x2B8E4F8
    // Implemented from: Fusion.Protocol.Message
    // Base method: System.String Message::ToString()
    ::StringW ToString();
  }; // Fusion.Protocol.Start
  #pragma pack(pop)
  static check_size<sizeof(Start), 44 + sizeof(::Fusion::Protocol::StartRequests)> __Fusion_Protocol_StartSizeCheck;
  static_assert(sizeof(Start) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::Start::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::Start::SerializeProtected
// Il2CppName: SerializeProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::Start::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Protocol::Start::SerializeProtected)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Start*), "SerializeProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::Start::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Protocol::Start::*)()>(&Fusion::Protocol::Start::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::Start*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
