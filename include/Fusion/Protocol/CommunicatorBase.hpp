// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Protocol.ICommunicator
#include "Fusion/Protocol/ICommunicator.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: IMessage
  class IMessage;
  // Forward declaring type: Message
  class Message;
  // Forward declaring type: ProtocolSerializer
  class ProtocolSerializer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Forward declaring type: CommunicatorBase
  class CommunicatorBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Protocol::CommunicatorBase);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Protocol::CommunicatorBase*, "Fusion.Protocol", "CommunicatorBase");
// Type namespace: Fusion.Protocol
namespace Fusion::Protocol {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Protocol.CommunicatorBase
  // [TokenAttribute] Offset: FFFFFFFF
  class CommunicatorBase : public ::Il2CppObject/*, public ::Fusion::Protocol::ICommunicator*/ {
    public:
    // Nested type: ::Fusion::Protocol::CommunicatorBase::$$c__DisplayClass16_0_1<K>
    template<typename K>
    class $$c__DisplayClass16_0_1;
    public:
    // protected readonly System.Collections.Generic.Dictionary`2<System.Type,System.Action`2<System.Int32,Fusion.Protocol.IMessage>> _callbacks
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Action_2<int, ::Fusion::Protocol::IMessage*>*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Action_2<int, ::Fusion::Protocol::IMessage*>*>*) == 0x8);
    // protected readonly System.Collections.Generic.List`1<Fusion.Protocol.Message> _messageList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Fusion::Protocol::Message*>* messageList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::Protocol::Message*>*) == 0x8);
    // protected readonly System.Collections.Generic.Queue`1<System.ValueTuple`2<System.Int32,Fusion.Protocol.Message>> _messageSendQueue
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Fusion::Protocol::Message*>>* messageSendQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Fusion::Protocol::Message*>>*) == 0x8);
    // protected readonly System.Collections.Generic.Queue`1<System.ValueTuple`2<System.Int32,System.Object>> _recvQueue
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Il2CppObject*>>* recvQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Il2CppObject*>>*) == 0x8);
    // private Fusion.Protocol.ProtocolSerializer _protocolSerializer
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Protocol::ProtocolSerializer* protocolSerializer;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::ProtocolSerializer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::Protocol::ICommunicator
    operator ::Fusion::Protocol::ICommunicator() noexcept {
      return *reinterpret_cast<::Fusion::Protocol::ICommunicator*>(this);
    }
    // Get instance field reference: protected readonly System.Collections.Generic.Dictionary`2<System.Type,System.Action`2<System.Int32,Fusion.Protocol.IMessage>> _callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Action_2<int, ::Fusion::Protocol::IMessage*>*>*& dyn__callbacks();
    // Get instance field reference: protected readonly System.Collections.Generic.List`1<Fusion.Protocol.Message> _messageList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::Protocol::Message*>*& dyn__messageList();
    // Get instance field reference: protected readonly System.Collections.Generic.Queue`1<System.ValueTuple`2<System.Int32,Fusion.Protocol.Message>> _messageSendQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Fusion::Protocol::Message*>>*& dyn__messageSendQueue();
    // Get instance field reference: protected readonly System.Collections.Generic.Queue`1<System.ValueTuple`2<System.Int32,System.Object>> _recvQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::ValueTuple_2<int, ::Il2CppObject*>>*& dyn__recvQueue();
    // Get instance field reference: private Fusion.Protocol.ProtocolSerializer _protocolSerializer
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::ProtocolSerializer*& dyn__protocolSerializer();
    // public System.Int32 get_CommunicatorID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_CommunicatorID();
    // public System.Void .ctor()
    // Offset: 0x2B8B28C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CommunicatorBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::CommunicatorBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CommunicatorBase*, creationType>()));
    }
    // public System.Boolean Poll()
    // Offset: 0x2B8B774
    bool Poll();
    // public System.Void PushPackage(System.Int32 senderActor, System.Int32 eventCode, System.Object data)
    // Offset: 0x2B8B7C4
    void PushPackage(int senderActor, int eventCode, ::Il2CppObject* data);
    // public System.Void SendMessage(System.Int32 targetActor, Fusion.Protocol.IMessage message)
    // Offset: 0x2B8BAC0
    void SendMessage(int targetActor, ::Fusion::Protocol::IMessage* message);
    // public System.Void Service()
    // Offset: 0x2B8BD78
    void Service();
    // private System.Void HandleProtocolPackage(System.Int32 actorNr, System.Object data)
    // Offset: 0x2B8B894
    void HandleProtocolPackage(int actorNr, ::Il2CppObject* data);
    // public System.Int32 ReceivePackage(out System.Int32 senderActor, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x2B8BFF0
    int ReceivePackage(ByRef<int> senderActor, uint8_t* buffer, int bufferLength);
    // public System.Boolean SendPackage(System.Byte code, System.Int32 targetActor, System.Boolean reliable, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool SendPackage(uint8_t code, int targetActor, bool reliable, uint8_t* buffer, int bufferLength);
    // protected System.Void ConvertData(System.Object data, out System.Byte[] dataBuffer, out System.Int32 maxLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ConvertData(::Il2CppObject* data, ByRef<::ArrayW<uint8_t>> dataBuffer, ByRef<int> maxLength);
    // public System.Void RegisterPackageCallback(System.Action`2<System.Int32,K> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class K>
    void RegisterPackageCallback(::System::Action_2<int, K>* callback) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<K>, ::Fusion::Protocol::IMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Protocol::CommunicatorBase::RegisterPackageCallback");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Protocol::CommunicatorBase*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<K>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
  }; // Fusion.Protocol.CommunicatorBase
  #pragma pack(pop)
  static check_size<sizeof(CommunicatorBase), 48 + sizeof(::Fusion::Protocol::ProtocolSerializer*)> __Fusion_Protocol_CommunicatorBaseSizeCheck;
  static_assert(sizeof(CommunicatorBase) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::get_CommunicatorID
// Il2CppName: get_CommunicatorID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Protocol::CommunicatorBase::*)()>(&Fusion::Protocol::CommunicatorBase::get_CommunicatorID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "get_CommunicatorID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::Poll
// Il2CppName: Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::CommunicatorBase::*)()>(&Fusion::Protocol::CommunicatorBase::Poll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::PushPackage
// Il2CppName: PushPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::CommunicatorBase::*)(int, int, ::Il2CppObject*)>(&Fusion::Protocol::CommunicatorBase::PushPackage)> {
  static const MethodInfo* get() {
    static auto* senderActor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eventCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "PushPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{senderActor, eventCode, data});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::CommunicatorBase::*)(int, ::Fusion::Protocol::IMessage*)>(&Fusion::Protocol::CommunicatorBase::SendMessage)> {
  static const MethodInfo* get() {
    static auto* targetActor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "IMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetActor, message});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::CommunicatorBase::*)()>(&Fusion::Protocol::CommunicatorBase::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::HandleProtocolPackage
// Il2CppName: HandleProtocolPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::CommunicatorBase::*)(int, ::Il2CppObject*)>(&Fusion::Protocol::CommunicatorBase::HandleProtocolPackage)> {
  static const MethodInfo* get() {
    static auto* actorNr = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "HandleProtocolPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorNr, data});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::ReceivePackage
// Il2CppName: ReceivePackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Protocol::CommunicatorBase::*)(ByRef<int>, uint8_t*, int)>(&Fusion::Protocol::CommunicatorBase::ReceivePackage)> {
  static const MethodInfo* get() {
    static auto* senderActor = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "ReceivePackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{senderActor, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::SendPackage
// Il2CppName: SendPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Protocol::CommunicatorBase::*)(uint8_t, int, bool, uint8_t*, int)>(&Fusion::Protocol::CommunicatorBase::SendPackage)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* targetActor = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "SendPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, targetActor, reliable, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::ConvertData
// Il2CppName: ConvertData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Protocol::CommunicatorBase::*)(::Il2CppObject*, ByRef<::ArrayW<uint8_t>>, ByRef<int>)>(&Fusion::Protocol::CommunicatorBase::ConvertData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* dataBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Protocol::CommunicatorBase*), "ConvertData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataBuffer, maxLength});
  }
};
// Writing MetadataGetter for method: Fusion::Protocol::CommunicatorBase::RegisterPackageCallback
// Il2CppName: RegisterPackageCallback
// Cannot write MetadataGetter for generic methods!
