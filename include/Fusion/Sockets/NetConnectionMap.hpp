// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: INetPeerGroupCallbacks
  class INetPeerGroupCallbacks;
  // Forward declaring type: NetConfig
  struct NetConfig;
  // Forward declaring type: NetAddress
  struct NetAddress;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnectionMap
  struct NetConnectionMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConnectionMap, "Fusion.Sockets", "NetConnectionMap");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConnectionMap
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConnectionMap/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Sockets::NetConnectionMap::EntryState
    struct EntryState;
    // Nested type: ::Fusion::Sockets::NetConnectionMap::Iterator
    struct Iterator;
    public:
    // private Fusion.Sockets.NetConnection** Buckets
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Sockets::NetConnection** Buckets;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnection**) == 0x8);
    // private Fusion.Sockets.NetConnection* FreeHead
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::Sockets::NetConnection* FreeHead;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnection*) == 0x8);
    // Fusion.Sockets.NetConnection* Connections
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Sockets::NetConnection* Connections;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnection*) == 0x8);
    // private System.Int16 Group
    // Size: 0x2
    // Offset: 0x18
    int16_t Group;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: Group and: UsedCount
    char __padding3[0x6] = {};
    // private System.UInt64 UsedCount
    // Size: 0x8
    // Offset: 0x20
    uint64_t UsedCount;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 FreeCount
    // Size: 0x8
    // Offset: 0x28
    uint64_t FreeCount;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 CapacityAllocated
    // Size: 0x8
    // Offset: 0x30
    uint64_t CapacityAllocated;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt64 CapacityUsable
    // Size: 0x8
    // Offset: 0x38
    uint64_t CapacityUsable;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: NetConnectionMap
    constexpr NetConnectionMap(::Fusion::Sockets::NetConnection** Buckets_ = {}, ::Fusion::Sockets::NetConnection* FreeHead_ = {}, ::Fusion::Sockets::NetConnection* Connections_ = {}, int16_t Group_ = {}, uint64_t UsedCount_ = {}, uint64_t FreeCount_ = {}, uint64_t CapacityAllocated_ = {}, uint64_t CapacityUsable_ = {}) noexcept : Buckets{Buckets_}, FreeHead{FreeHead_}, Connections{Connections_}, Group{Group_}, UsedCount{UsedCount_}, FreeCount{FreeCount_}, CapacityAllocated{CapacityAllocated_}, CapacityUsable{CapacityUsable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Fusion.Sockets.NetConnection** Buckets
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnection**& dyn_Buckets();
    // Get instance field reference: private Fusion.Sockets.NetConnection* FreeHead
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnection*& dyn_FreeHead();
    // Get instance field reference: Fusion.Sockets.NetConnection* Connections
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnection*& dyn_Connections();
    // Get instance field reference: private System.Int16 Group
    [[deprecated("Use field access instead!")]] int16_t& dyn_Group();
    // Get instance field reference: private System.UInt64 UsedCount
    [[deprecated("Use field access instead!")]] uint64_t& dyn_UsedCount();
    // Get instance field reference: private System.UInt64 FreeCount
    [[deprecated("Use field access instead!")]] uint64_t& dyn_FreeCount();
    // Get instance field reference: private System.UInt64 CapacityAllocated
    [[deprecated("Use field access instead!")]] uint64_t& dyn_CapacityAllocated();
    // Get instance field reference: System.UInt64 CapacityUsable
    [[deprecated("Use field access instead!")]] uint64_t& dyn_CapacityUsable();
    // static public System.Void Dispose(Fusion.Sockets.NetConnectionMap* map, Fusion.Sockets.INetPeerGroupCallbacks callbacks)
    // Offset: 0x2B91A3C
    static void Dispose(::Fusion::Sockets::NetConnectionMap* map, ::Fusion::Sockets::INetPeerGroupCallbacks* callbacks);
    // static public Fusion.Sockets.NetConnectionMap* Allocate(System.Int32 capacity, System.Int16 groupIndex, in Fusion.Sockets.NetConfig* config)
    // Offset: 0x2B91CE4
    static ::Fusion::Sockets::NetConnectionMap* Allocate(int capacity, int16_t groupIndex, ByRef<::Fusion::Sockets::NetConfig*> config);
    // public System.Int32 get_CountUsed()
    // Offset: 0x2B91E20
    int get_CountUsed();
    // public Fusion.Sockets.NetConnection* get_ConnectionsBuffer()
    // Offset: 0x2B91E28
    ::Fusion::Sockets::NetConnection* get_ConnectionsBuffer();
    // public System.Void Remap(Fusion.Sockets.NetAddress oldAddress, Fusion.Sockets.NetAddress newAddress)
    // Offset: 0x2B91E30
    void Remap(::Fusion::Sockets::NetAddress oldAddress, ::Fusion::Sockets::NetAddress newAddress);
    // public System.Boolean Remove(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B92034
    bool Remove(::Fusion::Sockets::NetAddress address);
    // public Fusion.Sockets.NetConnection* Insert(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B92168
    ::Fusion::Sockets::NetConnection* Insert(::Fusion::Sockets::NetAddress address);
    // public Fusion.Sockets.NetConnection* FindByIndex(System.Int32 index)
    // Offset: 0x2B922D4
    ::Fusion::Sockets::NetConnection* FindByIndex(int index);
    // public System.Boolean TryFindByIndex(System.Int32 index, out Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B92330
    bool TryFindByIndex(int index, ByRef<::Fusion::Sockets::NetConnection*> connection);
    // public Fusion.Sockets.NetConnection* Find(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B92364
    ::Fusion::Sockets::NetConnection* Find(::Fusion::Sockets::NetAddress address);
  }; // Fusion.Sockets.NetConnectionMap
  #pragma pack(pop)
  static check_size<sizeof(NetConnectionMap), 56 + sizeof(uint64_t)> __Fusion_Sockets_NetConnectionMapSizeCheck;
  static_assert(sizeof(NetConnectionMap) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetConnectionMap*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetConnectionMap::Dispose)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionMap"))->byval_arg;
    static auto* callbacks = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, callbacks});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnectionMap* (*)(int, int16_t, ByRef<::Fusion::Sockets::NetConfig*>)>(&Fusion::Sockets::NetConnectionMap::Allocate)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupIndex = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* config = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity, groupIndex, config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::get_CountUsed
// Il2CppName: get_CountUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConnectionMap::*)()>(&Fusion::Sockets::NetConnectionMap::get_CountUsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "get_CountUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::get_ConnectionsBuffer
// Il2CppName: get_ConnectionsBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (Fusion::Sockets::NetConnectionMap::*)()>(&Fusion::Sockets::NetConnectionMap::get_ConnectionsBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "get_ConnectionsBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Remap
// Il2CppName: Remap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetConnectionMap::*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetConnectionMap::Remap)> {
  static const MethodInfo* get() {
    static auto* oldAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* newAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Remap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldAddress, newAddress});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionMap::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetConnectionMap::Remove)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (Fusion::Sockets::NetConnectionMap::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetConnectionMap::Insert)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::FindByIndex
// Il2CppName: FindByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (Fusion::Sockets::NetConnectionMap::*)(int)>(&Fusion::Sockets::NetConnectionMap::FindByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "FindByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::TryFindByIndex
// Il2CppName: TryFindByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionMap::*)(int, ByRef<::Fusion::Sockets::NetConnection*>)>(&Fusion::Sockets::NetConnectionMap::TryFindByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "TryFindByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, connection});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (Fusion::Sockets::NetConnectionMap::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetConnectionMap::Find)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
