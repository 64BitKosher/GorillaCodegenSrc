// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConfigSimulationOscillator
  struct NetConfigSimulationOscillator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConfigSimulationOscillator, "Fusion.Sockets", "NetConfigSimulationOscillator");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConfigSimulationOscillator
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConfigSimulationOscillator/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape
    struct WaveShape;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.Sockets.NetConfigSimulationOscillator/WaveShape
    // [TokenAttribute] Offset: FFFFFFFF
    struct WaveShape/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WaveShape
      constexpr WaveShape(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Noise
      static constexpr const int Noise = 0;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Noise
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_Noise();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Noise
      static void _set_Noise(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Sine
      static constexpr const int Sine = 1;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Sine
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_Sine();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Sine
      static void _set_Sine(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Square
      static constexpr const int Square = 2;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Square
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_Square();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Square
      static void _set_Square(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Triangle
      static constexpr const int Triangle = 3;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Triangle
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_Triangle();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Triangle
      static void _set_Triangle(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Saw
      static constexpr const int Saw = 4;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Saw
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_Saw();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Saw
      static void _set_Saw(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // static field const value: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape ReverseSaw
      static constexpr const int ReverseSaw = 5;
      // Get static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape ReverseSaw
      static ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape _get_ReverseSaw();
      // Set static field: static public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape ReverseSaw
      static void _set_ReverseSaw(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.Sockets.NetConfigSimulationOscillator/WaveShape
    #pragma pack(pop)
    static check_size<sizeof(NetConfigSimulationOscillator::WaveShape), 0 + sizeof(int)> __Fusion_Sockets_NetConfigSimulationOscillator_WaveShapeSizeCheck;
    static_assert(sizeof(NetConfigSimulationOscillator::WaveShape) == 0x4);
    public:
    // public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Shape
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape Shape;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape) == 0x4);
    // Padding between fields: Shape and: Min
    char __padding0[0x4] = {};
    // public System.Double Min
    // Size: 0x8
    // Offset: 0x8
    double Min;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Max
    // Size: 0x8
    // Offset: 0x10
    double Max;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Period
    // Size: 0x8
    // Offset: 0x18
    double Period;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Threshold
    // Size: 0x8
    // Offset: 0x20
    double Threshold;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Additional
    // Size: 0x8
    // Offset: 0x28
    double Additional;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: NetConfigSimulationOscillator
    constexpr NetConfigSimulationOscillator(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape Shape_ = {}, double Min_ = {}, double Max_ = {}, double Period_ = {}, double Threshold_ = {}, double Additional_ = {}) noexcept : Shape{Shape_}, Min{Min_}, Max{Max_}, Period{Period_}, Threshold{Threshold_}, Additional{Additional_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Sockets.NetConfigSimulationOscillator/WaveShape Shape
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape& dyn_Shape();
    // Get instance field reference: public System.Double Min
    [[deprecated("Use field access instead!")]] double& dyn_Min();
    // Get instance field reference: public System.Double Max
    [[deprecated("Use field access instead!")]] double& dyn_Max();
    // Get instance field reference: public System.Double Period
    [[deprecated("Use field access instead!")]] double& dyn_Period();
    // Get instance field reference: public System.Double Threshold
    [[deprecated("Use field access instead!")]] double& dyn_Threshold();
    // Get instance field reference: public System.Double Additional
    [[deprecated("Use field access instead!")]] double& dyn_Additional();
  }; // Fusion.Sockets.NetConfigSimulationOscillator
  #pragma pack(pop)
  static check_size<sizeof(NetConfigSimulationOscillator), 40 + sizeof(double)> __Fusion_Sockets_NetConfigSimulationOscillatorSizeCheck;
  static_assert(sizeof(NetConfigSimulationOscillator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConfigSimulationOscillator::WaveShape, "Fusion.Sockets", "NetConfigSimulationOscillator/WaveShape");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
