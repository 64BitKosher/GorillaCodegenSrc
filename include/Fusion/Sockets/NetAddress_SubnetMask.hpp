// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::NetAddress::SubnetMask);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetAddress::SubnetMask*, "Fusion.Sockets", "NetAddress/SubnetMask");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.NetAddress/SubnetMask
  // [TokenAttribute] Offset: FFFFFFFF
  class NetAddress::SubnetMask : public ::Il2CppObject {
    public:
    // Get static field: static private Fusion.Sockets.NetAddress[] <SubnetMasks>k__BackingField
    static ::ArrayW<::Fusion::Sockets::NetAddress> _get_$SubnetMasks$k__BackingField();
    // Set static field: static private Fusion.Sockets.NetAddress[] <SubnetMasks>k__BackingField
    static void _set_$SubnetMasks$k__BackingField(::ArrayW<::Fusion::Sockets::NetAddress> value);
    // static public Fusion.Sockets.NetAddress[] get_SubnetMasks()
    // Offset: 0x2B8F104
    static ::ArrayW<::Fusion::Sockets::NetAddress> get_SubnetMasks();
    // static public System.Boolean IsSameSubNet(Fusion.Sockets.NetAddress addressA, Fusion.Sockets.NetAddress addressB)
    // Offset: 0x2B8F15C
    static bool IsSameSubNet(::Fusion::Sockets::NetAddress addressA, ::Fusion::Sockets::NetAddress addressB);
    // static public Fusion.Sockets.NetAddress GetNetworkAddress(Fusion.Sockets.NetAddress netAddress, Fusion.Sockets.NetAddress subnetMask)
    // Offset: 0x2B8F484
    static ::Fusion::Sockets::NetAddress GetNetworkAddress(::Fusion::Sockets::NetAddress netAddress, ::Fusion::Sockets::NetAddress subnetMask);
    // static private System.Void .cctor()
    // Offset: 0x2B8F540
    static void _cctor();
  }; // Fusion.Sockets.NetAddress/SubnetMask
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::SubnetMask::get_SubnetMasks
// Il2CppName: get_SubnetMasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Fusion::Sockets::NetAddress> (*)()>(&Fusion::Sockets::NetAddress::SubnetMask::get_SubnetMasks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress::SubnetMask*), "get_SubnetMasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::SubnetMask::IsSameSubNet
// Il2CppName: IsSameSubNet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetAddress::SubnetMask::IsSameSubNet)> {
  static const MethodInfo* get() {
    static auto* addressA = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* addressB = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress::SubnetMask*), "IsSameSubNet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addressA, addressB});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::SubnetMask::GetNetworkAddress
// Il2CppName: GetNetworkAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetAddress::SubnetMask::GetNetworkAddress)> {
  static const MethodInfo* get() {
    static auto* netAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* subnetMask = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress::SubnetMask*), "GetNetworkAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netAddress, subnetMask});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::SubnetMask::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Sockets::NetAddress::SubnetMask::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress::SubnetMask*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
