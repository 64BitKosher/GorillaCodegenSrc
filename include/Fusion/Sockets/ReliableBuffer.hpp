// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetSequencer
#include "Fusion/Sockets/NetSequencer.hpp"
// Including type: Fusion.Sockets.ReliableList
#include "Fusion/Sockets/ReliableList.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: ReliableBuffer
  struct ReliableBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::ReliableBuffer, "Fusion.Sockets", "ReliableBuffer");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.ReliableBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct ReliableBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private Fusion.Sockets.NetSequencer _sequencer
    // Size: 0x18
    // Offset: 0x0
    ::Fusion::Sockets::NetSequencer sequencer;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetSequencer) == 0x18);
    // private Fusion.Sockets.ReliableList _receiveList
    // Size: 0x18
    // Offset: 0x18
    ::Fusion::Sockets::ReliableList receiveList;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::ReliableList) == 0x18);
    // private System.UInt64 _receiveSequence
    // Size: 0x8
    // Offset: 0x30
    uint64_t receiveSequence;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: ReliableBuffer
    constexpr ReliableBuffer(::Fusion::Sockets::NetSequencer sequencer_ = {}, ::Fusion::Sockets::ReliableList receiveList_ = {}, uint64_t receiveSequence_ = {}) noexcept : sequencer{sequencer_}, receiveList{receiveList_}, receiveSequence{receiveSequence_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SEQ_BYTES
    static constexpr const int SEQ_BYTES = 4;
    // Get static field: static public System.Int32 SEQ_BYTES
    static int _get_SEQ_BYTES();
    // Set static field: static public System.Int32 SEQ_BYTES
    static void _set_SEQ_BYTES(int value);
    // Get instance field reference: private Fusion.Sockets.NetSequencer _sequencer
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetSequencer& dyn__sequencer();
    // Get instance field reference: private Fusion.Sockets.ReliableList _receiveList
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::ReliableList& dyn__receiveList();
    // Get instance field reference: private System.UInt64 _receiveSequence
    [[deprecated("Use field access instead!")]] uint64_t& dyn__receiveSequence();
    // public System.Int32 get_SequenceBits()
    // Offset: 0x2B95B28
    int get_SequenceBits();
    // static public Fusion.Sockets.ReliableBuffer Create()
    // Offset: 0x2B916E8
    static ::Fusion::Sockets::ReliableBuffer Create();
    // public System.UInt64 NextSendSequence()
    // Offset: 0x2B9599C
    uint64_t NextSendSequence();
    // public System.Void Dispose()
    // Offset: 0x2B91698
    void Dispose();
    // public System.Boolean LateReceive(out System.Void* root, out System.Int32 key, out System.Byte* data, out System.Int32 length)
    // Offset: 0x2B975B0
    bool LateReceive(ByRef<void*> root, ByRef<int> key, ByRef<uint8_t*> data, ByRef<int> length);
    // public System.Void LateFree(System.Void* root)
    // Offset: 0x2B9765C
    void LateFree(void* root);
    // public System.Boolean Receive(Fusion.Sockets.NetBitBuffer* buffer, out System.Int32 key)
    // Offset: 0x2B97478
    bool Receive(::Fusion::Sockets::NetBitBuffer* buffer, ByRef<int> key);
  }; // Fusion.Sockets.ReliableBuffer
  #pragma pack(pop)
  static check_size<sizeof(ReliableBuffer), 48 + sizeof(uint64_t)> __Fusion_Sockets_ReliableBufferSizeCheck;
  static_assert(sizeof(ReliableBuffer) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::get_SequenceBits
// Il2CppName: get_SequenceBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::ReliableBuffer::*)()>(&Fusion::Sockets::ReliableBuffer::get_SequenceBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "get_SequenceBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::ReliableBuffer (*)()>(&Fusion::Sockets::ReliableBuffer::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::NextSendSequence
// Il2CppName: NextSendSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::ReliableBuffer::*)()>(&Fusion::Sockets::ReliableBuffer::NextSendSequence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "NextSendSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::ReliableBuffer::*)()>(&Fusion::Sockets::ReliableBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::LateReceive
// Il2CppName: LateReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::ReliableBuffer::*)(ByRef<void*>, ByRef<int>, ByRef<uint8_t*>, ByRef<int>)>(&Fusion::Sockets::ReliableBuffer::LateReceive)> {
  static const MethodInfo* get() {
    static auto* root = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->this_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "LateReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, key, data, length});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::LateFree
// Il2CppName: LateFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::ReliableBuffer::*)(void*)>(&Fusion::Sockets::ReliableBuffer::LateFree)> {
  static const MethodInfo* get() {
    static auto* root = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "LateFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::ReliableBuffer::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::ReliableBuffer::*)(::Fusion::Sockets::NetBitBuffer*, ByRef<int>)>(&Fusion::Sockets::ReliableBuffer::Receive)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::ReliableBuffer), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, key});
  }
};
