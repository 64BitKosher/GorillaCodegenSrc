// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetCommandHeader
#include "Fusion/Sockets/NetCommandHeader.hpp"
// Including type: Fusion.Sockets.NetConnectionId
#include "Fusion/Sockets/NetConnectionId.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetCommandConnect
  struct NetCommandConnect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetCommandConnect, "Fusion.Sockets", "NetCommandConnect");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x91
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetCommandConnect
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetCommandConnect/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer
    struct $TokenData$e__FixedBuffer;
    // Nested type: ::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer
    struct $UniqueId$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Sockets.NetCommandConnect/<TokenData>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $TokenData$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $TokenData$e__FixedBuffer
      constexpr $TokenData$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // Fusion.Sockets.NetCommandConnect/<TokenData>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(NetCommandConnect::$TokenData$e__FixedBuffer), 0 + sizeof(uint8_t)> __Fusion_Sockets_NetCommandConnect_$TokenData$e__FixedBufferSizeCheck;
    static_assert(sizeof(NetCommandConnect::$TokenData$e__FixedBuffer) == 0x1);
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Sockets.NetCommandConnect/<UniqueId>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $UniqueId$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $UniqueId$e__FixedBuffer
      constexpr $UniqueId$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // Fusion.Sockets.NetCommandConnect/<UniqueId>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(NetCommandConnect::$UniqueId$e__FixedBuffer), 0 + sizeof(uint8_t)> __Fusion_Sockets_NetCommandConnect_$UniqueId$e__FixedBufferSizeCheck;
    static_assert(sizeof(NetCommandConnect::$UniqueId$e__FixedBuffer) == 0x1);
    public:
    // public Fusion.Sockets.NetCommandHeader Header
    // Size: 0x2
    // Offset: 0x0
    ::Fusion::Sockets::NetCommandHeader Header;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetCommandHeader) == 0x2);
    // Padding between fields: Header and: TokenLength
    char __padding0[0x2] = {};
    // public System.Int32 TokenLength
    // Size: 0x4
    // Offset: 0x4
    int TokenLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.Sockets.NetConnectionId ConnectionId
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::Sockets::NetConnectionId ConnectionId;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionId) == 0x8);
    // public Fusion.Sockets.NetCommandConnect/<TokenData>e__FixedBuffer TokenData
    // Size: 0x1
    // Offset: 0x10
    ::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer TokenData;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer) == 0x1);
    // Padding between fields: TokenData and: UniqueId
    char __padding3[0x7F] = {};
    // public Fusion.Sockets.NetCommandConnect/<UniqueId>e__FixedBuffer UniqueId
    // Size: 0x1
    // Offset: 0x90
    ::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer UniqueId;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: NetCommandConnect
    constexpr NetCommandConnect(::Fusion::Sockets::NetCommandHeader Header_ = {}, int TokenLength_ = {}, ::Fusion::Sockets::NetConnectionId ConnectionId_ = {}, ::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer TokenData_ = {}, ::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer UniqueId_ = {}) noexcept : Header{Header_}, TokenLength{TokenLength_}, ConnectionId{ConnectionId_}, TokenData{TokenData_}, UniqueId{UniqueId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Sockets.NetCommandHeader Header
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetCommandHeader& dyn_Header();
    // Get instance field reference: public System.Int32 TokenLength
    [[deprecated("Use field access instead!")]] int& dyn_TokenLength();
    // Get instance field reference: public Fusion.Sockets.NetConnectionId ConnectionId
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionId& dyn_ConnectionId();
    // Get instance field reference: public Fusion.Sockets.NetCommandConnect/<TokenData>e__FixedBuffer TokenData
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer& dyn_TokenData();
    // Get instance field reference: public Fusion.Sockets.NetCommandConnect/<UniqueId>e__FixedBuffer UniqueId
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer& dyn_UniqueId();
    // static public System.Int32 ClampTokenLength(System.Int32 tokenLength)
    // Offset: 0x2B90DDC
    static int ClampTokenLength(int tokenLength);
    // static public System.Byte[] GetTokenDataAsArray(Fusion.Sockets.NetCommandConnect command)
    // Offset: 0x2B90F10
    static ::ArrayW<uint8_t> GetTokenDataAsArray(::Fusion::Sockets::NetCommandConnect command);
    // static public System.Byte[] GetUniqueIdAsArray(Fusion.Sockets.NetCommandConnect command)
    // Offset: 0x2B90FA4
    static ::ArrayW<uint8_t> GetUniqueIdAsArray(::Fusion::Sockets::NetCommandConnect command);
    // static public Fusion.Sockets.NetCommandConnect Create(Fusion.Sockets.NetConnectionId id, System.Byte* token, System.Int32 tokenLength, System.Byte* uniqueId)
    // Offset: 0x2B91020
    static ::Fusion::Sockets::NetCommandConnect Create(::Fusion::Sockets::NetConnectionId id, uint8_t* token, int tokenLength, uint8_t* uniqueId);
  }; // Fusion.Sockets.NetCommandConnect
  #pragma pack(pop)
  static check_size<sizeof(NetCommandConnect), 144 + sizeof(::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer)> __Fusion_Sockets_NetCommandConnectSizeCheck;
  static_assert(sizeof(NetCommandConnect) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetCommandConnect::$UniqueId$e__FixedBuffer, "Fusion.Sockets", "NetCommandConnect/<UniqueId>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetCommandConnect::$TokenData$e__FixedBuffer, "Fusion.Sockets", "NetCommandConnect/<TokenData>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetCommandConnect::ClampTokenLength
// Il2CppName: ClampTokenLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Fusion::Sockets::NetCommandConnect::ClampTokenLength)> {
  static const MethodInfo* get() {
    static auto* tokenLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetCommandConnect), "ClampTokenLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tokenLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetCommandConnect::GetTokenDataAsArray
// Il2CppName: GetTokenDataAsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Fusion::Sockets::NetCommandConnect)>(&Fusion::Sockets::NetCommandConnect::GetTokenDataAsArray)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandConnect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetCommandConnect), "GetTokenDataAsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetCommandConnect::GetUniqueIdAsArray
// Il2CppName: GetUniqueIdAsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Fusion::Sockets::NetCommandConnect)>(&Fusion::Sockets::NetCommandConnect::GetUniqueIdAsArray)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandConnect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetCommandConnect), "GetUniqueIdAsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetCommandConnect::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetCommandConnect (*)(::Fusion::Sockets::NetConnectionId, uint8_t*, int, uint8_t*)>(&Fusion::Sockets::NetCommandConnect::Create)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionId")->byval_arg;
    static auto* token = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* tokenLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uniqueId = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetCommandConnect), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, token, tokenLength, uniqueId});
  }
};
