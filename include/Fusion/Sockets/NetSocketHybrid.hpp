// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.INetSocket
#include "Fusion/Sockets/INetSocket.hpp"
// Including type: Fusion.Sockets.NetSocket
#include "Fusion/Sockets/NetSocket.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSocketRelay
  class NetSocketRelay;
  // Forward declaring type: NetSocketNative
  class NetSocketNative;
  // Forward declaring type: NetConfig
  struct NetConfig;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: ICommunicator
  class ICommunicator;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSocketHybrid
  class NetSocketHybrid;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::NetSocketHybrid);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetSocketHybrid*, "Fusion.Sockets", "NetSocketHybrid");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.Sockets.NetSocketHybrid
  // [TokenAttribute] Offset: FFFFFFFF
  class NetSocketHybrid : public ::Il2CppObject/*, public ::Fusion::Sockets::INetSocket*/ {
    public:
    public:
    // private Fusion.Sockets.NetSocket _relayNetSocketRef
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Fusion::Sockets::NetSocket relayNetSocketRef;
    // private Fusion.Sockets.NetAddress _relayAddress
    // Size: 0x18
    // Offset: 0x18
    ::Fusion::Sockets::NetAddress relayAddress;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // private readonly Fusion.Sockets.NetSocketRelay _relaySocket
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Sockets::NetSocketRelay* relaySocket;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetSocketRelay*) == 0x8);
    // private readonly Fusion.Sockets.NetSocketNative _nativeSocket
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::Sockets::NetSocketNative* nativeSocket;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetSocketNative*) == 0x8);
    // private readonly Fusion.Protocol.ICommunicator _client
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::Protocol::ICommunicator* client;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::ICommunicator*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::Sockets::INetSocket
    operator ::Fusion::Sockets::INetSocket() noexcept {
      return *reinterpret_cast<::Fusion::Sockets::INetSocket*>(this);
    }
    // Get instance field reference: private Fusion.Sockets.NetSocket _relayNetSocketRef
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetSocket& dyn__relayNetSocketRef();
    // Get instance field reference: private Fusion.Sockets.NetAddress _relayAddress
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn__relayAddress();
    // Get instance field reference: private readonly Fusion.Sockets.NetSocketRelay _relaySocket
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetSocketRelay*& dyn__relaySocket();
    // Get instance field reference: private readonly Fusion.Sockets.NetSocketNative _nativeSocket
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetSocketNative*& dyn__nativeSocket();
    // Get instance field reference: private readonly Fusion.Protocol.ICommunicator _client
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::ICommunicator*& dyn__client();
    // public System.Void .ctor(Fusion.Protocol.ICommunicator client)
    // Offset: 0x2B97D00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetSocketHybrid* New_ctor(::Fusion::Protocol::ICommunicator* client) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Sockets::NetSocketHybrid::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetSocketHybrid*, creationType>(client)));
    }
    // public System.Void Initialize(Fusion.Sockets.NetConfig config)
    // Offset: 0x2B97E10
    void Initialize(::Fusion::Sockets::NetConfig config);
    // public Fusion.Sockets.NetSocket Create(Fusion.Sockets.NetConfig config)
    // Offset: 0x2B97EC0
    ::Fusion::Sockets::NetSocket Create(::Fusion::Sockets::NetConfig config);
    // public System.Void Destroy(Fusion.Sockets.NetSocket netSocket)
    // Offset: 0x2B97FF8
    void Destroy(::Fusion::Sockets::NetSocket netSocket);
    // public Fusion.Sockets.NetAddress Bind(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetConfig config)
    // Offset: 0x2B98050
    ::Fusion::Sockets::NetAddress Bind(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetConfig config);
    // public System.Int32 Receive(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetAddress* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x2B98330
    int Receive(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetAddress* address, uint8_t* buffer, int bufferLength);
    // public System.Int32 Send(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetAddress* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x2B98568
    int Send(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetAddress* address, uint8_t* buffer, int bufferLength);
  }; // Fusion.Sockets.NetSocketHybrid
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::NetSocketHybrid::Initialize)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetSocket (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::NetSocketHybrid::Create)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetSocket)>(&Fusion::Sockets::NetSocketHybrid::Destroy)> {
  static const MethodInfo* get() {
    static auto* netSocket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netSocket});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::NetSocketHybrid::Bind)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetAddress*, uint8_t*, int)>(&Fusion::Sockets::NetSocketHybrid::Receive)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSocketHybrid::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetSocketHybrid::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetAddress*, uint8_t*, int)>(&Fusion::Sockets::NetSocketHybrid::Send)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocketHybrid*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
