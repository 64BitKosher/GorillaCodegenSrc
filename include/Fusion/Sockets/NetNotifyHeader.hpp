// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetPacketType
#include "Fusion/Sockets/NetPacketType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetNotifyHeader
  struct NetNotifyHeader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetNotifyHeader, "Fusion.Sockets", "NetNotifyHeader");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0xE
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetNotifyHeader
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetNotifyHeader/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Sockets.NetPacketType PacketType
    // Size: 0x1
    // Offset: 0x0
    ::Fusion::Sockets::NetPacketType PacketType;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPacketType) == 0x1);
    // public System.Byte Fragment
    // Size: 0x1
    // Offset: 0x1
    uint8_t Fragment;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.UInt16 Sequence
    // Size: 0x2
    // Offset: 0x2
    uint16_t Sequence;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 AckSequence
    // Size: 0x2
    // Offset: 0x4
    uint16_t AckSequence;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt64 AckMask
    // Size: 0x8
    // Offset: 0x6
    uint64_t AckMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: NetNotifyHeader
    constexpr NetNotifyHeader(::Fusion::Sockets::NetPacketType PacketType_ = {}, uint8_t Fragment_ = {}, uint16_t Sequence_ = {}, uint16_t AckSequence_ = {}, uint64_t AckMask_ = {}) noexcept : PacketType{PacketType_}, Fragment{Fragment_}, Sequence{Sequence_}, AckSequence{AckSequence_}, AckMask{AckMask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Sockets.NetPacketType PacketType
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPacketType& dyn_PacketType();
    // Get instance field reference: public System.Byte Fragment
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Fragment();
    // Get instance field reference: public System.UInt16 Sequence
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Sequence();
    // Get instance field reference: public System.UInt16 AckSequence
    [[deprecated("Use field access instead!")]] uint16_t& dyn_AckSequence();
    // Get instance field reference: public System.UInt64 AckMask
    [[deprecated("Use field access instead!")]] uint64_t& dyn_AckMask();
    // static public Fusion.Sockets.NetNotifyHeader CreateData(System.UInt16 sequence, System.UInt16 ackSequence, System.UInt64 ackMask)
    // Offset: 0x2B9294C
    static ::Fusion::Sockets::NetNotifyHeader CreateData(uint16_t sequence, uint16_t ackSequence, uint64_t ackMask);
    // static public Fusion.Sockets.NetNotifyHeader CreateAcks(System.UInt16 ackSequence, System.UInt64 ackMask)
    // Offset: 0x2B92970
    static ::Fusion::Sockets::NetNotifyHeader CreateAcks(uint16_t ackSequence, uint64_t ackMask);
    // public override System.String ToString()
    // Offset: 0x2B926D4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.Sockets.NetNotifyHeader
  #pragma pack(pop)
  static check_size<sizeof(NetNotifyHeader), 6 + sizeof(uint64_t)> __Fusion_Sockets_NetNotifyHeaderSizeCheck;
  static_assert(sizeof(NetNotifyHeader) == 0xE);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetNotifyHeader::CreateData
// Il2CppName: CreateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetNotifyHeader (*)(uint16_t, uint16_t, uint64_t)>(&Fusion::Sockets::NetNotifyHeader::CreateData)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* ackSequence = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* ackMask = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetNotifyHeader), "CreateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence, ackSequence, ackMask});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetNotifyHeader::CreateAcks
// Il2CppName: CreateAcks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetNotifyHeader (*)(uint16_t, uint64_t)>(&Fusion::Sockets::NetNotifyHeader::CreateAcks)> {
  static const MethodInfo* get() {
    static auto* ackSequence = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* ackMask = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetNotifyHeader), "CreateAcks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ackSequence, ackMask});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetNotifyHeader::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Sockets::NetNotifyHeader::*)()>(&Fusion::Sockets::NetNotifyHeader::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetNotifyHeader), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
