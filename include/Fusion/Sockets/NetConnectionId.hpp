// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnectionId
  struct NetConnectionId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConnectionId, "Fusion.Sockets", "NetConnectionId");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConnectionId
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConnectionId/*, public ::System::ValueType, public ::System::IEquatable_1<::Fusion::Sockets::NetConnectionId>*/ {
    public:
    public:
    // Creating union for fields at offset: 0x0
    union {
      // System.UInt64 Raw
      // Size: 0x8
      // Offset: 0x0
      uint64_t Raw;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // public System.Int16 Group
      // Size: 0x2
      // Offset: 0x0
      int16_t Group;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
    };
    // public System.Int16 GroupIndex
    // Size: 0x2
    // Offset: 0x2
    int16_t GroupIndex;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.UInt32 Generation
    // Size: 0x4
    // Offset: 0x4
    uint Generation;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: NetConnectionId
    constexpr NetConnectionId(uint64_t Raw_ = {}, int16_t GroupIndex_ = {}, uint Generation_ = {}) noexcept : Raw{Raw_}, GroupIndex{GroupIndex_}, Generation{Generation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Fusion::Sockets::NetConnectionId>
    operator ::System::IEquatable_1<::Fusion::Sockets::NetConnectionId>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Fusion::Sockets::NetConnectionId>*>(this);
    }
    // Get instance field reference: System.UInt64 Raw
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Raw();
    // Get instance field reference: public System.Int16 Group
    [[deprecated("Use field access instead!")]] int16_t& dyn_Group();
    // Get instance field reference: public System.Int16 GroupIndex
    [[deprecated("Use field access instead!")]] int16_t& dyn_GroupIndex();
    // Get instance field reference: System.UInt32 Generation
    [[deprecated("Use field access instead!")]] uint& dyn_Generation();
    // public System.Boolean Equals(Fusion.Sockets.NetConnectionId other)
    // Offset: 0x2B919A0
    bool Equals(::Fusion::Sockets::NetConnectionId other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2B919B0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2B91A28
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Fusion.Sockets.NetConnectionId
  #pragma pack(pop)
  static check_size<sizeof(NetConnectionId), 4 + sizeof(uint)> __Fusion_Sockets_NetConnectionIdSizeCheck;
  static_assert(sizeof(NetConnectionId) == 0x8);
  // static public System.Boolean op_Equality(Fusion.Sockets.NetConnectionId a, Fusion.Sockets.NetConnectionId b)
  // Offset: 0x2B91A30
  bool operator ==(const ::Fusion::Sockets::NetConnectionId& a, const ::Fusion::Sockets::NetConnectionId& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionId::*)(::Fusion::Sockets::NetConnectionId)>(&Fusion::Sockets::NetConnectionId::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionId::*)(::Il2CppObject*)>(&Fusion::Sockets::NetConnectionId::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConnectionId::*)()>(&Fusion::Sockets::NetConnectionId::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionId::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
