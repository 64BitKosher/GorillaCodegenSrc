// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.IStatsBuffer
#include "Fusion/IStatsBuffer.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
}
// Forward declaring namespace: Collections::Unsafe
namespace Collections::Unsafe {
  // Forward declaring type: UnsafeRingBuffer
  struct UnsafeRingBuffer;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: FusionGraphVisualization
  struct FusionGraphVisualization;
  // Forward declaring type: ISampleData
  class ISampleData;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnectionStats
  struct NetConnectionStats;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConnectionStats, "Fusion.Sockets", "NetConnectionStats");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConnectionStats
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct NetConnectionStats/*, public ::System::ValueType, public ::Fusion::IStatsBuffer*/ {
    public:
    // Nested type: ::Fusion::Sockets::NetConnectionStats::Entry
    struct Entry;
    public:
    // private Collections.Unsafe.UnsafeRingBuffer* _buffer
    // Size: 0x8
    // Offset: 0x0
    ::Collections::Unsafe::UnsafeRingBuffer* buffer;
    // Field size check
    static_assert(sizeof(::Collections::Unsafe::UnsafeRingBuffer*) == 0x8);
    public:
    // Creating value type constructor for type: NetConnectionStats
    constexpr NetConnectionStats(::Collections::Unsafe::UnsafeRingBuffer* buffer_ = {}) noexcept : buffer{buffer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IStatsBuffer
    operator ::Fusion::IStatsBuffer() noexcept {
      return *reinterpret_cast<::Fusion::IStatsBuffer*>(this);
    }
    // Creating conversion operator: operator ::Collections::Unsafe::UnsafeRingBuffer*
    constexpr operator ::Collections::Unsafe::UnsafeRingBuffer*() const noexcept {
      return buffer;
    }
    // Get instance field reference: private Collections.Unsafe.UnsafeRingBuffer* _buffer
    [[deprecated("Use field access instead!")]] ::Collections::Unsafe::UnsafeRingBuffer*& dyn__buffer();
    // public System.Int32 get_Count()
    // Offset: 0x2B9254C
    int get_Count();
    // public System.Int32 get_Capacity()
    // Offset: 0x2B92564
    int get_Capacity();
    // public Fusion.Sockets.NetConnectionStats/Entry get_Item(System.Int32 index)
    // Offset: 0x2B9257C
    ::Fusion::Sockets::NetConnectionStats::Entry get_Item(int index);
    // public Fusion.FusionGraphVisualization get_DefaultVisualization()
    // Offset: 0x2B925D4
    ::Fusion::FusionGraphVisualization get_DefaultVisualization();
    // public Fusion.FusionGraphVisualization get_VisualizationFlags()
    // Offset: 0x2B925DC
    ::Fusion::FusionGraphVisualization get_VisualizationFlags();
    // public System.Void Clear()
    // Offset: 0x2B91710
    void Clear();
    // public System.Void Free()
    // Offset: 0x2B91CC8
    void Free();
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x2B914C4
    NetConnectionStats(int capacity);
    // public System.Void Push(System.Double time, System.Double value)
    // Offset: 0x2B925E4
    void Push(double time, double value);
    // public Fusion.ISampleData GetSampleAtIndex(System.Int32 index)
    // Offset: 0x2B92644
    ::Fusion::ISampleData* GetSampleAtIndex(int index);
  }; // Fusion.Sockets.NetConnectionStats
  #pragma pack(pop)
  static check_size<sizeof(NetConnectionStats), 0 + sizeof(::Collections::Unsafe::UnsafeRingBuffer*)> __Fusion_Sockets_NetConnectionStatsSizeCheck;
  static_assert(sizeof(NetConnectionStats) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::get_Capacity
// Il2CppName: get_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::get_Capacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "get_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnectionStats::Entry (Fusion::Sockets::NetConnectionStats::*)(int)>(&Fusion::Sockets::NetConnectionStats::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::get_DefaultVisualization
// Il2CppName: get_DefaultVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::FusionGraphVisualization (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::get_DefaultVisualization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "get_DefaultVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::get_VisualizationFlags
// Il2CppName: get_VisualizationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::FusionGraphVisualization (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::get_VisualizationFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "get_VisualizationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetConnectionStats::*)()>(&Fusion::Sockets::NetConnectionStats::Free)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::NetConnectionStats
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetConnectionStats::*)(double, double)>(&Fusion::Sockets::NetConnectionStats::Push)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::GetSampleAtIndex
// Il2CppName: GetSampleAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::ISampleData* (Fusion::Sockets::NetConnectionStats::*)(int)>(&Fusion::Sockets::NetConnectionStats::GetSampleAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats), "GetSampleAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
