// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Timer
#include "Fusion/Timer.hpp"
// Including type: Fusion.Sockets.NetConfig
#include "Fusion/Sockets/NetConfig.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Fusion.Sockets.NetBitBufferStack
#include "Fusion/Sockets/NetBitBufferStack.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: Fusion.Sockets.NetConnectionMap
#include "Fusion/Sockets/NetConnectionMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetPeer
  struct NetPeer;
  // Forward declaring type: NetBitBufferBlock
  struct NetBitBufferBlock;
  // Forward declaring type: NetConnectionStatus
  struct NetConnectionStatus;
  // Forward declaring type: INetPeerGroupCallbacks
  class INetPeerGroupCallbacks;
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: NetDisconnectReason
  struct NetDisconnectReason;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
  // Forward declaring type: NetNotifyHeader
  struct NetNotifyHeader;
  // Forward declaring type: NetSendEnvelope
  struct NetSendEnvelope;
  // Forward declaring type: NetCommandRefused
  struct NetCommandRefused;
  // Forward declaring type: NetCommandDisconnect
  struct NetCommandDisconnect;
  // Forward declaring type: NetCommandConnect
  struct NetCommandConnect;
  // Forward declaring type: NetCommandAccepted
  struct NetCommandAccepted;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetPeerGroup
  struct NetPeerGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetPeerGroup, "Fusion.Sockets", "NetPeerGroup");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x160
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetPeerGroup
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetPeerGroup/*, public ::System::ValueType*/ {
    public:
    public:
    // private Fusion.Sockets.NetPeer* _peer
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Sockets::NetPeer* peer;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPeer*) == 0x8);
    // private System.Int16 _group
    // Size: 0x2
    // Offset: 0x8
    int16_t group;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: group and: clock
    char __padding1[0x6] = {};
    // private Fusion.Timer _clock
    // Size: 0x11
    // Offset: 0x10
    ::Fusion::Timer clock;
    // Field size check
    static_assert(sizeof(::Fusion::Timer) == 0x11);
    // Padding between fields: clock and: config
    char __padding2[0x7] = {};
    // private Fusion.Sockets.NetConfig _config
    // Size: 0xF8
    // Offset: 0x28
    ::Fusion::Sockets::NetConfig config;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConfig) == 0xF8);
    // private System.UInt32 _counter
    // Size: 0x4
    // Offset: 0x120
    uint counter;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: counter and: sendHead
    char __padding4[0x4] = {};
    // private System.IntPtr _sendHead
    // Size: 0x8
    // Offset: 0x128
    ::System::IntPtr sendHead;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr _recvHead
    // Size: 0x8
    // Offset: 0x130
    ::System::IntPtr recvHead;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private Fusion.Sockets.NetBitBufferStack _recvStack
    // Size: 0x14
    // Offset: 0x138
    ::Fusion::Sockets::NetBitBufferStack recvStack;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBufferStack) == 0x14);
    // Padding between fields: recvStack and: sendBlock
    char __padding7[0x4] = {};
    // private Fusion.Sockets.NetBitBufferBlock* _sendBlock
    // Size: 0x8
    // Offset: 0x150
    ::Fusion::Sockets::NetBitBufferBlock* sendBlock;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBufferBlock*) == 0x8);
    // private Fusion.Sockets.NetConnectionMap* _connectionsMap
    // Size: 0x8
    // Offset: 0x158
    ::Fusion::Sockets::NetConnectionMap* connectionsMap;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionMap*) == 0x8);
    public:
    // Creating value type constructor for type: NetPeerGroup
    constexpr NetPeerGroup(::Fusion::Sockets::NetPeer* peer_ = {}, int16_t group_ = {}, ::Fusion::Timer clock_ = {}, ::Fusion::Sockets::NetConfig config_ = {}, uint counter_ = {}, ::System::IntPtr sendHead_ = {}, ::System::IntPtr recvHead_ = {}, ::Fusion::Sockets::NetBitBufferStack recvStack_ = {}, ::Fusion::Sockets::NetBitBufferBlock* sendBlock_ = {}, ::Fusion::Sockets::NetConnectionMap* connectionsMap_ = {}) noexcept : peer{peer_}, group{group_}, clock{clock_}, config{config_}, counter{counter_}, sendHead{sendHead_}, recvHead{recvHead_}, recvStack{recvStack_}, sendBlock{sendBlock_}, connectionsMap{connectionsMap_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Double RELIABLE_SEND_INTERVAL
    static constexpr const double RELIABLE_SEND_INTERVAL = 0.05;
    // Get static field: static private System.Double RELIABLE_SEND_INTERVAL
    static double _get_RELIABLE_SEND_INTERVAL();
    // Set static field: static private System.Double RELIABLE_SEND_INTERVAL
    static void _set_RELIABLE_SEND_INTERVAL(double value);
    // Get instance field reference: private Fusion.Sockets.NetPeer* _peer
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPeer*& dyn__peer();
    // Get instance field reference: private System.Int16 _group
    [[deprecated("Use field access instead!")]] int16_t& dyn__group();
    // Get instance field reference: private Fusion.Timer _clock
    [[deprecated("Use field access instead!")]] ::Fusion::Timer& dyn__clock();
    // Get instance field reference: private Fusion.Sockets.NetConfig _config
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConfig& dyn__config();
    // Get instance field reference: private System.UInt32 _counter
    [[deprecated("Use field access instead!")]] uint& dyn__counter();
    // Get instance field reference: private System.IntPtr _sendHead
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__sendHead();
    // Get instance field reference: private System.IntPtr _recvHead
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__recvHead();
    // Get instance field reference: private Fusion.Sockets.NetBitBufferStack _recvStack
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBufferStack& dyn__recvStack();
    // Get instance field reference: private Fusion.Sockets.NetBitBufferBlock* _sendBlock
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBufferBlock*& dyn__sendBlock();
    // Get instance field reference: private Fusion.Sockets.NetConnectionMap* _connectionsMap
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionMap*& dyn__connectionsMap();
    // public System.Double get_Time()
    // Offset: 0x2B943EC
    double get_Time();
    // public System.Int32 get_Group()
    // Offset: 0x2B944B0
    int get_Group();
    // static System.Void Dispose(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks callbacks)
    // Offset: 0x2B93A58
    static void Dispose(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* callbacks);
    // static public Fusion.Sockets.NetConnection* GetConnectionByIndex(Fusion.Sockets.NetPeerGroup* g, System.Int32 index)
    // Offset: 0x2B944B8
    static ::Fusion::Sockets::NetConnection* GetConnectionByIndex(::Fusion::Sockets::NetPeerGroup* g, int index);
    // static public System.Boolean TryGetConnectionByIndex(Fusion.Sockets.NetPeerGroup* g, System.Int32 index, out Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B944D0
    static bool TryGetConnectionByIndex(::Fusion::Sockets::NetPeerGroup* g, int index, ByRef<::Fusion::Sockets::NetConnection*> connection);
    // static public Fusion.Sockets.NetConnectionMap/Iterator ConnectionIterator(Fusion.Sockets.NetPeerGroup* g)
    // Offset: 0x2B94518
    static ::Fusion::Sockets::NetConnectionMap::Iterator ConnectionIterator(::Fusion::Sockets::NetPeerGroup* g);
    // static public System.Void Connect(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetAddress address, System.Byte[] token, System.Byte[] uniqueId)
    // Offset: 0x2B94540
    static void Connect(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetAddress address, ::ArrayW<uint8_t> token, ::ArrayW<uint8_t> uniqueId);
    // static public System.Void Connect(Fusion.Sockets.NetPeerGroup* g, System.String ip, System.UInt16 port, System.Byte[] token, System.Byte[] uniqueId)
    // Offset: 0x2B94D08
    static void Connect(::Fusion::Sockets::NetPeerGroup* g, ::StringW ip, uint16_t port, ::ArrayW<uint8_t> token, ::ArrayW<uint8_t> uniqueId);
    // static public System.Void Disconnect(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B94DCC
    static void Disconnect(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c);
    // static System.Void DisconnectInternal(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetDisconnectReason reason)
    // Offset: 0x2B94E5C
    static void DisconnectInternal(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetDisconnectReason reason);
    // static public System.Void Update(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb)
    // Offset: 0x2B94EA8
    static void Update(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb);
    // static System.Void Initialize(System.Int16 groupIndex, Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetPeer* p, Fusion.Sockets.NetConfig config)
    // Offset: 0x2B93770
    static void Initialize(int16_t groupIndex, ::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetPeer* p, ::Fusion::Sockets::NetConfig config);
    // static System.IntPtr PopSendHead(Fusion.Sockets.NetPeerGroup* g)
    // Offset: 0x2B94258
    static ::System::IntPtr PopSendHead(::Fusion::Sockets::NetPeerGroup* g);
    // static System.Void PushOnRecvHead(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B93DE4
    static void PushOnRecvHead(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void UpdateConnections(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb)
    // Offset: 0x2B95020
    static void UpdateConnections(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb);
    // static public System.Void SendReliable(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, System.Int32 dataKey, System.Byte* data, System.Int32 dataLength)
    // Offset: 0x2B958A4
    static void SendReliable(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, int dataKey, uint8_t* data, int dataLength);
    // static public System.Void ChangeConnectionAddressDuringConnecting(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetAddress newAddress)
    // Offset: 0x2B959F8
    static void ChangeConnectionAddressDuringConnecting(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetAddress newAddress);
    // static private System.Void SendCommandConnect(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B94A20
    static void SendCommandConnect(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void UpdateConnecting(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B950F4
    static void UpdateConnecting(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void UpdateConnected(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B9520C
    static void UpdateConnected(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void UpdateDisconnected(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B95628
    static void UpdateDisconnected(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void UpdateShutdown(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B95774
    static void UpdateShutdown(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void SendUnconnected(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B9604C
    static void SendUnconnected(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void Send(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B95DBC
    static void Send(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Boolean GetConnectionSendBuffer(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, out Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B95D60
    static bool GetConnectionSendBuffer(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ByRef<::Fusion::Sockets::NetBitBuffer*> b);
    // static public System.Boolean SendUnconnectedData(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetAddress address, System.Void* data, System.Int32 dataLength)
    // Offset: 0x2B960C8
    static bool SendUnconnectedData(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetAddress address, void* data, int dataLength);
    // static public System.Boolean GetNotifyDataBuffer(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, out Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B95AB8
    static bool GetNotifyDataBuffer(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ByRef<::Fusion::Sockets::NetBitBuffer*> b);
    // static public System.Boolean SendNotifyDataBuffer(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b, System.Void* userData, Fusion.Sockets.INetPeerGroupCallbacks cb)
    // Offset: 0x2B95B34
    static bool SendNotifyDataBuffer(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b, void* userData, ::Fusion::Sockets::INetPeerGroupCallbacks* cb);
    // static private System.Void Receive(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb)
    // Offset: 0x2B94F58
    static void Receive(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb);
    // static private System.Void HandlePacketUnconnected(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96300
    static void HandlePacketUnconnected(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacket(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96588
    static void HandlePacket(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacketNotifyAcks(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96D2C
    static void HandlePacketNotifyAcks(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacketNotifyData(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96878
    static void HandlePacketNotifyData(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacketNotifyData_Part2(Fusion.Sockets.NetNotifyHeader header, System.Int32 sequenceDistance, Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B97328
    static void HandlePacketNotifyData_Part2(::Fusion::Sockets::NetNotifyHeader header, int sequenceDistance, ::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacketAcks(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetNotifyHeader h)
    // Offset: 0x2B96F08
    static void HandlePacketAcks(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetNotifyHeader h);
    // static private System.Void LostEnvelope(Fusion.Sockets.NetSendEnvelope envelope, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B96178
    static void LostEnvelope(::Fusion::Sockets::NetSendEnvelope envelope, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void HandlePacketUnreliableData(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96E48
    static void HandlePacketUnreliableData(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandlePacketCommand(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetBitBuffer* b)
    // Offset: 0x2B96778
    static void HandlePacketCommand(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetBitBuffer* b);
    // static private System.Void HandleCommandRefused(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetCommandRefused cmd)
    // Offset: 0x2B97908
    static void HandleCommandRefused(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetCommandRefused cmd);
    // static private System.Void HandleCommandDisconnect(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetCommandDisconnect cmd)
    // Offset: 0x2B97BDC
    static void HandleCommandDisconnect(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetCommandDisconnect cmd);
    // static private System.Void HandleCommandConnect(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetCommandConnect cmd)
    // Offset: 0x2B976B0
    static void HandleCommandConnect(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetCommandConnect cmd);
    // static private System.Void HandleCommandAccepted(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetCommandAccepted cmd)
    // Offset: 0x2B97AE4
    static void HandleCommandAccepted(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetCommandAccepted cmd);
    // static private System.Boolean SendCommand(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c, T cmd)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool SendCommand(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c, T cmd) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Sockets::NetPeerGroup::SendCommand");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion.Sockets", "NetPeerGroup", "SendCommand", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(cmd)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, g, c, cmd);
    }
    // static private System.Boolean SendCommandUnconnected(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetAddress address, T cmd)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool SendCommandUnconnected(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetAddress address, T cmd) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Sockets::NetPeerGroup::SendCommandUnconnected");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion.Sockets", "NetPeerGroup", "SendCommandUnconnected", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g), ::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(cmd)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, g, address, cmd);
    }
    // static private System.Void QueueAddressUnmap(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B95FF0
    static void QueueAddressUnmap(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetConnection* c);
    // static private System.Void ChangeConnectionStatus(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c, Fusion.Sockets.NetConnectionStatus status)
    // Offset: 0x2B94814
    static void ChangeConnectionStatus(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c, ::Fusion::Sockets::NetConnectionStatus status);
    // static private System.Void ReleaseConnection(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.INetPeerGroupCallbacks cb, Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B95F94
    static void ReleaseConnection(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::INetPeerGroupCallbacks* cb, ::Fusion::Sockets::NetConnection* c);
    // static private Fusion.Sockets.NetConnection* AllocateConnection(Fusion.Sockets.NetPeerGroup* g, Fusion.Sockets.NetAddress address, System.Byte[] token, System.Byte[] uniqueId)
    // Offset: 0x2B94648
    static ::Fusion::Sockets::NetConnection* AllocateConnection(::Fusion::Sockets::NetPeerGroup* g, ::Fusion::Sockets::NetAddress address, ::ArrayW<uint8_t> token, ::ArrayW<uint8_t> uniqueId);
  }; // Fusion.Sockets.NetPeerGroup
  #pragma pack(pop)
  static check_size<sizeof(NetPeerGroup), 344 + sizeof(::Fusion::Sockets::NetConnectionMap*)> __Fusion_Sockets_NetPeerGroupSizeCheck;
  static_assert(sizeof(NetPeerGroup) == 0x160);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::get_Time
// Il2CppName: get_Time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Sockets::NetPeerGroup::*)()>(&Fusion::Sockets::NetPeerGroup::get_Time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "get_Time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::get_Group
// Il2CppName: get_Group
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetPeerGroup::*)()>(&Fusion::Sockets::NetPeerGroup::get_Group)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "get_Group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetPeerGroup::Dispose)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* callbacks = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, callbacks});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::GetConnectionByIndex
// Il2CppName: GetConnectionByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (*)(::Fusion::Sockets::NetPeerGroup*, int)>(&Fusion::Sockets::NetPeerGroup::GetConnectionByIndex)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "GetConnectionByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, index});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::TryGetConnectionByIndex
// Il2CppName: TryGetConnectionByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeerGroup*, int, ByRef<::Fusion::Sockets::NetConnection*>)>(&Fusion::Sockets::NetPeerGroup::TryGetConnectionByIndex)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "TryGetConnectionByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, index, connection});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::ConnectionIterator
// Il2CppName: ConnectionIterator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnectionMap::Iterator (*)(::Fusion::Sockets::NetPeerGroup*)>(&Fusion::Sockets::NetPeerGroup::ConnectionIterator)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "ConnectionIterator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Fusion::Sockets::NetPeerGroup::Connect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* uniqueId = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, address, token, uniqueId});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::StringW, uint16_t, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Fusion::Sockets::NetPeerGroup::Connect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* uniqueId = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, ip, port, token, uniqueId});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::Disconnect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetDisconnectReason)>(&Fusion::Sockets::NetPeerGroup::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetDisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetPeerGroup::Update)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetPeer*, ::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::NetPeerGroup::Initialize)> {
  static const MethodInfo* get() {
    static auto* groupIndex = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeer"))->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupIndex, g, p, config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::PopSendHead
// Il2CppName: PopSendHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::Fusion::Sockets::NetPeerGroup*)>(&Fusion::Sockets::NetPeerGroup::PopSendHead)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "PopSendHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::PushOnRecvHead
// Il2CppName: PushOnRecvHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::PushOnRecvHead)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "PushOnRecvHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::UpdateConnections
// Il2CppName: UpdateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetPeerGroup::UpdateConnections)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "UpdateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendReliable
// Il2CppName: SendReliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, int, uint8_t*, int)>(&Fusion::Sockets::NetPeerGroup::SendReliable)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* dataKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "SendReliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, dataKey, data, dataLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::ChangeConnectionAddressDuringConnecting
// Il2CppName: ChangeConnectionAddressDuringConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetPeerGroup::ChangeConnectionAddressDuringConnecting)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* newAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "ChangeConnectionAddressDuringConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, newAddress});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendCommandConnect
// Il2CppName: SendCommandConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::SendCommandConnect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "SendCommandConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::UpdateConnecting
// Il2CppName: UpdateConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::UpdateConnecting)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "UpdateConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::UpdateConnected
// Il2CppName: UpdateConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::UpdateConnected)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "UpdateConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::UpdateDisconnected
// Il2CppName: UpdateDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::UpdateDisconnected)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "UpdateDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::UpdateShutdown
// Il2CppName: UpdateShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::UpdateShutdown)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "UpdateShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendUnconnected
// Il2CppName: SendUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::SendUnconnected)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "SendUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::Send)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::GetConnectionSendBuffer
// Il2CppName: GetConnectionSendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ByRef<::Fusion::Sockets::NetBitBuffer*>)>(&Fusion::Sockets::NetPeerGroup::GetConnectionSendBuffer)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "GetConnectionSendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendUnconnectedData
// Il2CppName: SendUnconnectedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetAddress, void*, int)>(&Fusion::Sockets::NetPeerGroup::SendUnconnectedData)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "SendUnconnectedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, address, data, dataLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::GetNotifyDataBuffer
// Il2CppName: GetNotifyDataBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ByRef<::Fusion::Sockets::NetBitBuffer*>)>(&Fusion::Sockets::NetPeerGroup::GetNotifyDataBuffer)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "GetNotifyDataBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendNotifyDataBuffer
// Il2CppName: SendNotifyDataBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, void*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetPeerGroup::SendNotifyDataBuffer)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* userData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "SendNotifyDataBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c, b, userData, cb});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*)>(&Fusion::Sockets::NetPeerGroup::Receive)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketUnconnected
// Il2CppName: HandlePacketUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketUnconnected)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacket
// Il2CppName: HandlePacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacket)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketNotifyAcks
// Il2CppName: HandlePacketNotifyAcks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketNotifyAcks)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketNotifyAcks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketNotifyData
// Il2CppName: HandlePacketNotifyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketNotifyData)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketNotifyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketNotifyData_Part2
// Il2CppName: HandlePacketNotifyData_Part2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetNotifyHeader, int, ::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketNotifyData_Part2)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetNotifyHeader")->byval_arg;
    static auto* sequenceDistance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketNotifyData_Part2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, sequenceDistance, g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketAcks
// Il2CppName: HandlePacketAcks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetNotifyHeader)>(&Fusion::Sockets::NetPeerGroup::HandlePacketAcks)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetNotifyHeader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketAcks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, h});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::LostEnvelope
// Il2CppName: LostEnvelope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetSendEnvelope, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::LostEnvelope)> {
  static const MethodInfo* get() {
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "LostEnvelope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketUnreliableData
// Il2CppName: HandlePacketUnreliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketUnreliableData)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketUnreliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandlePacketCommand
// Il2CppName: HandlePacketCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetPeerGroup::HandlePacketCommand)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* b = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandlePacketCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, b});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandleCommandRefused
// Il2CppName: HandleCommandRefused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetCommandRefused)>(&Fusion::Sockets::NetPeerGroup::HandleCommandRefused)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandRefused")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandleCommandRefused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, cmd});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandleCommandDisconnect
// Il2CppName: HandleCommandDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetCommandDisconnect)>(&Fusion::Sockets::NetPeerGroup::HandleCommandDisconnect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandDisconnect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandleCommandDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, cmd});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandleCommandConnect
// Il2CppName: HandleCommandConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetCommandConnect)>(&Fusion::Sockets::NetPeerGroup::HandleCommandConnect)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandConnect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandleCommandConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, cmd});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::HandleCommandAccepted
// Il2CppName: HandleCommandAccepted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetCommandAccepted)>(&Fusion::Sockets::NetPeerGroup::HandleCommandAccepted)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* cmd = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetCommandAccepted")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "HandleCommandAccepted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, cmd});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendCommand
// Il2CppName: SendCommand
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::SendCommandUnconnected
// Il2CppName: SendCommandUnconnected
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::QueueAddressUnmap
// Il2CppName: QueueAddressUnmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::QueueAddressUnmap)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "QueueAddressUnmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::ChangeConnectionStatus
// Il2CppName: ChangeConnectionStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetConnectionStatus)>(&Fusion::Sockets::NetPeerGroup::ChangeConnectionStatus)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "ChangeConnectionStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c, status});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::ReleaseConnection
// Il2CppName: ReleaseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::INetPeerGroupCallbacks*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::NetPeerGroup::ReleaseConnection)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetPeerGroupCallbacks")->byval_arg;
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "ReleaseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, cb, c});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetPeerGroup::AllocateConnection
// Il2CppName: AllocateConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (*)(::Fusion::Sockets::NetPeerGroup*, ::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Fusion::Sockets::NetPeerGroup::AllocateConnection)> {
  static const MethodInfo* get() {
    static auto* g = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeerGroup"))->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* uniqueId = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetPeerGroup), "AllocateConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g, address, token, uniqueId});
  }
};
