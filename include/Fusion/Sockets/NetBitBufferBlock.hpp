// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBufferBlock
  struct NetBitBufferBlock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetBitBufferBlock, "Fusion.Sockets", "NetBitBufferBlock");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetBitBufferBlock
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetBitBufferBlock/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _packetSize
    // Size: 0x4
    // Offset: 0x0
    int packetSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: packetSize and: freeHead
    char __padding0[0x4] = {};
    // private System.IntPtr _freeHead
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr freeHead;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private Fusion.Sockets.NetBitBufferBlock* _self
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Sockets::NetBitBufferBlock* self;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBufferBlock*) == 0x8);
    // private Fusion.Sockets.NetBitBuffer* _allocatedHead
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Sockets::NetBitBuffer* allocatedHead;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
    public:
    // Creating value type constructor for type: NetBitBufferBlock
    constexpr NetBitBufferBlock(int packetSize_ = {}, ::System::IntPtr freeHead_ = {}, ::Fusion::Sockets::NetBitBufferBlock* self_ = {}, ::Fusion::Sockets::NetBitBuffer* allocatedHead_ = {}) noexcept : packetSize{packetSize_}, freeHead{freeHead_}, self{self_}, allocatedHead{allocatedHead_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 _packetSize
    [[deprecated("Use field access instead!")]] int& dyn__packetSize();
    // Get instance field reference: private System.IntPtr _freeHead
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__freeHead();
    // Get instance field reference: private Fusion.Sockets.NetBitBufferBlock* _self
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBufferBlock*& dyn__self();
    // Get instance field reference: private Fusion.Sockets.NetBitBuffer* _allocatedHead
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn__allocatedHead();
    // static public System.Void Dispose(Fusion.Sockets.NetBitBufferBlock* block)
    // Offset: 0x2B90790
    static void Dispose(::Fusion::Sockets::NetBitBufferBlock* block);
    // static public Fusion.Sockets.NetBitBufferBlock* Create(System.Int32 packetSize)
    // Offset: 0x2B907D8
    static ::Fusion::Sockets::NetBitBufferBlock* Create(int packetSize);
    // public System.Void Release(Fusion.Sockets.NetBitBuffer* ptr)
    // Offset: 0x2B8F9C0
    void Release(::Fusion::Sockets::NetBitBuffer* ptr);
    // public Fusion.Sockets.NetBitBuffer* TryAcquire()
    // Offset: 0x2B90830
    ::Fusion::Sockets::NetBitBuffer* TryAcquire();
    // public System.Boolean TryAcquire(out Fusion.Sockets.NetBitBuffer* ptr)
    // Offset: 0x2B9084C
    bool TryAcquire(ByRef<::Fusion::Sockets::NetBitBuffer*> ptr);
  }; // Fusion.Sockets.NetBitBufferBlock
  #pragma pack(pop)
  static check_size<sizeof(NetBitBufferBlock), 24 + sizeof(::Fusion::Sockets::NetBitBuffer*)> __Fusion_Sockets_NetBitBufferBlockSizeCheck;
  static_assert(sizeof(NetBitBufferBlock) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferBlock::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetBitBufferBlock*)>(&Fusion::Sockets::NetBitBufferBlock::Dispose)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBufferBlock"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferBlock), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferBlock::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBufferBlock* (*)(int)>(&Fusion::Sockets::NetBitBufferBlock::Create)> {
  static const MethodInfo* get() {
    static auto* packetSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferBlock), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferBlock::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBufferBlock::*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetBitBufferBlock::Release)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferBlock), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferBlock::TryAcquire
// Il2CppName: TryAcquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBuffer* (Fusion::Sockets::NetBitBufferBlock::*)()>(&Fusion::Sockets::NetBitBufferBlock::TryAcquire)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferBlock), "TryAcquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferBlock::TryAcquire
// Il2CppName: TryAcquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBufferBlock::*)(ByRef<::Fusion::Sockets::NetBitBuffer*>)>(&Fusion::Sockets::NetBitBufferBlock::TryAcquire)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferBlock), "TryAcquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
