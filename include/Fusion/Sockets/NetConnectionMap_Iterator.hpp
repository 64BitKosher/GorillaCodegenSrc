// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.NetConnectionMap
#include "Fusion/Sockets/NetConnectionMap.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnection
  struct NetConnection;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConnectionMap::Iterator, "Fusion.Sockets", "NetConnectionMap/Iterator");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConnectionMap/Iterator
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConnectionMap::Iterator/*, public ::System::ValueType*/ {
    public:
    public:
    // private Fusion.Sockets.NetConnectionMap* _map
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Sockets::NetConnectionMap* map;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionMap*) == 0x8);
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x8
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0xC
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Iterator
    constexpr Iterator(::Fusion::Sockets::NetConnectionMap* map_ = {}, int index_ = {}, int count_ = {}) noexcept : map{map_}, index{index_}, count{count_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Fusion.Sockets.NetConnectionMap* _map
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionMap*& dyn__map();
    // Get instance field reference: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // public Fusion.Sockets.NetConnection* get_Current()
    // Offset: 0x2B92448
    ::Fusion::Sockets::NetConnection* get_Current();
    // public System.Void .ctor(Fusion.Sockets.NetConnectionMap* map)
    // Offset: 0x2B924A8
    Iterator(::Fusion::Sockets::NetConnectionMap* map);
    // public System.Boolean get_IsValid()
    // Offset: 0x2B92488
    bool get_IsValid();
    // public System.Boolean Next()
    // Offset: 0x2B924D0
    bool Next();
  }; // Fusion.Sockets.NetConnectionMap/Iterator
  #pragma pack(pop)
  static check_size<sizeof(NetConnectionMap::Iterator), 12 + sizeof(int)> __Fusion_Sockets_NetConnectionMap_IteratorSizeCheck;
  static_assert(sizeof(NetConnectionMap::Iterator) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Iterator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConnection* (Fusion::Sockets::NetConnectionMap::Iterator::*)()>(&Fusion::Sockets::NetConnectionMap::Iterator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap::Iterator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Iterator::Iterator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Iterator::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionMap::Iterator::*)()>(&Fusion::Sockets::NetConnectionMap::Iterator::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap::Iterator), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionMap::Iterator::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetConnectionMap::Iterator::*)()>(&Fusion::Sockets::NetConnectionMap::Iterator::Next)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionMap::Iterator), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
