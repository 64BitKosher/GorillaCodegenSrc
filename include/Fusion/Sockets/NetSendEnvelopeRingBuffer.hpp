// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSendEnvelope
  struct NetSendEnvelope;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSendEnvelopeRingBuffer
  struct NetSendEnvelopeRingBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetSendEnvelopeRingBuffer, "Fusion.Sockets", "NetSendEnvelopeRingBuffer");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetSendEnvelopeRingBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetSendEnvelopeRingBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private Fusion.Sockets.NetSendEnvelope* _items
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Sockets::NetSendEnvelope* items;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetSendEnvelope*) == 0x8);
    // private System.Int32 _itemsCapacity
    // Size: 0x4
    // Offset: 0x8
    int itemsCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Head
    // Size: 0x4
    // Offset: 0xC
    int Head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Tail
    // Size: 0x4
    // Offset: 0x10
    int Tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Count
    // Size: 0x4
    // Offset: 0x14
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetSendEnvelopeRingBuffer
    constexpr NetSendEnvelopeRingBuffer(::Fusion::Sockets::NetSendEnvelope* items_ = {}, int itemsCapacity_ = {}, int Head_ = {}, int Tail_ = {}, int Count_ = {}) noexcept : items{items_}, itemsCapacity{itemsCapacity_}, Head{Head_}, Tail{Tail_}, Count{Count_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Fusion.Sockets.NetSendEnvelope* _items
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetSendEnvelope*& dyn__items();
    // Get instance field reference: private System.Int32 _itemsCapacity
    [[deprecated("Use field access instead!")]] int& dyn__itemsCapacity();
    // Get instance field reference: public System.Int32 Head
    [[deprecated("Use field access instead!")]] int& dyn_Head();
    // Get instance field reference: public System.Int32 Tail
    [[deprecated("Use field access instead!")]] int& dyn_Tail();
    // Get instance field reference: public System.Int32 Count
    [[deprecated("Use field access instead!")]] int& dyn_Count();
    // public System.Boolean get_IsFull()
    // Offset: 0x2B96164
    bool get_IsFull();
    // public System.Void Push(Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0x2B9627C
    void Push(::Fusion::Sockets::NetSendEnvelope envelope);
    // public Fusion.Sockets.NetSendEnvelope Peek()
    // Offset: 0x2B91C70
    ::Fusion::Sockets::NetSendEnvelope Peek();
    // public System.Void Pop()
    // Offset: 0x2B91C88
    void Pop();
    // public System.Void Reset()
    // Offset: 0x2B9171C
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x2B91CA8
    void Dispose();
    // static public Fusion.Sockets.NetSendEnvelopeRingBuffer Create(System.Int32 capacity)
    // Offset: 0x2B91438
    static ::Fusion::Sockets::NetSendEnvelopeRingBuffer Create(int capacity);
  }; // Fusion.Sockets.NetSendEnvelopeRingBuffer
  #pragma pack(pop)
  static check_size<sizeof(NetSendEnvelopeRingBuffer), 20 + sizeof(int)> __Fusion_Sockets_NetSendEnvelopeRingBufferSizeCheck;
  static_assert(sizeof(NetSendEnvelopeRingBuffer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::get_IsFull
// Il2CppName: get_IsFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)()>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::get_IsFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "get_IsFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)(::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Push)> {
  static const MethodInfo* get() {
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetSendEnvelope (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)()>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)()>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)()>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSendEnvelopeRingBuffer::*)()>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSendEnvelopeRingBuffer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetSendEnvelopeRingBuffer (*)(int)>(&Fusion::Sockets::NetSendEnvelopeRingBuffer::Create)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSendEnvelopeRingBuffer), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
