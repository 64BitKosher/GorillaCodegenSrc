// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetPacketType
#include "Fusion/Sockets/NetPacketType.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSendEnvelope
  struct NetSendEnvelope;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetSendEnvelope, "Fusion.Sockets", "NetSendEnvelope");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x19
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetSendEnvelope
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetSendEnvelope/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Void* UserData
    // Size: 0x8
    // Offset: 0x0
    void* UserData;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // public System.UInt16 Sequence
    // Size: 0x2
    // Offset: 0x8
    uint16_t Sequence;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: Sequence and: SendTime
    char __padding1[0x6] = {};
    // public System.Double SendTime
    // Size: 0x8
    // Offset: 0x10
    double SendTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // Fusion.Sockets.NetPacketType PacketType
    // Size: 0x1
    // Offset: 0x18
    ::Fusion::Sockets::NetPacketType PacketType;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPacketType) == 0x1);
    public:
    // Creating value type constructor for type: NetSendEnvelope
    constexpr NetSendEnvelope(void* UserData_ = {}, uint16_t Sequence_ = {}, double SendTime_ = {}, ::Fusion::Sockets::NetPacketType PacketType_ = {}) noexcept : UserData{UserData_}, Sequence{Sequence_}, SendTime{SendTime_}, PacketType{PacketType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Void* UserData
    [[deprecated("Use field access instead!")]] void*& dyn_UserData();
    // Get instance field reference: public System.UInt16 Sequence
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Sequence();
    // Get instance field reference: public System.Double SendTime
    [[deprecated("Use field access instead!")]] double& dyn_SendTime();
    // Get instance field reference: Fusion.Sockets.NetPacketType PacketType
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPacketType& dyn_PacketType();
  }; // Fusion.Sockets.NetSendEnvelope
  #pragma pack(pop)
  static check_size<sizeof(NetSendEnvelope), 24 + sizeof(::Fusion::Sockets::NetPacketType)> __Fusion_Sockets_NetSendEnvelopeSizeCheck;
  static_assert(sizeof(NetSendEnvelope) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
