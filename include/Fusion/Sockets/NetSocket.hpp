// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: NanoSockets.Socket
#include "NanoSockets/Socket.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSocket
  struct NetSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetSocket, "Fusion.Sockets", "NetSocket");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetSocket
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetSocket/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int64 Handle
    // Size: 0x8
    // Offset: 0x0
    int64_t Handle;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public NanoSockets.Socket NativeSocket
    // Size: 0x8
    // Offset: 0x0
    ::NanoSockets::Socket NativeSocket;
    // Field size check
    static_assert(sizeof(::NanoSockets::Socket) == 0x8);
    public:
    // Creating value type constructor for type: NetSocket
    constexpr NetSocket(int64_t Handle_ = {}, ::NanoSockets::Socket NativeSocket_ = {}) noexcept : Handle{Handle_}, NativeSocket{NativeSocket_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int64 Handle
    [[deprecated("Use field access instead!")]] int64_t& dyn_Handle();
    // Get instance field reference: public NanoSockets.Socket NativeSocket
    [[deprecated("Use field access instead!")]] ::NanoSockets::Socket& dyn_NativeSocket();
    // public System.Boolean get_IsCreated()
    // Offset: 0x2B93A50
    bool get_IsCreated();
  }; // Fusion.Sockets.NetSocket
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetSocket::get_IsCreated
// Il2CppName: get_IsCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetSocket::*)()>(&Fusion::Sockets::NetSocket::get_IsCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSocket), "get_IsCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
