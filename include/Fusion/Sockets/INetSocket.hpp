// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConfig
  struct NetConfig;
  // Forward declaring type: NetSocket
  struct NetSocket;
  // Forward declaring type: NetAddress
  struct NetAddress;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: INetSocket
  class INetSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::INetSocket);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::INetSocket*, "Fusion.Sockets", "INetSocket");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.INetSocket
  // [TokenAttribute] Offset: FFFFFFFF
  class INetSocket {
    public:
    // public System.Void Initialize(Fusion.Sockets.NetConfig config)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize(::Fusion::Sockets::NetConfig config);
    // public Fusion.Sockets.NetSocket Create(Fusion.Sockets.NetConfig config)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::Sockets::NetSocket Create(::Fusion::Sockets::NetConfig config);
    // public Fusion.Sockets.NetAddress Bind(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetConfig config)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::Sockets::NetAddress Bind(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetConfig config);
    // public System.Int32 Receive(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetAddress* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Receive(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetAddress* address, uint8_t* buffer, int bufferLength);
    // public System.Int32 Send(Fusion.Sockets.NetSocket socket, Fusion.Sockets.NetAddress* address, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Send(::Fusion::Sockets::NetSocket socket, ::Fusion::Sockets::NetAddress* address, uint8_t* buffer, int bufferLength);
    // public System.Void Destroy(Fusion.Sockets.NetSocket socket)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Destroy(::Fusion::Sockets::NetSocket socket);
  }; // Fusion.Sockets.INetSocket
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::INetSocket::Initialize)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetSocket (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::INetSocket::Create)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetConfig)>(&Fusion::Sockets::INetSocket::Bind)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, config});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetAddress*, uint8_t*, int)>(&Fusion::Sockets::INetSocket::Receive)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetSocket, ::Fusion::Sockets::NetAddress*, uint8_t*, int)>(&Fusion::Sockets::INetSocket::Send)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetSocket::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetSocket::*)(::Fusion::Sockets::NetSocket)>(&Fusion::Sockets::INetSocket::Destroy)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSocket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetSocket*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket});
  }
};
