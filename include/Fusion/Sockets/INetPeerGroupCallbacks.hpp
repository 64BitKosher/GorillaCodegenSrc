// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: NetDisconnectReason
  struct NetDisconnectReason;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
  // Forward declaring type: NetSendEnvelope
  struct NetSendEnvelope;
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: INetPeerGroupCallbacks
  class INetPeerGroupCallbacks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::INetPeerGroupCallbacks);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::INetPeerGroupCallbacks*, "Fusion.Sockets", "INetPeerGroupCallbacks");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.INetPeerGroupCallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  class INetPeerGroupCallbacks {
    public:
    // public System.Void OnConnected(Fusion.Sockets.NetConnection* connection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnected(::Fusion::Sockets::NetConnection* connection);
    // public System.Void OnDisconnected(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetDisconnectReason reason)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDisconnected(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetDisconnectReason reason);
    // public System.Void OnUnreliableData(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnUnreliableData(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void OnUnconnectedData(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnUnconnectedData(::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void OnNotifyData(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNotifyData(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void OnNotifyLost(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNotifyLost(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetSendEnvelope envelope);
    // public System.Void OnNotifyDelivered(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNotifyDelivered(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetSendEnvelope envelope);
    // public System.Void OnNotifyDispose(Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnNotifyDispose(::Fusion::Sockets::NetSendEnvelope envelope);
    // public System.Void OnReliableData(Fusion.Sockets.NetConnection* connection, System.Int32 key, System.Byte* data, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnReliableData(::Fusion::Sockets::NetConnection* connection, int key, uint8_t* data, int length);
    // public System.Boolean OnConnectionRequest(Fusion.Sockets.NetAddress remoteAddress, System.Byte[] token)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool OnConnectionRequest(::Fusion::Sockets::NetAddress remoteAddress, ::ArrayW<uint8_t> token);
    // public System.Void OnConnectionFailed(Fusion.Sockets.NetAddress address, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnectionFailed(::Fusion::Sockets::NetAddress address, ::Fusion::Sockets::NetConnectFailedReason reason);
    // public System.Void OnConnectionAttempt(Fusion.Sockets.NetConnection* connection, System.Int32 attempts, System.Int32 totalConnectAttempts)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnectionAttempt(::Fusion::Sockets::NetConnection* connection, int attempts, int totalConnectAttempts);
  }; // Fusion.Sockets.INetPeerGroupCallbacks
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnConnected
// Il2CppName: OnConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetDisconnectReason)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetDisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnUnreliableData
// Il2CppName: OnUnreliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnUnreliableData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnUnreliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnUnconnectedData
// Il2CppName: OnUnconnectedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnUnconnectedData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnUnconnectedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyData
// Il2CppName: OnNotifyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnNotifyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyLost
// Il2CppName: OnNotifyLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyLost)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnNotifyLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyDelivered
// Il2CppName: OnNotifyDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyDelivered)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnNotifyDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyDispose
// Il2CppName: OnNotifyDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnNotifyDispose)> {
  static const MethodInfo* get() {
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnNotifyDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnReliableData
// Il2CppName: OnReliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, int, uint8_t*, int)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnReliableData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnReliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, key, data, length});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionRequest
// Il2CppName: OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddress, token});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionFailed
// Il2CppName: OnConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionAttempt
// Il2CppName: OnConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::INetPeerGroupCallbacks::*)(::Fusion::Sockets::NetConnection*, int, int)>(&Fusion::Sockets::INetPeerGroupCallbacks::OnConnectionAttempt)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* attempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* totalConnectAttempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::INetPeerGroupCallbacks*), "OnConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, attempts, totalConnectAttempts});
  }
};
