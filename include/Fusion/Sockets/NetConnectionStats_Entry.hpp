// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.NetConnectionStats
#include "Fusion/Sockets/NetConnectionStats.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.ISampleData
#include "Fusion/ISampleData.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConnectionStats::Entry, "Fusion.Sockets", "NetConnectionStats/Entry");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConnectionStats/Entry
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConnectionStats::Entry/*, public ::System::ValueType, public ::Fusion::ISampleData*/ {
    public:
    public:
    // public System.Double Time
    // Size: 0x8
    // Offset: 0x0
    double Time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double Value
    // Size: 0x8
    // Offset: 0x8
    double Value;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: Entry
    constexpr Entry(double Time_ = {}, double Value_ = {}) noexcept : Time{Time_}, Value{Value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ISampleData
    operator ::Fusion::ISampleData() noexcept {
      return *reinterpret_cast<::Fusion::ISampleData*>(this);
    }
    // Get instance field reference: public System.Double Time
    [[deprecated("Use field access instead!")]] double& dyn_Time();
    // Get instance field reference: public System.Double Value
    [[deprecated("Use field access instead!")]] double& dyn_Value();
    // public System.Int32 get_TickValue()
    // Offset: 0x2B926B4
    int get_TickValue();
    // public System.Single get_TimeValue()
    // Offset: 0x2B926BC
    float get_TimeValue();
    // public System.Single get_FloatValue()
    // Offset: 0x2B926C8
    float get_FloatValue();
  }; // Fusion.Sockets.NetConnectionStats/Entry
  #pragma pack(pop)
  static check_size<sizeof(NetConnectionStats::Entry), 8 + sizeof(double)> __Fusion_Sockets_NetConnectionStats_EntrySizeCheck;
  static_assert(sizeof(NetConnectionStats::Entry) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Entry::get_TickValue
// Il2CppName: get_TickValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConnectionStats::Entry::*)()>(&Fusion::Sockets::NetConnectionStats::Entry::get_TickValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats::Entry), "get_TickValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Entry::get_TimeValue
// Il2CppName: get_TimeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Sockets::NetConnectionStats::Entry::*)()>(&Fusion::Sockets::NetConnectionStats::Entry::get_TimeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats::Entry), "get_TimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConnectionStats::Entry::get_FloatValue
// Il2CppName: get_FloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Sockets::NetConnectionStats::Entry::*)()>(&Fusion::Sockets::NetConnectionStats::Entry::get_FloatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConnectionStats::Entry), "get_FloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
