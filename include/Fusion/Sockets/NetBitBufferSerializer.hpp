// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBufferSerializer
  struct NetBitBufferSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetBitBufferSerializer, "Fusion.Sockets", "NetBitBufferSerializer");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetBitBufferSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetBitBufferSerializer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Boolean _write
    // Size: 0x1
    // Offset: 0x0
    bool write;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: write and: buffer
    char __padding0[0x7] = {};
    // private Fusion.Sockets.NetBitBuffer* _buffer
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::Sockets::NetBitBuffer* buffer;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
    public:
    // Creating value type constructor for type: NetBitBufferSerializer
    constexpr NetBitBufferSerializer(bool write_ = {}, ::Fusion::Sockets::NetBitBuffer* buffer_ = {}) noexcept : write{write_}, buffer{buffer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Boolean _write
    [[deprecated("Use field access instead!")]] bool& dyn__write();
    // Get instance field reference: private Fusion.Sockets.NetBitBuffer* _buffer
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn__buffer();
    // public System.Boolean get_Writing()
    // Offset: 0x2B90C58
    bool get_Writing();
    // public Fusion.Sockets.NetBitBuffer* get_Buffer()
    // Offset: 0x2B90C60
    ::Fusion::Sockets::NetBitBuffer* get_Buffer();
    // private System.Void .ctor(Fusion.Sockets.NetBitBuffer* buffer, System.Boolean write)
    // Offset: 0x2B90C68
    NetBitBufferSerializer(::Fusion::Sockets::NetBitBuffer* buffer, bool write);
    // static public Fusion.Sockets.NetBitBufferSerializer Writer(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B90C78
    static ::Fusion::Sockets::NetBitBufferSerializer Writer(::Fusion::Sockets::NetBitBuffer* buffer);
    // static public Fusion.Sockets.NetBitBufferSerializer Reader(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B90C84
    static ::Fusion::Sockets::NetBitBufferSerializer Reader(::Fusion::Sockets::NetBitBuffer* buffer);
  }; // Fusion.Sockets.NetBitBufferSerializer
  #pragma pack(pop)
  static check_size<sizeof(NetBitBufferSerializer), 8 + sizeof(::Fusion::Sockets::NetBitBuffer*)> __Fusion_Sockets_NetBitBufferSerializerSizeCheck;
  static_assert(sizeof(NetBitBufferSerializer) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferSerializer::get_Writing
// Il2CppName: get_Writing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBufferSerializer::*)()>(&Fusion::Sockets::NetBitBufferSerializer::get_Writing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferSerializer), "get_Writing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferSerializer::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBuffer* (Fusion::Sockets::NetBitBufferSerializer::*)()>(&Fusion::Sockets::NetBitBufferSerializer::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferSerializer), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferSerializer::NetBitBufferSerializer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferSerializer::Writer
// Il2CppName: Writer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBufferSerializer (*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetBitBufferSerializer::Writer)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferSerializer), "Writer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBufferSerializer::Reader
// Il2CppName: Reader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBufferSerializer (*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetBitBufferSerializer::Reader)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBufferSerializer), "Reader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
