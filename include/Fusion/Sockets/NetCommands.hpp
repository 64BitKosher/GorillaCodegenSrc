// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetCommands
  struct NetCommands;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetCommands, "Fusion.Sockets", "NetCommands");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.NetCommands
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetCommands/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: NetCommands
    constexpr NetCommands(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public Fusion.Sockets.NetCommands Connect
    static constexpr const uint8_t Connect = 1u;
    // Get static field: static public Fusion.Sockets.NetCommands Connect
    static ::Fusion::Sockets::NetCommands _get_Connect();
    // Set static field: static public Fusion.Sockets.NetCommands Connect
    static void _set_Connect(::Fusion::Sockets::NetCommands value);
    // static field const value: static public Fusion.Sockets.NetCommands Accepted
    static constexpr const uint8_t Accepted = 2u;
    // Get static field: static public Fusion.Sockets.NetCommands Accepted
    static ::Fusion::Sockets::NetCommands _get_Accepted();
    // Set static field: static public Fusion.Sockets.NetCommands Accepted
    static void _set_Accepted(::Fusion::Sockets::NetCommands value);
    // static field const value: static public Fusion.Sockets.NetCommands Refused
    static constexpr const uint8_t Refused = 3u;
    // Get static field: static public Fusion.Sockets.NetCommands Refused
    static ::Fusion::Sockets::NetCommands _get_Refused();
    // Set static field: static public Fusion.Sockets.NetCommands Refused
    static void _set_Refused(::Fusion::Sockets::NetCommands value);
    // static field const value: static public Fusion.Sockets.NetCommands Disconnect
    static constexpr const uint8_t Disconnect = 4u;
    // Get static field: static public Fusion.Sockets.NetCommands Disconnect
    static ::Fusion::Sockets::NetCommands _get_Disconnect();
    // Set static field: static public Fusion.Sockets.NetCommands Disconnect
    static void _set_Disconnect(::Fusion::Sockets::NetCommands value);
    // static field const value: static public Fusion.Sockets.NetCommands Ping
    static constexpr const uint8_t Ping = 5u;
    // Get static field: static public Fusion.Sockets.NetCommands Ping
    static ::Fusion::Sockets::NetCommands _get_Ping();
    // Set static field: static public Fusion.Sockets.NetCommands Ping
    static void _set_Ping(::Fusion::Sockets::NetCommands value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // Fusion.Sockets.NetCommands
  #pragma pack(pop)
  static check_size<sizeof(NetCommands), 0 + sizeof(uint8_t)> __Fusion_Sockets_NetCommandsSizeCheck;
  static_assert(sizeof(NetCommands) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
