// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.NetPeerGroupMap
#include "Fusion/Sockets/NetPeerGroupMap.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetPeerGroupMap/EntryState
#include "Fusion/Sockets/NetPeerGroupMap_EntryState.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetPeerGroupMap::Entry, "Fusion.Sockets", "NetPeerGroupMap/Entry");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x32
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetPeerGroupMap/Entry
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetPeerGroupMap::Entry/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Sockets.NetPeerGroupMap/Entry* Next
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Sockets::NetPeerGroupMap::Entry* Next;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPeerGroupMap::Entry*) == 0x8);
    // public System.UInt64 Hash
    // Size: 0x8
    // Offset: 0x8
    uint64_t Hash;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Fusion.Sockets.NetPeerGroupMap/EntryState State
    // Size: 0x4
    // Offset: 0x10
    ::Fusion::Sockets::NetPeerGroupMap::EntryState State;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPeerGroupMap::EntryState) == 0x4);
    // Padding between fields: State and: Address
    char __padding2[0x4] = {};
    // public Fusion.Sockets.NetAddress Address
    // Size: 0x18
    // Offset: 0x18
    ::Fusion::Sockets::NetAddress Address;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public System.Int16 Group
    // Size: 0x2
    // Offset: 0x30
    int16_t Group;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Creating value type constructor for type: Entry
    constexpr Entry(::Fusion::Sockets::NetPeerGroupMap::Entry* Next_ = {}, uint64_t Hash_ = {}, ::Fusion::Sockets::NetPeerGroupMap::EntryState State_ = {}, ::Fusion::Sockets::NetAddress Address_ = {}, int16_t Group_ = {}) noexcept : Next{Next_}, Hash{Hash_}, State{State_}, Address{Address_}, Group{Group_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Sockets.NetPeerGroupMap/Entry* Next
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPeerGroupMap::Entry*& dyn_Next();
    // Get instance field reference: public System.UInt64 Hash
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Hash();
    // Get instance field reference: public Fusion.Sockets.NetPeerGroupMap/EntryState State
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPeerGroupMap::EntryState& dyn_State();
    // Get instance field reference: public Fusion.Sockets.NetAddress Address
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_Address();
    // Get instance field reference: public System.Int16 Group
    [[deprecated("Use field access instead!")]] int16_t& dyn_Group();
  }; // Fusion.Sockets.NetPeerGroupMap/Entry
  #pragma pack(pop)
  static check_size<sizeof(NetPeerGroupMap::Entry), 48 + sizeof(int16_t)> __Fusion_Sockets_NetPeerGroupMap_EntrySizeCheck;
  static_assert(sizeof(NetPeerGroupMap::Entry) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
