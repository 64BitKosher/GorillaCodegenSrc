// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: NanoSockets.Address
#include "NanoSockets/Address.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: BitStream
  class BitStream;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetAddress, "Fusion.Sockets", "NetAddress");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetAddress
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetAddress/*, public ::System::ValueType, public ::System::IEquatable_1<::Fusion::Sockets::NetAddress>*/ {
    public:
    // Nested type: ::Fusion::Sockets::NetAddress::SubnetMask
    class SubnetMask;
    public:
    // Creating union for fields at offset: 0x0
    union {
      // NanoSockets.Address NativeAddress
      // Size: 0x12
      // Offset: 0x0
      ::NanoSockets::Address NativeAddress;
      // Field size check
      static_assert(sizeof(::NanoSockets::Address) == 0x12);
      // System.UInt64 Block0
      // Size: 0x8
      // Offset: 0x0
      uint64_t Block0;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
    };
    // System.UInt64 Block1
    // Size: 0x8
    // Offset: 0x8
    uint64_t Block1;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt64 Block2
    // Size: 0x8
    // Offset: 0x10
    uint64_t Block2;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Int32 _actorId
    // Size: 0x4
    // Offset: 0x14
    int actorId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetAddress
    constexpr NetAddress(::NanoSockets::Address NativeAddress_ = {}, uint64_t Block1_ = {}, uint64_t Block2_ = {}, int actorId_ = {}) noexcept : NativeAddress{NativeAddress_}, Block1{Block1_}, Block2{Block2_}, actorId{actorId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Fusion::Sockets::NetAddress>
    operator ::System::IEquatable_1<::Fusion::Sockets::NetAddress>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Fusion::Sockets::NetAddress>*>(this);
    }
    // Get static field: static Fusion.Sockets.NetAddress AnyIPv4Addr
    static ::Fusion::Sockets::NetAddress _get_AnyIPv4Addr();
    // Set static field: static Fusion.Sockets.NetAddress AnyIPv4Addr
    static void _set_AnyIPv4Addr(::Fusion::Sockets::NetAddress value);
    // Get static field: static Fusion.Sockets.NetAddress AnyIPv6Addr
    static ::Fusion::Sockets::NetAddress _get_AnyIPv6Addr();
    // Set static field: static Fusion.Sockets.NetAddress AnyIPv6Addr
    static void _set_AnyIPv6Addr(::Fusion::Sockets::NetAddress value);
    // Get instance field reference: NanoSockets.Address NativeAddress
    [[deprecated("Use field access instead!")]] ::NanoSockets::Address& dyn_NativeAddress();
    // Get instance field reference: System.UInt64 Block0
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Block0();
    // Get instance field reference: System.UInt64 Block1
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Block1();
    // Get instance field reference: System.UInt64 Block2
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Block2();
    // Get instance field reference: private System.Int32 _actorId
    [[deprecated("Use field access instead!")]] int& dyn__actorId();
    // public System.Int32 get_ActorId()
    // Offset: 0x2B8EAF4
    int get_ActorId();
    // public System.Boolean get_IsRelayAddr()
    // Offset: 0x2B8EB00
    bool get_IsRelayAddr();
    // public System.Boolean get_IsIPv6()
    // Offset: 0x2B8EB10
    bool get_IsIPv6();
    // public System.Boolean get_IsValid()
    // Offset: 0x2B8EB48
    bool get_IsValid();
    // static public Fusion.Sockets.NetAddress FromActorId(System.Int32 actorId)
    // Offset: 0x2B8EC60
    static ::Fusion::Sockets::NetAddress FromActorId(int actorId);
    // static System.UInt64 Hash64(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B8EC70
    static uint64_t Hash64(::Fusion::Sockets::NetAddress address);
    // static public Fusion.Sockets.NetAddress Any(System.UInt16 port)
    // Offset: 0x2B8ECA0
    static ::Fusion::Sockets::NetAddress Any(uint16_t port);
    // static public Fusion.Sockets.NetAddress CreateFromIpPort(System.String ip, System.UInt16 port)
    // Offset: 0x2B8ED58
    static ::Fusion::Sockets::NetAddress CreateFromIpPort(::StringW ip, uint16_t port);
    // System.Void Serialize(Fusion.Protocol.BitStream stream)
    // Offset: 0x2B8D60C
    void Serialize(::Fusion::Protocol::BitStream* stream);
    // public System.Boolean Equals(Fusion.Sockets.NetAddress other)
    // Offset: 0x2B8EC24
    bool Equals(::Fusion::Sockets::NetAddress other);
    // static private System.Void .cctor()
    // Offset: 0x2B8F0A0
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2B8EEF4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2B8EF8C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2B8EFE0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.Sockets.NetAddress
  #pragma pack(pop)
  static check_size<sizeof(NetAddress), 20 + sizeof(int)> __Fusion_Sockets_NetAddressSizeCheck;
  static_assert(sizeof(NetAddress) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::get_ActorId
// Il2CppName: get_ActorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::get_ActorId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "get_ActorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::get_IsRelayAddr
// Il2CppName: get_IsRelayAddr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::get_IsRelayAddr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "get_IsRelayAddr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::get_IsIPv6
// Il2CppName: get_IsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::get_IsIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "get_IsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::FromActorId
// Il2CppName: FromActorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (*)(int)>(&Fusion::Sockets::NetAddress::FromActorId)> {
  static const MethodInfo* get() {
    static auto* actorId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "FromActorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorId});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::Hash64
// Il2CppName: Hash64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetAddress::Hash64)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "Hash64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::Any
// Il2CppName: Any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (*)(uint16_t)>(&Fusion::Sockets::NetAddress::Any)> {
  static const MethodInfo* get() {
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "Any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{port});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::CreateFromIpPort
// Il2CppName: CreateFromIpPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (*)(::StringW, uint16_t)>(&Fusion::Sockets::NetAddress::CreateFromIpPort)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "CreateFromIpPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip, port});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetAddress::*)(::Fusion::Protocol::BitStream*)>(&Fusion::Sockets::NetAddress::Serialize)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "BitStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetAddress::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::NetAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Sockets::NetAddress::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetAddress::*)(::Il2CppObject*)>(&Fusion::Sockets::NetAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetAddress::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Sockets::NetAddress::*)()>(&Fusion::Sockets::NetAddress::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetAddress), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
