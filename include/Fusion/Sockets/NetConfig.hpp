// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Including type: Fusion.Sockets.NetConfigNotify
#include "Fusion/Sockets/NetConfigNotify.hpp"
// Including type: Fusion.Sockets.NetConfigSimulation
#include "Fusion/Sockets/NetConfigSimulation.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConfig
  struct NetConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetConfig, "Fusion.Sockets", "NetConfig");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0xF8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetConfig
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetConfig/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 ConnectionSendBuffers
    // Size: 0x4
    // Offset: 0x0
    int ConnectionSendBuffers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ConnectionGroups
    // Size: 0x4
    // Offset: 0x4
    int ConnectionGroups;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxConnections
    // Size: 0x4
    // Offset: 0x8
    int MaxConnections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SocketSendBuffer
    // Size: 0x4
    // Offset: 0xC
    int SocketSendBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SocketRecvBuffer
    // Size: 0x4
    // Offset: 0x10
    int SocketRecvBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 DefaultMtu
    // Size: 0x4
    // Offset: 0x14
    int DefaultMtu;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PacketSize
    // Size: 0x4
    // Offset: 0x18
    int PacketSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ConnectAttempts
    // Size: 0x4
    // Offset: 0x1C
    int ConnectAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Double ConnectInterval
    // Size: 0x8
    // Offset: 0x20
    double ConnectInterval;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double OperationExpireTime
    // Size: 0x8
    // Offset: 0x28
    double OperationExpireTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionDefaultRtt
    // Size: 0x8
    // Offset: 0x30
    double ConnectionDefaultRtt;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionTimeout
    // Size: 0x8
    // Offset: 0x38
    double ConnectionTimeout;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionPingInterval
    // Size: 0x8
    // Offset: 0x40
    double ConnectionPingInterval;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionShutdownTime
    // Size: 0x8
    // Offset: 0x48
    double ConnectionShutdownTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public Fusion.Sockets.NetAddress Address
    // Size: 0x18
    // Offset: 0x50
    ::Fusion::Sockets::NetAddress Address;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public Fusion.Sockets.NetConfigNotify Notify
    // Size: 0x18
    // Offset: 0x68
    ::Fusion::Sockets::NetConfigNotify Notify;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConfigNotify) == 0x18);
    // public Fusion.Sockets.NetConfigSimulation Simulation
    // Size: 0x78
    // Offset: 0x80
    ::Fusion::Sockets::NetConfigSimulation Simulation;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConfigSimulation) == 0x78);
    public:
    // Creating value type constructor for type: NetConfig
    constexpr NetConfig(int ConnectionSendBuffers_ = {}, int ConnectionGroups_ = {}, int MaxConnections_ = {}, int SocketSendBuffer_ = {}, int SocketRecvBuffer_ = {}, int DefaultMtu_ = {}, int PacketSize_ = {}, int ConnectAttempts_ = {}, double ConnectInterval_ = {}, double OperationExpireTime_ = {}, double ConnectionDefaultRtt_ = {}, double ConnectionTimeout_ = {}, double ConnectionPingInterval_ = {}, double ConnectionShutdownTime_ = {}, ::Fusion::Sockets::NetAddress Address_ = {}, ::Fusion::Sockets::NetConfigNotify Notify_ = {}, ::Fusion::Sockets::NetConfigSimulation Simulation_ = {}) noexcept : ConnectionSendBuffers{ConnectionSendBuffers_}, ConnectionGroups{ConnectionGroups_}, MaxConnections{MaxConnections_}, SocketSendBuffer{SocketSendBuffer_}, SocketRecvBuffer{SocketRecvBuffer_}, DefaultMtu{DefaultMtu_}, PacketSize{PacketSize_}, ConnectAttempts{ConnectAttempts_}, ConnectInterval{ConnectInterval_}, OperationExpireTime{OperationExpireTime_}, ConnectionDefaultRtt{ConnectionDefaultRtt_}, ConnectionTimeout{ConnectionTimeout_}, ConnectionPingInterval{ConnectionPingInterval_}, ConnectionShutdownTime{ConnectionShutdownTime_}, Address{Address_}, Notify{Notify_}, Simulation{Simulation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 ConnectionSendBuffers
    [[deprecated("Use field access instead!")]] int& dyn_ConnectionSendBuffers();
    // Get instance field reference: public System.Int32 ConnectionGroups
    [[deprecated("Use field access instead!")]] int& dyn_ConnectionGroups();
    // Get instance field reference: public System.Int32 MaxConnections
    [[deprecated("Use field access instead!")]] int& dyn_MaxConnections();
    // Get instance field reference: public System.Int32 SocketSendBuffer
    [[deprecated("Use field access instead!")]] int& dyn_SocketSendBuffer();
    // Get instance field reference: public System.Int32 SocketRecvBuffer
    [[deprecated("Use field access instead!")]] int& dyn_SocketRecvBuffer();
    // Get instance field reference: public System.Int32 DefaultMtu
    [[deprecated("Use field access instead!")]] int& dyn_DefaultMtu();
    // Get instance field reference: public System.Int32 PacketSize
    [[deprecated("Use field access instead!")]] int& dyn_PacketSize();
    // Get instance field reference: public System.Int32 ConnectAttempts
    [[deprecated("Use field access instead!")]] int& dyn_ConnectAttempts();
    // Get instance field reference: public System.Double ConnectInterval
    [[deprecated("Use field access instead!")]] double& dyn_ConnectInterval();
    // Get instance field reference: public System.Double OperationExpireTime
    [[deprecated("Use field access instead!")]] double& dyn_OperationExpireTime();
    // Get instance field reference: public System.Double ConnectionDefaultRtt
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionDefaultRtt();
    // Get instance field reference: public System.Double ConnectionTimeout
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionTimeout();
    // Get instance field reference: public System.Double ConnectionPingInterval
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionPingInterval();
    // Get instance field reference: public System.Double ConnectionShutdownTime
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionShutdownTime();
    // Get instance field reference: public Fusion.Sockets.NetAddress Address
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_Address();
    // Get instance field reference: public Fusion.Sockets.NetConfigNotify Notify
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConfigNotify& dyn_Notify();
    // Get instance field reference: public Fusion.Sockets.NetConfigSimulation Simulation
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConfigSimulation& dyn_Simulation();
    // public System.Int32 get_ConnectionsPerGroup()
    // Offset: 0x2B91130
    int get_ConnectionsPerGroup();
    // static public Fusion.Sockets.NetConfig get_Defaults()
    // Offset: 0x2B91148
    static ::Fusion::Sockets::NetConfig get_Defaults();
  }; // Fusion.Sockets.NetConfig
  #pragma pack(pop)
  static check_size<sizeof(NetConfig), 128 + sizeof(::Fusion::Sockets::NetConfigSimulation)> __Fusion_Sockets_NetConfigSizeCheck;
  static_assert(sizeof(NetConfig) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetConfig::get_ConnectionsPerGroup
// Il2CppName: get_ConnectionsPerGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetConfig::*)()>(&Fusion::Sockets::NetConfig::get_ConnectionsPerGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConfig), "get_ConnectionsPerGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetConfig::get_Defaults
// Il2CppName: get_Defaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConfig (*)()>(&Fusion::Sockets::NetConfig::get_Defaults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetConfig), "get_Defaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
