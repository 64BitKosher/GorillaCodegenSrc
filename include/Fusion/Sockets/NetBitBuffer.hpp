// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.INetBitWriteStream
#include "Fusion/Sockets/INetBitWriteStream.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt64
#include "System/UInt64.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBufferBlock
  struct NetBitBufferBlock;
  // Forward declaring type: NetPacketType
  struct NetPacketType;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Completed forward declares
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetBitBuffer, "Fusion.Sockets", "NetBitBuffer");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x64
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetBitBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetBitBuffer/*, public ::System::ValueType, public ::Fusion::Sockets::INetBitWriteStream, public ::Fusion::ILogBuilder*/ {
    public:
    public:
    // public Fusion.Sockets.NetAddress Address
    // Size: 0x18
    // Offset: 0x0
    ::Fusion::Sockets::NetAddress Address;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // System.Int32 Mtu
    // Size: 0x4
    // Offset: 0x18
    int Mtu;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Mtu and: Prev
    char __padding1[0x4] = {};
    // Fusion.Sockets.NetBitBuffer* Prev
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Sockets::NetBitBuffer* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
    // Fusion.Sockets.NetBitBuffer* Next
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::Sockets::NetBitBuffer* Next;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
    // Fusion.Sockets.NetBitBufferBlock* _block
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Sockets::NetBitBufferBlock* block;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBufferBlock*) == 0x8);
    // Fusion.Sockets.NetBitBuffer* _allocNext
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::Sockets::NetBitBuffer* allocNext;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
    // private System.Int32 _group
    // Size: 0x4
    // Offset: 0x40
    int group;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: group and: data
    char __padding6[0x4] = {};
    // private System.UInt64* _data
    // Size: 0x8
    // Offset: 0x48
    uint64_t* data;
    // Field size check
    static_assert(sizeof(uint64_t*) == 0x8);
    // private System.UInt64* _dataBlockOriginal
    // Size: 0x8
    // Offset: 0x50
    uint64_t* dataBlockOriginal;
    // Field size check
    static_assert(sizeof(uint64_t*) == 0x8);
    // private System.Int32 _offsetBits
    // Size: 0x4
    // Offset: 0x58
    int offsetBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lengthBits
    // Size: 0x4
    // Offset: 0x5C
    int lengthBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lengthBytes
    // Size: 0x4
    // Offset: 0x60
    int lengthBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetBitBuffer
    constexpr NetBitBuffer(::Fusion::Sockets::NetAddress Address_ = {}, int Mtu_ = {}, ::Fusion::Sockets::NetBitBuffer* Prev_ = {}, ::Fusion::Sockets::NetBitBuffer* Next_ = {}, ::Fusion::Sockets::NetBitBufferBlock* block_ = {}, ::Fusion::Sockets::NetBitBuffer* allocNext_ = {}, int group_ = {}, uint64_t* data_ = {}, uint64_t* dataBlockOriginal_ = {}, int offsetBits_ = {}, int lengthBits_ = {}, int lengthBytes_ = {}) noexcept : Address{Address_}, Mtu{Mtu_}, Prev{Prev_}, Next{Next_}, block{block_}, allocNext{allocNext_}, group{group_}, data{data_}, dataBlockOriginal{dataBlockOriginal_}, offsetBits{offsetBits_}, lengthBits{lengthBits_}, lengthBytes{lengthBytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::Sockets::INetBitWriteStream
    operator ::Fusion::Sockets::INetBitWriteStream() noexcept {
      return *reinterpret_cast<::Fusion::Sockets::INetBitWriteStream*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // static field const value: static private System.Int32 BITCOUNT
    static constexpr const int BITCOUNT = 64;
    // Get static field: static private System.Int32 BITCOUNT
    static int _get_BITCOUNT();
    // Set static field: static private System.Int32 BITCOUNT
    static void _set_BITCOUNT(int value);
    // static field const value: static private System.Int32 USEDMASK
    static constexpr const int USEDMASK = 63;
    // Get static field: static private System.Int32 USEDMASK
    static int _get_USEDMASK();
    // Set static field: static private System.Int32 USEDMASK
    static void _set_USEDMASK(int value);
    // static field const value: static private System.Int32 INDEXSHIFT
    static constexpr const int INDEXSHIFT = 6;
    // Get static field: static private System.Int32 INDEXSHIFT
    static int _get_INDEXSHIFT();
    // Set static field: static private System.Int32 INDEXSHIFT
    static void _set_INDEXSHIFT(int value);
    // static field const value: static private System.Int32 BYTESHIFT
    static constexpr const int BYTESHIFT = 3;
    // Get static field: static private System.Int32 BYTESHIFT
    static int _get_BYTESHIFT();
    // Set static field: static private System.Int32 BYTESHIFT
    static void _set_BYTESHIFT(int value);
    // static field const value: static private System.UInt64 MAXVALUE
    static constexpr const uint64_t MAXVALUE = 18446744073709551615u;
    // Get static field: static private System.UInt64 MAXVALUE
    static uint64_t _get_MAXVALUE();
    // Set static field: static private System.UInt64 MAXVALUE
    static void _set_MAXVALUE(uint64_t value);
    // Get instance field reference: public Fusion.Sockets.NetAddress Address
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_Address();
    // Get instance field reference: System.Int32 Mtu
    [[deprecated("Use field access instead!")]] int& dyn_Mtu();
    // Get instance field reference: Fusion.Sockets.NetBitBuffer* Prev
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn_Prev();
    // Get instance field reference: Fusion.Sockets.NetBitBuffer* Next
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn_Next();
    // Get instance field reference: Fusion.Sockets.NetBitBufferBlock* _block
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBufferBlock*& dyn__block();
    // Get instance field reference: Fusion.Sockets.NetBitBuffer* _allocNext
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn__allocNext();
    // Get instance field reference: private System.Int32 _group
    [[deprecated("Use field access instead!")]] int& dyn__group();
    // Get instance field reference: private System.UInt64* _data
    [[deprecated("Use field access instead!")]] uint64_t*& dyn__data();
    // Get instance field reference: private System.UInt64* _dataBlockOriginal
    [[deprecated("Use field access instead!")]] uint64_t*& dyn__dataBlockOriginal();
    // Get instance field reference: private System.Int32 _offsetBits
    [[deprecated("Use field access instead!")]] int& dyn__offsetBits();
    // Get instance field reference: private System.Int32 _lengthBits
    [[deprecated("Use field access instead!")]] int& dyn__lengthBits();
    // Get instance field reference: private System.Int32 _lengthBytes
    [[deprecated("Use field access instead!")]] int& dyn__lengthBytes();
    // System.Int16 get_Group()
    // Offset: 0x2B8F6EC
    int16_t get_Group();
    // System.Void set_Group(System.Int16 value)
    // Offset: 0x2B8F6F8
    void set_Group(int16_t value);
    // public System.UInt64* get_Data()
    // Offset: 0x2B8F708
    uint64_t* get_Data();
    // System.Void set_Data(System.UInt64* value)
    // Offset: 0x2B8F710
    void set_Data(uint64_t* value);
    // public System.Int32 get_LengthBits()
    // Offset: 0x2B8F718
    int get_LengthBits();
    // public System.Int32 get_BytesRemaining()
    // Offset: 0x2B8F720
    int get_BytesRemaining();
    // public System.Int32 get_LengthBytes()
    // Offset: 0x2B8F788
    int get_LengthBytes();
    // System.Void set_LengthBytes(System.Int32 value)
    // Offset: 0x2B8F790
    void set_LengthBytes(int value);
    // public System.Int32 get_OffsetBits()
    // Offset: 0x2B8F79C
    int get_OffsetBits();
    // System.Void set_OffsetBits(System.Int32 value)
    // Offset: 0x2B8F7A4
    void set_OffsetBits(int value);
    // System.Boolean get_OverflowOrLessThanOneByteRemaining()
    // Offset: 0x2B8F7AC
    bool get_OverflowOrLessThanOneByteRemaining();
    // public System.Boolean get_DoneOrOverflow()
    // Offset: 0x2B8F7C0
    bool get_DoneOrOverflow();
    // Fusion.Sockets.NetPacketType get_PacketType()
    // Offset: 0x2B8F7D0
    ::Fusion::Sockets::NetPacketType get_PacketType();
    // System.Void set_PacketType(Fusion.Sockets.NetPacketType value)
    // Offset: 0x2B8F7DC
    void set_PacketType(::Fusion::Sockets::NetPacketType value);
    // public System.Void ReplaceDataFromBlockWithTemp(System.Int32 tempSize)
    // Offset: 0x2B8F7E8
    void ReplaceDataFromBlockWithTemp(int tempSize);
    // static public Fusion.Sockets.NetBitBuffer* Allocate(System.Int32 group, System.Int32 size)
    // Offset: 0x2B8F8C4
    static ::Fusion::Sockets::NetBitBuffer* Allocate(int group, int size);
    // static public System.Void Release(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B8F984
    static void Release(::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void SetBufferLengthBytes(System.UInt64* buffer, System.Int32 lenghtInBytes)
    // Offset: 0x2B8F974
    void SetBufferLengthBytes(uint64_t* buffer, int lenghtInBytes);
    // public System.Boolean WriteBoolean(System.Boolean value)
    // Offset: 0x2B8FA28
    bool WriteBoolean(bool value);
    // public System.Boolean ReadBoolean()
    // Offset: 0x2B8FAE0
    bool ReadBoolean();
    // public System.Void WriteByte(System.Byte value, System.Int32 bits)
    // Offset: 0x2B8FB90
    void WriteByte(uint8_t value, int bits);
    // public System.Void WriteInt32(System.Int32 value, System.Int32 bits)
    // Offset: 0x2B8FB98
    void WriteInt32(int value, int bits);
    // public System.Int32 ReadInt32(System.Int32 bits)
    // Offset: 0x2B8FBA0
    int ReadInt32(int bits);
    // public System.Void WriteUInt32(System.UInt32 value, System.Int32 bits)
    // Offset: 0x2B8FBB0
    void WriteUInt32(uint value, int bits);
    // public System.Boolean CanRead(System.Int32 bits)
    // Offset: 0x2B8FBB8
    bool CanRead(int bits);
    // public System.Int32 get_OffsetBytes()
    // Offset: 0x2B8FBCC
    int get_OffsetBytes();
    // public System.Void PadToByteBoundary()
    // Offset: 0x2B8FBE4
    void PadToByteBoundary();
    // public System.Byte* GetDataPointer()
    // Offset: 0x2B8FC14
    uint8_t* GetDataPointer();
    // public System.Byte* PadToByteBoundaryAndGetPtr()
    // Offset: 0x2B8FC34
    uint8_t* PadToByteBoundaryAndGetPtr();
    // public System.Boolean CheckBitCount(System.Int32 count)
    // Offset: 0x2B8FC90
    bool CheckBitCount(int count);
    // public System.Void SeekToByteBoundary()
    // Offset: 0x2B8FCB0
    void SeekToByteBoundary();
    // public System.Void WriteBytesAligned(System.Void* buffer, System.Int32 length)
    // Offset: 0x2B8FCC4
    void WriteBytesAligned(void* buffer, int length);
    // public System.Void ReadBytesAligned(System.Void* buffer, System.Int32 length)
    // Offset: 0x2B8FD78
    void ReadBytesAligned(void* buffer, int length);
    // public System.Void WriteInt64VarLength(System.Int64 value, System.Int32 blockSize)
    // Offset: 0x2B8FDDC
    void WriteInt64VarLength(int64_t value, int blockSize);
    // public System.Void WriteInt32VarLength(System.Int32 value)
    // Offset: 0x2B8FF1C
    void WriteInt32VarLength(int value);
    // public System.Void WriteInt32VarLength(System.Int32 value, System.Int32 blockSize)
    // Offset: 0x2B8FF80
    void WriteInt32VarLength(int value, int blockSize);
    // public System.Int32 ReadInt32VarLength()
    // Offset: 0x2B900A8
    int ReadInt32VarLength();
    // public System.Int64 ReadInt64VarLength(System.Int32 blockSize)
    // Offset: 0x2B90124
    int64_t ReadInt64VarLength(int blockSize);
    // public System.Int32 ReadInt32VarLength(System.Int32 blockSize)
    // Offset: 0x2B90204
    int ReadInt32VarLength(int blockSize);
    // public System.UInt32 ReadUInt32VarLength(System.Int32 blockSize)
    // Offset: 0x2B90208
    uint ReadUInt32VarLength(int blockSize);
    // public System.UInt64 ReadUInt64VarLength(System.Int32 blockSize)
    // Offset: 0x2B90128
    uint64_t ReadUInt64VarLength(int blockSize);
    // public System.Void WriteUInt32VarLength(System.UInt32 value, System.Int32 blockSize)
    // Offset: 0x2B8FF84
    void WriteUInt32VarLength(uint value, int blockSize);
    // public System.Void WriteUInt64VarLength(System.UInt64 value, System.Int32 blockSize)
    // Offset: 0x2B8FDE0
    void WriteUInt64VarLength(uint64_t value, int blockSize);
    // public System.Void WriteUInt32VarLength(System.UInt32 value)
    // Offset: 0x2B8FF20
    void WriteUInt32VarLength(uint value);
    // public System.UInt32 ReadUInt32VarLength()
    // Offset: 0x2B900AC
    uint ReadUInt32VarLength();
    // public System.UInt32 ReadUInt32(System.Int32 bits)
    // Offset: 0x2B90434
    uint ReadUInt32(int bits);
    // public System.Void WriteUInt64(System.UInt64 value, System.Int32 bits)
    // Offset: 0x2B90444
    void WriteUInt64(uint64_t value, int bits);
    // public System.UInt64 ReadUInt64(System.Int32 bits)
    // Offset: 0x2B90448
    uint64_t ReadUInt64(int bits);
    // public System.Void WriteSingle(System.Single value)
    // Offset: 0x2B9044C
    void WriteSingle(float value);
    // public System.Single ReadSingle()
    // Offset: 0x2B90458
    float ReadSingle();
    // public System.Void WriteDouble(System.Double value)
    // Offset: 0x2B90470
    void WriteDouble(double value);
    // public System.Double ReadDouble()
    // Offset: 0x2B9047C
    double ReadDouble();
    // public System.Void WriteInt32AtOffset(System.Int32 value, System.Int32 offset, System.Int32 bits)
    // Offset: 0x2B90494
    void WriteInt32AtOffset(int value, int offset, int bits);
    // public System.Void Write(System.UInt64 value, System.Int32 bits)
    // Offset: 0x2B8FA48
    void Write(uint64_t value, int bits);
    // public System.Void WriteSlow(System.UInt64 value, System.Int32 bits)
    // Offset: 0x2B90518
    void WriteSlow(uint64_t value, int bits);
    // private System.UInt64 Read(System.Int32 bits)
    // Offset: 0x2B8FAFC
    uint64_t Read(int bits);
    // private System.UInt64 Peek(System.Int32 bits)
    // Offset: 0x2B902DC
    uint64_t Peek(int bits);
    // private System.Int32 Advance(System.Int32 bits, System.Boolean writing)
    // Offset: 0x2B905E4
    int Advance(int bits, bool writing);
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B906E8
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
  }; // Fusion.Sockets.NetBitBuffer
  #pragma pack(pop)
  static check_size<sizeof(NetBitBuffer), 96 + sizeof(int)> __Fusion_Sockets_NetBitBufferSizeCheck;
  static_assert(sizeof(NetBitBuffer) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_Group
// Il2CppName: get_Group
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_Group)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_Group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::set_Group
// Il2CppName: set_Group
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int16_t)>(&Fusion::Sockets::NetBitBuffer::set_Group)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "set_Group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t* (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::set_Data
// Il2CppName: set_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t*)>(&Fusion::Sockets::NetBitBuffer::set_Data)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "set_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_LengthBits
// Il2CppName: get_LengthBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_LengthBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_LengthBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_BytesRemaining
// Il2CppName: get_BytesRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_BytesRemaining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_BytesRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_LengthBytes
// Il2CppName: get_LengthBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_LengthBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_LengthBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::set_LengthBytes
// Il2CppName: set_LengthBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::set_LengthBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "set_LengthBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_OffsetBits
// Il2CppName: get_OffsetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_OffsetBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_OffsetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::set_OffsetBits
// Il2CppName: set_OffsetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::set_OffsetBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "set_OffsetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_OverflowOrLessThanOneByteRemaining
// Il2CppName: get_OverflowOrLessThanOneByteRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_OverflowOrLessThanOneByteRemaining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_OverflowOrLessThanOneByteRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_DoneOrOverflow
// Il2CppName: get_DoneOrOverflow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_DoneOrOverflow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_DoneOrOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_PacketType
// Il2CppName: get_PacketType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetPacketType (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_PacketType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_PacketType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::set_PacketType
// Il2CppName: set_PacketType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(::Fusion::Sockets::NetPacketType)>(&Fusion::Sockets::NetBitBuffer::set_PacketType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPacketType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "set_PacketType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReplaceDataFromBlockWithTemp
// Il2CppName: ReplaceDataFromBlockWithTemp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReplaceDataFromBlockWithTemp)> {
  static const MethodInfo* get() {
    static auto* tempSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReplaceDataFromBlockWithTemp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tempSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetBitBuffer* (*)(int, int)>(&Fusion::Sockets::NetBitBuffer::Allocate)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, size});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Sockets::NetBitBuffer::Release)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::SetBufferLengthBytes
// Il2CppName: SetBufferLengthBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t*, int)>(&Fusion::Sockets::NetBitBuffer::SetBufferLengthBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* lenghtInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "SetBufferLengthBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, lenghtInBytes});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteBoolean
// Il2CppName: WriteBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)(bool)>(&Fusion::Sockets::NetBitBuffer::WriteBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadBoolean
// Il2CppName: ReadBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::ReadBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteByte
// Il2CppName: WriteByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint8_t, int)>(&Fusion::Sockets::NetBitBuffer::WriteByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteInt32
// Il2CppName: WriteInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int, int)>(&Fusion::Sockets::NetBitBuffer::WriteInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadInt32
// Il2CppName: ReadInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadInt32)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteUInt32
// Il2CppName: WriteUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint, int)>(&Fusion::Sockets::NetBitBuffer::WriteUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::CanRead
// Il2CppName: CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::CanRead)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::get_OffsetBytes
// Il2CppName: get_OffsetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::get_OffsetBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "get_OffsetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::PadToByteBoundary
// Il2CppName: PadToByteBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::PadToByteBoundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "PadToByteBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::GetDataPointer
// Il2CppName: GetDataPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::GetDataPointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "GetDataPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::PadToByteBoundaryAndGetPtr
// Il2CppName: PadToByteBoundaryAndGetPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::PadToByteBoundaryAndGetPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "PadToByteBoundaryAndGetPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::CheckBitCount
// Il2CppName: CheckBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::CheckBitCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "CheckBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::SeekToByteBoundary
// Il2CppName: SeekToByteBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::SeekToByteBoundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "SeekToByteBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteBytesAligned
// Il2CppName: WriteBytesAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(void*, int)>(&Fusion::Sockets::NetBitBuffer::WriteBytesAligned)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteBytesAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadBytesAligned
// Il2CppName: ReadBytesAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(void*, int)>(&Fusion::Sockets::NetBitBuffer::ReadBytesAligned)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadBytesAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteInt64VarLength
// Il2CppName: WriteInt64VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int64_t, int)>(&Fusion::Sockets::NetBitBuffer::WriteInt64VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteInt64VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteInt32VarLength
// Il2CppName: WriteInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::WriteInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteInt32VarLength
// Il2CppName: WriteInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int, int)>(&Fusion::Sockets::NetBitBuffer::WriteInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadInt32VarLength
// Il2CppName: ReadInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::ReadInt32VarLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadInt64VarLength
// Il2CppName: ReadInt64VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadInt64VarLength)> {
  static const MethodInfo* get() {
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadInt64VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadInt32VarLength
// Il2CppName: ReadInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadUInt32VarLength
// Il2CppName: ReadUInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadUInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadUInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadUInt64VarLength
// Il2CppName: ReadUInt64VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadUInt64VarLength)> {
  static const MethodInfo* get() {
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadUInt64VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteUInt32VarLength
// Il2CppName: WriteUInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint, int)>(&Fusion::Sockets::NetBitBuffer::WriteUInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteUInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteUInt64VarLength
// Il2CppName: WriteUInt64VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t, int)>(&Fusion::Sockets::NetBitBuffer::WriteUInt64VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* blockSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteUInt64VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, blockSize});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteUInt32VarLength
// Il2CppName: WriteUInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint)>(&Fusion::Sockets::NetBitBuffer::WriteUInt32VarLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteUInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadUInt32VarLength
// Il2CppName: ReadUInt32VarLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::ReadUInt32VarLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadUInt32VarLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadUInt32
// Il2CppName: ReadUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadUInt32)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteUInt64
// Il2CppName: WriteUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t, int)>(&Fusion::Sockets::NetBitBuffer::WriteUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadUInt64
// Il2CppName: ReadUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::ReadUInt64)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteSingle
// Il2CppName: WriteSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(float)>(&Fusion::Sockets::NetBitBuffer::WriteSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadSingle
// Il2CppName: ReadSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::ReadSingle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteDouble
// Il2CppName: WriteDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(double)>(&Fusion::Sockets::NetBitBuffer::WriteDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::ReadDouble
// Il2CppName: ReadDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Sockets::NetBitBuffer::*)()>(&Fusion::Sockets::NetBitBuffer::ReadDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "ReadDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteInt32AtOffset
// Il2CppName: WriteInt32AtOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(int, int, int)>(&Fusion::Sockets::NetBitBuffer::WriteInt32AtOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteInt32AtOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, offset, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t, int)>(&Fusion::Sockets::NetBitBuffer::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::WriteSlow
// Il2CppName: WriteSlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(uint64_t, int)>(&Fusion::Sockets::NetBitBuffer::WriteSlow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "WriteSlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::Read)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetBitBuffer::*)(int)>(&Fusion::Sockets::NetBitBuffer::Peek)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetBitBuffer::*)(int, bool)>(&Fusion::Sockets::NetBitBuffer::Advance)> {
  static const MethodInfo* get() {
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* writing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits, writing});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetBitBuffer::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetBitBuffer::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::Sockets::NetBitBuffer::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetBitBuffer), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
