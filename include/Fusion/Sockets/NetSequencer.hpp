// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetSequencer
  struct NetSequencer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetSequencer, "Fusion.Sockets", "NetSequencer");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetSequencer
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetSequencer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _shift
    // Size: 0x4
    // Offset: 0x0
    int shift;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bytes
    // Size: 0x4
    // Offset: 0x4
    int bytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt64 _mask
    // Size: 0x8
    // Offset: 0x8
    uint64_t mask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 _sequence
    // Size: 0x8
    // Offset: 0x10
    uint64_t sequence;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: NetSequencer
    constexpr NetSequencer(int shift_ = {}, int bytes_ = {}, uint64_t mask_ = {}, uint64_t sequence_ = {}) noexcept : shift{shift_}, bytes{bytes_}, mask{mask_}, sequence{sequence_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 _shift
    [[deprecated("Use field access instead!")]] int& dyn__shift();
    // Get instance field reference: private System.Int32 _bytes
    [[deprecated("Use field access instead!")]] int& dyn__bytes();
    // Get instance field reference: private System.UInt64 _mask
    [[deprecated("Use field access instead!")]] uint64_t& dyn__mask();
    // Get instance field reference: private System.UInt64 _sequence
    [[deprecated("Use field access instead!")]] uint64_t& dyn__sequence();
    // public System.Int32 get_Bits()
    // Offset: 0x2B97CE4
    int get_Bits();
    // public System.Void Reset()
    // Offset: 0x2B91728
    void Reset();
    // public System.Void .ctor(System.Int32 bytes)
    // Offset: 0x2B9149C
    NetSequencer(int bytes);
    // public System.UInt64 Next()
    // Offset: 0x2B912DC
    uint64_t Next();
    // public System.UInt64 NextAfter(System.UInt64 sequence)
    // Offset: 0x2B97CF0
    uint64_t NextAfter(uint64_t sequence);
    // public System.Int32 Distance(System.UInt64 from, System.UInt64 to)
    // Offset: 0x2B97314
    int Distance(uint64_t from, uint64_t to);
  }; // Fusion.Sockets.NetSequencer
  #pragma pack(pop)
  static check_size<sizeof(NetSequencer), 16 + sizeof(uint64_t)> __Fusion_Sockets_NetSequencerSizeCheck;
  static_assert(sizeof(NetSequencer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::get_Bits
// Il2CppName: get_Bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetSequencer::*)()>(&Fusion::Sockets::NetSequencer::get_Bits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSequencer), "get_Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::NetSequencer::*)()>(&Fusion::Sockets::NetSequencer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSequencer), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::NetSequencer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetSequencer::*)()>(&Fusion::Sockets::NetSequencer::Next)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSequencer), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::NextAfter
// Il2CppName: NextAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Fusion::Sockets::NetSequencer::*)(uint64_t)>(&Fusion::Sockets::NetSequencer::NextAfter)> {
  static const MethodInfo* get() {
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSequencer), "NextAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequence});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::NetSequencer::Distance
// Il2CppName: Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::NetSequencer::*)(uint64_t, uint64_t)>(&Fusion::Sockets::NetSequencer::Distance)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetSequencer), "Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
