// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.Stun.NATType
#include "Fusion/Sockets/Stun/NATType.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Forward declaring type: StunResult
  class StunResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::Stun::StunResult);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::Stun::StunResult*, "Fusion.Sockets.Stun", "StunResult");
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.Stun.StunResult
  // [TokenAttribute] Offset: FFFFFFFF
  class StunResult : public ::Il2CppObject {
    public:
    public:
    // public Fusion.Sockets.Stun.NATType NatType
    // Size: 0x1
    // Offset: 0x10
    ::Fusion::Sockets::Stun::NATType NatType;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::Stun::NATType) == 0x1);
    // Padding between fields: NatType and: PublicEndPoint
    char __padding0[0x7] = {};
    // private Fusion.Sockets.NetAddress <PublicEndPoint>k__BackingField
    // Size: 0x18
    // Offset: 0x18
    ::Fusion::Sockets::NetAddress PublicEndPoint;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // private Fusion.Sockets.NetAddress <PrivateEndPoint>k__BackingField
    // Size: 0x18
    // Offset: 0x30
    ::Fusion::Sockets::NetAddress PrivateEndPoint;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    public:
    // Get static field: static public readonly Fusion.Sockets.Stun.StunResult Invalid
    static ::Fusion::Sockets::Stun::StunResult* _get_Invalid();
    // Set static field: static public readonly Fusion.Sockets.Stun.StunResult Invalid
    static void _set_Invalid(::Fusion::Sockets::Stun::StunResult* value);
    // Get instance field reference: public Fusion.Sockets.Stun.NATType NatType
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::Stun::NATType& dyn_NatType();
    // Get instance field reference: private Fusion.Sockets.NetAddress <PublicEndPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_$PublicEndPoint$k__BackingField();
    // Get instance field reference: private Fusion.Sockets.NetAddress <PrivateEndPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_$PrivateEndPoint$k__BackingField();
    // public System.Boolean get_IsValid()
    // Offset: 0x2B9B12C
    bool get_IsValid();
    // public Fusion.Sockets.NetAddress get_PublicEndPoint()
    // Offset: 0x2B9B1AC
    ::Fusion::Sockets::NetAddress get_PublicEndPoint();
    // private System.Void set_PublicEndPoint(Fusion.Sockets.NetAddress value)
    // Offset: 0x2B9B1C0
    void set_PublicEndPoint(::Fusion::Sockets::NetAddress value);
    // public Fusion.Sockets.NetAddress get_PrivateEndPoint()
    // Offset: 0x2B9B1D4
    ::Fusion::Sockets::NetAddress get_PrivateEndPoint();
    // private System.Void set_PrivateEndPoint(Fusion.Sockets.NetAddress value)
    // Offset: 0x2B9B1E8
    void set_PrivateEndPoint(::Fusion::Sockets::NetAddress value);
    // public System.Void .ctor(Fusion.Sockets.NetAddress publicEndPoint, Fusion.Sockets.NetAddress privateEndPoint)
    // Offset: 0x2B9B1FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StunResult* New_ctor(::Fusion::Sockets::NetAddress publicEndPoint, ::Fusion::Sockets::NetAddress privateEndPoint) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Sockets::Stun::StunResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StunResult*, creationType>(publicEndPoint, privateEndPoint)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2B9B560
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x2B9B244
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.Sockets.Stun.StunResult
  #pragma pack(pop)
  static check_size<sizeof(StunResult), 48 + sizeof(::Fusion::Sockets::NetAddress)> __Fusion_Sockets_Stun_StunResultSizeCheck;
  static_assert(sizeof(StunResult) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::Stun::StunResult::*)()>(&Fusion::Sockets::Stun::StunResult::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::get_PublicEndPoint
// Il2CppName: get_PublicEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Sockets::Stun::StunResult::*)()>(&Fusion::Sockets::Stun::StunResult::get_PublicEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "get_PublicEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::set_PublicEndPoint
// Il2CppName: set_PublicEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::Stun::StunResult::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::Stun::StunResult::set_PublicEndPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "set_PublicEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::get_PrivateEndPoint
// Il2CppName: get_PrivateEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Sockets::Stun::StunResult::*)()>(&Fusion::Sockets::Stun::StunResult::get_PrivateEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "get_PrivateEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::set_PrivateEndPoint
// Il2CppName: set_PrivateEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Sockets::Stun::StunResult::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Sockets::Stun::StunResult::set_PrivateEndPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "set_PrivateEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Sockets::Stun::StunResult::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunResult::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Sockets::Stun::StunResult::*)()>(&Fusion::Sockets::Stun::StunResult::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunResult*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
