// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Forward declaring type: StunErrorAttribute
  class StunErrorAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::Stun::StunErrorAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::Stun::StunErrorAttribute*, "Fusion.Sockets.Stun", "StunErrorAttribute");
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.Stun.StunErrorAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class StunErrorAttribute : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <Code>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Code;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Code and: ReasonText
    char __padding0[0x4] = {};
    // private System.String <ReasonText>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW ReasonText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <Code>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Code$k__BackingField();
    // Get instance field reference: private System.String <ReasonText>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ReasonText$k__BackingField();
    // public System.Int32 get_Code()
    // Offset: 0x2B99F7C
    int get_Code();
    // public System.String get_ReasonText()
    // Offset: 0x2B99F84
    ::StringW get_ReasonText();
  }; // Fusion.Sockets.Stun.StunErrorAttribute
  #pragma pack(pop)
  static check_size<sizeof(StunErrorAttribute), 24 + sizeof(::StringW)> __Fusion_Sockets_Stun_StunErrorAttributeSizeCheck;
  static_assert(sizeof(StunErrorAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunErrorAttribute::get_Code
// Il2CppName: get_Code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Sockets::Stun::StunErrorAttribute::*)()>(&Fusion::Sockets::Stun::StunErrorAttribute::get_Code)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunErrorAttribute*), "get_Code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunErrorAttribute::get_ReasonText
// Il2CppName: get_ReasonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Sockets::Stun::StunErrorAttribute::*)()>(&Fusion::Sockets::Stun::StunErrorAttribute::get_ReasonText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunErrorAttribute*), "get_ReasonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
