// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets::Stun
namespace Fusion::Sockets::Stun {
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetPeer
  struct NetPeer;
  // Forward declaring type: INetSocket
  class INetSocket;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: AddressFamily
  struct AddressFamily;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Forward declaring type: StunClient
  class StunClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::Stun::StunClient);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::Stun::StunClient*, "Fusion.Sockets.Stun", "StunClient");
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.Stun.StunClient
  // [TokenAttribute] Offset: FFFFFFFF
  class StunClient : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::Sockets::Stun::StunClient::TestIPs
    class TestIPs;
    // Get static field: static public System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Collections.Concurrent.ConcurrentDictionary`2<System.Int32,Fusion.Sockets.NetAddress>> PendingRequests
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, ::System::Collections::Concurrent::ConcurrentDictionary_2<int, ::Fusion::Sockets::NetAddress>*>* _get_PendingRequests();
    // Set static field: static public System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Collections.Concurrent.ConcurrentDictionary`2<System.Int32,Fusion.Sockets.NetAddress>> PendingRequests
    static void _set_PendingRequests(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, ::System::Collections::Concurrent::ConcurrentDictionary_2<int, ::Fusion::Sockets::NetAddress>*>* value);
    // static public System.Boolean TryParse(Fusion.Sockets.NetAddress* origin, System.Byte* buffer, System.Int32 bufferLength)
    // Offset: 0x2B98758
    static bool TryParse(::Fusion::Sockets::NetAddress* origin, uint8_t* buffer, int bufferLength);
    // static public System.Boolean QueryLocalAddress(Fusion.Sockets.NetPeer* peer, Fusion.Sockets.INetSocket socket, out System.Net.Sockets.AddressFamily addressFamily, out Fusion.Sockets.NetAddress localAddress)
    // Offset: 0x2B98EFC
    static bool QueryLocalAddress(::Fusion::Sockets::NetPeer* peer, ::Fusion::Sockets::INetSocket* socket, ByRef<::System::Net::Sockets::AddressFamily> addressFamily, ByRef<::Fusion::Sockets::NetAddress> localAddress);
    // static public System.Boolean QueryPublicAddress(Fusion.Sockets.NetPeer* peer, Fusion.Sockets.INetSocket socket, System.Net.Sockets.AddressFamily originalFamily, ref System.Guid requestID)
    // Offset: 0x2B99420
    static bool QueryPublicAddress(::Fusion::Sockets::NetPeer* peer, ::Fusion::Sockets::INetSocket* socket, ::System::Net::Sockets::AddressFamily originalFamily, ByRef<::System::Guid> requestID);
    // static private System.Boolean GetLocalAddress(ref System.Net.Sockets.AddressFamily addressFamily, out System.Net.IPAddress localIP)
    // Offset: 0x2B990C4
    static bool GetLocalAddress(ByRef<::System::Net::Sockets::AddressFamily> addressFamily, ByRef<::System::Net::IPAddress*> localIP);
    // static private System.Void .cctor()
    // Offset: 0x2B99DB4
    static void _cctor();
  }; // Fusion.Sockets.Stun.StunClient
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunClient::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetAddress*, uint8_t*, int)>(&Fusion::Sockets::Stun::StunClient::TryParse)> {
  static const MethodInfo* get() {
    static auto* origin = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunClient*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, buffer, bufferLength});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunClient::QueryLocalAddress
// Il2CppName: QueryLocalAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeer*, ::Fusion::Sockets::INetSocket*, ByRef<::System::Net::Sockets::AddressFamily>, ByRef<::Fusion::Sockets::NetAddress>)>(&Fusion::Sockets::Stun::StunClient::QueryLocalAddress)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeer"))->byval_arg;
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetSocket")->byval_arg;
    static auto* addressFamily = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "AddressFamily")->this_arg;
    static auto* localAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunClient*), "QueryLocalAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, socket, addressFamily, localAddress});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunClient::QueryPublicAddress
// Il2CppName: QueryPublicAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetPeer*, ::Fusion::Sockets::INetSocket*, ::System::Net::Sockets::AddressFamily, ByRef<::System::Guid>)>(&Fusion::Sockets::Stun::StunClient::QueryPublicAddress)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetPeer"))->byval_arg;
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetSocket")->byval_arg;
    static auto* originalFamily = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "AddressFamily")->byval_arg;
    static auto* requestID = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunClient*), "QueryPublicAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, socket, originalFamily, requestID});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunClient::GetLocalAddress
// Il2CppName: GetLocalAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Net::Sockets::AddressFamily>, ByRef<::System::Net::IPAddress*>)>(&Fusion::Sockets::Stun::StunClient::GetLocalAddress)> {
  static const MethodInfo* get() {
    static auto* addressFamily = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "AddressFamily")->this_arg;
    static auto* localIP = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunClient*), "GetLocalAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addressFamily, localIP});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunClient::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Sockets::Stun::StunClient::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunClient*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
