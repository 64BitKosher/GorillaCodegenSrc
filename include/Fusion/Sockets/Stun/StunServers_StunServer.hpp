// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Sockets.Stun.StunServers
#include "Fusion/Sockets/Stun/StunServers.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Sockets::Stun::StunServers::StunServer);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::Stun::StunServers::StunServer*, "Fusion.Sockets.Stun", "StunServers/StunServer");
// Type namespace: Fusion.Sockets.Stun
namespace Fusion::Sockets::Stun {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Sockets.Stun.StunServers/StunServer
  // [TokenAttribute] Offset: FFFFFFFF
  class StunServers::StunServer : public ::Il2CppObject {
    public:
    public:
    // public Fusion.Sockets.NetAddress IPv4Addr
    // Size: 0x18
    // Offset: 0x10
    ::Fusion::Sockets::NetAddress IPv4Addr;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public Fusion.Sockets.NetAddress IPv6Addr
    // Size: 0x18
    // Offset: 0x28
    ::Fusion::Sockets::NetAddress IPv6Addr;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    public:
    // Get instance field reference: public Fusion.Sockets.NetAddress IPv4Addr
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_IPv4Addr();
    // Get instance field reference: public Fusion.Sockets.NetAddress IPv6Addr
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_IPv6Addr();
    // public System.Boolean get_HasIPv4Support()
    // Offset: 0x2B9B660
    bool get_HasIPv4Support();
    // public System.Boolean get_HasIPv6Support()
    // Offset: 0x2B9B668
    bool get_HasIPv6Support();
    // public System.Void .ctor()
    // Offset: 0x2B9BC6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StunServers::StunServer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Sockets::Stun::StunServers::StunServer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StunServers::StunServer*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x2B9BA00
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.Sockets.Stun.StunServers/StunServer
  #pragma pack(pop)
  static check_size<sizeof(StunServers::StunServer), 40 + sizeof(::Fusion::Sockets::NetAddress)> __Fusion_Sockets_Stun_StunServers_StunServerSizeCheck;
  static_assert(sizeof(StunServers::StunServer) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunServers::StunServer::get_HasIPv4Support
// Il2CppName: get_HasIPv4Support
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::Stun::StunServers::StunServer::*)()>(&Fusion::Sockets::Stun::StunServers::StunServer::get_HasIPv4Support)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunServers::StunServer*), "get_HasIPv4Support", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunServers::StunServer::get_HasIPv6Support
// Il2CppName: get_HasIPv6Support
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Sockets::Stun::StunServers::StunServer::*)()>(&Fusion::Sockets::Stun::StunServers::StunServer::get_HasIPv6Support)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunServers::StunServer*), "get_HasIPv6Support", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunServers::StunServer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Sockets::Stun::StunServers::StunServer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Sockets::Stun::StunServers::StunServer::*)()>(&Fusion::Sockets::Stun::StunServers::StunServer::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::Stun::StunServers::StunServer*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
