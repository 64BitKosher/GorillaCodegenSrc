// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Sockets.NetCommandHeader
#include "Fusion/Sockets/NetCommandHeader.hpp"
// Including type: Fusion.Sockets.NetConnectionId
#include "Fusion/Sockets/NetConnectionId.hpp"
// Completed includes
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetCommandAccepted
  struct NetCommandAccepted;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Sockets::NetCommandAccepted, "Fusion.Sockets", "NetCommandAccepted");
// Type namespace: Fusion.Sockets
namespace Fusion::Sockets {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Sockets.NetCommandAccepted
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetCommandAccepted/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Sockets.NetCommandHeader Header
    // Size: 0x2
    // Offset: 0x0
    ::Fusion::Sockets::NetCommandHeader Header;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetCommandHeader) == 0x2);
    // Padding between fields: Header and: AcceptedLocalId
    char __padding0[0x6] = {};
    // public Fusion.Sockets.NetConnectionId AcceptedLocalId
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::Sockets::NetConnectionId AcceptedLocalId;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionId) == 0x8);
    // public Fusion.Sockets.NetConnectionId AcceptedRemoteId
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Sockets::NetConnectionId AcceptedRemoteId;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionId) == 0x8);
    // public System.UInt32 Counter
    // Size: 0x4
    // Offset: 0x18
    uint Counter;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: NetCommandAccepted
    constexpr NetCommandAccepted(::Fusion::Sockets::NetCommandHeader Header_ = {}, ::Fusion::Sockets::NetConnectionId AcceptedLocalId_ = {}, ::Fusion::Sockets::NetConnectionId AcceptedRemoteId_ = {}, uint Counter_ = {}) noexcept : Header{Header_}, AcceptedLocalId{AcceptedLocalId_}, AcceptedRemoteId{AcceptedRemoteId_}, Counter{Counter_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Sockets.NetCommandHeader Header
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetCommandHeader& dyn_Header();
    // Get instance field reference: public Fusion.Sockets.NetConnectionId AcceptedLocalId
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionId& dyn_AcceptedLocalId();
    // Get instance field reference: public Fusion.Sockets.NetConnectionId AcceptedRemoteId
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionId& dyn_AcceptedRemoteId();
    // Get instance field reference: public System.UInt32 Counter
    [[deprecated("Use field access instead!")]] uint& dyn_Counter();
    // static public Fusion.Sockets.NetCommandAccepted Create(Fusion.Sockets.NetConnectionId localId, Fusion.Sockets.NetConnectionId remoteId, System.UInt32 counter)
    // Offset: 0x2B910F4
    static ::Fusion::Sockets::NetCommandAccepted Create(::Fusion::Sockets::NetConnectionId localId, ::Fusion::Sockets::NetConnectionId remoteId, uint counter);
  }; // Fusion.Sockets.NetCommandAccepted
  #pragma pack(pop)
  static check_size<sizeof(NetCommandAccepted), 24 + sizeof(uint)> __Fusion_Sockets_NetCommandAcceptedSizeCheck;
  static_assert(sizeof(NetCommandAccepted) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Sockets::NetCommandAccepted::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetCommandAccepted (*)(::Fusion::Sockets::NetConnectionId, ::Fusion::Sockets::NetConnectionId, uint)>(&Fusion::Sockets::NetCommandAccepted::Create)> {
  static const MethodInfo* get() {
    static auto* localId = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionId")->byval_arg;
    static auto* remoteId = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectionId")->byval_arg;
    static auto* counter = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Sockets::NetCommandAccepted), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localId, remoteId, counter});
  }
};
