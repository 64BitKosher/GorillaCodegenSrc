// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt16
#include "System/UInt16.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkId
  struct NetworkId;
  // Forward declaring type: Ptr
  struct Ptr;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectRefMapPtr
  struct NetworkObjectRefMapPtr;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObjectRefMapPtr, "Fusion", "NetworkObjectRefMapPtr");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkObjectRefMapPtr
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkObjectRefMapPtr/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::NetworkObjectRefMapPtr::Entry
    struct Entry;
    // Nested type: ::Fusion::NetworkObjectRefMapPtr::ObjectEntry
    struct ObjectEntry;
    // Nested type: ::Fusion::NetworkObjectRefMapPtr::Enumerable
    struct Enumerable;
    // Nested type: ::Fusion::NetworkObjectRefMapPtr::Enumerator
    struct Enumerator;
    public:
    // private System.Int32 BucketsOffset
    // Size: 0x4
    // Offset: 0x0
    int BucketsOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 EntriesOffset
    // Size: 0x4
    // Offset: 0x4
    int EntriesOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt16 Free
    // Size: 0x2
    // Offset: 0x8
    uint16_t Free;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: Free and: UsedCount
    char __padding2[0x2] = {};
    // private System.Int32 UsedCount
    // Size: 0x4
    // Offset: 0xC
    int UsedCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 FreeCount
    // Size: 0x4
    // Offset: 0x10
    int FreeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 Capacity
    // Size: 0x4
    // Offset: 0x14
    uint Capacity;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: NetworkObjectRefMapPtr
    constexpr NetworkObjectRefMapPtr(int BucketsOffset_ = {}, int EntriesOffset_ = {}, uint16_t Free_ = {}, int UsedCount_ = {}, int FreeCount_ = {}, uint Capacity_ = {}) noexcept : BucketsOffset{BucketsOffset_}, EntriesOffset{EntriesOffset_}, Free{Free_}, UsedCount{UsedCount_}, FreeCount{FreeCount_}, Capacity{Capacity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 24;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // static field const value: static private System.UInt16 INVALID_ENTRY
    static constexpr const uint16_t INVALID_ENTRY = 0u;
    // Get static field: static private System.UInt16 INVALID_ENTRY
    static uint16_t _get_INVALID_ENTRY();
    // Set static field: static private System.UInt16 INVALID_ENTRY
    static void _set_INVALID_ENTRY(uint16_t value);
    // static field const value: static private System.UInt16 ENTRY_START_INDEX
    static constexpr const uint16_t ENTRY_START_INDEX = 1u;
    // Get static field: static private System.UInt16 ENTRY_START_INDEX
    static uint16_t _get_ENTRY_START_INDEX();
    // Set static field: static private System.UInt16 ENTRY_START_INDEX
    static void _set_ENTRY_START_INDEX(uint16_t value);
    // Get instance field reference: private System.Int32 BucketsOffset
    [[deprecated("Use field access instead!")]] int& dyn_BucketsOffset();
    // Get instance field reference: private System.Int32 EntriesOffset
    [[deprecated("Use field access instead!")]] int& dyn_EntriesOffset();
    // Get instance field reference: private System.UInt16 Free
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Free();
    // Get instance field reference: private System.Int32 UsedCount
    [[deprecated("Use field access instead!")]] int& dyn_UsedCount();
    // Get instance field reference: private System.Int32 FreeCount
    [[deprecated("Use field access instead!")]] int& dyn_FreeCount();
    // Get instance field reference: private System.UInt32 Capacity
    [[deprecated("Use field access instead!")]] uint& dyn_Capacity();
    // public System.Int32 get_Count()
    // Offset: 0x2B4E5FC
    int get_Count();
    // static public System.Int32 ComputeMemoryNeeded(System.UInt32 capacity)
    // Offset: 0x2B4E60C
    static int ComputeMemoryNeeded(uint capacity);
    // static public System.Void InitializeMemory(System.Void* memory, System.UInt32 capacity)
    // Offset: 0x2B4E724
    static void InitializeMemory(void* memory, uint capacity);
    // static System.Void GetIterateBufferStartCount(Fusion.NetworkObjectRefMapPtr* map, out Fusion.NetworkObjectRefMapPtr/Entry* entries, out System.Int32 start, out System.Int32 count)
    // Offset: 0x2B4E008
    static void GetIterateBufferStartCount(::Fusion::NetworkObjectRefMapPtr* map, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*> entries, ByRef<int> start, ByRef<int> count);
    // static public System.Boolean TryGet(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id, out Fusion.Ptr ptr)
    // Offset: 0x2B4E7DC
    static bool TryGet(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id, ByRef<::Fusion::Ptr> ptr);
    // static public System.Boolean TryGetEntry(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id, out Fusion.NetworkObjectRefMapPtr/Entry* ptr)
    // Offset: 0x2B4E870
    static bool TryGetEntry(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*> ptr);
    // static public System.Boolean Contains(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id)
    // Offset: 0x2B4E898
    static bool Contains(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id);
    // static public System.Boolean Remove(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id)
    // Offset: 0x2B4E8B4
    static bool Remove(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id);
    // static public System.Boolean Add(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id, Fusion.Ptr ptr)
    // Offset: 0x2B4E970
    static bool Add(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id, ::Fusion::Ptr ptr);
    // static private Fusion.NetworkObjectRefMapPtr/Entry* Insert(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id, Fusion.Ptr ptr)
    // Offset: 0x2B4E9C0
    static ::Fusion::NetworkObjectRefMapPtr::Entry* Insert(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id, ::Fusion::Ptr ptr);
    // static private Fusion.NetworkObjectRefMapPtr/Entry* Find(Fusion.NetworkObjectRefMapPtr* map, Fusion.NetworkId id)
    // Offset: 0x2B4E810
    static ::Fusion::NetworkObjectRefMapPtr::Entry* Find(::Fusion::NetworkObjectRefMapPtr* map, ::Fusion::NetworkId id);
    // static private System.Int32 CalculateBucketSize(System.UInt32 capacity)
    // Offset: 0x2B4E700
    static int CalculateBucketSize(uint capacity);
    // static private System.Int32 CalculateEntrySize(System.UInt32 capacity)
    // Offset: 0x2B4E710
    static int CalculateEntrySize(uint capacity);
  }; // Fusion.NetworkObjectRefMapPtr
  #pragma pack(pop)
  static check_size<sizeof(NetworkObjectRefMapPtr), 20 + sizeof(uint)> __Fusion_NetworkObjectRefMapPtrSizeCheck;
  static_assert(sizeof(NetworkObjectRefMapPtr) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkObjectRefMapPtr::*)()>(&Fusion::NetworkObjectRefMapPtr::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::ComputeMemoryNeeded
// Il2CppName: ComputeMemoryNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Fusion::NetworkObjectRefMapPtr::ComputeMemoryNeeded)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "ComputeMemoryNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::InitializeMemory
// Il2CppName: InitializeMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint)>(&Fusion::NetworkObjectRefMapPtr::InitializeMemory)> {
  static const MethodInfo* get() {
    static auto* memory = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "InitializeMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memory, capacity});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::GetIterateBufferStartCount
// Il2CppName: GetIterateBufferStartCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkObjectRefMapPtr*, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*>, ByRef<int>, ByRef<int>)>(&Fusion::NetworkObjectRefMapPtr::GetIterateBufferStartCount)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* entries = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr/Entry"))->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "GetIterateBufferStartCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, entries, start, count});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::TryGet
// Il2CppName: TryGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId, ByRef<::Fusion::Ptr>)>(&Fusion::NetworkObjectRefMapPtr::TryGet)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* ptr = &::il2cpp_utils::GetClassFromName("Fusion", "Ptr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "TryGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::TryGetEntry
// Il2CppName: TryGetEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*>)>(&Fusion::NetworkObjectRefMapPtr::TryGetEntry)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr/Entry"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "TryGetEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId)>(&Fusion::NetworkObjectRefMapPtr::Contains)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId)>(&Fusion::NetworkObjectRefMapPtr::Remove)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId, ::Fusion::Ptr)>(&Fusion::NetworkObjectRefMapPtr::Add)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* ptr = &::il2cpp_utils::GetClassFromName("Fusion", "Ptr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectRefMapPtr::Entry* (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId, ::Fusion::Ptr)>(&Fusion::NetworkObjectRefMapPtr::Insert)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* ptr = &::il2cpp_utils::GetClassFromName("Fusion", "Ptr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectRefMapPtr::Entry* (*)(::Fusion::NetworkObjectRefMapPtr*, ::Fusion::NetworkId)>(&Fusion::NetworkObjectRefMapPtr::Find)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::CalculateBucketSize
// Il2CppName: CalculateBucketSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Fusion::NetworkObjectRefMapPtr::CalculateBucketSize)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "CalculateBucketSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectRefMapPtr::CalculateEntrySize
// Il2CppName: CalculateEntrySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Fusion::NetworkObjectRefMapPtr::CalculateEntrySize)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectRefMapPtr), "CalculateEntrySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
