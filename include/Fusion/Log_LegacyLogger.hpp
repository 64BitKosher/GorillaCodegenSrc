// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Log
#include "Fusion/Log.hpp"
// Including type: Fusion.ILogger
#include "Fusion/ILogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ILogBuilder
  class ILogBuilder;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Log::LegacyLogger);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Log::LegacyLogger*, "Fusion", "Log/LegacyLogger");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Log/LegacyLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class Log::LegacyLogger : public ::Il2CppObject/*, public ::Fusion::ILogger*/ {
    public:
    public:
    // private System.Text.StringBuilder _builder
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::StringBuilder* builder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // public System.Action`1<System.String> Info
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::StringW>* Info;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> Warn
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::StringW>* Warn;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> Error
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::StringW>* Error;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.Exception> Exception
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::System::Exception*>* Exception;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::Exception*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogger
    operator ::Fusion::ILogger() noexcept {
      return *reinterpret_cast<::Fusion::ILogger*>(this);
    }
    // Get instance field reference: private System.Text.StringBuilder _builder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__builder();
    // Get instance field reference: public System.Action`1<System.String> Info
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_Info();
    // Get instance field reference: public System.Action`1<System.String> Warn
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_Warn();
    // Get instance field reference: public System.Action`1<System.String> Error
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_Error();
    // Get instance field reference: public System.Action`1<System.Exception> Exception
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::Exception*>*& dyn_Exception();
    // public System.Void Log(Fusion.LogType logType, System.String prefix, ref T loggable, System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Log(::Fusion::LogType logType, ::StringW prefix, ByRef<T> loggable, ::StringW message) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::LegacyLogger::Log");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Log::LegacyLogger*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, logType, prefix, byref(loggable), message);
    }
    // private System.Void NewMethod(System.String prefix, ref T loggable, System.String message, System.Action`1<System.String> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void NewMethod(::StringW prefix, ByRef<T> loggable, ::StringW message, ::System::Action_1<::StringW>* handler) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::LegacyLogger::NewMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewMethod", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(loggable), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, prefix, byref(loggable), message, handler);
    }
    // public System.Void LogException(System.String prefix, ref T context, System.Exception ex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void LogException(::StringW prefix, ByRef<T> context, ::System::Exception* ex) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::LegacyLogger::LogException");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::Log::LegacyLogger*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, prefix, byref(context), ex);
    }
    // public System.Void .ctor()
    // Offset: 0x2AD7A28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Log::LegacyLogger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::LegacyLogger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Log::LegacyLogger*, creationType>()));
    }
  }; // Fusion.Log/LegacyLogger
  #pragma pack(pop)
  static check_size<sizeof(Log::LegacyLogger), 48 + sizeof(::System::Action_1<::System::Exception*>*)> __Fusion_Log_LegacyLoggerSizeCheck;
  static_assert(sizeof(Log::LegacyLogger) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Log::LegacyLogger::Log
// Il2CppName: Log
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::LegacyLogger::NewMethod
// Il2CppName: NewMethod
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::LegacyLogger::LogException
// Il2CppName: LogException
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::LegacyLogger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
