// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Photon.Realtime.EventCaching
#include "Fusion/Photon/Realtime/EventCaching.hpp"
// Including type: Fusion.Photon.Realtime.ReceiverGroup
#include "Fusion/Photon/Realtime/ReceiverGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: WebFlags
  class WebFlags;
}
// Completed forward declares
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: RaiseEventOptions
  class RaiseEventOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::RaiseEventOptions);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::RaiseEventOptions*, "Fusion.Photon.Realtime", "RaiseEventOptions");
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.RaiseEventOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class RaiseEventOptions : public ::Il2CppObject {
    public:
    public:
    // public Fusion.Photon.Realtime.EventCaching CachingOption
    // Size: 0x1
    // Offset: 0x10
    ::Fusion::Photon::Realtime::EventCaching CachingOption;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::EventCaching) == 0x1);
    // public System.Byte InterestGroup
    // Size: 0x1
    // Offset: 0x11
    uint8_t InterestGroup;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: InterestGroup and: TargetActors
    char __padding1[0x6] = {};
    // public System.Int32[] TargetActors
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> TargetActors;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Fusion.Photon.Realtime.ReceiverGroup Receivers
    // Size: 0x1
    // Offset: 0x20
    ::Fusion::Photon::Realtime::ReceiverGroup Receivers;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::ReceiverGroup) == 0x1);
    // public System.Byte SequenceChannel
    // Size: 0x1
    // Offset: 0x21
    uint8_t SequenceChannel;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: SequenceChannel and: Flags
    char __padding4[0x6] = {};
    // public Fusion.Photon.Realtime.WebFlags Flags
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::Photon::Realtime::WebFlags* Flags;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::WebFlags*) == 0x8);
    public:
    // Get static field: static public readonly Fusion.Photon.Realtime.RaiseEventOptions Default
    static ::Fusion::Photon::Realtime::RaiseEventOptions* _get_Default();
    // Set static field: static public readonly Fusion.Photon.Realtime.RaiseEventOptions Default
    static void _set_Default(::Fusion::Photon::Realtime::RaiseEventOptions* value);
    // Get instance field reference: public Fusion.Photon.Realtime.EventCaching CachingOption
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::EventCaching& dyn_CachingOption();
    // Get instance field reference: public System.Byte InterestGroup
    [[deprecated("Use field access instead!")]] uint8_t& dyn_InterestGroup();
    // Get instance field reference: public System.Int32[] TargetActors
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_TargetActors();
    // Get instance field reference: public Fusion.Photon.Realtime.ReceiverGroup Receivers
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::ReceiverGroup& dyn_Receivers();
    // Get instance field reference: public System.Byte SequenceChannel
    [[deprecated("Use field access instead!")]] uint8_t& dyn_SequenceChannel();
    // Get instance field reference: public Fusion.Photon.Realtime.WebFlags Flags
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::WebFlags*& dyn_Flags();
    // public System.Void .ctor()
    // Offset: 0x2AF116C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RaiseEventOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::RaiseEventOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RaiseEventOptions*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2AF11DC
    static void _cctor();
  }; // Fusion.Photon.Realtime.RaiseEventOptions
  #pragma pack(pop)
  static check_size<sizeof(RaiseEventOptions), 40 + sizeof(::Fusion::Photon::Realtime::WebFlags*)> __Fusion_Photon_Realtime_RaiseEventOptionsSizeCheck;
  static_assert(sizeof(RaiseEventOptions) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RaiseEventOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RaiseEventOptions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Photon::Realtime::RaiseEventOptions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RaiseEventOptions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
