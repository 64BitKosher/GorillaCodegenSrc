// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion.Photon.Realtime.Async
namespace Fusion::Photon::Realtime::Async {
  // Forward declaring type: OperationException
  class OperationException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::Async::OperationException);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::Async::OperationException*, "Fusion.Photon.Realtime.Async", "OperationException");
// Type namespace: Fusion.Photon.Realtime.Async
namespace Fusion::Photon::Realtime::Async {
  // Size: 0x8E
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.Async.OperationException
  // [TokenAttribute] Offset: FFFFFFFF
  class OperationException : public ::System::Exception {
    public:
    public:
    // public System.Int16 ErrorCode
    // Size: 0x2
    // Offset: 0x8C
    int16_t ErrorCode;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Creating conversion operator: operator int16_t
    constexpr operator int16_t() const noexcept {
      return ErrorCode;
    }
    // Get instance field reference: public System.Int16 ErrorCode
    [[deprecated("Use field access instead!")]] int16_t& dyn_ErrorCode();
    // public System.Void .ctor(System.Int16 errorCode, System.String message)
    // Offset: 0x2AFA1D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OperationException* New_ctor(int16_t errorCode, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::Async::OperationException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OperationException*, creationType>(errorCode, message)));
    }
  }; // Fusion.Photon.Realtime.Async.OperationException
  #pragma pack(pop)
  static check_size<sizeof(OperationException), 140 + sizeof(int16_t)> __Fusion_Photon_Realtime_Async_OperationExceptionSizeCheck;
  static_assert(sizeof(OperationException) == 0x8E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::Async::OperationException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
