// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: RoomInfo
  class RoomInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::RoomInfo);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::RoomInfo*, "Fusion.Photon.Realtime", "RoomInfo");
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.RoomInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class RoomInfo : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean RemovedFromList
    // Size: 0x1
    // Offset: 0x10
    bool RemovedFromList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RemovedFromList and: customProperties
    char __padding0[0x7] = {};
    // private ExitGames.Client.Photon.Hashtable customProperties
    // Size: 0x8
    // Offset: 0x18
    ::ExitGames::Client::Photon::Hashtable* customProperties;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::Hashtable*) == 0x8);
    // protected System.Int32 maxPlayers
    // Size: 0x4
    // Offset: 0x20
    int maxPlayers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 emptyRoomTtl
    // Size: 0x4
    // Offset: 0x24
    int emptyRoomTtl;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 playerTtl
    // Size: 0x4
    // Offset: 0x28
    int playerTtl;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: playerTtl and: expectedUsers
    char __padding4[0x4] = {};
    // protected System.String[] expectedUsers
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> expectedUsers;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // protected System.Boolean isOpen
    // Size: 0x1
    // Offset: 0x38
    bool isOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean isVisible
    // Size: 0x1
    // Offset: 0x39
    bool isVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean autoCleanUp
    // Size: 0x1
    // Offset: 0x3A
    bool autoCleanUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoCleanUp and: name
    char __padding8[0x5] = {};
    // protected System.String name
    // Size: 0x8
    // Offset: 0x40
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 masterClientId
    // Size: 0x4
    // Offset: 0x48
    int masterClientId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: masterClientId and: propertiesListedInLobby
    char __padding10[0x4] = {};
    // protected System.String[] propertiesListedInLobby
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> propertiesListedInLobby;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Int32 <PlayerCount>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    int PlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Boolean RemovedFromList
    [[deprecated("Use field access instead!")]] bool& dyn_RemovedFromList();
    // Get instance field reference: private ExitGames.Client.Photon.Hashtable customProperties
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::Hashtable*& dyn_customProperties();
    // Get instance field reference: protected System.Int32 maxPlayers
    [[deprecated("Use field access instead!")]] int& dyn_maxPlayers();
    // Get instance field reference: protected System.Int32 emptyRoomTtl
    [[deprecated("Use field access instead!")]] int& dyn_emptyRoomTtl();
    // Get instance field reference: protected System.Int32 playerTtl
    [[deprecated("Use field access instead!")]] int& dyn_playerTtl();
    // Get instance field reference: protected System.String[] expectedUsers
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_expectedUsers();
    // Get instance field reference: protected System.Boolean isOpen
    [[deprecated("Use field access instead!")]] bool& dyn_isOpen();
    // Get instance field reference: protected System.Boolean isVisible
    [[deprecated("Use field access instead!")]] bool& dyn_isVisible();
    // Get instance field reference: protected System.Boolean autoCleanUp
    [[deprecated("Use field access instead!")]] bool& dyn_autoCleanUp();
    // Get instance field reference: protected System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Int32 masterClientId
    [[deprecated("Use field access instead!")]] int& dyn_masterClientId();
    // Get instance field reference: protected System.String[] propertiesListedInLobby
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_propertiesListedInLobby();
    // Get instance field reference: private System.Int32 <PlayerCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$PlayerCount$k__BackingField();
    // public ExitGames.Client.Photon.Hashtable get_CustomProperties()
    // Offset: 0x2AF72A0
    ::ExitGames::Client::Photon::Hashtable* get_CustomProperties();
    // public System.String get_Name()
    // Offset: 0x2AF7DAC
    ::StringW get_Name();
    // public System.Int32 get_PlayerCount()
    // Offset: 0x2AF7DB4
    int get_PlayerCount();
    // private System.Void set_PlayerCount(System.Int32 value)
    // Offset: 0x2AF7DBC
    void set_PlayerCount(int value);
    // public System.Int32 get_MaxPlayers()
    // Offset: 0x2AF7DC4
    int get_MaxPlayers();
    // public System.Boolean get_IsOpen()
    // Offset: 0x2AF7DCC
    bool get_IsOpen();
    // public System.Boolean get_IsVisible()
    // Offset: 0x2AF7DD4
    bool get_IsVisible();
    // protected internal System.Void .ctor(System.String roomName, ExitGames.Client.Photon.Hashtable roomProperties)
    // Offset: 0x2AF6B10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomInfo* New_ctor(::StringW roomName, ::ExitGames::Client::Photon::Hashtable* roomProperties) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::RoomInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomInfo*, creationType>(roomName, roomProperties)));
    }
    // public System.String ToStringFull()
    // Offset: 0x2AF80F4
    ::StringW ToStringFull();
    // protected internal System.Void InternalCacheProperties(ExitGames.Client.Photon.Hashtable propertiesToCache)
    // Offset: 0x2AF6C70
    void InternalCacheProperties(::ExitGames::Client::Photon::Hashtable* propertiesToCache);
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x2AF7DDC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2AF7E7C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2AF7E9C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.Photon.Realtime.RoomInfo
  #pragma pack(pop)
  static check_size<sizeof(RoomInfo), 88 + sizeof(int)> __Fusion_Photon_Realtime_RoomInfoSizeCheck;
  static_assert(sizeof(RoomInfo) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_CustomProperties
// Il2CppName: get_CustomProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::Hashtable* (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_CustomProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_CustomProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_PlayerCount
// Il2CppName: get_PlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_PlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_PlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::set_PlayerCount
// Il2CppName: set_PlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RoomInfo::*)(int)>(&Fusion::Photon::Realtime::RoomInfo::set_PlayerCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "set_PlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_MaxPlayers
// Il2CppName: get_MaxPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_MaxPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_MaxPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_IsOpen
// Il2CppName: get_IsOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_IsOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_IsOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::get_IsVisible
// Il2CppName: get_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::get_IsVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "get_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::ToStringFull
// Il2CppName: ToStringFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::ToStringFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "ToStringFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::InternalCacheProperties
// Il2CppName: InternalCacheProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RoomInfo::*)(::ExitGames::Client::Photon::Hashtable*)>(&Fusion::Photon::Realtime::RoomInfo::InternalCacheProperties)> {
  static const MethodInfo* get() {
    static auto* propertiesToCache = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "InternalCacheProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesToCache});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RoomInfo::*)(::Il2CppObject*)>(&Fusion::Photon::Realtime::RoomInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RoomInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Photon::Realtime::RoomInfo::*)()>(&Fusion::Photon::Realtime::RoomInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RoomInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
