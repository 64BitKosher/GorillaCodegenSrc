// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Photon.Realtime.LobbyType
#include "Fusion/Photon/Realtime/LobbyType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: TypedLobby
  class TypedLobby;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::TypedLobby);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::TypedLobby*, "Fusion.Photon.Realtime", "TypedLobby");
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.TypedLobby
  // [TokenAttribute] Offset: FFFFFFFF
  class TypedLobby : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Fusion.Photon.Realtime.LobbyType Type
    // Size: 0x1
    // Offset: 0x18
    ::Fusion::Photon::Realtime::LobbyType Type;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::LobbyType) == 0x1);
    public:
    // Get static field: static public readonly Fusion.Photon.Realtime.TypedLobby Default
    static ::Fusion::Photon::Realtime::TypedLobby* _get_Default();
    // Set static field: static public readonly Fusion.Photon.Realtime.TypedLobby Default
    static void _set_Default(::Fusion::Photon::Realtime::TypedLobby* value);
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public Fusion.Photon.Realtime.LobbyType Type
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::LobbyType& dyn_Type();
    // public System.Boolean get_IsDefault()
    // Offset: 0x2AF1240
    bool get_IsDefault();
    // System.Void .ctor()
    // Offset: 0x2AF124C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypedLobby* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::TypedLobby::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypedLobby*, creationType>()));
    }
    // public System.Void .ctor(System.String name, Fusion.Photon.Realtime.LobbyType type)
    // Offset: 0x2AF1254
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypedLobby* New_ctor(::StringW name, ::Fusion::Photon::Realtime::LobbyType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::TypedLobby::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypedLobby*, creationType>(name, type)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2AF131C
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x2AF1290
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.Photon.Realtime.TypedLobby
  #pragma pack(pop)
  static check_size<sizeof(TypedLobby), 24 + sizeof(::Fusion::Photon::Realtime::LobbyType)> __Fusion_Photon_Realtime_TypedLobbySizeCheck;
  static_assert(sizeof(TypedLobby) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::TypedLobby::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::TypedLobby::*)()>(&Fusion::Photon::Realtime::TypedLobby::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::TypedLobby*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::TypedLobby::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Photon::Realtime::TypedLobby::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Photon::Realtime::TypedLobby::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Photon::Realtime::TypedLobby::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::TypedLobby*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::TypedLobby::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Photon::Realtime::TypedLobby::*)()>(&Fusion::Photon::Realtime::TypedLobby::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::TypedLobby*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
