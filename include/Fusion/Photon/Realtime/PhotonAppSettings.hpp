// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: AppSettings
  class AppSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: PhotonAppSettings
  class PhotonAppSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::PhotonAppSettings);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::PhotonAppSettings*, "Fusion.Photon.Realtime", "PhotonAppSettings");
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.PhotonAppSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class PhotonAppSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public Fusion.Photon.Realtime.AppSettings AppSettings
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Photon::Realtime::AppSettings* AppSettings;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::AppSettings*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Fusion.Photon.Realtime.PhotonAppSettings _instance
    static ::Fusion::Photon::Realtime::PhotonAppSettings* _get__instance();
    // Set static field: static private Fusion.Photon.Realtime.PhotonAppSettings _instance
    static void _set__instance(::Fusion::Photon::Realtime::PhotonAppSettings* value);
    // static field const value: static public System.String ExpectedResourceName
    static constexpr const char* ExpectedResourceName = "PhotonAppSettings";
    // Get static field: static public System.String ExpectedResourceName
    static ::StringW _get_ExpectedResourceName();
    // Set static field: static public System.String ExpectedResourceName
    static void _set_ExpectedResourceName(::StringW value);
    // static field const value: static public System.String ExpectedAssetName
    static constexpr const char* ExpectedAssetName = "PhotonAppSettings.asset";
    // Get static field: static public System.String ExpectedAssetName
    static ::StringW _get_ExpectedAssetName();
    // Set static field: static public System.String ExpectedAssetName
    static void _set_ExpectedAssetName(::StringW value);
    // Get instance field reference: public Fusion.Photon.Realtime.AppSettings AppSettings
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::AppSettings*& dyn_AppSettings();
    // static public Fusion.Photon.Realtime.PhotonAppSettings get_Instance()
    // Offset: 0x2AF99C8
    static ::Fusion::Photon::Realtime::PhotonAppSettings* get_Instance();
    // static public System.Void set_Instance(Fusion.Photon.Realtime.PhotonAppSettings value)
    // Offset: 0x2AF9AA0
    static void set_Instance(::Fusion::Photon::Realtime::PhotonAppSettings* value);
    // public System.Void .ctor()
    // Offset: 0x2AF9AF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonAppSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::PhotonAppSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonAppSettings*, creationType>()));
    }
  }; // Fusion.Photon.Realtime.PhotonAppSettings
  #pragma pack(pop)
  static check_size<sizeof(PhotonAppSettings), 24 + sizeof(::Fusion::Photon::Realtime::AppSettings*)> __Fusion_Photon_Realtime_PhotonAppSettingsSizeCheck;
  static_assert(sizeof(PhotonAppSettings) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::PhotonAppSettings::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Photon::Realtime::PhotonAppSettings* (*)()>(&Fusion::Photon::Realtime::PhotonAppSettings::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::PhotonAppSettings*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::PhotonAppSettings::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Photon::Realtime::PhotonAppSettings*)>(&Fusion::Photon::Realtime::PhotonAppSettings::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Photon.Realtime", "PhotonAppSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::PhotonAppSettings*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::PhotonAppSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
