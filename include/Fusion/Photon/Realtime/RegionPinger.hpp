// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: Region
  class Region;
  // Forward declaring type: PhotonPing
  class PhotonPing;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: RegionPinger
  class RegionPinger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Photon::Realtime::RegionPinger);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Photon::Realtime::RegionPinger*, "Fusion.Photon.Realtime", "RegionPinger");
// Type namespace: Fusion.Photon.Realtime
namespace Fusion::Photon::Realtime {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Photon.Realtime.RegionPinger
  // [TokenAttribute] Offset: FFFFFFFF
  class RegionPinger : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::Photon::Realtime::RegionPinger::$RegionPingCoroutine$d__22
    class $RegionPingCoroutine$d__22;
    public:
    // public System.Int32 CurrentAttempt
    // Size: 0x4
    // Offset: 0x10
    int CurrentAttempt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <Done>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool Done;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Aborted>k__BackingField
    // Size: 0x1
    // Offset: 0x15
    bool Aborted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Aborted and: onDoneCall
    char __padding2[0x2] = {};
    // private System.Action`1<Fusion.Photon.Realtime.Region> onDoneCall
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::Fusion::Photon::Realtime::Region*>* onDoneCall;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Fusion::Photon::Realtime::Region*>*) == 0x8);
    // private Fusion.Photon.Realtime.PhotonPing ping
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Photon::Realtime::PhotonPing* ping;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::PhotonPing*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> rttResults
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* rttResults;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private Fusion.Photon.Realtime.Region region
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Photon::Realtime::Region* region;
    // Field size check
    static_assert(sizeof(::Fusion::Photon::Realtime::Region*) == 0x8);
    // private System.String regionAddress
    // Size: 0x8
    // Offset: 0x38
    ::StringW regionAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static public System.Int32 Attempts
    static int _get_Attempts();
    // Set static field: static public System.Int32 Attempts
    static void _set_Attempts(int value);
    // Get static field: static public System.Int32 MaxMilliseconsPerPing
    static int _get_MaxMilliseconsPerPing();
    // Set static field: static public System.Int32 MaxMilliseconsPerPing
    static void _set_MaxMilliseconsPerPing(int value);
    // Get static field: static public System.Int32 PingWhenFailed
    static int _get_PingWhenFailed();
    // Set static field: static public System.Int32 PingWhenFailed
    static void _set_PingWhenFailed(int value);
    // Get instance field reference: public System.Int32 CurrentAttempt
    [[deprecated("Use field access instead!")]] int& dyn_CurrentAttempt();
    // Get instance field reference: private System.Boolean <Done>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Done$k__BackingField();
    // Get instance field reference: private System.Boolean <Aborted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Aborted$k__BackingField();
    // Get instance field reference: private System.Action`1<Fusion.Photon.Realtime.Region> onDoneCall
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Fusion::Photon::Realtime::Region*>*& dyn_onDoneCall();
    // Get instance field reference: private Fusion.Photon.Realtime.PhotonPing ping
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::PhotonPing*& dyn_ping();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> rttResults
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_rttResults();
    // Get instance field reference: private Fusion.Photon.Realtime.Region region
    [[deprecated("Use field access instead!")]] ::Fusion::Photon::Realtime::Region*& dyn_region();
    // Get instance field reference: private System.String regionAddress
    [[deprecated("Use field access instead!")]] ::StringW& dyn_regionAddress();
    // public System.Boolean get_Done()
    // Offset: 0x2AF51FC
    bool get_Done();
    // private System.Void set_Done(System.Boolean value)
    // Offset: 0x2AF5204
    void set_Done(bool value);
    // public System.Boolean get_Aborted()
    // Offset: 0x2AF5210
    bool get_Aborted();
    // System.Void set_Aborted(System.Boolean value)
    // Offset: 0x2AF5218
    void set_Aborted(bool value);
    // public System.Void .ctor(Fusion.Photon.Realtime.Region region, System.Action`1<Fusion.Photon.Realtime.Region> onDoneCallback)
    // Offset: 0x2AF47BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegionPinger* New_ctor(::Fusion::Photon::Realtime::Region* region, ::System::Action_1<::Fusion::Photon::Realtime::Region*>* onDoneCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Photon::Realtime::RegionPinger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegionPinger*, creationType>(region, onDoneCallback)));
    }
    // private Fusion.Photon.Realtime.PhotonPing GetPingImplementation()
    // Offset: 0x2AF5224
    ::Fusion::Photon::Realtime::PhotonPing* GetPingImplementation();
    // public System.Boolean Start()
    // Offset: 0x2AF486C
    bool Start();
    // protected internal System.Void Abort()
    // Offset: 0x2AF4E2C
    void Abort();
    // protected internal System.Boolean RegionPingThreaded()
    // Offset: 0x2AF580C
    bool RegionPingThreaded();
    // protected internal System.Collections.IEnumerator RegionPingCoroutine()
    // Offset: 0x2AF5704
    ::System::Collections::IEnumerator* RegionPingCoroutine();
    // public System.String GetResults()
    // Offset: 0x2AF38D8
    ::StringW GetResults();
    // static public System.String ResolveHost(System.String hostName)
    // Offset: 0x2AF545C
    static ::StringW ResolveHost(::StringW hostName);
    // static private System.Void .cctor()
    // Offset: 0x2AF5BB0
    static void _cctor();
    // private System.Void <Start>b__19_0(System.Object o)
    // Offset: 0x2AF5C08
    void $Start$b__19_0(::Il2CppObject* o);
  }; // Fusion.Photon.Realtime.RegionPinger
  #pragma pack(pop)
  static check_size<sizeof(RegionPinger), 56 + sizeof(::StringW)> __Fusion_Photon_Realtime_RegionPingerSizeCheck;
  static_assert(sizeof(RegionPinger) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::get_Done
// Il2CppName: get_Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::get_Done)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "get_Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::set_Done
// Il2CppName: set_Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RegionPinger::*)(bool)>(&Fusion::Photon::Realtime::RegionPinger::set_Done)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "set_Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::set_Aborted
// Il2CppName: set_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RegionPinger::*)(bool)>(&Fusion::Photon::Realtime::RegionPinger::set_Aborted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "set_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::GetPingImplementation
// Il2CppName: GetPingImplementation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Photon::Realtime::PhotonPing* (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::GetPingImplementation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "GetPingImplementation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::RegionPingThreaded
// Il2CppName: RegionPingThreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::RegionPingThreaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "RegionPingThreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::RegionPingCoroutine
// Il2CppName: RegionPingCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::RegionPingCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "RegionPingCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::GetResults
// Il2CppName: GetResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::Photon::Realtime::RegionPinger::*)()>(&Fusion::Photon::Realtime::RegionPinger::GetResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "GetResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::ResolveHost
// Il2CppName: ResolveHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Fusion::Photon::Realtime::RegionPinger::ResolveHost)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "ResolveHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Photon::Realtime::RegionPinger::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Photon::Realtime::RegionPinger::$Start$b__19_0
// Il2CppName: <Start>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Photon::Realtime::RegionPinger::*)(::Il2CppObject*)>(&Fusion::Photon::Realtime::RegionPinger::$Start$b__19_0)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Photon::Realtime::RegionPinger*), "<Start>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
