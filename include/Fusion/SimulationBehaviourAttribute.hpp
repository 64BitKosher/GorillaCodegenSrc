// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: Fusion.SimulationStages
#include "Fusion/SimulationStages.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationBehaviourAttribute
  class SimulationBehaviourAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationBehaviourAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationBehaviourAttribute*, "Fusion", "SimulationBehaviourAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationBehaviourAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class SimulationBehaviourAttribute : public ::System::Attribute {
    public:
    public:
    // private Fusion.SimulationStages <Stages>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::Fusion::SimulationStages Stages;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationStages) == 0x4);
    // private Fusion.SimulationModes <Modes>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::Fusion::SimulationModes Modes;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    public:
    // Get instance field reference: private Fusion.SimulationStages <Stages>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationStages& dyn_$Stages$k__BackingField();
    // Get instance field reference: private Fusion.SimulationModes <Modes>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn_$Modes$k__BackingField();
    // public Fusion.SimulationStages get_Stages()
    // Offset: 0x2B183B8
    ::Fusion::SimulationStages get_Stages();
    // public System.Void set_Stages(Fusion.SimulationStages value)
    // Offset: 0x2B183C0
    void set_Stages(::Fusion::SimulationStages value);
    // public Fusion.SimulationModes get_Modes()
    // Offset: 0x2B183C8
    ::Fusion::SimulationModes get_Modes();
    // public System.Void set_Modes(Fusion.SimulationModes value)
    // Offset: 0x2B183D0
    void set_Modes(::Fusion::SimulationModes value);
    // public System.Void .ctor()
    // Offset: 0x2B183D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationBehaviourAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationBehaviourAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationBehaviourAttribute*, creationType>()));
    }
  }; // Fusion.SimulationBehaviourAttribute
  #pragma pack(pop)
  static check_size<sizeof(SimulationBehaviourAttribute), 20 + sizeof(::Fusion::SimulationModes)> __Fusion_SimulationBehaviourAttributeSizeCheck;
  static_assert(sizeof(SimulationBehaviourAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationBehaviourAttribute::get_Stages
// Il2CppName: get_Stages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationStages (Fusion::SimulationBehaviourAttribute::*)()>(&Fusion::SimulationBehaviourAttribute::get_Stages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourAttribute*), "get_Stages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourAttribute::set_Stages
// Il2CppName: set_Stages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourAttribute::*)(::Fusion::SimulationStages)>(&Fusion::SimulationBehaviourAttribute::set_Stages)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationStages")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourAttribute*), "set_Stages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourAttribute::get_Modes
// Il2CppName: get_Modes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationModes (Fusion::SimulationBehaviourAttribute::*)()>(&Fusion::SimulationBehaviourAttribute::get_Modes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourAttribute*), "get_Modes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourAttribute::set_Modes
// Il2CppName: set_Modes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourAttribute::*)(::Fusion::SimulationModes)>(&Fusion::SimulationBehaviourAttribute::set_Modes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationModes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourAttribute*), "set_Modes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
