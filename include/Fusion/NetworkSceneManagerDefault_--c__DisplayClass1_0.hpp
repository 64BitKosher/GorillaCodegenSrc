// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkSceneManagerDefault
#include "Fusion/NetworkSceneManagerDefault.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`2<T0, T1>
  template<typename T0, typename T1>
  class UnityAction_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0*, "Fusion", "NetworkSceneManagerDefault/<>c__DisplayClass1_0");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkSceneManagerDefault/<>c__DisplayClass1_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class NetworkSceneManagerDefault::$$c__DisplayClass1_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String scenePath
    // Size: 0x8
    // Offset: 0x10
    ::StringW scenePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<UnityEngine.SceneManagement.Scene> loaded
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::UnityEngine::SceneManagement::Scene>* loaded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::SceneManagement::Scene>*) == 0x8);
    // public System.Boolean alreadyHandled
    // Size: 0x1
    // Offset: 0x20
    bool alreadyHandled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alreadyHandled and: sceneLoadedHandler
    char __padding2[0x7] = {};
    // public UnityEngine.Events.UnityAction`2<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode> sceneLoadedHandler
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityAction_2<::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode>* sceneLoadedHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_2<::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode>*) == 0x8);
    public:
    // Get instance field reference: public System.String scenePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_scenePath();
    // Get instance field reference: public System.Action`1<UnityEngine.SceneManagement.Scene> loaded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::SceneManagement::Scene>*& dyn_loaded();
    // Get instance field reference: public System.Boolean alreadyHandled
    [[deprecated("Use field access instead!")]] bool& dyn_alreadyHandled();
    // Get instance field reference: public UnityEngine.Events.UnityAction`2<UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode> sceneLoadedHandler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_2<::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode>*& dyn_sceneLoadedHandler();
    // public System.Void .ctor()
    // Offset: 0x2819420
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkSceneManagerDefault::$$c__DisplayClass1_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkSceneManagerDefault::$$c__DisplayClass1_0*, creationType>()));
    }
    // System.Void <LoadSceneAsync>b__0(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode _)
    // Offset: 0x28196BC
    void $LoadSceneAsync$b__0(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode _);
    // System.Void <LoadSceneAsync>b__1(UnityEngine.AsyncOperation _)
    // Offset: 0x2819764
    void $LoadSceneAsync$b__1(::UnityEngine::AsyncOperation* _);
  }; // Fusion.NetworkSceneManagerDefault/<>c__DisplayClass1_0
  #pragma pack(pop)
  static check_size<sizeof(NetworkSceneManagerDefault::$$c__DisplayClass1_0), 40 + sizeof(::UnityEngine::Events::UnityAction_2<::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode>*)> __Fusion_NetworkSceneManagerDefault_$$c__DisplayClass1_0SizeCheck;
  static_assert(sizeof(NetworkSceneManagerDefault::$$c__DisplayClass1_0) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::$LoadSceneAsync$b__0
// Il2CppName: <LoadSceneAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::$LoadSceneAsync$b__0)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0*), "<LoadSceneAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, _});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::$LoadSceneAsync$b__1
// Il2CppName: <LoadSceneAsync>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::*)(::UnityEngine::AsyncOperation*)>(&Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0::$LoadSceneAsync$b__1)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("UnityEngine", "AsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkSceneManagerDefault::$$c__DisplayClass1_0*), "<LoadSceneAsync>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
