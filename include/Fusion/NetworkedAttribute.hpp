// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: Fusion.OnChangedTargets
#include "Fusion/OnChangedTargets.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkedAttribute
  class NetworkedAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkedAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkedAttribute*, "Fusion", "NetworkedAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkedAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class NetworkedAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String <OnChanged>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW OnChanged;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Fusion.OnChangedTargets <OnChangedTargets>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::OnChangedTargets OnChangedTargets;
    // Field size check
    static_assert(sizeof(::Fusion::OnChangedTargets) == 0x4);
    // Padding between fields: OnChangedTargets and: Default
    char __padding1[0x4] = {};
    // private System.String <Default>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Default;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Group>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Group;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <OnChanged>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$OnChanged$k__BackingField();
    // Get instance field reference: private Fusion.OnChangedTargets <OnChangedTargets>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::OnChangedTargets& dyn_$OnChangedTargets$k__BackingField();
    // Get instance field reference: private System.String <Default>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Default$k__BackingField();
    // Get instance field reference: private System.String <Group>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Group$k__BackingField();
    // public System.String get_OnChanged()
    // Offset: 0x2AFF168
    ::StringW get_OnChanged();
    // public System.Void set_OnChanged(System.String value)
    // Offset: 0x2AFF170
    void set_OnChanged(::StringW value);
    // public Fusion.OnChangedTargets get_OnChangedTargets()
    // Offset: 0x2AFF178
    ::Fusion::OnChangedTargets get_OnChangedTargets();
    // public System.Void set_OnChangedTargets(Fusion.OnChangedTargets value)
    // Offset: 0x2AFF180
    void set_OnChangedTargets(::Fusion::OnChangedTargets value);
    // public System.String get_Default()
    // Offset: 0x2AFF188
    ::StringW get_Default();
    // public System.Void set_Default(System.String value)
    // Offset: 0x2AFF190
    void set_Default(::StringW value);
    // public System.String get_Group()
    // Offset: 0x2AFF198
    ::StringW get_Group();
    // public System.Void set_Group(System.String value)
    // Offset: 0x2AFF1A0
    void set_Group(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x2AFF1A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkedAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkedAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkedAttribute*, creationType>()));
    }
    // public System.Void .ctor(System.String group)
    // Offset: 0x2AFF1C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkedAttribute* New_ctor(::StringW group) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkedAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkedAttribute*, creationType>(group)));
    }
  }; // Fusion.NetworkedAttribute
  #pragma pack(pop)
  static check_size<sizeof(NetworkedAttribute), 40 + sizeof(::StringW)> __Fusion_NetworkedAttributeSizeCheck;
  static_assert(sizeof(NetworkedAttribute) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::get_OnChanged
// Il2CppName: get_OnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkedAttribute::*)()>(&Fusion::NetworkedAttribute::get_OnChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "get_OnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::set_OnChanged
// Il2CppName: set_OnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkedAttribute::*)(::StringW)>(&Fusion::NetworkedAttribute::set_OnChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "set_OnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::get_OnChangedTargets
// Il2CppName: get_OnChangedTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::OnChangedTargets (Fusion::NetworkedAttribute::*)()>(&Fusion::NetworkedAttribute::get_OnChangedTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "get_OnChangedTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::set_OnChangedTargets
// Il2CppName: set_OnChangedTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkedAttribute::*)(::Fusion::OnChangedTargets)>(&Fusion::NetworkedAttribute::set_OnChangedTargets)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "OnChangedTargets")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "set_OnChangedTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::get_Default
// Il2CppName: get_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkedAttribute::*)()>(&Fusion::NetworkedAttribute::get_Default)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "get_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::set_Default
// Il2CppName: set_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkedAttribute::*)(::StringW)>(&Fusion::NetworkedAttribute::set_Default)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "set_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::get_Group
// Il2CppName: get_Group
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkedAttribute::*)()>(&Fusion::NetworkedAttribute::get_Group)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "get_Group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::set_Group
// Il2CppName: set_Group
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkedAttribute::*)(::StringW)>(&Fusion::NetworkedAttribute::set_Group)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkedAttribute*), "set_Group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkedAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
