// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransformObsolete
#include "Fusion/NetworkTransformObsolete.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Nullable`1 because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkCharacterController
  class NetworkCharacterController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkCharacterController);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkCharacterController*, "Fusion", "NetworkCharacterController");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.NetworkCharacterController
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  class NetworkCharacterController : public ::Fusion::NetworkTransformObsolete {
    public:
    // Nested type: ::Fusion::NetworkCharacterController::ICallbacks
    class ICallbacks;
    // Nested type: ::Fusion::NetworkCharacterController::Hit
    struct Hit;
    // Nested type: ::Fusion::NetworkCharacterController::BumpBehavior
    struct BumpBehavior;
    // Nested type: ::Fusion::NetworkCharacterController::MovementType
    struct MovementType;
    // Nested type: ::Fusion::NetworkCharacterController::Configuration
    class Configuration;
    // Nested type: ::Fusion::NetworkCharacterController::Movement
    struct Movement;
    // Size: 0x1D
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkCharacterController/Hit
    // [TokenAttribute] Offset: FFFFFFFF
    struct Hit/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Collider Collider
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Collider* Collider;
      // Field size check
      static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
      // public UnityEngine.Vector3 Normal
      // Size: 0xC
      // Offset: 0x8
      ::UnityEngine::Vector3 Normal;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single Penetration
      // Size: 0x4
      // Offset: 0x14
      float Penetration;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // System.Single SortingDistance
      // Size: 0x4
      // Offset: 0x18
      float SortingDistance;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Boolean IsBump
      // Size: 0x1
      // Offset: 0x1C
      bool IsBump;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Hit
      constexpr Hit(::UnityEngine::Collider* Collider_ = {}, ::UnityEngine::Vector3 Normal_ = {}, float Penetration_ = {}, float SortingDistance_ = {}, bool IsBump_ = {}) noexcept : Collider{Collider_}, Normal{Normal_}, Penetration{Penetration_}, SortingDistance{SortingDistance_}, IsBump{IsBump_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Collider Collider
      [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_Collider();
      // Get instance field reference: public UnityEngine.Vector3 Normal
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Normal();
      // Get instance field reference: public System.Single Penetration
      [[deprecated("Use field access instead!")]] float& dyn_Penetration();
      // Get instance field reference: System.Single SortingDistance
      [[deprecated("Use field access instead!")]] float& dyn_SortingDistance();
      // Get instance field reference: public System.Boolean IsBump
      [[deprecated("Use field access instead!")]] bool& dyn_IsBump();
    }; // Fusion.NetworkCharacterController/Hit
    #pragma pack(pop)
    static check_size<sizeof(NetworkCharacterController::Hit), 28 + sizeof(bool)> __Fusion_NetworkCharacterController_HitSizeCheck;
    static_assert(sizeof(NetworkCharacterController::Hit) == 0x1D);
    public:
    // private UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public Fusion.NetworkCharacterController/Configuration Config
    // Size: 0x8
    // Offset: 0x170
    ::Fusion::NetworkCharacterController::Configuration* Config;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkCharacterController::Configuration*) == 0x8);
    // private UnityEngine.Vector3 _offsetPosition
    // Size: 0xC
    // Offset: 0x178
    ::UnityEngine::Vector3 offsetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // static field const value: static private System.Int32 DEFAULT_HITS_CAPACITY
    static constexpr const int DEFAULT_HITS_CAPACITY = 128;
    // Get static field: static private System.Int32 DEFAULT_HITS_CAPACITY
    static int _get_DEFAULT_HITS_CAPACITY();
    // Set static field: static private System.Int32 DEFAULT_HITS_CAPACITY
    static void _set_DEFAULT_HITS_CAPACITY(int value);
    // static field const value: static private System.Int32 FLAGS_WORD_COUNT
    static constexpr const int FLAGS_WORD_COUNT = 1;
    // Get static field: static private System.Int32 FLAGS_WORD_COUNT
    static int _get_FLAGS_WORD_COUNT();
    // Set static field: static private System.Int32 FLAGS_WORD_COUNT
    static void _set_FLAGS_WORD_COUNT(int value);
    // static field const value: static private System.Int32 GROUNDED_FLAG
    static constexpr const int GROUNDED_FLAG = 1;
    // Get static field: static private System.Int32 GROUNDED_FLAG
    static int _get_GROUNDED_FLAG();
    // Set static field: static private System.Int32 GROUNDED_FLAG
    static void _set_GROUNDED_FLAG(int value);
    // static field const value: static private System.Int32 JUMPED_FLAG
    static constexpr const int JUMPED_FLAG = 2;
    // Get static field: static private System.Int32 JUMPED_FLAG
    static int _get_JUMPED_FLAG();
    // Set static field: static private System.Int32 JUMPED_FLAG
    static void _set_JUMPED_FLAG(int value);
    // static field const value: static private System.Int32 FLOAT_WORD_COUNT
    static constexpr const int FLOAT_WORD_COUNT = 1;
    // Get static field: static private System.Int32 FLOAT_WORD_COUNT
    static int _get_FLOAT_WORD_COUNT();
    // Set static field: static private System.Int32 FLOAT_WORD_COUNT
    static void _set_FLOAT_WORD_COUNT(int value);
    // static field const value: static private System.Int32 VECTOR_WORD_COUNT
    static constexpr const int VECTOR_WORD_COUNT = 3;
    // Get static field: static private System.Int32 VECTOR_WORD_COUNT
    static int _get_VECTOR_WORD_COUNT();
    // Set static field: static private System.Int32 VECTOR_WORD_COUNT
    static void _set_VECTOR_WORD_COUNT(int value);
    // static field const value: static private System.Int32 BITFLAGS_OFFSET
    static constexpr const int BITFLAGS_OFFSET = 25;
    // Get static field: static private System.Int32 BITFLAGS_OFFSET
    static int _get_BITFLAGS_OFFSET();
    // Set static field: static private System.Int32 BITFLAGS_OFFSET
    static void _set_BITFLAGS_OFFSET(int value);
    // static field const value: static private System.Int32 MAX_SPEED_OFFSET
    static constexpr const int MAX_SPEED_OFFSET = 26;
    // Get static field: static private System.Int32 MAX_SPEED_OFFSET
    static int _get_MAX_SPEED_OFFSET();
    // Set static field: static private System.Int32 MAX_SPEED_OFFSET
    static void _set_MAX_SPEED_OFFSET(int value);
    // static field const value: static private System.Int32 VELOCITY_OFFSET
    static constexpr const int VELOCITY_OFFSET = 27;
    // Get static field: static private System.Int32 VELOCITY_OFFSET
    static int _get_VELOCITY_OFFSET();
    // Set static field: static private System.Int32 VELOCITY_OFFSET
    static void _set_VELOCITY_OFFSET(int value);
    // static field const value: static private System.Int32 NCC_WORD_COUNT
    static constexpr const int NCC_WORD_COUNT = 30;
    // Get static field: static private System.Int32 NCC_WORD_COUNT
    static int _get_NCC_WORD_COUNT();
    // Set static field: static private System.Int32 NCC_WORD_COUNT
    static void _set_NCC_WORD_COUNT(int value);
    // static field const value: static private System.Int32 ROTATION_WORD_COUNT
    static constexpr const int ROTATION_WORD_COUNT = 4;
    // Get static field: static private System.Int32 ROTATION_WORD_COUNT
    static int _get_ROTATION_WORD_COUNT();
    // Set static field: static private System.Int32 ROTATION_WORD_COUNT
    static void _set_ROTATION_WORD_COUNT(int value);
    // Get static field: static private UnityEngine.Collider[] _hitsColliders
    static ::ArrayW<::UnityEngine::Collider*> _get__hitsColliders();
    // Set static field: static private UnityEngine.Collider[] _hitsColliders
    static void _set__hitsColliders(::ArrayW<::UnityEngine::Collider*> value);
    // Get static field: static private Fusion.NetworkCharacterController/Hit[] _hits
    static ::ArrayW<::Fusion::NetworkCharacterController::Hit> _get__hits();
    // Set static field: static private Fusion.NetworkCharacterController/Hit[] _hits
    static void _set__hits(::ArrayW<::Fusion::NetworkCharacterController::Hit> value);
    // Get instance field reference: private UnityEngine.Collider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__collider();
    // Get instance field reference: public Fusion.NetworkCharacterController/Configuration Config
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkCharacterController::Configuration*& dyn_Config();
    // Get instance field reference: private UnityEngine.Vector3 _offsetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__offsetPosition();
    // public System.Boolean get_Grounded()
    // Offset: 0x2B28224
    bool get_Grounded();
    // public System.Void set_Grounded(System.Boolean value)
    // Offset: 0x2B28234
    void set_Grounded(bool value);
    // public System.Boolean get_Jumped()
    // Offset: 0x2B28248
    bool get_Jumped();
    // public System.Void set_Jumped(System.Boolean value)
    // Offset: 0x2B28258
    void set_Jumped(bool value);
    // public System.Single get_MaxSpeed()
    // Offset: 0x2B2827C
    float get_MaxSpeed();
    // public System.Void set_MaxSpeed(System.Single value)
    // Offset: 0x2B282B8
    void set_MaxSpeed(float value);
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x2B28320
    ::UnityEngine::Vector3 get_Velocity();
    // public System.Void set_Velocity(UnityEngine.Vector3 value)
    // Offset: 0x2B28374
    void set_Velocity(::UnityEngine::Vector3 value);
    // public System.Void Jump(System.Boolean ignoreGrounded, System.Nullable`1<System.Single> impulse)
    // Offset: 0x2B28CCC
    void Jump(bool ignoreGrounded, ::System::Nullable_1<float> impulse);
    // public System.Void Move(UnityEngine.Vector3 direction, Fusion.NetworkCharacterController/ICallbacks callback, System.Nullable`1<UnityEngine.LayerMask> layerMask)
    // Offset: 0x2B28D9C
    void Move(::UnityEngine::Vector3 direction, ::Fusion::NetworkCharacterController::ICallbacks* callback, ::System::Nullable_1<::UnityEngine::LayerMask> layerMask);
    // public Fusion.NetworkCharacterController/Movement ComputeRawMovement(UnityEngine.Vector3 direction, Fusion.NetworkCharacterController/ICallbacks callback, System.Nullable`1<UnityEngine.LayerMask> layerMask)
    // Offset: 0x2B28EA4
    ::Fusion::NetworkCharacterController::Movement ComputeRawMovement(::UnityEngine::Vector3 direction, ::Fusion::NetworkCharacterController::ICallbacks* callback, ::System::Nullable_1<::UnityEngine::LayerMask> layerMask);
    // private System.Void ComputeRawSteer(ref Fusion.NetworkCharacterController/Movement movementPack, System.Single dt)
    // Offset: 0x2B2A1C4
    void ComputeRawSteer(ByRef<::Fusion::NetworkCharacterController::Movement> movementPack, float dt);
    // static private System.Void QuickSort(Fusion.NetworkCharacterController/Hit[] A, System.Int32 lo, System.Int32 hi)
    // Offset: 0x2B2A648
    static void QuickSort(::ArrayW<::Fusion::NetworkCharacterController::Hit> A, int lo, int hi);
    // public override System.Int32 get_PositionWordOffset()
    // Offset: 0x2B2821C
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Int32 NetworkTransformObsolete::get_PositionWordOffset()
    int get_PositionWordOffset();
    // protected override System.Void Awake()
    // Offset: 0x2B28424
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Void NetworkTransformObsolete::Awake()
    void Awake();
    // protected override System.Void Reset()
    // Offset: 0x2B285EC
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Void NetworkTransformObsolete::Reset()
    void Reset();
    // protected override System.Void ApplyQueuedTeleport()
    // Offset: 0x2B28720
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Void NetworkTransformObsolete::ApplyQueuedTeleport()
    void ApplyQueuedTeleport();
    // public override System.Void Spawned()
    // Offset: 0x2B28A50
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Void NetworkTransformObsolete::Spawned()
    void Spawned();
    // public System.Void .ctor()
    // Offset: 0x2B2A7FC
    // Implemented from: Fusion.NetworkTransformObsolete
    // Base method: System.Void NetworkTransformObsolete::.ctor()
    // Base method: System.Void NetworkTransformAnchor::.ctor()
    // Base method: System.Void NetworkAreaOfInterestBehaviour::.ctor()
    // Base method: System.Void NetworkBehaviour::.ctor()
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkCharacterController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkCharacterController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkCharacterController*, creationType>()));
    }
  }; // Fusion.NetworkCharacterController
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkCharacterController::Hit, "Fusion", "NetworkCharacterController/Hit");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::get_Grounded
// Il2CppName: get_Grounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::get_Grounded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "get_Grounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::set_Grounded
// Il2CppName: set_Grounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(bool)>(&Fusion::NetworkCharacterController::set_Grounded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "set_Grounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::get_Jumped
// Il2CppName: get_Jumped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::get_Jumped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "get_Jumped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::set_Jumped
// Il2CppName: set_Jumped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(bool)>(&Fusion::NetworkCharacterController::set_Jumped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "set_Jumped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::get_MaxSpeed
// Il2CppName: get_MaxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::get_MaxSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "get_MaxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::set_MaxSpeed
// Il2CppName: set_MaxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(float)>(&Fusion::NetworkCharacterController::set_MaxSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "set_MaxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::set_Velocity
// Il2CppName: set_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(::UnityEngine::Vector3)>(&Fusion::NetworkCharacterController::set_Velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "set_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Jump
// Il2CppName: Jump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(bool, ::System::Nullable_1<float>)>(&Fusion::NetworkCharacterController::Jump)> {
  static const MethodInfo* get() {
    static auto* ignoreGrounded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* impulse = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "Jump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ignoreGrounded, impulse});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(::UnityEngine::Vector3, ::Fusion::NetworkCharacterController::ICallbacks*, ::System::Nullable_1<::UnityEngine::LayerMask>)>(&Fusion::NetworkCharacterController::Move)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkCharacterController/ICallbacks")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, callback, layerMask});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::ComputeRawMovement
// Il2CppName: ComputeRawMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkCharacterController::Movement (Fusion::NetworkCharacterController::*)(::UnityEngine::Vector3, ::Fusion::NetworkCharacterController::ICallbacks*, ::System::Nullable_1<::UnityEngine::LayerMask>)>(&Fusion::NetworkCharacterController::ComputeRawMovement)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkCharacterController/ICallbacks")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "ComputeRawMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, callback, layerMask});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::ComputeRawSteer
// Il2CppName: ComputeRawSteer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)(ByRef<::Fusion::NetworkCharacterController::Movement>, float)>(&Fusion::NetworkCharacterController::ComputeRawSteer)> {
  static const MethodInfo* get() {
    static auto* movementPack = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkCharacterController/Movement")->this_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "ComputeRawSteer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{movementPack, dt});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::QuickSort
// Il2CppName: QuickSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Fusion::NetworkCharacterController::Hit>, int, int)>(&Fusion::NetworkCharacterController::QuickSort)> {
  static const MethodInfo* get() {
    static auto* A = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "NetworkCharacterController/Hit"), 1)->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "QuickSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, lo, hi});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::get_PositionWordOffset
// Il2CppName: get_PositionWordOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::get_PositionWordOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "get_PositionWordOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::ApplyQueuedTeleport
// Il2CppName: ApplyQueuedTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::ApplyQueuedTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "ApplyQueuedTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkCharacterController::*)()>(&Fusion::NetworkCharacterController::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkCharacterController*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkCharacterController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
