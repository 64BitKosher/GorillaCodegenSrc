// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: TickAccumulator
  struct TickAccumulator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::TickAccumulator, "Fusion", "TickAccumulator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x15
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.TickAccumulator
  // [TokenAttribute] Offset: FFFFFFFF
  struct TickAccumulator/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Double _time
    // Size: 0x8
    // Offset: 0x0
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _scale
    // Size: 0x8
    // Offset: 0x8
    double scale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 _ticks
    // Size: 0x4
    // Offset: 0x10
    int ticks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _running
    // Size: 0x1
    // Offset: 0x14
    bool running;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TickAccumulator
    constexpr TickAccumulator(double time_ = {}, double scale_ = {}, int ticks_ = {}, bool running_ = {}) noexcept : time{time_}, scale{scale_}, ticks{ticks_}, running{running_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Double _time
    [[deprecated("Use field access instead!")]] double& dyn__time();
    // Get instance field reference: private System.Double _scale
    [[deprecated("Use field access instead!")]] double& dyn__scale();
    // Get instance field reference: private System.Int32 _ticks
    [[deprecated("Use field access instead!")]] int& dyn__ticks();
    // Get instance field reference: private System.Boolean _running
    [[deprecated("Use field access instead!")]] bool& dyn__running();
    // public System.Int32 get_Pending()
    // Offset: 0x2B4A768
    int get_Pending();
    // public System.Double get_Remainder()
    // Offset: 0x2B4A770
    double get_Remainder();
    // public System.Boolean get_Running()
    // Offset: 0x2B4A778
    bool get_Running();
    // public System.Double get_TimeScale()
    // Offset: 0x2B4A780
    double get_TimeScale();
    // public System.Void set_TimeScale(System.Double value)
    // Offset: 0x2B4A788
    void set_TimeScale(double value);
    // public System.Single Alpha(System.Double step)
    // Offset: 0x2B4A790
    float Alpha(double step);
    // public System.Void AddTicks(System.Int32 ticks)
    // Offset: 0x2B4A804
    void AddTicks(int ticks);
    // public System.Void AddTime(System.Double dt, System.Double step, System.Nullable`1<System.Int32> maxTicks)
    // Offset: 0x2B4A814
    void AddTime(double dt, double step, ::System::Nullable_1<int> maxTicks);
    // public System.Void Stop()
    // Offset: 0x2B4A8E8
    void Stop();
    // public System.Void Start()
    // Offset: 0x2B4A8F0
    void Start();
    // public System.Boolean ConsumeTick(out System.Boolean last)
    // Offset: 0x2B4A8FC
    bool ConsumeTick(ByRef<bool> last);
    // static public Fusion.TickAccumulator StartNew()
    // Offset: 0x2B4A92C
    static ::Fusion::TickAccumulator StartNew();
    // public override System.String ToString()
    // Offset: 0x2B4A950
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.TickAccumulator
  #pragma pack(pop)
  static check_size<sizeof(TickAccumulator), 20 + sizeof(bool)> __Fusion_TickAccumulatorSizeCheck;
  static_assert(sizeof(TickAccumulator) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::TickAccumulator::get_Pending
// Il2CppName: get_Pending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::get_Pending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "get_Pending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::get_Remainder
// Il2CppName: get_Remainder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::get_Remainder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "get_Remainder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::get_Running
// Il2CppName: get_Running
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::get_Running)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "get_Running", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::get_TimeScale
// Il2CppName: get_TimeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::get_TimeScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "get_TimeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::set_TimeScale
// Il2CppName: set_TimeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::TickAccumulator::*)(double)>(&Fusion::TickAccumulator::set_TimeScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "set_TimeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::Alpha
// Il2CppName: Alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::TickAccumulator::*)(double)>(&Fusion::TickAccumulator::Alpha)> {
  static const MethodInfo* get() {
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "Alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{step});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::AddTicks
// Il2CppName: AddTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::TickAccumulator::*)(int)>(&Fusion::TickAccumulator::AddTicks)> {
  static const MethodInfo* get() {
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "AddTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ticks});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::AddTime
// Il2CppName: AddTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::TickAccumulator::*)(double, double, ::System::Nullable_1<int>)>(&Fusion::TickAccumulator::AddTime)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* step = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* maxTicks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "AddTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt, step, maxTicks});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::ConsumeTick
// Il2CppName: ConsumeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TickAccumulator::*)(ByRef<bool>)>(&Fusion::TickAccumulator::ConsumeTick)> {
  static const MethodInfo* get() {
    static auto* last = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "ConsumeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{last});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::StartNew
// Il2CppName: StartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::TickAccumulator (*)()>(&Fusion::TickAccumulator::StartNew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "StartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickAccumulator::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::TickAccumulator::*)()>(&Fusion::TickAccumulator::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickAccumulator), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
