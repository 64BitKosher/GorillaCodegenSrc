// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkAreaOfInterestBehaviour
#include "Fusion/NetworkAreaOfInterestBehaviour.hpp"
// Including type: Fusion.IBeforeAllTicks
#include "Fusion/IBeforeAllTicks.hpp"
// Including type: Fusion.IAfterAllTicks
#include "Fusion/IAfterAllTicks.hpp"
// Including type: Fusion.IRemotePrefabCreated
#include "Fusion/IRemotePrefabCreated.hpp"
// Including type: Fusion.IBeforeCopyPreviousState
#include "Fusion/IBeforeCopyPreviousState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: InterpolationData
  struct InterpolationData;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkTransformAnchor
  class NetworkTransformAnchor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkTransformAnchor);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransformAnchor*, "Fusion", "NetworkTransformAnchor");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkTransformAnchor
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [OrderAfterAttribute] Offset: FFFFFFFF
  class NetworkTransformAnchor : public ::Fusion::NetworkAreaOfInterestBehaviour/*, public ::Fusion::IBeforeAllTicks, public ::Fusion::IAfterAllTicks, public ::Fusion::IRemotePrefabCreated, public ::Fusion::IBeforeCopyPreviousState*/ {
    public:
    public:
    // protected UnityEngine.Transform _interpolationTarget
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* interpolationTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected System.Boolean DetachInterpTarget
    // Size: 0x1
    // Offset: 0x80
    bool DetachInterpTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean SyncParent
    // Size: 0x1
    // Offset: 0x81
    bool SyncParent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SyncParent and: transform
    char __padding2[0x6] = {};
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::IBeforeAllTicks
    operator ::Fusion::IBeforeAllTicks() noexcept {
      return *reinterpret_cast<::Fusion::IBeforeAllTicks*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IAfterAllTicks
    operator ::Fusion::IAfterAllTicks() noexcept {
      return *reinterpret_cast<::Fusion::IAfterAllTicks*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IRemotePrefabCreated
    operator ::Fusion::IRemotePrefabCreated() noexcept {
      return *reinterpret_cast<::Fusion::IRemotePrefabCreated*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IBeforeCopyPreviousState
    operator ::Fusion::IBeforeCopyPreviousState() noexcept {
      return *reinterpret_cast<::Fusion::IBeforeCopyPreviousState*>(this);
    }
    // static field const value: static protected System.Int32 PARENT_OFFSET
    static constexpr const int PARENT_OFFSET = 0;
    // Get static field: static protected System.Int32 PARENT_OFFSET
    static int _get_PARENT_OFFSET();
    // Set static field: static protected System.Int32 PARENT_OFFSET
    static void _set_PARENT_OFFSET(int value);
    // static field const value: static protected System.Int32 TELE_PAR_OFFSET
    static constexpr const int TELE_PAR_OFFSET = 2;
    // Get static field: static protected System.Int32 TELE_PAR_OFFSET
    static int _get_TELE_PAR_OFFSET();
    // Set static field: static protected System.Int32 TELE_PAR_OFFSET
    static void _set_TELE_PAR_OFFSET(int value);
    // static field const value: static private System.Int32 POSITION_OFFSET
    static constexpr const int POSITION_OFFSET = 4;
    // Get static field: static private System.Int32 POSITION_OFFSET
    static int _get_POSITION_OFFSET();
    // Set static field: static private System.Int32 POSITION_OFFSET
    static void _set_POSITION_OFFSET(int value);
    // static field const value: static protected System.Int32 ANCHOR_WORD_COUNT
    static constexpr const int ANCHOR_WORD_COUNT = 7;
    // Get static field: static protected System.Int32 ANCHOR_WORD_COUNT
    static int _get_ANCHOR_WORD_COUNT();
    // Set static field: static protected System.Int32 ANCHOR_WORD_COUNT
    static void _set_ANCHOR_WORD_COUNT(int value);
    // Get instance field reference: protected UnityEngine.Transform _interpolationTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__interpolationTarget();
    // Get instance field reference: protected System.Boolean DetachInterpTarget
    [[deprecated("Use field access instead!")]] bool& dyn_DetachInterpTarget();
    // Get instance field reference: protected System.Boolean SyncParent
    [[deprecated("Use field access instead!")]] bool& dyn_SyncParent();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // System.Boolean get_IsValidInterpolationTarget()
    // Offset: 0x2B2E394
    bool get_IsValidInterpolationTarget();
    // public UnityEngine.Transform get_InterpolationTarget()
    // Offset: 0x2B2E39C
    ::UnityEngine::Transform* get_InterpolationTarget();
    // public System.Void set_InterpolationTarget(UnityEngine.Transform value)
    // Offset: 0x2B2E3A4
    void set_InterpolationTarget(::UnityEngine::Transform* value);
    // protected UnityEngine.Transform get_Transform()
    // Offset: 0x2B289A8
    ::UnityEngine::Transform* get_Transform();
    // protected System.Void OnEnable()
    // Offset: 0x2B2B904
    void OnEnable();
    // protected System.Void Awake()
    // Offset: 0x2B2E3AC
    void Awake();
    // public System.Void RemotePrefabCreated()
    // Offset: 0x2B2E3F4
    void RemotePrefabCreated();
    // public System.Void BeforeAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B2E408
    void BeforeAllTicks(bool resimulation, int tickCount);
    // public System.Void AfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B2E44C
    void AfterAllTicks(bool resimulation, int tickCount);
    // public System.Void BeforeCopyPreviousState()
    // Offset: 0x2B2E488
    void BeforeCopyPreviousState();
    // System.Void CopyBuffers2Engine(System.Boolean posRotOnly)
    // Offset: 0x2B2E4CC
    void CopyBuffers2Engine(bool posRotOnly);
    // System.Void CopyEngine2Buffers(System.Boolean posRotOnly)
    // Offset: 0x2B2E4DC
    void CopyEngine2Buffers(bool posRotOnly);
    // protected System.Boolean Copy2EngineAnchorState()
    // Offset: 0x2B2C474
    bool Copy2EngineAnchorState();
    // protected System.Void Copy2BufferAnchorState(System.Int32 offset)
    // Offset: 0x2B2CA7C
    void Copy2BufferAnchorState(int offset);
    // static System.ValueTuple`2<Fusion.NetworkTransformAnchor,Fusion.NetworkTransformAnchor> GetParentsForInterpolation(Fusion.NetworkTransformAnchor nta, Fusion.NetworkRunner runner, System.Boolean isTeleport, ref Fusion.InterpolationData data, out System.Boolean fromParentIsValid, out System.Boolean toParentIsValid)
    // Offset: 0x2B2E55C
    static ::System::ValueTuple_2<::Fusion::NetworkTransformAnchor*, ::Fusion::NetworkTransformAnchor*> GetParentsForInterpolation(::Fusion::NetworkTransformAnchor* nta, ::Fusion::NetworkRunner* runner, bool isTeleport, ByRef<::Fusion::InterpolationData> data, ByRef<bool> fromParentIsValid, ByRef<bool> toParentIsValid);
    // public override System.Int32 get_PositionWordOffset()
    // Offset: 0x2B2E38C
    // Implemented from: Fusion.NetworkAreaOfInterestBehaviour
    // Base method: System.Int32 NetworkAreaOfInterestBehaviour::get_PositionWordOffset()
    int get_PositionWordOffset();
    // public override System.Void CopyBackingFieldsToState(System.Boolean firstTime)
    // Offset: 0x2B2E3B0
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::CopyBackingFieldsToState(System.Boolean firstTime)
    void CopyBackingFieldsToState(bool firstTime);
    // public override System.Void Render()
    // Offset: 0x2B2E4F0
    // Implemented from: Fusion.SimulationBehaviour
    // Base method: System.Void SimulationBehaviour::Render()
    void Render();
    // public System.Void .ctor()
    // Offset: 0x2B2E9B8
    // Implemented from: Fusion.NetworkAreaOfInterestBehaviour
    // Base method: System.Void NetworkAreaOfInterestBehaviour::.ctor()
    // Base method: System.Void NetworkBehaviour::.ctor()
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkTransformAnchor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkTransformAnchor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkTransformAnchor*, creationType>()));
    }
  }; // Fusion.NetworkTransformAnchor
  #pragma pack(pop)
  static check_size<sizeof(NetworkTransformAnchor), 136 + sizeof(::UnityEngine::Transform*)> __Fusion_NetworkTransformAnchorSizeCheck;
  static_assert(sizeof(NetworkTransformAnchor) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::get_IsValidInterpolationTarget
// Il2CppName: get_IsValidInterpolationTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::get_IsValidInterpolationTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "get_IsValidInterpolationTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::get_InterpolationTarget
// Il2CppName: get_InterpolationTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::get_InterpolationTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "get_InterpolationTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::set_InterpolationTarget
// Il2CppName: set_InterpolationTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(::UnityEngine::Transform*)>(&Fusion::NetworkTransformAnchor::set_InterpolationTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "set_InterpolationTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::RemotePrefabCreated
// Il2CppName: RemotePrefabCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::RemotePrefabCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "RemotePrefabCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::BeforeAllTicks
// Il2CppName: BeforeAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(bool, int)>(&Fusion::NetworkTransformAnchor::BeforeAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "BeforeAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::AfterAllTicks
// Il2CppName: AfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(bool, int)>(&Fusion::NetworkTransformAnchor::AfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "AfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::BeforeCopyPreviousState
// Il2CppName: BeforeCopyPreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::BeforeCopyPreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "BeforeCopyPreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::CopyBuffers2Engine
// Il2CppName: CopyBuffers2Engine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(bool)>(&Fusion::NetworkTransformAnchor::CopyBuffers2Engine)> {
  static const MethodInfo* get() {
    static auto* posRotOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "CopyBuffers2Engine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posRotOnly});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::CopyEngine2Buffers
// Il2CppName: CopyEngine2Buffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(bool)>(&Fusion::NetworkTransformAnchor::CopyEngine2Buffers)> {
  static const MethodInfo* get() {
    static auto* posRotOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "CopyEngine2Buffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posRotOnly});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::Copy2EngineAnchorState
// Il2CppName: Copy2EngineAnchorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::Copy2EngineAnchorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "Copy2EngineAnchorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::Copy2BufferAnchorState
// Il2CppName: Copy2BufferAnchorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(int)>(&Fusion::NetworkTransformAnchor::Copy2BufferAnchorState)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "Copy2BufferAnchorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::GetParentsForInterpolation
// Il2CppName: GetParentsForInterpolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::Fusion::NetworkTransformAnchor*, ::Fusion::NetworkTransformAnchor*> (*)(::Fusion::NetworkTransformAnchor*, ::Fusion::NetworkRunner*, bool, ByRef<::Fusion::InterpolationData>, ByRef<bool>, ByRef<bool>)>(&Fusion::NetworkTransformAnchor::GetParentsForInterpolation)> {
  static const MethodInfo* get() {
    static auto* nta = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransformAnchor")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* isTeleport = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    static auto* fromParentIsValid = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* toParentIsValid = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "GetParentsForInterpolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nta, runner, isTeleport, data, fromParentIsValid, toParentIsValid});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::get_PositionWordOffset
// Il2CppName: get_PositionWordOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::get_PositionWordOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "get_PositionWordOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)(bool)>(&Fusion::NetworkTransformAnchor::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* firstTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstTime});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransformAnchor::*)()>(&Fusion::NetworkTransformAnchor::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransformAnchor*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransformAnchor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
