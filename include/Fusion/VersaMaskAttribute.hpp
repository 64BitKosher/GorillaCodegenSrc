// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PropertyAttribute
#include "Fusion/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: VersaMaskAttribute
  class VersaMaskAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::VersaMaskAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::VersaMaskAttribute*, "Fusion", "VersaMaskAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.VersaMaskAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class VersaMaskAttribute : public ::Fusion::PropertyAttribute {
    public:
    public:
    // public System.Boolean DefinesZero
    // Size: 0x1
    // Offset: 0x14
    bool DefinesZero;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DefinesZero and: CastTo
    char __padding0[0x3] = {};
    // public System.Type CastTo
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* CastTo;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Boolean AlwaysExpanded
    // Size: 0x1
    // Offset: 0x20
    bool AlwaysExpanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ShowBitmask
    // Size: 0x1
    // Offset: 0x21
    bool ShowBitmask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.Boolean DefinesZero
    [[deprecated("Use field access instead!")]] bool& dyn_DefinesZero();
    // Get instance field reference: public System.Type CastTo
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_CastTo();
    // Get instance field reference: public System.Boolean AlwaysExpanded
    [[deprecated("Use field access instead!")]] bool& dyn_AlwaysExpanded();
    // Get instance field reference: public System.Boolean ShowBitmask
    [[deprecated("Use field access instead!")]] bool& dyn_ShowBitmask();
    // public System.Void .ctor(System.Boolean definesZero, System.Type castTo)
    // Offset: 0x2AFF664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VersaMaskAttribute* New_ctor(bool definesZero, ::System::Type* castTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::VersaMaskAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VersaMaskAttribute*, creationType>(definesZero, castTo)));
    }
  }; // Fusion.VersaMaskAttribute
  #pragma pack(pop)
  static check_size<sizeof(VersaMaskAttribute), 33 + sizeof(bool)> __Fusion_VersaMaskAttributeSizeCheck;
  static_assert(sizeof(VersaMaskAttribute) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::VersaMaskAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
