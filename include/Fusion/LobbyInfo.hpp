// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: LobbyInfo
  class LobbyInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::LobbyInfo);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LobbyInfo*, "Fusion", "LobbyInfo");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.LobbyInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class LobbyInfo : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <IsValid>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsValid and: Name
    char __padding0[0x7] = {};
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Region>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Region;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Boolean <IsValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsValid$k__BackingField();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.String <Region>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Region$k__BackingField();
    // public System.Boolean get_IsValid()
    // Offset: 0x2B6B418
    bool get_IsValid();
    // System.Void set_IsValid(System.Boolean value)
    // Offset: 0x2B6B420
    void set_IsValid(bool value);
    // public System.String get_Name()
    // Offset: 0x2B6B42C
    ::StringW get_Name();
    // System.Void set_Name(System.String value)
    // Offset: 0x2B6B434
    void set_Name(::StringW value);
    // public System.String get_Region()
    // Offset: 0x2B6B43C
    ::StringW get_Region();
    // System.Void set_Region(System.String value)
    // Offset: 0x2B6B444
    void set_Region(::StringW value);
    // System.Void Reset()
    // Offset: 0x2B6B44C
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x2B6B478
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LobbyInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LobbyInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LobbyInfo*, creationType>()));
    }
  }; // Fusion.LobbyInfo
  #pragma pack(pop)
  static check_size<sizeof(LobbyInfo), 32 + sizeof(::StringW)> __Fusion_LobbyInfoSizeCheck;
  static_assert(sizeof(LobbyInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LobbyInfo::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::LobbyInfo::*)()>(&Fusion::LobbyInfo::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::set_IsValid
// Il2CppName: set_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::LobbyInfo::*)(bool)>(&Fusion::LobbyInfo::set_IsValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "set_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::LobbyInfo::*)()>(&Fusion::LobbyInfo::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::LobbyInfo::*)(::StringW)>(&Fusion::LobbyInfo::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::get_Region
// Il2CppName: get_Region
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::LobbyInfo::*)()>(&Fusion::LobbyInfo::get_Region)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "get_Region", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::set_Region
// Il2CppName: set_Region
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::LobbyInfo::*)(::StringW)>(&Fusion::LobbyInfo::set_Region)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "set_Region", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::LobbyInfo::*)()>(&Fusion::LobbyInfo::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::LobbyInfo*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::LobbyInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
