// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Skipping declaration: DebuggerProxy because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: IElementReaderWriter`1<T>
  template<typename T>
  class IElementReaderWriter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: EqualityComparer`1<T>
  template<typename T>
  class EqualityComparer_1;
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkDictionary`2<K, V>
  template<typename K, typename V>
  struct NetworkDictionary_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Fusion::NetworkDictionary_2, "Fusion", "NetworkDictionary`2");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkDictionary`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  template<typename K, typename V>
  struct NetworkDictionary_2/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<K, V>>*/ {
    public:
    // Nested type: ::Fusion::NetworkDictionary_2::DebuggerProxy<K, V>
    class DebuggerProxy;
    // Nested type: ::Fusion::NetworkDictionary_2::Enumerator<K, V>
    struct Enumerator;
    // WARNING Size may be invalid!
    // Autogenerated type: Fusion.NetworkDictionary`2/DebuggerProxy
    // [TokenAttribute] Offset: FFFFFFFF
    class DebuggerProxy : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::Collections::Generic::Dictionary_2<K, V> {
      public:
      using declaring_type = NetworkDictionary_2<K, V>;
      static constexpr std::string_view NESTED_NAME = "DebuggerProxy";
      static constexpr bool IS_VALUE_TYPE = false;
      // Nested type: ::Fusion::NetworkDictionary_2::DebuggerProxy::$$c__DisplayClass0_0<K, V>
      class $$c__DisplayClass0_0;
      // WARNING Size may be invalid!
      // Autogenerated type: Fusion.NetworkDictionary`2/DebuggerProxy/<>c__DisplayClass0_0
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      class $$c__DisplayClass0_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
        public:
        using declaring_type = typename NetworkDictionary_2<K, V>::DebuggerProxy*;
        static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass0_0";
        static constexpr bool IS_VALUE_TYPE = false;
        public:
        // public Fusion.NetworkDictionary`2<K,V> dict
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        ::Fusion::NetworkDictionary_2<K, V> dict;
        public:
        // Creating conversion operator: operator ::Fusion::NetworkDictionary_2<K, V>
        constexpr operator ::Fusion::NetworkDictionary_2<K, V>() const noexcept {
          return dict;
        }
        // Autogenerated instance field getter
        // Get instance field: public Fusion.NetworkDictionary`2<K,V> dict
        [[deprecated("Use field access instead!")]] ::Fusion::NetworkDictionary_2<K, V>& dyn_dict() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::$$c__DisplayClass0_0::dyn_dict");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dict"))->offset;
          return *reinterpret_cast<::Fusion::NetworkDictionary_2<K, V>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // public System.Void .ctor()
        // Offset: 0xFFFFFFFFFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        static typename NetworkDictionary_2<K, V>::DebuggerProxy::$$c__DisplayClass0_0* New_ctor() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::$$c__DisplayClass0_0::.ctor");
          return THROW_UNLESS((::il2cpp_utils::New<typename NetworkDictionary_2<K, V>::DebuggerProxy::$$c__DisplayClass0_0*, creationType>()));
        }
        // System.Collections.Generic.KeyValuePair`2<K,V>[] <.ctor>b__0()
        // Offset: 0xFFFFFFFFFFFFFFFF
        ::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>> $_ctor$b__0() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::$$c__DisplayClass0_0::<.ctor>b__0");
          static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
          return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>, false>(this, ___internal__method);
        }
      }; // Fusion.NetworkDictionary`2/DebuggerProxy/<>c__DisplayClass0_0
      // Could not write size check! Type: Fusion.NetworkDictionary`2/DebuggerProxy/<>c__DisplayClass0_0 is generic, or has no fields that are valid for size checks!
      public:
      // public System.Lazy`1<System.Collections.Generic.KeyValuePair`2<K,V>[]> _items
      // Size: 0x8
      // Offset: 0x0
      ::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>* items;
      // Field size check
      static_assert(sizeof(::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>*
      constexpr operator ::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>*() const noexcept {
        return items;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Lazy`1<System.Collections.Generic.KeyValuePair`2<K,V>[]> _items
      [[deprecated("Use field access instead!")]] ::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>*& dyn__items() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::dyn__items");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
        return *reinterpret_cast<::System::Lazy_1<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(Fusion.NetworkDictionary`2<K,V> dict)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkDictionary_2<K, V>::DebuggerProxy* New_ctor(::Fusion::NetworkDictionary_2<K, V> dict) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkDictionary_2<K, V>::DebuggerProxy*, creationType>(dict)));
      }
      // public System.Collections.Generic.KeyValuePair`2<K,V>[] get_Items()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>> get_Items() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::DebuggerProxy::get_Items");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Items", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Collections::Generic::KeyValuePair_2<K, V>>, false>(this, ___internal__method);
      }
    }; // Fusion.NetworkDictionary`2/DebuggerProxy
    // Could not write size check! Type: Fusion.NetworkDictionary`2/DebuggerProxy is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkDictionary`2/Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>*/ {
      public:
      using declaring_type = NetworkDictionary_2<K, V>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Int32 _bucket
      // Size: 0x4
      // Offset: 0x0
      int bucket;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _entry
      // Size: 0x4
      // Offset: 0x0
      int entry;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private Fusion.NetworkDictionary`2<K,V> _dict
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::Fusion::NetworkDictionary_2<K, V> dict;
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(int bucket_ = {}, int entry_ = {}, ::Fusion::NetworkDictionary_2<K, V> dict_ = {}) noexcept : bucket{bucket_}, entry{entry_}, dict{dict_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>
      operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _bucket
      [[deprecated("Use field access instead!")]] int& dyn__bucket() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::dyn__bucket");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bucket"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _entry
      [[deprecated("Use field access instead!")]] int& dyn__entry() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::dyn__entry");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entry"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private Fusion.NetworkDictionary`2<K,V> _dict
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkDictionary_2<K, V>& dyn__dict() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::dyn__dict");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dict"))->offset;
        return *reinterpret_cast<::Fusion::NetworkDictionary_2<K, V>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(Fusion.NetworkDictionary`2<K,V> dict)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::Fusion::NetworkDictionary_2<K, V> dict) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dict)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dict);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.KeyValuePair`2<K,V> get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::KeyValuePair_2<K, V> get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::KeyValuePair_2<K, V>, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Fusion.NetworkDictionary`2/Enumerator
    // Could not write size check! Type: Fusion.NetworkDictionary`2/Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int32* _data
    // Size: 0x8
    // Offset: 0x0
    int* data;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32 _capacity
    // Size: 0x4
    // Offset: 0x0
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _nxtOffset
    // Size: 0x4
    // Offset: 0x0
    int nxtOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _keyOffset
    // Size: 0x4
    // Offset: 0x0
    int keyOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _valOffset
    // Size: 0x4
    // Offset: 0x0
    int valOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _entryStride
    // Size: 0x4
    // Offset: 0x0
    int entryStride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bucketsOffset
    // Size: 0x4
    // Offset: 0x0
    int bucketsOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _entriesOffset
    // Size: 0x4
    // Offset: 0x0
    int entriesOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.IElementReaderWriter`1<K> _keyReaderWriter
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::IElementReaderWriter_1<K>* keyReaderWriter;
    // Field size check
    static_assert(sizeof(::Fusion::IElementReaderWriter_1<K>*) == 0x8);
    // private Fusion.IElementReaderWriter`1<V> _valReaderWriter
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::IElementReaderWriter_1<V>* valReaderWriter;
    // Field size check
    static_assert(sizeof(::Fusion::IElementReaderWriter_1<V>*) == 0x8);
    // private System.Collections.Generic.EqualityComparer`1<K> _equalityComparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::EqualityComparer_1<K>* equalityComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::EqualityComparer_1<K>*) == 0x8);
    public:
    // Creating value type constructor for type: NetworkDictionary_2
    constexpr NetworkDictionary_2(int* data_ = {}, int capacity_ = {}, int nxtOffset_ = {}, int keyOffset_ = {}, int valOffset_ = {}, int entryStride_ = {}, int bucketsOffset_ = {}, int entriesOffset_ = {}, ::Fusion::IElementReaderWriter_1<K>* keyReaderWriter_ = {}, ::Fusion::IElementReaderWriter_1<V>* valReaderWriter_ = {}, ::System::Collections::Generic::EqualityComparer_1<K>* equalityComparer_ = {}) noexcept : data{data_}, capacity{capacity_}, nxtOffset{nxtOffset_}, keyOffset{keyOffset_}, valOffset{valOffset_}, entryStride{entryStride_}, bucketsOffset{bucketsOffset_}, entriesOffset{entriesOffset_}, keyReaderWriter{keyReaderWriter_}, valReaderWriter{valReaderWriter_}, equalityComparer{equalityComparer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<K, V>>
    operator ::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<K, V>>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::System::Collections::Generic::KeyValuePair_2<K, V>>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public System.Int32 META_WORD_COUNT
    static int _get_META_WORD_COUNT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_get_META_WORD_COUNT");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "META_WORD_COUNT")));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 META_WORD_COUNT
    static void _set_META_WORD_COUNT(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_set_META_WORD_COUNT");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "META_WORD_COUNT", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 FREE_OFFSET
    static int _get_FREE_OFFSET() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_get_FREE_OFFSET");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "FREE_OFFSET")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 FREE_OFFSET
    static void _set_FREE_OFFSET(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_set_FREE_OFFSET");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "FREE_OFFSET", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 FREE_COUNT_OFFSET
    static int _get_FREE_COUNT_OFFSET() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_get_FREE_COUNT_OFFSET");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "FREE_COUNT_OFFSET")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 FREE_COUNT_OFFSET
    static void _set_FREE_COUNT_OFFSET(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_set_FREE_COUNT_OFFSET");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "FREE_COUNT_OFFSET", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 USED_COUNT_OFFSET
    static int _get_USED_COUNT_OFFSET() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_get_USED_COUNT_OFFSET");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "USED_COUNT_OFFSET")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 USED_COUNT_OFFSET
    static void _set_USED_COUNT_OFFSET(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_set_USED_COUNT_OFFSET");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "USED_COUNT_OFFSET", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 INVALID_ENTRY
    static int _get_INVALID_ENTRY() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_get_INVALID_ENTRY");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "INVALID_ENTRY")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 INVALID_ENTRY
    static void _set_INVALID_ENTRY(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::_set_INVALID_ENTRY");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkDictionary_2<K, V>>::get(), "INVALID_ENTRY", value)));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32* _data
    [[deprecated("Use field access instead!")]] int*& dyn__data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
      return *reinterpret_cast<int**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _capacity
    [[deprecated("Use field access instead!")]] int& dyn__capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__capacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _nxtOffset
    [[deprecated("Use field access instead!")]] int& dyn__nxtOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__nxtOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nxtOffset"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _keyOffset
    [[deprecated("Use field access instead!")]] int& dyn__keyOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__keyOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyOffset"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _valOffset
    [[deprecated("Use field access instead!")]] int& dyn__valOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__valOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valOffset"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _entryStride
    [[deprecated("Use field access instead!")]] int& dyn__entryStride() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__entryStride");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entryStride"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _bucketsOffset
    [[deprecated("Use field access instead!")]] int& dyn__bucketsOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__bucketsOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bucketsOffset"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _entriesOffset
    [[deprecated("Use field access instead!")]] int& dyn__entriesOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__entriesOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entriesOffset"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Fusion.IElementReaderWriter`1<K> _keyReaderWriter
    [[deprecated("Use field access instead!")]] ::Fusion::IElementReaderWriter_1<K>*& dyn__keyReaderWriter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__keyReaderWriter");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyReaderWriter"))->offset;
      return *reinterpret_cast<::Fusion::IElementReaderWriter_1<K>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Fusion.IElementReaderWriter`1<V> _valReaderWriter
    [[deprecated("Use field access instead!")]] ::Fusion::IElementReaderWriter_1<V>*& dyn__valReaderWriter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__valReaderWriter");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_valReaderWriter"))->offset;
      return *reinterpret_cast<::Fusion::IElementReaderWriter_1<V>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.EqualityComparer`1<K> _equalityComparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::EqualityComparer_1<K>*& dyn__equalityComparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::dyn__equalityComparer");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_equalityComparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::EqualityComparer_1<K>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Int32 get__free()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get__free() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get__free");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get__free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set__free(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set__free(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::set__free");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set__free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Int32 get__freeCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get__freeCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get__freeCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get__freeCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set__freeCount(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set__freeCount(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::set__freeCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set__freeCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Int32 get__usedCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get__usedCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get__usedCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get__usedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set__usedCount(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set__usedCount(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::set__usedCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set__usedCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get_Capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public V get_Item(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    V get_Item(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<V, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(K key, V value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(K key, V value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void .ctor(System.Int32* data, System.Int32 capacity, Fusion.IElementReaderWriter`1<K> keyReaderWriter, Fusion.IElementReaderWriter`1<V> valReaderWriter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    NetworkDictionary_2(int* data, int capacity, ::Fusion::IElementReaderWriter_1<K>* keyReaderWriter, ::Fusion::IElementReaderWriter_1<V>* valReaderWriter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(keyReaderWriter), ::il2cpp_utils::ExtractType(valReaderWriter)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, capacity, keyReaderWriter, valReaderWriter);
    }
    // public Fusion.NetworkDictionary`2<K,V> Remap(System.Void* dictionary)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkDictionary_2<K, V> Remap(void* dictionary) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Remap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dictionary)})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkDictionary_2<K, V>, false>(this, ___internal__method, dictionary);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean ContainsKey(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsKey(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::ContainsKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContainsKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean ContainsValue(V value, System.Collections.Generic.IEqualityComparer`1<V> equalityComparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsValue(V value, ::System::Collections::Generic::IEqualityComparer_1<V>* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::ContainsValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContainsValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(equalityComparer)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value, equalityComparer);
    }
    // public V Get(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    V Get(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<V, false>(this, ___internal__method, key);
    }
    // public V Set(K key, V value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    V Set(K key, V value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<V, false>(this, ___internal__method, key, value);
    }
    // public System.Boolean Add(K key, V value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Add(K key, V value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, value);
    }
    // public System.Boolean TryGet(K key, out V value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGet(K key, ByRef<V> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<V&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // public System.Boolean Remove(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean Remove(K key, out V value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(K key, ByRef<V> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<V&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // private System.Int32 Insert(K key, V val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Insert(K key, V val) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(val)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key, val);
    }
    // private System.Int32 Find(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Find(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // private System.UInt32 GetBucketFromHashCode(System.Int32 hash)
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint GetBucketFromHashCode(int hash) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::GetBucketFromHashCode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBucketFromHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash)})));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, hash);
    }
    // private System.Void ClrEntry(System.Int32 entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClrEntry(int entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::ClrEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClrEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry);
    }
    // private K GetKey(System.Int32 entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    K GetKey(int entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::GetKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      return ::il2cpp_utils::RunMethodRethrow<K, false>(this, ___internal__method, entry);
    }
    // private System.Void SetKey(System.Int32 entry, K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetKey(int entry, K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::SetKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(key)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry, key);
    }
    // private V GetVal(System.Int32 entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    V GetVal(int entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::GetVal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetVal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      return ::il2cpp_utils::RunMethodRethrow<V, false>(this, ___internal__method, entry);
    }
    // private System.Void SetVal(System.Int32 entry, V val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetVal(int entry, V val) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::SetVal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetVal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(val)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry, val);
    }
    // private System.Int32 GetNxt(System.Int32 entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetNxt(int entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::GetNxt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetNxt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, entry);
    }
    // private System.Void SetNxt(System.Int32 entry, System.Int32 next)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetNxt(int entry, int next) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::SetNxt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetNxt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(next)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry, next);
    }
    // public Fusion.NetworkDictionary`2/Enumerator<K,V> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Fusion::NetworkDictionary_2<K, V>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<K,V>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,V>>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>* System_Collections_Generic_IEnumerable$System_Collections_Generic_KeyValuePair$K_V$$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,V>>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkDictionary_2<K, V>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<K, V>>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkDictionary_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkDictionary_2<K, V>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Fusion.NetworkDictionary`2
  // Could not write size check! Type: Fusion.NetworkDictionary`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
