// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransform
#include "Fusion/NetworkTransform.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkTransform::IInterpolationImplementation);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransform::IInterpolationImplementation*, "Fusion", "NetworkTransform/IInterpolationImplementation");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkTransform/IInterpolationImplementation
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkTransform::IInterpolationImplementation {
    public:
    // public System.Boolean TryComputeInterpolatedTransform(out Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryComputeInterpolatedTransform(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // public System.Void Reset(Fusion.NetworkTransform nt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset(::Fusion::NetworkTransform* nt);
    // public System.Void AfterApplyInterpolatedTransform()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AfterApplyInterpolatedTransform();
  }; // Fusion.NetworkTransform/IInterpolationImplementation
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkTransform::IInterpolationImplementation::TryComputeInterpolatedTransform
// Il2CppName: TryComputeInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::IInterpolationImplementation::*)(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::IInterpolationImplementation::TryComputeInterpolatedTransform)> {
  static const MethodInfo* get() {
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::IInterpolationImplementation*), "TryComputeInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::IInterpolationImplementation::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::IInterpolationImplementation::*)(::Fusion::NetworkTransform*)>(&Fusion::NetworkTransform::IInterpolationImplementation::Reset)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::IInterpolationImplementation*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::IInterpolationImplementation::AfterApplyInterpolatedTransform
// Il2CppName: AfterApplyInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::IInterpolationImplementation::*)()>(&Fusion::NetworkTransform::IInterpolationImplementation::AfterApplyInterpolatedTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::IInterpolationImplementation*), "AfterApplyInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
