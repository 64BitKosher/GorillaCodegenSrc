// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.RpcSendMessageResult
#include "Fusion/RpcSendMessageResult.hpp"
// Including type: Fusion.PlayerRefSet
#include "Fusion/PlayerRefSet.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RpcSendResult
  struct RpcSendResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RpcSendResult, "Fusion", "RpcSendResult");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.RpcSendResult
  // [TokenAttribute] Offset: FFFFFFFF
  struct RpcSendResult/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::RpcSendResult::$$c__DisplayClass4_0
    struct $$c__DisplayClass4_0;
    public:
    // public Fusion.RpcSendMessageResult Result
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::RpcSendMessageResult Result;
    // Field size check
    static_assert(sizeof(::Fusion::RpcSendMessageResult) == 0x4);
    // public System.Int32 MessageSize
    // Size: 0x4
    // Offset: 0x4
    int MessageSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.PlayerRefSet Receivers
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::PlayerRefSet Receivers;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRefSet) == 0x8);
    // Padding between fields: Receivers and: CulledReceivers
    char __padding2[0x18] = {};
    // public Fusion.PlayerRefSet CulledReceivers
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::PlayerRefSet CulledReceivers;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRefSet) == 0x8);
    public:
    // Creating value type constructor for type: RpcSendResult
    constexpr RpcSendResult(::Fusion::RpcSendMessageResult Result_ = {}, int MessageSize_ = {}, ::Fusion::PlayerRefSet Receivers_ = {}, ::Fusion::PlayerRefSet CulledReceivers_ = {}) noexcept : Result{Result_}, MessageSize{MessageSize_}, Receivers{Receivers_}, CulledReceivers{CulledReceivers_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.RpcSendMessageResult Result
    [[deprecated("Use field access instead!")]] ::Fusion::RpcSendMessageResult& dyn_Result();
    // Get instance field reference: public System.Int32 MessageSize
    [[deprecated("Use field access instead!")]] int& dyn_MessageSize();
    // Get instance field reference: public Fusion.PlayerRefSet Receivers
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRefSet& dyn_Receivers();
    // Get instance field reference: public Fusion.PlayerRefSet CulledReceivers
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRefSet& dyn_CulledReceivers();
    // static System.Void <ToString>g__AppendPlayers|4_0(Fusion.PlayerRefSet players, ref Fusion.RpcSendResult/<>c__DisplayClass4_0 )
    // Offset: 0x2B51410
    static void $ToString$g__AppendPlayers_4_0(::Fusion::PlayerRefSet players, ByRef<::Fusion::RpcSendResult::$$c__DisplayClass4_0> param_1);
    // public override System.String ToString()
    // Offset: 0x2B511E4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.RpcSendResult
  #pragma pack(pop)
  static check_size<sizeof(RpcSendResult), 40 + sizeof(::Fusion::PlayerRefSet)> __Fusion_RpcSendResultSizeCheck;
  static_assert(sizeof(RpcSendResult) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RpcSendResult::$ToString$g__AppendPlayers_4_0
// Il2CppName: <ToString>g__AppendPlayers|4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::PlayerRefSet, ByRef<::Fusion::RpcSendResult::$$c__DisplayClass4_0>)>(&Fusion::RpcSendResult::$ToString$g__AppendPlayers_4_0)> {
  static const MethodInfo* get() {
    static auto* players = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRefSet")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Fusion", "RpcSendResult/<>c__DisplayClass4_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcSendResult), "<ToString>g__AppendPlayers|4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{players, param_1});
  }
};
// Writing MetadataGetter for method: Fusion::RpcSendResult::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::RpcSendResult::*)()>(&Fusion::RpcSendResult::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcSendResult), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
