// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: ISampleData
  class ISampleData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::ISampleData);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::ISampleData*, "Fusion", "ISampleData");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.ISampleData
  // [TokenAttribute] Offset: FFFFFFFF
  class ISampleData {
    public:
    // public System.Int32 get_TickValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_TickValue();
    // public System.Single get_TimeValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_TimeValue();
    // public System.Single get_FloatValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_FloatValue();
  }; // Fusion.ISampleData
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::ISampleData::get_TickValue
// Il2CppName: get_TickValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::ISampleData::*)()>(&Fusion::ISampleData::get_TickValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ISampleData*), "get_TickValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ISampleData::get_TimeValue
// Il2CppName: get_TimeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::ISampleData::*)()>(&Fusion::ISampleData::get_TimeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ISampleData*), "get_TimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ISampleData::get_FloatValue
// Il2CppName: get_FloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::ISampleData::*)()>(&Fusion::ISampleData::get_FloatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ISampleData*), "get_FloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
