// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.UTF32Tools
#include "Fusion/UTF32Tools.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::UTF32Tools::CharEnumerator, "Fusion", "UTF32Tools/CharEnumerator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.UTF32Tools/CharEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct UTF32Tools::CharEnumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>*/ {
    public:
    public:
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x0
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x4
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char _pendingLowSurrogate
    // Size: 0x2
    // Offset: 0x8
    ::Il2CppChar pendingLowSurrogate;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: pendingLowSurrogate and: ptr
    char __padding2[0x6] = {};
    // private System.UInt32* _ptr
    // Size: 0x8
    // Offset: 0x10
    uint* ptr;
    // Field size check
    static_assert(sizeof(uint*) == 0x8);
    // private System.Char <Current>k__BackingField
    // Size: 0x2
    // Offset: 0x18
    ::Il2CppChar Current;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    public:
    // Creating value type constructor for type: CharEnumerator
    constexpr CharEnumerator(int index_ = {}, int length_ = {}, ::Il2CppChar pendingLowSurrogate_ = {}, uint* ptr_ = {}, ::Il2CppChar Current_ = {}) noexcept : index{index_}, length{length_}, pendingLowSurrogate{pendingLowSurrogate_}, ptr{ptr_}, Current{Current_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppChar>*>(this);
    }
    // Get instance field reference: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index();
    // Get instance field reference: private System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length();
    // Get instance field reference: private System.Char _pendingLowSurrogate
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__pendingLowSurrogate();
    // Get instance field reference: private System.UInt32* _ptr
    [[deprecated("Use field access instead!")]] uint*& dyn__ptr();
    // Get instance field reference: private System.Char <Current>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_$Current$k__BackingField();
    // System.Void .ctor(System.UInt32* utf32, System.Int32 length)
    // Offset: 0x2ADAF98
    CharEnumerator(uint* utf32, int length);
    // public System.Char get_Current()
    // Offset: 0x2ADAFAC
    ::Il2CppChar get_Current();
    // private System.Void set_Current(System.Char value)
    // Offset: 0x2ADAFB4
    void set_Current(::Il2CppChar value);
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2ADAFBC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void Dispose()
    // Offset: 0x2ADB018
    void Dispose();
    // public System.Boolean MoveNext()
    // Offset: 0x2ADB01C
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x2ADB078
    void Reset();
  }; // Fusion.UTF32Tools/CharEnumerator
  #pragma pack(pop)
  static check_size<sizeof(UTF32Tools::CharEnumerator), 24 + sizeof(::Il2CppChar)> __Fusion_UTF32Tools_CharEnumeratorSizeCheck;
  static_assert(sizeof(UTF32Tools::CharEnumerator) == 0x1A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::CharEnumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Fusion::UTF32Tools::CharEnumerator::*)()>(&Fusion::UTF32Tools::CharEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::set_Current
// Il2CppName: set_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::UTF32Tools::CharEnumerator::*)(::Il2CppChar)>(&Fusion::UTF32Tools::CharEnumerator::set_Current)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "set_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Fusion::UTF32Tools::CharEnumerator::*)()>(&Fusion::UTF32Tools::CharEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::UTF32Tools::CharEnumerator::*)()>(&Fusion::UTF32Tools::CharEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::UTF32Tools::CharEnumerator::*)()>(&Fusion::UTF32Tools::CharEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UTF32Tools::CharEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::UTF32Tools::CharEnumerator::*)()>(&Fusion::UTF32Tools::CharEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UTF32Tools::CharEnumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
