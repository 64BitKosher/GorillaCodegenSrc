// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Radix
#include "Fusion/Radix.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Radix::SortTarget, "Fusion", "Radix/SortTarget");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Radix/SortTarget
  // [TokenAttribute] Offset: FFFFFFFF
  struct Radix::SortTarget/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte ValueByte0
    // Size: 0x1
    // Offset: 0x0
    uint8_t ValueByte0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte ValueByte1
    // Size: 0x1
    // Offset: 0x1
    uint8_t ValueByte1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte ValueByte2
    // Size: 0x1
    // Offset: 0x2
    uint8_t ValueByte2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte ValueByte3
    // Size: 0x1
    // Offset: 0x3
    uint8_t ValueByte3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // WARNING Could not write padding for field: ValueByte3! Ignoring it instead (and assuming correct layout regardless)...
    // public System.Int32 SortData
    // Size: 0x4
    // Offset: 0x0
    int SortData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 UserData
    // Size: 0x4
    // Offset: 0x4
    int UserData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SortTarget
    constexpr SortTarget(uint8_t ValueByte0_ = {}, uint8_t ValueByte1_ = {}, uint8_t ValueByte2_ = {}, uint8_t ValueByte3_ = {}, int SortData_ = {}, int UserData_ = {}) noexcept : ValueByte0{ValueByte0_}, ValueByte1{ValueByte1_}, ValueByte2{ValueByte2_}, ValueByte3{ValueByte3_}, SortData{SortData_}, UserData{UserData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 8;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // static field const value: static public System.Int32 ALIGNMENT
    static constexpr const int ALIGNMENT = 4;
    // Get static field: static public System.Int32 ALIGNMENT
    static int _get_ALIGNMENT();
    // Set static field: static public System.Int32 ALIGNMENT
    static void _set_ALIGNMENT(int value);
    // Get instance field reference: public System.Byte ValueByte0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ValueByte0();
    // Get instance field reference: public System.Byte ValueByte1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ValueByte1();
    // Get instance field reference: public System.Byte ValueByte2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ValueByte2();
    // Get instance field reference: public System.Byte ValueByte3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ValueByte3();
    // Get instance field reference: public System.Int32 SortData
    [[deprecated("Use field access instead!")]] int& dyn_SortData();
    // Get instance field reference: public System.Int32 UserData
    [[deprecated("Use field access instead!")]] int& dyn_UserData();
  }; // Fusion.Radix/SortTarget
  #pragma pack(pop)
  static check_size<sizeof(Radix::SortTarget), 4 + sizeof(int)> __Fusion_Radix_SortTargetSizeCheck;
  static_assert(sizeof(Radix::SortTarget) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
