// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.BitSet128
#include "Fusion/BitSet128.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::BitSet128::Enumerator, "Fusion", "BitSet128/Enumerator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.BitSet128/Enumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct BitSet128::Enumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<int>*/ {
    public:
    public:
    // private System.UInt64* _bits
    // Size: 0x8
    // Offset: 0x0
    uint64_t* bits;
    // Field size check
    static_assert(sizeof(uint64_t*) == 0x8);
    // private System.Int32 _bit
    // Size: 0x4
    // Offset: 0x8
    int bit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Enumerator
    constexpr Enumerator(uint64_t* bits_ = {}, int bit_ = {}) noexcept : bits{bits_}, bit{bit_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<int>
    operator ::System::Collections::Generic::IEnumerator_1<int>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<int>*>(this);
    }
    // Get instance field reference: private System.UInt64* _bits
    [[deprecated("Use field access instead!")]] uint64_t*& dyn__bits();
    // Get instance field reference: private System.Int32 _bit
    [[deprecated("Use field access instead!")]] int& dyn__bit();
    // public System.Void .ctor(System.UInt64* bits)
    // Offset: 0x2B47308
    Enumerator(uint64_t* bits);
    // public System.Int32 get_Current()
    // Offset: 0x2B473D0
    int get_Current();
    // public System.Void Reset()
    // Offset: 0x2B473D8
    void Reset();
    // public System.Boolean MoveNext()
    // Offset: 0x2B473E4
    bool MoveNext();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2B47444
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void Dispose()
    // Offset: 0x2B474A0
    void Dispose();
  }; // Fusion.BitSet128/Enumerator
  #pragma pack(pop)
  static check_size<sizeof(BitSet128::Enumerator), 8 + sizeof(int)> __Fusion_BitSet128_EnumeratorSizeCheck;
  static_assert(sizeof(BitSet128::Enumerator) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::Enumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::BitSet128::Enumerator::*)()>(&Fusion::BitSet128::Enumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BitSet128::Enumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BitSet128::Enumerator::*)()>(&Fusion::BitSet128::Enumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BitSet128::Enumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::BitSet128::Enumerator::*)()>(&Fusion::BitSet128::Enumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BitSet128::Enumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Fusion::BitSet128::Enumerator::*)()>(&Fusion::BitSet128::Enumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BitSet128::Enumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BitSet128::Enumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BitSet128::Enumerator::*)()>(&Fusion::BitSet128::Enumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BitSet128::Enumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
