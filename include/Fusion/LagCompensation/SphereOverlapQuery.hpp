// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::LagCompensation
namespace Fusion::LagCompensation {
  // Forward declaring type: Query
  struct Query;
  // Forward declaring type: PreProcessingDelegate
  class PreProcessingDelegate;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: HitOptions
  struct HitOptions;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: QueryTriggerInteraction
  struct QueryTriggerInteraction;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Fusion.LagCompensation
namespace Fusion::LagCompensation {
  // Forward declaring type: SphereOverlapQuery
  struct SphereOverlapQuery;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensation::SphereOverlapQuery, "Fusion.LagCompensation", "SphereOverlapQuery");
// Type namespace: Fusion.LagCompensation
namespace Fusion::LagCompensation {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensation.SphereOverlapQuery
  // [TokenAttribute] Offset: FFFFFFFF
  struct SphereOverlapQuery/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Center
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0xC
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SphereOverlapQuery
    constexpr SphereOverlapQuery(::UnityEngine::Vector3 Center_ = {}, float Radius_ = {}) noexcept : Center{Center_}, Radius{Radius_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Center();
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // static public Fusion.LagCompensation.Query CreateQuery(UnityEngine.Vector3 center, System.Single radius, Fusion.PlayerRef player, System.Int32 layerMask, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B89914
    static ::Fusion::LagCompensation::Query CreateQuery(::UnityEngine::Vector3 center, float radius, ::Fusion::PlayerRef player, int layerMask, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // static public Fusion.LagCompensation.Query CreateQuery(UnityEngine.Vector3 center, System.Single radius, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Int32 layerMask, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B899CC
    static ::Fusion::LagCompensation::Query CreateQuery(::UnityEngine::Vector3 center, float radius, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha, int layerMask, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
  }; // Fusion.LagCompensation.SphereOverlapQuery
  #pragma pack(pop)
  static check_size<sizeof(SphereOverlapQuery), 12 + sizeof(float)> __Fusion_LagCompensation_SphereOverlapQuerySizeCheck;
  static_assert(sizeof(SphereOverlapQuery) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LagCompensation::SphereOverlapQuery::CreateQuery
// Il2CppName: CreateQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LagCompensation::Query (*)(::UnityEngine::Vector3, float, ::Fusion::PlayerRef, int, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::LagCompensation::SphereOverlapQuery::CreateQuery)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensation::SphereOverlapQuery), "CreateQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, player, layerMask, options, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensation::SphereOverlapQuery::CreateQuery
// Il2CppName: CreateQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LagCompensation::Query (*)(::UnityEngine::Vector3, float, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>, int, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::LagCompensation::SphereOverlapQuery::CreateQuery)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensation::SphereOverlapQuery), "CreateQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, tick, tickTo, alpha, layerMask, options, queryTriggerInteraction, preProcessRoots});
  }
};
