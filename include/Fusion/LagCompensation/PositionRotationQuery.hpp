// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Hitbox
  class Hitbox;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
}
// Forward declaring namespace: Fusion::LagCompensation
namespace Fusion::LagCompensation {
  // Forward declaring type: Query
  struct Query;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Fusion.LagCompensation
namespace Fusion::LagCompensation {
  // Forward declaring type: PositionRotationQuery
  struct PositionRotationQuery;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensation::PositionRotationQuery, "Fusion.LagCompensation", "PositionRotationQuery");
// Type namespace: Fusion.LagCompensation
namespace Fusion::LagCompensation {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensation.PositionRotationQuery
  // [TokenAttribute] Offset: FFFFFFFF
  struct PositionRotationQuery/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Hitbox Hitbox
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::Hitbox* Hitbox;
    // Field size check
    static_assert(sizeof(::Fusion::Hitbox*) == 0x8);
    public:
    // Creating value type constructor for type: PositionRotationQuery
    constexpr PositionRotationQuery(::Fusion::Hitbox* Hitbox_ = {}) noexcept : Hitbox{Hitbox_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Fusion::Hitbox*
    constexpr operator ::Fusion::Hitbox*() const noexcept {
      return Hitbox;
    }
    // Get instance field reference: public Fusion.Hitbox Hitbox
    [[deprecated("Use field access instead!")]] ::Fusion::Hitbox*& dyn_Hitbox();
    // static public Fusion.LagCompensation.Query CreateQuery(Fusion.Hitbox hb, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha)
    // Offset: 0x2B89C74
    static ::Fusion::LagCompensation::Query CreateQuery(::Fusion::Hitbox* hb, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha);
    // static public Fusion.LagCompensation.Query CreateQuery(Fusion.Hitbox hb, Fusion.PlayerRef player, System.Boolean subTickAccuracy)
    // Offset: 0x2B89D4C
    static ::Fusion::LagCompensation::Query CreateQuery(::Fusion::Hitbox* hb, ::Fusion::PlayerRef player, bool subTickAccuracy);
  }; // Fusion.LagCompensation.PositionRotationQuery
  #pragma pack(pop)
  static check_size<sizeof(PositionRotationQuery), 0 + sizeof(::Fusion::Hitbox*)> __Fusion_LagCompensation_PositionRotationQuerySizeCheck;
  static_assert(sizeof(PositionRotationQuery) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LagCompensation::PositionRotationQuery::CreateQuery
// Il2CppName: CreateQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LagCompensation::Query (*)(::Fusion::Hitbox*, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>)>(&Fusion::LagCompensation::PositionRotationQuery::CreateQuery)> {
  static const MethodInfo* get() {
    static auto* hb = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensation::PositionRotationQuery), "CreateQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hb, tick, tickTo, alpha});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensation::PositionRotationQuery::CreateQuery
// Il2CppName: CreateQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LagCompensation::Query (*)(::Fusion::Hitbox*, ::Fusion::PlayerRef, bool)>(&Fusion::LagCompensation::PositionRotationQuery::CreateQuery)> {
  static const MethodInfo* get() {
    static auto* hb = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* subTickAccuracy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensation::PositionRotationQuery), "CreateQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hb, player, subTickAccuracy});
  }
};
