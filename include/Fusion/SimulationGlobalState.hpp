// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.SceneRef
#include "Fusion/SceneRef.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationGlobalState
  struct SimulationGlobalState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationGlobalState, "Fusion", "SimulationGlobalState");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.SimulationGlobalState
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimulationGlobalState/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer
    struct $PlayersActive$e__FixedBuffer;
    // Nested type: ::Fusion::SimulationGlobalState::$_size$e__FixedBuffer
    struct $_size$e__FixedBuffer;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.SimulationGlobalState/<PlayersActive>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $PlayersActive$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt64 FixedElementField
      // Size: 0x8
      // Offset: 0x0
      uint64_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      public:
      // Creating value type constructor for type: $PlayersActive$e__FixedBuffer
      constexpr $PlayersActive$e__FixedBuffer(uint64_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint64_t
      constexpr operator uint64_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.UInt64 FixedElementField
      [[deprecated("Use field access instead!")]] uint64_t& dyn_FixedElementField();
    }; // Fusion.SimulationGlobalState/<PlayersActive>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(SimulationGlobalState::$PlayersActive$e__FixedBuffer), 0 + sizeof(uint64_t)> __Fusion_SimulationGlobalState_$PlayersActive$e__FixedBufferSizeCheck;
    static_assert(sizeof(SimulationGlobalState::$PlayersActive$e__FixedBuffer) == 0x8);
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.SimulationGlobalState/<_size>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $_size$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      int FixedElementField;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: $_size$e__FixedBuffer
      constexpr $_size$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Int32 FixedElementField
      [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
    }; // Fusion.SimulationGlobalState/<_size>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(SimulationGlobalState::$_size$e__FixedBuffer), 0 + sizeof(int)> __Fusion_SimulationGlobalState_$_size$e__FixedBufferSizeCheck;
    static_assert(sizeof(SimulationGlobalState::$_size$e__FixedBuffer) == 0x4);
    public:
    // Creating union for fields at offset: 0x0
    union {
      // private Fusion.SimulationGlobalState/<_size>e__FixedBuffer _size
      // Size: 0x4
      // Offset: 0x0
      ::Fusion::SimulationGlobalState::$_size$e__FixedBuffer size;
      // Field size check
      static_assert(sizeof(::Fusion::SimulationGlobalState::$_size$e__FixedBuffer) == 0x4);
      // public Fusion.SceneRef Scene
      // Size: 0x4
      // Offset: 0x0
      ::Fusion::SceneRef Scene;
      // Field size check
      static_assert(sizeof(::Fusion::SceneRef) == 0x4);
    };
    // public Fusion.SimulationModes ServerMode
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::SimulationModes ServerMode;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    // public System.Int32 MaxPlayers
    // Size: 0x4
    // Offset: 0x8
    int MaxPlayers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaxPlayers and: PlayersActive
    char __padding3[0x4] = {};
    // public Fusion.SimulationGlobalState/<PlayersActive>e__FixedBuffer PlayersActive
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer PlayersActive;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer) == 0x8);
    public:
    // Creating value type constructor for type: SimulationGlobalState
    constexpr SimulationGlobalState(::Fusion::SimulationGlobalState::$_size$e__FixedBuffer size_ = {}, ::Fusion::SimulationModes ServerMode_ = {}, int MaxPlayers_ = {}, ::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer PlayersActive_ = {}) noexcept : size{size_}, ServerMode{ServerMode_}, MaxPlayers{MaxPlayers_}, PlayersActive{PlayersActive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 WORDS
    static constexpr const int WORDS = 32;
    // Get static field: static public System.Int32 WORDS
    static int _get_WORDS();
    // Set static field: static public System.Int32 WORDS
    static void _set_WORDS(int value);
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 128;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: private Fusion.SimulationGlobalState/<_size>e__FixedBuffer _size
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationGlobalState::$_size$e__FixedBuffer& dyn__size();
    // Get instance field reference: public Fusion.SceneRef Scene
    [[deprecated("Use field access instead!")]] ::Fusion::SceneRef& dyn_Scene();
    // Get instance field reference: public Fusion.SimulationModes ServerMode
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn_ServerMode();
    // Get instance field reference: public System.Int32 MaxPlayers
    [[deprecated("Use field access instead!")]] int& dyn_MaxPlayers();
    // Get instance field reference: public Fusion.SimulationGlobalState/<PlayersActive>e__FixedBuffer PlayersActive
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer& dyn_PlayersActive();
  }; // Fusion.SimulationGlobalState
  #pragma pack(pop)
  static check_size<sizeof(SimulationGlobalState), 16 + sizeof(::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer)> __Fusion_SimulationGlobalStateSizeCheck;
  static_assert(sizeof(SimulationGlobalState) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationGlobalState::$_size$e__FixedBuffer, "Fusion", "SimulationGlobalState/<_size>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationGlobalState::$PlayersActive$e__FixedBuffer, "Fusion", "SimulationGlobalState/<PlayersActive>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
