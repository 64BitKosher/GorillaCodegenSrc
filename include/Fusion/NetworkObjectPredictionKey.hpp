// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: PlayerRef
  struct PlayerRef;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectPredictionKey
  struct NetworkObjectPredictionKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObjectPredictionKey, "Fusion", "NetworkObjectPredictionKey");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkObjectPredictionKey
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkObjectPredictionKey/*, public ::System::ValueType, public ::Fusion::INetworkStruct, public ::System::IEquatable_1<::Fusion::NetworkObjectPredictionKey>*/ {
    public:
    public:
    // public System.Byte Byte0
    // Size: 0x1
    // Offset: 0x0
    uint8_t Byte0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte1
    // Size: 0x1
    // Offset: 0x1
    uint8_t Byte1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte2
    // Size: 0x1
    // Offset: 0x2
    uint8_t Byte2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte Byte3
    // Size: 0x1
    // Offset: 0x3
    uint8_t Byte3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Int32 AsInt
    // Size: 0x4
    // Offset: 0x0
    int AsInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single AsFloat
    // Size: 0x4
    // Offset: 0x0
    float AsFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: NetworkObjectPredictionKey
    constexpr NetworkObjectPredictionKey(uint8_t Byte0_ = {}, uint8_t Byte1_ = {}, uint8_t Byte2_ = {}, uint8_t Byte3_ = {}, int AsInt_ = {}, float AsFloat_ = {}) noexcept : Byte0{Byte0_}, Byte1{Byte1_}, Byte2{Byte2_}, Byte3{Byte3_}, AsInt{AsInt_}, AsFloat{AsFloat_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Fusion::NetworkObjectPredictionKey>
    operator ::System::IEquatable_1<::Fusion::NetworkObjectPredictionKey>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Fusion::NetworkObjectPredictionKey>*>(this);
    }
    // Get instance field reference: public System.Byte Byte0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte0();
    // Get instance field reference: public System.Byte Byte1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte1();
    // Get instance field reference: public System.Byte Byte2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte2();
    // Get instance field reference: public System.Byte Byte3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Byte3();
    // Get instance field reference: public System.Int32 AsInt
    [[deprecated("Use field access instead!")]] int& dyn_AsInt();
    // Get instance field reference: public System.Single AsFloat
    [[deprecated("Use field access instead!")]] float& dyn_AsFloat();
    // public System.Boolean Equals(Fusion.NetworkObjectPredictionKey other)
    // Offset: 0x2B4DD0C
    bool Equals(::Fusion::NetworkObjectPredictionKey other);
    // public override System.String ToString()
    // Offset: 0x2B4D6E0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2B4DD1C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2B4DD94
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Fusion.NetworkObjectPredictionKey
  // WARNING Not writing size check since size may be invalid!
  // static public System.Boolean op_Equality(Fusion.NetworkObjectPredictionKey a, Fusion.NetworkObjectPredictionKey b)
  // Offset: 0x2B4DD9C
  bool operator ==(const ::Fusion::NetworkObjectPredictionKey& a, const ::Fusion::NetworkObjectPredictionKey& b);
  // static public System.Boolean op_Inequality(Fusion.NetworkObjectPredictionKey a, Fusion.NetworkObjectPredictionKey b)
  // Offset: 0x2B4D6D4
  bool operator !=(const ::Fusion::NetworkObjectPredictionKey& a, const ::Fusion::NetworkObjectPredictionKey& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObjectPredictionKey::*)(::Fusion::NetworkObjectPredictionKey)>(&Fusion::NetworkObjectPredictionKey::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPredictionKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkObjectPredictionKey::*)()>(&Fusion::NetworkObjectPredictionKey::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPredictionKey), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObjectPredictionKey::*)(::Il2CppObject*)>(&Fusion::NetworkObjectPredictionKey::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPredictionKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkObjectPredictionKey::*)()>(&Fusion::NetworkObjectPredictionKey::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPredictionKey), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Fusion::NetworkObjectPredictionKey::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
