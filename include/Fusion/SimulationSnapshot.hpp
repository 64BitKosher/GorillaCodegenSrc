// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.NetworkObjectRefMapPtr
#include "Fusion/NetworkObjectRefMapPtr.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: Fusion.NetworkObjectNestingKey
#include "Fusion/NetworkObjectNestingKey.hpp"
// Including type: Fusion.NetworkObjectHeaderPtr
#include "Fusion/NetworkObjectHeaderPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Allocator
  struct Allocator;
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
  // Forward declaring type: SimulationGlobalState
  struct SimulationGlobalState;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: NetworkPrefabId
  struct NetworkPrefabId;
  // Forward declaring type: NetworkBehaviour
  class NetworkBehaviour;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationSnapshot
  class SimulationSnapshot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationSnapshot);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationSnapshot*, "Fusion", "SimulationSnapshot");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationSnapshot
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationSnapshot : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::SimulationSnapshot::IHistory
    class IHistory;
    // Nested type: ::Fusion::SimulationSnapshot::HistoryServerDeltaSnapshots
    class HistoryServerDeltaSnapshots;
    // Nested type: ::Fusion::SimulationSnapshot::HistoryLL
    class HistoryLL;
    // Nested type: ::Fusion::SimulationSnapshot::History
    class History;
    // Nested type: ::Fusion::SimulationSnapshot::Interpolator
    class Interpolator;
    // Nested type: ::Fusion::SimulationSnapshot::Pool
    class Pool;
    public:
    // private System.Double _dt
    // Size: 0x8
    // Offset: 0x10
    double dt;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Fusion.Tick _tick
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::Tick tick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // private System.Boolean _pooled
    // Size: 0x1
    // Offset: 0x1C
    bool pooled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _interp
    // Size: 0x1
    // Offset: 0x1D
    bool interp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: interp and: allocator
    char __padding3[0x2] = {};
    // private Fusion.Allocator* _allocator
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Allocator* allocator;
    // Field size check
    static_assert(sizeof(::Fusion::Allocator*) == 0x8);
    // Fusion.SimulationSnapshot Prev
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationSnapshot* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // Fusion.SimulationSnapshot Next
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::SimulationSnapshot* Next;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    public:
    // Get instance field reference: private System.Double _dt
    [[deprecated("Use field access instead!")]] double& dyn__dt();
    // Get instance field reference: private Fusion.Tick _tick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__tick();
    // Get instance field reference: private System.Boolean _pooled
    [[deprecated("Use field access instead!")]] bool& dyn__pooled();
    // Get instance field reference: private System.Boolean _interp
    [[deprecated("Use field access instead!")]] bool& dyn__interp();
    // Get instance field reference: private Fusion.Allocator* _allocator
    [[deprecated("Use field access instead!")]] ::Fusion::Allocator*& dyn__allocator();
    // Get instance field reference: Fusion.SimulationSnapshot Prev
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn_Prev();
    // Get instance field reference: Fusion.SimulationSnapshot Next
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn_Next();
    // public Fusion.Tick get_Tick()
    // Offset: 0x2B8597C
    ::Fusion::Tick get_Tick();
    // public System.Double get_Time()
    // Offset: 0x2B85984
    double get_Time();
    // public System.Byte[] GetStateBytes()
    // Offset: 0x2B85998
    ::ArrayW<uint8_t> GetStateBytes();
    // Fusion.Allocator* get_Allocator()
    // Offset: 0x2B85A1C
    ::Fusion::Allocator* get_Allocator();
    // System.Int32 get_ReplicateWordLength()
    // Offset: 0x2B7BCE0
    int get_ReplicateWordLength();
    // System.Void .ctor(Fusion.NetworkProjectConfig config, System.Boolean server)
    // Offset: 0x2B85A24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationSnapshot* New_ctor(::Fusion::NetworkProjectConfig* config, bool server) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationSnapshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationSnapshot*, creationType>(config, server)));
    }
    // System.Void Dispose()
    // Offset: 0x2B85AE0
    void Dispose();
    // System.Void SetTick(Fusion.Tick tick)
    // Offset: 0x2B85B00
    void SetTick(::Fusion::Tick tick);
    // System.Void CopyFrom(Fusion.SimulationSnapshot from, System.Boolean onlyUsedMemory)
    // Offset: 0x2B7B5E4
    void CopyFrom(::Fusion::SimulationSnapshot* from, bool onlyUsedMemory);
    // System.Int32 get_ObjectCount()
    // Offset: 0x2B85B08
    int get_ObjectCount();
    // Fusion.NetworkObjectRefMapPtr* get_ObjectTable()
    // Offset: 0x2B85B1C
    ::Fusion::NetworkObjectRefMapPtr* get_ObjectTable();
    // Fusion.NetworkObjectRefMapPtr/Enumerable get_Objects()
    // Offset: 0x2B85B2C
    ::Fusion::NetworkObjectRefMapPtr::Enumerable get_Objects();
    // Fusion.SimulationGlobalState* get_GlobalState()
    // Offset: 0x2B85B3C
    ::Fusion::SimulationGlobalState* get_GlobalState();
    // Fusion.NetworkObjectHeader* AllocateObject(Fusion.NetworkId id, Fusion.NetworkPrefabId type, System.Int32 wordCount, System.Nullable`1<Fusion.NetworkId> nestingRoot, System.Nullable`1<Fusion.NetworkObjectNestingKey> nestingKey)
    // Offset: 0x2B85B48
    ::Fusion::NetworkObjectHeader* AllocateObject(::Fusion::NetworkId id, ::Fusion::NetworkPrefabId type, int wordCount, ::System::Nullable_1<::Fusion::NetworkId> nestingRoot, ::System::Nullable_1<::Fusion::NetworkObjectNestingKey> nestingKey);
    // System.Boolean ContainsObject(Fusion.NetworkId id)
    // Offset: 0x2B85C4C
    bool ContainsObject(::Fusion::NetworkId id);
    // System.ValueTuple`2<System.Collections.Generic.Dictionary`2<Fusion.NetworkId,Fusion.NetworkObjectHeaderPtr>,System.Collections.Generic.Dictionary`2<Fusion.NetworkId,System.Collections.Generic.List`1<Fusion.NetworkId>>> GetObjectHeaderPtrs()
    // Offset: 0x2B85C70
    ::System::ValueTuple_2<::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::NetworkObjectHeaderPtr>*, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::System::Collections::Generic::List_1<::Fusion::NetworkId>*>*> GetObjectHeaderPtrs();
    // System.Void FreeObject(Fusion.NetworkId id)
    // Offset: 0x2B7ACD8
    void FreeObject(::Fusion::NetworkId id);
    // Fusion.NetworkObjectHeader* GetObject(Fusion.NetworkId id)
    // Offset: 0x2B85FDC
    ::Fusion::NetworkObjectHeader* GetObject(::Fusion::NetworkId id);
    // Fusion.NetworkObjectHeader* TryGetObject(Fusion.NetworkId id)
    // Offset: 0x2B860A4
    ::Fusion::NetworkObjectHeader* TryGetObject(::Fusion::NetworkId id);
    // System.Boolean TryGetObject(Fusion.NetworkId id, out Fusion.NetworkObjectHeader* header)
    // Offset: 0x2B860F8
    bool TryGetObject(::Fusion::NetworkId id, ByRef<::Fusion::NetworkObjectHeader*> header);
    // System.Boolean TryGetObjectEntry(Fusion.NetworkId id, out Fusion.NetworkObjectRefMapPtr/Entry* entry)
    // Offset: 0x2B86154
    bool TryGetObjectEntry(::Fusion::NetworkId id, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*> entry);
    // Fusion.NetworkObjectHeader* GetObjectFromEntry(Fusion.NetworkObjectRefMapPtr/Entry* entry)
    // Offset: 0x2B8616C
    ::Fusion::NetworkObjectHeader* GetObjectFromEntry(::Fusion::NetworkObjectRefMapPtr::Entry* entry);
    // System.Boolean TryGetBehaviourPointer(Fusion.NetworkBehaviour behaviour, out System.Int32* ptr)
    // Offset: 0x2B86190
    bool TryGetBehaviourPointer(::Fusion::NetworkBehaviour* behaviour, ByRef<int*> ptr);
    // System.Int32* TryGetBehaviourPointer(Fusion.NetworkBehaviour behaviour)
    // Offset: 0x2B86218
    int* TryGetBehaviourPointer(::Fusion::NetworkBehaviour* behaviour);
    // System.String BuildReport()
    // Offset: 0x2B86288
    ::StringW BuildReport();
    // System.String PrintObjects()
    // Offset: 0x2B86470
    ::StringW PrintObjects();
    // private System.String PrintAllocator(Fusion.Allocator* allocator)
    // Offset: 0x2B864F0
    ::StringW PrintAllocator(::Fusion::Allocator* allocator);
    // static public System.Int32 LevelExperience(System.Int32 level, System.Int32 experiencePerStep)
    // Offset: 0x2B86638
    static int LevelExperience(int level, int experiencePerStep);
  }; // Fusion.SimulationSnapshot
  #pragma pack(pop)
  static check_size<sizeof(SimulationSnapshot), 48 + sizeof(::Fusion::SimulationSnapshot*)> __Fusion_SimulationSnapshotSizeCheck;
  static_assert(sizeof(SimulationSnapshot) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_Tick
// Il2CppName: get_Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_Time
// Il2CppName: get_Time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_Time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_Time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::GetStateBytes
// Il2CppName: GetStateBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::GetStateBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "GetStateBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_Allocator
// Il2CppName: get_Allocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Allocator* (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_Allocator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_Allocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_ReplicateWordLength
// Il2CppName: get_ReplicateWordLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_ReplicateWordLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_ReplicateWordLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::SetTick
// Il2CppName: SetTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::*)(::Fusion::Tick)>(&Fusion::SimulationSnapshot::SetTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "SetTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::*)(::Fusion::SimulationSnapshot*, bool)>(&Fusion::SimulationSnapshot::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->byval_arg;
    static auto* onlyUsedMemory = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, onlyUsedMemory});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_ObjectCount
// Il2CppName: get_ObjectCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_ObjectCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_ObjectCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_ObjectTable
// Il2CppName: get_ObjectTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectRefMapPtr* (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_ObjectTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_ObjectTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_Objects
// Il2CppName: get_Objects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectRefMapPtr::Enumerable (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_Objects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_Objects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::get_GlobalState
// Il2CppName: get_GlobalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationGlobalState* (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::get_GlobalState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "get_GlobalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::AllocateObject
// Il2CppName: AllocateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId, ::Fusion::NetworkPrefabId, int, ::System::Nullable_1<::Fusion::NetworkId>, ::System::Nullable_1<::Fusion::NetworkObjectNestingKey>)>(&Fusion::SimulationSnapshot::AllocateObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nestingRoot = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")})->byval_arg;
    static auto* nestingKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectNestingKey")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "AllocateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, type, wordCount, nestingRoot, nestingKey});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::ContainsObject
// Il2CppName: ContainsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId)>(&Fusion::SimulationSnapshot::ContainsObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "ContainsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::GetObjectHeaderPtrs
// Il2CppName: GetObjectHeaderPtrs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::NetworkObjectHeaderPtr>*, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::System::Collections::Generic::List_1<::Fusion::NetworkId>*>*> (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::GetObjectHeaderPtrs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "GetObjectHeaderPtrs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::FreeObject
// Il2CppName: FreeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId)>(&Fusion::SimulationSnapshot::FreeObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "FreeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::GetObject
// Il2CppName: GetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId)>(&Fusion::SimulationSnapshot::GetObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "GetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::TryGetObject
// Il2CppName: TryGetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId)>(&Fusion::SimulationSnapshot::TryGetObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "TryGetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::TryGetObject
// Il2CppName: TryGetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId, ByRef<::Fusion::NetworkObjectHeader*>)>(&Fusion::SimulationSnapshot::TryGetObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "TryGetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, header});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::TryGetObjectEntry
// Il2CppName: TryGetObjectEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::*)(::Fusion::NetworkId, ByRef<::Fusion::NetworkObjectRefMapPtr::Entry*>)>(&Fusion::SimulationSnapshot::TryGetObjectEntry)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* entry = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr/Entry"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "TryGetObjectEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, entry});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::GetObjectFromEntry
// Il2CppName: GetObjectFromEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::SimulationSnapshot::*)(::Fusion::NetworkObjectRefMapPtr::Entry*)>(&Fusion::SimulationSnapshot::GetObjectFromEntry)> {
  static const MethodInfo* get() {
    static auto* entry = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr/Entry"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "GetObjectFromEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::TryGetBehaviourPointer
// Il2CppName: TryGetBehaviourPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::*)(::Fusion::NetworkBehaviour*, ByRef<int*>)>(&Fusion::SimulationSnapshot::TryGetBehaviourPointer)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "TryGetBehaviourPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::TryGetBehaviourPointer
// Il2CppName: TryGetBehaviourPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int* (Fusion::SimulationSnapshot::*)(::Fusion::NetworkBehaviour*)>(&Fusion::SimulationSnapshot::TryGetBehaviourPointer)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "TryGetBehaviourPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::BuildReport
// Il2CppName: BuildReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::BuildReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "BuildReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::PrintObjects
// Il2CppName: PrintObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationSnapshot::*)()>(&Fusion::SimulationSnapshot::PrintObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "PrintObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::PrintAllocator
// Il2CppName: PrintAllocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationSnapshot::*)(::Fusion::Allocator*)>(&Fusion::SimulationSnapshot::PrintAllocator)> {
  static const MethodInfo* get() {
    static auto* allocator = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "PrintAllocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allocator});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::LevelExperience
// Il2CppName: LevelExperience
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Fusion::SimulationSnapshot::LevelExperience)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* experiencePerStep = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot*), "LevelExperience", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, experiencePerStep});
  }
};
