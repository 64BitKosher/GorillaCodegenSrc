// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RpcHeader
  struct RpcHeader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RpcHeader, "Fusion", "RpcHeader");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.RpcHeader
  // [TokenAttribute] Offset: FFFFFFFF
  struct RpcHeader/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.NetworkId Object
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::NetworkId Object;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkId) == 0x4);
    // public System.UInt16 Behaviour
    // Size: 0x2
    // Offset: 0x4
    uint16_t Behaviour;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 Method
    // Size: 0x2
    // Offset: 0x6
    uint16_t Method;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: RpcHeader
    constexpr RpcHeader(::Fusion::NetworkId Object_ = {}, uint16_t Behaviour_ = {}, uint16_t Method_ = {}) noexcept : Object{Object_}, Behaviour{Behaviour_}, Method{Method_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 8;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion.NetworkId Object
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkId& dyn_Object();
    // Get instance field reference: public System.UInt16 Behaviour
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Behaviour();
    // Get instance field reference: public System.UInt16 Method
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Method();
    // static public System.Int32 Write(Fusion.RpcHeader header, System.Byte* data)
    // Offset: 0x2B505D8
    static int Write(::Fusion::RpcHeader header, uint8_t* data);
    // static public System.Int32 ReadSize(System.Byte* data)
    // Offset: 0x2B505E8
    static int ReadSize(uint8_t* data);
    // static public Fusion.RpcHeader Read(System.Byte* data, out System.Int32 size)
    // Offset: 0x2B505F0
    static ::Fusion::RpcHeader Read(uint8_t* data, ByRef<int> size);
    // static public Fusion.RpcHeader Create(Fusion.NetworkId id, System.Int32 behaviour, System.Int32 method)
    // Offset: 0x2B50600
    static ::Fusion::RpcHeader Create(::Fusion::NetworkId id, int behaviour, int method);
    // static public Fusion.RpcHeader Create(System.Int32 staticRpcKey)
    // Offset: 0x2B50610
    static ::Fusion::RpcHeader Create(int staticRpcKey);
    // public override System.String ToString()
    // Offset: 0x2B50618
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.RpcHeader
  #pragma pack(pop)
  static check_size<sizeof(RpcHeader), 6 + sizeof(uint16_t)> __Fusion_RpcHeaderSizeCheck;
  static_assert(sizeof(RpcHeader) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RpcHeader::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Fusion::RpcHeader, uint8_t*)>(&Fusion::RpcHeader::Write)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("Fusion", "RpcHeader")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, data});
  }
};
// Writing MetadataGetter for method: Fusion::RpcHeader::ReadSize
// Il2CppName: ReadSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint8_t*)>(&Fusion::RpcHeader::ReadSize)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "ReadSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::RpcHeader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcHeader (*)(uint8_t*, ByRef<int>)>(&Fusion::RpcHeader::Read)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, size});
  }
};
// Writing MetadataGetter for method: Fusion::RpcHeader::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcHeader (*)(::Fusion::NetworkId, int, int)>(&Fusion::RpcHeader::Create)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, behaviour, method});
  }
};
// Writing MetadataGetter for method: Fusion::RpcHeader::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcHeader (*)(int)>(&Fusion::RpcHeader::Create)> {
  static const MethodInfo* get() {
    static auto* staticRpcKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{staticRpcKey});
  }
};
// Writing MetadataGetter for method: Fusion::RpcHeader::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::RpcHeader::*)()>(&Fusion::RpcHeader::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcHeader), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
