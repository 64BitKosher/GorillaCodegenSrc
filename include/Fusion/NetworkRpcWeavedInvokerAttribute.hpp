// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRpcWeavedInvokerAttribute
  class NetworkRpcWeavedInvokerAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkRpcWeavedInvokerAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRpcWeavedInvokerAttribute*, "Fusion", "NetworkRpcWeavedInvokerAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkRpcWeavedInvokerAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class NetworkRpcWeavedInvokerAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Int32 <Key>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Key;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Sources>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Sources;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Targets>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Targets;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <Key>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Key$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Sources>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Sources$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Targets>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Targets$k__BackingField();
    // public System.Int32 get_Key()
    // Offset: 0x2AFF2AC
    int get_Key();
    // public System.Int32 get_Sources()
    // Offset: 0x2AFF2B4
    int get_Sources();
    // public System.Int32 get_Targets()
    // Offset: 0x2AFF2BC
    int get_Targets();
    // public System.Void .ctor(System.Int32 key, System.Int32 sources, System.Int32 targets)
    // Offset: 0x2AFF2C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkRpcWeavedInvokerAttribute* New_ctor(int key, int sources, int targets) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRpcWeavedInvokerAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkRpcWeavedInvokerAttribute*, creationType>(key, sources, targets)));
    }
  }; // Fusion.NetworkRpcWeavedInvokerAttribute
  #pragma pack(pop)
  static check_size<sizeof(NetworkRpcWeavedInvokerAttribute), 24 + sizeof(int)> __Fusion_NetworkRpcWeavedInvokerAttributeSizeCheck;
  static_assert(sizeof(NetworkRpcWeavedInvokerAttribute) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkRpcWeavedInvokerAttribute::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRpcWeavedInvokerAttribute::*)()>(&Fusion::NetworkRpcWeavedInvokerAttribute::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRpcWeavedInvokerAttribute*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRpcWeavedInvokerAttribute::get_Sources
// Il2CppName: get_Sources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRpcWeavedInvokerAttribute::*)()>(&Fusion::NetworkRpcWeavedInvokerAttribute::get_Sources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRpcWeavedInvokerAttribute*), "get_Sources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRpcWeavedInvokerAttribute::get_Targets
// Il2CppName: get_Targets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRpcWeavedInvokerAttribute::*)()>(&Fusion::NetworkRpcWeavedInvokerAttribute::get_Targets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRpcWeavedInvokerAttribute*), "get_Targets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRpcWeavedInvokerAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
