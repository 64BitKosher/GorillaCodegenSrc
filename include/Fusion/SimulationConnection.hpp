// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.SimulationMessageList
#include "Fusion/SimulationMessageList.hpp"
// Including type: Fusion.Ema
#include "Fusion/Ema.hpp"
// Including type: Fusion.TimerDelta
#include "Fusion/TimerDelta.hpp"
// Including type: Fusion.SimulationInput
#include "Fusion/SimulationInput.hpp"
// Including type: Fusion.Sockets.NetConnectionId
#include "Fusion/Sockets/NetConnectionId.hpp"
// Including type: Fusion.SimulationGlobalState
#include "Fusion/SimulationGlobalState.hpp"
// Including type: Fusion.SimulationPlayer/AOIQuery
#include "Fusion/SimulationPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationConnectionObjectData
  class SimulationConnectionObjectData;
  // Forward declaring type: NetworkObjectPriorityHeap
  class NetworkObjectPriorityHeap;
  // Forward declaring type: Simulation
  class Simulation;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConnection
  struct NetConnection;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationConnection
  class SimulationConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationConnection);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationConnection*, "Fusion", "SimulationConnection");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.SimulationConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationConnection : public ::Il2CppObject {
    public:
    public:
    // private System.Nullable`1<System.Boolean> _active
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::System::Nullable_1<bool> active;
    // public Fusion.Tick SharedTick
    // Size: 0x4
    // Offset: 0x14
    ::Fusion::Tick SharedTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // public System.Int32 PendingSnapshots
    // Size: 0x4
    // Offset: 0x18
    int PendingSnapshots;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt64 MessagesInSequence
    // Size: 0x8
    // Offset: 0x20
    uint64_t MessagesInSequence;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 MessagesOutSequence
    // Size: 0x8
    // Offset: 0x28
    uint64_t MessagesOutSequence;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Fusion.SimulationMessageList MessagesIn
    // Size: 0x18
    // Offset: 0x30
    ::Fusion::SimulationMessageList MessagesIn;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationMessageList) == 0x18);
    // public Fusion.SimulationMessageList MessagesOut
    // Size: 0x18
    // Offset: 0x48
    ::Fusion::SimulationMessageList MessagesOut;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationMessageList) == 0x18);
    // System.Boolean InvokeJoined
    // Size: 0x1
    // Offset: 0x60
    bool InvokeJoined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean InvokeLeave
    // Size: 0x1
    // Offset: 0x61
    bool InvokeLeave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Fusion.Ema _packetRecvDelta
    // Size: 0x28
    // Offset: 0x68
    ::Fusion::Ema packetRecvDelta;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // Fusion.TimerDelta _packetRecvDeltaTimer
    // Size: 0x20
    // Offset: 0x288
    ::Fusion::TimerDelta packetRecvDeltaTimer;
    // Field size check
    static_assert(sizeof(::Fusion::TimerDelta) == 0x20);
    // Fusion.SimulationInput/Buffer _inputs
    // Size: 0x8
    // Offset: 0x2A8
    ::Fusion::SimulationInput::Buffer* inputs;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput::Buffer*) == 0x8);
    // Fusion.Ema _inputsOffsetDelta
    // Size: 0x28
    // Offset: 0x2B0
    ::Fusion::Ema inputsOffsetDelta;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // Fusion.Tick _inputsOffsetDeltaMax
    // Size: 0x4
    // Offset: 0x4D0
    ::Fusion::Tick inputsOffsetDeltaMax;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // Fusion.SimulationConnectionObjectData ObjectData
    // Size: 0x8
    // Offset: 0x4D8
    ::Fusion::SimulationConnectionObjectData* ObjectData;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConnectionObjectData*) == 0x8);
    // Fusion.NetworkObjectPriorityHeap ObjectPriorityHeap
    // Size: 0x8
    // Offset: 0x4E0
    ::Fusion::NetworkObjectPriorityHeap* ObjectPriorityHeap;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectPriorityHeap*) == 0x8);
    // Fusion.Sockets.NetConnection* Connection
    // Size: 0x8
    // Offset: 0x4E8
    ::Fusion::Sockets::NetConnection* Connection;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnection*) == 0x8);
    // Fusion.Sockets.NetConnectionId ConnectionId
    // Size: 0x8
    // Offset: 0x4F0
    ::Fusion::Sockets::NetConnectionId ConnectionId;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetConnectionId) == 0x8);
    // Fusion.SimulationGlobalState GlobalState
    // Size: 0x18
    // Offset: 0x4F8
    ::Fusion::SimulationGlobalState GlobalState;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationGlobalState) == 0x18);
    // System.Collections.Generic.HashSet`1<Fusion.Tick> PendingTicks
    // Size: 0x8
    // Offset: 0x578
    ::System::Collections::Generic::HashSet_1<::Fusion::Tick>* PendingTicks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::Tick>*) == 0x8);
    // System.Collections.Generic.List`1<Fusion.SimulationPlayer/AOIQuery> AreaOfInterestQueries
    // Size: 0x8
    // Offset: 0x580
    ::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>* AreaOfInterestQueries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>*) == 0x8);
    public:
    // static field const value: static public System.Int32 INTEGRATOR_HISTORY_MULT
    static constexpr const int INTEGRATOR_HISTORY_MULT = 10;
    // Get static field: static public System.Int32 INTEGRATOR_HISTORY_MULT
    static int _get_INTEGRATOR_HISTORY_MULT();
    // Set static field: static public System.Int32 INTEGRATOR_HISTORY_MULT
    static void _set_INTEGRATOR_HISTORY_MULT(int value);
    // Get instance field reference: private System.Nullable`1<System.Boolean> _active
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__active();
    // Get instance field reference: public Fusion.Tick SharedTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_SharedTick();
    // Get instance field reference: public System.Int32 PendingSnapshots
    [[deprecated("Use field access instead!")]] int& dyn_PendingSnapshots();
    // Get instance field reference: public System.UInt64 MessagesInSequence
    [[deprecated("Use field access instead!")]] uint64_t& dyn_MessagesInSequence();
    // Get instance field reference: public System.UInt64 MessagesOutSequence
    [[deprecated("Use field access instead!")]] uint64_t& dyn_MessagesOutSequence();
    // Get instance field reference: public Fusion.SimulationMessageList MessagesIn
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationMessageList& dyn_MessagesIn();
    // Get instance field reference: public Fusion.SimulationMessageList MessagesOut
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationMessageList& dyn_MessagesOut();
    // Get instance field reference: System.Boolean InvokeJoined
    [[deprecated("Use field access instead!")]] bool& dyn_InvokeJoined();
    // Get instance field reference: System.Boolean InvokeLeave
    [[deprecated("Use field access instead!")]] bool& dyn_InvokeLeave();
    // Get instance field reference: Fusion.Ema _packetRecvDelta
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__packetRecvDelta();
    // Get instance field reference: Fusion.TimerDelta _packetRecvDeltaTimer
    [[deprecated("Use field access instead!")]] ::Fusion::TimerDelta& dyn__packetRecvDeltaTimer();
    // Get instance field reference: Fusion.SimulationInput/Buffer _inputs
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput::Buffer*& dyn__inputs();
    // Get instance field reference: Fusion.Ema _inputsOffsetDelta
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__inputsOffsetDelta();
    // Get instance field reference: Fusion.Tick _inputsOffsetDeltaMax
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__inputsOffsetDeltaMax();
    // Get instance field reference: Fusion.SimulationConnectionObjectData ObjectData
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConnectionObjectData*& dyn_ObjectData();
    // Get instance field reference: Fusion.NetworkObjectPriorityHeap ObjectPriorityHeap
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectPriorityHeap*& dyn_ObjectPriorityHeap();
    // Get instance field reference: Fusion.Sockets.NetConnection* Connection
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnection*& dyn_Connection();
    // Get instance field reference: Fusion.Sockets.NetConnectionId ConnectionId
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetConnectionId& dyn_ConnectionId();
    // Get instance field reference: Fusion.SimulationGlobalState GlobalState
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationGlobalState& dyn_GlobalState();
    // Get instance field reference: System.Collections.Generic.HashSet`1<Fusion.Tick> PendingTicks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::Tick>*& dyn_PendingTicks();
    // Get instance field reference: System.Collections.Generic.List`1<Fusion.SimulationPlayer/AOIQuery> AreaOfInterestQueries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>*& dyn_AreaOfInterestQueries();
    // public System.Boolean get_Active()
    // Offset: 0x2B7EF38
    bool get_Active();
    // public System.Void set_Active(System.Boolean value)
    // Offset: 0x2B8292C
    void set_Active(bool value);
    // System.Void .ctor(Fusion.Simulation simulation)
    // Offset: 0x2B829F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationConnection* New_ctor(::Fusion::Simulation* simulation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationConnection*, creationType>(simulation)));
    }
    // public System.Void Reset()
    // Offset: 0x2B82E0C
    void Reset();
    // public System.Void PacketReceiveDelta()
    // Offset: 0x2B82FE0
    void PacketReceiveDelta();
    // public System.Void InputReceiveDelta(Fusion.Tick tick, System.Double receive, System.Double expected)
    // Offset: 0x2B83070
    void InputReceiveDelta(::Fusion::Tick tick, double receive, double expected);
  }; // Fusion.SimulationConnection
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationConnection::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationConnection::*)()>(&Fusion::SimulationConnection::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConnection*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConnection::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationConnection::*)(bool)>(&Fusion::SimulationConnection::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConnection*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationConnection::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationConnection::*)()>(&Fusion::SimulationConnection::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConnection*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConnection::PacketReceiveDelta
// Il2CppName: PacketReceiveDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationConnection::*)()>(&Fusion::SimulationConnection::PacketReceiveDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConnection*), "PacketReceiveDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConnection::InputReceiveDelta
// Il2CppName: InputReceiveDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationConnection::*)(::Fusion::Tick, double, double)>(&Fusion::SimulationConnection::InputReceiveDelta)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* receive = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* expected = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConnection*), "InputReceiveDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, receive, expected});
  }
};
