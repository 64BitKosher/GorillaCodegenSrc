// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Skipping declaration: DebuggerProxy because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: IElementReaderWriter`1<T>
  template<typename T>
  class IElementReaderWriter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkLinkedList`1<T>
  template<typename T>
  struct NetworkLinkedList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Fusion::NetworkLinkedList_1, "Fusion", "NetworkLinkedList`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkLinkedList`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  template<typename T>
  struct NetworkLinkedList_1/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<T>*/ {
    public:
    // Nested type: ::Fusion::NetworkLinkedList_1::DebuggerProxy<T>
    class DebuggerProxy;
    // Nested type: ::Fusion::NetworkLinkedList_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // Autogenerated type: Fusion.NetworkLinkedList`1/DebuggerProxy
    // [TokenAttribute] Offset: FFFFFFFF
    class DebuggerProxy : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = NetworkLinkedList_1<T>;
      static constexpr std::string_view NESTED_NAME = "DebuggerProxy";
      static constexpr bool IS_VALUE_TYPE = false;
      // Nested type: ::Fusion::NetworkLinkedList_1::DebuggerProxy::$$c__DisplayClass0_0<T>
      class $$c__DisplayClass0_0;
      // WARNING Size may be invalid!
      // Autogenerated type: Fusion.NetworkLinkedList`1/DebuggerProxy/<>c__DisplayClass0_0
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      class $$c__DisplayClass0_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
        public:
        using declaring_type = typename NetworkLinkedList_1<T>::DebuggerProxy*;
        static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass0_0";
        static constexpr bool IS_VALUE_TYPE = false;
        public:
        // public Fusion.NetworkLinkedList`1<T> list
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        ::Fusion::NetworkLinkedList_1<T> list;
        public:
        // Creating conversion operator: operator ::Fusion::NetworkLinkedList_1<T>
        constexpr operator ::Fusion::NetworkLinkedList_1<T>() const noexcept {
          return list;
        }
        // Autogenerated instance field getter
        // Get instance field: public Fusion.NetworkLinkedList`1<T> list
        [[deprecated("Use field access instead!")]] ::Fusion::NetworkLinkedList_1<T>& dyn_list() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::$$c__DisplayClass0_0::dyn_list");
          auto ___internal__instance = this;
          static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
          return *reinterpret_cast<::Fusion::NetworkLinkedList_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
        }
        // public System.Void .ctor()
        // Offset: 0xFFFFFFFFFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        static typename NetworkLinkedList_1<T>::DebuggerProxy::$$c__DisplayClass0_0* New_ctor() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::$$c__DisplayClass0_0::.ctor");
          return THROW_UNLESS((::il2cpp_utils::New<typename NetworkLinkedList_1<T>::DebuggerProxy::$$c__DisplayClass0_0*, creationType>()));
        }
        // T[] <.ctor>b__0()
        // Offset: 0xFFFFFFFFFFFFFFFF
        ::ArrayW<T> $_ctor$b__0() {
          static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::$$c__DisplayClass0_0::<.ctor>b__0");
          static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
          return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
        }
      }; // Fusion.NetworkLinkedList`1/DebuggerProxy/<>c__DisplayClass0_0
      // Could not write size check! Type: Fusion.NetworkLinkedList`1/DebuggerProxy/<>c__DisplayClass0_0 is generic, or has no fields that are valid for size checks!
      public:
      // public System.Lazy`1<T[]> _items
      // Size: 0x8
      // Offset: 0x0
      ::System::Lazy_1<::ArrayW<T>>* items;
      // Field size check
      static_assert(sizeof(::System::Lazy_1<::ArrayW<T>>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Lazy_1<::ArrayW<T>>*
      constexpr operator ::System::Lazy_1<::ArrayW<T>>*() const noexcept {
        return items;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Lazy`1<T[]> _items
      [[deprecated("Use field access instead!")]] ::System::Lazy_1<::ArrayW<T>>*& dyn__items() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::dyn__items");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
        return *reinterpret_cast<::System::Lazy_1<::ArrayW<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(Fusion.NetworkLinkedList`1<T> list)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename NetworkLinkedList_1<T>::DebuggerProxy* New_ctor(::Fusion::NetworkLinkedList_1<T> list) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename NetworkLinkedList_1<T>::DebuggerProxy*, creationType>(list)));
      }
      // public T[] get_Items()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::ArrayW<T> get_Items() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::DebuggerProxy::get_Items");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Items", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
      }
    }; // Fusion.NetworkLinkedList`1/DebuggerProxy
    // Could not write size check! Type: Fusion.NetworkLinkedList`1/DebuggerProxy is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkLinkedList`1/Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = NetworkLinkedList_1<T>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Boolean _first
      // Size: 0x1
      // Offset: 0x0
      bool first;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Int32 _head
      // Size: 0x4
      // Offset: 0x0
      int head;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private Fusion.NetworkLinkedList`1<T> _list
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::Fusion::NetworkLinkedList_1<T> list;
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(bool first_ = {}, int head_ = {}, ::Fusion::NetworkLinkedList_1<T> list_ = {}) noexcept : first{first_}, head{head_}, list{list_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Boolean _first
      [[deprecated("Use field access instead!")]] bool& dyn__first() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::dyn__first");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_first"))->offset;
        return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _head
      [[deprecated("Use field access instead!")]] int& dyn__head() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::dyn__head");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private Fusion.NetworkLinkedList`1<T> _list
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkLinkedList_1<T>& dyn__list() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::dyn__list");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_list"))->offset;
        return *reinterpret_cast<::Fusion::NetworkLinkedList_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(Fusion.NetworkLinkedList`1<T> list)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::Fusion::NetworkLinkedList_1<T> list) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkLinkedList_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkLinkedList_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkLinkedList_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkLinkedList_1<T>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::Fusion::NetworkLinkedList_1<T>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Fusion.NetworkLinkedList`1/Enumerator
    // Could not write size check! Type: Fusion.NetworkLinkedList`1/Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int32* _data
    // Size: 0x8
    // Offset: 0x0
    int* data;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32 _stride
    // Size: 0x4
    // Offset: 0x0
    int stride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _capacity
    // Size: 0x4
    // Offset: 0x0
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.IElementReaderWriter`1<T> _rw
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::IElementReaderWriter_1<T>* rw;
    // Field size check
    static_assert(sizeof(::Fusion::IElementReaderWriter_1<T>*) == 0x8);
    public:
    // Creating value type constructor for type: NetworkLinkedList_1
    constexpr NetworkLinkedList_1(int* data_ = {}, int stride_ = {}, int capacity_ = {}, ::Fusion::IElementReaderWriter_1<T>* rw_ = {}) noexcept : data{data_}, stride{stride_}, capacity{capacity_}, rw{rw_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<T>
    operator ::System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public System.Int32 ELEMENT_WORDS
    static int _get_ELEMENT_WORDS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_ELEMENT_WORDS");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "ELEMENT_WORDS"));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 ELEMENT_WORDS
    static void _set_ELEMENT_WORDS(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_ELEMENT_WORDS");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "ELEMENT_WORDS", value));
    }
    // Autogenerated static field getter
    // Get static field: static public System.Int32 META_WORDS
    static int _get_META_WORDS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_META_WORDS");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "META_WORDS"));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 META_WORDS
    static void _set_META_WORDS(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_META_WORDS");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "META_WORDS", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 COUNT
    static int _get_COUNT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_COUNT");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "COUNT"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 COUNT
    static void _set_COUNT(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_COUNT");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "COUNT", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 HEAD
    static int _get_HEAD() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_HEAD");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "HEAD"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 HEAD
    static void _set_HEAD(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_HEAD");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "HEAD", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 TAIL
    static int _get_TAIL() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_TAIL");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "TAIL"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 TAIL
    static void _set_TAIL(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_TAIL");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "TAIL", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 PREV
    static int _get_PREV() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_PREV");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "PREV"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 PREV
    static void _set_PREV(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_PREV");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "PREV", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 NEXT
    static int _get_NEXT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_NEXT");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "NEXT"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 NEXT
    static void _set_NEXT(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_NEXT");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "NEXT", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 INVALID
    static int _get_INVALID() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_INVALID");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "INVALID"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 INVALID
    static void _set_INVALID(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_INVALID");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "INVALID", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 OFFSET
    static int _get_OFFSET() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_get_OFFSET");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "OFFSET"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 OFFSET
    static void _set_OFFSET(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::_set_OFFSET");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkLinkedList_1<T>>::get(), "OFFSET", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32* _data
    [[deprecated("Use field access instead!")]] int*& dyn__data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::dyn__data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
      return *reinterpret_cast<int**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _stride
    [[deprecated("Use field access instead!")]] int& dyn__stride() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::dyn__stride");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stride"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _capacity
    [[deprecated("Use field access instead!")]] int& dyn__capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::dyn__capacity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_capacity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Fusion.IElementReaderWriter`1<T> _rw
    [[deprecated("Use field access instead!")]] ::Fusion::IElementReaderWriter_1<T>*& dyn__rw() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::dyn__rw");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rw"))->offset;
      return *reinterpret_cast<::Fusion::IElementReaderWriter_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Int32 get_Head()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::get_Head");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Head(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Head(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::set_Head");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Int32 get_Tail()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Tail() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::get_Tail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Tail(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Tail(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::set_Tail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_Count(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Count(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::set_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::get_Capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Void .ctor(System.Byte* data, System.Int32 capacity, Fusion.IElementReaderWriter`1<T> rw)
    // Offset: 0xFFFFFFFFFFFFFFFF
    NetworkLinkedList_1(uint8_t* data, int capacity, ::Fusion::IElementReaderWriter_1<T>* rw) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(rw)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, capacity, rw);
    }
    // public Fusion.NetworkLinkedList`1<T> Remap(System.Void* list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkLinkedList_1<T> Remap(void* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Remap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkLinkedList_1<T>, false>(this, ___internal__method, list);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Boolean Contains(T value, System.Collections.Generic.IEqualityComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T value, ::System::Collections::Generic::IEqualityComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparer)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value, comparer);
    }
    // public T Set(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Set(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index, value);
    }
    // public T Get(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Get(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Int32 IndexOf(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
    }
    // public System.Int32 IndexOf(T value, System.Collections.Generic.IEqualityComparer`1<T> equalityComparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(T value, ::System::Collections::Generic::IEqualityComparer_1<T>* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(equalityComparer)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value, equalityComparer);
    }
    // public System.Boolean Remove(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Boolean Remove(T value, System.Collections.Generic.IEqualityComparer`1<T> equalityComparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T value, ::System::Collections::Generic::IEqualityComparer_1<T>* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(equalityComparer)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value, equalityComparer);
    }
    // public System.Void Add(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Int32* FindFreeEntry(out System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int* FindFreeEntry(ByRef<int> index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::FindFreeEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "FindFreeEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
      return ::il2cpp_utils::RunMethodRethrow<int*, false>(this, ___internal__method, byref(index));
    }
    // private System.Void RemoveEntry(System.Int32* entry, System.Int32 entryIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveEntry(int* entry, int entryIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::RemoveEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(entryIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry, entryIndex);
    }
    // private System.Int32* GetEntryByListIndex(System.Int32 listIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int* GetEntryByListIndex(int listIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::GetEntryByListIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEntryByListIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<int*, false>(this, ___internal__method, listIndex);
    }
    // private System.Int32* Entry(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int* Entry(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Entry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Entry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<int*, false>(this, ___internal__method, index);
    }
    // private T Read(System.Int32* entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Read(int* entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Read");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, entry);
    }
    // private System.Void Write(System.Int32* entry, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Write(int* entry, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry, value);
    }
    // public Fusion.NetworkLinkedList`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Fusion::NetworkLinkedList_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Fusion::NetworkLinkedList_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkLinkedList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkLinkedList_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkLinkedList_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Fusion.NetworkLinkedList`1
  // Could not write size check! Type: Fusion.NetworkLinkedList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
