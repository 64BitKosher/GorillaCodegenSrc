// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationSnapshot
#include "Fusion/SimulationSnapshot.hpp"
// Including type: Fusion.SimulationSnapshot/IHistory
#include "Fusion/SimulationSnapshot_IHistory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationSnapshot::History);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationSnapshot::History*, "Fusion", "SimulationSnapshot/History");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationSnapshot/History
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class SimulationSnapshot::History : public ::Il2CppObject/*, public ::Fusion::SimulationSnapshot::IHistory*/ {
    public:
    public:
    // private System.Int32 _tail
    // Size: 0x4
    // Offset: 0x10
    int tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _head
    // Size: 0x4
    // Offset: 0x14
    int head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x18
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: pool
    char __padding2[0x4] = {};
    // private Fusion.SimulationSnapshot/Pool _pool
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::SimulationSnapshot::Pool* pool;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot::Pool*) == 0x8);
    // private Fusion.SimulationSnapshot _root
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationSnapshot* root;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot[] _inOrder
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Fusion::SimulationSnapshot*> inOrder;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationSnapshot*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Fusion.Tick,Fusion.SimulationSnapshot> _byTick
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::SimulationSnapshot*>* byTick;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::SimulationSnapshot*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::SimulationSnapshot::IHistory
    operator ::Fusion::SimulationSnapshot::IHistory() noexcept {
      return *reinterpret_cast<::Fusion::SimulationSnapshot::IHistory*>(this);
    }
    // Get instance field reference: private System.Int32 _tail
    [[deprecated("Use field access instead!")]] int& dyn__tail();
    // Get instance field reference: private System.Int32 _head
    [[deprecated("Use field access instead!")]] int& dyn__head();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: private Fusion.SimulationSnapshot/Pool _pool
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot::Pool*& dyn__pool();
    // Get instance field reference: private Fusion.SimulationSnapshot _root
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__root();
    // Get instance field reference: private Fusion.SimulationSnapshot[] _inOrder
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationSnapshot*>& dyn__inOrder();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.Tick,Fusion.SimulationSnapshot> _byTick
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::SimulationSnapshot*>*& dyn__byTick();
    // public Fusion.SimulationSnapshot get_Oldest()
    // Offset: 0x2B87418
    ::Fusion::SimulationSnapshot* get_Oldest();
    // public Fusion.SimulationSnapshot get_Latest()
    // Offset: 0x2B87498
    ::Fusion::SimulationSnapshot* get_Latest();
    // public Fusion.SimulationSnapshot get_Item(System.Int32 index)
    // Offset: 0x2B87518
    ::Fusion::SimulationSnapshot* get_Item(int index);
    // public Fusion.SimulationSnapshot get_Root()
    // Offset: 0x2B875B4
    ::Fusion::SimulationSnapshot* get_Root();
    // public System.Int32 get_Count()
    // Offset: 0x2B875BC
    int get_Count();
    // public Fusion.Tick get_MaxTick()
    // Offset: 0x2B875C4
    ::Fusion::Tick get_MaxTick();
    // System.Void .ctor(System.Int32 history, Fusion.SimulationSnapshot/Pool pool)
    // Offset: 0x2B875F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationSnapshot::History* New_ctor(int history, ::Fusion::SimulationSnapshot::Pool* pool) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationSnapshot::History::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationSnapshot::History*, creationType>(history, pool)));
    }
    // public System.Void Dispose()
    // Offset: 0x2B87718
    void Dispose();
    // public System.Boolean TryGet(Fusion.Tick tick, out Fusion.SimulationSnapshot snapshot)
    // Offset: 0x2B87788
    bool TryGet(::Fusion::Tick tick, ByRef<::Fusion::SimulationSnapshot*> snapshot);
    // public Fusion.SimulationSnapshot Get(Fusion.Tick tick)
    // Offset: 0x2B87818
    ::Fusion::SimulationSnapshot* Get(::Fusion::Tick tick);
    // public Fusion.SimulationSnapshot Next(Fusion.Tick tick, System.Boolean copyPrevious)
    // Offset: 0x2B87884
    ::Fusion::SimulationSnapshot* Next(::Fusion::Tick tick, bool copyPrevious);
    // public System.Void DisposeAllExcept(System.Collections.Generic.HashSet`1<Fusion.Tick> save)
    // Offset: 0x2B87B68
    void DisposeAllExcept(::System::Collections::Generic::HashSet_1<::Fusion::Tick>* save);
    // public System.Void DisposeOlderThan(Fusion.Tick tick)
    // Offset: 0x2B87B6C
    void DisposeOlderThan(::Fusion::Tick tick);
  }; // Fusion.SimulationSnapshot/History
  #pragma pack(pop)
  static check_size<sizeof(SimulationSnapshot::History), 56 + sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::SimulationSnapshot*>*)> __Fusion_SimulationSnapshot_HistorySizeCheck;
  static_assert(sizeof(SimulationSnapshot::History) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_Oldest
// Il2CppName: get_Oldest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::get_Oldest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_Oldest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_Latest
// Il2CppName: get_Latest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::get_Latest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_Latest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)(int)>(&Fusion::SimulationSnapshot::History::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_Root
// Il2CppName: get_Root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::get_Root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_Root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::get_MaxTick
// Il2CppName: get_MaxTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::get_MaxTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "get_MaxTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::History::*)()>(&Fusion::SimulationSnapshot::History::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::TryGet
// Il2CppName: TryGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::History::*)(::Fusion::Tick, ByRef<::Fusion::SimulationSnapshot*>)>(&Fusion::SimulationSnapshot::History::TryGet)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "TryGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, snapshot});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)(::Fusion::Tick)>(&Fusion::SimulationSnapshot::History::Get)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::History::*)(::Fusion::Tick, bool)>(&Fusion::SimulationSnapshot::History::Next)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* copyPrevious = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, copyPrevious});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::DisposeAllExcept
// Il2CppName: DisposeAllExcept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::History::*)(::System::Collections::Generic::HashSet_1<::Fusion::Tick>*)>(&Fusion::SimulationSnapshot::History::DisposeAllExcept)> {
  static const MethodInfo* get() {
    static auto* save = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "Tick")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "DisposeAllExcept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{save});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::History::DisposeOlderThan
// Il2CppName: DisposeOlderThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::History::*)(::Fusion::Tick)>(&Fusion::SimulationSnapshot::History::DisposeOlderThan)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::History*), "DisposeOlderThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
