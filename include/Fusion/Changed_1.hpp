// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkBehaviour
  class NetworkBehaviour;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Changed`1<T>
  template<typename T>
  struct Changed_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Fusion::Changed_1, "Fusion", "Changed`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Changed`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct Changed_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32* _old
    // Size: 0x8
    // Offset: 0x0
    int* old;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32* _new
    // Size: 0x8
    // Offset: 0x0
    int* _new;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Boolean _rescan
    // Size: 0x1
    // Offset: 0x0
    bool rescan;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private T _behaviour
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T behaviour;
    public:
    // Creating value type constructor for type: Changed_1
    constexpr Changed_1(int* old_ = {}, int* _new_ = {}, bool rescan_ = {}, T behaviour_ = {}) noexcept : old{old_}, _new{_new_}, rescan{rescan_}, behaviour{behaviour_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32* _old
    [[deprecated("Use field access instead!")]] int*& dyn__old() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::dyn__old");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_old"))->offset;
      return *reinterpret_cast<int**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32* _new
    [[deprecated("Use field access instead!")]] int*& dyn__new() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::dyn__new");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_new"))->offset;
      return *reinterpret_cast<int**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _rescan
    [[deprecated("Use field access instead!")]] bool& dyn__rescan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::dyn__rescan");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rescan"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _behaviour
    [[deprecated("Use field access instead!")]] T& dyn__behaviour() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::dyn__behaviour");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_behaviour"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_Behaviour()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Behaviour() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::get_Behaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Behaviour", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // System.Boolean get_ShouldRescan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldRescan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::get_ShouldRescan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ShouldRescan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void .ctor(T behaviour, System.Int32* old)
    // Offset: 0xFFFFFFFFFFFFFFFF
    Changed_1(T behaviour, int* old) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(behaviour), ::il2cpp_utils::ExtractType(old)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, behaviour, old);
    }
    // public System.Void Rescan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Rescan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::Rescan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Rescan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void LoadOld()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LoadOld() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::LoadOld");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "LoadOld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void LoadNew()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LoadNew() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Changed_1::LoadNew");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "LoadNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Fusion.Changed`1
  // Could not write size check! Type: Fusion.Changed`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
