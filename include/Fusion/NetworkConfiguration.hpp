// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetConfig
  struct NetConfig;
  // Forward declaring type: NetAddress
  struct NetAddress;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkConfiguration
  class NetworkConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkConfiguration*, "Fusion", "NetworkConfiguration");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkConfiguration : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkConfiguration::ReliableDataTransfers
    struct ReliableDataTransfers;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkConfiguration/ReliableDataTransfers
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct ReliableDataTransfers/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ReliableDataTransfers
      constexpr ReliableDataTransfers(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToServer
      static constexpr const int ClientToServer = 1;
      // Get static field: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToServer
      static ::Fusion::NetworkConfiguration::ReliableDataTransfers _get_ClientToServer();
      // Set static field: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToServer
      static void _set_ClientToServer(::Fusion::NetworkConfiguration::ReliableDataTransfers value);
      // static field const value: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToClientWithServerProxy
      static constexpr const int ClientToClientWithServerProxy = 2;
      // Get static field: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToClientWithServerProxy
      static ::Fusion::NetworkConfiguration::ReliableDataTransfers _get_ClientToClientWithServerProxy();
      // Set static field: static public Fusion.NetworkConfiguration/ReliableDataTransfers ClientToClientWithServerProxy
      static void _set_ClientToClientWithServerProxy(::Fusion::NetworkConfiguration::ReliableDataTransfers value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkConfiguration/ReliableDataTransfers
    #pragma pack(pop)
    static check_size<sizeof(NetworkConfiguration::ReliableDataTransfers), 0 + sizeof(int)> __Fusion_NetworkConfiguration_ReliableDataTransfersSizeCheck;
    static_assert(sizeof(NetworkConfiguration::ReliableDataTransfers) == 0x4);
    public:
    // public System.Int32 SocketSendBufferSize
    // Size: 0x4
    // Offset: 0x10
    int SocketSendBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SocketRecvBufferSize
    // Size: 0x4
    // Offset: 0x14
    int SocketRecvBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ConnectAttempts
    // Size: 0x4
    // Offset: 0x18
    int ConnectAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ConnectAttempts and: ConnectInterval
    char __padding2[0x4] = {};
    // public System.Double ConnectInterval
    // Size: 0x8
    // Offset: 0x20
    double ConnectInterval;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionDefaultRtt
    // Size: 0x8
    // Offset: 0x28
    double ConnectionDefaultRtt;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionTimeout
    // Size: 0x8
    // Offset: 0x30
    double ConnectionTimeout;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionPingInterval
    // Size: 0x8
    // Offset: 0x38
    double ConnectionPingInterval;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double ConnectionShutdownTime
    // Size: 0x8
    // Offset: 0x40
    double ConnectionShutdownTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int32 MtuDefault
    // Size: 0x4
    // Offset: 0x48
    int MtuDefault;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.NetworkConfiguration/ReliableDataTransfers ReliableDataTransferModes
    // Size: 0x4
    // Offset: 0x4C
    ::Fusion::NetworkConfiguration::ReliableDataTransfers ReliableDataTransferModes;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkConfiguration::ReliableDataTransfers) == 0x4);
    public:
    // Get instance field reference: public System.Int32 SocketSendBufferSize
    [[deprecated("Use field access instead!")]] int& dyn_SocketSendBufferSize();
    // Get instance field reference: public System.Int32 SocketRecvBufferSize
    [[deprecated("Use field access instead!")]] int& dyn_SocketRecvBufferSize();
    // Get instance field reference: public System.Int32 ConnectAttempts
    [[deprecated("Use field access instead!")]] int& dyn_ConnectAttempts();
    // Get instance field reference: public System.Double ConnectInterval
    [[deprecated("Use field access instead!")]] double& dyn_ConnectInterval();
    // Get instance field reference: public System.Double ConnectionDefaultRtt
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionDefaultRtt();
    // Get instance field reference: public System.Double ConnectionTimeout
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionTimeout();
    // Get instance field reference: public System.Double ConnectionPingInterval
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionPingInterval();
    // Get instance field reference: public System.Double ConnectionShutdownTime
    [[deprecated("Use field access instead!")]] double& dyn_ConnectionShutdownTime();
    // Get instance field reference: public System.Int32 MtuDefault
    [[deprecated("Use field access instead!")]] int& dyn_MtuDefault();
    // Get instance field reference: public Fusion.NetworkConfiguration/ReliableDataTransfers ReliableDataTransferModes
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkConfiguration::ReliableDataTransfers& dyn_ReliableDataTransferModes();
    // public Fusion.NetworkConfiguration Init()
    // Offset: 0x2B822F4
    ::Fusion::NetworkConfiguration* Init();
    // Fusion.Sockets.NetConfig ToNetConfig(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B82474
    ::Fusion::Sockets::NetConfig ToNetConfig(::Fusion::Sockets::NetAddress address);
    // public System.Void .ctor()
    // Offset: 0x2B825E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkConfiguration*, creationType>()));
    }
  }; // Fusion.NetworkConfiguration
  #pragma pack(pop)
  static check_size<sizeof(NetworkConfiguration), 76 + sizeof(::Fusion::NetworkConfiguration::ReliableDataTransfers)> __Fusion_NetworkConfigurationSizeCheck;
  static_assert(sizeof(NetworkConfiguration) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkConfiguration::ReliableDataTransfers, "Fusion", "NetworkConfiguration/ReliableDataTransfers");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkConfiguration::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkConfiguration* (Fusion::NetworkConfiguration::*)()>(&Fusion::NetworkConfiguration::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkConfiguration*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkConfiguration::ToNetConfig
// Il2CppName: ToNetConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConfig (Fusion::NetworkConfiguration::*)(::Fusion::Sockets::NetAddress)>(&Fusion::NetworkConfiguration::ToNetConfig)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkConfiguration*), "ToNetConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
