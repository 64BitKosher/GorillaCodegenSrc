// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/Statistics
#include "Fusion/Simulation_Statistics.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics::NetStatFlags, "Fusion", "Simulation/Statistics/NetStatFlags");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/Statistics/NetStatFlags
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct Simulation::Statistics::NetStatFlags/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NetStatFlags
    constexpr NetStatFlags(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Fusion.Simulation/Statistics/NetStatFlags RoundTripTime
    static constexpr const int RoundTripTime = 1;
    // Get static field: static public Fusion.Simulation/Statistics/NetStatFlags RoundTripTime
    static ::Fusion::Simulation::Statistics::NetStatFlags _get_RoundTripTime();
    // Set static field: static public Fusion.Simulation/Statistics/NetStatFlags RoundTripTime
    static void _set_RoundTripTime(::Fusion::Simulation::Statistics::NetStatFlags value);
    // static field const value: static public Fusion.Simulation/Statistics/NetStatFlags SentPacketSizes
    static constexpr const int SentPacketSizes = 2;
    // Get static field: static public Fusion.Simulation/Statistics/NetStatFlags SentPacketSizes
    static ::Fusion::Simulation::Statistics::NetStatFlags _get_SentPacketSizes();
    // Set static field: static public Fusion.Simulation/Statistics/NetStatFlags SentPacketSizes
    static void _set_SentPacketSizes(::Fusion::Simulation::Statistics::NetStatFlags value);
    // static field const value: static public Fusion.Simulation/Statistics/NetStatFlags ReceivedPacketSizes
    static constexpr const int ReceivedPacketSizes = 4;
    // Get static field: static public Fusion.Simulation/Statistics/NetStatFlags ReceivedPacketSizes
    static ::Fusion::Simulation::Statistics::NetStatFlags _get_ReceivedPacketSizes();
    // Set static field: static public Fusion.Simulation/Statistics/NetStatFlags ReceivedPacketSizes
    static void _set_ReceivedPacketSizes(::Fusion::Simulation::Statistics::NetStatFlags value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Fusion.Simulation/Statistics/NetStatFlags
  #pragma pack(pop)
  static check_size<sizeof(Simulation::Statistics::NetStatFlags), 0 + sizeof(int)> __Fusion_Simulation_Statistics_NetStatFlagsSizeCheck;
  static_assert(sizeof(Simulation::Statistics::NetStatFlags) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
