// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationConfig
  class SimulationConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationConfig);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationConfig*, "Fusion", "SimulationConfig");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationConfig : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::SimulationConfig::Topologies
    struct Topologies;
    // Nested type: ::Fusion::SimulationConfig::StateReplicationModes
    struct StateReplicationModes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.SimulationConfig/Topologies
    // [TokenAttribute] Offset: FFFFFFFF
    struct Topologies/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Topologies
      constexpr Topologies(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.SimulationConfig/Topologies ClientServer
      static constexpr const int ClientServer = 0;
      // Get static field: static public Fusion.SimulationConfig/Topologies ClientServer
      static ::Fusion::SimulationConfig::Topologies _get_ClientServer();
      // Set static field: static public Fusion.SimulationConfig/Topologies ClientServer
      static void _set_ClientServer(::Fusion::SimulationConfig::Topologies value);
      // static field const value: static public Fusion.SimulationConfig/Topologies Shared
      static constexpr const int Shared = 1;
      // Get static field: static public Fusion.SimulationConfig/Topologies Shared
      static ::Fusion::SimulationConfig::Topologies _get_Shared();
      // Set static field: static public Fusion.SimulationConfig/Topologies Shared
      static void _set_Shared(::Fusion::SimulationConfig::Topologies value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.SimulationConfig/Topologies
    #pragma pack(pop)
    static check_size<sizeof(SimulationConfig::Topologies), 0 + sizeof(int)> __Fusion_SimulationConfig_TopologiesSizeCheck;
    static_assert(sizeof(SimulationConfig::Topologies) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.SimulationConfig/StateReplicationModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct StateReplicationModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StateReplicationModes
      constexpr StateReplicationModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.SimulationConfig/StateReplicationModes DeltaSnapshots
      static constexpr const int DeltaSnapshots = 0;
      // Get static field: static public Fusion.SimulationConfig/StateReplicationModes DeltaSnapshots
      static ::Fusion::SimulationConfig::StateReplicationModes _get_DeltaSnapshots();
      // Set static field: static public Fusion.SimulationConfig/StateReplicationModes DeltaSnapshots
      static void _set_DeltaSnapshots(::Fusion::SimulationConfig::StateReplicationModes value);
      // static field const value: static public Fusion.SimulationConfig/StateReplicationModes EventualConsistency
      static constexpr const int EventualConsistency = 1;
      // Get static field: static public Fusion.SimulationConfig/StateReplicationModes EventualConsistency
      static ::Fusion::SimulationConfig::StateReplicationModes _get_EventualConsistency();
      // Set static field: static public Fusion.SimulationConfig/StateReplicationModes EventualConsistency
      static void _set_EventualConsistency(::Fusion::SimulationConfig::StateReplicationModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.SimulationConfig/StateReplicationModes
    #pragma pack(pop)
    static check_size<sizeof(SimulationConfig::StateReplicationModes), 0 + sizeof(int)> __Fusion_SimulationConfig_StateReplicationModesSizeCheck;
    static_assert(sizeof(SimulationConfig::StateReplicationModes) == 0x4);
    public:
    // public System.Int32 InputDataWordCount
    // Size: 0x4
    // Offset: 0x10
    int InputDataWordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 TickRate
    // Size: 0x4
    // Offset: 0x14
    int TickRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxPrediction
    // Size: 0x4
    // Offset: 0x18
    int MaxPrediction;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 DefaultPlayers
    // Size: 0x4
    // Offset: 0x1C
    int DefaultPlayers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.SimulationConfig/StateReplicationModes ReplicationMode
    // Size: 0x4
    // Offset: 0x20
    ::Fusion::SimulationConfig::StateReplicationModes ReplicationMode;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig::StateReplicationModes) == 0x4);
    // public Fusion.SimulationConfig/Topologies Topology
    // Size: 0x4
    // Offset: 0x24
    ::Fusion::SimulationConfig::Topologies Topology;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig::Topologies) == 0x4);
    // public System.Boolean HostMigration
    // Size: 0x1
    // Offset: 0x28
    bool HostMigration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ObjectInterest
    // Size: 0x1
    // Offset: 0x29
    bool ObjectInterest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ObjectInterest and: ServerPacketInterval
    char __padding7[0x2] = {};
    // public System.Int32 ServerPacketInterval
    // Size: 0x4
    // Offset: 0x2C
    int ServerPacketInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ClientPacketInterval
    // Size: 0x4
    // Offset: 0x30
    int ClientPacketInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 InputDataWordCount
    [[deprecated("Use field access instead!")]] int& dyn_InputDataWordCount();
    // Get instance field reference: public System.Int32 TickRate
    [[deprecated("Use field access instead!")]] int& dyn_TickRate();
    // Get instance field reference: public System.Int32 MaxPrediction
    [[deprecated("Use field access instead!")]] int& dyn_MaxPrediction();
    // Get instance field reference: public System.Int32 DefaultPlayers
    [[deprecated("Use field access instead!")]] int& dyn_DefaultPlayers();
    // Get instance field reference: public Fusion.SimulationConfig/StateReplicationModes ReplicationMode
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig::StateReplicationModes& dyn_ReplicationMode();
    // Get instance field reference: public Fusion.SimulationConfig/Topologies Topology
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig::Topologies& dyn_Topology();
    // Get instance field reference: public System.Boolean HostMigration
    [[deprecated("Use field access instead!")]] bool& dyn_HostMigration();
    // Get instance field reference: public System.Boolean ObjectInterest
    [[deprecated("Use field access instead!")]] bool& dyn_ObjectInterest();
    // Get instance field reference: public System.Int32 ServerPacketInterval
    [[deprecated("Use field access instead!")]] int& dyn_ServerPacketInterval();
    // Get instance field reference: public System.Int32 ClientPacketInterval
    [[deprecated("Use field access instead!")]] int& dyn_ClientPacketInterval();
    // public System.Int32 get_InputTotalWordCount()
    // Offset: 0x2B81EE0
    int get_InputTotalWordCount();
    // System.Int32 get_ServerTickMultiplier()
    // Offset: 0x2B81EEC
    int get_ServerTickMultiplier();
    // public System.Double get_DeltaTime()
    // Offset: 0x2B81EF4
    double get_DeltaTime();
    // public System.Double get_ServerDeltaTime()
    // Offset: 0x2B81F08
    double get_ServerDeltaTime();
    // public System.Double get_ServerPacketDeltaTime()
    // Offset: 0x2B81F1C
    double get_ServerPacketDeltaTime();
    // public System.Double get_ClientPacketDeltaTime()
    // Offset: 0x2B81F3C
    double get_ClientPacketDeltaTime();
    // Fusion.SimulationConfig Init(System.Nullable`1<System.Int32> playerCountOverride, System.Nullable`1<System.Int32> inputWordCount)
    // Offset: 0x2B81F5C
    ::Fusion::SimulationConfig* Init(::System::Nullable_1<int> playerCountOverride, ::System::Nullable_1<int> inputWordCount);
    // Fusion.SimulationConfig Copy()
    // Offset: 0x2B82014
    ::Fusion::SimulationConfig* Copy();
    // public System.Void .ctor()
    // Offset: 0x2B82094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationConfig*, creationType>()));
    }
  }; // Fusion.SimulationConfig
  #pragma pack(pop)
  static check_size<sizeof(SimulationConfig), 48 + sizeof(int)> __Fusion_SimulationConfigSizeCheck;
  static_assert(sizeof(SimulationConfig) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationConfig::StateReplicationModes, "Fusion", "SimulationConfig/StateReplicationModes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationConfig::Topologies, "Fusion", "SimulationConfig/Topologies");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_InputTotalWordCount
// Il2CppName: get_InputTotalWordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_InputTotalWordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_InputTotalWordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_ServerTickMultiplier
// Il2CppName: get_ServerTickMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_ServerTickMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_ServerTickMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_DeltaTime
// Il2CppName: get_DeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_DeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_DeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_ServerDeltaTime
// Il2CppName: get_ServerDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_ServerDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_ServerDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_ServerPacketDeltaTime
// Il2CppName: get_ServerPacketDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_ServerPacketDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_ServerPacketDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::get_ClientPacketDeltaTime
// Il2CppName: get_ClientPacketDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::get_ClientPacketDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "get_ClientPacketDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConfig* (Fusion::SimulationConfig::*)(::System::Nullable_1<int>, ::System::Nullable_1<int>)>(&Fusion::SimulationConfig::Init)> {
  static const MethodInfo* get() {
    static auto* playerCountOverride = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* inputWordCount = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerCountOverride, inputWordCount});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConfig* (Fusion::SimulationConfig::*)()>(&Fusion::SimulationConfig::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationConfig*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
