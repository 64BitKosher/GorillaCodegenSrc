// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: LogOptions
  struct LogOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LogOptions, "Fusion", "LogOptions");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LogOptions
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct LogOptions/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Boolean UseColorTags
    // Size: 0x1
    // Offset: 0x0
    bool UseColorTags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseColorTags and: getColor
    char __padding0[0x7] = {};
    // private readonly System.Func`2<System.Object,System.Int32> _getColor
    // Size: 0x8
    // Offset: 0x8
    ::System::Func_2<::Il2CppObject*, int>* getColor;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Il2CppObject*, int>*) == 0x8);
    public:
    // Creating value type constructor for type: LogOptions
    constexpr LogOptions(bool UseColorTags_ = {}, ::System::Func_2<::Il2CppObject*, int>* getColor_ = {}) noexcept : UseColorTags{UseColorTags_}, getColor{getColor_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Boolean UseColorTags
    [[deprecated("Use field access instead!")]] bool& dyn_UseColorTags();
    // Get instance field reference: private readonly System.Func`2<System.Object,System.Int32> _getColor
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Il2CppObject*, int>*& dyn__getColor();
    // public System.Int32 GetColor(System.Object obj)
    // Offset: 0x2AD75DC
    int GetColor(::Il2CppObject* obj);
    // public System.Void .ctor(System.Boolean useColorTags, System.Func`2<System.Object,System.Int32> getColor)
    // Offset: 0x2AD75FC
    // ABORTED: conflicts with another method.  LogOptions(bool useColorTags, ::System::Func_2<::Il2CppObject*, int>* getColor);
  }; // Fusion.LogOptions
  #pragma pack(pop)
  static check_size<sizeof(LogOptions), 8 + sizeof(::System::Func_2<::Il2CppObject*, int>*)> __Fusion_LogOptionsSizeCheck;
  static_assert(sizeof(LogOptions) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LogOptions::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::LogOptions::*)(::Il2CppObject*)>(&Fusion::LogOptions::GetColor)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LogOptions), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::LogOptions::LogOptions
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
