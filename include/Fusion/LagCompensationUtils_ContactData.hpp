// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.LagCompensationUtils
#include "Fusion/LagCompensationUtils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensationUtils::ContactData, "Fusion", "LagCompensationUtils/ContactData");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensationUtils/ContactData
  // [TokenAttribute] Offset: FFFFFFFF
  struct LagCompensationUtils::ContactData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Point
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Normal
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 Normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single Penetration
    // Size: 0x4
    // Offset: 0x18
    float Penetration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: ContactData
    constexpr ContactData(::UnityEngine::Vector3 Point_ = {}, ::UnityEngine::Vector3 Normal_ = {}, float Penetration_ = {}) noexcept : Point{Point_}, Normal{Normal_}, Penetration{Penetration_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Point
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Point();
    // Get instance field reference: public UnityEngine.Vector3 Normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Normal();
    // Get instance field reference: public System.Single Penetration
    [[deprecated("Use field access instead!")]] float& dyn_Penetration();
  }; // Fusion.LagCompensationUtils/ContactData
  #pragma pack(pop)
  static check_size<sizeof(LagCompensationUtils::ContactData), 24 + sizeof(float)> __Fusion_LagCompensationUtils_ContactDataSizeCheck;
  static_assert(sizeof(LagCompensationUtils::ContactData) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
