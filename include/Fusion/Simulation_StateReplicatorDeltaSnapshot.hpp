// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Simulation/StateReplicator
#include "Fusion/Simulation_StateReplicator.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBufferBlock
  struct NetBitBufferBlock;
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectDestroyFlags
  struct NetworkObjectDestroyFlags;
  // Forward declaring type: SimulationPacketEnvelope
  struct SimulationPacketEnvelope;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::StateReplicatorDeltaSnapshot);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::StateReplicatorDeltaSnapshot*, "Fusion", "Simulation/StateReplicatorDeltaSnapshot");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/StateReplicatorDeltaSnapshot
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::StateReplicatorDeltaSnapshot : public ::Fusion::Simulation::StateReplicator {
    public:
    // Writing base type padding for base size: 0x1C to desired offset: 0x20
    char ___base_padding[0x4] = {};
    // Nested type: ::Fusion::Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr
    struct BitBufferPtr;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Simulation/StateReplicatorDeltaSnapshot/BitBufferPtr
    // [TokenAttribute] Offset: FFFFFFFF
    struct BitBufferPtr/*, public ::System::ValueType*/ {
      public:
      public:
      // public Fusion.Sockets.NetBitBuffer* Ptr
      // Size: 0x8
      // Offset: 0x0
      ::Fusion::Sockets::NetBitBuffer* Ptr;
      // Field size check
      static_assert(sizeof(::Fusion::Sockets::NetBitBuffer*) == 0x8);
      public:
      // Creating value type constructor for type: BitBufferPtr
      constexpr BitBufferPtr(::Fusion::Sockets::NetBitBuffer* Ptr_ = {}) noexcept : Ptr{Ptr_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::Fusion::Sockets::NetBitBuffer*
      constexpr operator ::Fusion::Sockets::NetBitBuffer*() const noexcept {
        return Ptr;
      }
      // Get instance field reference: public Fusion.Sockets.NetBitBuffer* Ptr
      [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBuffer*& dyn_Ptr();
    }; // Fusion.Simulation/StateReplicatorDeltaSnapshot/BitBufferPtr
    #pragma pack(pop)
    static check_size<sizeof(Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr), 0 + sizeof(::Fusion::Sockets::NetBitBuffer*)> __Fusion_Simulation_StateReplicatorDeltaSnapshot_BitBufferPtrSizeCheck;
    static_assert(sizeof(Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr) == 0x8);
    public:
    // private System.Collections.Generic.HashSet`1<Fusion.NetworkId> _removed
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>* removed;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<Fusion.NetworkId> _created
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>* created;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*) == 0x8);
    // private Fusion.Tick _sharedTick
    // Size: 0x4
    // Offset: 0x30
    ::Fusion::Tick sharedTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // Padding between fields: sharedTick and: deltaBuffers
    char __padding2[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<Fusion.Tick,Fusion.Simulation/StateReplicatorDeltaSnapshot/BitBufferPtr> _deltaBuffers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr>* deltaBuffers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr>*) == 0x8);
    // private Fusion.Sockets.NetBitBufferBlock* _deltaBuffersBlock
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::Sockets::NetBitBufferBlock* deltaBuffersBlock;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetBitBufferBlock*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Fusion.NetworkId> _removed
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*& dyn__removed();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Fusion.NetworkId> _created
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*& dyn__created();
    // Get instance field reference: private Fusion.Tick _sharedTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__sharedTick();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.Tick,Fusion.Simulation/StateReplicatorDeltaSnapshot/BitBufferPtr> _deltaBuffers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, ::Fusion::Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr>*& dyn__deltaBuffers();
    // Get instance field reference: private Fusion.Sockets.NetBitBufferBlock* _deltaBuffersBlock
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetBitBufferBlock*& dyn__deltaBuffersBlock();
    // public override Fusion.Tick get_SharedTick()
    // Offset: 0x2B7A4AC
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: Fusion.Tick StateReplicator::get_SharedTick()
    ::Fusion::Tick get_SharedTick();
    // public override System.Boolean get_UseObjectInterest()
    // Offset: 0x2B7A4B4
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Boolean StateReplicator::get_UseObjectInterest()
    bool get_UseObjectInterest();
    // public System.Void .ctor(Fusion.Simulation simulation)
    // Offset: 0x2B7A4BC
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::.ctor(Fusion.Simulation simulation)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::StateReplicatorDeltaSnapshot* New_ctor(::Fusion::Simulation* simulation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::StateReplicatorDeltaSnapshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::StateReplicatorDeltaSnapshot*, creationType>(simulation)));
    }
    // public override System.Void Dispose()
    // Offset: 0x2B7A678
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::Dispose()
    void Dispose();
    // public override System.Void UpdateRemotePrefabs()
    // Offset: 0x2B7A698
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::UpdateRemotePrefabs()
    void UpdateRemotePrefabs();
    // public override System.Void OnObjectDestroyed(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    // Offset: 0x2B7AC18
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnObjectDestroyed(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    void OnObjectDestroyed(::Fusion::NetworkId id, ::Fusion::NetworkObjectDestroyFlags flags);
    // public override System.Void SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7ADD4
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    void SendPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // public override System.Void RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7B1A8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    void RecvPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public override System.Void SendBegin()
    // Offset: 0x2B7B4EC
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::SendBegin()
    void SendBegin();
    // public override System.Void SendEnd()
    // Offset: 0x2B7B668
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::SendEnd()
    void SendEnd();
    // public override System.Void OnPacketLost(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7B7F8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnPacketLost(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    void OnPacketLost(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
    // public override System.Void OnPacketDelivered(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7B8D8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnPacketDelivered(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    void OnPacketDelivered(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
  }; // Fusion.Simulation/StateReplicatorDeltaSnapshot
  #pragma pack(pop)
  static check_size<sizeof(Simulation::StateReplicatorDeltaSnapshot), 64 + sizeof(::Fusion::Sockets::NetBitBufferBlock*)> __Fusion_Simulation_StateReplicatorDeltaSnapshotSizeCheck;
  static_assert(sizeof(Simulation::StateReplicatorDeltaSnapshot) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::StateReplicatorDeltaSnapshot::BitBufferPtr, "Fusion", "Simulation/StateReplicatorDeltaSnapshot/BitBufferPtr");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::get_SharedTick
// Il2CppName: get_SharedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::get_SharedTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "get_SharedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::get_UseObjectInterest
// Il2CppName: get_UseObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::get_UseObjectInterest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "get_UseObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::UpdateRemotePrefabs
// Il2CppName: UpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::UpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "UpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::OnObjectDestroyed
// Il2CppName: OnObjectDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)(::Fusion::NetworkId, ::Fusion::NetworkObjectDestroyFlags)>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::OnObjectDestroyed)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectDestroyFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "OnObjectDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, flags});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::SendPacket
// Il2CppName: SendPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::SendPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "SendPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::RecvPacket
// Il2CppName: RecvPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::RecvPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "RecvPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::SendBegin
// Il2CppName: SendBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::SendBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "SendBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::SendEnd
// Il2CppName: SendEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)()>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::SendEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "SendEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::OnPacketLost
// Il2CppName: OnPacketLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::OnPacketLost)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "OnPacketLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorDeltaSnapshot::OnPacketDelivered
// Il2CppName: OnPacketDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorDeltaSnapshot::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorDeltaSnapshot::OnPacketDelivered)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorDeltaSnapshot*), "OnPacketDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
