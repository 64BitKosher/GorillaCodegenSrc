// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkRunnerCallbackArgs
#include "Fusion/NetworkRunnerCallbackArgs.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkRunnerCallbackArgs::ConnectRequest);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunnerCallbackArgs::ConnectRequest*, "Fusion", "NetworkRunnerCallbackArgs/ConnectRequest");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.NetworkRunnerCallbackArgs/ConnectRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkRunnerCallbackArgs::ConnectRequest : public ::Il2CppObject {
    public:
    public:
    // private Fusion.Sockets.NetAddress <RemoteAddress>k__BackingField
    // Size: 0x18
    // Offset: 0x10
    ::Fusion::Sockets::NetAddress RemoteAddress;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // System.Nullable`1<System.Boolean> Accepted
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::System::Nullable_1<bool> Accepted;
    public:
    // Get instance field reference: private Fusion.Sockets.NetAddress <RemoteAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_$RemoteAddress$k__BackingField();
    // Get instance field reference: System.Nullable`1<System.Boolean> Accepted
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn_Accepted();
    // public Fusion.Sockets.NetAddress get_RemoteAddress()
    // Offset: 0x2B6C238
    ::Fusion::Sockets::NetAddress get_RemoteAddress();
    // public System.Void set_RemoteAddress(Fusion.Sockets.NetAddress value)
    // Offset: 0x2B6C24C
    void set_RemoteAddress(::Fusion::Sockets::NetAddress value);
    // public System.Void Accept()
    // Offset: 0x2B6C260
    void Accept();
    // public System.Void Refuse()
    // Offset: 0x2B6C2C4
    void Refuse();
    // public System.Void .ctor()
    // Offset: 0x2B6C328
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkRunnerCallbackArgs::ConnectRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunnerCallbackArgs::ConnectRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkRunnerCallbackArgs::ConnectRequest*, creationType>()));
    }
  }; // Fusion.NetworkRunnerCallbackArgs/ConnectRequest
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkRunnerCallbackArgs::ConnectRequest::get_RemoteAddress
// Il2CppName: get_RemoteAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::NetworkRunnerCallbackArgs::ConnectRequest::*)()>(&Fusion::NetworkRunnerCallbackArgs::ConnectRequest::get_RemoteAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunnerCallbackArgs::ConnectRequest*), "get_RemoteAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunnerCallbackArgs::ConnectRequest::set_RemoteAddress
// Il2CppName: set_RemoteAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunnerCallbackArgs::ConnectRequest::*)(::Fusion::Sockets::NetAddress)>(&Fusion::NetworkRunnerCallbackArgs::ConnectRequest::set_RemoteAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunnerCallbackArgs::ConnectRequest*), "set_RemoteAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunnerCallbackArgs::ConnectRequest::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunnerCallbackArgs::ConnectRequest::*)()>(&Fusion::NetworkRunnerCallbackArgs::ConnectRequest::Accept)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunnerCallbackArgs::ConnectRequest*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunnerCallbackArgs::ConnectRequest::Refuse
// Il2CppName: Refuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunnerCallbackArgs::ConnectRequest::*)()>(&Fusion::NetworkRunnerCallbackArgs::ConnectRequest::Refuse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunnerCallbackArgs::ConnectRequest*), "Refuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunnerCallbackArgs::ConnectRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
