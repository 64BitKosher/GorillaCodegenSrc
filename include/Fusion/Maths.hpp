// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Maths
  class Maths;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Maths);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Maths*, "Fusion", "Maths");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Maths
  // [TokenAttribute] Offset: FFFFFFFF
  class Maths : public ::Il2CppObject {
    public:
    // Get static field: static private System.Byte[] _debruijnTable32
    static ::ArrayW<uint8_t> _get__debruijnTable32();
    // Set static field: static private System.Byte[] _debruijnTable32
    static void _set__debruijnTable32(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] _debruijnTable64
    static ::ArrayW<uint8_t> _get__debruijnTable64();
    // Set static field: static private System.Byte[] _debruijnTable64
    static void _set__debruijnTable64(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Int32[] DeBruijnLookupLong
    static ::ArrayW<int> _get_DeBruijnLookupLong();
    // Set static field: static private readonly System.Int32[] DeBruijnLookupLong
    static void _set_DeBruijnLookupLong(::ArrayW<int> value);
    // static public System.Int32 SizeOfBits()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int SizeOfBits() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Maths::SizeOfBits");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Maths", "SizeOfBits", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Int32 BytesRequiredForBits(System.Int32 b)
    // Offset: 0x2AD81C8
    static int BytesRequiredForBits(int b);
    // static public System.Int32 IntsRequiredForBits(System.Int32 b)
    // Offset: 0x2AD81D4
    static int IntsRequiredForBits(int b);
    // static public System.String PrintBits(System.Byte* data, System.Int32 count)
    // Offset: 0x2AD81E0
    static ::StringW PrintBits(uint8_t* data, int count);
    // static public System.Int32 CountSetBits(System.UInt64 x)
    // Offset: 0x2AD8324
    static int CountSetBits(uint64_t x);
    // static public System.Byte ClampToByte(System.Int32 v)
    // Offset: 0x2AD8358
    static uint8_t ClampToByte(int v);
    // static public System.Int64 ZigZagEncode(System.Int64 i)
    // Offset: 0x2AD8370
    static int64_t ZigZagEncode(int64_t i);
    // static public System.Int64 ZigZagDecode(System.Int64 i)
    // Offset: 0x2AD837C
    static int64_t ZigZagDecode(int64_t i);
    // static public System.Int32 Clamp(System.Int32 v, System.Int32 min, System.Int32 max)
    // Offset: 0x2AD838C
    static int Clamp(int v, int min, int max);
    // static public System.Double Clamp(System.Double v, System.Double min, System.Double max)
    // Offset: 0x2AD83A8
    static double Clamp(double v, double min, double max);
    // static public System.Double Clamp01(System.Double v)
    // Offset: 0x2AD83C8
    static double Clamp01(double v);
    // static public System.Double Lerp(System.Double a, System.Double b, System.Double t)
    // Offset: 0x2AD83EC
    static double Lerp(double a, double b, double t);
    // static public System.Int32 BitScanReverse(System.UInt32 v)
    // Offset: 0x2AD847C
    static int BitScanReverse(uint v);
    // static public System.Int32 BitScanReverse(System.Int64 v)
    // Offset: 0x2AD851C
    static int BitScanReverse(int64_t v);
    // static public System.Int32 BitScanReverse(System.UInt64 v)
    // Offset: 0x2AD8604
    static int BitScanReverse(uint64_t v);
    // static private System.Void .cctor()
    // Offset: 0x2AD86BC
    static void _cctor();
  }; // Fusion.Maths
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Maths::SizeOfBits
// Il2CppName: SizeOfBits
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Maths::BytesRequiredForBits
// Il2CppName: BytesRequiredForBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Fusion::Maths::BytesRequiredForBits)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "BytesRequiredForBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::IntsRequiredForBits
// Il2CppName: IntsRequiredForBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Fusion::Maths::IntsRequiredForBits)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "IntsRequiredForBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::PrintBits
// Il2CppName: PrintBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint8_t*, int)>(&Fusion::Maths::PrintBits)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "PrintBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, count});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::CountSetBits
// Il2CppName: CountSetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&Fusion::Maths::CountSetBits)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "CountSetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::ClampToByte
// Il2CppName: ClampToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&Fusion::Maths::ClampToByte)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "ClampToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::ZigZagEncode
// Il2CppName: ZigZagEncode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&Fusion::Maths::ZigZagEncode)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "ZigZagEncode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::ZigZagDecode
// Il2CppName: ZigZagDecode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&Fusion::Maths::ZigZagDecode)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "ZigZagDecode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&Fusion::Maths::Clamp)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, min, max});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&Fusion::Maths::Clamp)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, min, max});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::Clamp01
// Il2CppName: Clamp01
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&Fusion::Maths::Clamp01)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "Clamp01", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&Fusion::Maths::Lerp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::BitScanReverse
// Il2CppName: BitScanReverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&Fusion::Maths::BitScanReverse)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "BitScanReverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::BitScanReverse
// Il2CppName: BitScanReverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&Fusion::Maths::BitScanReverse)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "BitScanReverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::BitScanReverse
// Il2CppName: BitScanReverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&Fusion::Maths::BitScanReverse)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), "BitScanReverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Fusion::Maths::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Maths::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Maths*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
