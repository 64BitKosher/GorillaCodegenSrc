// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.DecoratingPropertyAttribute
#include "Fusion/DecoratingPropertyAttribute.hpp"
// Including type: Fusion.DoIfCompareOperator
#include "Fusion/DoIfCompareOperator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: DoIfAttribute
  class DoIfAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::DoIfAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::DoIfAttribute*, "Fusion", "DoIfAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.DoIfAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class DoIfAttribute : public ::Fusion::DecoratingPropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // public System.String ConditionMember
    // Size: 0x8
    // Offset: 0x18
    ::StringW ConditionMember;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Double CompareToValue
    // Size: 0x8
    // Offset: 0x20
    double CompareToValue;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public Fusion.DoIfCompareOperator Compare
    // Size: 0x4
    // Offset: 0x28
    ::Fusion::DoIfCompareOperator Compare;
    // Field size check
    static_assert(sizeof(::Fusion::DoIfCompareOperator) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.String ConditionMember
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ConditionMember();
    // Get instance field reference: public System.Double CompareToValue
    [[deprecated("Use field access instead!")]] double& dyn_CompareToValue();
    // Get instance field reference: public Fusion.DoIfCompareOperator Compare
    [[deprecated("Use field access instead!")]] ::Fusion::DoIfCompareOperator& dyn_Compare();
    // public System.Void .ctor(System.String conditionMemberName, System.Double compareToValue)
    // Offset: 0x2AFEE2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DoIfAttribute* New_ctor(::StringW conditionMemberName, double compareToValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::DoIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DoIfAttribute*, creationType>(conditionMemberName, compareToValue)));
    }
    // public System.Void .ctor(System.String conditionMemberName, System.Boolean compareToValue)
    // Offset: 0x2AFEEDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DoIfAttribute* New_ctor(::StringW conditionMemberName, bool compareToValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::DoIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DoIfAttribute*, creationType>(conditionMemberName, compareToValue)));
    }
    // public System.Void .ctor(System.String conditionMemberName)
    // Offset: 0x2AFEF80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DoIfAttribute* New_ctor(::StringW conditionMemberName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::DoIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DoIfAttribute*, creationType>(conditionMemberName)));
    }
  }; // Fusion.DoIfAttribute
  #pragma pack(pop)
  static check_size<sizeof(DoIfAttribute), 40 + sizeof(::Fusion::DoIfCompareOperator)> __Fusion_DoIfAttributeSizeCheck;
  static_assert(sizeof(DoIfAttribute) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::DoIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::DoIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::DoIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
