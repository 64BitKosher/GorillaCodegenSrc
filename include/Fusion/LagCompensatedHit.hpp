// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.HitType
#include "Fusion/HitType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: RaycastHit
  struct RaycastHit;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Hitbox
  class Hitbox;
  // Forward declaring type: HitboxHit
  struct HitboxHit;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: LagCompensatedHit
  struct LagCompensatedHit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensatedHit, "Fusion", "LagCompensatedHit");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x44
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensatedHit
  // [TokenAttribute] Offset: FFFFFFFF
  struct LagCompensatedHit/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.HitType Type
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::HitType Type;
    // Field size check
    static_assert(sizeof(::Fusion::HitType) == 0x4);
    // Padding between fields: Type and: GameObject
    char __padding0[0x4] = {};
    // public UnityEngine.GameObject GameObject
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::GameObject* GameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 Normal
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 Normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Point
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 Point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single Distance
    // Size: 0x4
    // Offset: 0x28
    float Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: Distance and: Hitbox
    char __padding4[0x4] = {};
    // public Fusion.Hitbox Hitbox
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Hitbox* Hitbox;
    // Field size check
    static_assert(sizeof(::Fusion::Hitbox*) == 0x8);
    // public UnityEngine.Collider Collider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Collider* Collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // System.Single _sortAux
    // Size: 0x4
    // Offset: 0x40
    float sortAux;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: LagCompensatedHit
    constexpr LagCompensatedHit(::Fusion::HitType Type_ = {}, ::UnityEngine::GameObject* GameObject_ = {}, ::UnityEngine::Vector3 Normal_ = {}, ::UnityEngine::Vector3 Point_ = {}, float Distance_ = {}, ::Fusion::Hitbox* Hitbox_ = {}, ::UnityEngine::Collider* Collider_ = {}, float sortAux_ = {}) noexcept : Type{Type_}, GameObject{GameObject_}, Normal{Normal_}, Point{Point_}, Distance{Distance_}, Hitbox{Hitbox_}, Collider{Collider_}, sortAux{sortAux_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.HitType Type
    [[deprecated("Use field access instead!")]] ::Fusion::HitType& dyn_Type();
    // Get instance field reference: public UnityEngine.GameObject GameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_GameObject();
    // Get instance field reference: public UnityEngine.Vector3 Normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Normal();
    // Get instance field reference: public UnityEngine.Vector3 Point
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Point();
    // Get instance field reference: public System.Single Distance
    [[deprecated("Use field access instead!")]] float& dyn_Distance();
    // Get instance field reference: public Fusion.Hitbox Hitbox
    [[deprecated("Use field access instead!")]] ::Fusion::Hitbox*& dyn_Hitbox();
    // Get instance field reference: public UnityEngine.Collider Collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_Collider();
    // Get instance field reference: System.Single _sortAux
    [[deprecated("Use field access instead!")]] float& dyn__sortAux();
    // public UnityEngine.GameObject get_Object()
    // Offset: 0x2B410E4
    ::UnityEngine::GameObject* get_Object();
    // static public Fusion.LagCompensatedHit op_Explicit(UnityEngine.RaycastHit raycastHit)
    // Offset: 0x2B3ED2C
    explicit LagCompensatedHit(::UnityEngine::RaycastHit& raycastHit);
    // static Fusion.LagCompensatedHit FromHitboxHit(ref Fusion.HitboxHit hitboxHit)
    // Offset: 0x2B3EC70
    static ::Fusion::LagCompensatedHit FromHitboxHit(ByRef<::Fusion::HitboxHit> hitboxHit);
    // static System.Void QuickSort(System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 low, System.Int32 high)
    // Offset: 0x2B410EC
    static void QuickSort(::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int low, int high);
    // static System.Void QuickSortDistance(System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 low, System.Int32 high)
    // Offset: 0x2B41320
    static void QuickSortDistance(::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int low, int high);
  }; // Fusion.LagCompensatedHit
  #pragma pack(pop)
  static check_size<sizeof(LagCompensatedHit), 64 + sizeof(float)> __Fusion_LagCompensatedHitSizeCheck;
  static_assert(sizeof(LagCompensatedHit) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LagCompensatedHit::get_Object
// Il2CppName: get_Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Fusion::LagCompensatedHit::*)()>(&Fusion::LagCompensatedHit::get_Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensatedHit), "get_Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensatedHit::LagCompensatedHit
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Fusion::LagCompensatedHit::FromHitboxHit
// Il2CppName: FromHitboxHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LagCompensatedHit (*)(ByRef<::Fusion::HitboxHit>)>(&Fusion::LagCompensatedHit::FromHitboxHit)> {
  static const MethodInfo* get() {
    static auto* hitboxHit = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensatedHit), "FromHitboxHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitboxHit});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensatedHit::QuickSort
// Il2CppName: QuickSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, int)>(&Fusion::LagCompensatedHit::QuickSort)> {
  static const MethodInfo* get() {
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* high = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensatedHit), "QuickSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hits, low, high});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensatedHit::QuickSortDistance
// Il2CppName: QuickSortDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, int)>(&Fusion::LagCompensatedHit::QuickSortDistance)> {
  static const MethodInfo* get() {
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* high = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensatedHit), "QuickSortDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hits, low, high});
  }
};
