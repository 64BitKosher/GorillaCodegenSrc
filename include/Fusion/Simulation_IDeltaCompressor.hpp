// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::IDeltaCompressor);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::IDeltaCompressor*, "Fusion", "Simulation/IDeltaCompressor");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/IDeltaCompressor
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::IDeltaCompressor {
    public:
    // public System.Void Pack(System.Int32* current, System.Int32* shared, System.Int32 words, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Pack(int* current, int* shared, int words, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public System.Void Unpack(System.Int32* target, System.Int32 bitCount, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unpack(int* target, int bitCount, ::Fusion::Sockets::NetBitBuffer* buffer);
  }; // Fusion.Simulation/IDeltaCompressor
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::IDeltaCompressor::Pack
// Il2CppName: Pack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::IDeltaCompressor::*)(int*, int*, int, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::IDeltaCompressor::Pack)> {
  static const MethodInfo* get() {
    static auto* current = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* shared = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* words = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::IDeltaCompressor*), "Pack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, shared, words, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::IDeltaCompressor::Unpack
// Il2CppName: Unpack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::IDeltaCompressor::*)(int*, int, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::IDeltaCompressor::Unpack)> {
  static const MethodInfo* get() {
    static auto* target = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::IDeltaCompressor*), "Unpack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, bitCount, buffer});
  }
};
