// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationBehaviourUpdater
#include "Fusion/SimulationBehaviourUpdater.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Including type: Fusion.SimulationStages
#include "Fusion/SimulationStages.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationBehaviour
  class SimulationBehaviour;
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationBehaviourUpdater::BehaviourList);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationBehaviourUpdater::BehaviourList*, "Fusion", "SimulationBehaviourUpdater/BehaviourList");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationBehaviourUpdater/BehaviourList
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationBehaviourUpdater::BehaviourList : public ::Il2CppObject/*, public ::Fusion::ILogBuilder*/ {
    public:
    public:
    // public System.Type Type
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public Fusion.SimulationModes Modes
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::SimulationModes Modes;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    // public Fusion.SimulationStages Stages
    // Size: 0x4
    // Offset: 0x1C
    ::Fusion::SimulationStages Stages;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationStages) == 0x4);
    // public Fusion.SimulationBehaviour Head
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::SimulationBehaviour* Head;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviour*) == 0x8);
    // public Fusion.SimulationBehaviour Tail
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationBehaviour* Tail;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviour*) == 0x8);
    // public System.Int32 LockCount
    // Size: 0x4
    // Offset: 0x30
    int LockCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: LockCount and: PendingRemovals
    char __padding5[0x4] = {};
    // public System.Collections.Generic.List`1<Fusion.SimulationBehaviour> PendingRemovals
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::Fusion::SimulationBehaviour*>* PendingRemovals;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationBehaviour*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // Get instance field reference: public System.Type Type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_Type();
    // Get instance field reference: public Fusion.SimulationModes Modes
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn_Modes();
    // Get instance field reference: public Fusion.SimulationStages Stages
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationStages& dyn_Stages();
    // Get instance field reference: public Fusion.SimulationBehaviour Head
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviour*& dyn_Head();
    // Get instance field reference: public Fusion.SimulationBehaviour Tail
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviour*& dyn_Tail();
    // Get instance field reference: public System.Int32 LockCount
    [[deprecated("Use field access instead!")]] int& dyn_LockCount();
    // Get instance field reference: public System.Collections.Generic.List`1<Fusion.SimulationBehaviour> PendingRemovals
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SimulationBehaviour*>*& dyn_PendingRemovals();
    // public System.Void AddAfter(Fusion.SimulationBehaviour item, Fusion.SimulationBehaviour after)
    // Offset: 0x2B1A6F4
    void AddAfter(::Fusion::SimulationBehaviour* item, ::Fusion::SimulationBehaviour* after);
    // public System.Void AddFirst(Fusion.SimulationBehaviour item)
    // Offset: 0x2B1A7F0
    void AddFirst(::Fusion::SimulationBehaviour* item);
    // public System.Void AddLast(Fusion.SimulationBehaviour item)
    // Offset: 0x2B1A77C
    void AddLast(::Fusion::SimulationBehaviour* item);
    // public System.Void RemoveAllPending()
    // Offset: 0x2B18440
    void RemoveAllPending();
    // public System.Void PendingRemove(Fusion.SimulationBehaviour item)
    // Offset: 0x2B1AD64
    void PendingRemove(::Fusion::SimulationBehaviour* item);
    // public System.Void Remove(Fusion.SimulationBehaviour item)
    // Offset: 0x2B1AE64
    void Remove(::Fusion::SimulationBehaviour* item);
    // public System.Boolean IsInList(Fusion.SimulationBehaviour item)
    // Offset: 0x2B1A6D0
    bool IsInList(::Fusion::SimulationBehaviour* item);
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B1B240
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // public System.Void .ctor()
    // Offset: 0x2B1B238
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationBehaviourUpdater::BehaviourList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationBehaviourUpdater::BehaviourList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationBehaviourUpdater::BehaviourList*, creationType>()));
    }
  }; // Fusion.SimulationBehaviourUpdater/BehaviourList
  #pragma pack(pop)
  static check_size<sizeof(SimulationBehaviourUpdater::BehaviourList), 56 + sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationBehaviour*>*)> __Fusion_SimulationBehaviourUpdater_BehaviourListSizeCheck;
  static_assert(sizeof(SimulationBehaviourUpdater::BehaviourList) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::AddAfter
// Il2CppName: AddAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*, ::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::AddAfter)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    static auto* after = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "AddAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, after});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::AddFirst
// Il2CppName: AddFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::AddFirst)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "AddFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::AddLast
// Il2CppName: AddLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::AddLast)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "AddLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::RemoveAllPending
// Il2CppName: RemoveAllPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)()>(&Fusion::SimulationBehaviourUpdater::BehaviourList::RemoveAllPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "RemoveAllPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::PendingRemove
// Il2CppName: PendingRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::PendingRemove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "PendingRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::Remove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::IsInList
// Il2CppName: IsInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::Fusion::SimulationBehaviour*)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::IsInList)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "IsInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourUpdater::BehaviourList::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::SimulationBehaviourUpdater::BehaviourList::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourUpdater::BehaviourList*), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviourUpdater::BehaviourList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
