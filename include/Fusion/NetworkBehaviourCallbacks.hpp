// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkBehaviour
  class NetworkBehaviour;
  // Forward declaring type: NetworkBehaviourCallbackReference
  struct NetworkBehaviourCallbackReference;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkBehaviourCallbacks
  class NetworkBehaviourCallbacks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkBehaviourCallbacks);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkBehaviourCallbacks*, "Fusion", "NetworkBehaviourCallbacks");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkBehaviourCallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkBehaviourCallbacks : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate
    class CallbackDelegate;
    // Nested type: ::Fusion::NetworkBehaviourCallbacks::Callback
    struct Callback;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkBehaviourCallbacks/Callback
    // [TokenAttribute] Offset: FFFFFFFF
    struct Callback/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 Mask
      // Size: 0x4
      // Offset: 0x0
      int Mask;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 Count
      // Size: 0x4
      // Offset: 0x4
      int Count;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 Offset
      // Size: 0x4
      // Offset: 0x8
      int Offset;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: Offset and: Delegate
      char __padding2[0x4] = {};
      // public Fusion.NetworkBehaviourCallbacks/CallbackDelegate Delegate
      // Size: 0x8
      // Offset: 0x10
      ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate* Delegate;
      // Field size check
      static_assert(sizeof(::Fusion::NetworkBehaviourCallbacks::CallbackDelegate*) == 0x8);
      public:
      // Creating value type constructor for type: Callback
      constexpr Callback(int Mask_ = {}, int Count_ = {}, int Offset_ = {}, ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate* Delegate_ = {}) noexcept : Mask{Mask_}, Count{Count_}, Offset{Offset_}, Delegate{Delegate_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 Mask
      [[deprecated("Use field access instead!")]] int& dyn_Mask();
      // Get instance field reference: public System.Int32 Count
      [[deprecated("Use field access instead!")]] int& dyn_Count();
      // Get instance field reference: public System.Int32 Offset
      [[deprecated("Use field access instead!")]] int& dyn_Offset();
      // Get instance field reference: public Fusion.NetworkBehaviourCallbacks/CallbackDelegate Delegate
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate*& dyn_Delegate();
    }; // Fusion.NetworkBehaviourCallbacks/Callback
    #pragma pack(pop)
    static check_size<sizeof(NetworkBehaviourCallbacks::Callback), 16 + sizeof(::Fusion::NetworkBehaviourCallbacks::CallbackDelegate*)> __Fusion_NetworkBehaviourCallbacks_CallbackSizeCheck;
    static_assert(sizeof(NetworkBehaviourCallbacks::Callback) == 0x18);
    public:
    // private Fusion.NetworkBehaviourCallbacks/Callback[] _callbacks
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Fusion::NetworkBehaviourCallbacks::Callback> callbacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::NetworkBehaviourCallbacks::Callback>) == 0x8);
    // private System.Int32 _callbacksCount
    // Size: 0x4
    // Offset: 0x18
    int callbacksCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: callbacksCount and: words
    char __padding1[0x4] = {};
    // private System.UInt64[] _words
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint64_t> words;
    // Field size check
    static_assert(sizeof(::ArrayW<uint64_t>) == 0x8);
    public:
    // static field const value: static private System.Int32 MAX_CALLBACKS
    static constexpr const int MAX_CALLBACKS = 64;
    // Get static field: static private System.Int32 MAX_CALLBACKS
    static int _get_MAX_CALLBACKS();
    // Set static field: static private System.Int32 MAX_CALLBACKS
    static void _set_MAX_CALLBACKS(int value);
    // Get instance field reference: private Fusion.NetworkBehaviourCallbacks/Callback[] _callbacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::NetworkBehaviourCallbacks::Callback>& dyn__callbacks();
    // Get instance field reference: private System.Int32 _callbacksCount
    [[deprecated("Use field access instead!")]] int& dyn__callbacksCount();
    // Get instance field reference: private System.UInt64[] _words
    [[deprecated("Use field access instead!")]] ::ArrayW<uint64_t>& dyn__words();
    // public System.Int32 get_Count()
    // Offset: 0x2B0C858
    int get_Count();
    // public System.Void .ctor(System.Int32 words)
    // Offset: 0x2B0C860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkBehaviourCallbacks* New_ctor(int words) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkBehaviourCallbacks::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkBehaviourCallbacks*, creationType>(words)));
    }
    // private System.Boolean InvokeCallback(System.Int32 callback, Fusion.NetworkBehaviour behaviour, System.Int32 mask, System.Int32* old, System.UInt64* invoked)
    // Offset: 0x2B0C900
    bool InvokeCallback(int callback, ::Fusion::NetworkBehaviour* behaviour, int mask, int* old, uint64_t* invoked);
    // public System.Boolean Invoke(System.Int32 word, Fusion.NetworkBehaviour behaviour, System.Int32 mask, System.Int32* old, System.UInt64* invoked)
    // Offset: 0x2B0CB04
    bool Invoke(int word, ::Fusion::NetworkBehaviour* behaviour, int mask, int* old, uint64_t* invoked);
    // public System.Void ClearAll()
    // Offset: 0x2B0BB28
    void ClearAll();
    // public System.Boolean RemoveCallback(Fusion.NetworkBehaviourCallbackReference reference)
    // Offset: 0x2B0BB78
    bool RemoveCallback(::Fusion::NetworkBehaviourCallbackReference reference);
    // public Fusion.NetworkBehaviourCallbackReference RegisterCallback(System.Int32 offset, System.Int32 count, System.Int32 mask, Fusion.NetworkBehaviourCallbacks/CallbackDelegate callback)
    // Offset: 0x2B0CD88
    ::Fusion::NetworkBehaviourCallbackReference RegisterCallback(int offset, int count, int mask, ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate* callback);
  }; // Fusion.NetworkBehaviourCallbacks
  #pragma pack(pop)
  static check_size<sizeof(NetworkBehaviourCallbacks), 32 + sizeof(::ArrayW<uint64_t>)> __Fusion_NetworkBehaviourCallbacksSizeCheck;
  static_assert(sizeof(NetworkBehaviourCallbacks) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkBehaviourCallbacks::Callback, "Fusion", "NetworkBehaviourCallbacks/Callback");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkBehaviourCallbacks::*)()>(&Fusion::NetworkBehaviourCallbacks::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::InvokeCallback
// Il2CppName: InvokeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkBehaviourCallbacks::*)(int, ::Fusion::NetworkBehaviour*, int, int*, uint64_t*)>(&Fusion::NetworkBehaviourCallbacks::InvokeCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* old = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* invoked = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "InvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, behaviour, mask, old, invoked});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkBehaviourCallbacks::*)(int, ::Fusion::NetworkBehaviour*, int, int*, uint64_t*)>(&Fusion::NetworkBehaviourCallbacks::Invoke)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* old = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* invoked = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word, behaviour, mask, old, invoked});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::ClearAll
// Il2CppName: ClearAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkBehaviourCallbacks::*)()>(&Fusion::NetworkBehaviourCallbacks::ClearAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "ClearAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::RemoveCallback
// Il2CppName: RemoveCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkBehaviourCallbacks::*)(::Fusion::NetworkBehaviourCallbackReference)>(&Fusion::NetworkBehaviourCallbacks::RemoveCallback)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviourCallbackReference")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "RemoveCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviourCallbacks::RegisterCallback
// Il2CppName: RegisterCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkBehaviourCallbackReference (Fusion::NetworkBehaviourCallbacks::*)(int, int, int, ::Fusion::NetworkBehaviourCallbacks::CallbackDelegate*)>(&Fusion::NetworkBehaviourCallbacks::RegisterCallback)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviourCallbacks/CallbackDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviourCallbacks*), "RegisterCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, count, mask, callback});
  }
};
