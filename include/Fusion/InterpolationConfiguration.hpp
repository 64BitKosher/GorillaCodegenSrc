// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: InterpolationConfiguration
  class InterpolationConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::InterpolationConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::InterpolationConfiguration*, "Fusion", "InterpolationConfiguration");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.InterpolationConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class InterpolationConfiguration : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 DeltaAdjustment
    // Size: 0x4
    // Offset: 0x10
    int DeltaAdjustment;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 AllowedJitter
    // Size: 0x4
    // Offset: 0x14
    int AllowedJitter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SnapLimit
    // Size: 0x4
    // Offset: 0x18
    int SnapLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: SnapLimit and: MultiplierMin
    char __padding2[0x4] = {};
    // public System.Double MultiplierMin
    // Size: 0x8
    // Offset: 0x20
    double MultiplierMin;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double MultiplierMax
    // Size: 0x8
    // Offset: 0x28
    double MultiplierMax;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: public System.Int32 DeltaAdjustment
    [[deprecated("Use field access instead!")]] int& dyn_DeltaAdjustment();
    // Get instance field reference: public System.Int32 AllowedJitter
    [[deprecated("Use field access instead!")]] int& dyn_AllowedJitter();
    // Get instance field reference: public System.Int32 SnapLimit
    [[deprecated("Use field access instead!")]] int& dyn_SnapLimit();
    // Get instance field reference: public System.Double MultiplierMin
    [[deprecated("Use field access instead!")]] double& dyn_MultiplierMin();
    // Get instance field reference: public System.Double MultiplierMax
    [[deprecated("Use field access instead!")]] double& dyn_MultiplierMax();
    // System.Double get_TimeAdjust()
    // Offset: 0x2B82284
    double get_TimeAdjust();
    // System.Double get_SmoothAdjustRange()
    // Offset: 0x2B8229C
    double get_SmoothAdjustRange();
    // System.Double get_SnapAdjustRange()
    // Offset: 0x2B822B4
    double get_SnapAdjustRange();
    // public System.Void .ctor()
    // Offset: 0x2B822CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InterpolationConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::InterpolationConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InterpolationConfiguration*, creationType>()));
    }
  }; // Fusion.InterpolationConfiguration
  #pragma pack(pop)
  static check_size<sizeof(InterpolationConfiguration), 40 + sizeof(double)> __Fusion_InterpolationConfigurationSizeCheck;
  static_assert(sizeof(InterpolationConfiguration) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::InterpolationConfiguration::get_TimeAdjust
// Il2CppName: get_TimeAdjust
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::InterpolationConfiguration::*)()>(&Fusion::InterpolationConfiguration::get_TimeAdjust)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::InterpolationConfiguration*), "get_TimeAdjust", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::InterpolationConfiguration::get_SmoothAdjustRange
// Il2CppName: get_SmoothAdjustRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::InterpolationConfiguration::*)()>(&Fusion::InterpolationConfiguration::get_SmoothAdjustRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::InterpolationConfiguration*), "get_SmoothAdjustRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::InterpolationConfiguration::get_SnapAdjustRange
// Il2CppName: get_SnapAdjustRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::InterpolationConfiguration::*)()>(&Fusion::InterpolationConfiguration::get_SnapAdjustRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::InterpolationConfiguration*), "get_SnapAdjustRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::InterpolationConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
