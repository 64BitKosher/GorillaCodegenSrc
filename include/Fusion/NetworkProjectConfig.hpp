// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: Fusion.NetworkRunner/BuildTypes
#include "Fusion/NetworkRunner_BuildTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkConfiguration
  class NetworkConfiguration;
  // Forward declaring type: InterpolationConfiguration
  class InterpolationConfiguration;
  // Forward declaring type: LagCompensationSettings
  class LagCompensationSettings;
  // Skipping declaration: SimulationConfig because it is already included!
  // Forward declaring type: NetworkPrefabTable
  class NetworkPrefabTable;
  // Forward declaring type: NetworkSimulationConfiguration
  class NetworkSimulationConfiguration;
  // Forward declaring type: HeapConfiguration
  class HeapConfiguration;
  // Forward declaring type: AccuracyDefaults
  class AccuracyDefaults;
  // Skipping declaration: PhysicsEngines because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Skipping declaration: Nullable`1 because it is already included!
  // Skipping declaration: ValueTuple`2 because it is already included!
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: FileVersionInfo
  class FileVersionInfo;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: LocalPhysicsMode
  struct LocalPhysicsMode;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkProjectConfig);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig*, "Fusion", "NetworkProjectConfig");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkProjectConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkProjectConfig : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkProjectConfig::PeerModes
    struct PeerModes;
    // Nested type: ::Fusion::NetworkProjectConfig::PhysicsEngines
    struct PhysicsEngines;
    // Nested type: ::Fusion::NetworkProjectConfig::PhysicsModes
    struct PhysicsModes;
    // Nested type: ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes
    struct SceneLoadSpawnModes;
    // Nested type: ::Fusion::NetworkProjectConfig::DeltaCompressors
    struct DeltaCompressors;
    // Nested type: ::Fusion::NetworkProjectConfig::AssetLoadingDelegate
    class AssetLoadingDelegate;
    // Nested type: ::Fusion::NetworkProjectConfig::AssetUndloadingDelegate
    class AssetUndloadingDelegate;
    // Nested type: ::Fusion::NetworkProjectConfig::Static
    class Static;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkProjectConfig/PeerModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct PeerModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PeerModes
      constexpr PeerModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkProjectConfig/PeerModes Single
      static constexpr const int Single = 0;
      // Get static field: static public Fusion.NetworkProjectConfig/PeerModes Single
      static ::Fusion::NetworkProjectConfig::PeerModes _get_Single();
      // Set static field: static public Fusion.NetworkProjectConfig/PeerModes Single
      static void _set_Single(::Fusion::NetworkProjectConfig::PeerModes value);
      // static field const value: static public Fusion.NetworkProjectConfig/PeerModes Multiple
      static constexpr const int Multiple = 1;
      // Get static field: static public Fusion.NetworkProjectConfig/PeerModes Multiple
      static ::Fusion::NetworkProjectConfig::PeerModes _get_Multiple();
      // Set static field: static public Fusion.NetworkProjectConfig/PeerModes Multiple
      static void _set_Multiple(::Fusion::NetworkProjectConfig::PeerModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkProjectConfig/PeerModes
    #pragma pack(pop)
    static check_size<sizeof(NetworkProjectConfig::PeerModes), 0 + sizeof(int)> __Fusion_NetworkProjectConfig_PeerModesSizeCheck;
    static_assert(sizeof(NetworkProjectConfig::PeerModes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkProjectConfig/PhysicsEngines
    // [TokenAttribute] Offset: FFFFFFFF
    struct PhysicsEngines/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PhysicsEngines
      constexpr PhysicsEngines(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics3D
      static constexpr const int Physics3D = 0;
      // Get static field: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics3D
      static ::Fusion::NetworkProjectConfig::PhysicsEngines _get_Physics3D();
      // Set static field: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics3D
      static void _set_Physics3D(::Fusion::NetworkProjectConfig::PhysicsEngines value);
      // static field const value: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics2D
      static constexpr const int Physics2D = 1;
      // Get static field: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics2D
      static ::Fusion::NetworkProjectConfig::PhysicsEngines _get_Physics2D();
      // Set static field: static public Fusion.NetworkProjectConfig/PhysicsEngines Physics2D
      static void _set_Physics2D(::Fusion::NetworkProjectConfig::PhysicsEngines value);
      // static field const value: static public Fusion.NetworkProjectConfig/PhysicsEngines None
      static constexpr const int None = 2;
      // Get static field: static public Fusion.NetworkProjectConfig/PhysicsEngines None
      static ::Fusion::NetworkProjectConfig::PhysicsEngines _get_None();
      // Set static field: static public Fusion.NetworkProjectConfig/PhysicsEngines None
      static void _set_None(::Fusion::NetworkProjectConfig::PhysicsEngines value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkProjectConfig/PhysicsEngines
    #pragma pack(pop)
    static check_size<sizeof(NetworkProjectConfig::PhysicsEngines), 0 + sizeof(int)> __Fusion_NetworkProjectConfig_PhysicsEnginesSizeCheck;
    static_assert(sizeof(NetworkProjectConfig::PhysicsEngines) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkProjectConfig/PhysicsModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct PhysicsModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PhysicsModes
      constexpr PhysicsModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkProjectConfig/PhysicsModes ServerOnly
      static constexpr const int ServerOnly = 0;
      // Get static field: static public Fusion.NetworkProjectConfig/PhysicsModes ServerOnly
      static ::Fusion::NetworkProjectConfig::PhysicsModes _get_ServerOnly();
      // Set static field: static public Fusion.NetworkProjectConfig/PhysicsModes ServerOnly
      static void _set_ServerOnly(::Fusion::NetworkProjectConfig::PhysicsModes value);
      // static field const value: static public Fusion.NetworkProjectConfig/PhysicsModes ClientPrediction
      static constexpr const int ClientPrediction = 1;
      // Get static field: static public Fusion.NetworkProjectConfig/PhysicsModes ClientPrediction
      static ::Fusion::NetworkProjectConfig::PhysicsModes _get_ClientPrediction();
      // Set static field: static public Fusion.NetworkProjectConfig/PhysicsModes ClientPrediction
      static void _set_ClientPrediction(::Fusion::NetworkProjectConfig::PhysicsModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkProjectConfig/PhysicsModes
    #pragma pack(pop)
    static check_size<sizeof(NetworkProjectConfig::PhysicsModes), 0 + sizeof(int)> __Fusion_NetworkProjectConfig_PhysicsModesSizeCheck;
    static_assert(sizeof(NetworkProjectConfig::PhysicsModes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkProjectConfig/SceneLoadSpawnModes
    // [TokenAttribute] Offset: FFFFFFFF
    struct SceneLoadSpawnModes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SceneLoadSpawnModes
      constexpr SceneLoadSpawnModes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes NotAllowed
      static constexpr const int NotAllowed = 0;
      // Get static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes NotAllowed
      static ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes _get_NotAllowed();
      // Set static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes NotAllowed
      static void _set_NotAllowed(::Fusion::NetworkProjectConfig::SceneLoadSpawnModes value);
      // static field const value: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Allowed
      static constexpr const int Allowed = 1;
      // Get static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Allowed
      static ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes _get_Allowed();
      // Set static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Allowed
      static void _set_Allowed(::Fusion::NetworkProjectConfig::SceneLoadSpawnModes value);
      // static field const value: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Queued
      static constexpr const int Queued = 2;
      // Get static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Queued
      static ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes _get_Queued();
      // Set static field: static public Fusion.NetworkProjectConfig/SceneLoadSpawnModes Queued
      static void _set_Queued(::Fusion::NetworkProjectConfig::SceneLoadSpawnModes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkProjectConfig/SceneLoadSpawnModes
    #pragma pack(pop)
    static check_size<sizeof(NetworkProjectConfig::SceneLoadSpawnModes), 0 + sizeof(int)> __Fusion_NetworkProjectConfig_SceneLoadSpawnModesSizeCheck;
    static_assert(sizeof(NetworkProjectConfig::SceneLoadSpawnModes) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkProjectConfig/DeltaCompressors
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeltaCompressors/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeltaCompressors
      constexpr DeltaCompressors(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkProjectConfig/DeltaCompressors Managed
      static constexpr const int Managed = 0;
      // Get static field: static public Fusion.NetworkProjectConfig/DeltaCompressors Managed
      static ::Fusion::NetworkProjectConfig::DeltaCompressors _get_Managed();
      // Set static field: static public Fusion.NetworkProjectConfig/DeltaCompressors Managed
      static void _set_Managed(::Fusion::NetworkProjectConfig::DeltaCompressors value);
      // static field const value: static public Fusion.NetworkProjectConfig/DeltaCompressors Burst
      static constexpr const int Burst = 1;
      // Get static field: static public Fusion.NetworkProjectConfig/DeltaCompressors Burst
      static ::Fusion::NetworkProjectConfig::DeltaCompressors _get_Burst();
      // Set static field: static public Fusion.NetworkProjectConfig/DeltaCompressors Burst
      static void _set_Burst(::Fusion::NetworkProjectConfig::DeltaCompressors value);
      // static field const value: static public Fusion.NetworkProjectConfig/DeltaCompressors DebugUncompressed
      static constexpr const int DebugUncompressed = 2;
      // Get static field: static public Fusion.NetworkProjectConfig/DeltaCompressors DebugUncompressed
      static ::Fusion::NetworkProjectConfig::DeltaCompressors _get_DebugUncompressed();
      // Set static field: static public Fusion.NetworkProjectConfig/DeltaCompressors DebugUncompressed
      static void _set_DebugUncompressed(::Fusion::NetworkProjectConfig::DeltaCompressors value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkProjectConfig/DeltaCompressors
    #pragma pack(pop)
    static check_size<sizeof(NetworkProjectConfig::DeltaCompressors), 0 + sizeof(int)> __Fusion_NetworkProjectConfig_DeltaCompressorsSizeCheck;
    static_assert(sizeof(NetworkProjectConfig::DeltaCompressors) == 0x4);
    public:
    // public System.Int32 Version
    // Size: 0x4
    // Offset: 0x10
    int Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Version and: TypeId
    char __padding0[0x4] = {};
    // public System.String TypeId
    // Size: 0x8
    // Offset: 0x18
    ::StringW TypeId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Fusion.NetworkProjectConfig/PeerModes PeerMode
    // Size: 0x4
    // Offset: 0x20
    ::Fusion::NetworkProjectConfig::PeerModes PeerMode;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig::PeerModes) == 0x4);
    // public Fusion.NetworkProjectConfig/PhysicsEngines PhysicsEngine
    // Size: 0x4
    // Offset: 0x24
    ::Fusion::NetworkProjectConfig::PhysicsEngines PhysicsEngine;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig::PhysicsEngines) == 0x4);
    // public Fusion.NetworkProjectConfig/PhysicsModes ServerPhysicsMode
    // Size: 0x4
    // Offset: 0x28
    ::Fusion::NetworkProjectConfig::PhysicsModes ServerPhysicsMode;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig::PhysicsModes) == 0x4);
    // public System.Boolean UseLagCompensation
    // Size: 0x1
    // Offset: 0x2C
    bool UseLagCompensation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseLagCompensation and: LagCompensation
    char __padding5[0x3] = {};
    // public Fusion.LagCompensationSettings LagCompensation
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::LagCompensationSettings* LagCompensation;
    // Field size check
    static_assert(sizeof(::Fusion::LagCompensationSettings*) == 0x8);
    // public Fusion.NetworkProjectConfig/SceneLoadSpawnModes SceneLoadSpawnMode
    // Size: 0x4
    // Offset: 0x38
    ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes SceneLoadSpawnMode;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig::SceneLoadSpawnModes) == 0x4);
    // public Fusion.NetworkProjectConfig/DeltaCompressors DeltaCompressor
    // Size: 0x4
    // Offset: 0x3C
    ::Fusion::NetworkProjectConfig::DeltaCompressors DeltaCompressor;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig::DeltaCompressors) == 0x4);
    // public System.Boolean InvokeRenderInBatchMode
    // Size: 0x1
    // Offset: 0x40
    bool InvokeRenderInBatchMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvokeRenderInBatchMode and: MaxNetworkedObjectCount
    char __padding9[0x1] = {};
    // public System.UInt16 MaxNetworkedObjectCount
    // Size: 0x2
    // Offset: 0x42
    uint16_t MaxNetworkedObjectCount;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.Boolean NetworkIdIsObjectName
    // Size: 0x1
    // Offset: 0x44
    bool NetworkIdIsObjectName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HideNetworkObjectInactivityGuard
    // Size: 0x1
    // Offset: 0x45
    bool HideNetworkObjectInactivityGuard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EnableHostMigration
    // Size: 0x1
    // Offset: 0x46
    bool EnableHostMigration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableHostMigration and: HostMigrationSnapshotInterval
    char __padding13[0x1] = {};
    // public System.UInt32 HostMigrationSnapshotInterval
    // Size: 0x4
    // Offset: 0x48
    uint HostMigrationSnapshotInterval;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: HostMigrationSnapshotInterval and: PrefabTable
    char __padding14[0x4] = {};
    // public Fusion.NetworkPrefabTable PrefabTable
    // Size: 0x8
    // Offset: 0x50
    ::Fusion::NetworkPrefabTable* PrefabTable;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkPrefabTable*) == 0x8);
    // public Fusion.SimulationConfig Simulation
    // Size: 0x8
    // Offset: 0x58
    ::Fusion::SimulationConfig* Simulation;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig*) == 0x8);
    // public Fusion.InterpolationConfiguration Interpolation
    // Size: 0x8
    // Offset: 0x60
    ::Fusion::InterpolationConfiguration* Interpolation;
    // Field size check
    static_assert(sizeof(::Fusion::InterpolationConfiguration*) == 0x8);
    // public Fusion.NetworkConfiguration Network
    // Size: 0x8
    // Offset: 0x68
    ::Fusion::NetworkConfiguration* Network;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkConfiguration*) == 0x8);
    // public Fusion.NetworkSimulationConfiguration NetworkConditions
    // Size: 0x8
    // Offset: 0x70
    ::Fusion::NetworkSimulationConfiguration* NetworkConditions;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkSimulationConfiguration*) == 0x8);
    // public Fusion.HeapConfiguration Heap
    // Size: 0x8
    // Offset: 0x78
    ::Fusion::HeapConfiguration* Heap;
    // Field size check
    static_assert(sizeof(::Fusion::HeapConfiguration*) == 0x8);
    // public Fusion.AccuracyDefaults AccuracyDefaults
    // Size: 0x8
    // Offset: 0x80
    ::Fusion::AccuracyDefaults* AccuracyDefaults;
    // Field size check
    static_assert(sizeof(::Fusion::AccuracyDefaults*) == 0x8);
    // public System.String[] AssembliesToWeave
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::StringW> AssembliesToWeave;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean UseSerializableDictionary
    // Size: 0x1
    // Offset: 0x90
    bool UseSerializableDictionary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean NullChecksForNetworkedProperties
    // Size: 0x1
    // Offset: 0x91
    bool NullChecksForNetworkedProperties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean CheckRpcAttributeUsage
    // Size: 0x1
    // Offset: 0x92
    bool CheckRpcAttributeUsage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean CheckNetworkedPropertiesBeingEmpty
    // Size: 0x1
    // Offset: 0x93
    bool CheckNetworkedPropertiesBeingEmpty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.String DefaultResourceName
    static constexpr const char* DefaultResourceName = "NetworkProjectConfig";
    // Get static field: static public System.String DefaultResourceName
    static ::StringW _get_DefaultResourceName();
    // Set static field: static public System.String DefaultResourceName
    static void _set_DefaultResourceName(::StringW value);
    // static field const value: static public System.String CurrentTypeId
    static constexpr const char* CurrentTypeId = "NetworkProjectConfig";
    // Get static field: static public System.String CurrentTypeId
    static ::StringW _get_CurrentTypeId();
    // Set static field: static public System.String CurrentTypeId
    static void _set_CurrentTypeId(::StringW value);
    // static field const value: static public System.Int32 CurrentVersion
    static constexpr const int CurrentVersion = 1;
    // Get static field: static public System.Int32 CurrentVersion
    static int _get_CurrentVersion();
    // Set static field: static public System.Int32 CurrentVersion
    static void _set_CurrentVersion(int value);
    // Get instance field reference: public System.Int32 Version
    [[deprecated("Use field access instead!")]] int& dyn_Version();
    // Get instance field reference: public System.String TypeId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TypeId();
    // Get instance field reference: public Fusion.NetworkProjectConfig/PeerModes PeerMode
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig::PeerModes& dyn_PeerMode();
    // Get instance field reference: public Fusion.NetworkProjectConfig/PhysicsEngines PhysicsEngine
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig::PhysicsEngines& dyn_PhysicsEngine();
    // Get instance field reference: public Fusion.NetworkProjectConfig/PhysicsModes ServerPhysicsMode
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig::PhysicsModes& dyn_ServerPhysicsMode();
    // Get instance field reference: public System.Boolean UseLagCompensation
    [[deprecated("Use field access instead!")]] bool& dyn_UseLagCompensation();
    // Get instance field reference: public Fusion.LagCompensationSettings LagCompensation
    [[deprecated("Use field access instead!")]] ::Fusion::LagCompensationSettings*& dyn_LagCompensation();
    // Get instance field reference: public Fusion.NetworkProjectConfig/SceneLoadSpawnModes SceneLoadSpawnMode
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig::SceneLoadSpawnModes& dyn_SceneLoadSpawnMode();
    // Get instance field reference: public Fusion.NetworkProjectConfig/DeltaCompressors DeltaCompressor
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig::DeltaCompressors& dyn_DeltaCompressor();
    // Get instance field reference: public System.Boolean InvokeRenderInBatchMode
    [[deprecated("Use field access instead!")]] bool& dyn_InvokeRenderInBatchMode();
    // Get instance field reference: public System.UInt16 MaxNetworkedObjectCount
    [[deprecated("Use field access instead!")]] uint16_t& dyn_MaxNetworkedObjectCount();
    // Get instance field reference: public System.Boolean NetworkIdIsObjectName
    [[deprecated("Use field access instead!")]] bool& dyn_NetworkIdIsObjectName();
    // Get instance field reference: public System.Boolean HideNetworkObjectInactivityGuard
    [[deprecated("Use field access instead!")]] bool& dyn_HideNetworkObjectInactivityGuard();
    // Get instance field reference: public System.Boolean EnableHostMigration
    [[deprecated("Use field access instead!")]] bool& dyn_EnableHostMigration();
    // Get instance field reference: public System.UInt32 HostMigrationSnapshotInterval
    [[deprecated("Use field access instead!")]] uint& dyn_HostMigrationSnapshotInterval();
    // Get instance field reference: public Fusion.NetworkPrefabTable PrefabTable
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkPrefabTable*& dyn_PrefabTable();
    // Get instance field reference: public Fusion.SimulationConfig Simulation
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig*& dyn_Simulation();
    // Get instance field reference: public Fusion.InterpolationConfiguration Interpolation
    [[deprecated("Use field access instead!")]] ::Fusion::InterpolationConfiguration*& dyn_Interpolation();
    // Get instance field reference: public Fusion.NetworkConfiguration Network
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkConfiguration*& dyn_Network();
    // Get instance field reference: public Fusion.NetworkSimulationConfiguration NetworkConditions
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkSimulationConfiguration*& dyn_NetworkConditions();
    // Get instance field reference: public Fusion.HeapConfiguration Heap
    [[deprecated("Use field access instead!")]] ::Fusion::HeapConfiguration*& dyn_Heap();
    // Get instance field reference: public Fusion.AccuracyDefaults AccuracyDefaults
    [[deprecated("Use field access instead!")]] ::Fusion::AccuracyDefaults*& dyn_AccuracyDefaults();
    // Get instance field reference: public System.String[] AssembliesToWeave
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_AssembliesToWeave();
    // Get instance field reference: public System.Boolean UseSerializableDictionary
    [[deprecated("Use field access instead!")]] bool& dyn_UseSerializableDictionary();
    // Get instance field reference: public System.Boolean NullChecksForNetworkedProperties
    [[deprecated("Use field access instead!")]] bool& dyn_NullChecksForNetworkedProperties();
    // Get instance field reference: public System.Boolean CheckRpcAttributeUsage
    [[deprecated("Use field access instead!")]] bool& dyn_CheckRpcAttributeUsage();
    // Get instance field reference: public System.Boolean CheckNetworkedPropertiesBeingEmpty
    [[deprecated("Use field access instead!")]] bool& dyn_CheckNetworkedPropertiesBeingEmpty();
    // static public System.Void add_GlobalAssetLoading(Fusion.NetworkProjectConfig/AssetLoadingDelegate value)
    // Offset: 0x2B52374
    static void add_GlobalAssetLoading(::Fusion::NetworkProjectConfig::AssetLoadingDelegate* value);
    // static public System.Void remove_GlobalAssetLoading(Fusion.NetworkProjectConfig/AssetLoadingDelegate value)
    // Offset: 0x2B52438
    static void remove_GlobalAssetLoading(::Fusion::NetworkProjectConfig::AssetLoadingDelegate* value);
    // static public System.Void add_GlobalAssetUnloading(Fusion.NetworkProjectConfig/AssetUndloadingDelegate value)
    // Offset: 0x2B524FC
    static void add_GlobalAssetUnloading(::Fusion::NetworkProjectConfig::AssetUndloadingDelegate* value);
    // static public System.Void remove_GlobalAssetUnloading(Fusion.NetworkProjectConfig/AssetUndloadingDelegate value)
    // Offset: 0x2B525C0
    static void remove_GlobalAssetUnloading(::Fusion::NetworkProjectConfig::AssetUndloadingDelegate* value);
    // static public Fusion.NetworkProjectConfig get_Global()
    // Offset: 0x2B52684
    static ::Fusion::NetworkProjectConfig* get_Global();
    // static public System.Void UnloadGlobal()
    // Offset: 0x2B52708
    static void UnloadGlobal();
    // static System.Void ResetStatics()
    // Offset: 0x2B52998
    static void ResetStatics();
    // Fusion.NetworkProjectConfig Init(System.Int32 globalSize, System.Nullable`1<System.Int32> playerCountOverride, System.Nullable`1<System.Int32> inputWordCount)
    // Offset: 0x2B52A0C
    ::Fusion::NetworkProjectConfig* Init(int globalSize, ::System::Nullable_1<int> playerCountOverride, ::System::Nullable_1<int> inputWordCount);
    // Fusion.NetworkProjectConfig Copy()
    // Offset: 0x2B52B20
    ::Fusion::NetworkProjectConfig* Copy();
    // static public System.ValueTuple`2<Fusion.NetworkRunner/BuildTypes,System.Diagnostics.FileVersionInfo> get_FusionVersionInfo()
    // Offset: 0x2B52BE4
    static ::System::ValueTuple_2<::Fusion::NetworkRunner::BuildTypes, ::System::Diagnostics::FileVersionInfo*> get_FusionVersionInfo();
    // static public System.String Serialize(Fusion.NetworkProjectConfig config)
    // Offset: 0x2B52BDC
    static ::StringW Serialize(::Fusion::NetworkProjectConfig* config);
    // static public Fusion.NetworkProjectConfig Deserialize(System.String data)
    // Offset: 0x2B52D38
    static ::Fusion::NetworkProjectConfig* Deserialize(::StringW data);
    // static System.String SerializeMinimal(Fusion.NetworkProjectConfig config)
    // Offset: 0x2B52D80
    static ::StringW SerializeMinimal(::Fusion::NetworkProjectConfig* config);
    // static public UnityEngine.SceneManagement.LocalPhysicsMode ConvertPhysicsMode(Fusion.NetworkProjectConfig/PhysicsEngines engine)
    // Offset: 0x2B52DEC
    static ::UnityEngine::SceneManagement::LocalPhysicsMode ConvertPhysicsMode(::Fusion::NetworkProjectConfig::PhysicsEngines engine);
    // public System.Void .ctor()
    // Offset: 0x2B52E04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkProjectConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkProjectConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkProjectConfig*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x2B52BD4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.NetworkProjectConfig
  #pragma pack(pop)
  static check_size<sizeof(NetworkProjectConfig), 147 + sizeof(bool)> __Fusion_NetworkProjectConfigSizeCheck;
  static_assert(sizeof(NetworkProjectConfig) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::DeltaCompressors, "Fusion", "NetworkProjectConfig/DeltaCompressors");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::SceneLoadSpawnModes, "Fusion", "NetworkProjectConfig/SceneLoadSpawnModes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::PhysicsModes, "Fusion", "NetworkProjectConfig/PhysicsModes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::PhysicsEngines, "Fusion", "NetworkProjectConfig/PhysicsEngines");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::PeerModes, "Fusion", "NetworkProjectConfig/PeerModes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::add_GlobalAssetLoading
// Il2CppName: add_GlobalAssetLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkProjectConfig::AssetLoadingDelegate*)>(&Fusion::NetworkProjectConfig::add_GlobalAssetLoading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig/AssetLoadingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "add_GlobalAssetLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::remove_GlobalAssetLoading
// Il2CppName: remove_GlobalAssetLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkProjectConfig::AssetLoadingDelegate*)>(&Fusion::NetworkProjectConfig::remove_GlobalAssetLoading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig/AssetLoadingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "remove_GlobalAssetLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::add_GlobalAssetUnloading
// Il2CppName: add_GlobalAssetUnloading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkProjectConfig::AssetUndloadingDelegate*)>(&Fusion::NetworkProjectConfig::add_GlobalAssetUnloading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig/AssetUndloadingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "add_GlobalAssetUnloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::remove_GlobalAssetUnloading
// Il2CppName: remove_GlobalAssetUnloading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkProjectConfig::AssetUndloadingDelegate*)>(&Fusion::NetworkProjectConfig::remove_GlobalAssetUnloading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig/AssetUndloadingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "remove_GlobalAssetUnloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::get_Global
// Il2CppName: get_Global
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (*)()>(&Fusion::NetworkProjectConfig::get_Global)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "get_Global", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::UnloadGlobal
// Il2CppName: UnloadGlobal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkProjectConfig::UnloadGlobal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "UnloadGlobal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::ResetStatics
// Il2CppName: ResetStatics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkProjectConfig::ResetStatics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "ResetStatics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (Fusion::NetworkProjectConfig::*)(int, ::System::Nullable_1<int>, ::System::Nullable_1<int>)>(&Fusion::NetworkProjectConfig::Init)> {
  static const MethodInfo* get() {
    static auto* globalSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerCountOverride = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* inputWordCount = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{globalSize, playerCountOverride, inputWordCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (Fusion::NetworkProjectConfig::*)()>(&Fusion::NetworkProjectConfig::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::get_FusionVersionInfo
// Il2CppName: get_FusionVersionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::Fusion::NetworkRunner::BuildTypes, ::System::Diagnostics::FileVersionInfo*> (*)()>(&Fusion::NetworkProjectConfig::get_FusionVersionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "get_FusionVersionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Fusion::NetworkProjectConfig*)>(&Fusion::NetworkProjectConfig::Serialize)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (*)(::StringW)>(&Fusion::NetworkProjectConfig::Deserialize)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::SerializeMinimal
// Il2CppName: SerializeMinimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Fusion::NetworkProjectConfig*)>(&Fusion::NetworkProjectConfig::SerializeMinimal)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "SerializeMinimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::ConvertPhysicsMode
// Il2CppName: ConvertPhysicsMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SceneManagement::LocalPhysicsMode (*)(::Fusion::NetworkProjectConfig::PhysicsEngines)>(&Fusion::NetworkProjectConfig::ConvertPhysicsMode)> {
  static const MethodInfo* get() {
    static auto* engine = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfig/PhysicsEngines")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "ConvertPhysicsMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{engine});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkProjectConfig::*)()>(&Fusion::NetworkProjectConfig::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
