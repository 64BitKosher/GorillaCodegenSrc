// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: HitboxRoot
  class HitboxRoot;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Mapper
  class Mapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Mapper);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Mapper*, "Fusion", "Mapper");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Mapper
  // [TokenAttribute] Offset: FFFFFFFF
  class Mapper : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<Fusion.HitboxRoot,System.Int32> _rootToNodeIndex
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>* rootToNodeIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>*() const noexcept {
      return rootToNodeIndex;
    }
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Fusion.HitboxRoot,System.Int32> _rootToNodeIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>*& dyn__rootToNodeIndex();
    // System.Int32 get_Count()
    // Offset: 0x2B372D4
    int get_Count();
    // System.Boolean TryGetLeafIndex(Fusion.HitboxRoot root, out System.Int32 index)
    // Offset: 0x2B37324
    bool TryGetLeafIndex(::Fusion::HitboxRoot* root, ByRef<int> index);
    // System.Int32 GetLeafIndex(Fusion.HitboxRoot root)
    // Offset: 0x2B3738C
    int GetLeafIndex(::Fusion::HitboxRoot* root);
    // System.Void RegisterMapping(Fusion.HitboxRoot root, System.Int32 leafIndex)
    // Offset: 0x2B373E4
    void RegisterMapping(::Fusion::HitboxRoot* root, int leafIndex);
    // System.Void DeRegister(Fusion.HitboxRoot root)
    // Offset: 0x2B3744C
    void DeRegister(::Fusion::HitboxRoot* root);
    // public System.Void .ctor()
    // Offset: 0x2B374A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Mapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mapper*, creationType>()));
    }
  }; // Fusion.Mapper
  #pragma pack(pop)
  static check_size<sizeof(Mapper), 16 + sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::HitboxRoot*, int>*)> __Fusion_MapperSizeCheck;
  static_assert(sizeof(Mapper) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Mapper::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Mapper::*)()>(&Fusion::Mapper::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Mapper*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Mapper::TryGetLeafIndex
// Il2CppName: TryGetLeafIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Mapper::*)(::Fusion::HitboxRoot*, ByRef<int>)>(&Fusion::Mapper::TryGetLeafIndex)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Mapper*), "TryGetLeafIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, index});
  }
};
// Writing MetadataGetter for method: Fusion::Mapper::GetLeafIndex
// Il2CppName: GetLeafIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Mapper::*)(::Fusion::HitboxRoot*)>(&Fusion::Mapper::GetLeafIndex)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Mapper*), "GetLeafIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::Mapper::RegisterMapping
// Il2CppName: RegisterMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Mapper::*)(::Fusion::HitboxRoot*, int)>(&Fusion::Mapper::RegisterMapping)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    static auto* leafIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Mapper*), "RegisterMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, leafIndex});
  }
};
// Writing MetadataGetter for method: Fusion::Mapper::DeRegister
// Il2CppName: DeRegister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Mapper::*)(::Fusion::HitboxRoot*)>(&Fusion::Mapper::DeRegister)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Mapper*), "DeRegister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::Mapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
