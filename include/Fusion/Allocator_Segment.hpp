// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Allocator
#include "Fusion/Allocator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Ptr
#include "Fusion/Ptr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Allocator::Segment, "Fusion", "Allocator/Segment");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Allocator/Segment
  // [TokenAttribute] Offset: FFFFFFFF
  struct Allocator::Segment/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Ptr Next
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Ptr Next;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    public:
    // Creating value type constructor for type: Segment
    constexpr Segment(::Fusion::Ptr Next_ = {}) noexcept : Next{Next_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Fusion::Ptr
    constexpr operator ::Fusion::Ptr() const noexcept {
      return Next;
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 4;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion.Ptr Next
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Next();
  }; // Fusion.Allocator/Segment
  #pragma pack(pop)
  static check_size<sizeof(Allocator::Segment), 0 + sizeof(::Fusion::Ptr)> __Fusion_Allocator_SegmentSizeCheck;
  static_assert(sizeof(Allocator::Segment) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
