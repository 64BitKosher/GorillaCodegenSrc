// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectRefMapPtr
  struct NetworkObjectRefMapPtr;
  // Skipping declaration: Item because it is already included!
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectPriorityHeap
  class NetworkObjectPriorityHeap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkObjectPriorityHeap);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObjectPriorityHeap*, "Fusion", "NetworkObjectPriorityHeap");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkObjectPriorityHeap
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkObjectPriorityHeap : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkObjectPriorityHeap::Item
    struct Item;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkObjectPriorityHeap/Item
    // [TokenAttribute] Offset: FFFFFFFF
    struct Item/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single Priority
      // Size: 0x4
      // Offset: 0x0
      float Priority;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public Fusion.NetworkId Value
      // Size: 0x4
      // Offset: 0x4
      ::Fusion::NetworkId Value;
      // Field size check
      static_assert(sizeof(::Fusion::NetworkId) == 0x4);
      public:
      // Creating value type constructor for type: Item
      constexpr Item(float Priority_ = {}, ::Fusion::NetworkId Value_ = {}) noexcept : Priority{Priority_}, Value{Value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single Priority
      [[deprecated("Use field access instead!")]] float& dyn_Priority();
      // Get instance field reference: public Fusion.NetworkId Value
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkId& dyn_Value();
    }; // Fusion.NetworkObjectPriorityHeap/Item
    #pragma pack(pop)
    static check_size<sizeof(NetworkObjectPriorityHeap::Item), 4 + sizeof(::Fusion::NetworkId)> __Fusion_NetworkObjectPriorityHeap_ItemSizeCheck;
    static_assert(sizeof(NetworkObjectPriorityHeap::Item) == 0x8);
    public:
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x10
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: heap
    char __padding0[0x4] = {};
    // private Fusion.NetworkObjectPriorityHeap/Item[] _heap
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Fusion::NetworkObjectPriorityHeap::Item> heap;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::NetworkObjectPriorityHeap::Item>) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.UInt32> _contains
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<uint>* contains;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<uint>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: private Fusion.NetworkObjectPriorityHeap/Item[] _heap
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::NetworkObjectPriorityHeap::Item>& dyn__heap();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.UInt32> _contains
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<uint>*& dyn__contains();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x2B4DDBC
    bool get_IsEmpty();
    // public System.Void .ctor()
    // Offset: 0x2B4DDCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkObjectPriorityHeap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkObjectPriorityHeap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkObjectPriorityHeap*, creationType>()));
    }
    // public System.Boolean Contains(Fusion.NetworkId id)
    // Offset: 0x2B4DE8C
    bool Contains(::Fusion::NetworkId id);
    // public System.Void BuildFromMap(Fusion.NetworkObjectRefMapPtr* map)
    // Offset: 0x2B4DEE4
    void BuildFromMap(::Fusion::NetworkObjectRefMapPtr* map);
    // public System.Void Clear()
    // Offset: 0x2B4E038
    void Clear();
    // public System.Void IncreasePriorities()
    // Offset: 0x2B4E068
    void IncreasePriorities();
    // public System.Void PushIfNotContains(Fusion.NetworkId value, System.Single priority)
    // Offset: 0x2B4E0BC
    void PushIfNotContains(::Fusion::NetworkId value, float priority);
    // public System.Void Push(Fusion.NetworkId value, System.Single priority)
    // Offset: 0x2B4E144
    void Push(::Fusion::NetworkId value, float priority);
    // public Fusion.NetworkObjectPriorityHeap/Item Peek()
    // Offset: 0x2B4E330
    ::Fusion::NetworkObjectPriorityHeap::Item Peek();
    // public System.Single PeekPriority()
    // Offset: 0x2B4E35C
    float PeekPriority();
    // public Fusion.NetworkId PeekValue()
    // Offset: 0x2B4E388
    ::Fusion::NetworkId PeekValue();
    // public System.Boolean TryPop(out Fusion.NetworkObjectPriorityHeap/Item item)
    // Offset: 0x2B4E3B4
    bool TryPop(ByRef<::Fusion::NetworkObjectPriorityHeap::Item> item);
    // public Fusion.NetworkObjectPriorityHeap/Item Pop()
    // Offset: 0x2B4E3F0
    ::Fusion::NetworkObjectPriorityHeap::Item Pop();
    // public Fusion.NetworkId PopValue()
    // Offset: 0x2B4E5E8
    ::Fusion::NetworkId PopValue();
    // private System.Void ExpandHeap()
    // Offset: 0x2B4E2A8
    void ExpandHeap();
  }; // Fusion.NetworkObjectPriorityHeap
  #pragma pack(pop)
  static check_size<sizeof(NetworkObjectPriorityHeap), 32 + sizeof(::System::Collections::Generic::HashSet_1<uint>*)> __Fusion_NetworkObjectPriorityHeapSizeCheck;
  static_assert(sizeof(NetworkObjectPriorityHeap) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObjectPriorityHeap::Item, "Fusion", "NetworkObjectPriorityHeap/Item");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObjectPriorityHeap::*)(::Fusion::NetworkId)>(&Fusion::NetworkObjectPriorityHeap::Contains)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::BuildFromMap
// Il2CppName: BuildFromMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)(::Fusion::NetworkObjectRefMapPtr*)>(&Fusion::NetworkObjectPriorityHeap::BuildFromMap)> {
  static const MethodInfo* get() {
    static auto* map = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "BuildFromMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::IncreasePriorities
// Il2CppName: IncreasePriorities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::IncreasePriorities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "IncreasePriorities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::PushIfNotContains
// Il2CppName: PushIfNotContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)(::Fusion::NetworkId, float)>(&Fusion::NetworkObjectPriorityHeap::PushIfNotContains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "PushIfNotContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, priority});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)(::Fusion::NetworkId, float)>(&Fusion::NetworkObjectPriorityHeap::Push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, priority});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectPriorityHeap::Item (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::PeekPriority
// Il2CppName: PeekPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::PeekPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "PeekPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::PeekValue
// Il2CppName: PeekValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::PeekValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "PeekValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::TryPop
// Il2CppName: TryPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkObjectPriorityHeap::*)(ByRef<::Fusion::NetworkObjectPriorityHeap::Item>)>(&Fusion::NetworkObjectPriorityHeap::TryPop)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPriorityHeap/Item")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "TryPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectPriorityHeap::Item (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::PopValue
// Il2CppName: PopValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::PopValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "PopValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkObjectPriorityHeap::ExpandHeap
// Il2CppName: ExpandHeap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkObjectPriorityHeap::*)()>(&Fusion::NetworkObjectPriorityHeap::ExpandHeap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkObjectPriorityHeap*), "ExpandHeap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
