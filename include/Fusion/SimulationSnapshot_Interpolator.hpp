// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationSnapshot
#include "Fusion/SimulationSnapshot.hpp"
// Including type: Fusion.Ema
#include "Fusion/Ema.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.TimerDelta
#include "Fusion/TimerDelta.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: InterpolationConfiguration
  class InterpolationConfiguration;
  // Forward declaring type: SimulationConfig
  class SimulationConfig;
  // Forward declaring type: Simulation
  class Simulation;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationSnapshot::Interpolator);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationSnapshot::Interpolator*, "Fusion", "SimulationSnapshot/Interpolator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x6D8
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationSnapshot/Interpolator
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationSnapshot::Interpolator : public ::Il2CppObject {
    public:
    public:
    // private System.Double _time
    // Size: 0x8
    // Offset: 0x10
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _timeScale
    // Size: 0x8
    // Offset: 0x18
    double timeScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single _alpha
    // Size: 0x4
    // Offset: 0x20
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: alpha and: multiplier
    char __padding2[0x4] = {};
    // private System.Double _multiplier
    // Size: 0x8
    // Offset: 0x28
    double multiplier;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Fusion.Ema _diffAvg
    // Size: 0x28
    // Offset: 0x30
    ::Fusion::Ema diffAvg;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // Padding between fields: diffAvg and: uncertainAvg
    char __padding4[0x1F8] = {};
    // private Fusion.Ema _uncertainAvg
    // Size: 0x28
    // Offset: 0x250
    ::Fusion::Ema uncertainAvg;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // Padding between fields: uncertainAvg and: statsTick
    char __padding5[0x1F8] = {};
    // private Fusion.Tick _statsTick
    // Size: 0x4
    // Offset: 0x470
    ::Fusion::Tick statsTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // Padding between fields: statsTick and: stateDeltaTimer
    char __padding6[0x4] = {};
    // private Fusion.TimerDelta _stateDeltaTimer
    // Size: 0x20
    // Offset: 0x478
    ::Fusion::TimerDelta stateDeltaTimer;
    // Field size check
    static_assert(sizeof(::Fusion::TimerDelta) == 0x20);
    // private Fusion.Ema _stateDeltaAvg
    // Size: 0x28
    // Offset: 0x498
    ::Fusion::Ema stateDeltaAvg;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // Padding between fields: stateDeltaAvg and: to
    char __padding8[0x1F8] = {};
    // private Fusion.SimulationSnapshot _to
    // Size: 0x8
    // Offset: 0x6B8
    ::Fusion::SimulationSnapshot* to;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _from
    // Size: 0x8
    // Offset: 0x6C0
    ::Fusion::SimulationSnapshot* from;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.InterpolationConfiguration _interpConfig
    // Size: 0x8
    // Offset: 0x6C8
    ::Fusion::InterpolationConfiguration* interpConfig;
    // Field size check
    static_assert(sizeof(::Fusion::InterpolationConfiguration*) == 0x8);
    // private Fusion.SimulationConfig _simulationConfig
    // Size: 0x8
    // Offset: 0x6D0
    ::Fusion::SimulationConfig* simulationConfig;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig*) == 0x8);
    public:
    // Get instance field reference: private System.Double _time
    [[deprecated("Use field access instead!")]] double& dyn__time();
    // Get instance field reference: private System.Double _timeScale
    [[deprecated("Use field access instead!")]] double& dyn__timeScale();
    // Get instance field reference: private System.Single _alpha
    [[deprecated("Use field access instead!")]] float& dyn__alpha();
    // Get instance field reference: private System.Double _multiplier
    [[deprecated("Use field access instead!")]] double& dyn__multiplier();
    // Get instance field reference: private Fusion.Ema _diffAvg
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__diffAvg();
    // Get instance field reference: private Fusion.Ema _uncertainAvg
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__uncertainAvg();
    // Get instance field reference: private Fusion.Tick _statsTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__statsTick();
    // Get instance field reference: private Fusion.TimerDelta _stateDeltaTimer
    [[deprecated("Use field access instead!")]] ::Fusion::TimerDelta& dyn__stateDeltaTimer();
    // Get instance field reference: private Fusion.Ema _stateDeltaAvg
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__stateDeltaAvg();
    // Get instance field reference: private Fusion.SimulationSnapshot _to
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__to();
    // Get instance field reference: private Fusion.SimulationSnapshot _from
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__from();
    // Get instance field reference: private Fusion.InterpolationConfiguration _interpConfig
    [[deprecated("Use field access instead!")]] ::Fusion::InterpolationConfiguration*& dyn__interpConfig();
    // Get instance field reference: private Fusion.SimulationConfig _simulationConfig
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig*& dyn__simulationConfig();
    // public Fusion.SimulationSnapshot get_To()
    // Offset: 0x2B87B70
    ::Fusion::SimulationSnapshot* get_To();
    // public Fusion.SimulationSnapshot get_From()
    // Offset: 0x2B87B78
    ::Fusion::SimulationSnapshot* get_From();
    // public System.Single get_Alpha()
    // Offset: 0x2B87B80
    float get_Alpha();
    // public System.Double get_TimeScale()
    // Offset: 0x2B87B88
    double get_TimeScale();
    // public System.Double get_Uncertainty()
    // Offset: 0x2B87B90
    double get_Uncertainty();
    // public System.Double get_Offset()
    // Offset: 0x2B87B98
    double get_Offset();
    // public System.Void .ctor(Fusion.SimulationConfig simulationConfig, Fusion.InterpolationConfiguration interpConfig)
    // Offset: 0x2B87BB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationSnapshot::Interpolator* New_ctor(::Fusion::SimulationConfig* simulationConfig, ::Fusion::InterpolationConfiguration* interpConfig) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationSnapshot::Interpolator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationSnapshot::Interpolator*, creationType>(simulationConfig, interpConfig)));
    }
    // public System.Boolean Calculate(System.Double dt, Fusion.SimulationSnapshot/IHistory history, Fusion.Simulation simulation)
    // Offset: 0x2B87C8C
    bool Calculate(double dt, ::Fusion::SimulationSnapshot::IHistory* history, ::Fusion::Simulation* simulation);
    // public System.Boolean StateUpdateReceived(Fusion.Simulation simulation)
    // Offset: 0x2B88BB4
    bool StateUpdateReceived(::Fusion::Simulation* simulation);
    // private System.Double GetDefaultMultiplier()
    // Offset: 0x2B87C14
    double GetDefaultMultiplier();
    // private System.Double CalculateInterpOffset()
    // Offset: 0x2B87BA8
    double CalculateInterpOffset();
  }; // Fusion.SimulationSnapshot/Interpolator
  #pragma pack(pop)
  static check_size<sizeof(SimulationSnapshot::Interpolator), 1744 + sizeof(::Fusion::SimulationConfig*)> __Fusion_SimulationSnapshot_InterpolatorSizeCheck;
  static_assert(sizeof(SimulationSnapshot::Interpolator) == 0x6D8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_To
// Il2CppName: get_To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_To)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_From
// Il2CppName: get_From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_From)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_Alpha
// Il2CppName: get_Alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_Alpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_Alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_TimeScale
// Il2CppName: get_TimeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_TimeScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_TimeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_Uncertainty
// Il2CppName: get_Uncertainty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_Uncertainty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_Uncertainty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::get_Offset
// Il2CppName: get_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::get_Offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "get_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::Calculate
// Il2CppName: Calculate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::Interpolator::*)(double, ::Fusion::SimulationSnapshot::IHistory*, ::Fusion::Simulation*)>(&Fusion::SimulationSnapshot::Interpolator::Calculate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* history = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot/IHistory")->byval_arg;
    static auto* simulation = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "Calculate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt, history, simulation});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::StateUpdateReceived
// Il2CppName: StateUpdateReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationSnapshot::Interpolator::*)(::Fusion::Simulation*)>(&Fusion::SimulationSnapshot::Interpolator::StateUpdateReceived)> {
  static const MethodInfo* get() {
    static auto* simulation = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "StateUpdateReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simulation});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::GetDefaultMultiplier
// Il2CppName: GetDefaultMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::GetDefaultMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "GetDefaultMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Interpolator::CalculateInterpOffset
// Il2CppName: CalculateInterpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::SimulationSnapshot::Interpolator::*)()>(&Fusion::SimulationSnapshot::Interpolator::CalculateInterpOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Interpolator*), "CalculateInterpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
