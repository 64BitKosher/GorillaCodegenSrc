// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.OrderAttribute
#include "Fusion/OrderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: OrderAfterAttribute
  class OrderAfterAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::OrderAfterAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::OrderAfterAttribute*, "Fusion", "OrderAfterAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.OrderAfterAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class OrderAfterAttribute : public ::Fusion::OrderAttribute {
    public:
    public:
    // private readonly System.Type[] <After>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::Type*> After;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Type*>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::System::Type*>
    constexpr operator ::ArrayW<::System::Type*>() const noexcept {
      return After;
    }
    // Get instance field reference: private readonly System.Type[] <After>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& dyn_$After$k__BackingField();
    // public System.Type[] get_After()
    // Offset: 0x2B11C3C
    ::ArrayW<::System::Type*> get_After();
    // public System.Void .ctor(params System.Type[] types)
    // Offset: 0x2B11C44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrderAfterAttribute* New_ctor(::ArrayW<::System::Type*> types) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::OrderAfterAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrderAfterAttribute*, creationType>(types)));
    }
  }; // Fusion.OrderAfterAttribute
  #pragma pack(pop)
  static check_size<sizeof(OrderAfterAttribute), 16 + sizeof(::ArrayW<::System::Type*>)> __Fusion_OrderAfterAttributeSizeCheck;
  static_assert(sizeof(OrderAfterAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::OrderAfterAttribute::get_After
// Il2CppName: get_After
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (Fusion::OrderAfterAttribute::*)()>(&Fusion::OrderAfterAttribute::get_After)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderAfterAttribute*), "get_After", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderAfterAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
