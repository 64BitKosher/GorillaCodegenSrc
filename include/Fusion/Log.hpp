// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.LogType
#include "Fusion/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: ILogBuilder
  class ILogBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Log
  class Log;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Log);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Log*, "Fusion", "Log");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Log
  // [TokenAttribute] Offset: FFFFFFFF
  class Log : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::Log::DefaultContext
    struct DefaultContext;
    // Nested type: ::Fusion::Log::LegacyLogger
    class LegacyLogger;
    // Nested type: ::Fusion::Log::Lock
    class Lock;
    // Get static field: static private Fusion.ILogger _logger
    static ::Fusion::ILogger* _get__logger();
    // Set static field: static private Fusion.ILogger _logger
    static void _set__logger(::Fusion::ILogger* value);
    // Get static field: static public Fusion.LogType LogLevel
    static ::Fusion::LogType _get_LogLevel();
    // Set static field: static public Fusion.LogType LogLevel
    static void _set_LogLevel(::Fusion::LogType value);
    // static public System.Void Init(Fusion.ILogger logger, Fusion.LogType LogLevel)
    // Offset: 0x2AD77E0
    static void Init(::Fusion::ILogger* logger, ::Fusion::LogType LogLevel);
    // static public System.Void Init(System.Action`1<System.String> info, System.Action`1<System.String> warn, System.Action`1<System.String> error, System.Action`1<System.Exception> exn)
    // Offset: 0x2AD7948
    static void Init(::System::Action_1<::StringW>* info, ::System::Action_1<::StringW>* warn, ::System::Action_1<::StringW>* error, ::System::Action_1<::System::Exception*>* exn);
    // static public System.Boolean get_Initialized()
    // Offset: 0x2AD7A94
    static bool get_Initialized();
    // static public System.Void Exception(System.Exception exn)
    // Offset: 0x2AD7AF4
    static void Exception(::System::Exception* exn);
    // static System.Void Exception(T loggable, System.Exception exn)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Exception(T loggable, ::System::Exception* exn) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::Exception");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Log", "Exception", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loggable), ::il2cpp_utils::ExtractType(exn)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, loggable, exn);
    }
    // static System.Void TraceWarn(T context, System.Object msg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void TraceWarn(T context, ::Il2CppObject* msg) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::TraceWarn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Log", "TraceWarn", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(msg)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, context, msg);
    }
    // static public System.Void Warn(System.Object msg)
    // Offset: 0x2AD7CDC
    static void Warn(::Il2CppObject* msg);
    // static System.Void Warn(T loggable, System.Object msg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Warn(T loggable, ::Il2CppObject* msg) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::Warn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Log", "Warn", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loggable), ::il2cpp_utils::ExtractType(msg)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, loggable, msg);
    }
    // static private System.Void WarnInternalValue(T loggable, System.Object msg, System.String stream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void WarnInternalValue(T loggable, ::Il2CppObject* msg, ::StringW stream) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::WarnInternalValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Log", "WarnInternalValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loggable), ::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(stream)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, loggable, msg, stream);
    }
    // static public System.Void Error(System.Object msg)
    // Offset: 0x2AD7F18
    static void Error(::Il2CppObject* msg);
    // static System.Void Error(T loggable, System.Object msg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Error(T loggable, ::Il2CppObject* msg) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Log::Error");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Log", "Error", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loggable), ::il2cpp_utils::ExtractType(msg)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, loggable, msg);
    }
    // static private System.Void .cctor()
    // Offset: 0x2AD8144
    static void _cctor();
  }; // Fusion.Log
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Log::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::ILogger*, ::Fusion::LogType)>(&Fusion::Log::Init)> {
  static const MethodInfo* get() {
    static auto* logger = &::il2cpp_utils::GetClassFromName("Fusion", "ILogger")->byval_arg;
    static auto* LogLevel = &::il2cpp_utils::GetClassFromName("Fusion", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logger, LogLevel});
  }
};
// Writing MetadataGetter for method: Fusion::Log::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::StringW>*, ::System::Action_1<::StringW>*, ::System::Action_1<::StringW>*, ::System::Action_1<::System::Exception*>*)>(&Fusion::Log::Init)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* warn = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* error = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* exn = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, warn, error, exn});
  }
};
// Writing MetadataGetter for method: Fusion::Log::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Fusion::Log::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Log::Exception
// Il2CppName: Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Exception*)>(&Fusion::Log::Exception)> {
  static const MethodInfo* get() {
    static auto* exn = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exn});
  }
};
// Writing MetadataGetter for method: Fusion::Log::Exception
// Il2CppName: Exception
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::TraceWarn
// Il2CppName: TraceWarn
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Fusion::Log::Warn)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Fusion::Log::Warn
// Il2CppName: Warn
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::WarnInternalValue
// Il2CppName: WarnInternalValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::Error
// Il2CppName: Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Fusion::Log::Error)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), "Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Fusion::Log::Error
// Il2CppName: Error
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Log::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Log::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Log*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
