// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.PlayerRef
#include "Fusion/PlayerRef.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Simulation
  class Simulation;
  // Forward declaring type: NetworkId
  struct NetworkId;
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationMessage, "Fusion", "SimulationMessage");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.SimulationMessage
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimulationMessage/*, public ::System::ValueType, public ::Fusion::ILogBuilder*/ {
    public:
    // Nested type: ::Fusion::SimulationMessage::BuiltInFlags
    struct BuiltInFlags;
    public:
    // public System.Int32 Tick
    // Size: 0x4
    // Offset: 0x0
    int Tick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.PlayerRef Source
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::PlayerRef Source;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRef) == 0x4);
    // public System.Int32 Capacity
    // Size: 0x4
    // Offset: 0x8
    int Capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Offset
    // Size: 0x4
    // Offset: 0xC
    int Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 References
    // Size: 0x4
    // Offset: 0x10
    int References;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Flags
    // Size: 0x4
    // Offset: 0x14
    int Flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Fusion.PlayerRef Target
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::PlayerRef Target;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRef) == 0x4);
    public:
    // Creating value type constructor for type: SimulationMessage
    constexpr SimulationMessage(int Tick_ = {}, ::Fusion::PlayerRef Source_ = {}, int Capacity_ = {}, int Offset_ = {}, int References_ = {}, int Flags_ = {}, ::Fusion::PlayerRef Target_ = {}) noexcept : Tick{Tick_}, Source{Source_}, Capacity{Capacity_}, Offset{Offset_}, References{References_}, Flags{Flags_}, Target{Target_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 28;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // static field const value: static public System.Int32 FLAG_USER_MESSAGE
    static constexpr const int FLAG_USER_MESSAGE = 1;
    // Get static field: static public System.Int32 FLAG_USER_MESSAGE
    static int _get_FLAG_USER_MESSAGE();
    // Set static field: static public System.Int32 FLAG_USER_MESSAGE
    static void _set_FLAG_USER_MESSAGE(int value);
    // static field const value: static public System.Int32 FLAG_REMOTE
    static constexpr const int FLAG_REMOTE = 2;
    // Get static field: static public System.Int32 FLAG_REMOTE
    static int _get_FLAG_REMOTE();
    // Set static field: static public System.Int32 FLAG_REMOTE
    static void _set_FLAG_REMOTE(int value);
    // static field const value: static public System.Int32 FLAG_STATIC
    static constexpr const int FLAG_STATIC = 4;
    // Get static field: static public System.Int32 FLAG_STATIC
    static int _get_FLAG_STATIC();
    // Set static field: static public System.Int32 FLAG_STATIC
    static void _set_FLAG_STATIC(int value);
    // static field const value: static public System.Int32 FLAG_UNRELIABLE
    static constexpr const int FLAG_UNRELIABLE = 8;
    // Get static field: static public System.Int32 FLAG_UNRELIABLE
    static int _get_FLAG_UNRELIABLE();
    // Set static field: static public System.Int32 FLAG_UNRELIABLE
    static void _set_FLAG_UNRELIABLE(int value);
    // static field const value: static public System.Int32 FLAG_TARGET_PLAYER
    static constexpr const int FLAG_TARGET_PLAYER = 16;
    // Get static field: static public System.Int32 FLAG_TARGET_PLAYER
    static int _get_FLAG_TARGET_PLAYER();
    // Set static field: static public System.Int32 FLAG_TARGET_PLAYER
    static void _set_FLAG_TARGET_PLAYER(int value);
    // static field const value: static public System.Int32 FLAG_TARGET_SERVER
    static constexpr const int FLAG_TARGET_SERVER = 32;
    // Get static field: static public System.Int32 FLAG_TARGET_SERVER
    static int _get_FLAG_TARGET_SERVER();
    // Set static field: static public System.Int32 FLAG_TARGET_SERVER
    static void _set_FLAG_TARGET_SERVER(int value);
    // static field const value: static public System.Int32 FLAG_INTERNAL
    static constexpr const int FLAG_INTERNAL = 64;
    // Get static field: static public System.Int32 FLAG_INTERNAL
    static int _get_FLAG_INTERNAL();
    // Set static field: static public System.Int32 FLAG_INTERNAL
    static void _set_FLAG_INTERNAL(int value);
    // static field const value: static public System.Int32 FLAG_NOT_TICK_ALIGNED
    static constexpr const int FLAG_NOT_TICK_ALIGNED = 128;
    // Get static field: static public System.Int32 FLAG_NOT_TICK_ALIGNED
    static int _get_FLAG_NOT_TICK_ALIGNED();
    // Set static field: static public System.Int32 FLAG_NOT_TICK_ALIGNED
    static void _set_FLAG_NOT_TICK_ALIGNED(int value);
    // static field const value: static public System.Int32 FLAG_DUMMY
    static constexpr const int FLAG_DUMMY = 256;
    // Get static field: static public System.Int32 FLAG_DUMMY
    static int _get_FLAG_DUMMY();
    // Set static field: static public System.Int32 FLAG_DUMMY
    static void _set_FLAG_DUMMY(int value);
    // static field const value: static public System.Int32 FLAG_USER_FLAGS_START
    static constexpr const int FLAG_USER_FLAGS_START = 65536;
    // Get static field: static public System.Int32 FLAG_USER_FLAGS_START
    static int _get_FLAG_USER_FLAGS_START();
    // Set static field: static public System.Int32 FLAG_USER_FLAGS_START
    static void _set_FLAG_USER_FLAGS_START(int value);
    // static field const value: static public System.Int32 FLAGS_RESERVED
    static constexpr const int FLAGS_RESERVED = 65535;
    // Get static field: static public System.Int32 FLAGS_RESERVED
    static int _get_FLAGS_RESERVED();
    // Set static field: static public System.Int32 FLAGS_RESERVED
    static void _set_FLAGS_RESERVED(int value);
    // static field const value: static public System.Int32 FLAGS_RESERVED_BITS
    static constexpr const int FLAGS_RESERVED_BITS = 16;
    // Get static field: static public System.Int32 FLAGS_RESERVED_BITS
    static int _get_FLAGS_RESERVED_BITS();
    // Set static field: static public System.Int32 FLAGS_RESERVED_BITS
    static void _set_FLAGS_RESERVED_BITS(int value);
    // Get instance field reference: public System.Int32 Tick
    [[deprecated("Use field access instead!")]] int& dyn_Tick();
    // Get instance field reference: public Fusion.PlayerRef Source
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRef& dyn_Source();
    // Get instance field reference: public System.Int32 Capacity
    [[deprecated("Use field access instead!")]] int& dyn_Capacity();
    // Get instance field reference: public System.Int32 Offset
    [[deprecated("Use field access instead!")]] int& dyn_Offset();
    // Get instance field reference: public System.Int32 References
    [[deprecated("Use field access instead!")]] int& dyn_References();
    // Get instance field reference: public System.Int32 Flags
    [[deprecated("Use field access instead!")]] int& dyn_Flags();
    // Get instance field reference: public Fusion.PlayerRef Target
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRef& dyn_Target();
    // public System.Void ReferenceCountAdd()
    // Offset: 0x2B8434C
    void ReferenceCountAdd();
    // public System.Boolean ReferenceCountSub()
    // Offset: 0x2B8435C
    bool ReferenceCountSub();
    // public System.Void SetTarget(Fusion.PlayerRef target)
    // Offset: 0x2B84374
    void SetTarget(::Fusion::PlayerRef target);
    // public System.Void SetStatic()
    // Offset: 0x2B84394
    void SetStatic();
    // public System.Void SetUnreliable()
    // Offset: 0x2B843A4
    void SetUnreliable();
    // public System.Void SetNotTickAligned()
    // Offset: 0x2B843B4
    void SetNotTickAligned();
    // public System.Void SetDummy()
    // Offset: 0x2B843C4
    void SetDummy();
    // public System.Boolean GetFlag(System.Int32 flag)
    // Offset: 0x2B843D8
    bool GetFlag(int flag);
    // public System.Boolean IsTargeted()
    // Offset: 0x2B843E8
    bool IsTargeted();
    // public System.Boolean get_IsUnreliable()
    // Offset: 0x2B843F8
    bool get_IsUnreliable();
    // static public Fusion.SimulationMessage* Clone(Fusion.Simulation sim, Fusion.SimulationMessage* message)
    // Offset: 0x2B84404
    static ::Fusion::SimulationMessage* Clone(::Fusion::Simulation* sim, ::Fusion::SimulationMessage* message);
    // static public System.Void WriteNetworkedObjectRef(Fusion.SimulationMessage* message, Fusion.NetworkId value)
    // Offset: 0x2B844D4
    static void WriteNetworkedObjectRef(::Fusion::SimulationMessage* message, ::Fusion::NetworkId value);
    // static public Fusion.NetworkId ReadNetworkedObjectRef(Fusion.SimulationMessage* message)
    // Offset: 0x2B844F8
    static ::Fusion::NetworkId ReadNetworkedObjectRef(::Fusion::SimulationMessage* message);
    // static public System.Void WriteVector3(Fusion.SimulationMessage* message, UnityEngine.Vector3 value)
    // Offset: 0x2B84520
    static void WriteVector3(::Fusion::SimulationMessage* message, ::UnityEngine::Vector3 value);
    // static public UnityEngine.Vector3 ReadVector3(Fusion.SimulationMessage* message)
    // Offset: 0x2B84548
    static ::UnityEngine::Vector3 ReadVector3(::Fusion::SimulationMessage* message);
    // static public System.Void WriteInt(Fusion.SimulationMessage* message, System.Int32 value)
    // Offset: 0x2B84570
    static void WriteInt(::Fusion::SimulationMessage* message, int value);
    // static public System.Int32 ReadInt(Fusion.SimulationMessage* message)
    // Offset: 0x2B84594
    static int ReadInt(::Fusion::SimulationMessage* message);
    // static System.Void Free(Fusion.Simulation sim, Fusion.SimulationMessage* message)
    // Offset: 0x2B845BC
    static void Free(::Fusion::Simulation* sim, ::Fusion::SimulationMessage* message);
    // static public System.Byte* GetData(Fusion.SimulationMessage* message)
    // Offset: 0x2B84630
    static uint8_t* GetData(::Fusion::SimulationMessage* message);
    // static public Fusion.SimulationMessage* Allocate(Fusion.Simulation sim, System.Int32 capacityInBytes)
    // Offset: 0x2B844A4
    static ::Fusion::SimulationMessage* Allocate(::Fusion::Simulation* sim, int capacityInBytes);
    // public System.String ToString(System.Boolean useBrackets)
    // Offset: 0x2B84640
    ::StringW ToString(bool useBrackets);
    // static System.String DumpContents(Fusion.SimulationMessage message)
    // Offset: 0x2B84C2C
    static ::StringW DumpContents(::Fusion::SimulationMessage message);
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B84DE4
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // public override System.String ToString()
    // Offset: 0x2B84638
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.SimulationMessage
  #pragma pack(pop)
  static check_size<sizeof(SimulationMessage), 24 + sizeof(::Fusion::PlayerRef)> __Fusion_SimulationMessageSizeCheck;
  static_assert(sizeof(SimulationMessage) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationMessage::ReferenceCountAdd
// Il2CppName: ReferenceCountAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::ReferenceCountAdd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ReferenceCountAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ReferenceCountSub
// Il2CppName: ReferenceCountSub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::ReferenceCountSub)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ReferenceCountSub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)(::Fusion::PlayerRef)>(&Fusion::SimulationMessage::SetTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::SetStatic
// Il2CppName: SetStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::SetStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "SetStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::SetUnreliable
// Il2CppName: SetUnreliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::SetUnreliable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "SetUnreliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::SetNotTickAligned
// Il2CppName: SetNotTickAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::SetNotTickAligned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "SetNotTickAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::SetDummy
// Il2CppName: SetDummy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::SetDummy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "SetDummy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::GetFlag
// Il2CppName: GetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationMessage::*)(int)>(&Fusion::SimulationMessage::GetFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "GetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::IsTargeted
// Il2CppName: IsTargeted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::IsTargeted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "IsTargeted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::get_IsUnreliable
// Il2CppName: get_IsUnreliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::get_IsUnreliable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "get_IsUnreliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationMessage* (*)(::Fusion::Simulation*, ::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::Clone)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::WriteNetworkedObjectRef
// Il2CppName: WriteNetworkedObjectRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::SimulationMessage*, ::Fusion::NetworkId)>(&Fusion::SimulationMessage::WriteNetworkedObjectRef)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "WriteNetworkedObjectRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ReadNetworkedObjectRef
// Il2CppName: ReadNetworkedObjectRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (*)(::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::ReadNetworkedObjectRef)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ReadNetworkedObjectRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::WriteVector3
// Il2CppName: WriteVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::SimulationMessage*, ::UnityEngine::Vector3)>(&Fusion::SimulationMessage::WriteVector3)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "WriteVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ReadVector3
// Il2CppName: ReadVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::ReadVector3)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ReadVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::WriteInt
// Il2CppName: WriteInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::SimulationMessage*, int)>(&Fusion::SimulationMessage::WriteInt)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "WriteInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, value});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ReadInt
// Il2CppName: ReadInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::ReadInt)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ReadInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation*, ::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::Free)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(::Fusion::SimulationMessage*)>(&Fusion::SimulationMessage::GetData)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationMessage* (*)(::Fusion::Simulation*, int)>(&Fusion::SimulationMessage::Allocate)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* capacityInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, capacityInBytes});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationMessage::*)(bool)>(&Fusion::SimulationMessage::ToString)> {
  static const MethodInfo* get() {
    static auto* useBrackets = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useBrackets});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::DumpContents
// Il2CppName: DumpContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Fusion::SimulationMessage)>(&Fusion::SimulationMessage::DumpContents)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "DumpContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessage::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::SimulationMessage::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessage::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationMessage::*)()>(&Fusion::SimulationMessage::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessage), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
