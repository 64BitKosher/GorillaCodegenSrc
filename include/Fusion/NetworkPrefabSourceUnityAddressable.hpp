// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkPrefabSourceUnityBase
#include "Fusion/NetworkPrefabSourceUnityBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkPrefabLoadContext
  struct NetworkPrefabLoadContext;
}
// Forward declaring namespace: UnityEngine::AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Forward declaring type: AssetReferenceGameObject
  class AssetReferenceGameObject;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkPrefabSourceUnityAddressable
  class NetworkPrefabSourceUnityAddressable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkPrefabSourceUnityAddressable);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPrefabSourceUnityAddressable*, "Fusion", "NetworkPrefabSourceUnityAddressable");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkPrefabSourceUnityAddressable
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkPrefabSourceUnityAddressable : public ::Fusion::NetworkPrefabSourceUnityBase {
    public:
    // Nested type: ::Fusion::NetworkPrefabSourceUnityAddressable::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    public:
    // public UnityEngine.AddressableAssets.AssetReferenceGameObject Address
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AddressableAssets::AssetReferenceGameObject* Address;
    // Field size check
    static_assert(sizeof(::UnityEngine::AddressableAssets::AssetReferenceGameObject*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.AddressableAssets.AssetReferenceGameObject Address
    [[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AssetReferenceGameObject*& dyn_Address();
    // public System.Void .ctor()
    // Offset: 0x2AD2E50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPrefabSourceUnityAddressable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPrefabSourceUnityAddressable*, creationType>()));
    }
    // public override System.String get_EditorSummary()
    // Offset: 0x2AD2C20
    // Implemented from: Fusion.NetworkPrefabSourceUnityBase
    // Base method: System.String NetworkPrefabSourceUnityBase::get_EditorSummary()
    ::StringW get_EditorSummary();
    // public override System.Void Load(in Fusion.NetworkPrefabLoadContext context)
    // Offset: 0x2AD2C6C
    // Implemented from: Fusion.NetworkPrefabSourceUnityBase
    // Base method: System.Void NetworkPrefabSourceUnityBase::Load(in Fusion.NetworkPrefabLoadContext context)
    void Load(ByRef<::Fusion::NetworkPrefabLoadContext> context);
    // public override System.Void Unload()
    // Offset: 0x2AD2E2C
    // Implemented from: Fusion.NetworkPrefabSourceUnityBase
    // Base method: System.Void NetworkPrefabSourceUnityBase::Unload()
    void Unload();
  }; // Fusion.NetworkPrefabSourceUnityAddressable
  #pragma pack(pop)
  static check_size<sizeof(NetworkPrefabSourceUnityAddressable), 40 + sizeof(::UnityEngine::AddressableAssets::AssetReferenceGameObject*)> __Fusion_NetworkPrefabSourceUnityAddressableSizeCheck;
  static_assert(sizeof(NetworkPrefabSourceUnityAddressable) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityAddressable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityAddressable::get_EditorSummary
// Il2CppName: get_EditorSummary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkPrefabSourceUnityAddressable::*)()>(&Fusion::NetworkPrefabSourceUnityAddressable::get_EditorSummary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityAddressable*), "get_EditorSummary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityAddressable::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabSourceUnityAddressable::*)(ByRef<::Fusion::NetworkPrefabLoadContext>)>(&Fusion::NetworkPrefabSourceUnityAddressable::Load)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabLoadContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityAddressable*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabSourceUnityAddressable::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabSourceUnityAddressable::*)()>(&Fusion::NetworkPrefabSourceUnityAddressable::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabSourceUnityAddressable*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
