// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.SimulationBehaviourFlags
#include "Fusion/SimulationBehaviourFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: NetworkObject
  class NetworkObject;
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationBehaviour
  class SimulationBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationBehaviour*, "Fusion", "SimulationBehaviour");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class SimulationBehaviour : public ::Fusion::Behaviour/*, public ::Fusion::ILogBuilder*/ {
    public:
    public:
    // Fusion.SimulationBehaviour Prev
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::SimulationBehaviour* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviour*) == 0x8);
    // Fusion.SimulationBehaviour Next
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationBehaviour* Next;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviour*) == 0x8);
    // Fusion.SimulationBehaviourFlags Flags
    // Size: 0x4
    // Offset: 0x30
    ::Fusion::SimulationBehaviourFlags Flags;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviourFlags) == 0x4);
    // Padding between fields: Flags and: Runner
    char __padding2[0x4] = {};
    // public Fusion.NetworkRunner Runner
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::NetworkRunner* Runner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // public Fusion.NetworkObject Object
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::NetworkObject* Object;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // Get instance field reference: Fusion.SimulationBehaviour Prev
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviour*& dyn_Prev();
    // Get instance field reference: Fusion.SimulationBehaviour Next
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviour*& dyn_Next();
    // Get instance field reference: Fusion.SimulationBehaviourFlags Flags
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviourFlags& dyn_Flags();
    // Get instance field reference: public Fusion.NetworkRunner Runner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn_Runner();
    // Get instance field reference: public Fusion.NetworkObject Object
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObject*& dyn_Object();
    // public System.Boolean get_CanReceiveCallback()
    // Offset: 0x2B17F58
    bool get_CanReceiveCallback();
    // public System.Boolean get_HasInputAuthority()
    // Offset: 0x2B17FD8
    bool get_HasInputAuthority();
    // public System.Boolean get_HasStateAuthority()
    // Offset: 0x2B1805C
    bool get_HasStateAuthority();
    // public System.Boolean get_IsProxy()
    // Offset: 0x2B180E0
    bool get_IsProxy();
    // public System.Void FixedUpdateNetwork()
    // Offset: 0x2B18164
    void FixedUpdateNetwork();
    // public System.Void Render()
    // Offset: 0x2B18168
    void Render();
    // System.Void DebugNotifySpawned()
    // Offset: 0x2B1816C
    void DebugNotifySpawned();
    // System.Void DebugNotifyDespawned()
    // Offset: 0x2B18170
    void DebugNotifyDespawned();
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B18174
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // protected System.Void .ctor()
    // Offset: 0x2B11C2C
    // Implemented from: Fusion.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationBehaviour*, creationType>()));
    }
  }; // Fusion.SimulationBehaviour
  #pragma pack(pop)
  static check_size<sizeof(SimulationBehaviour), 64 + sizeof(::Fusion::NetworkObject*)> __Fusion_SimulationBehaviourSizeCheck;
  static_assert(sizeof(SimulationBehaviour) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::get_CanReceiveCallback
// Il2CppName: get_CanReceiveCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::get_CanReceiveCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "get_CanReceiveCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::get_HasInputAuthority
// Il2CppName: get_HasInputAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::get_HasInputAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "get_HasInputAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::get_HasStateAuthority
// Il2CppName: get_HasStateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::get_HasStateAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "get_HasStateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::get_IsProxy
// Il2CppName: get_IsProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::get_IsProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "get_IsProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::FixedUpdateNetwork
// Il2CppName: FixedUpdateNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::FixedUpdateNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "FixedUpdateNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::DebugNotifySpawned
// Il2CppName: DebugNotifySpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::DebugNotifySpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "DebugNotifySpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::DebugNotifyDespawned
// Il2CppName: DebugNotifyDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviour::*)()>(&Fusion::SimulationBehaviour::DebugNotifyDespawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "DebugNotifyDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviour::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::SimulationBehaviour::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviour*), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
