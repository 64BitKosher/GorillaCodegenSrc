// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/Statistics
#include "Fusion/Simulation_Statistics.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.ISampleData
#include "Fusion/ISampleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Fusion::Simulation::Statistics::TimeSample_1, "Fusion", "Simulation/Statistics/TimeSample`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Simulation/Statistics/TimeSample`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct Simulation::Statistics::TimeSample_1/*, public ::System::ValueType, public ::Fusion::ISampleData*/ {
    public:
    public:
    // public System.Single Time
    // Size: 0x4
    // Offset: 0x0
    float Time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public T Value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T Value;
    public:
    // Creating value type constructor for type: TimeSample_1
    constexpr TimeSample_1(float Time_ = {}, T Value_ = {}) noexcept : Time{Time_}, Value{Value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ISampleData
    operator ::Fusion::ISampleData() noexcept {
      return *reinterpret_cast<::Fusion::ISampleData*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Single Time
    [[deprecated("Use field access instead!")]] float& dyn_Time() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::TimeSample_1::dyn_Time");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Time"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T Value
    [[deprecated("Use field access instead!")]] T& dyn_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::TimeSample_1::dyn_Value");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Single time, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  TimeSample_1(float time, T value)
    // public System.Int32 get_TickValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_TickValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::TimeSample_1::get_TickValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::Simulation::Statistics::TimeSample_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Single get_TimeValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_TimeValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::TimeSample_1::get_TimeValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::Simulation::Statistics::TimeSample_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // public System.Single get_FloatValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_FloatValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::TimeSample_1::get_FloatValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::Simulation::Statistics::TimeSample_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
  }; // Fusion.Simulation/Statistics/TimeSample`1
  // Could not write size check! Type: Fusion.Simulation/Statistics/TimeSample`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
