// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: TickTimer
  struct TickTimer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::TickTimer, "Fusion", "TickTimer");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.TickTimer
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct TickTimer/*, public ::System::ValueType, public ::Fusion::INetworkStruct*/ {
    public:
    public:
    // private System.Int32 _target
    // Size: 0x4
    // Offset: 0x0
    int target;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TickTimer
    constexpr TickTimer(int target_ = {}) noexcept : target{target_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return target;
    }
    // Get instance field reference: private System.Int32 _target
    [[deprecated("Use field access instead!")]] int& dyn__target();
    // static public Fusion.TickTimer get_None()
    // Offset: 0x2B4AC48
    static ::Fusion::TickTimer get_None();
    // public System.Boolean get_IsRunning()
    // Offset: 0x2B4AC50
    bool get_IsRunning();
    // public System.Nullable`1<System.Int32> get_TargetTick()
    // Offset: 0x2B4AC60
    ::System::Nullable_1<int> get_TargetTick();
    // public System.Boolean Expired(Fusion.NetworkRunner runner)
    // Offset: 0x2B4ACC4
    bool Expired(::Fusion::NetworkRunner* runner);
    // public System.Boolean ExpiredOrNotRunning(Fusion.NetworkRunner runner)
    // Offset: 0x2B4AD6C
    bool ExpiredOrNotRunning(::Fusion::NetworkRunner* runner);
    // public System.Nullable`1<System.Int32> RemainingTicks(Fusion.NetworkRunner runner)
    // Offset: 0x2B4ADC0
    ::System::Nullable_1<int> RemainingTicks(::Fusion::NetworkRunner* runner);
    // public System.Nullable`1<System.Single> RemainingTime(Fusion.NetworkRunner runner)
    // Offset: 0x2B4AEE8
    ::System::Nullable_1<float> RemainingTime(::Fusion::NetworkRunner* runner);
    // static public Fusion.TickTimer CreateFromSeconds(Fusion.NetworkRunner runner, System.Single delayInSeconds)
    // Offset: 0x2B4AFB8
    static ::Fusion::TickTimer CreateFromSeconds(::Fusion::NetworkRunner* runner, float delayInSeconds);
    // static public Fusion.TickTimer CreateFromTicks(Fusion.NetworkRunner runner, System.Int32 ticks)
    // Offset: 0x2B4B0CC
    static ::Fusion::TickTimer CreateFromTicks(::Fusion::NetworkRunner* runner, int ticks);
    // public override System.String ToString()
    // Offset: 0x2B4B16C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.TickTimer
  #pragma pack(pop)
  static check_size<sizeof(TickTimer), 0 + sizeof(int)> __Fusion_TickTimerSizeCheck;
  static_assert(sizeof(TickTimer) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::TickTimer::get_None
// Il2CppName: get_None
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::TickTimer (*)()>(&Fusion::TickTimer::get_None)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "get_None", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TickTimer::*)()>(&Fusion::TickTimer::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::get_TargetTick
// Il2CppName: get_TargetTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Fusion::TickTimer::*)()>(&Fusion::TickTimer::get_TargetTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "get_TargetTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::Expired
// Il2CppName: Expired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TickTimer::*)(::Fusion::NetworkRunner*)>(&Fusion::TickTimer::Expired)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "Expired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::ExpiredOrNotRunning
// Il2CppName: ExpiredOrNotRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TickTimer::*)(::Fusion::NetworkRunner*)>(&Fusion::TickTimer::ExpiredOrNotRunning)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "ExpiredOrNotRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::RemainingTicks
// Il2CppName: RemainingTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Fusion::TickTimer::*)(::Fusion::NetworkRunner*)>(&Fusion::TickTimer::RemainingTicks)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "RemainingTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::RemainingTime
// Il2CppName: RemainingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<float> (Fusion::TickTimer::*)(::Fusion::NetworkRunner*)>(&Fusion::TickTimer::RemainingTime)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "RemainingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::CreateFromSeconds
// Il2CppName: CreateFromSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::TickTimer (*)(::Fusion::NetworkRunner*, float)>(&Fusion::TickTimer::CreateFromSeconds)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* delayInSeconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "CreateFromSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, delayInSeconds});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::CreateFromTicks
// Il2CppName: CreateFromTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::TickTimer (*)(::Fusion::NetworkRunner*, int)>(&Fusion::TickTimer::CreateFromTicks)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "CreateFromTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, ticks});
  }
};
// Writing MetadataGetter for method: Fusion::TickTimer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::TickTimer::*)()>(&Fusion::TickTimer::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TickTimer), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
