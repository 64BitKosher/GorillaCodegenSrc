// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Allocator
#include "Fusion/Allocator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Allocator::Bucket, "Fusion", "Allocator/Bucket");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Allocator/Bucket
  // [TokenAttribute] Offset: FFFFFFFF
  struct Allocator::Bucket/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 Index
    // Size: 0x4
    // Offset: 0x0
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SegmentStride
    // Size: 0x4
    // Offset: 0x4
    int SegmentStride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SegmentWordCount
    // Size: 0x4
    // Offset: 0x8
    int SegmentWordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SegmentCapacity
    // Size: 0x4
    // Offset: 0xC
    int SegmentCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Bucket
    constexpr Bucket(int Index_ = {}, int SegmentStride_ = {}, int SegmentWordCount_ = {}, int SegmentCapacity_ = {}) noexcept : Index{Index_}, SegmentStride{SegmentStride_}, SegmentWordCount{SegmentWordCount_}, SegmentCapacity{SegmentCapacity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 16;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // Get instance field reference: public System.Int32 SegmentStride
    [[deprecated("Use field access instead!")]] int& dyn_SegmentStride();
    // Get instance field reference: public System.Int32 SegmentWordCount
    [[deprecated("Use field access instead!")]] int& dyn_SegmentWordCount();
    // Get instance field reference: public System.Int32 SegmentCapacity
    [[deprecated("Use field access instead!")]] int& dyn_SegmentCapacity();
    // static public Fusion.Allocator/Bucket Create(System.Int32 index, System.Int32 wordCount, Fusion.Allocator/Config config)
    // Offset: 0x2AFE158
    static ::Fusion::Allocator::Bucket Create(int index, int wordCount, ::Fusion::Allocator::Config config);
  }; // Fusion.Allocator/Bucket
  #pragma pack(pop)
  static check_size<sizeof(Allocator::Bucket), 12 + sizeof(int)> __Fusion_Allocator_BucketSizeCheck;
  static_assert(sizeof(Allocator::Bucket) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Allocator::Bucket::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Allocator::Bucket (*)(int, int, ::Fusion::Allocator::Config)>(&Fusion::Allocator::Bucket::Create)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Config")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::Bucket), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, wordCount, config});
  }
};
