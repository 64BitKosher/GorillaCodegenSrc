// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.ILagCompensationBroadphase
#include "Fusion/ILagCompensationBroadphase.hpp"
// Including type: Fusion.BVHNode
#include "Fusion/BVHNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Mapper
  class Mapper;
  // Skipping declaration: HitboxRoot because it is already included!
  // Forward declaring type: IBoundsTraversalTest
  class IBoundsTraversalTest;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Bounds because it is already included!
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Color because it is already included!
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: BVH
  class BVH;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::BVH);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::BVH*, "Fusion", "BVH");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.BVH
  // [TokenAttribute] Offset: FFFFFFFF
  class BVH : public ::Il2CppObject/*, public ::Fusion::ILagCompensationBroadphase*/ {
    public:
    public:
    // Fusion.BVHNode[] _nodes
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Fusion::BVHNode> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::BVHNode>) == 0x8);
    // Fusion.Mapper Mapper
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Mapper* Mapper;
    // Field size check
    static_assert(sizeof(::Fusion::Mapper*) == 0x8);
    // System.Int32 maxDepth
    // Size: 0x4
    // Offset: 0x20
    int maxDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxDepth and: refitNodes
    char __padding2[0x4] = {};
    // System.Collections.Generic.HashSet`1<System.Int32> refitNodes
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<int>* refitNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // readonly System.Collections.Generic.List`1<Fusion.HitboxRoot> ReusableList
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* ReusableList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>*) == 0x8);
    // private System.Int32 _nodesCount
    // Size: 0x4
    // Offset: 0x38
    int nodesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _usedNodesCount
    // Size: 0x4
    // Offset: 0x3C
    int usedNodesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _freeNodesHead
    // Size: 0x4
    // Offset: 0x40
    int freeNodesHead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Single ExpansionFactor
    // Size: 0x4
    // Offset: 0x44
    float ExpansionFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<System.Int32> _sweepNodes
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* sweepNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILagCompensationBroadphase
    operator ::Fusion::ILagCompensationBroadphase() noexcept {
      return *reinterpret_cast<::Fusion::ILagCompensationBroadphase*>(this);
    }
    // static field const value: static private System.Single DEFAULT_EXPANSION_FACTOR
    static constexpr const float DEFAULT_EXPANSION_FACTOR = 0.1;
    // Get static field: static private System.Single DEFAULT_EXPANSION_FACTOR
    static float _get_DEFAULT_EXPANSION_FACTOR();
    // Set static field: static private System.Single DEFAULT_EXPANSION_FACTOR
    static void _set_DEFAULT_EXPANSION_FACTOR(float value);
    // Get instance field reference: Fusion.BVHNode[] _nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::BVHNode>& dyn__nodes();
    // Get instance field reference: Fusion.Mapper Mapper
    [[deprecated("Use field access instead!")]] ::Fusion::Mapper*& dyn_Mapper();
    // Get instance field reference: System.Int32 maxDepth
    [[deprecated("Use field access instead!")]] int& dyn_maxDepth();
    // Get instance field reference: System.Collections.Generic.HashSet`1<System.Int32> refitNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_refitNodes();
    // Get instance field reference: readonly System.Collections.Generic.List`1<Fusion.HitboxRoot> ReusableList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>*& dyn_ReusableList();
    // Get instance field reference: private System.Int32 _nodesCount
    [[deprecated("Use field access instead!")]] int& dyn__nodesCount();
    // Get instance field reference: private System.Int32 _usedNodesCount
    [[deprecated("Use field access instead!")]] int& dyn__usedNodesCount();
    // Get instance field reference: private System.Int32 _freeNodesHead
    [[deprecated("Use field access instead!")]] int& dyn__freeNodesHead();
    // Get instance field reference: System.Single ExpansionFactor
    [[deprecated("Use field access instead!")]] float& dyn_ExpansionFactor();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> _sweepNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__sweepNodes();
    // Fusion.BVHNode get_rootBVH()
    // Offset: 0x2B31750
    ::Fusion::BVHNode get_rootBVH();
    // public System.Void CopyFrom(Fusion.ILagCompensationBroadphase other)
    // Offset: 0x2B3177C
    void CopyFrom(::Fusion::ILagCompensationBroadphase* other);
    // System.Int32 get_UsedNodesCount()
    // Offset: 0x2B3184C
    int get_UsedNodesCount();
    // Fusion.BVHNode GetNextNode(out System.Int32 index)
    // Offset: 0x2B31854
    ::Fusion::BVHNode GetNextNode(ByRef<int> index);
    // System.Void DisposeNode(System.Int32 index)
    // Offset: 0x2B318FC
    void DisposeNode(int index);
    // Fusion.BVHNode GetNode(System.Int32 index)
    // Offset: 0x2B31944
    ::Fusion::BVHNode GetNode(int index);
    // public System.Void Update(Fusion.HitboxRoot changed, System.Int32 tick)
    // Offset: 0x2B31978
    void Update(::Fusion::HitboxRoot* changed, int tick);
    // public System.Void Traverse(Fusion.IBoundsTraversalTest hitTest, System.Collections.Generic.List`1<Fusion.HitboxRoot> candidateRoots, System.Int32 layerMask)
    // Offset: 0x2B31A98
    void Traverse(::Fusion::IBoundsTraversalTest* hitTest, ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* candidateRoots, int layerMask);
    // private System.Void TraverseInternal(ref Fusion.BVHNode curNode, Fusion.IBoundsTraversalTest hitTest, System.Collections.Generic.List`1<Fusion.HitboxRoot> candidateRoots, System.Int32 layermask)
    // Offset: 0x2B31ADC
    void TraverseInternal(ByRef<::Fusion::BVHNode> curNode, ::Fusion::IBoundsTraversalTest* hitTest, ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* candidateRoots, int layermask);
    // public System.Void Optimize()
    // Offset: 0x2B31CC4
    void Optimize();
    // public System.Void Add(Fusion.HitboxRoot root)
    // Offset: 0x2B32CE4
    void Add(::Fusion::HitboxRoot* root);
    // static UnityEngine.Bounds BoundsFromSphere(UnityEngine.Vector3 pos, System.Single radius)
    // Offset: 0x2B33508
    static ::UnityEngine::Bounds BoundsFromSphere(::UnityEngine::Vector3 pos, float radius);
    // public System.Boolean Remove(Fusion.HitboxRoot root)
    // Offset: 0x2B3357C
    bool Remove(::Fusion::HitboxRoot* root);
    // System.Void .ctor(Fusion.Mapper mapper, System.Int32 nodesCapacity, System.Collections.Generic.List`1<Fusion.HitboxRoot> initialEntries, System.Single expansionFactor)
    // Offset: 0x2B337DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BVH* New_ctor(::Fusion::Mapper* mapper, int nodesCapacity, ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* initialEntries, float expansionFactor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::BVH::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BVH*, creationType>(mapper, nodesCapacity, initialEntries, expansionFactor)));
    }
    // public System.Void RenderGizmos(UnityEngine.Color color)
    // Offset: 0x2B33C6C
    void RenderGizmos(::UnityEngine::Color color);
    // private System.Void RenderGizmos(ref Fusion.BVHNode n, UnityEngine.Color color, System.Single depth)
    // Offset: 0x2B33CD4
    void RenderGizmos(ByRef<::Fusion::BVHNode> n, ::UnityEngine::Color color, float depth);
    // System.Void BuildNodesLog(System.Text.StringBuilder builder)
    // Offset: 0x2B33E10
    void BuildNodesLog(::System::Text::StringBuilder* builder);
  }; // Fusion.BVH
  #pragma pack(pop)
  static check_size<sizeof(BVH), 72 + sizeof(::System::Collections::Generic::List_1<int>*)> __Fusion_BVHSizeCheck;
  static_assert(sizeof(BVH) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::BVH::get_rootBVH
// Il2CppName: get_rootBVH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::BVHNode (Fusion::BVH::*)()>(&Fusion::BVH::get_rootBVH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "get_rootBVH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::Fusion::ILagCompensationBroadphase*)>(&Fusion::BVH::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Fusion", "ILagCompensationBroadphase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::get_UsedNodesCount
// Il2CppName: get_UsedNodesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::BVH::*)()>(&Fusion::BVH::get_UsedNodesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "get_UsedNodesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::GetNextNode
// Il2CppName: GetNextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::BVHNode (Fusion::BVH::*)(ByRef<int>)>(&Fusion::BVH::GetNextNode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "GetNextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::DisposeNode
// Il2CppName: DisposeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(int)>(&Fusion::BVH::DisposeNode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "DisposeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::BVHNode (Fusion::BVH::*)(int)>(&Fusion::BVH::GetNode)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::Fusion::HitboxRoot*, int)>(&Fusion::BVH::Update)> {
  static const MethodInfo* get() {
    static auto* changed = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changed, tick});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::Traverse
// Il2CppName: Traverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::Fusion::IBoundsTraversalTest*, ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>*, int)>(&Fusion::BVH::Traverse)> {
  static const MethodInfo* get() {
    static auto* hitTest = &::il2cpp_utils::GetClassFromName("Fusion", "IBoundsTraversalTest")->byval_arg;
    static auto* candidateRoots = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "Traverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitTest, candidateRoots, layerMask});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::TraverseInternal
// Il2CppName: TraverseInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(ByRef<::Fusion::BVHNode>, ::Fusion::IBoundsTraversalTest*, ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>*, int)>(&Fusion::BVH::TraverseInternal)> {
  static const MethodInfo* get() {
    static auto* curNode = &::il2cpp_utils::GetClassFromName("Fusion", "BVHNode")->this_arg;
    static auto* hitTest = &::il2cpp_utils::GetClassFromName("Fusion", "IBoundsTraversalTest")->byval_arg;
    static auto* candidateRoots = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")})->byval_arg;
    static auto* layermask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "TraverseInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curNode, hitTest, candidateRoots, layermask});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::Optimize
// Il2CppName: Optimize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)()>(&Fusion::BVH::Optimize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "Optimize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::Fusion::HitboxRoot*)>(&Fusion::BVH::Add)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::BoundsFromSphere
// Il2CppName: BoundsFromSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::UnityEngine::Vector3, float)>(&Fusion::BVH::BoundsFromSphere)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "BoundsFromSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, radius});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::BVH::*)(::Fusion::HitboxRoot*)>(&Fusion::BVH::Remove)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::BVH::RenderGizmos
// Il2CppName: RenderGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::UnityEngine::Color)>(&Fusion::BVH::RenderGizmos)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "RenderGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::RenderGizmos
// Il2CppName: RenderGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(ByRef<::Fusion::BVHNode>, ::UnityEngine::Color, float)>(&Fusion::BVH::RenderGizmos)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("Fusion", "BVHNode")->this_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "RenderGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, color, depth});
  }
};
// Writing MetadataGetter for method: Fusion::BVH::BuildNodesLog
// Il2CppName: BuildNodesLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::BVH::*)(::System::Text::StringBuilder*)>(&Fusion::BVH::BuildNodesLog)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::BVH*), "BuildNodesLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
