// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkTransform
#include "Fusion/NetworkTransform.hpp"
// Including type: Fusion.NetworkTransform/IInterpolationImplementation
#include "Fusion/NetworkTransform_IInterpolationImplementation.hpp"
// Including type: Fusion.IAfterTick
#include "Fusion/IAfterTick.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Fusion.NetworkTransform/PositionRotationValues
#include "Fusion/NetworkTransform_PositionRotationValues.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: InterpolationData
  struct InterpolationData;
  // Forward declaring type: InterpolatedErrorCorrectionSettings
  class InterpolatedErrorCorrectionSettings;
  // Forward declaring type: WriteAccuracy
  struct WriteAccuracy;
  // Forward declaring type: ReadAccuracy
  struct ReadAccuracy;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkTransform::SmoothErrorCorrectionInterp);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransform::SmoothErrorCorrectionInterp*, "Fusion", "NetworkTransform/SmoothErrorCorrectionInterp");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkTransform/SmoothErrorCorrectionInterp
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkTransform::SmoothErrorCorrectionInterp : public ::Il2CppObject/*, public ::Fusion::NetworkTransform::IInterpolationImplementation, public ::Fusion::IAfterTick*/ {
    public:
    public:
    // private Fusion.NetworkTransform _nt
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::NetworkTransform* nt;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform*) == 0x8);
    // private readonly Fusion.NetworkTransform/ConsecutiveStateInterp _csInterp
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::NetworkTransform::ConsecutiveStateInterp* csInterp;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::ConsecutiveStateInterp*) == 0x8);
    // private System.Single _lastRenderAlpha
    // Size: 0x4
    // Offset: 0x20
    float lastRenderAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Fusion.Tick _lastRenderFromTick
    // Size: 0x4
    // Offset: 0x24
    ::Fusion::Tick lastRenderFromTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // private Fusion.Tick _lastRenderToTick
    // Size: 0x4
    // Offset: 0x28
    ::Fusion::Tick lastRenderToTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // private Fusion.Tick _lastRenderTickResimulated
    // Size: 0x4
    // Offset: 0x2C
    ::Fusion::Tick lastRenderTickResimulated;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // private UnityEngine.Vector3 _lastRenderInterpolatedPos
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 lastRenderInterpolatedPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _lastRenderInterpolatedRot
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Quaternion lastRenderInterpolatedRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _lastRenderInterpolatedPosResim
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 lastRenderInterpolatedPosResim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _lastRenderInterpolatedRotResim
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Quaternion lastRenderInterpolatedRotResim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private Fusion.NetworkTransform/PositionRotationValues _accumulatedError
    // Size: 0x1C
    // Offset: 0x68
    ::Fusion::NetworkTransform::PositionRotationValues accumulatedError;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::PositionRotationValues) == 0x1C);
    public:
    // Creating interface conversion operator: operator ::Fusion::NetworkTransform::IInterpolationImplementation
    operator ::Fusion::NetworkTransform::IInterpolationImplementation() noexcept {
      return *reinterpret_cast<::Fusion::NetworkTransform::IInterpolationImplementation*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IAfterTick
    operator ::Fusion::IAfterTick() noexcept {
      return *reinterpret_cast<::Fusion::IAfterTick*>(this);
    }
    // Get instance field reference: private Fusion.NetworkTransform _nt
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform*& dyn__nt();
    // Get instance field reference: private readonly Fusion.NetworkTransform/ConsecutiveStateInterp _csInterp
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::ConsecutiveStateInterp*& dyn__csInterp();
    // Get instance field reference: private System.Single _lastRenderAlpha
    [[deprecated("Use field access instead!")]] float& dyn__lastRenderAlpha();
    // Get instance field reference: private Fusion.Tick _lastRenderFromTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__lastRenderFromTick();
    // Get instance field reference: private Fusion.Tick _lastRenderToTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__lastRenderToTick();
    // Get instance field reference: private Fusion.Tick _lastRenderTickResimulated
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__lastRenderTickResimulated();
    // Get instance field reference: private UnityEngine.Vector3 _lastRenderInterpolatedPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastRenderInterpolatedPos();
    // Get instance field reference: private UnityEngine.Quaternion _lastRenderInterpolatedRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__lastRenderInterpolatedRot();
    // Get instance field reference: private UnityEngine.Vector3 _lastRenderInterpolatedPosResim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__lastRenderInterpolatedPosResim();
    // Get instance field reference: private UnityEngine.Quaternion _lastRenderInterpolatedRotResim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__lastRenderInterpolatedRotResim();
    // Get instance field reference: private Fusion.NetworkTransform/PositionRotationValues _accumulatedError
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::PositionRotationValues& dyn__accumulatedError();
    // public System.Void Reset(Fusion.NetworkTransform nt)
    // Offset: 0x2B25584
    void Reset(::Fusion::NetworkTransform* nt);
    // public System.Void AfterApplyInterpolatedTransform()
    // Offset: 0x2B25650
    void AfterApplyInterpolatedTransform();
    // public System.Void AfterTick()
    // Offset: 0x2B25654
    void AfterTick();
    // public System.Boolean TryComputeInterpolatedTransform(out Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0x2B25F28
    bool TryComputeInterpolatedTransform(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // private System.Void ComputePredictionErrorCorrection(ref Fusion.InterpolationData data, ref Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0x2B26008
    void ComputePredictionErrorCorrection(ByRef<::Fusion::InterpolationData> data, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // static System.Void UpdateInterpolatedErrorCorrection(ref Fusion.NetworkTransform/PositionRotationValues accumulatedError, ref Fusion.NetworkTransform/InterpolatedTransformParameters param, Fusion.InterpolatedErrorCorrectionSettings settings)
    // Offset: 0x2B269A8
    static void UpdateInterpolatedErrorCorrection(ByRef<::Fusion::NetworkTransform::PositionRotationValues> accumulatedError, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param, ::Fusion::InterpolatedErrorCorrectionSettings* settings);
    // static private System.Void UpdateMinPositionCorrection(ref Fusion.NetworkTransform/PositionRotationValues accumulatedError, Fusion.InterpolatedErrorCorrectionSettings settings)
    // Offset: 0x2B26CC8
    static void UpdateMinPositionCorrection(ByRef<::Fusion::NetworkTransform::PositionRotationValues> accumulatedError, ::Fusion::InterpolatedErrorCorrectionSettings* settings);
    // private UnityEngine.Vector3 WriteReadVector3(UnityEngine.Vector3 value, Fusion.WriteAccuracy writeAccuracy, Fusion.ReadAccuracy readAccuracy)
    // Offset: 0x2B26E48
    ::UnityEngine::Vector3 WriteReadVector3(::UnityEngine::Vector3 value, ::Fusion::WriteAccuracy writeAccuracy, ::Fusion::ReadAccuracy readAccuracy);
    // private UnityEngine.Quaternion WriteReadQuaternion(UnityEngine.Quaternion value, Fusion.WriteAccuracy writeAccuracy, Fusion.ReadAccuracy readAccuracy)
    // Offset: 0x2B26F08
    ::UnityEngine::Quaternion WriteReadQuaternion(::UnityEngine::Quaternion value, ::Fusion::WriteAccuracy writeAccuracy, ::Fusion::ReadAccuracy readAccuracy);
    // public System.Void .ctor()
    // Offset: 0x2B2050C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkTransform::SmoothErrorCorrectionInterp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkTransform::SmoothErrorCorrectionInterp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkTransform::SmoothErrorCorrectionInterp*, creationType>()));
    }
  }; // Fusion.NetworkTransform/SmoothErrorCorrectionInterp
  #pragma pack(pop)
  static check_size<sizeof(NetworkTransform::SmoothErrorCorrectionInterp), 104 + sizeof(::Fusion::NetworkTransform::PositionRotationValues)> __Fusion_NetworkTransform_SmoothErrorCorrectionInterpSizeCheck;
  static_assert(sizeof(NetworkTransform::SmoothErrorCorrectionInterp) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)(::Fusion::NetworkTransform*)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::Reset)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::AfterApplyInterpolatedTransform
// Il2CppName: AfterApplyInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)()>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::AfterApplyInterpolatedTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "AfterApplyInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::AfterTick
// Il2CppName: AfterTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)()>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::AfterTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "AfterTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::TryComputeInterpolatedTransform
// Il2CppName: TryComputeInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::TryComputeInterpolatedTransform)> {
  static const MethodInfo* get() {
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "TryComputeInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::ComputePredictionErrorCorrection
// Il2CppName: ComputePredictionErrorCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)(ByRef<::Fusion::InterpolationData>, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::ComputePredictionErrorCorrection)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "ComputePredictionErrorCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::UpdateInterpolatedErrorCorrection
// Il2CppName: UpdateInterpolatedErrorCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Fusion::NetworkTransform::PositionRotationValues>, ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>, ::Fusion::InterpolatedErrorCorrectionSettings*)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::UpdateInterpolatedErrorCorrection)> {
  static const MethodInfo* get() {
    static auto* accumulatedError = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/PositionRotationValues")->this_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolatedErrorCorrectionSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "UpdateInterpolatedErrorCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accumulatedError, param, settings});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::UpdateMinPositionCorrection
// Il2CppName: UpdateMinPositionCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Fusion::NetworkTransform::PositionRotationValues>, ::Fusion::InterpolatedErrorCorrectionSettings*)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::UpdateMinPositionCorrection)> {
  static const MethodInfo* get() {
    static auto* accumulatedError = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/PositionRotationValues")->this_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolatedErrorCorrectionSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "UpdateMinPositionCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accumulatedError, settings});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::WriteReadVector3
// Il2CppName: WriteReadVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)(::UnityEngine::Vector3, ::Fusion::WriteAccuracy, ::Fusion::ReadAccuracy)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::WriteReadVector3)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* writeAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "WriteAccuracy")->byval_arg;
    static auto* readAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "ReadAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "WriteReadVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, writeAccuracy, readAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::WriteReadQuaternion
// Il2CppName: WriteReadQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Fusion::NetworkTransform::SmoothErrorCorrectionInterp::*)(::UnityEngine::Quaternion, ::Fusion::WriteAccuracy, ::Fusion::ReadAccuracy)>(&Fusion::NetworkTransform::SmoothErrorCorrectionInterp::WriteReadQuaternion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* writeAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "WriteAccuracy")->byval_arg;
    static auto* readAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "ReadAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform::SmoothErrorCorrectionInterp*), "WriteReadQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, writeAccuracy, readAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::SmoothErrorCorrectionInterp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
