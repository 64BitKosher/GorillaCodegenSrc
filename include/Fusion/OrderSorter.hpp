// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: OrderNode
  class OrderNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: OrderSorter
  class OrderSorter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::OrderSorter);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::OrderSorter*, "Fusion", "OrderSorter");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.OrderSorter
  // [TokenAttribute] Offset: FFFFFFFF
  class OrderSorter : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::OrderSorter::$$c
    class $$c;
    public:
    // private System.Collections.Generic.List`1<System.Type> types
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::Type*>* types;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Type*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.OrderNode> unorderedNodes
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Fusion::OrderNode*>* unorderedNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::OrderNode*>*) == 0x8);
    // private System.Collections.Generic.Stack`1<Fusion.OrderNode> defaultOrderNodes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Stack_1<::Fusion::OrderNode*>* defaultOrderNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Fusion::OrderNode*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Type,Fusion.OrderNode> NodeLookup
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Fusion::OrderNode*>* NodeLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Fusion::OrderNode*>*) == 0x8);
    // public Fusion.OrderNode[] SortedNodes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Fusion::OrderNode*> SortedNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::OrderNode*>) == 0x8);
    // public Fusion.OrderNode FirstNode
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::OrderNode* FirstNode;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public Fusion.OrderNode LastNode
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::OrderNode* LastNode;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public Fusion.OrderNode Physics2DNode
    // Size: 0x8
    // Offset: 0x48
    ::Fusion::OrderNode* Physics2DNode;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public Fusion.OrderNode Physics3DNode
    // Size: 0x8
    // Offset: 0x50
    ::Fusion::OrderNode* Physics3DNode;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public Fusion.OrderNode HitboxManagerNode
    // Size: 0x8
    // Offset: 0x58
    ::Fusion::OrderNode* HitboxManagerNode;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.Type> types
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Type*>*& dyn_types();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.OrderNode> unorderedNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::OrderNode*>*& dyn_unorderedNodes();
    // Get instance field reference: private System.Collections.Generic.Stack`1<Fusion.OrderNode> defaultOrderNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Fusion::OrderNode*>*& dyn_defaultOrderNodes();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Type,Fusion.OrderNode> NodeLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Fusion::OrderNode*>*& dyn_NodeLookup();
    // Get instance field reference: public Fusion.OrderNode[] SortedNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::OrderNode*>& dyn_SortedNodes();
    // Get instance field reference: public Fusion.OrderNode FirstNode
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_FirstNode();
    // Get instance field reference: public Fusion.OrderNode LastNode
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_LastNode();
    // Get instance field reference: public Fusion.OrderNode Physics2DNode
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_Physics2DNode();
    // Get instance field reference: public Fusion.OrderNode Physics3DNode
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_Physics3DNode();
    // Get instance field reference: public Fusion.OrderNode HitboxManagerNode
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_HitboxManagerNode();
    // static private System.Void AddIfMissing(System.Collections.Generic.List`1<System.Type> group, System.Type type)
    // Offset: 0x2B129B4
    static void AddIfMissing(::System::Collections::Generic::List_1<::System::Type*>* group, ::System::Type* type);
    // public Fusion.OrderNode[] RunConversion(System.Collections.Generic.List`1<System.Type> group)
    // Offset: 0x2B12A90
    ::ArrayW<::Fusion::OrderNode*> RunConversion(::System::Collections::Generic::List_1<::System::Type*>* group);
    // public Fusion.OrderNode[] Run()
    // Offset: 0x2B13A9C
    ::ArrayW<::Fusion::OrderNode*> Run();
    // private System.Void Scanlibrary()
    // Offset: 0x2B14054
    void Scanlibrary();
    // static private System.Void AlphabetizeTypes(System.Collections.Generic.List`1<System.Type> types)
    // Offset: 0x2B14348
    static void AlphabetizeTypes(::System::Collections::Generic::List_1<::System::Type*>* types);
    // public System.Void GenerateInitialNodeList(System.Collections.Generic.List`1<System.Type> types)
    // Offset: 0x2B13038
    void GenerateInitialNodeList(::System::Collections::Generic::List_1<::System::Type*>* types);
    // private System.Void GenerateInitialNodeList()
    // Offset: 0x2B14448
    void GenerateInitialNodeList();
    // public Fusion.OrderNode RegisterNode(System.Type type)
    // Offset: 0x2B14708
    ::Fusion::OrderNode* RegisterNode(::System::Type* type);
    // static public System.Boolean MergeChains(System.Collections.Generic.List`1<Fusion.OrderNode> unorderedNodes)
    // Offset: 0x2B13174
    static bool MergeChains(::System::Collections::Generic::List_1<::Fusion::OrderNode*>* unorderedNodes);
    // static public System.Void Sort(System.Collections.Generic.List`1<Fusion.OrderNode> unorderedNodes, ref Fusion.OrderNode firstNode, ref Fusion.OrderNode lastNode)
    // Offset: 0x2B13860
    static void Sort(::System::Collections::Generic::List_1<::Fusion::OrderNode*>* unorderedNodes, ByRef<::Fusion::OrderNode*> firstNode, ByRef<::Fusion::OrderNode*> lastNode);
    // static public System.Boolean ResortNode(Fusion.OrderNode node, ref Fusion.OrderNode firstNode, ref Fusion.OrderNode lastNode)
    // Offset: 0x2B14C5C
    static bool ResortNode(::Fusion::OrderNode* node, ByRef<::Fusion::OrderNode*> firstNode, ByRef<::Fusion::OrderNode*> lastNode);
    // public System.Void InsertDefaultOrderNodes()
    // Offset: 0x2B145FC
    void InsertDefaultOrderNodes();
    // private System.Void ConvertNodesToSortedArray()
    // Offset: 0x2B1398C
    void ConvertNodesToSortedArray();
    // static public System.Void InsertBefore(Fusion.OrderNode insert, Fusion.OrderNode existing, ref Fusion.OrderNode firstNode)
    // Offset: 0x2B14DFC
    static void InsertBefore(::Fusion::OrderNode* insert, ::Fusion::OrderNode* existing, ByRef<::Fusion::OrderNode*> firstNode);
    // static public System.Void InsertAfter(Fusion.OrderNode existing, Fusion.OrderNode insert, ref Fusion.OrderNode lastNode)
    // Offset: 0x2B14A54
    static void InsertAfter(::Fusion::OrderNode* existing, ::Fusion::OrderNode* insert, ByRef<::Fusion::OrderNode*> lastNode);
    // static public System.Void Remove(Fusion.OrderNode node, ref Fusion.OrderNode firstNode, ref Fusion.OrderNode lastNode)
    // Offset: 0x2B149A0
    static void Remove(::Fusion::OrderNode* node, ByRef<::Fusion::OrderNode*> firstNode, ByRef<::Fusion::OrderNode*> lastNode);
    // static private System.Void WriteError(System.Object obj)
    // Offset: 0x2B14B80
    static void WriteError(::Il2CppObject* obj);
    // public System.Void .ctor()
    // Offset: 0x2B14F28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrderSorter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::OrderSorter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrderSorter*, creationType>()));
    }
  }; // Fusion.OrderSorter
  #pragma pack(pop)
  static check_size<sizeof(OrderSorter), 88 + sizeof(::Fusion::OrderNode*)> __Fusion_OrderSorterSizeCheck;
  static_assert(sizeof(OrderSorter) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::OrderSorter::AddIfMissing
// Il2CppName: AddIfMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::Type*>*, ::System::Type*)>(&Fusion::OrderSorter::AddIfMissing)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "AddIfMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, type});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::RunConversion
// Il2CppName: RunConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Fusion::OrderNode*> (Fusion::OrderSorter::*)(::System::Collections::Generic::List_1<::System::Type*>*)>(&Fusion::OrderSorter::RunConversion)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "RunConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Fusion::OrderNode*> (Fusion::OrderSorter::*)()>(&Fusion::OrderSorter::Run)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::Scanlibrary
// Il2CppName: Scanlibrary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderSorter::*)()>(&Fusion::OrderSorter::Scanlibrary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "Scanlibrary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::AlphabetizeTypes
// Il2CppName: AlphabetizeTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::Type*>*)>(&Fusion::OrderSorter::AlphabetizeTypes)> {
  static const MethodInfo* get() {
    static auto* types = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "AlphabetizeTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{types});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::GenerateInitialNodeList
// Il2CppName: GenerateInitialNodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderSorter::*)(::System::Collections::Generic::List_1<::System::Type*>*)>(&Fusion::OrderSorter::GenerateInitialNodeList)> {
  static const MethodInfo* get() {
    static auto* types = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "GenerateInitialNodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{types});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::GenerateInitialNodeList
// Il2CppName: GenerateInitialNodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderSorter::*)()>(&Fusion::OrderSorter::GenerateInitialNodeList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "GenerateInitialNodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::RegisterNode
// Il2CppName: RegisterNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::OrderNode* (Fusion::OrderSorter::*)(::System::Type*)>(&Fusion::OrderSorter::RegisterNode)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "RegisterNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::MergeChains
// Il2CppName: MergeChains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::Fusion::OrderNode*>*)>(&Fusion::OrderSorter::MergeChains)> {
  static const MethodInfo* get() {
    static auto* unorderedNodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "MergeChains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unorderedNodes});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Fusion::OrderNode*>*, ByRef<::Fusion::OrderNode*>, ByRef<::Fusion::OrderNode*>)>(&Fusion::OrderSorter::Sort)> {
  static const MethodInfo* get() {
    static auto* unorderedNodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")})->byval_arg;
    static auto* firstNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    static auto* lastNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unorderedNodes, firstNode, lastNode});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::ResortNode
// Il2CppName: ResortNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::OrderNode*, ByRef<::Fusion::OrderNode*>, ByRef<::Fusion::OrderNode*>)>(&Fusion::OrderSorter::ResortNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* firstNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    static auto* lastNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "ResortNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, firstNode, lastNode});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::InsertDefaultOrderNodes
// Il2CppName: InsertDefaultOrderNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderSorter::*)()>(&Fusion::OrderSorter::InsertDefaultOrderNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "InsertDefaultOrderNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::ConvertNodesToSortedArray
// Il2CppName: ConvertNodesToSortedArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderSorter::*)()>(&Fusion::OrderSorter::ConvertNodesToSortedArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "ConvertNodesToSortedArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::InsertBefore
// Il2CppName: InsertBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::OrderNode*, ::Fusion::OrderNode*, ByRef<::Fusion::OrderNode*>)>(&Fusion::OrderSorter::InsertBefore)> {
  static const MethodInfo* get() {
    static auto* insert = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* existing = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* firstNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "InsertBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insert, existing, firstNode});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::InsertAfter
// Il2CppName: InsertAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::OrderNode*, ::Fusion::OrderNode*, ByRef<::Fusion::OrderNode*>)>(&Fusion::OrderSorter::InsertAfter)> {
  static const MethodInfo* get() {
    static auto* existing = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* insert = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* lastNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "InsertAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{existing, insert, lastNode});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::OrderNode*, ByRef<::Fusion::OrderNode*>, ByRef<::Fusion::OrderNode*>)>(&Fusion::OrderSorter::Remove)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->byval_arg;
    static auto* firstNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    static auto* lastNode = &::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, firstNode, lastNode});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::WriteError
// Il2CppName: WriteError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Fusion::OrderSorter::WriteError)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderSorter*), "WriteError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::OrderSorter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
