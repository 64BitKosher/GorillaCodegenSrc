// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkCharacterController
#include "Fusion/NetworkCharacterController.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.NetworkCharacterController/MovementType
#include "Fusion/NetworkCharacterController_MovementType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkCharacterController::Movement, "Fusion", "NetworkCharacterController/Movement");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x58
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkCharacterController/Movement
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkCharacterController::Movement/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.NetworkCharacterController/MovementType Type
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::NetworkCharacterController::MovementType Type;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkCharacterController::MovementType) == 0x4);
    // public UnityEngine.Vector3 NearestNormal
    // Size: 0xC
    // Offset: 0x4
    ::UnityEngine::Vector3 NearestNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 AvgNormal
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 AvgNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 GroundNormal
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 GroundNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Tangent
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 Tangent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 SlopeTangent
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 SlopeTangent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Correction
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 Correction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single Penetration
    // Size: 0x4
    // Offset: 0x4C
    float Penetration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean Grounded
    // Size: 0x1
    // Offset: 0x50
    bool Grounded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Grounded and: Contacts
    char __padding8[0x3] = {};
    // public System.Int32 Contacts
    // Size: 0x4
    // Offset: 0x54
    int Contacts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Movement
    constexpr Movement(::Fusion::NetworkCharacterController::MovementType Type_ = {}, ::UnityEngine::Vector3 NearestNormal_ = {}, ::UnityEngine::Vector3 AvgNormal_ = {}, ::UnityEngine::Vector3 GroundNormal_ = {}, ::UnityEngine::Vector3 Tangent_ = {}, ::UnityEngine::Vector3 SlopeTangent_ = {}, ::UnityEngine::Vector3 Correction_ = {}, float Penetration_ = {}, bool Grounded_ = {}, int Contacts_ = {}) noexcept : Type{Type_}, NearestNormal{NearestNormal_}, AvgNormal{AvgNormal_}, GroundNormal{GroundNormal_}, Tangent{Tangent_}, SlopeTangent{SlopeTangent_}, Correction{Correction_}, Penetration{Penetration_}, Grounded{Grounded_}, Contacts{Contacts_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.NetworkCharacterController/MovementType Type
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkCharacterController::MovementType& dyn_Type();
    // Get instance field reference: public UnityEngine.Vector3 NearestNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_NearestNormal();
    // Get instance field reference: public UnityEngine.Vector3 AvgNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_AvgNormal();
    // Get instance field reference: public UnityEngine.Vector3 GroundNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_GroundNormal();
    // Get instance field reference: public UnityEngine.Vector3 Tangent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Tangent();
    // Get instance field reference: public UnityEngine.Vector3 SlopeTangent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_SlopeTangent();
    // Get instance field reference: public UnityEngine.Vector3 Correction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Correction();
    // Get instance field reference: public System.Single Penetration
    [[deprecated("Use field access instead!")]] float& dyn_Penetration();
    // Get instance field reference: public System.Boolean Grounded
    [[deprecated("Use field access instead!")]] bool& dyn_Grounded();
    // Get instance field reference: public System.Int32 Contacts
    [[deprecated("Use field access instead!")]] int& dyn_Contacts();
  }; // Fusion.NetworkCharacterController/Movement
  #pragma pack(pop)
  static check_size<sizeof(NetworkCharacterController::Movement), 84 + sizeof(int)> __Fusion_NetworkCharacterController_MovementSizeCheck;
  static_assert(sizeof(NetworkCharacterController::Movement) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
