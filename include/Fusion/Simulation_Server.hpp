// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.SimulationArgs
#include "Fusion/SimulationArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: SimulationConnection
  class SimulationConnection;
  // Forward declaring type: SimulationSnapshot
  class SimulationSnapshot;
  // Forward declaring type: SimulationPacketEnvelope
  struct SimulationPacketEnvelope;
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Skipping declaration: NetAddress because it is already included!
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
  // Forward declaring type: NetConnection
  struct NetConnection;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::Server);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Server*, "Fusion", "Simulation/Server");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.Simulation/Server
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::Server : public ::Fusion::Simulation {
    public:
    public:
    // private System.Boolean _joinedHostPlayer
    // Size: 0x1
    // Offset: 0x360
    bool joinedHostPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.HashSet`1<Fusion.Tick> _clientTicks
    // Size: 0x8
    // Offset: 0x368
    ::System::Collections::Generic::HashSet_1<::Fusion::Tick>* clientTicks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::Tick>*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _joinedHostPlayer
    [[deprecated("Use field access instead!")]] bool& dyn__joinedHostPlayer();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Fusion.Tick> _clientTicks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::Tick>*& dyn__clientTicks();
    // System.Void Disconnect(Fusion.PlayerRef player)
    // Offset: 0x2B792F8
    void Disconnect(::Fusion::PlayerRef player);
    // System.Void Disconnect(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B79350
    void Disconnect(::Fusion::Sockets::NetAddress address);
    // System.Void CreateInternalStateObject()
    // Offset: 0x2B6FCF8
    void CreateInternalStateObject();
    // private System.Void InvokePlayerJoined(Fusion.PlayerRef player)
    // Offset: 0x2B79A60
    void InvokePlayerJoined(::Fusion::PlayerRef player);
    // static private System.Void WriteInputFeedback(Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationConnection ci)
    // Offset: 0x2B799D4
    static void WriteInputFeedback(::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationConnection* ci);
    // private System.Void ReadInput(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B796D4
    void ReadInput(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // public override Fusion.PlayerRef get_LocalPlayer()
    // Offset: 0x2B79134
    // Implemented from: Fusion.Simulation
    // Base method: Fusion.PlayerRef Simulation::get_LocalPlayer()
    ::Fusion::PlayerRef get_LocalPlayer();
    // public override Fusion.SimulationSnapshot get_LatestServerState()
    // Offset: 0x2B79180
    // Implemented from: Fusion.Simulation
    // Base method: Fusion.SimulationSnapshot Simulation::get_LatestServerState()
    ::Fusion::SimulationSnapshot* get_LatestServerState();
    // override System.Double GetPlayerRtt(Fusion.PlayerRef player)
    // Offset: 0x2B79188
    // Implemented from: Fusion.Simulation
    // Base method: System.Double Simulation::GetPlayerRtt(Fusion.PlayerRef player)
    double GetPlayerRtt(::Fusion::PlayerRef player);
    // System.Void .ctor(Fusion.SimulationArgs args)
    // Offset: 0x2B791FC
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::.ctor(Fusion.SimulationArgs args)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::Server* New_ctor(::Fusion::SimulationArgs args) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Server::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::Server*, creationType>(args)));
    }
    // protected override System.Void AfterUpdate()
    // Offset: 0x2B79440
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::AfterUpdate()
    void AfterUpdate();
    // protected override System.Void NetworkDisconnected(Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B7966C
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::NetworkDisconnected(Fusion.Sockets.NetConnection* connection)
    void NetworkDisconnected(::Fusion::Sockets::NetConnection* connection);
    // override System.Void RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B79670
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    void RecvPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // override System.Void SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B79940
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    void SendPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // protected override System.Void BeforeTick()
    // Offset: 0x2B79B4C
    // Implemented from: Fusion.Simulation
    // Base method: System.Void Simulation::BeforeTick()
    void BeforeTick();
    // override Fusion.SimulationInput GetInput(Fusion.Tick tick, Fusion.PlayerRef player)
    // Offset: 0x2B79E98
    // Implemented from: Fusion.Simulation
    // Base method: Fusion.SimulationInput Simulation::GetInput(Fusion.Tick tick, Fusion.PlayerRef player)
    ::Fusion::SimulationInput* GetInput(::Fusion::Tick tick, ::Fusion::PlayerRef player);
  }; // Fusion.Simulation/Server
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::Server::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::Server::Disconnect)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::Sockets::NetAddress)>(&Fusion::Simulation::Server::Disconnect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::CreateInternalStateObject
// Il2CppName: CreateInternalStateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)()>(&Fusion::Simulation::Server::CreateInternalStateObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "CreateInternalStateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::InvokePlayerJoined
// Il2CppName: InvokePlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::Server::InvokePlayerJoined)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "InvokePlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::WriteInputFeedback
// Il2CppName: WriteInputFeedback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationConnection*)>(&Fusion::Simulation::Server::WriteInputFeedback)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* ci = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "WriteInputFeedback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, ci});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::Server::ReadInput)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::get_LocalPlayer
// Il2CppName: get_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::Simulation::Server::*)()>(&Fusion::Simulation::Server::get_LocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "get_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::get_LatestServerState
// Il2CppName: get_LatestServerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::Server::*)()>(&Fusion::Simulation::Server::get_LatestServerState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "get_LatestServerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::GetPlayerRtt
// Il2CppName: GetPlayerRtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Simulation::Server::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::Server::GetPlayerRtt)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "GetPlayerRtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::Server::AfterUpdate
// Il2CppName: AfterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)()>(&Fusion::Simulation::Server::AfterUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "AfterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::NetworkDisconnected
// Il2CppName: NetworkDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::Server::NetworkDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "NetworkDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::RecvPacket
// Il2CppName: RecvPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::Server::RecvPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "RecvPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::SendPacket
// Il2CppName: SendPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::Server::SendPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "SendPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::BeforeTick
// Il2CppName: BeforeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Server::*)()>(&Fusion::Simulation::Server::BeforeTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "BeforeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Server::GetInput
// Il2CppName: GetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::Simulation::Server::*)(::Fusion::Tick, ::Fusion::PlayerRef)>(&Fusion::Simulation::Server::GetInput)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Server*), "GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, player});
  }
};
