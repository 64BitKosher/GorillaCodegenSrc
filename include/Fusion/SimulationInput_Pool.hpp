// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationInput
#include "Fusion/SimulationInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationConfig
  class SimulationConfig;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationInput::Pool);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationInput::Pool*, "Fusion", "SimulationInput/Pool");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationInput/Pool
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationInput::Pool : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Stack`1<Fusion.SimulationInput> _pool
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Stack_1<::Fusion::SimulationInput*>* pool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Fusion::SimulationInput*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.SimulationInput> _created
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Fusion::SimulationInput*>* created;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationInput*>*) == 0x8);
    // private Fusion.SimulationConfig _config
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::SimulationConfig* config;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig*) == 0x8);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x28
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Collections.Generic.Stack`1<Fusion.SimulationInput> _pool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Fusion::SimulationInput*>*& dyn__pool();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.SimulationInput> _created
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SimulationInput*>*& dyn__created();
    // Get instance field reference: private Fusion.SimulationConfig _config
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig*& dyn__config();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // public System.Void .ctor(Fusion.SimulationConfig config)
    // Offset: 0x2B83D98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationInput::Pool* New_ctor(::Fusion::SimulationConfig* config) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationInput::Pool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationInput::Pool*, creationType>(config)));
    }
    // public Fusion.SimulationInput Acquire()
    // Offset: 0x2B83E90
    ::Fusion::SimulationInput* Acquire();
    // public System.Void Release(Fusion.SimulationInput input)
    // Offset: 0x2B83FD4
    void Release(::Fusion::SimulationInput* input);
    // public System.Void Dispose()
    // Offset: 0x2B84060
    void Dispose();
  }; // Fusion.SimulationInput/Pool
  #pragma pack(pop)
  static check_size<sizeof(SimulationInput::Pool), 40 + sizeof(bool)> __Fusion_SimulationInput_PoolSizeCheck;
  static_assert(sizeof(SimulationInput::Pool) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationInput::Pool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationInput::Pool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::SimulationInput::Pool::*)()>(&Fusion::SimulationInput::Pool::Acquire)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput::Pool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::Pool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::Pool::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInput::Pool::Release)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput::Pool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInput::Pool::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInput::Pool::*)()>(&Fusion::SimulationInput::Pool::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInput::Pool*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
