// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
  // Forward declaring type: Simulation
  class Simulation;
  // Forward declaring type: LogOptions
  struct LogOptions;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: INetBitWriteStream
  class INetBitWriteStream;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationMessageEnvelope
  struct SimulationMessageEnvelope;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationMessageEnvelope, "Fusion", "SimulationMessageEnvelope");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.SimulationMessageEnvelope
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimulationMessageEnvelope/*, public ::System::ValueType, public ::Fusion::ILogBuilder*/ {
    public:
    public:
    // public System.UInt64 Sequence
    // Size: 0x8
    // Offset: 0x0
    uint64_t Sequence;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Fusion.SimulationMessage* Message
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::SimulationMessage* Message;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationMessage*) == 0x8);
    // public Fusion.SimulationMessageEnvelope* Prev
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::SimulationMessageEnvelope* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationMessageEnvelope*) == 0x8);
    // public Fusion.SimulationMessageEnvelope* Next
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::SimulationMessageEnvelope* Next;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationMessageEnvelope*) == 0x8);
    public:
    // Creating value type constructor for type: SimulationMessageEnvelope
    constexpr SimulationMessageEnvelope(uint64_t Sequence_ = {}, ::Fusion::SimulationMessage* Message_ = {}, ::Fusion::SimulationMessageEnvelope* Prev_ = {}, ::Fusion::SimulationMessageEnvelope* Next_ = {}) noexcept : Sequence{Sequence_}, Message{Message_}, Prev{Prev_}, Next{Next_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // static field const value: static private System.Int32 OffsetBlockSize
    static constexpr const int OffsetBlockSize = 10;
    // Get static field: static private System.Int32 OffsetBlockSize
    static int _get_OffsetBlockSize();
    // Set static field: static private System.Int32 OffsetBlockSize
    static void _set_OffsetBlockSize(int value);
    // static field const value: static private System.Int32 TickBlockSize
    static constexpr const int TickBlockSize = 16;
    // Get static field: static private System.Int32 TickBlockSize
    static int _get_TickBlockSize();
    // Set static field: static private System.Int32 TickBlockSize
    static void _set_TickBlockSize(int value);
    // static field const value: static private System.Int32 SequenceBlockSize
    static constexpr const int SequenceBlockSize = 16;
    // Get static field: static private System.Int32 SequenceBlockSize
    static int _get_SequenceBlockSize();
    // Set static field: static private System.Int32 SequenceBlockSize
    static void _set_SequenceBlockSize(int value);
    // Get instance field reference: public System.UInt64 Sequence
    [[deprecated("Use field access instead!")]] uint64_t& dyn_Sequence();
    // Get instance field reference: public Fusion.SimulationMessage* Message
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationMessage*& dyn_Message();
    // Get instance field reference: public Fusion.SimulationMessageEnvelope* Prev
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationMessageEnvelope*& dyn_Prev();
    // Get instance field reference: public Fusion.SimulationMessageEnvelope* Next
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationMessageEnvelope*& dyn_Next();
    // static private System.Int32 WriteInternal(Fusion.SimulationMessageEnvelope* envelope, T* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int WriteInternal(::Fusion::SimulationMessageEnvelope* envelope, T* buffer) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::Sockets::INetBitWriteStream>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationMessageEnvelope::WriteInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "SimulationMessageEnvelope", "WriteInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(envelope), ::il2cpp_utils::ExtractType(buffer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, envelope, buffer);
    }
    // static public System.Void Write(Fusion.SimulationMessageEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B84EC8
    static void Write(::Fusion::SimulationMessageEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer);
    // static public System.Int32 GetBitCount(Fusion.SimulationMessageEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B84F20
    static int GetBitCount(::Fusion::SimulationMessageEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer);
    // static public Fusion.SimulationMessageEnvelope* Read(Fusion.Simulation sim, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B84F8C
    static ::Fusion::SimulationMessageEnvelope* Read(::Fusion::Simulation* sim, ::Fusion::Sockets::NetBitBuffer* buffer);
    // static public Fusion.SimulationMessageEnvelope* Allocate(Fusion.Simulation sim, Fusion.SimulationMessage* message, System.UInt64 sequence)
    // Offset: 0x2B851D0
    static ::Fusion::SimulationMessageEnvelope* Allocate(::Fusion::Simulation* sim, ::Fusion::SimulationMessage* message, uint64_t sequence);
    // static public System.Void Free(Fusion.Simulation sim, Fusion.SimulationMessageEnvelope* envelope)
    // Offset: 0x2B85248
    static void Free(::Fusion::Simulation* sim, ::Fusion::SimulationMessageEnvelope* envelope);
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B854F8
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // public override System.String ToString()
    // Offset: 0x2B852FC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.SimulationMessageEnvelope
  #pragma pack(pop)
  static check_size<sizeof(SimulationMessageEnvelope), 24 + sizeof(::Fusion::SimulationMessageEnvelope*)> __Fusion_SimulationMessageEnvelopeSizeCheck;
  static_assert(sizeof(SimulationMessageEnvelope) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::WriteInternal
// Il2CppName: WriteInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::SimulationMessageEnvelope*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::SimulationMessageEnvelope::Write)> {
  static const MethodInfo* get() {
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::GetBitCount
// Il2CppName: GetBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Fusion::SimulationMessageEnvelope*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::SimulationMessageEnvelope::GetBitCount)> {
  static const MethodInfo* get() {
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "GetBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationMessageEnvelope* (*)(::Fusion::Simulation*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::SimulationMessageEnvelope::Read)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationMessageEnvelope* (*)(::Fusion::Simulation*, ::Fusion::SimulationMessage*, uint64_t)>(&Fusion::SimulationMessageEnvelope::Allocate)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* sequence = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, message, sequence});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Simulation*, ::Fusion::SimulationMessageEnvelope*)>(&Fusion::SimulationMessageEnvelope::Free)> {
  static const MethodInfo* get() {
    static auto* sim = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation")->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sim, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationMessageEnvelope::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::SimulationMessageEnvelope::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationMessageEnvelope::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::SimulationMessageEnvelope::*)()>(&Fusion::SimulationMessageEnvelope::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationMessageEnvelope), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
