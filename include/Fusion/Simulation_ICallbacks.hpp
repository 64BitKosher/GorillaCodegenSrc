// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInput
  class SimulationInput;
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: NetworkId
  struct NetworkId;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::ICallbacks);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::ICallbacks*, "Fusion", "Simulation/ICallbacks");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/ICallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::ICallbacks {
    public:
    // public System.Void OnTick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnTick();
    // public System.Void OnServerStart()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnServerStart();
    // public System.Void OnInput(Fusion.SimulationInput input)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnInput(::Fusion::SimulationInput* input);
    // public System.Void OnInputMissing(Fusion.SimulationInput input)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnInputMissing(::Fusion::SimulationInput* input);
    // public System.Void OnMessage(Fusion.SimulationMessage* message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnMessage(::Fusion::SimulationMessage* message);
    // public System.Void OnAfterClientSidePredictionReset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnAfterClientSidePredictionReset();
    // public System.Void OnBeforeClientSidePredictionReset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeClientSidePredictionReset();
    // public System.Void OnAfterTick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnAfterTick();
    // public System.Void OnBeforeTick()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeTick();
    // public System.Void OnAfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnAfterAllTicks(bool resimulation, int tickCount);
    // public System.Void OnBeforeAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeAllTicks(bool resimulation, int tickCount);
    // public System.Void OnAfterSimulation()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnAfterSimulation();
    // public System.Void OnBeforeSimulation()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeSimulation();
    // public System.Void OnBeforeCopyPreviousState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnBeforeCopyPreviousState();
    // public System.Void OnConnectedToServer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnectedToServer();
    // public System.Void OnDisconnectedFromServer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDisconnectedFromServer();
    // public System.Boolean OnConnectionRequest(Fusion.Sockets.NetAddress remoteAddress, System.Byte[] token)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool OnConnectionRequest(::Fusion::Sockets::NetAddress remoteAddress, ::ArrayW<uint8_t> token);
    // public System.Void OnConnectionFailed(Fusion.Sockets.NetAddress remoteAddress, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnectionFailed(::Fusion::Sockets::NetAddress remoteAddress, ::Fusion::Sockets::NetConnectFailedReason reason);
    // public System.Void OnReliableData(Fusion.PlayerRef player, System.Byte[] dataArray)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnReliableData(::Fusion::PlayerRef player, ::ArrayW<uint8_t> dataArray);
    // public System.Void PlayerJoined(Fusion.PlayerRef player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PlayerJoined(::Fusion::PlayerRef player);
    // public System.Void PlayerLeft(Fusion.PlayerRef player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PlayerLeft(::Fusion::PlayerRef player);
    // public System.Boolean TryBeginUpdateRemotePrefabs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryBeginUpdateRemotePrefabs();
    // public System.Void EndUpdateRemotePrefabs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EndUpdateRemotePrefabs();
    // public System.Boolean CreateRemotePrefab(Fusion.NetworkObjectHeader* header)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CreateRemotePrefab(::Fusion::NetworkObjectHeader* header);
    // public System.Boolean DestroyRemotePrefab(Fusion.NetworkId id, System.Boolean exists)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool DestroyRemotePrefab(::Fusion::NetworkId id, bool exists);
    // public System.Void OnInternalConnectionAttempt(System.Int32 attempt, System.Int32 totalConnectionAttempts, out System.Boolean shouldChange, out Fusion.Sockets.NetAddress newAddress)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnInternalConnectionAttempt(int attempt, int totalConnectionAttempts, ByRef<bool> shouldChange, ByRef<::Fusion::Sockets::NetAddress> newAddress);
    // public System.Boolean get_IsSharedModeMasterClient()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsSharedModeMasterClient();
    // public System.Boolean get_CanReceivePlayerJoinLeaveCallbacks()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_CanReceivePlayerJoinLeaveCallbacks();
    // public System.Void ObjectReceivedUpdate(Fusion.NetworkId id, System.Int32 tick)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ObjectReceivedUpdate(::Fusion::NetworkId id, int tick);
    // public System.Void ObjectStateAuthorityChanged(Fusion.NetworkId id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ObjectStateAuthorityChanged(::Fusion::NetworkId id);
    // public System.String[] GetDefaultInterestGroups(Fusion.NetworkId id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::StringW> GetDefaultInterestGroups(::Fusion::NetworkId id);
  }; // Fusion.Simulation/ICallbacks
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnTick
// Il2CppName: OnTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnServerStart
// Il2CppName: OnServerStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnServerStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnServerStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnInput
// Il2CppName: OnInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::SimulationInput*)>(&Fusion::Simulation::ICallbacks::OnInput)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnInputMissing
// Il2CppName: OnInputMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::SimulationInput*)>(&Fusion::Simulation::ICallbacks::OnInputMissing)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnInputMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnMessage
// Il2CppName: OnMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::SimulationMessage*)>(&Fusion::Simulation::ICallbacks::OnMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnAfterClientSidePredictionReset
// Il2CppName: OnAfterClientSidePredictionReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnAfterClientSidePredictionReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnAfterClientSidePredictionReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnBeforeClientSidePredictionReset
// Il2CppName: OnBeforeClientSidePredictionReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnBeforeClientSidePredictionReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnBeforeClientSidePredictionReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnAfterTick
// Il2CppName: OnAfterTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnAfterTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnAfterTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnBeforeTick
// Il2CppName: OnBeforeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnBeforeTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnBeforeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnAfterAllTicks
// Il2CppName: OnAfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(bool, int)>(&Fusion::Simulation::ICallbacks::OnAfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnAfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnBeforeAllTicks
// Il2CppName: OnBeforeAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(bool, int)>(&Fusion::Simulation::ICallbacks::OnBeforeAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnBeforeAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnAfterSimulation
// Il2CppName: OnAfterSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnAfterSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnAfterSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnBeforeSimulation
// Il2CppName: OnBeforeSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnBeforeSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnBeforeSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnBeforeCopyPreviousState
// Il2CppName: OnBeforeCopyPreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnBeforeCopyPreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnBeforeCopyPreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnConnectedToServer
// Il2CppName: OnConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnConnectedToServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnDisconnectedFromServer
// Il2CppName: OnDisconnectedFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::OnDisconnectedFromServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnDisconnectedFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnConnectionRequest
// Il2CppName: OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)(::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>)>(&Fusion::Simulation::ICallbacks::OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddress, token});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnConnectionFailed
// Il2CppName: OnConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&Fusion::Simulation::ICallbacks::OnConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddress, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnReliableData
// Il2CppName: OnReliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::PlayerRef, ::ArrayW<uint8_t>)>(&Fusion::Simulation::ICallbacks::OnReliableData)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* dataArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnReliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, dataArray});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::PlayerJoined
// Il2CppName: PlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::ICallbacks::PlayerJoined)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "PlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::PlayerLeft
// Il2CppName: PlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::ICallbacks::PlayerLeft)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "PlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::TryBeginUpdateRemotePrefabs
// Il2CppName: TryBeginUpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::TryBeginUpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "TryBeginUpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::EndUpdateRemotePrefabs
// Il2CppName: EndUpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::EndUpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "EndUpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::CreateRemotePrefab
// Il2CppName: CreateRemotePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)(::Fusion::NetworkObjectHeader*)>(&Fusion::Simulation::ICallbacks::CreateRemotePrefab)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "CreateRemotePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::DestroyRemotePrefab
// Il2CppName: DestroyRemotePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)(::Fusion::NetworkId, bool)>(&Fusion::Simulation::ICallbacks::DestroyRemotePrefab)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* exists = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "DestroyRemotePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, exists});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::OnInternalConnectionAttempt
// Il2CppName: OnInternalConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(int, int, ByRef<bool>, ByRef<::Fusion::Sockets::NetAddress>)>(&Fusion::Simulation::ICallbacks::OnInternalConnectionAttempt)> {
  static const MethodInfo* get() {
    static auto* attempt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* totalConnectionAttempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shouldChange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* newAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "OnInternalConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attempt, totalConnectionAttempts, shouldChange, newAddress});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::get_IsSharedModeMasterClient
// Il2CppName: get_IsSharedModeMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::get_IsSharedModeMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "get_IsSharedModeMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::get_CanReceivePlayerJoinLeaveCallbacks
// Il2CppName: get_CanReceivePlayerJoinLeaveCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::ICallbacks::*)()>(&Fusion::Simulation::ICallbacks::get_CanReceivePlayerJoinLeaveCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "get_CanReceivePlayerJoinLeaveCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::ObjectReceivedUpdate
// Il2CppName: ObjectReceivedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::NetworkId, int)>(&Fusion::Simulation::ICallbacks::ObjectReceivedUpdate)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "ObjectReceivedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, tick});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::ObjectStateAuthorityChanged
// Il2CppName: ObjectStateAuthorityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::ICallbacks::*)(::Fusion::NetworkId)>(&Fusion::Simulation::ICallbacks::ObjectStateAuthorityChanged)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "ObjectStateAuthorityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ICallbacks::GetDefaultInterestGroups
// Il2CppName: GetDefaultInterestGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Fusion::Simulation::ICallbacks::*)(::Fusion::NetworkId)>(&Fusion::Simulation::ICallbacks::GetDefaultInterestGroups)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::ICallbacks*), "GetDefaultInterestGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
