// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationBehaviour
#include "Fusion/SimulationBehaviour.hpp"
// Including type: Fusion.HitboxHit
#include "Fusion/HitboxHit.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: Fusion.LagCompensatedHit
#include "Fusion/LagCompensatedHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: LagCompensationSettings
  class LagCompensationSettings;
  // Forward declaring type: HitboxBuffer
  class HitboxBuffer;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: HitOptions
  struct HitOptions;
  // Forward declaring type: Hitbox
  class Hitbox;
  // Forward declaring type: HitboxRoot
  class HitboxRoot;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: QueryTriggerInteraction
  struct QueryTriggerInteraction;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Fusion::LagCompensation
namespace Fusion::LagCompensation {
  // Forward declaring type: Query
  struct Query;
  // Forward declaring type: PreProcessingDelegate
  class PreProcessingDelegate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: HitboxManager
  class HitboxManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::HitboxManager);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HitboxManager*, "Fusion", "HitboxManager");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.HitboxManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [OrderAfterAttribute] Offset: FFFFFFFF
  class HitboxManager : public ::Fusion::SimulationBehaviour {
    public:
    public:
    // public System.Int32 BVHDepth
    // Size: 0x4
    // Offset: 0x48
    int BVHDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 BVHNodes
    // Size: 0x4
    // Offset: 0x4C
    int BVHNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 TotalHitboxes
    // Size: 0x4
    // Offset: 0x50
    int TotalHitboxes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: TotalHitboxes and: settings
    char __padding2[0x4] = {};
    // private Fusion.LagCompensationSettings _settings
    // Size: 0x8
    // Offset: 0x58
    ::Fusion::LagCompensationSettings* settings;
    // Field size check
    static_assert(sizeof(::Fusion::LagCompensationSettings*) == 0x8);
    // private Fusion.HitboxBuffer _hitboxBuffer
    // Size: 0x8
    // Offset: 0x60
    ::Fusion::HitboxBuffer* hitboxBuffer;
    // Field size check
    static_assert(sizeof(::Fusion::HitboxBuffer*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.HitboxHit> _lagCompensatedHits
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::Fusion::HitboxHit>* lagCompensatedHits;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::HitboxHit>*) == 0x8);
    // private UnityEngine.Collider[] _physXOverlapHits
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Collider*> physXOverlapHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.RaycastHit[] _physXRaycastHits
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::RaycastHit> physXRaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 BVHDepth
    [[deprecated("Use field access instead!")]] int& dyn_BVHDepth();
    // Get instance field reference: public System.Int32 BVHNodes
    [[deprecated("Use field access instead!")]] int& dyn_BVHNodes();
    // Get instance field reference: public System.Int32 TotalHitboxes
    [[deprecated("Use field access instead!")]] int& dyn_TotalHitboxes();
    // Get instance field reference: private Fusion.LagCompensationSettings _settings
    [[deprecated("Use field access instead!")]] ::Fusion::LagCompensationSettings*& dyn__settings();
    // Get instance field reference: private Fusion.HitboxBuffer _hitboxBuffer
    [[deprecated("Use field access instead!")]] ::Fusion::HitboxBuffer*& dyn__hitboxBuffer();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.HitboxHit> _lagCompensatedHits
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::HitboxHit>*& dyn__lagCompensatedHits();
    // Get instance field reference: private UnityEngine.Collider[] _physXOverlapHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__physXOverlapHits();
    // Get instance field reference: private UnityEngine.RaycastHit[] _physXRaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn__physXRaycastHits();
    // public System.Int32 ResolveQuery(ref Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Boolean clearHits)
    // Offset: 0x2B3C888
    int ResolveQuery(ByRef<::Fusion::LagCompensation::Query> query, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, bool clearHits);
    // public System.Boolean Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, Fusion.PlayerRef player, out Fusion.LagCompensatedHit hit, System.Int32 layerMask, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3D62C
    bool Raycast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, ::Fusion::PlayerRef player, ByRef<::Fusion::LagCompensatedHit> hit, int layerMask, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Boolean Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, out Fusion.LagCompensatedHit hit, System.Int32 layerMask, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3D74C
    bool Raycast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha, ByRef<::Fusion::LagCompensatedHit> hit, int layerMask, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 RaycastAll(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, System.Boolean clearHits, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3D864
    int RaycastAll(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, ::Fusion::PlayerRef player, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, bool clearHits, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 RaycastAll(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, System.Boolean clearHits, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3DD60
    int RaycastAll(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, bool clearHits, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 OverlapSphere(UnityEngine.Vector3 origin, System.Single radius, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3DEC0
    int OverlapSphere(::UnityEngine::Vector3 origin, float radius, ::Fusion::PlayerRef player, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 OverlapSphere(UnityEngine.Vector3 origin, System.Single radius, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3E00C
    int OverlapSphere(::UnityEngine::Vector3 origin, float radius, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 OverlapBox(UnityEngine.Vector3 center, UnityEngine.Vector3 extents, UnityEngine.Quaternion orientation, Fusion.PlayerRef player, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3E140
    int OverlapBox(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 extents, ::UnityEngine::Quaternion orientation, ::Fusion::PlayerRef player, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Int32 OverlapBox(UnityEngine.Vector3 center, UnityEngine.Vector3 extents, UnityEngine.Quaternion orientation, System.Int32 tick, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction, Fusion.LagCompensation.PreProcessingDelegate preProcessRoots)
    // Offset: 0x2B3E2BC
    int OverlapBox(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 extents, ::UnityEngine::Quaternion orientation, int tick, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate* preProcessRoots);
    // public System.Void PositionRotation(Fusion.Hitbox hitbox, System.Int32 tick, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, System.Boolean subtickAccuracy, System.Nullable`1<System.Int32> tickTo, System.Nullable`1<System.Single> alpha)
    // Offset: 0x2B3E420
    void PositionRotation(::Fusion::Hitbox* hitbox, int tick, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, bool subtickAccuracy, ::System::Nullable_1<int> tickTo, ::System::Nullable_1<float> alpha);
    // public System.Void PositionRotation(Fusion.Hitbox hitbox, Fusion.PlayerRef player, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, System.Boolean subtickAccuracy)
    // Offset: 0x2B3E59C
    void PositionRotation(::Fusion::Hitbox* hitbox, ::Fusion::PlayerRef player, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, bool subtickAccuracy);
    // public System.Boolean Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, out Fusion.LagCompensatedHit hit, System.Int32 layerMask, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x2B3E654
    bool Raycast(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, int tick, ByRef<::Fusion::LagCompensatedHit> hit, int layerMask, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public System.Int32 RaycastAll(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single length, System.Int32 tick, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, System.Boolean clearHits, Fusion.HitOptions options, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x2B3E750
    int RaycastAll(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float length, int tick, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, bool clearHits, ::Fusion::HitOptions options, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public System.Int32 OverlapSphere(UnityEngine.Vector3 origin, System.Single radius, System.Int32 tick, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x2B3E8A4
    int OverlapSphere(::UnityEngine::Vector3 origin, float radius, int tick, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // public System.Int32 OverlapBox(UnityEngine.Vector3 center, UnityEngine.Vector3 extents, UnityEngine.Quaternion orientation, System.Int32 tick, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits, System.Int32 layerMask, Fusion.HitOptions options, System.Boolean clearHits, UnityEngine.QueryTriggerInteraction queryTriggerInteraction)
    // Offset: 0x2B3E9CC
    int OverlapBox(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 extents, ::UnityEngine::Quaternion orientation, int tick, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits, int layerMask, ::Fusion::HitOptions options, bool clearHits, ::UnityEngine::QueryTriggerInteraction queryTriggerInteraction);
    // private System.Void GetPlayerTickAndAlpha(Fusion.PlayerRef player, out System.Int32 tickFrom, out System.Nullable`1<System.Int32> tickTo, out System.Nullable`1<System.Single> alpha)
    // Offset: 0x2B3CAD4
    void GetPlayerTickAndAlpha(::Fusion::PlayerRef player, ByRef<int> tickFrom, ByRef<::System::Nullable_1<int>> tickTo, ByRef<::System::Nullable_1<float>> alpha);
    // private System.Boolean RaycastInternal(ref Fusion.LagCompensation.Query query, out Fusion.LagCompensatedHit hit)
    // Offset: 0x2B3CC0C
    bool RaycastInternal(ByRef<::Fusion::LagCompensation::Query> query, ByRef<::Fusion::LagCompensatedHit> hit);
    // private System.Int32 RaycastAllInternal(ref Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits)
    // Offset: 0x2B3D9DC
    int RaycastAllInternal(ByRef<::Fusion::LagCompensation::Query> query, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits);
    // private System.Int32 OverlapSphereInternal(ref Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits)
    // Offset: 0x2B3CE24
    int OverlapSphereInternal(ByRef<::Fusion::LagCompensation::Query> query, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits);
    // private System.Int32 OverlapBoxInternal(ref Fusion.LagCompensation.Query query, System.Collections.Generic.List`1<Fusion.LagCompensatedHit> hits)
    // Offset: 0x2B3D218
    int OverlapBoxInternal(ByRef<::Fusion::LagCompensation::Query> query, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>* hits);
    // private System.Void PositionRotationInternal(ref Fusion.LagCompensation.Query query, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)
    // Offset: 0x2B3E4D4
    void PositionRotationInternal(ByRef<::Fusion::LagCompensation::Query> query, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // private System.Void Init()
    // Offset: 0x2B3F514
    void Init();
    // private System.Void Init(System.Collections.Generic.List`1<Fusion.HitboxRoot> initialObjects)
    // Offset: 0x2B3F7BC
    void Init(::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* initialObjects);
    // private System.Collections.Generic.List`1<Fusion.HitboxRoot> GetObjects(Fusion.NetworkRunner runner)
    // Offset: 0x2B3F558
    ::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* GetObjects(::Fusion::NetworkRunner* runner);
    // private System.Void AdvanceAndRegister(System.Int32 tick, System.Int32 dataTick)
    // Offset: 0x2B3FD30
    void AdvanceAndRegister(int tick, int dataTick);
    // System.Boolean Remove(Fusion.HitboxRoot root)
    // Offset: 0x2B401E8
    bool Remove(::Fusion::HitboxRoot* root);
    // private System.Void OnDrawGizmos()
    // Offset: 0x2B40238
    void OnDrawGizmos();
    // public override System.Void FixedUpdateNetwork()
    // Offset: 0x2B3FAEC
    // Implemented from: Fusion.SimulationBehaviour
    // Base method: System.Void SimulationBehaviour::FixedUpdateNetwork()
    void FixedUpdateNetwork();
    // public System.Void .ctor()
    // Offset: 0x2B403F8
    // Implemented from: Fusion.SimulationBehaviour
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitboxManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::HitboxManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitboxManager*, creationType>()));
    }
  }; // Fusion.HitboxManager
  #pragma pack(pop)
  static check_size<sizeof(HitboxManager), 120 + sizeof(::ArrayW<::UnityEngine::RaycastHit>)> __Fusion_HitboxManagerSizeCheck;
  static_assert(sizeof(HitboxManager) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::HitboxManager::ResolveQuery
// Il2CppName: ResolveQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, bool)>(&Fusion::HitboxManager::ResolveQuery)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "ResolveQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, hits, clearHits});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::Fusion::PlayerRef, ByRef<::Fusion::LagCompensatedHit>, int, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")->this_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, player, hit, layerMask, options, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>, ByRef<::Fusion::LagCompensatedHit>, int, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")->this_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, tick, tickTo, alpha, hit, layerMask, options, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::RaycastAll
// Il2CppName: RaycastAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::Fusion::PlayerRef, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, bool, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::RaycastAll)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "RaycastAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, player, hits, layerMask, clearHits, options, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::RaycastAll
// Il2CppName: RaycastAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, bool, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::RaycastAll)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "RaycastAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, tick, tickTo, alpha, hits, layerMask, clearHits, options, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapSphere
// Il2CppName: OverlapSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, float, ::Fusion::PlayerRef, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::OverlapSphere)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, radius, player, hits, layerMask, options, clearHits, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapSphere
// Il2CppName: OverlapSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, float, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::OverlapSphere)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, radius, tick, tickTo, alpha, hits, layerMask, options, clearHits, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapBox
// Il2CppName: OverlapBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Fusion::PlayerRef, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::OverlapBox)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* extents = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, extents, orientation, player, hits, layerMask, options, clearHits, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapBox
// Il2CppName: OverlapBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, ::System::Nullable_1<int>, ::System::Nullable_1<float>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction, ::Fusion::LagCompensation::PreProcessingDelegate*)>(&Fusion::HitboxManager::OverlapBox)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* extents = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    static auto* preProcessRoots = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "PreProcessingDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, extents, orientation, tick, tickTo, alpha, hits, layerMask, options, clearHits, queryTriggerInteraction, preProcessRoots});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::PositionRotation
// Il2CppName: PositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(::Fusion::Hitbox*, int, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, bool, ::System::Nullable_1<int>, ::System::Nullable_1<float>)>(&Fusion::HitboxManager::PositionRotation)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* subtickAccuracy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "PositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox, tick, position, rotation, subtickAccuracy, tickTo, alpha});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::PositionRotation
// Il2CppName: PositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(::Fusion::Hitbox*, ::Fusion::PlayerRef, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, bool)>(&Fusion::HitboxManager::PositionRotation)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* subtickAccuracy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "PositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox, player, position, rotation, subtickAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ByRef<::Fusion::LagCompensatedHit>, int, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction)>(&Fusion::HitboxManager::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")->this_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, tick, hit, layerMask, options, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::RaycastAll
// Il2CppName: RaycastAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, bool, ::Fusion::HitOptions, ::UnityEngine::QueryTriggerInteraction)>(&Fusion::HitboxManager::RaycastAll)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "RaycastAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, length, tick, hits, layerMask, clearHits, options, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapSphere
// Il2CppName: OverlapSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, float, int, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction)>(&Fusion::HitboxManager::OverlapSphere)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, radius, tick, hits, layerMask, options, clearHits, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapBox
// Il2CppName: OverlapBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*, int, ::Fusion::HitOptions, bool, ::UnityEngine::QueryTriggerInteraction)>(&Fusion::HitboxManager::OverlapBox)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* extents = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "HitOptions")->byval_arg;
    static auto* clearHits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* queryTriggerInteraction = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, extents, orientation, tick, hits, layerMask, options, clearHits, queryTriggerInteraction});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::GetPlayerTickAndAlpha
// Il2CppName: GetPlayerTickAndAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(::Fusion::PlayerRef, ByRef<int>, ByRef<::System::Nullable_1<int>>, ByRef<::System::Nullable_1<float>>)>(&Fusion::HitboxManager::GetPlayerTickAndAlpha)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* tickFrom = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* tickTo = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* alpha = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "GetPlayerTickAndAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, tickFrom, tickTo, alpha});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::RaycastInternal
// Il2CppName: RaycastInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ByRef<::Fusion::LagCompensatedHit>)>(&Fusion::HitboxManager::RaycastInternal)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "RaycastInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, hit});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::RaycastAllInternal
// Il2CppName: RaycastAllInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*)>(&Fusion::HitboxManager::RaycastAllInternal)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "RaycastAllInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, hits});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapSphereInternal
// Il2CppName: OverlapSphereInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*)>(&Fusion::HitboxManager::OverlapSphereInternal)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapSphereInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, hits});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OverlapBoxInternal
// Il2CppName: OverlapBoxInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ::System::Collections::Generic::List_1<::Fusion::LagCompensatedHit>*)>(&Fusion::HitboxManager::OverlapBoxInternal)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* hits = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "LagCompensatedHit")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OverlapBoxInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, hits});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::PositionRotationInternal
// Il2CppName: PositionRotationInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(ByRef<::Fusion::LagCompensation::Query>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Fusion::HitboxManager::PositionRotationInternal)> {
  static const MethodInfo* get() {
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion.LagCompensation", "Query")->this_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "PositionRotationInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{query, position, rotation});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)()>(&Fusion::HitboxManager::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>*)>(&Fusion::HitboxManager::Init)> {
  static const MethodInfo* get() {
    static auto* initialObjects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialObjects});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::GetObjects
// Il2CppName: GetObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Fusion::HitboxRoot*>* (Fusion::HitboxManager::*)(::Fusion::NetworkRunner*)>(&Fusion::HitboxManager::GetObjects)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "GetObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::AdvanceAndRegister
// Il2CppName: AdvanceAndRegister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)(int, int)>(&Fusion::HitboxManager::AdvanceAndRegister)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataTick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "AdvanceAndRegister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, dataTick});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxManager::*)(::Fusion::HitboxRoot*)>(&Fusion::HitboxManager::Remove)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)()>(&Fusion::HitboxManager::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::FixedUpdateNetwork
// Il2CppName: FixedUpdateNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxManager::*)()>(&Fusion::HitboxManager::FixedUpdateNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxManager*), "FixedUpdateNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
