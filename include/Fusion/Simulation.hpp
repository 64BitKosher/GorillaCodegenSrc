// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.Sockets.INetPeerGroupCallbacks
#include "Fusion/Sockets/INetPeerGroupCallbacks.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Including type: Fusion.SimulationStages
#include "Fusion/SimulationStages.hpp"
// Including type: Fusion.SimulationSnapshot
#include "Fusion/SimulationSnapshot.hpp"
// Including type: Fusion.SimulationInput
#include "Fusion/SimulationInput.hpp"
// Including type: Fusion.TickAccumulator
#include "Fusion/TickAccumulator.hpp"
// Including type: Fusion.Ema
#include "Fusion/Ema.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Fusion.SimulationConfig
#include "Fusion/SimulationConfig.hpp"
// Including type: Fusion.SimulationPlayer
#include "Fusion/SimulationPlayer.hpp"
// Including type: Fusion.SimulationMessageInternalTypes
#include "Fusion/SimulationMessageInternalTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Allocator
  struct Allocator;
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
  // Forward declaring type: SimulationInputCollection
  class SimulationInputCollection;
  // Forward declaring type: SimulationConnection
  class SimulationConnection;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: SimulationPacketEnvelope
  struct SimulationPacketEnvelope;
  // Forward declaring type: NetworkPrefabId
  struct NetworkPrefabId;
  // Forward declaring type: NetworkObjectDestroyFlags
  struct NetworkObjectDestroyFlags;
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
  // Forward declaring type: SimulationMessageList
  struct SimulationMessageList;
  // Forward declaring type: SceneRef
  struct SceneRef;
  // Forward declaring type: LogOptions
  struct LogOptions;
  // Forward declaring type: RpcTargetStatus
  struct RpcTargetStatus;
  // Forward declaring type: RpcSendMessageResult
  struct RpcSendMessageResult;
  // Forward declaring type: PlayerRefSet
  struct PlayerRefSet;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: INetSocket
  class INetSocket;
  // Forward declaring type: NetPeer
  struct NetPeer;
  // Forward declaring type: NetPeerGroup
  struct NetPeerGroup;
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConfig
  struct NetConfig;
  // Forward declaring type: NetConnection
  struct NetConnection;
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
  // Forward declaring type: NetDisconnectReason
  struct NetDisconnectReason;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
  // Forward declaring type: NetSendEnvelope
  struct NetSendEnvelope;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Simulation
  class Simulation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation*, "Fusion", "Simulation");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.Simulation
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation : public ::Il2CppObject/*, public ::Fusion::ILogBuilder, public ::Fusion::Sockets::INetPeerGroupCallbacks*/ {
    public:
    // Nested type: ::Fusion::Simulation::AreaOfInterest
    struct AreaOfInterest;
    // Nested type: ::Fusion::Simulation::Client
    class Client;
    // Nested type: ::Fusion::Simulation::ICallbacks
    class ICallbacks;
    // Nested type: ::Fusion::Simulation::IDeltaCompressor
    class IDeltaCompressor;
    // Nested type: ::Fusion::Simulation::DeltaCompressorDebug
    class DeltaCompressorDebug;
    // Nested type: ::Fusion::Simulation::DeltaCompressorDefault
    class DeltaCompressorDefault;
    // Nested type: ::Fusion::Simulation::TargetObjectVerificationResult
    struct TargetObjectVerificationResult;
    // Nested type: ::Fusion::Simulation::Server
    class Server;
    // Nested type: ::Fusion::Simulation::StateReplicator
    class StateReplicator;
    // Nested type: ::Fusion::Simulation::StateReplicatorDeltaSnapshot
    class StateReplicatorDeltaSnapshot;
    // Nested type: ::Fusion::Simulation::StateReplicatorEventualConsistencyBase
    class StateReplicatorEventualConsistencyBase;
    // Nested type: ::Fusion::Simulation::StateReplicatorEventualConsistencyClientServer
    class StateReplicatorEventualConsistencyClientServer;
    // Nested type: ::Fusion::Simulation::StateReplicatorEventualConsistencyShared
    class StateReplicatorEventualConsistencyShared;
    // Nested type: ::Fusion::Simulation::Statistics
    class Statistics;
    // Nested type: ::Fusion::Simulation::$get_ActivePlayers$d__100
    class $get_ActivePlayers$d__100;
    public:
    // private System.Boolean _isShutdown
    // Size: 0x1
    // Offset: 0x10
    bool isShutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isWaitingForShutdown
    // Size: 0x1
    // Offset: 0x11
    bool isWaitingForShutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Fusion.Allocator* _tempAllocator
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::Allocator* tempAllocator;
    // Field size check
    static_assert(sizeof(::Fusion::Allocator*) == 0x8);
    // private Fusion.Simulation/ICallbacks _callbacks
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Simulation::ICallbacks* callbacks;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::ICallbacks*) == 0x8);
    // private Fusion.Simulation/IDeltaCompressor _deltaCompressor
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::Simulation::IDeltaCompressor* deltaCompressor;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::IDeltaCompressor*) == 0x8);
    // private Fusion.SimulationModes _mode
    // Size: 0x4
    // Offset: 0x30
    ::Fusion::SimulationModes mode;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    // private Fusion.SimulationStages _stage
    // Size: 0x4
    // Offset: 0x34
    ::Fusion::SimulationStages stage;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationStages) == 0x4);
    // private Fusion.SimulationConfig _config
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::SimulationConfig* config;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationConfig*) == 0x8);
    // private Fusion.NetworkProjectConfig _projectConfig
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::NetworkProjectConfig* projectConfig;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig*) == 0x8);
    // private Fusion.SimulationSnapshot/IHistory _history
    // Size: 0x8
    // Offset: 0x48
    ::Fusion::SimulationSnapshot::IHistory* history;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot::IHistory*) == 0x8);
    // private Fusion.SimulationSnapshot/Pool _historyPool
    // Size: 0x8
    // Offset: 0x50
    ::Fusion::SimulationSnapshot::Pool* historyPool;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot::Pool*) == 0x8);
    // private Fusion.SimulationSnapshot _state
    // Size: 0x8
    // Offset: 0x58
    ::Fusion::SimulationSnapshot* state;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _statePrevious
    // Size: 0x8
    // Offset: 0x60
    ::Fusion::SimulationSnapshot* statePrevious;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _stateInterestGroups
    // Size: 0x8
    // Offset: 0x68
    ::Fusion::SimulationSnapshot* stateInterestGroups;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _stateResume
    // Size: 0x8
    // Offset: 0x70
    ::Fusion::SimulationSnapshot* stateResume;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _interpTo
    // Size: 0x8
    // Offset: 0x78
    ::Fusion::SimulationSnapshot* interpTo;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.SimulationSnapshot _interpFrom
    // Size: 0x8
    // Offset: 0x80
    ::Fusion::SimulationSnapshot* interpFrom;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private System.Single _interpAlpha
    // Size: 0x4
    // Offset: 0x88
    float interpAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Fusion.SimulationInput _inputRoot
    // Size: 0x8
    // Offset: 0x90
    ::Fusion::SimulationInput* inputRoot;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput*) == 0x8);
    // private Fusion.SimulationInput/Pool _inputPool
    // Size: 0x8
    // Offset: 0x98
    ::Fusion::SimulationInput::Pool* inputPool;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInput::Pool*) == 0x8);
    // private Fusion.SimulationInputCollection _inputCollection
    // Size: 0x8
    // Offset: 0xA0
    ::Fusion::SimulationInputCollection* inputCollection;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationInputCollection*) == 0x8);
    // private Fusion.Simulation/StateReplicator _stateReplicator
    // Size: 0x8
    // Offset: 0xA8
    ::Fusion::Simulation::StateReplicator* stateReplicator;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::StateReplicator*) == 0x8);
    // private Fusion.SimulationConnection[] _connections
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::Fusion::SimulationConnection*> connections;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationConnection*>) == 0x8);
    // private Fusion.SimulationPlayer[] _players
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::Fusion::SimulationPlayer*> players;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationPlayer*>) == 0x8);
    // private Fusion.TickAccumulator _accumulator
    // Size: 0x15
    // Offset: 0xC0
    ::Fusion::TickAccumulator accumulator;
    // Field size check
    static_assert(sizeof(::Fusion::TickAccumulator) == 0x15);
    // private System.Int32 _stepSize
    // Size: 0x4
    // Offset: 0xD8
    int stepSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _stepDeltaFloat
    // Size: 0x4
    // Offset: 0xDC
    float stepDeltaFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Double _stepDeltaDouble
    // Size: 0x8
    // Offset: 0xE0
    double stepDeltaDouble;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _updateTime
    // Size: 0x8
    // Offset: 0xE8
    double updateTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _updateDelta
    // Size: 0x8
    // Offset: 0xF0
    double updateDelta;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Fusion.Ema _updateDeltaAvg
    // Size: 0x28
    // Offset: 0xF8
    ::Fusion::Ema updateDeltaAvg;
    // Field size check
    static_assert(sizeof(::Fusion::Ema) == 0x28);
    // private System.Boolean _isLastTick
    // Size: 0x1
    // Offset: 0x318
    bool isLastTick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isFirstTick
    // Size: 0x1
    // Offset: 0x319
    bool isFirstTick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isResimulation
    // Size: 0x1
    // Offset: 0x31A
    bool isResimulation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isResume
    // Size: 0x1
    // Offset: 0x31B
    bool isResume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInTick
    // Size: 0x1
    // Offset: 0x31C
    bool isInTick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> _isPaused
    // Size: 0xFFFFFFFF
    // Offset: 0x31D
    ::System::Nullable_1<bool> isPaused;
    // private Fusion.Simulation/AreaOfInterest* _aoi
    // Size: 0x8
    // Offset: 0x320
    ::Fusion::Simulation::AreaOfInterest* aoi;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::AreaOfInterest*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Fusion.Tick,System.Double> _tickUpdateTimes
    // Size: 0x8
    // Offset: 0x328
    ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, double>* tickUpdateTimes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::Tick, double>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkId> _globalInterestObjects
    // Size: 0x8
    // Offset: 0x330
    ::System::Collections::Generic::List_1<::Fusion::NetworkId>* globalInterestObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkId>*) == 0x8);
    // Fusion.Sockets.INetSocket _netSocket
    // Size: 0x8
    // Offset: 0x338
    ::Fusion::Sockets::INetSocket* netSocket;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::INetSocket*) == 0x8);
    // Fusion.Sockets.NetPeer* _netPeer
    // Size: 0x8
    // Offset: 0x340
    ::Fusion::Sockets::NetPeer* netPeer;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPeer*) == 0x8);
    // private Fusion.Sockets.NetPeerGroup* _netPeerGroup
    // Size: 0x8
    // Offset: 0x348
    ::Fusion::Sockets::NetPeerGroup* netPeerGroup;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetPeerGroup*) == 0x8);
    // private System.Random _netPeerRng
    // Size: 0x8
    // Offset: 0x350
    ::System::Random* netPeerRng;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // public Fusion.Simulation/Statistics Stats
    // Size: 0x8
    // Offset: 0x358
    ::Fusion::Simulation::Statistics* Stats;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::Statistics*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::Sockets::INetPeerGroupCallbacks
    operator ::Fusion::Sockets::INetPeerGroupCallbacks() noexcept {
      return *reinterpret_cast<::Fusion::Sockets::INetPeerGroupCallbacks*>(this);
    }
    // static field const value: static public System.Int32 DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE
    static constexpr const int DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE = 3;
    // Get static field: static public System.Int32 DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE
    static int _get_DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE();
    // Set static field: static public System.Int32 DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE
    static void _set_DEFAULT_COMPRESSOR_OFFSET_BLOCK_SIZE(int value);
    // static field const value: static public System.Int32 DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE
    static constexpr const int DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE = 6;
    // Get static field: static public System.Int32 DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE
    static int _get_DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE();
    // Set static field: static public System.Int32 DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE
    static void _set_DEFAULT_COMPRESSOR_VALUE_BLOCK_SIZE(int value);
    // Get instance field reference: private System.Boolean _isShutdown
    [[deprecated("Use field access instead!")]] bool& dyn__isShutdown();
    // Get instance field reference: private System.Boolean _isWaitingForShutdown
    [[deprecated("Use field access instead!")]] bool& dyn__isWaitingForShutdown();
    // Get instance field reference: private Fusion.Allocator* _tempAllocator
    [[deprecated("Use field access instead!")]] ::Fusion::Allocator*& dyn__tempAllocator();
    // Get instance field reference: private Fusion.Simulation/ICallbacks _callbacks
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::ICallbacks*& dyn__callbacks();
    // Get instance field reference: private Fusion.Simulation/IDeltaCompressor _deltaCompressor
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::IDeltaCompressor*& dyn__deltaCompressor();
    // Get instance field reference: private Fusion.SimulationModes _mode
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn__mode();
    // Get instance field reference: private Fusion.SimulationStages _stage
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationStages& dyn__stage();
    // Get instance field reference: private Fusion.SimulationConfig _config
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationConfig*& dyn__config();
    // Get instance field reference: private Fusion.NetworkProjectConfig _projectConfig
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig*& dyn__projectConfig();
    // Get instance field reference: private Fusion.SimulationSnapshot/IHistory _history
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot::IHistory*& dyn__history();
    // Get instance field reference: private Fusion.SimulationSnapshot/Pool _historyPool
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot::Pool*& dyn__historyPool();
    // Get instance field reference: private Fusion.SimulationSnapshot _state
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__state();
    // Get instance field reference: private Fusion.SimulationSnapshot _statePrevious
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__statePrevious();
    // Get instance field reference: private Fusion.SimulationSnapshot _stateInterestGroups
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__stateInterestGroups();
    // Get instance field reference: private Fusion.SimulationSnapshot _stateResume
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__stateResume();
    // Get instance field reference: private Fusion.SimulationSnapshot _interpTo
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__interpTo();
    // Get instance field reference: private Fusion.SimulationSnapshot _interpFrom
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__interpFrom();
    // Get instance field reference: private System.Single _interpAlpha
    [[deprecated("Use field access instead!")]] float& dyn__interpAlpha();
    // Get instance field reference: private Fusion.SimulationInput _inputRoot
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput*& dyn__inputRoot();
    // Get instance field reference: private Fusion.SimulationInput/Pool _inputPool
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInput::Pool*& dyn__inputPool();
    // Get instance field reference: private Fusion.SimulationInputCollection _inputCollection
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationInputCollection*& dyn__inputCollection();
    // Get instance field reference: private Fusion.Simulation/StateReplicator _stateReplicator
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::StateReplicator*& dyn__stateReplicator();
    // Get instance field reference: private Fusion.SimulationConnection[] _connections
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationConnection*>& dyn__connections();
    // Get instance field reference: private Fusion.SimulationPlayer[] _players
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationPlayer*>& dyn__players();
    // Get instance field reference: private Fusion.TickAccumulator _accumulator
    [[deprecated("Use field access instead!")]] ::Fusion::TickAccumulator& dyn__accumulator();
    // Get instance field reference: private System.Int32 _stepSize
    [[deprecated("Use field access instead!")]] int& dyn__stepSize();
    // Get instance field reference: private System.Single _stepDeltaFloat
    [[deprecated("Use field access instead!")]] float& dyn__stepDeltaFloat();
    // Get instance field reference: private System.Double _stepDeltaDouble
    [[deprecated("Use field access instead!")]] double& dyn__stepDeltaDouble();
    // Get instance field reference: private System.Double _updateTime
    [[deprecated("Use field access instead!")]] double& dyn__updateTime();
    // Get instance field reference: private System.Double _updateDelta
    [[deprecated("Use field access instead!")]] double& dyn__updateDelta();
    // Get instance field reference: private Fusion.Ema _updateDeltaAvg
    [[deprecated("Use field access instead!")]] ::Fusion::Ema& dyn__updateDeltaAvg();
    // Get instance field reference: private System.Boolean _isLastTick
    [[deprecated("Use field access instead!")]] bool& dyn__isLastTick();
    // Get instance field reference: private System.Boolean _isFirstTick
    [[deprecated("Use field access instead!")]] bool& dyn__isFirstTick();
    // Get instance field reference: private System.Boolean _isResimulation
    [[deprecated("Use field access instead!")]] bool& dyn__isResimulation();
    // Get instance field reference: private System.Boolean _isResume
    [[deprecated("Use field access instead!")]] bool& dyn__isResume();
    // Get instance field reference: private System.Boolean _isInTick
    [[deprecated("Use field access instead!")]] bool& dyn__isInTick();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _isPaused
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__isPaused();
    // Get instance field reference: private Fusion.Simulation/AreaOfInterest* _aoi
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::AreaOfInterest*& dyn__aoi();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.Tick,System.Double> _tickUpdateTimes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::Tick, double>*& dyn__tickUpdateTimes();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkId> _globalInterestObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkId>*& dyn__globalInterestObjects();
    // Get instance field reference: Fusion.Sockets.INetSocket _netSocket
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::INetSocket*& dyn__netSocket();
    // Get instance field reference: Fusion.Sockets.NetPeer* _netPeer
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPeer*& dyn__netPeer();
    // Get instance field reference: private Fusion.Sockets.NetPeerGroup* _netPeerGroup
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetPeerGroup*& dyn__netPeerGroup();
    // Get instance field reference: private System.Random _netPeerRng
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn__netPeerRng();
    // Get instance field reference: public Fusion.Simulation/Statistics Stats
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics*& dyn_Stats();
    // public System.Boolean get_IsShutdown()
    // Offset: 0x2B6EFFC
    bool get_IsShutdown();
    // public System.Boolean get_IsResimulation()
    // Offset: 0x2B6F004
    bool get_IsResimulation();
    // public System.Boolean get_IsLastTick()
    // Offset: 0x2B6F00C
    bool get_IsLastTick();
    // public System.Boolean get_IsFirstTick()
    // Offset: 0x2B6F014
    bool get_IsFirstTick();
    // public System.Boolean get_IsForward()
    // Offset: 0x2B6F01C
    bool get_IsForward();
    // public System.Boolean get_IsLocalPlayerFirstExecution()
    // Offset: 0x2B6F02C
    bool get_IsLocalPlayerFirstExecution();
    // public Fusion.SimulationSnapshot get_State()
    // Offset: 0x2B6F03C
    ::Fusion::SimulationSnapshot* get_State();
    // public Fusion.SimulationSnapshot get_StatePrevious()
    // Offset: 0x2B6F044
    ::Fusion::SimulationSnapshot* get_StatePrevious();
    // public System.Single get_StateAlpha()
    // Offset: 0x2B6F04C
    float get_StateAlpha();
    // public Fusion.SimulationSnapshot get_StateResume()
    // Offset: 0x2B6F0F4
    ::Fusion::SimulationSnapshot* get_StateResume();
    // public Fusion.Tick get_Tick()
    // Offset: 0x2B6F0FC
    ::Fusion::Tick get_Tick();
    // public System.Int32 get_InputCount()
    // Offset: 0x2B6F118
    int get_InputCount();
    // public System.Int32 get_MaxConnections()
    // Offset: 0x2B6F134
    int get_MaxConnections();
    // public Fusion.SimulationConfig/Topologies get_Topology()
    // Offset: 0x2B6F150
    ::Fusion::SimulationConfig::Topologies get_Topology();
    // public Fusion.SimulationSnapshot/IHistory get_SnapshotHistory()
    // Offset: 0x2B6F16C
    ::Fusion::SimulationSnapshot::IHistory* get_SnapshotHistory();
    // public Fusion.SimulationModes get_Mode()
    // Offset: 0x2B6F174
    ::Fusion::SimulationModes get_Mode();
    // public Fusion.SimulationStages get_Stage()
    // Offset: 0x2B6F17C
    ::Fusion::SimulationStages get_Stage();
    // public Fusion.SimulationConfig get_Config()
    // Offset: 0x2B6F184
    ::Fusion::SimulationConfig* get_Config();
    // public Fusion.NetworkProjectConfig get_ProjectConfig()
    // Offset: 0x2B6F18C
    ::Fusion::NetworkProjectConfig* get_ProjectConfig();
    // public System.Single get_DeltaTime()
    // Offset: 0x2B6F194
    float get_DeltaTime();
    // public Fusion.SimulationSnapshot get_InterpTo()
    // Offset: 0x2B6F19C
    ::Fusion::SimulationSnapshot* get_InterpTo();
    // public Fusion.SimulationSnapshot get_InterpFrom()
    // Offset: 0x2B6F1A4
    ::Fusion::SimulationSnapshot* get_InterpFrom();
    // public System.Single get_InterpAlpha()
    // Offset: 0x2B6F1AC
    float get_InterpAlpha();
    // public System.Boolean get_IsClient()
    // Offset: 0x2B6F1B4
    bool get_IsClient();
    // public System.Boolean get_IsServer()
    // Offset: 0x2B6F22C
    bool get_IsServer();
    // public System.Boolean get_IsPlayer()
    // Offset: 0x2B6F0D8
    bool get_IsPlayer();
    // public System.Boolean get_IsSinglePlayer()
    // Offset: 0x2B6F2A4
    bool get_IsSinglePlayer();
    // public System.Boolean get_IsMasterClient()
    // Offset: 0x2B6F2DC
    bool get_IsMasterClient();
    // public System.Collections.Generic.IEnumerable`1<Fusion.PlayerRef> get_ActivePlayers()
    // Offset: 0x2B6F380
    ::System::Collections::Generic::IEnumerable_1<::Fusion::PlayerRef>* get_ActivePlayers();
    // public System.Boolean get_IsRunning()
    // Offset: 0x2B6F3F4
    bool get_IsRunning();
    // Fusion.Simulation/StateReplicator get_Replicator()
    // Offset: 0x2B6F404
    ::Fusion::Simulation::StateReplicator* get_Replicator();
    // Fusion.Simulation/ICallbacks get_Callbacks()
    // Offset: 0x2B6F40C
    ::Fusion::Simulation::ICallbacks* get_Callbacks();
    // System.Boolean get_IsResume()
    // Offset: 0x2B6F414
    bool get_IsResume();
    // System.Boolean get_IsInTick()
    // Offset: 0x2B6F41C
    bool get_IsInTick();
    // System.Boolean get_IsPaused()
    // Offset: 0x2B6F424
    bool get_IsPaused();
    // public Fusion.Sockets.NetAddress get_LocalAddress()
    // Offset: 0x2B6F490
    ::Fusion::Sockets::NetAddress get_LocalAddress();
    // public Fusion.Sockets.NetConfig* get_NetConfigPointer()
    // Offset: 0x2B6F4AC
    ::Fusion::Sockets::NetConfig* get_NetConfigPointer();
    // public Fusion.PlayerRef get_LocalPlayer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::PlayerRef get_LocalPlayer();
    // public Fusion.SimulationSnapshot get_LatestServerState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::SimulationSnapshot* get_LatestServerState();
    // System.Double GetPlayerRtt(Fusion.PlayerRef player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    double GetPlayerRtt(::Fusion::PlayerRef player);
    // System.Void RecvPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RecvPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // System.Void SendPacket(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendPacket(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // Fusion.SimulationInput GetInput(Fusion.Tick tick, Fusion.PlayerRef player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::SimulationInput* GetInput(::Fusion::Tick tick, ::Fusion::PlayerRef player);
    // System.Void .ctor(Fusion.SimulationArgs args)
    // Offset: 0x2B6F4B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation* New_ctor(::Fusion::SimulationArgs args) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation*, creationType>(args)));
    }
    // private System.Void CalculateUpdateTime()
    // Offset: 0x2B70254
    void CalculateUpdateTime();
    // private System.Void StepDeltaInit(System.Int32 multiplier)
    // Offset: 0x2B701B4
    void StepDeltaInit(int multiplier);
    // private System.Void StepSimulation(Fusion.SimulationStages stage, System.Boolean lastTick, System.Boolean firstTick, System.Boolean freeInput)
    // Offset: 0x2B702A4
    void StepSimulation(::Fusion::SimulationStages stage, bool lastTick, bool firstTick, bool freeInput);
    // protected System.Void OnPlayerJoinedLeftInternalMessage(Fusion.PlayerRef player, System.Boolean joined)
    // Offset: 0x2B70C40
    void OnPlayerJoinedLeftInternalMessage(::Fusion::PlayerRef player, bool joined);
    // protected System.Void AfterUpdate()
    // Offset: 0x2B70C44
    void AfterUpdate();
    // protected System.Void NetworkConnected(Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B70C48
    void NetworkConnected(::Fusion::Sockets::NetConnection* connection);
    // protected System.Void NetworkDisconnected(Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B70C4C
    void NetworkDisconnected(::Fusion::Sockets::NetConnection* connection);
    // protected System.Void NetworkReceiveDone()
    // Offset: 0x2B70C50
    void NetworkReceiveDone();
    // protected System.Void NoSimulation()
    // Offset: 0x2B70C54
    void NoSimulation();
    // protected System.Int32 BeforeSimulation()
    // Offset: 0x2B70C58
    int BeforeSimulation();
    // protected System.Void BeforeTick()
    // Offset: 0x2B70C60
    void BeforeTick();
    // protected System.Void AfterTick()
    // Offset: 0x2B70C64
    void AfterTick();
    // protected System.Void AfterSimulation()
    // Offset: 0x2B70C68
    void AfterSimulation();
    // System.Void SinglePlayerSetPaused(System.Boolean paused)
    // Offset: 0x2B70C6C
    void SinglePlayerSetPaused(bool paused);
    // System.Void AreaOfInterestQueryAdded(Fusion.PlayerRef player, Fusion.SimulationPlayer/AOIQuery query)
    // Offset: 0x2B70CFC
    void AreaOfInterestQueryAdded(::Fusion::PlayerRef player, ::Fusion::SimulationPlayer::AOIQuery query);
    // Fusion.NetworkObjectHeader* AllocateObject(Fusion.NetworkId id, Fusion.NetworkPrefabId type, System.Int32 wordCount, out System.Int32* groups, System.Nullable`1<Fusion.NetworkId> nestingRoot, System.Nullable`1<Fusion.NetworkObjectNestingKey> nestingKey)
    // Offset: 0x2B70D00
    ::Fusion::NetworkObjectHeader* AllocateObject(::Fusion::NetworkId id, ::Fusion::NetworkPrefabId type, int wordCount, ByRef<int*> groups, ::System::Nullable_1<::Fusion::NetworkId> nestingRoot, ::System::Nullable_1<::Fusion::NetworkObjectNestingKey> nestingKey);
    // System.Void RequestStateAuthority(Fusion.NetworkId id, System.Boolean wants)
    // Offset: 0x2B70DB0
    void RequestStateAuthority(::Fusion::NetworkId id, bool wants);
    // System.Void SetPlayerAlwaysInterested(Fusion.PlayerRef player, Fusion.NetworkId id, System.Boolean alwaysInterested)
    // Offset: 0x2B70E48
    void SetPlayerAlwaysInterested(::Fusion::PlayerRef player, ::Fusion::NetworkId id, bool alwaysInterested);
    // System.Void AddPlayerAreaOfInterest(Fusion.PlayerRef player, UnityEngine.Vector3 position, System.Single extent, System.Int32 layerMask)
    // Offset: 0x2B70F7C
    void AddPlayerAreaOfInterest(::Fusion::PlayerRef player, ::UnityEngine::Vector3 position, float extent, int layerMask);
    // System.Void TempFree(System.Void* ptr)
    // Offset: 0x2B71104
    void TempFree(void* ptr);
    // System.Void* TempAlloc(System.Int32 size)
    // Offset: 0x2B7117C
    void* TempAlloc(int size);
    // System.Void* TempAllocNoClear(System.Int32 size)
    // Offset: 0x2B711C4
    void* TempAllocNoClear(int size);
    // T* TempAlloc()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T* TempAlloc() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::TempAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TempAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T*, false>(this, ___generic__method);
    }
    // T* TempAllocArray(System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T* TempAllocArray(int length) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::TempAllocArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TempAllocArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T*, false>(this, ___generic__method, length);
    }
    // T* TempDoubleArray(T* oldArray, System.Int32 oldLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T* TempDoubleArray(T* oldArray, int oldLength) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::TempDoubleArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TempDoubleArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldArray), ::il2cpp_utils::ExtractType(oldLength)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T*, false>(this, ___generic__method, oldArray, oldLength);
    }
    // System.Void ShutdownNativeSocket()
    // Offset: 0x2B7120C
    void ShutdownNativeSocket();
    // System.Void Dispose()
    // Offset: 0x2B71354
    void Dispose();
    // System.Void Destroy(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    // Offset: 0x2B715DC
    void Destroy(::Fusion::NetworkId id, ::Fusion::NetworkObjectDestroyFlags flags);
    // System.Boolean PlayerValid(Fusion.PlayerRef player)
    // Offset: 0x2B71604
    bool PlayerValid(::Fusion::PlayerRef player);
    // System.Boolean PlayerActive(Fusion.PlayerRef player)
    // Offset: 0x2B71638
    bool PlayerActive(::Fusion::PlayerRef player);
    // System.Byte[] GetPlayerConnectionToken(Fusion.PlayerRef player)
    // Offset: 0x2B71724
    ::ArrayW<uint8_t> GetPlayerConnectionToken(::Fusion::PlayerRef player);
    // Fusion.Sockets.NetAddress GetPlayerAddress(Fusion.PlayerRef player)
    // Offset: 0x2B71828
    ::Fusion::Sockets::NetAddress GetPlayerAddress(::Fusion::PlayerRef player);
    // System.Int64 GetPlayerUniqueId(Fusion.PlayerRef player)
    // Offset: 0x2B718BC
    int64_t GetPlayerUniqueId(::Fusion::PlayerRef player);
    // public Fusion.SimulationInput GetInputForPlayer(System.Int32 player)
    // Offset: 0x2B71944
    ::Fusion::SimulationInput* GetInputForPlayer(int player);
    // public Fusion.SimulationInput GetInputByIndex(System.Int32 index)
    // Offset: 0x2B71960
    ::Fusion::SimulationInput* GetInputByIndex(int index);
    // Fusion.NetworkId GetPlayerObjectId(Fusion.PlayerRef player)
    // Offset: 0x2B7197C
    ::Fusion::NetworkId GetPlayerObjectId(::Fusion::PlayerRef player);
    // System.Nullable`1<System.Int32> GetPlayerActorId(Fusion.PlayerRef player)
    // Offset: 0x2B71A0C
    ::System::Nullable_1<int> GetPlayerActorId(::Fusion::PlayerRef player);
    // System.Void SetPlayerObjectId(Fusion.PlayerRef player, Fusion.NetworkId id)
    // Offset: 0x2B71B3C
    void SetPlayerObjectId(::Fusion::PlayerRef player, ::Fusion::NetworkId id);
    // private System.UInt32* GetPlayerObjectIdTable()
    // Offset: 0x2B719A4
    uint* GetPlayerObjectIdTable();
    // private System.Int32* GetPlayerActorIdTable()
    // Offset: 0x2B71AC0
    int* GetPlayerActorIdTable();
    // public System.Boolean HasAnyActiveConnections()
    // Offset: 0x2B71C7C
    bool HasAnyActiveConnections();
    // private System.Void InvokeOnBeforeAllTicks(System.Boolean resimulation, System.Int32 ticks)
    // Offset: 0x2B71CD0
    void InvokeOnBeforeAllTicks(bool resimulation, int ticks);
    // private System.Void InvokeOnAfterAllTicks(System.Boolean resimulation, System.Int32 ticks)
    // Offset: 0x2B71E5C
    void InvokeOnAfterAllTicks(bool resimulation, int ticks);
    // public System.Int32 Update(System.Double dt)
    // Offset: 0x2B71FE8
    int Update(double dt);
    // private Fusion.SimulationPlayer GetSimulationPlayer(Fusion.PlayerRef player)
    // Offset: 0x2B72B44
    ::Fusion::SimulationPlayer* GetSimulationPlayer(::Fusion::PlayerRef player);
    // private System.Void UpdateAreaOfInterest()
    // Offset: 0x2B72B78
    void UpdateAreaOfInterest();
    // private System.Void PreparePackets()
    // Offset: 0x2B726AC
    void PreparePackets();
    // System.Void UpdateRemotePrefabs()
    // Offset: 0x2B73BC4
    void UpdateRemotePrefabs();
    // private System.Void InvokeTick(Fusion.SimulationStages stage, System.Boolean releaseAllInputs)
    // Offset: 0x2B70610
    void InvokeTick(::Fusion::SimulationStages stage, bool releaseAllInputs);
    // private Fusion.SimulationMessageInternalTypes GetMessageInternalType(Fusion.SimulationMessage* message)
    // Offset: 0x2B74064
    ::Fusion::SimulationMessageInternalTypes GetMessageInternalType(::Fusion::SimulationMessage* message);
    // private System.Void* GetMessageInternalData(Fusion.SimulationMessage* message)
    // Offset: 0x2B7406C
    void* GetMessageInternalData(::Fusion::SimulationMessage* message);
    // private T GetMessageInternalData(Fusion.SimulationMessage* message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetMessageInternalData(::Fusion::SimulationMessage* message) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::GetMessageInternalData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMessageInternalData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, message);
    }
    // private System.Void OnMessageInternal(Fusion.SimulationMessage* message)
    // Offset: 0x2B74074
    void OnMessageInternal(::Fusion::SimulationMessage* message);
    // private System.Void DeliverMessages(System.Int32 tick)
    // Offset: 0x2B73DB4
    void DeliverMessages(int tick);
    // private System.Void FreeMessages(ref Fusion.SimulationMessageList list)
    // Offset: 0x2B740EC
    void FreeMessages(ByRef<::Fusion::SimulationMessageList> list);
    // private System.Int32 ConsumeAndWriteMessagesIntoBuffer(ref Fusion.SimulationMessageList inList, Fusion.Sockets.NetBitBuffer* buffer, System.Int32 bitCapacity, ref Fusion.SimulationMessageList outList, System.Boolean allowFirstMessageOverflow)
    // Offset: 0x2B73840
    int ConsumeAndWriteMessagesIntoBuffer(ByRef<::Fusion::SimulationMessageList> inList, ::Fusion::Sockets::NetBitBuffer* buffer, int bitCapacity, ByRef<::Fusion::SimulationMessageList> outList, bool allowFirstMessageOverflow);
    // private System.Void ResolveMessageSourceAndTarget(Fusion.SimulationMessage* msg, Fusion.PlayerRef sourcePlayer)
    // Offset: 0x2B74148
    void ResolveMessageSourceAndTarget(::Fusion::SimulationMessage* msg, ::Fusion::PlayerRef sourcePlayer);
    // private System.Void ReadMessagesFromBuffer(Fusion.Sockets.NetBitBuffer* buffer, System.UInt64 minSequence, Fusion.PlayerRef sourcePlayer, ref Fusion.SimulationMessageList outList)
    // Offset: 0x2B741A0
    void ReadMessagesFromBuffer(::Fusion::Sockets::NetBitBuffer* buffer, uint64_t minSequence, ::Fusion::PlayerRef sourcePlayer, ByRef<::Fusion::SimulationMessageList> outList);
    // private Fusion.SimulationSnapshot FindSnapshot(Fusion.Tick tick, System.Boolean defaultToRoot)
    // Offset: 0x2B74330
    ::Fusion::SimulationSnapshot* FindSnapshot(::Fusion::Tick tick, bool defaultToRoot);
    // private Fusion.SimulationConnection GetSimulationConnectionByIndex(System.Int32 index)
    // Offset: 0x2B744EC
    ::Fusion::SimulationConnection* GetSimulationConnectionByIndex(int index);
    // private Fusion.SimulationConnection GetSimulationConnection(Fusion.Sockets.NetConnection* c)
    // Offset: 0x2B74548
    ::Fusion::SimulationConnection* GetSimulationConnection(::Fusion::Sockets::NetConnection* c);
    // public System.Void SetActiveScene(Fusion.SceneRef scene)
    // Offset: 0x2B74598
    void SetActiveScene(::Fusion::SceneRef scene);
    // System.Void AddToGlobalObjectInterest(Fusion.NetworkId id)
    // Offset: 0x2B746AC
    void AddToGlobalObjectInterest(::Fusion::NetworkId id);
    // System.Void RemoveFromGlobalObjectInterest(Fusion.NetworkId id)
    // Offset: 0x2B74750
    void RemoveFromGlobalObjectInterest(::Fusion::NetworkId id);
    // public System.Void SendReliableData(System.Int32 connection, System.Int32 key, System.Byte[] data)
    // Offset: 0x2B74768
    void SendReliableData(int connection, int key, ::ArrayW<uint8_t> data);
    // System.Void NotifyWaitingForShutdown()
    // Offset: 0x2B7481C
    void NotifyWaitingForShutdown();
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B74828
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // static public Fusion.Simulation/IDeltaCompressor GetDefaultDeltaCompressor()
    // Offset: 0x2B74920
    static ::Fusion::Simulation::IDeltaCompressor* GetDefaultDeltaCompressor();
    // static public Fusion.Simulation/IDeltaCompressor GetDebugDeltaCompressor()
    // Offset: 0x2B7497C
    static ::Fusion::Simulation::IDeltaCompressor* GetDebugDeltaCompressor();
    // private System.Void NetworkInit(Fusion.Sockets.INetSocket socket, Fusion.Sockets.NetAddress address)
    // Offset: 0x2B6FDAC
    void NetworkInit(::Fusion::Sockets::INetSocket* socket, ::Fusion::Sockets::NetAddress address);
    // private System.Void NetworkSend()
    // Offset: 0x2B72AD0
    void NetworkSend();
    // private System.Void NetworkRecv()
    // Offset: 0x2B725AC
    void NetworkRecv();
    // private System.Void NetworkShutdown()
    // Offset: 0x2B7121C
    void NetworkShutdown();
    // System.Void OnNetworkShutdown()
    // Offset: 0x2B749D8
    void OnNetworkShutdown();
    // private System.Boolean NetworkGetBuffer(Fusion.Sockets.NetConnection* connection, out Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B73820
    bool NetworkGetBuffer(::Fusion::Sockets::NetConnection* connection, ByRef<::Fusion::Sockets::NetBitBuffer*> buffer);
    // private System.Boolean NetworkSendBuffer(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B73B30
    bool NetworkSendBuffer(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // System.Boolean NetworkSendPing(Fusion.Sockets.NetAddress address, System.Void* data, System.Int32 length)
    // Offset: 0x2B749DC
    bool NetworkSendPing(::Fusion::Sockets::NetAddress address, void* data, int length);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionAttempt(Fusion.Sockets.NetConnection* connection, System.Int32 attempt, System.Int32 totalConnectionAttempts)
    // Offset: 0x2B74A44
    void Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionAttempt(::Fusion::Sockets::NetConnection* connection, int attempt, int totalConnectionAttempts);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnUnconnectedData(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B74B78
    void Fusion_Sockets_INetPeerGroupCallbacks_OnUnconnectedData(::Fusion::Sockets::NetBitBuffer* buffer);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnConnected(Fusion.Sockets.NetConnection* connection)
    // Offset: 0x2B74B7C
    void Fusion_Sockets_INetPeerGroupCallbacks_OnConnected(::Fusion::Sockets::NetConnection* connection);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnDisconnected(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetDisconnectReason reason)
    // Offset: 0x2B74E24
    void Fusion_Sockets_INetPeerGroupCallbacks_OnDisconnected(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetDisconnectReason reason);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnReliableData(Fusion.Sockets.NetConnection* connection, System.Int32 key, System.Byte* data, System.Int32 length)
    // Offset: 0x2B74FEC
    void Fusion_Sockets_INetPeerGroupCallbacks_OnReliableData(::Fusion::Sockets::NetConnection* connection, int key, uint8_t* data, int length);
    // private System.Boolean Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionRequest(Fusion.Sockets.NetAddress remoteAddres, System.Byte[] token)
    // Offset: 0x2B75260
    bool Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionRequest(::Fusion::Sockets::NetAddress remoteAddres, ::ArrayW<uint8_t> token);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionFailed(Fusion.Sockets.NetAddress address, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0x2B75380
    void Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionFailed(::Fusion::Sockets::NetAddress address, ::Fusion::Sockets::NetConnectFailedReason reason);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnUnreliableData(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B75544
    void Fusion_Sockets_INetPeerGroupCallbacks_OnUnreliableData(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyData(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B75588
    void Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyData(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer);
    // private System.Void OnEnvelopeLost(Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B75738
    void OnEnvelopeLost(::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope);
    // private System.Void OnEnvelopeDelivered(Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B75838
    void OnEnvelopeDelivered(::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDispose(Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0x2B7592C
    void Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDispose(::Fusion::Sockets::NetSendEnvelope envelope);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyLost(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0x2B75988
    void Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyLost(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetSendEnvelope envelope);
    // private System.Void Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDelivered(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetSendEnvelope envelope)
    // Offset: 0x2B759B4
    void Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDelivered(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetSendEnvelope envelope);
    // Fusion.RpcTargetStatus GetRpcTargetStatus(Fusion.PlayerRef target)
    // Offset: 0x2B759E0
    ::Fusion::RpcTargetStatus GetRpcTargetStatus(::Fusion::PlayerRef target);
    // Fusion.RpcSendMessageResult SendMessage(Fusion.SimulationMessage* message, Fusion.PlayerRefSet* clientsSent, Fusion.PlayerRefSet* clientsCulled)
    // Offset: 0x2B75A8C
    ::Fusion::RpcSendMessageResult SendMessage(::Fusion::SimulationMessage* message, ::Fusion::PlayerRefSet* clientsSent, ::Fusion::PlayerRefSet* clientsCulled);
    // System.Boolean ForwardMessage(Fusion.SimulationMessage* message, Fusion.PlayerRef target, System.Boolean required)
    // Offset: 0x2B76348
    bool ForwardMessage(::Fusion::SimulationMessage* message, ::Fusion::PlayerRef target, bool required);
    // Fusion.NetworkId GetMessageTargetObjectIdForVerification(Fusion.SimulationMessage* message)
    // Offset: 0x2B760C0
    ::Fusion::NetworkId GetMessageTargetObjectIdForVerification(::Fusion::SimulationMessage* message);
    // System.Void SendInternalSimulationMessage(Fusion.SimulationMessageInternalTypes type, T buffer, System.Nullable`1<Fusion.PlayerRef> target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SendInternalSimulationMessage(::Fusion::SimulationMessageInternalTypes type, T buffer, ::System::Nullable_1<::Fusion::PlayerRef> target) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::SendInternalSimulationMessage");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInternalSimulationMessage", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(target)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, type, buffer, target);
    }
    // System.Void SendInternalSimulationMessage(Fusion.SimulationMessageInternalTypes type, System.Void* buffer, System.Int32 bufferLength, System.Nullable`1<Fusion.PlayerRef> target)
    // Offset: 0x2B76430
    void SendInternalSimulationMessage(::Fusion::SimulationMessageInternalTypes type, void* buffer, int bufferLength, ::System::Nullable_1<::Fusion::PlayerRef> target);
    // private System.Boolean VerifyMessageTargetObject(Fusion.Sockets.NetConnection* netConnection, Fusion.NetworkId id, out Fusion.Simulation/TargetObjectVerificationResult result)
    // Offset: 0x2B760FC
    bool VerifyMessageTargetObject(::Fusion::Sockets::NetConnection* netConnection, ::Fusion::NetworkId id, ByRef<::Fusion::Simulation::TargetObjectVerificationResult> result);
    // private System.Void SendMessageInternal(Fusion.SimulationMessage* message, Fusion.Sockets.NetConnection* netConnection)
    // Offset: 0x2B762A8
    void SendMessageInternal(::Fusion::SimulationMessage* message, ::Fusion::Sockets::NetConnection* netConnection);
    // static Fusion.RpcSendMessageResult <SendMessage>g__VerifyResultToSendMessageResult|227_0(Fusion.Simulation/TargetObjectVerificationResult status)
    // Offset: 0x2B7623C
    static ::Fusion::RpcSendMessageResult $SendMessage$g__VerifyResultToSendMessageResult_227_0(::Fusion::Simulation::TargetObjectVerificationResult status);
  }; // Fusion.Simulation
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::get_IsShutdown
// Il2CppName: get_IsShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsResimulation
// Il2CppName: get_IsResimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsResimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsResimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsLastTick
// Il2CppName: get_IsLastTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsLastTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsLastTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsFirstTick
// Il2CppName: get_IsFirstTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsFirstTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsFirstTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsForward
// Il2CppName: get_IsForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsForward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsLocalPlayerFirstExecution
// Il2CppName: get_IsLocalPlayerFirstExecution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsLocalPlayerFirstExecution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsLocalPlayerFirstExecution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_StatePrevious
// Il2CppName: get_StatePrevious
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_StatePrevious)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_StatePrevious", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_StateAlpha
// Il2CppName: get_StateAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Simulation::*)()>(&Fusion::Simulation::get_StateAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_StateAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_StateResume
// Il2CppName: get_StateResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_StateResume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_StateResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Tick
// Il2CppName: get_Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_InputCount
// Il2CppName: get_InputCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::*)()>(&Fusion::Simulation::get_InputCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_InputCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_MaxConnections
// Il2CppName: get_MaxConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::*)()>(&Fusion::Simulation::get_MaxConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_MaxConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Topology
// Il2CppName: get_Topology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConfig::Topologies (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Topology)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Topology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_SnapshotHistory
// Il2CppName: get_SnapshotHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot::IHistory* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_SnapshotHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_SnapshotHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Mode
// Il2CppName: get_Mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationModes (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationStages (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConfig* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_ProjectConfig
// Il2CppName: get_ProjectConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_ProjectConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_ProjectConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_DeltaTime
// Il2CppName: get_DeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Simulation::*)()>(&Fusion::Simulation::get_DeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_DeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_InterpTo
// Il2CppName: get_InterpTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_InterpTo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_InterpTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_InterpFrom
// Il2CppName: get_InterpFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_InterpFrom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_InterpFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_InterpAlpha
// Il2CppName: get_InterpAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Simulation::*)()>(&Fusion::Simulation::get_InterpAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_InterpAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsClient
// Il2CppName: get_IsClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsServer
// Il2CppName: get_IsServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsPlayer
// Il2CppName: get_IsPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsSinglePlayer
// Il2CppName: get_IsSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsSinglePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsMasterClient
// Il2CppName: get_IsMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_ActivePlayers
// Il2CppName: get_ActivePlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Fusion::PlayerRef>* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_ActivePlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_ActivePlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Replicator
// Il2CppName: get_Replicator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::StateReplicator* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Replicator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Replicator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_Callbacks
// Il2CppName: get_Callbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::ICallbacks* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_Callbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_Callbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsResume
// Il2CppName: get_IsResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsResume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsInTick
// Il2CppName: get_IsInTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsInTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsInTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_IsPaused
// Il2CppName: get_IsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::get_IsPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_IsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_LocalAddress
// Il2CppName: get_LocalAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Simulation::*)()>(&Fusion::Simulation::get_LocalAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_LocalAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_NetConfigPointer
// Il2CppName: get_NetConfigPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetConfig* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_NetConfigPointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_NetConfigPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_LocalPlayer
// Il2CppName: get_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::Simulation::*)()>(&Fusion::Simulation::get_LocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::get_LatestServerState
// Il2CppName: get_LatestServerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)()>(&Fusion::Simulation::get_LatestServerState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "get_LatestServerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerRtt
// Il2CppName: GetPlayerRtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerRtt)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerRtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::RecvPacket
// Il2CppName: RecvPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::RecvPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "RecvPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SendPacket
// Il2CppName: SendPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::SendPacket)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SendPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetInput
// Il2CppName: GetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::Simulation::*)(::Fusion::Tick, ::Fusion::PlayerRef)>(&Fusion::Simulation::GetInput)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::CalculateUpdateTime
// Il2CppName: CalculateUpdateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::CalculateUpdateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "CalculateUpdateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StepDeltaInit
// Il2CppName: StepDeltaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(int)>(&Fusion::Simulation::StepDeltaInit)> {
  static const MethodInfo* get() {
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "StepDeltaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplier});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StepSimulation
// Il2CppName: StepSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationStages, bool, bool, bool)>(&Fusion::Simulation::StepSimulation)> {
  static const MethodInfo* get() {
    static auto* stage = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationStages")->byval_arg;
    static auto* lastTick = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* firstTick = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* freeInput = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "StepSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stage, lastTick, firstTick, freeInput});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::OnPlayerJoinedLeftInternalMessage
// Il2CppName: OnPlayerJoinedLeftInternalMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::PlayerRef, bool)>(&Fusion::Simulation::OnPlayerJoinedLeftInternalMessage)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* joined = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "OnPlayerJoinedLeftInternalMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, joined});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AfterUpdate
// Il2CppName: AfterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::AfterUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AfterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkConnected
// Il2CppName: NetworkConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::NetworkConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkDisconnected
// Il2CppName: NetworkDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::NetworkDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkReceiveDone
// Il2CppName: NetworkReceiveDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NetworkReceiveDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkReceiveDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NoSimulation
// Il2CppName: NoSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NoSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NoSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::BeforeSimulation
// Il2CppName: BeforeSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::*)()>(&Fusion::Simulation::BeforeSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "BeforeSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::BeforeTick
// Il2CppName: BeforeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::BeforeTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "BeforeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AfterTick
// Il2CppName: AfterTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::AfterTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AfterTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AfterSimulation
// Il2CppName: AfterSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::AfterSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AfterSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SinglePlayerSetPaused
// Il2CppName: SinglePlayerSetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(bool)>(&Fusion::Simulation::SinglePlayerSetPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SinglePlayerSetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AreaOfInterestQueryAdded
// Il2CppName: AreaOfInterestQueryAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::PlayerRef, ::Fusion::SimulationPlayer::AOIQuery)>(&Fusion::Simulation::AreaOfInterestQueryAdded)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* query = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationPlayer/AOIQuery")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AreaOfInterestQueryAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, query});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AllocateObject
// Il2CppName: AllocateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::Simulation::*)(::Fusion::NetworkId, ::Fusion::NetworkPrefabId, int, ByRef<int*>, ::System::Nullable_1<::Fusion::NetworkId>, ::System::Nullable_1<::Fusion::NetworkObjectNestingKey>)>(&Fusion::Simulation::AllocateObject)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groups = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    static auto* nestingRoot = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")})->byval_arg;
    static auto* nestingKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectNestingKey")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AllocateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, type, wordCount, groups, nestingRoot, nestingKey});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::RequestStateAuthority
// Il2CppName: RequestStateAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::NetworkId, bool)>(&Fusion::Simulation::RequestStateAuthority)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* wants = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "RequestStateAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, wants});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SetPlayerAlwaysInterested
// Il2CppName: SetPlayerAlwaysInterested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::PlayerRef, ::Fusion::NetworkId, bool)>(&Fusion::Simulation::SetPlayerAlwaysInterested)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* alwaysInterested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SetPlayerAlwaysInterested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, id, alwaysInterested});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AddPlayerAreaOfInterest
// Il2CppName: AddPlayerAreaOfInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::PlayerRef, ::UnityEngine::Vector3, float, int)>(&Fusion::Simulation::AddPlayerAreaOfInterest)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* extent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AddPlayerAreaOfInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, position, extent, layerMask});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::TempFree
// Il2CppName: TempFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(void*)>(&Fusion::Simulation::TempFree)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "TempFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::TempAlloc
// Il2CppName: TempAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (Fusion::Simulation::*)(int)>(&Fusion::Simulation::TempAlloc)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "TempAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::TempAllocNoClear
// Il2CppName: TempAllocNoClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (Fusion::Simulation::*)(int)>(&Fusion::Simulation::TempAllocNoClear)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "TempAllocNoClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::TempAlloc
// Il2CppName: TempAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Simulation::TempAllocArray
// Il2CppName: TempAllocArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Simulation::TempDoubleArray
// Il2CppName: TempDoubleArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Simulation::ShutdownNativeSocket
// Il2CppName: ShutdownNativeSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::ShutdownNativeSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "ShutdownNativeSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::NetworkId, ::Fusion::NetworkObjectDestroyFlags)>(&Fusion::Simulation::Destroy)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectDestroyFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, flags});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::PlayerValid
// Il2CppName: PlayerValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::PlayerValid)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "PlayerValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::PlayerActive
// Il2CppName: PlayerActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::PlayerActive)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "PlayerActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerConnectionToken
// Il2CppName: GetPlayerConnectionToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerConnectionToken)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerConnectionToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerAddress
// Il2CppName: GetPlayerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::NetAddress (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerAddress)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerUniqueId
// Il2CppName: GetPlayerUniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerUniqueId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerUniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetInputForPlayer
// Il2CppName: GetInputForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::Simulation::*)(int)>(&Fusion::Simulation::GetInputForPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetInputForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetInputByIndex
// Il2CppName: GetInputByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::Simulation::*)(int)>(&Fusion::Simulation::GetInputByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetInputByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerObjectId
// Il2CppName: GetPlayerObjectId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerObjectId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerObjectId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerActorId
// Il2CppName: GetPlayerActorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetPlayerActorId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerActorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SetPlayerObjectId
// Il2CppName: SetPlayerObjectId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::PlayerRef, ::Fusion::NetworkId)>(&Fusion::Simulation::SetPlayerObjectId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SetPlayerObjectId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerObjectIdTable
// Il2CppName: GetPlayerObjectIdTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint* (Fusion::Simulation::*)()>(&Fusion::Simulation::GetPlayerObjectIdTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerObjectIdTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetPlayerActorIdTable
// Il2CppName: GetPlayerActorIdTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int* (Fusion::Simulation::*)()>(&Fusion::Simulation::GetPlayerActorIdTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetPlayerActorIdTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::HasAnyActiveConnections
// Il2CppName: HasAnyActiveConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)()>(&Fusion::Simulation::HasAnyActiveConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "HasAnyActiveConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::InvokeOnBeforeAllTicks
// Il2CppName: InvokeOnBeforeAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(bool, int)>(&Fusion::Simulation::InvokeOnBeforeAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "InvokeOnBeforeAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, ticks});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::InvokeOnAfterAllTicks
// Il2CppName: InvokeOnAfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(bool, int)>(&Fusion::Simulation::InvokeOnAfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "InvokeOnAfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, ticks});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::*)(double)>(&Fusion::Simulation::Update)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetSimulationPlayer
// Il2CppName: GetSimulationPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationPlayer* (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetSimulationPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetSimulationPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::UpdateAreaOfInterest
// Il2CppName: UpdateAreaOfInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::UpdateAreaOfInterest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "UpdateAreaOfInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::PreparePackets
// Il2CppName: PreparePackets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::PreparePackets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "PreparePackets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::UpdateRemotePrefabs
// Il2CppName: UpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::UpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "UpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::InvokeTick
// Il2CppName: InvokeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationStages, bool)>(&Fusion::Simulation::InvokeTick)> {
  static const MethodInfo* get() {
    static auto* stage = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationStages")->byval_arg;
    static auto* releaseAllInputs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "InvokeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stage, releaseAllInputs});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetMessageInternalType
// Il2CppName: GetMessageInternalType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationMessageInternalTypes (Fusion::Simulation::*)(::Fusion::SimulationMessage*)>(&Fusion::Simulation::GetMessageInternalType)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetMessageInternalType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetMessageInternalData
// Il2CppName: GetMessageInternalData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (Fusion::Simulation::*)(::Fusion::SimulationMessage*)>(&Fusion::Simulation::GetMessageInternalData)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetMessageInternalData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetMessageInternalData
// Il2CppName: GetMessageInternalData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Simulation::OnMessageInternal
// Il2CppName: OnMessageInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationMessage*)>(&Fusion::Simulation::OnMessageInternal)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "OnMessageInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::DeliverMessages
// Il2CppName: DeliverMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(int)>(&Fusion::Simulation::DeliverMessages)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "DeliverMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::FreeMessages
// Il2CppName: FreeMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(ByRef<::Fusion::SimulationMessageList>)>(&Fusion::Simulation::FreeMessages)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageList")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "FreeMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ConsumeAndWriteMessagesIntoBuffer
// Il2CppName: ConsumeAndWriteMessagesIntoBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::*)(ByRef<::Fusion::SimulationMessageList>, ::Fusion::Sockets::NetBitBuffer*, int, ByRef<::Fusion::SimulationMessageList>, bool)>(&Fusion::Simulation::ConsumeAndWriteMessagesIntoBuffer)> {
  static const MethodInfo* get() {
    static auto* inList = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageList")->this_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* bitCapacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outList = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageList")->this_arg;
    static auto* allowFirstMessageOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "ConsumeAndWriteMessagesIntoBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inList, buffer, bitCapacity, outList, allowFirstMessageOverflow});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ResolveMessageSourceAndTarget
// Il2CppName: ResolveMessageSourceAndTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationMessage*, ::Fusion::PlayerRef)>(&Fusion::Simulation::ResolveMessageSourceAndTarget)> {
  static const MethodInfo* get() {
    static auto* msg = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* sourcePlayer = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "ResolveMessageSourceAndTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, sourcePlayer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ReadMessagesFromBuffer
// Il2CppName: ReadMessagesFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetBitBuffer*, uint64_t, ::Fusion::PlayerRef, ByRef<::Fusion::SimulationMessageList>)>(&Fusion::Simulation::ReadMessagesFromBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* minSequence = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* sourcePlayer = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* outList = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageList")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "ReadMessagesFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, minSequence, sourcePlayer, outList});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::FindSnapshot
// Il2CppName: FindSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::Simulation::*)(::Fusion::Tick, bool)>(&Fusion::Simulation::FindSnapshot)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("Fusion", "Tick")->byval_arg;
    static auto* defaultToRoot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "FindSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, defaultToRoot});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetSimulationConnectionByIndex
// Il2CppName: GetSimulationConnectionByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConnection* (Fusion::Simulation::*)(int)>(&Fusion::Simulation::GetSimulationConnectionByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetSimulationConnectionByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetSimulationConnection
// Il2CppName: GetSimulationConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConnection* (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::GetSimulationConnection)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetSimulationConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SetActiveScene
// Il2CppName: SetActiveScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SceneRef)>(&Fusion::Simulation::SetActiveScene)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SetActiveScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::AddToGlobalObjectInterest
// Il2CppName: AddToGlobalObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::NetworkId)>(&Fusion::Simulation::AddToGlobalObjectInterest)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "AddToGlobalObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::RemoveFromGlobalObjectInterest
// Il2CppName: RemoveFromGlobalObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::NetworkId)>(&Fusion::Simulation::RemoveFromGlobalObjectInterest)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "RemoveFromGlobalObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SendReliableData
// Il2CppName: SendReliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(int, int, ::ArrayW<uint8_t>)>(&Fusion::Simulation::SendReliableData)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SendReliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, key, data});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NotifyWaitingForShutdown
// Il2CppName: NotifyWaitingForShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NotifyWaitingForShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NotifyWaitingForShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::Simulation::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetDefaultDeltaCompressor
// Il2CppName: GetDefaultDeltaCompressor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::IDeltaCompressor* (*)()>(&Fusion::Simulation::GetDefaultDeltaCompressor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetDefaultDeltaCompressor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetDebugDeltaCompressor
// Il2CppName: GetDebugDeltaCompressor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::IDeltaCompressor* (*)()>(&Fusion::Simulation::GetDebugDeltaCompressor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetDebugDeltaCompressor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkInit
// Il2CppName: NetworkInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::INetSocket*, ::Fusion::Sockets::NetAddress)>(&Fusion::Simulation::NetworkInit)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "INetSocket")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, address});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkSend
// Il2CppName: NetworkSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NetworkSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkRecv
// Il2CppName: NetworkRecv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NetworkRecv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkRecv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkShutdown
// Il2CppName: NetworkShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::NetworkShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::OnNetworkShutdown
// Il2CppName: OnNetworkShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)()>(&Fusion::Simulation::OnNetworkShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "OnNetworkShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkGetBuffer
// Il2CppName: NetworkGetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ByRef<::Fusion::Sockets::NetBitBuffer*>)>(&Fusion::Simulation::NetworkGetBuffer)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkGetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkSendBuffer
// Il2CppName: NetworkSendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::NetworkSendBuffer)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkSendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::NetworkSendPing
// Il2CppName: NetworkSendPing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::Sockets::NetAddress, void*, int)>(&Fusion::Simulation::NetworkSendPing)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "NetworkSendPing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, data, length});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionAttempt
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, int, int)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionAttempt)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* attempt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* totalConnectionAttempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, attempt, totalConnectionAttempts});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnUnconnectedData
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnUnconnectedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnUnconnectedData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnUnconnectedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnected
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnDisconnected
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetDisconnectReason)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetDisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnReliableData
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnReliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, int, uint8_t*, int)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnReliableData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnReliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, key, data, length});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionRequest
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* remoteAddres = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddres, token});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionFailed
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, reason});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnUnreliableData
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnUnreliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnUnreliableData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnUnreliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyData
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyData)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::OnEnvelopeLost
// Il2CppName: OnEnvelopeLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::OnEnvelopeLost)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "OnEnvelopeLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::OnEnvelopeDelivered
// Il2CppName: OnEnvelopeDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::OnEnvelopeDelivered)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "OnEnvelopeDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDispose
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDispose)> {
  static const MethodInfo* get() {
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyLost
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyLost)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDelivered
// Il2CppName: Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetSendEnvelope)>(&Fusion::Simulation::Fusion_Sockets_INetPeerGroupCallbacks_OnNotifyDelivered)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetSendEnvelope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "Fusion.Sockets.INetPeerGroupCallbacks.OnNotifyDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetRpcTargetStatus
// Il2CppName: GetRpcTargetStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcTargetStatus (Fusion::Simulation::*)(::Fusion::PlayerRef)>(&Fusion::Simulation::GetRpcTargetStatus)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetRpcTargetStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcSendMessageResult (Fusion::Simulation::*)(::Fusion::SimulationMessage*, ::Fusion::PlayerRefSet*, ::Fusion::PlayerRefSet*)>(&Fusion::Simulation::SendMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* clientsSent = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "PlayerRefSet"))->byval_arg;
    static auto* clientsCulled = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "PlayerRefSet"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, clientsSent, clientsCulled});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::ForwardMessage
// Il2CppName: ForwardMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::SimulationMessage*, ::Fusion::PlayerRef, bool)>(&Fusion::Simulation::ForwardMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* required = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "ForwardMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, target, required});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::GetMessageTargetObjectIdForVerification
// Il2CppName: GetMessageTargetObjectIdForVerification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::Simulation::*)(::Fusion::SimulationMessage*)>(&Fusion::Simulation::GetMessageTargetObjectIdForVerification)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "GetMessageTargetObjectIdForVerification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SendInternalSimulationMessage
// Il2CppName: SendInternalSimulationMessage
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Simulation::SendInternalSimulationMessage
// Il2CppName: SendInternalSimulationMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationMessageInternalTypes, void*, int, ::System::Nullable_1<::Fusion::PlayerRef>)>(&Fusion::Simulation::SendInternalSimulationMessage)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessageInternalTypes")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SendInternalSimulationMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, buffer, bufferLength, target});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::VerifyMessageTargetObject
// Il2CppName: VerifyMessageTargetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::*)(::Fusion::Sockets::NetConnection*, ::Fusion::NetworkId, ByRef<::Fusion::Simulation::TargetObjectVerificationResult>)>(&Fusion::Simulation::VerifyMessageTargetObject)> {
  static const MethodInfo* get() {
    static auto* netConnection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/TargetObjectVerificationResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "VerifyMessageTargetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netConnection, id, result});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::SendMessageInternal
// Il2CppName: SendMessageInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::*)(::Fusion::SimulationMessage*, ::Fusion::Sockets::NetConnection*)>(&Fusion::Simulation::SendMessageInternal)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* netConnection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "SendMessageInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, netConnection});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::$SendMessage$g__VerifyResultToSendMessageResult_227_0
// Il2CppName: <SendMessage>g__VerifyResultToSendMessageResult|227_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcSendMessageResult (*)(::Fusion::Simulation::TargetObjectVerificationResult)>(&Fusion::Simulation::$SendMessage$g__VerifyResultToSendMessageResult_227_0)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/TargetObjectVerificationResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation*), "<SendMessage>g__VerifyResultToSendMessageResult|227_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
