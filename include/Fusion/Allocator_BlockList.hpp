// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Allocator
#include "Fusion/Allocator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Ptr
#include "Fusion/Ptr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Allocator::BlockList, "Fusion", "Allocator/BlockList");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Allocator/BlockList
  // [TokenAttribute] Offset: FFFFFFFF
  struct Allocator::BlockList/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Ptr Head
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Ptr Head;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public Fusion.Ptr Tail
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::Ptr Tail;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    public:
    // Creating value type constructor for type: BlockList
    constexpr BlockList(::Fusion::Ptr Head_ = {}, ::Fusion::Ptr Tail_ = {}) noexcept : Head{Head_}, Tail{Tail_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 8;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion.Ptr Head
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Head();
    // Get instance field reference: public Fusion.Ptr Tail
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Tail();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x2AFDAFC
    bool get_IsEmpty();
    // public System.Void AddFirst(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFDB30
    void AddFirst(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // public System.Void AddLast(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFE1C4
    void AddLast(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // public System.Void MoveFirst(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFDD80
    void MoveFirst(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // public System.Void MoveLast(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFDB78
    void MoveLast(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // public Fusion.Allocator/Block* RemoveHead(Fusion.Allocator* a)
    // Offset: 0x2AFDB0C
    ::Fusion::Allocator::Block* RemoveHead(::Fusion::Allocator* a);
    // public System.Void Remove(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFDD00
    void Remove(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // public System.Boolean Contains(Fusion.Allocator* a, Fusion.Allocator/Block* item)
    // Offset: 0x2AFE29C
    bool Contains(::Fusion::Allocator* a, ::Fusion::Allocator::Block* item);
    // private System.Void DebugVerifyListIntegrity(Fusion.Allocator* a)
    // Offset: 0x2AFE2DC
    void DebugVerifyListIntegrity(::Fusion::Allocator* a);
  }; // Fusion.Allocator/BlockList
  #pragma pack(pop)
  static check_size<sizeof(Allocator::BlockList), 4 + sizeof(::Fusion::Ptr)> __Fusion_Allocator_BlockListSizeCheck;
  static_assert(sizeof(Allocator::BlockList) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Allocator::BlockList::*)()>(&Fusion::Allocator::BlockList::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::AddFirst
// Il2CppName: AddFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::AddFirst)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "AddFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::AddLast
// Il2CppName: AddLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::AddLast)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "AddLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::MoveFirst
// Il2CppName: MoveFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::MoveFirst)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "MoveFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::MoveLast
// Il2CppName: MoveLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::MoveLast)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "MoveLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::RemoveHead
// Il2CppName: RemoveHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Allocator::Block* (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*)>(&Fusion::Allocator::BlockList::RemoveHead)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "RemoveHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::Remove)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*, ::Fusion::Allocator::Block*)>(&Fusion::Allocator::BlockList::Contains)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    static auto* item = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator/Block"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, item});
  }
};
// Writing MetadataGetter for method: Fusion::Allocator::BlockList::DebugVerifyListIntegrity
// Il2CppName: DebugVerifyListIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Allocator::BlockList::*)(::Fusion::Allocator*)>(&Fusion::Allocator::BlockList::DebugVerifyListIntegrity)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "Allocator"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Allocator::BlockList), "DebugVerifyListIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
