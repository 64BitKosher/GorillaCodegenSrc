// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.SimulationSnapshot
#include "Fusion/SimulationSnapshot.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Simulation
  class Simulation;
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationSnapshot::Pool);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationSnapshot::Pool*, "Fusion", "SimulationSnapshot/Pool");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationSnapshot/Pool
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationSnapshot::Pool : public ::Il2CppObject {
    public:
    public:
    // private Fusion.Simulation _simulation
    // Size: 0x8
    // Offset: 0x10
    ::Fusion::Simulation* simulation;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation*) == 0x8);
    // private Fusion.NetworkProjectConfig _config
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::NetworkProjectConfig* config;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig*) == 0x8);
    // private System.Collections.Generic.Stack`1<Fusion.SimulationSnapshot> _pool
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Stack_1<::Fusion::SimulationSnapshot*>* pool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Fusion::SimulationSnapshot*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.SimulationSnapshot> _created
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Fusion::SimulationSnapshot*>* created;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationSnapshot*>*) == 0x8);
    public:
    // Get instance field reference: private Fusion.Simulation _simulation
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation*& dyn__simulation();
    // Get instance field reference: private Fusion.NetworkProjectConfig _config
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig*& dyn__config();
    // Get instance field reference: private System.Collections.Generic.Stack`1<Fusion.SimulationSnapshot> _pool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Fusion::SimulationSnapshot*>*& dyn__pool();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.SimulationSnapshot> _created
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SimulationSnapshot*>*& dyn__created();
    // public System.Void .ctor(Fusion.Simulation simulation, Fusion.NetworkProjectConfig config)
    // Offset: 0x2B88E44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationSnapshot::Pool* New_ctor(::Fusion::Simulation* simulation, ::Fusion::NetworkProjectConfig* config) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationSnapshot::Pool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationSnapshot::Pool*, creationType>(simulation, config)));
    }
    // public System.Void Dispose()
    // Offset: 0x2B88F50
    void Dispose();
    // public System.Void Release(Fusion.SimulationSnapshot snapshot)
    // Offset: 0x2B86CA8
    void Release(::Fusion::SimulationSnapshot* snapshot);
    // public Fusion.SimulationSnapshot Create()
    // Offset: 0x2B89040
    ::Fusion::SimulationSnapshot* Create();
    // public Fusion.SimulationSnapshot Acquire(System.Boolean clearAllocator)
    // Offset: 0x2B7BCEC
    ::Fusion::SimulationSnapshot* Acquire(bool clearAllocator);
  }; // Fusion.SimulationSnapshot/Pool
  #pragma pack(pop)
  static check_size<sizeof(SimulationSnapshot::Pool), 40 + sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationSnapshot*>*)> __Fusion_SimulationSnapshot_PoolSizeCheck;
  static_assert(sizeof(SimulationSnapshot::Pool) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Pool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Pool::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::Pool::*)()>(&Fusion::SimulationSnapshot::Pool::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Pool*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Pool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationSnapshot::Pool::*)(::Fusion::SimulationSnapshot*)>(&Fusion::SimulationSnapshot::Pool::Release)> {
  static const MethodInfo* get() {
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Pool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapshot});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Pool::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::Pool::*)()>(&Fusion::SimulationSnapshot::Pool::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Pool*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationSnapshot::Pool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationSnapshot* (Fusion::SimulationSnapshot::Pool::*)(bool)>(&Fusion::SimulationSnapshot::Pool::Acquire)> {
  static const MethodInfo* get() {
    static auto* clearAllocator = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationSnapshot::Pool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearAllocator});
  }
};
