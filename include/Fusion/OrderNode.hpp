// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Including type: Fusion.SimulationStages
#include "Fusion/SimulationStages.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: OrderNode
  class OrderNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::OrderNode);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::OrderNode*, "Fusion", "OrderNode");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.OrderNode
  // [TokenAttribute] Offset: FFFFFFFF
  class OrderNode : public ::Il2CppObject {
    public:
    public:
    // public System.Type Type
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public Fusion.OrderNode Prev
    // Size: 0x8
    // Offset: 0x18
    ::Fusion::OrderNode* Prev;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public Fusion.OrderNode Next
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::OrderNode* Next;
    // Field size check
    static_assert(sizeof(::Fusion::OrderNode*) == 0x8);
    // public System.Collections.Generic.HashSet`1<Fusion.OrderNode> Before
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>* Before;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*) == 0x8);
    // public System.Collections.Generic.HashSet`1<Fusion.OrderNode> After
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>* After;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*) == 0x8);
    // public System.Collections.Generic.HashSet`1<Fusion.OrderNode> OrigBefore
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>* OrigBefore;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*) == 0x8);
    // public System.Collections.Generic.HashSet`1<Fusion.OrderNode> OrigAfter
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>* OrigAfter;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*) == 0x8);
    // public System.ValueTuple`2<Fusion.SimulationModes,Fusion.SimulationStages> SimFlags
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::System::ValueTuple_2<::Fusion::SimulationModes, ::Fusion::SimulationStages> SimFlags;
    // public System.Boolean IsDefaultOrder
    // Size: 0x1
    // Offset: 0x50
    bool IsDefaultOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean FoundBefores
    // Size: 0x1
    // Offset: 0x51
    bool FoundBefores;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean FoundAfters
    // Size: 0x1
    // Offset: 0x52
    bool FoundAfters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 UnityScriptOrder
    // Size: 0x4
    // Offset: 0x54
    int UnityScriptOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static public Fusion.SimulationModes ALL_MODES
    static constexpr const int ALL_MODES = 7;
    // Get static field: static public Fusion.SimulationModes ALL_MODES
    static ::Fusion::SimulationModes _get_ALL_MODES();
    // Set static field: static public Fusion.SimulationModes ALL_MODES
    static void _set_ALL_MODES(::Fusion::SimulationModes value);
    // static field const value: static public Fusion.SimulationStages ALL_STAGES
    static constexpr const int ALL_STAGES = 6;
    // Get static field: static public Fusion.SimulationStages ALL_STAGES
    static ::Fusion::SimulationStages _get_ALL_STAGES();
    // Set static field: static public Fusion.SimulationStages ALL_STAGES
    static void _set_ALL_STAGES(::Fusion::SimulationStages value);
    // Get instance field reference: public System.Type Type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_Type();
    // Get instance field reference: public Fusion.OrderNode Prev
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_Prev();
    // Get instance field reference: public Fusion.OrderNode Next
    [[deprecated("Use field access instead!")]] ::Fusion::OrderNode*& dyn_Next();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.OrderNode> Before
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*& dyn_Before();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.OrderNode> After
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*& dyn_After();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.OrderNode> OrigBefore
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*& dyn_OrigBefore();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.OrderNode> OrigAfter
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::OrderNode*>*& dyn_OrigAfter();
    // Get instance field reference: public System.ValueTuple`2<Fusion.SimulationModes,Fusion.SimulationStages> SimFlags
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<::Fusion::SimulationModes, ::Fusion::SimulationStages>& dyn_SimFlags();
    // Get instance field reference: public System.Boolean IsDefaultOrder
    [[deprecated("Use field access instead!")]] bool& dyn_IsDefaultOrder();
    // Get instance field reference: public System.Boolean FoundBefores
    [[deprecated("Use field access instead!")]] bool& dyn_FoundBefores();
    // Get instance field reference: public System.Boolean FoundAfters
    [[deprecated("Use field access instead!")]] bool& dyn_FoundAfters();
    // Get instance field reference: public System.Int32 UnityScriptOrder
    [[deprecated("Use field access instead!")]] int& dyn_UnityScriptOrder();
    // public System.Void .ctor(System.Type type)
    // Offset: 0x2B11CAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrderNode* New_ctor(::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::OrderNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrderNode*, creationType>(type)));
    }
    // public System.Void InitializeNode(System.Collections.Generic.Dictionary`2<System.Type,Fusion.OrderNode> nodeLookupDict)
    // Offset: 0x2B11F30
    void InitializeNode(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Fusion::OrderNode*>* nodeLookupDict);
    // private System.Void StoreOriginals()
    // Offset: 0x2B128A4
    void StoreOriginals();
    // public override System.String ToString()
    // Offset: 0x2B12994
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.OrderNode
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::OrderNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::OrderNode::InitializeNode
// Il2CppName: InitializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderNode::*)(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Fusion::OrderNode*>*)>(&Fusion::OrderNode::InitializeNode)> {
  static const MethodInfo* get() {
    static auto* nodeLookupDict = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type"), ::il2cpp_utils::GetClassFromName("Fusion", "OrderNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderNode*), "InitializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeLookupDict});
  }
};
// Writing MetadataGetter for method: Fusion::OrderNode::StoreOriginals
// Il2CppName: StoreOriginals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::OrderNode::*)()>(&Fusion::OrderNode::StoreOriginals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderNode*), "StoreOriginals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::OrderNode::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::OrderNode::*)()>(&Fusion::OrderNode::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::OrderNode*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
