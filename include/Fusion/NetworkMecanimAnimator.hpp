// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: Fusion.IAfterAllTicks
#include "Fusion/IAfterAllTicks.hpp"
// Including type: Fusion.AnimatorSyncSettings
#include "Fusion/AnimatorSyncSettings.hpp"
// Including type: Fusion.WriteAccuracy
#include "Fusion/WriteAccuracy.hpp"
// Including type: Fusion.ReadAccuracy
#include "Fusion/ReadAccuracy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AnimatorControllerParameter
  class AnimatorControllerParameter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Dictionary`2 because it is already included!
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Nullable`1 because it is already included!
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkMecanimAnimator
  class NetworkMecanimAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkMecanimAnimator);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkMecanimAnimator*, "Fusion", "NetworkMecanimAnimator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkMecanimAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  // [OrderAfterAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [OrderBeforeAttribute] Offset: FFFFFFFF
  class NetworkMecanimAnimator : public ::Fusion::NetworkBehaviour/*, public ::Fusion::IAfterAllTicks*/ {
    public:
    public:
    // public UnityEngine.Animator Animator
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Animator* Animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // System.Int32 TotalWords
    // Size: 0x4
    // Offset: 0x80
    int TotalWords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Fusion.AnimatorSyncSettings SyncSettings
    // Size: 0x4
    // Offset: 0x84
    ::Fusion::AnimatorSyncSettings SyncSettings;
    // Field size check
    static_assert(sizeof(::Fusion::AnimatorSyncSettings) == 0x4);
    // public Fusion.Accuracy FloatAccuracy
    // Size: 0xC
    // Offset: 0x88
    ::Fusion::Accuracy FloatAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::Accuracy) == 0xC);
    // public Fusion.Accuracy TimeAccuracy
    // Size: 0xC
    // Offset: 0x94
    ::Fusion::Accuracy TimeAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::Accuracy) == 0xC);
    // public Fusion.Accuracy WeightAccuracy
    // Size: 0xC
    // Offset: 0xA0
    ::Fusion::Accuracy WeightAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::Accuracy) == 0xC);
    // Padding between fields: WeightAccuracy and: StateHashes
    char __padding5[0x4] = {};
    // System.Int32[] StateHashes
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<int> StateHashes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> StateIndexLookup
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Dictionary_2<int, int>* StateIndexLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // System.Int32[] TriggerHashes
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int> TriggerHashes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> TriggerIndexLookup
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::Dictionary_2<int, int>* TriggerIndexLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Int32 _param32Count
    // Size: 0x4
    // Offset: 0xD0
    int param32Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _paramBoolCount
    // Size: 0x4
    // Offset: 0xD4
    int paramBoolCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _paramBoolsWordCount
    // Size: 0x4
    // Offset: 0xD8
    int paramBoolsWordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _paramBoolsPtrOffset
    // Size: 0x4
    // Offset: 0xDC
    int paramBoolsPtrOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _syncedLayerCount
    // Size: 0x4
    // Offset: 0xE0
    int syncedLayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: syncedLayerCount and: cachedParameters
    char __padding14[0x4] = {};
    // private UnityEngine.AnimatorControllerParameter[] _cachedParameters
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::UnityEngine::AnimatorControllerParameter*> cachedParameters;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AnimatorControllerParameter*>) == 0x8);
    // private System.Int32[] _cachedParameterHashes
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<int> cachedParameterHashes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _cachedParameterCount
    // Size: 0x4
    // Offset: 0xF8
    int cachedParameterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _cachedLayerCount
    // Size: 0x4
    // Offset: 0xFC
    int cachedLayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.WriteAccuracy _floatWriteAccuracy
    // Size: 0x4
    // Offset: 0x100
    ::Fusion::WriteAccuracy floatWriteAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::WriteAccuracy) == 0x4);
    // private Fusion.WriteAccuracy _timeWriteAccuracy
    // Size: 0x4
    // Offset: 0x104
    ::Fusion::WriteAccuracy timeWriteAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::WriteAccuracy) == 0x4);
    // private Fusion.WriteAccuracy _weightWriteAccuracy
    // Size: 0x4
    // Offset: 0x108
    ::Fusion::WriteAccuracy weightWriteAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::WriteAccuracy) == 0x4);
    // private Fusion.ReadAccuracy _floatReadAccuracy
    // Size: 0x4
    // Offset: 0x10C
    ::Fusion::ReadAccuracy floatReadAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::ReadAccuracy) == 0x4);
    // private Fusion.ReadAccuracy _timeReadAccuracy
    // Size: 0x4
    // Offset: 0x110
    ::Fusion::ReadAccuracy timeReadAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::ReadAccuracy) == 0x4);
    // private Fusion.ReadAccuracy _weightReadAccuracy
    // Size: 0x4
    // Offset: 0x114
    ::Fusion::ReadAccuracy weightReadAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::ReadAccuracy) == 0x4);
    // private System.Collections.Generic.HashSet`1<System.Int32> pendingTriggers
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::HashSet_1<int>* pendingTriggers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::IAfterAllTicks
    operator ::Fusion::IAfterAllTicks() noexcept {
      return *reinterpret_cast<::Fusion::IAfterAllTicks*>(this);
    }
    // Get instance field reference: public UnityEngine.Animator Animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_Animator();
    // Get instance field reference: System.Int32 TotalWords
    [[deprecated("Use field access instead!")]] int& dyn_TotalWords();
    // Get instance field reference: Fusion.AnimatorSyncSettings SyncSettings
    [[deprecated("Use field access instead!")]] ::Fusion::AnimatorSyncSettings& dyn_SyncSettings();
    // Get instance field reference: public Fusion.Accuracy FloatAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::Accuracy& dyn_FloatAccuracy();
    // Get instance field reference: public Fusion.Accuracy TimeAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::Accuracy& dyn_TimeAccuracy();
    // Get instance field reference: public Fusion.Accuracy WeightAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::Accuracy& dyn_WeightAccuracy();
    // Get instance field reference: System.Int32[] StateHashes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_StateHashes();
    // Get instance field reference: System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> StateIndexLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_StateIndexLookup();
    // Get instance field reference: System.Int32[] TriggerHashes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_TriggerHashes();
    // Get instance field reference: System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> TriggerIndexLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_TriggerIndexLookup();
    // Get instance field reference: private System.Int32 _param32Count
    [[deprecated("Use field access instead!")]] int& dyn__param32Count();
    // Get instance field reference: private System.Int32 _paramBoolCount
    [[deprecated("Use field access instead!")]] int& dyn__paramBoolCount();
    // Get instance field reference: private System.Int32 _paramBoolsWordCount
    [[deprecated("Use field access instead!")]] int& dyn__paramBoolsWordCount();
    // Get instance field reference: private System.Int32 _paramBoolsPtrOffset
    [[deprecated("Use field access instead!")]] int& dyn__paramBoolsPtrOffset();
    // Get instance field reference: private System.Int32 _syncedLayerCount
    [[deprecated("Use field access instead!")]] int& dyn__syncedLayerCount();
    // Get instance field reference: private UnityEngine.AnimatorControllerParameter[] _cachedParameters
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AnimatorControllerParameter*>& dyn__cachedParameters();
    // Get instance field reference: private System.Int32[] _cachedParameterHashes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__cachedParameterHashes();
    // Get instance field reference: private System.Int32 _cachedParameterCount
    [[deprecated("Use field access instead!")]] int& dyn__cachedParameterCount();
    // Get instance field reference: private System.Int32 _cachedLayerCount
    [[deprecated("Use field access instead!")]] int& dyn__cachedLayerCount();
    // Get instance field reference: private Fusion.WriteAccuracy _floatWriteAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::WriteAccuracy& dyn__floatWriteAccuracy();
    // Get instance field reference: private Fusion.WriteAccuracy _timeWriteAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::WriteAccuracy& dyn__timeWriteAccuracy();
    // Get instance field reference: private Fusion.WriteAccuracy _weightWriteAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::WriteAccuracy& dyn__weightWriteAccuracy();
    // Get instance field reference: private Fusion.ReadAccuracy _floatReadAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::ReadAccuracy& dyn__floatReadAccuracy();
    // Get instance field reference: private Fusion.ReadAccuracy _timeReadAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::ReadAccuracy& dyn__timeReadAccuracy();
    // Get instance field reference: private Fusion.ReadAccuracy _weightReadAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::ReadAccuracy& dyn__weightReadAccuracy();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> pendingTriggers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_pendingTriggers();
    // System.Int32 GetRuntimeCounts()
    // Offset: 0x2B10274
    int GetRuntimeCounts();
    // private System.Void Awake()
    // Offset: 0x2B105FC
    void Awake();
    // public System.Void SetTrigger(System.Int32 triggerHash, System.Boolean passThroughOnInputAuthority)
    // Offset: 0x2B107FC
    void SetTrigger(int triggerHash, bool passThroughOnInputAuthority);
    // public System.Void SetTrigger(System.String trigger, System.Boolean passThroughOnInputAuthority)
    // Offset: 0x2B108BC
    void SetTrigger(::StringW trigger, bool passThroughOnInputAuthority);
    // private System.Void Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B10A10
    void Fusion_IAfterAllTicks_AfterAllTicks(bool resimulation, int tickCount);
    // System.Void CaptureAnimatorData(System.Int32* ptr)
    // Offset: 0x2B109C4
    void CaptureAnimatorData(int* ptr);
    // System.Void ApplyAnimatorData(System.Int32* ptr)
    // Offset: 0x2B10A48
    void ApplyAnimatorData(int* ptr);
    // private System.Void CaptureStates(ref System.Int32* ptr)
    // Offset: 0x2B10D6C
    void CaptureStates(ByRef<int*> ptr);
    // private System.Void ApplyStates(ref System.Int32* ptr)
    // Offset: 0x2B111C8
    void ApplyStates(ByRef<int*> ptr);
    // private System.Void CaptureParameters(ref System.Int32* ptr)
    // Offset: 0x2B10A94
    void CaptureParameters(ByRef<int*> ptr);
    // private System.Void ApplyParameters(ref System.Int32* ptr)
    // Offset: 0x2B10FCC
    void ApplyParameters(ByRef<int*> ptr);
    // private System.Void CaptureLayerWeights(ref System.Int32* ptr)
    // Offset: 0x2B10F04
    void CaptureLayerWeights(ByRef<int*> ptr);
    // private System.Void ApplyLayerWeights(ref System.Int32* ptr)
    // Offset: 0x2B11284
    void ApplyLayerWeights(ByRef<int*> ptr);
    // public override System.Nullable`1<System.Int32> get_DynamicWordCount()
    // Offset: 0x2B10150
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Nullable`1<System.Int32> NetworkBehaviour::get_DynamicWordCount()
    ::System::Nullable_1<int> get_DynamicWordCount();
    // public override System.Void Spawned()
    // Offset: 0x2B104DC
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Spawned()
    void Spawned();
    // public override System.Void FixedUpdateNetwork()
    // Offset: 0x2B1098C
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::FixedUpdateNetwork()
    void FixedUpdateNetwork();
    // public System.Void .ctor()
    // Offset: 0x2B1130C
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::.ctor()
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkMecanimAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkMecanimAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkMecanimAnimator*, creationType>()));
    }
  }; // Fusion.NetworkMecanimAnimator
  #pragma pack(pop)
  static check_size<sizeof(NetworkMecanimAnimator), 280 + sizeof(::System::Collections::Generic::HashSet_1<int>*)> __Fusion_NetworkMecanimAnimatorSizeCheck;
  static_assert(sizeof(NetworkMecanimAnimator) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::GetRuntimeCounts
// Il2CppName: GetRuntimeCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkMecanimAnimator::*)()>(&Fusion::NetworkMecanimAnimator::GetRuntimeCounts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "GetRuntimeCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)()>(&Fusion::NetworkMecanimAnimator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::SetTrigger
// Il2CppName: SetTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(int, bool)>(&Fusion::NetworkMecanimAnimator::SetTrigger)> {
  static const MethodInfo* get() {
    static auto* triggerHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* passThroughOnInputAuthority = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "SetTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggerHash, passThroughOnInputAuthority});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::SetTrigger
// Il2CppName: SetTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(::StringW, bool)>(&Fusion::NetworkMecanimAnimator::SetTrigger)> {
  static const MethodInfo* get() {
    static auto* trigger = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* passThroughOnInputAuthority = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "SetTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trigger, passThroughOnInputAuthority});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::Fusion_IAfterAllTicks_AfterAllTicks
// Il2CppName: Fusion.IAfterAllTicks.AfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(bool, int)>(&Fusion::NetworkMecanimAnimator::Fusion_IAfterAllTicks_AfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "Fusion.IAfterAllTicks.AfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::CaptureAnimatorData
// Il2CppName: CaptureAnimatorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(int*)>(&Fusion::NetworkMecanimAnimator::CaptureAnimatorData)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "CaptureAnimatorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::ApplyAnimatorData
// Il2CppName: ApplyAnimatorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(int*)>(&Fusion::NetworkMecanimAnimator::ApplyAnimatorData)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "ApplyAnimatorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::CaptureStates
// Il2CppName: CaptureStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::CaptureStates)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "CaptureStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::ApplyStates
// Il2CppName: ApplyStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::ApplyStates)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "ApplyStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::CaptureParameters
// Il2CppName: CaptureParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::CaptureParameters)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "CaptureParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::ApplyParameters
// Il2CppName: ApplyParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::ApplyParameters)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "ApplyParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::CaptureLayerWeights
// Il2CppName: CaptureLayerWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::CaptureLayerWeights)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "CaptureLayerWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::ApplyLayerWeights
// Il2CppName: ApplyLayerWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)(ByRef<int*>)>(&Fusion::NetworkMecanimAnimator::ApplyLayerWeights)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "ApplyLayerWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::get_DynamicWordCount
// Il2CppName: get_DynamicWordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Fusion::NetworkMecanimAnimator::*)()>(&Fusion::NetworkMecanimAnimator::get_DynamicWordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "get_DynamicWordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)()>(&Fusion::NetworkMecanimAnimator::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::FixedUpdateNetwork
// Il2CppName: FixedUpdateNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkMecanimAnimator::*)()>(&Fusion::NetworkMecanimAnimator::FixedUpdateNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkMecanimAnimator*), "FixedUpdateNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkMecanimAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
