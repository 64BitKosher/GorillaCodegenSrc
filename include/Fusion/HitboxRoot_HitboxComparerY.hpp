// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.HitboxRoot
#include "Fusion/HitboxRoot.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::HitboxRoot::HitboxComparerY);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HitboxRoot::HitboxComparerY*, "Fusion", "HitboxRoot/HitboxComparerY");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.HitboxRoot/HitboxComparerY
  // [TokenAttribute] Offset: FFFFFFFF
  class HitboxRoot::HitboxComparerY : public ::Il2CppObject/*, public ::System::Collections::Generic::IComparer_1<::Fusion::HitboxRoot*>*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::Fusion::HitboxRoot*>
    operator ::System::Collections::Generic::IComparer_1<::Fusion::HitboxRoot*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::Fusion::HitboxRoot*>*>(this);
    }
    // public System.Int32 Compare(Fusion.HitboxRoot a, Fusion.HitboxRoot b)
    // Offset: 0x2B40FEC
    int Compare(::Fusion::HitboxRoot* a, ::Fusion::HitboxRoot* b);
    // public System.Void .ctor()
    // Offset: 0x2B41060
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitboxRoot::HitboxComparerY* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::HitboxRoot::HitboxComparerY::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitboxRoot::HitboxComparerY*, creationType>()));
    }
  }; // Fusion.HitboxRoot/HitboxComparerY
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::HitboxRoot::HitboxComparerY::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::HitboxRoot::HitboxComparerY::*)(::Fusion::HitboxRoot*, ::Fusion::HitboxRoot*)>(&Fusion::HitboxRoot::HitboxComparerY::Compare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxRoot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot::HitboxComparerY*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::HitboxComparerY::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
