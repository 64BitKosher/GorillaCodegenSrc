// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: Fusion.RpcChannel
#include "Fusion/RpcChannel.hpp"
// Including type: Fusion.RpcHostMode
#include "Fusion/RpcHostMode.hpp"
// Including type: Fusion.RpcSources
#include "Fusion/RpcSources.hpp"
// Including type: Fusion.RpcTargets
#include "Fusion/RpcTargets.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RpcAttribute
  class RpcAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::RpcAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RpcAttribute*, "Fusion", "RpcAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.RpcAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class RpcAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Int32 <Sources>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Sources;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Targets>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Targets;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <InvokeLocal>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool InvokeLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <InvokeResim>k__BackingField
    // Size: 0x1
    // Offset: 0x19
    bool InvokeResim;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvokeResim and: Channel
    char __padding3[0x2] = {};
    // private Fusion.RpcChannel <Channel>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::Fusion::RpcChannel Channel;
    // Field size check
    static_assert(sizeof(::Fusion::RpcChannel) == 0x4);
    // private System.Boolean <TickAligned>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool TickAligned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TickAligned and: HostMode
    char __padding5[0x3] = {};
    // private Fusion.RpcHostMode <HostMode>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::Fusion::RpcHostMode HostMode;
    // Field size check
    static_assert(sizeof(::Fusion::RpcHostMode) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <Sources>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Sources$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Targets>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Targets$k__BackingField();
    // Get instance field reference: private System.Boolean <InvokeLocal>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$InvokeLocal$k__BackingField();
    // Get instance field reference: private System.Boolean <InvokeResim>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$InvokeResim$k__BackingField();
    // Get instance field reference: private Fusion.RpcChannel <Channel>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::RpcChannel& dyn_$Channel$k__BackingField();
    // Get instance field reference: private System.Boolean <TickAligned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$TickAligned$k__BackingField();
    // Get instance field reference: private Fusion.RpcHostMode <HostMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::RpcHostMode& dyn_$HostMode$k__BackingField();
    // public System.Int32 get_Sources()
    // Offset: 0x2B50520
    int get_Sources();
    // public System.Int32 get_Targets()
    // Offset: 0x2B50528
    int get_Targets();
    // public System.Boolean get_InvokeLocal()
    // Offset: 0x2B50530
    bool get_InvokeLocal();
    // public System.Void set_InvokeLocal(System.Boolean value)
    // Offset: 0x2B50538
    void set_InvokeLocal(bool value);
    // public System.Boolean get_InvokeResim()
    // Offset: 0x2B50544
    bool get_InvokeResim();
    // public System.Void set_InvokeResim(System.Boolean value)
    // Offset: 0x2B5054C
    void set_InvokeResim(bool value);
    // public Fusion.RpcChannel get_Channel()
    // Offset: 0x2B50558
    ::Fusion::RpcChannel get_Channel();
    // public System.Void set_Channel(Fusion.RpcChannel value)
    // Offset: 0x2B50560
    void set_Channel(::Fusion::RpcChannel value);
    // public System.Boolean get_TickAligned()
    // Offset: 0x2B50568
    bool get_TickAligned();
    // public System.Void set_TickAligned(System.Boolean value)
    // Offset: 0x2B50570
    void set_TickAligned(bool value);
    // public Fusion.RpcHostMode get_HostMode()
    // Offset: 0x2B5057C
    ::Fusion::RpcHostMode get_HostMode();
    // public System.Void set_HostMode(Fusion.RpcHostMode value)
    // Offset: 0x2B50584
    void set_HostMode(::Fusion::RpcHostMode value);
    // public System.Void .ctor()
    // Offset: 0x2B5058C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RpcAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::RpcAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RpcAttribute*, creationType>()));
    }
    // public System.Void .ctor(Fusion.RpcSources sources, Fusion.RpcTargets targets)
    // Offset: 0x2B505A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RpcAttribute* New_ctor(::Fusion::RpcSources sources, ::Fusion::RpcTargets targets) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::RpcAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RpcAttribute*, creationType>(sources, targets)));
    }
  }; // Fusion.RpcAttribute
  #pragma pack(pop)
  static check_size<sizeof(RpcAttribute), 36 + sizeof(::Fusion::RpcHostMode)> __Fusion_RpcAttributeSizeCheck;
  static_assert(sizeof(RpcAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_Sources
// Il2CppName: get_Sources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_Sources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_Sources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_Targets
// Il2CppName: get_Targets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_Targets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_Targets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_InvokeLocal
// Il2CppName: get_InvokeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_InvokeLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_InvokeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::set_InvokeLocal
// Il2CppName: set_InvokeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RpcAttribute::*)(bool)>(&Fusion::RpcAttribute::set_InvokeLocal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "set_InvokeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_InvokeResim
// Il2CppName: get_InvokeResim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_InvokeResim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_InvokeResim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::set_InvokeResim
// Il2CppName: set_InvokeResim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RpcAttribute::*)(bool)>(&Fusion::RpcAttribute::set_InvokeResim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "set_InvokeResim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_Channel
// Il2CppName: get_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcChannel (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_Channel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::set_Channel
// Il2CppName: set_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RpcAttribute::*)(::Fusion::RpcChannel)>(&Fusion::RpcAttribute::set_Channel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "RpcChannel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "set_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_TickAligned
// Il2CppName: get_TickAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_TickAligned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_TickAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::set_TickAligned
// Il2CppName: set_TickAligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RpcAttribute::*)(bool)>(&Fusion::RpcAttribute::set_TickAligned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "set_TickAligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::get_HostMode
// Il2CppName: get_HostMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcHostMode (Fusion::RpcAttribute::*)()>(&Fusion::RpcAttribute::get_HostMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "get_HostMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::set_HostMode
// Il2CppName: set_HostMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RpcAttribute::*)(::Fusion::RpcHostMode)>(&Fusion::RpcAttribute::set_HostMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "RpcHostMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcAttribute*), "set_HostMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::RpcAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::RpcAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
