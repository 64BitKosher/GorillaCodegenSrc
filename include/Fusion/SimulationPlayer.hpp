// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationPlayer
  class SimulationPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationPlayer);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationPlayer*, "Fusion", "SimulationPlayer");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationPlayer : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::SimulationPlayer::AOIQuery
    struct AOIQuery;
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.SimulationPlayer/AOIQuery
    // [TokenAttribute] Offset: FFFFFFFF
    struct AOIQuery/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 Position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 Position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single Radius
      // Size: 0x4
      // Offset: 0xC
      float Radius;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Int32 LayerMask
      // Size: 0x4
      // Offset: 0x10
      int LayerMask;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AOIQuery
      constexpr AOIQuery(::UnityEngine::Vector3 Position_ = {}, float Radius_ = {}, int LayerMask_ = {}) noexcept : Position{Position_}, Radius{Radius_}, LayerMask{LayerMask_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 Position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Position();
      // Get instance field reference: public System.Single Radius
      [[deprecated("Use field access instead!")]] float& dyn_Radius();
      // Get instance field reference: public System.Int32 LayerMask
      [[deprecated("Use field access instead!")]] int& dyn_LayerMask();
      // static public System.Void Write(Fusion.SimulationPlayer/AOIQuery q, Fusion.Sockets.NetBitBuffer* b)
      // Offset: 0x2B85868
      static void Write(::Fusion::SimulationPlayer::AOIQuery q, ::Fusion::Sockets::NetBitBuffer* b);
      // static public Fusion.SimulationPlayer/AOIQuery Read(Fusion.Sockets.NetBitBuffer* b)
      // Offset: 0x2B858E8
      static ::Fusion::SimulationPlayer::AOIQuery Read(::Fusion::Sockets::NetBitBuffer* b);
    }; // Fusion.SimulationPlayer/AOIQuery
    #pragma pack(pop)
    static check_size<sizeof(SimulationPlayer::AOIQuery), 16 + sizeof(int)> __Fusion_SimulationPlayer_AOIQuerySizeCheck;
    static_assert(sizeof(SimulationPlayer::AOIQuery) == 0x14);
    public:
    // public System.Collections.Generic.HashSet`1<Fusion.NetworkId> AlwaysInterested
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>* AlwaysInterested;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*) == 0x8);
    // public System.Collections.Generic.List`1<Fusion.SimulationPlayer/AOIQuery> AOIQueries
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>* AOIQueries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>*) == 0x8);
    // public System.Collections.Generic.HashSet`1<Fusion.NetworkId> AOIResult
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>* AOIResult;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*) == 0x8);
    // public System.Boolean AOICalculated
    // Size: 0x1
    // Offset: 0x28
    bool AOICalculated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.NetworkId> AlwaysInterested
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*& dyn_AlwaysInterested();
    // Get instance field reference: public System.Collections.Generic.List`1<Fusion.SimulationPlayer/AOIQuery> AOIQueries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::SimulationPlayer::AOIQuery>*& dyn_AOIQueries();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<Fusion.NetworkId> AOIResult
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Fusion::NetworkId>*& dyn_AOIResult();
    // Get instance field reference: public System.Boolean AOICalculated
    [[deprecated("Use field access instead!")]] bool& dyn_AOICalculated();
    // public System.Void Reset()
    // Offset: 0x2B856E0
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x2B85768
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationPlayer*, creationType>()));
    }
  }; // Fusion.SimulationPlayer
  #pragma pack(pop)
  static check_size<sizeof(SimulationPlayer), 40 + sizeof(bool)> __Fusion_SimulationPlayerSizeCheck;
  static_assert(sizeof(SimulationPlayer) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationPlayer::AOIQuery, "Fusion", "SimulationPlayer/AOIQuery");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationPlayer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationPlayer::*)()>(&Fusion::SimulationPlayer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationPlayer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
