// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: FastReferenceList`1<T>
  template<typename T>
  class FastReferenceList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Fusion::FastReferenceList_1, "Fusion", "FastReferenceList`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.FastReferenceList`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class FastReferenceList_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Count
    // Size: 0x4
    // Offset: 0x0
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public T[] Items
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> Items;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 Count
    [[deprecated("Use field access instead!")]] int& dyn_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FastReferenceList_1::dyn_Count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T[] Items
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_Items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FastReferenceList_1::dyn_Items");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Items"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FastReferenceList_1<T>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FastReferenceList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FastReferenceList_1<T>*, creationType>(capacity)));
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FastReferenceList_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
  }; // Fusion.FastReferenceList`1
  // Could not write size check! Type: Fusion.FastReferenceList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
