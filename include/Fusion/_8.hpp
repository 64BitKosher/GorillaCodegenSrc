// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Including type: Fusion.IFixedStorage
#include "Fusion/IFixedStorage.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: _8
  struct _8;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::_8, "Fusion", "_8");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion._8
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct _8/*, public ::System::ValueType, public ::Fusion::INetworkStruct, public ::Fusion::IFixedStorage*/ {
    public:
    // Nested type: ::Fusion::_8::$Data$e__FixedBuffer
    struct $Data$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion._8/<Data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $Data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      uint FixedElementField;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: $Data$e__FixedBuffer
      constexpr $Data$e__FixedBuffer(uint FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint
      constexpr operator uint() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.UInt32 FixedElementField
      [[deprecated("Use field access instead!")]] uint& dyn_FixedElementField();
    }; // Fusion._8/<Data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(_8::$Data$e__FixedBuffer), 0 + sizeof(uint)> __Fusion__8_$Data$e__FixedBufferSizeCheck;
    static_assert(sizeof(_8::$Data$e__FixedBuffer) == 0x4);
    public:
    // Creating union for fields at offset: 0x0
    union {
      // public Fusion._8/<Data>e__FixedBuffer Data
      // Size: 0x4
      // Offset: 0x0
      ::Fusion::_8::$Data$e__FixedBuffer Data;
      // Field size check
      static_assert(sizeof(::Fusion::_8::$Data$e__FixedBuffer) == 0x4);
      // private System.UInt32 _data0
      // Size: 0x4
      // Offset: 0x0
      uint data0;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
    };
    // private System.UInt32 _data1
    // Size: 0x4
    // Offset: 0x4
    uint data1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data2
    // Size: 0x4
    // Offset: 0x8
    uint data2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data3
    // Size: 0x4
    // Offset: 0xC
    uint data3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data4
    // Size: 0x4
    // Offset: 0x10
    uint data4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data5
    // Size: 0x4
    // Offset: 0x14
    uint data5;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data6
    // Size: 0x4
    // Offset: 0x18
    uint data6;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _data7
    // Size: 0x4
    // Offset: 0x1C
    uint data7;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: _8
    constexpr _8(::Fusion::_8::$Data$e__FixedBuffer Data_ = {}, uint data1_ = {}, uint data2_ = {}, uint data3_ = {}, uint data4_ = {}, uint data5_ = {}, uint data6_ = {}, uint data7_ = {}) noexcept : Data{Data_}, data1{data1_}, data2{data2_}, data3{data3_}, data4{data4_}, data5{data5_}, data6{data6_}, data7{data7_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IFixedStorage
    operator ::Fusion::IFixedStorage() noexcept {
      return *reinterpret_cast<::Fusion::IFixedStorage*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 32;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion._8/<Data>e__FixedBuffer Data
    [[deprecated("Use field access instead!")]] ::Fusion::_8::$Data$e__FixedBuffer& dyn_Data();
    // Get instance field reference: private System.UInt32 _data0
    [[deprecated("Use field access instead!")]] uint& dyn__data0();
    // Get instance field reference: private System.UInt32 _data1
    [[deprecated("Use field access instead!")]] uint& dyn__data1();
    // Get instance field reference: private System.UInt32 _data2
    [[deprecated("Use field access instead!")]] uint& dyn__data2();
    // Get instance field reference: private System.UInt32 _data3
    [[deprecated("Use field access instead!")]] uint& dyn__data3();
    // Get instance field reference: private System.UInt32 _data4
    [[deprecated("Use field access instead!")]] uint& dyn__data4();
    // Get instance field reference: private System.UInt32 _data5
    [[deprecated("Use field access instead!")]] uint& dyn__data5();
    // Get instance field reference: private System.UInt32 _data6
    [[deprecated("Use field access instead!")]] uint& dyn__data6();
    // Get instance field reference: private System.UInt32 _data7
    [[deprecated("Use field access instead!")]] uint& dyn__data7();
  }; // Fusion._8
  #pragma pack(pop)
  static check_size<sizeof(_8), 28 + sizeof(uint)> __Fusion__8SizeCheck;
  static_assert(sizeof(_8) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::_8::$Data$e__FixedBuffer, "Fusion", "_8/<Data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
