// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkId::EqualityComparer);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkId::EqualityComparer*, "Fusion", "NetworkId/EqualityComparer");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkId/EqualityComparer
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkId::EqualityComparer : public ::Il2CppObject/*, public ::System::Collections::Generic::IEqualityComparer_1<::Fusion::NetworkId>*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEqualityComparer_1<::Fusion::NetworkId>
    operator ::System::Collections::Generic::IEqualityComparer_1<::Fusion::NetworkId>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<::Fusion::NetworkId>*>(this);
    }
    // public System.Boolean Equals(Fusion.NetworkId a, Fusion.NetworkId b)
    // Offset: 0x2B4B444
    bool Equals(::Fusion::NetworkId a, ::Fusion::NetworkId b);
    // public System.Int32 GetHashCode(Fusion.NetworkId id)
    // Offset: 0x2B4B450
    int GetHashCode(::Fusion::NetworkId id);
    // public System.Void .ctor()
    // Offset: 0x2B4B458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkId::EqualityComparer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkId::EqualityComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkId::EqualityComparer*, creationType>()));
    }
  }; // Fusion.NetworkId/EqualityComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkId::EqualityComparer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkId::EqualityComparer::*)(::Fusion::NetworkId, ::Fusion::NetworkId)>(&Fusion::NetworkId::EqualityComparer::Equals)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkId::EqualityComparer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkId::EqualityComparer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkId::EqualityComparer::*)(::Fusion::NetworkId)>(&Fusion::NetworkId::EqualityComparer::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkId::EqualityComparer*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkId::EqualityComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
