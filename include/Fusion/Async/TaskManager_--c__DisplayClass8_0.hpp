// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Async.TaskManager
#include "Fusion/Async/TaskManager.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Async
namespace Fusion::Async {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Async::TaskManager::$$c__DisplayClass8_0);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Async::TaskManager::$$c__DisplayClass8_0*, "Fusion.Async", "TaskManager/<>c__DisplayClass8_0");
// Type namespace: Fusion.Async
namespace Fusion::Async {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Async.TaskManager/<>c__DisplayClass8_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TaskManager::$$c__DisplayClass8_0 : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::Async::TaskManager::$$c__DisplayClass8_0::$$ContinueWhenAll$b__0$d
    struct $$ContinueWhenAll$b__0$d;
    public:
    // public System.Threading.CancellationToken cancellationToken
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::CancellationToken cancellationToken;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationToken) == 0x8);
    // public System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task> action
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* action;
    // Field size check
    static_assert(sizeof(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*) == 0x8);
    public:
    // Get instance field reference: public System.Threading.CancellationToken cancellationToken
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& dyn_cancellationToken();
    // Get instance field reference: public System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task> action
    [[deprecated("Use field access instead!")]] ::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*& dyn_action();
    // public System.Void .ctor()
    // Offset: 0x2ADB964
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskManager::$$c__DisplayClass8_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Async::TaskManager::$$c__DisplayClass8_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskManager::$$c__DisplayClass8_0*, creationType>()));
    }
    // System.Threading.Tasks.Task <ContinueWhenAll>b__0(System.Threading.Tasks.Task[] tasks)
    // Offset: 0x2ADC424
    ::System::Threading::Tasks::Task* $ContinueWhenAll$b__0(::ArrayW<::System::Threading::Tasks::Task*> tasks);
  }; // Fusion.Async.TaskManager/<>c__DisplayClass8_0
  #pragma pack(pop)
  static check_size<sizeof(TaskManager::$$c__DisplayClass8_0), 24 + sizeof(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*)> __Fusion_Async_TaskManager_$$c__DisplayClass8_0SizeCheck;
  static_assert(sizeof(TaskManager::$$c__DisplayClass8_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Async::TaskManager::$$c__DisplayClass8_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Async::TaskManager::$$c__DisplayClass8_0::$ContinueWhenAll$b__0
// Il2CppName: <ContinueWhenAll>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Fusion::Async::TaskManager::$$c__DisplayClass8_0::*)(::ArrayW<::System::Threading::Tasks::Task*>)>(&Fusion::Async::TaskManager::$$c__DisplayClass8_0::$ContinueWhenAll$b__0)> {
  static const MethodInfo* get() {
    static auto* tasks = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Async::TaskManager::$$c__DisplayClass8_0*), "<ContinueWhenAll>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tasks});
  }
};
