// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.SimulationModes
#include "Fusion/SimulationModes.hpp"
// Including type: Fusion.Sockets.NetAddress
#include "Fusion/Sockets/NetAddress.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: INetSocket
  class INetSocket;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationArgs
  struct SimulationArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationArgs, "Fusion", "SimulationArgs");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.SimulationArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimulationArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.SimulationModes Mode
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::SimulationModes Mode;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationModes) == 0x4);
    // Padding between fields: Mode and: Address
    char __padding0[0x4] = {};
    // public Fusion.Sockets.NetAddress Address
    // Size: 0x18
    // Offset: 0x8
    ::Fusion::Sockets::NetAddress Address;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::NetAddress) == 0x18);
    // public Fusion.Sockets.INetSocket Socket
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Sockets::INetSocket* Socket;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::INetSocket*) == 0x8);
    // public Fusion.NetworkProjectConfig Config
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::NetworkProjectConfig* Config;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig*) == 0x8);
    // public Fusion.Simulation/ICallbacks Callbacks
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Simulation::ICallbacks* Callbacks;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::ICallbacks*) == 0x8);
    // public Fusion.Simulation/IDeltaCompressor DeltaCompressor
    // Size: 0x8
    // Offset: 0x38
    ::Fusion::Simulation::IDeltaCompressor* DeltaCompressor;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation::IDeltaCompressor*) == 0x8);
    // public Fusion.Tick Tick
    // Size: 0x4
    // Offset: 0x40
    ::Fusion::Tick Tick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // Padding between fields: Tick and: State
    char __padding6[0x4] = {};
    // public System.Byte[] State
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> State;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating value type constructor for type: SimulationArgs
    constexpr SimulationArgs(::Fusion::SimulationModes Mode_ = {}, ::Fusion::Sockets::NetAddress Address_ = {}, ::Fusion::Sockets::INetSocket* Socket_ = {}, ::Fusion::NetworkProjectConfig* Config_ = {}, ::Fusion::Simulation::ICallbacks* Callbacks_ = {}, ::Fusion::Simulation::IDeltaCompressor* DeltaCompressor_ = {}, ::Fusion::Tick Tick_ = {}, ::ArrayW<uint8_t> State_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : Mode{Mode_}, Address{Address_}, Socket{Socket_}, Config{Config_}, Callbacks{Callbacks_}, DeltaCompressor{DeltaCompressor_}, Tick{Tick_}, State{State_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.SimulationModes Mode
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationModes& dyn_Mode();
    // Get instance field reference: public Fusion.Sockets.NetAddress Address
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::NetAddress& dyn_Address();
    // Get instance field reference: public Fusion.Sockets.INetSocket Socket
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::INetSocket*& dyn_Socket();
    // Get instance field reference: public Fusion.NetworkProjectConfig Config
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig*& dyn_Config();
    // Get instance field reference: public Fusion.Simulation/ICallbacks Callbacks
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::ICallbacks*& dyn_Callbacks();
    // Get instance field reference: public Fusion.Simulation/IDeltaCompressor DeltaCompressor
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation::IDeltaCompressor*& dyn_DeltaCompressor();
    // Get instance field reference: public Fusion.Tick Tick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_Tick();
    // Get instance field reference: public System.Byte[] State
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_State();
    // public System.Boolean get_IsPlayer()
    // Offset: 0x2B81EB0
    bool get_IsPlayer();
    // public System.Boolean get_IsServer()
    // Offset: 0x2B81ECC
    bool get_IsServer();
  }; // Fusion.SimulationArgs
  #pragma pack(pop)
  static check_size<sizeof(SimulationArgs), 72 + sizeof(::ArrayW<uint8_t>)> __Fusion_SimulationArgsSizeCheck;
  static_assert(sizeof(SimulationArgs) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationArgs::get_IsPlayer
// Il2CppName: get_IsPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationArgs::*)()>(&Fusion::SimulationArgs::get_IsPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationArgs), "get_IsPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationArgs::get_IsServer
// Il2CppName: get_IsServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::SimulationArgs::*)()>(&Fusion::SimulationArgs::get_IsServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationArgs), "get_IsServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
