// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkProjectConfig
#include "Fusion/NetworkProjectConfig.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkProjectConfigAsset
  class NetworkProjectConfigAsset;
  // Forward declaring type: NetworkPrefabTable
  class NetworkPrefabTable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkProjectConfig::Static);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkProjectConfig::Static*, "Fusion", "NetworkProjectConfig/Static");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkProjectConfig/Static
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkProjectConfig::Static : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkProjectConfig::Static::LoadConfigDelegate
    class LoadConfigDelegate;
    // Nested type: ::Fusion::NetworkProjectConfig::Static::$$c
    class $$c;
    // Get static field: static private readonly Fusion.NetworkProjectConfig/Static/LoadConfigDelegate LoadEditMode
    static ::Fusion::NetworkProjectConfig::Static::LoadConfigDelegate* _get_LoadEditMode();
    // Set static field: static private readonly Fusion.NetworkProjectConfig/Static/LoadConfigDelegate LoadEditMode
    static void _set_LoadEditMode(::Fusion::NetworkProjectConfig::Static::LoadConfigDelegate* value);
    // Get static field: static public System.Lazy`1<Fusion.NetworkProjectConfigAsset> Instance
    static ::System::Lazy_1<::Fusion::NetworkProjectConfigAsset*>* _get_Instance();
    // Set static field: static public System.Lazy`1<Fusion.NetworkProjectConfigAsset> Instance
    static void _set_Instance(::System::Lazy_1<::Fusion::NetworkProjectConfigAsset*>* value);
    // Get static field: static public Fusion.NetworkProjectConfig/AssetLoadingDelegate CustomLoadConfig
    static ::Fusion::NetworkProjectConfig::AssetLoadingDelegate* _get_CustomLoadConfig();
    // Set static field: static public Fusion.NetworkProjectConfig/AssetLoadingDelegate CustomLoadConfig
    static void _set_CustomLoadConfig(::Fusion::NetworkProjectConfig::AssetLoadingDelegate* value);
    // Get static field: static public Fusion.NetworkProjectConfig/AssetUndloadingDelegate CustomUnloadConfig
    static ::Fusion::NetworkProjectConfig::AssetUndloadingDelegate* _get_CustomUnloadConfig();
    // Set static field: static public Fusion.NetworkProjectConfig/AssetUndloadingDelegate CustomUnloadConfig
    static void _set_CustomUnloadConfig(::Fusion::NetworkProjectConfig::AssetUndloadingDelegate* value);
    // static private System.Void .cctor()
    // Offset: 0x2B53324
    static void _cctor();
    // static public System.Void Reload()
    // Offset: 0x2B52754
    static void Reload();
    // static private System.Void UnloadConfigAsset(Fusion.NetworkProjectConfigAsset asset)
    // Offset: 0x2B535A4
    static void UnloadConfigAsset(::Fusion::NetworkProjectConfigAsset* asset);
    // static private System.Void InitPrefabs(Fusion.NetworkPrefabTable table, Fusion.NetworkProjectConfigAsset wrapper)
    // Offset: 0x2B536A4
    static void InitPrefabs(::Fusion::NetworkPrefabTable* table, ::Fusion::NetworkProjectConfigAsset* wrapper);
  }; // Fusion.NetworkProjectConfig/Static
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Static::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkProjectConfig::Static::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig::Static*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Static::Reload
// Il2CppName: Reload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkProjectConfig::Static::Reload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig::Static*), "Reload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Static::UnloadConfigAsset
// Il2CppName: UnloadConfigAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkProjectConfigAsset*)>(&Fusion::NetworkProjectConfig::Static::UnloadConfigAsset)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfigAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig::Static*), "UnloadConfigAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkProjectConfig::Static::InitPrefabs
// Il2CppName: InitPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkPrefabTable*, ::Fusion::NetworkProjectConfigAsset*)>(&Fusion::NetworkProjectConfig::Static::InitPrefabs)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabTable")->byval_arg;
    static auto* wrapper = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkProjectConfigAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkProjectConfig::Static*), "InitPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, wrapper});
  }
};
