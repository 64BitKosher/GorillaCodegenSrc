// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Timer
#include "Fusion/Timer.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: TimerDelta
  struct TimerDelta;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::TimerDelta, "Fusion", "TimerDelta");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.TimerDelta
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimerDelta/*, public ::System::ValueType*/ {
    public:
    public:
    // private Fusion.Timer _timer
    // Size: 0x11
    // Offset: 0x0
    ::Fusion::Timer timer;
    // Field size check
    static_assert(sizeof(::Fusion::Timer) == 0x11);
    // Padding between fields: timer and: timerLast
    char __padding0[0x7] = {};
    // private System.Double _timerLast
    // Size: 0x8
    // Offset: 0x18
    double timerLast;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: TimerDelta
    constexpr TimerDelta(::Fusion::Timer timer_ = {}, double timerLast_ = {}) noexcept : timer{timer_}, timerLast{timerLast_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Fusion.Timer _timer
    [[deprecated("Use field access instead!")]] ::Fusion::Timer& dyn__timer();
    // Get instance field reference: private System.Double _timerLast
    [[deprecated("Use field access instead!")]] double& dyn__timerLast();
    // public System.Boolean get_IsRunning()
    // Offset: 0x2AD96FC
    bool get_IsRunning();
    // public System.Double Consume()
    // Offset: 0x2AD970C
    double Consume();
    // public System.Double Peek()
    // Offset: 0x2AD9828
    double Peek();
    // static public Fusion.TimerDelta StartNew()
    // Offset: 0x2AD993C
    static ::Fusion::TimerDelta StartNew();
  }; // Fusion.TimerDelta
  #pragma pack(pop)
  static check_size<sizeof(TimerDelta), 24 + sizeof(double)> __Fusion_TimerDeltaSizeCheck;
  static_assert(sizeof(TimerDelta) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::TimerDelta::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::TimerDelta::*)()>(&Fusion::TimerDelta::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TimerDelta), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TimerDelta::Consume
// Il2CppName: Consume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::TimerDelta::*)()>(&Fusion::TimerDelta::Consume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TimerDelta), "Consume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TimerDelta::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::TimerDelta::*)()>(&Fusion::TimerDelta::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TimerDelta), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::TimerDelta::StartNew
// Il2CppName: StartNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::TimerDelta (*)()>(&Fusion::TimerDelta::StartNew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::TimerDelta), "StartNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
