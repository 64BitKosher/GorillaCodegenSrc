// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: CRC64
  class CRC64;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::CRC64);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CRC64*, "Fusion", "CRC64");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.CRC64
  // [TokenAttribute] Offset: FFFFFFFF
  class CRC64 : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.UInt64[] _tab
    static ::ArrayW<uint64_t> _get__tab();
    // Set static field: static private readonly System.UInt64[] _tab
    static void _set__tab(::ArrayW<uint64_t> value);
    // static public System.UInt64 Compute(System.Byte* data, System.Int32 length)
    // Offset: 0x2AD6CB0
    static uint64_t Compute(uint8_t* data, int length);
    // static public System.UInt64 Compute(System.UInt64 crc, System.Byte* data, System.Int32 offset, System.Int32 length)
    // Offset: 0x2AD6D1C
    static uint64_t Compute(uint64_t crc, uint8_t* data, int offset, int length);
    // static private System.Void .cctor()
    // Offset: 0x2AD6DDC
    static void _cctor();
  }; // Fusion.CRC64
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::CRC64::Compute
// Il2CppName: Compute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint8_t*, int)>(&Fusion::CRC64::Compute)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CRC64*), "Compute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: Fusion::CRC64::Compute
// Il2CppName: Compute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, uint8_t*, int, int)>(&Fusion::CRC64::Compute)> {
  static const MethodInfo* get() {
    static auto* crc = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CRC64*), "Compute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{crc, data, offset, length});
  }
};
// Writing MetadataGetter for method: Fusion::CRC64::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::CRC64::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CRC64*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
