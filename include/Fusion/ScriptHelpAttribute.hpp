// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: Fusion.EditorHeaderBackColor
#include "Fusion/EditorHeaderBackColor.hpp"
// Including type: Fusion.EditorHeaderIcon
#include "Fusion/EditorHeaderIcon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: ScriptHelpAttribute
  class ScriptHelpAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::ScriptHelpAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::ScriptHelpAttribute*, "Fusion", "ScriptHelpAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.ScriptHelpAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ScriptHelpAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String <Url>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Fusion.EditorHeaderBackColor <BackColor>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::Fusion::EditorHeaderBackColor BackColor;
    // Field size check
    static_assert(sizeof(::Fusion::EditorHeaderBackColor) == 0x4);
    // private Fusion.EditorHeaderIcon <Icon>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::Fusion::EditorHeaderIcon Icon;
    // Field size check
    static_assert(sizeof(::Fusion::EditorHeaderIcon) == 0x4);
    // private System.String <Title>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <Url>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Url$k__BackingField();
    // Get instance field reference: private Fusion.EditorHeaderBackColor <BackColor>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::EditorHeaderBackColor& dyn_$BackColor$k__BackingField();
    // Get instance field reference: private Fusion.EditorHeaderIcon <Icon>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::EditorHeaderIcon& dyn_$Icon$k__BackingField();
    // Get instance field reference: private System.String <Title>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Title$k__BackingField();
    // public System.String get_Url()
    // Offset: 0x2AFF404
    ::StringW get_Url();
    // public System.Void set_Url(System.String value)
    // Offset: 0x2AFF40C
    void set_Url(::StringW value);
    // public Fusion.EditorHeaderBackColor get_BackColor()
    // Offset: 0x2AFF414
    ::Fusion::EditorHeaderBackColor get_BackColor();
    // public System.Void set_BackColor(Fusion.EditorHeaderBackColor value)
    // Offset: 0x2AFF41C
    void set_BackColor(::Fusion::EditorHeaderBackColor value);
    // public Fusion.EditorHeaderIcon get_Icon()
    // Offset: 0x2AFF424
    ::Fusion::EditorHeaderIcon get_Icon();
    // public System.Void set_Icon(Fusion.EditorHeaderIcon value)
    // Offset: 0x2AFF42C
    void set_Icon(::Fusion::EditorHeaderIcon value);
    // public System.String get_Title()
    // Offset: 0x2AFF434
    ::StringW get_Title();
    // public System.Void set_Title(System.String value)
    // Offset: 0x2AFF43C
    void set_Title(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x2AFF444
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScriptHelpAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ScriptHelpAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScriptHelpAttribute*, creationType>()));
    }
  }; // Fusion.ScriptHelpAttribute
  #pragma pack(pop)
  static check_size<sizeof(ScriptHelpAttribute), 32 + sizeof(::StringW)> __Fusion_ScriptHelpAttributeSizeCheck;
  static_assert(sizeof(ScriptHelpAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::get_Url
// Il2CppName: get_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::ScriptHelpAttribute::*)()>(&Fusion::ScriptHelpAttribute::get_Url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "get_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::set_Url
// Il2CppName: set_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::ScriptHelpAttribute::*)(::StringW)>(&Fusion::ScriptHelpAttribute::set_Url)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "set_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::get_BackColor
// Il2CppName: get_BackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::EditorHeaderBackColor (Fusion::ScriptHelpAttribute::*)()>(&Fusion::ScriptHelpAttribute::get_BackColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "get_BackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::set_BackColor
// Il2CppName: set_BackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::ScriptHelpAttribute::*)(::Fusion::EditorHeaderBackColor)>(&Fusion::ScriptHelpAttribute::set_BackColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "EditorHeaderBackColor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "set_BackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::get_Icon
// Il2CppName: get_Icon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::EditorHeaderIcon (Fusion::ScriptHelpAttribute::*)()>(&Fusion::ScriptHelpAttribute::get_Icon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "get_Icon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::set_Icon
// Il2CppName: set_Icon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::ScriptHelpAttribute::*)(::Fusion::EditorHeaderIcon)>(&Fusion::ScriptHelpAttribute::set_Icon)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "EditorHeaderIcon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "set_Icon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::get_Title
// Il2CppName: get_Title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::ScriptHelpAttribute::*)()>(&Fusion::ScriptHelpAttribute::get_Title)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "get_Title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::set_Title
// Il2CppName: set_Title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::ScriptHelpAttribute::*)(::StringW)>(&Fusion::ScriptHelpAttribute::set_Title)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::ScriptHelpAttribute*), "set_Title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::ScriptHelpAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
