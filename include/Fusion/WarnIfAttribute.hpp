// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.DoIfAttribute
#include "Fusion/DoIfAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: WarnIfAttribute
  class WarnIfAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::WarnIfAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::WarnIfAttribute*, "Fusion", "WarnIfAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.WarnIfAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class WarnIfAttribute : public ::Fusion::DoIfAttribute {
    public:
    // Writing base type padding for base size: 0x2C to desired offset: 0x30
    char ___base_padding[0x4] = {};
    public:
    // public System.String Message
    // Size: 0x8
    // Offset: 0x30
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 MsgType
    // Size: 0x4
    // Offset: 0x38
    int MsgType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MsgType and: MsgProvider
    char __padding1[0x4] = {};
    // public System.String MsgProvider
    // Size: 0x8
    // Offset: 0x40
    ::StringW MsgProvider;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String MsgTypeProvider
    // Size: 0x8
    // Offset: 0x48
    ::StringW MsgTypeProvider;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ActionMethod
    // Size: 0x8
    // Offset: 0x50
    ::StringW ActionMethod;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean UseMsgIconOnly
    // Size: 0x1
    // Offset: 0x58
    bool UseMsgIconOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String Message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Message();
    // Get instance field reference: public System.Int32 MsgType
    [[deprecated("Use field access instead!")]] int& dyn_MsgType();
    // Get instance field reference: public System.String MsgProvider
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MsgProvider();
    // Get instance field reference: public System.String MsgTypeProvider
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MsgTypeProvider();
    // Get instance field reference: public System.String ActionMethod
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ActionMethod();
    // Get instance field reference: public System.Boolean UseMsgIconOnly
    [[deprecated("Use field access instead!")]] bool& dyn_UseMsgIconOnly();
    // public System.Void .ctor(System.String conditionMember, System.String message)
    // Offset: 0x2AFF758
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarnIfAttribute* New_ctor(::StringW conditionMember, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::WarnIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarnIfAttribute*, creationType>(conditionMember, message)));
    }
    // public System.Void .ctor(System.String conditionMember, System.Double compareToValue, System.String message)
    // Offset: 0x2AFF7CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarnIfAttribute* New_ctor(::StringW conditionMember, double compareToValue, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::WarnIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarnIfAttribute*, creationType>(conditionMember, compareToValue, message)));
    }
    // public System.Void .ctor(System.String conditionMember, System.Boolean compareToValue, System.String message)
    // Offset: 0x2AFF844
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarnIfAttribute* New_ctor(::StringW conditionMember, bool compareToValue, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::WarnIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarnIfAttribute*, creationType>(conditionMember, compareToValue, message)));
    }
    // public System.Void .ctor()
    // Offset: 0x2AFF69C
    // Implemented from: Fusion.DecoratingPropertyAttribute
    // Base method: System.Void DecoratingPropertyAttribute::.ctor()
    // Base method: System.Void PropertyAttribute::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarnIfAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::WarnIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarnIfAttribute*, creationType>()));
    }
    // public System.Void .ctor(System.String message)
    // Offset: 0x2AFF6E8
    // Implemented from: Fusion.DoIfAttribute
    // Base method: System.Void DoIfAttribute::.ctor(System.String message)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarnIfAttribute* New_ctor(::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::WarnIfAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarnIfAttribute*, creationType>(message)));
    }
  }; // Fusion.WarnIfAttribute
  #pragma pack(pop)
  static check_size<sizeof(WarnIfAttribute), 88 + sizeof(bool)> __Fusion_WarnIfAttributeSizeCheck;
  static_assert(sizeof(WarnIfAttribute) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::WarnIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::WarnIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::WarnIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::WarnIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::WarnIfAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
