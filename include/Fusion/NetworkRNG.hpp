// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRNG
  struct NetworkRNG;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRNG, "Fusion", "NetworkRNG");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkRNG
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct NetworkRNG/*, public ::System::ValueType, public ::Fusion::INetworkStruct*/ {
    public:
    public:
    // private System.UInt64 _state
    // Size: 0x8
    // Offset: 0x0
    uint64_t state;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.UInt64 _inc
    // Size: 0x8
    // Offset: 0x8
    uint64_t inc;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: NetworkRNG
    constexpr NetworkRNG(uint64_t state_ = {}, uint64_t inc_ = {}) noexcept : state{state_}, inc{inc_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // static field const value: static System.Double FP_32_32_ToUnitDoubleInclusive
    static constexpr const double FP_32_32_ToUnitDoubleInclusive = 2.3283064370807974e-10;
    // Get static field: static System.Double FP_32_32_ToUnitDoubleInclusive
    static double _get_FP_32_32_ToUnitDoubleInclusive();
    // Set static field: static System.Double FP_32_32_ToUnitDoubleInclusive
    static void _set_FP_32_32_ToUnitDoubleInclusive(double value);
    // static field const value: static System.Double FP_32_32_ToUnitDoubleExclusive
    static constexpr const double FP_32_32_ToUnitDoubleExclusive = 2.3283064365386963e-10;
    // Get static field: static System.Double FP_32_32_ToUnitDoubleExclusive
    static double _get_FP_32_32_ToUnitDoubleExclusive();
    // Set static field: static System.Double FP_32_32_ToUnitDoubleExclusive
    static void _set_FP_32_32_ToUnitDoubleExclusive(double value);
    // static field const value: static System.Single FP_8_24_ToUnitSingleInclusive
    static constexpr const float FP_8_24_ToUnitSingleInclusive = 5.960465e-08;
    // Get static field: static System.Single FP_8_24_ToUnitSingleInclusive
    static float _get_FP_8_24_ToUnitSingleInclusive();
    // Set static field: static System.Single FP_8_24_ToUnitSingleInclusive
    static void _set_FP_8_24_ToUnitSingleInclusive(float value);
    // static field const value: static System.Single FP_8_24_ToUnitSingleExclusive
    static constexpr const float FP_8_24_ToUnitSingleExclusive = 5.9604645e-08;
    // Get static field: static System.Single FP_8_24_ToUnitSingleExclusive
    static float _get_FP_8_24_ToUnitSingleExclusive();
    // Set static field: static System.Single FP_8_24_ToUnitSingleExclusive
    static void _set_FP_8_24_ToUnitSingleExclusive(float value);
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 16;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // static field const value: static public System.UInt32 MAX
    static constexpr const uint MAX = 4294967295u;
    // Get static field: static public System.UInt32 MAX
    static uint _get_MAX();
    // Set static field: static public System.UInt32 MAX
    static void _set_MAX(uint value);
    // Get instance field reference: private System.UInt64 _state
    [[deprecated("Use field access instead!")]] uint64_t& dyn__state();
    // Get instance field reference: private System.UInt64 _inc
    [[deprecated("Use field access instead!")]] uint64_t& dyn__inc();
    // public Fusion.NetworkRNG get_Peek()
    // Offset: 0x2B48F6C
    ::Fusion::NetworkRNG get_Peek();
    // public System.Double Next()
    // Offset: 0x2B48F78
    double Next();
    // public System.Double NextExclusive()
    // Offset: 0x2B48FFC
    double NextExclusive();
    // public System.Single NextSingle()
    // Offset: 0x2B49044
    float NextSingle();
    // public System.Single NextSingleExclusive()
    // Offset: 0x2B49090
    float NextSingleExclusive();
    // public System.Int32 NextInt32()
    // Offset: 0x2B490DC
    int NextInt32();
    // public System.UInt32 NextUInt32()
    // Offset: 0x2B49118
    uint NextUInt32();
    // private System.UInt32 NextUnbiasedUInt32(System.UInt32 max)
    // Offset: 0x2B49154
    uint NextUnbiasedUInt32(uint max);
    // public System.Void .ctor(System.Int32 seed)
    // Offset: 0x2B491AC
    NetworkRNG(int seed);
    // private System.UInt32 NextUInt32Internal()
    // Offset: 0x2B48FC0
    uint NextUInt32Internal();
    // static private System.UInt64 NextSplitMix64(ref System.UInt64 x)
    // Offset: 0x2B49224
    static uint64_t NextSplitMix64(ByRef<uint64_t> x);
    // public System.Double RangeInclusive(System.Double minInclusive, System.Double maxInclusive)
    // Offset: 0x2B49460
    double RangeInclusive(double minInclusive, double maxInclusive);
    // public System.Single RangeInclusive(System.Single minInclusive, System.Single maxInclusive)
    // Offset: 0x2B494C0
    float RangeInclusive(float minInclusive, float maxInclusive);
    // public System.Int32 RangeExclusive(System.Int32 minInclusive, System.Int32 maxExclusive)
    // Offset: 0x2B49524
    int RangeExclusive(int minInclusive, int maxExclusive);
    // public System.Int32 RangeInclusive(System.Int32 minInclusive, System.Int32 maxInclusive)
    // Offset: 0x2B49550
    int RangeInclusive(int minInclusive, int maxInclusive);
    // public System.UInt32 RangeExclusive(System.UInt32 minInclusive, System.UInt32 maxExclusive)
    // Offset: 0x2B495B4
    uint RangeExclusive(uint minInclusive, uint maxExclusive);
    // public System.UInt32 RangeInclusive(System.UInt32 minInclusive, System.UInt32 maxInclusive)
    // Offset: 0x2B495E0
    uint RangeInclusive(uint minInclusive, uint maxInclusive);
    // public override System.String ToString()
    // Offset: 0x2B4927C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.NetworkRNG
  #pragma pack(pop)
  static check_size<sizeof(NetworkRNG), 8 + sizeof(uint64_t)> __Fusion_NetworkRNGSizeCheck;
  static_assert(sizeof(NetworkRNG) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkRNG::get_Peek
// Il2CppName: get_Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRNG (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::get_Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "get_Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::Next)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextExclusive
// Il2CppName: NextExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextExclusive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextSingle
// Il2CppName: NextSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextSingle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextSingleExclusive
// Il2CppName: NextSingleExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextSingleExclusive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextSingleExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextInt32
// Il2CppName: NextInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextUInt32
// Il2CppName: NextUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextUInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextUnbiasedUInt32
// Il2CppName: NextUnbiasedUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRNG::*)(uint)>(&Fusion::NetworkRNG::NextUnbiasedUInt32)> {
  static const MethodInfo* get() {
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextUnbiasedUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{max});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NetworkRNG
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextUInt32Internal
// Il2CppName: NextUInt32Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::NextUInt32Internal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextUInt32Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::NextSplitMix64
// Il2CppName: NextSplitMix64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<uint64_t>)>(&Fusion::NetworkRNG::NextSplitMix64)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "NextSplitMix64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeInclusive
// Il2CppName: RangeInclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::NetworkRNG::*)(double, double)>(&Fusion::NetworkRNG::RangeInclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* maxInclusive = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeInclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxInclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeInclusive
// Il2CppName: RangeInclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRNG::*)(float, float)>(&Fusion::NetworkRNG::RangeInclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxInclusive = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeInclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxInclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeExclusive
// Il2CppName: RangeExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRNG::*)(int, int)>(&Fusion::NetworkRNG::RangeExclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxExclusive = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxExclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeInclusive
// Il2CppName: RangeInclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRNG::*)(int, int)>(&Fusion::NetworkRNG::RangeInclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxInclusive = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeInclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxInclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeExclusive
// Il2CppName: RangeExclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRNG::*)(uint, uint)>(&Fusion::NetworkRNG::RangeExclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* maxExclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeExclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxExclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::RangeInclusive
// Il2CppName: RangeInclusive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRNG::*)(uint, uint)>(&Fusion::NetworkRNG::RangeInclusive)> {
  static const MethodInfo* get() {
    static auto* minInclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* maxInclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "RangeInclusive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minInclusive, maxInclusive});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRNG::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkRNG::*)()>(&Fusion::NetworkRNG::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRNG), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
