// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PropertyAttribute
#include "Fusion/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: UnityResourcePathAttribute
  class UnityResourcePathAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::UnityResourcePathAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::UnityResourcePathAttribute*, "Fusion", "UnityResourcePathAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.UnityResourcePathAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class UnityResourcePathAttribute : public ::Fusion::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // private readonly System.Type <ResourceType>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* ResourceType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private readonly System.Type <ResourceType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$ResourceType$k__BackingField();
    // public System.Void .ctor(System.Type resourceType)
    // Offset: 0x2AFF62C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityResourcePathAttribute* New_ctor(::System::Type* resourceType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::UnityResourcePathAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityResourcePathAttribute*, creationType>(resourceType)));
    }
    // public System.Type get_ResourceType()
    // Offset: 0x2AFF65C
    ::System::Type* get_ResourceType();
  }; // Fusion.UnityResourcePathAttribute
  #pragma pack(pop)
  static check_size<sizeof(UnityResourcePathAttribute), 24 + sizeof(::System::Type*)> __Fusion_UnityResourcePathAttributeSizeCheck;
  static_assert(sizeof(UnityResourcePathAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::UnityResourcePathAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::UnityResourcePathAttribute::get_ResourceType
// Il2CppName: get_ResourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Fusion::UnityResourcePathAttribute::*)()>(&Fusion::UnityResourcePathAttribute::get_ResourceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UnityResourcePathAttribute*), "get_ResourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
