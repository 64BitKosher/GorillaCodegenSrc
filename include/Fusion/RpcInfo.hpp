// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
// Including type: Fusion.PlayerRef
#include "Fusion/PlayerRef.hpp"
// Including type: Fusion.RpcChannel
#include "Fusion/RpcChannel.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: RpcHostMode
  struct RpcHostMode;
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RpcInfo
  struct RpcInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RpcInfo, "Fusion", "RpcInfo");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.RpcInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct RpcInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.Tick Tick
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Tick Tick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // public Fusion.PlayerRef Source
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::PlayerRef Source;
    // Field size check
    static_assert(sizeof(::Fusion::PlayerRef) == 0x4);
    // public Fusion.RpcChannel Channel
    // Size: 0x4
    // Offset: 0x8
    ::Fusion::RpcChannel Channel;
    // Field size check
    static_assert(sizeof(::Fusion::RpcChannel) == 0x4);
    // public System.Boolean IsInvokeLocal
    // Size: 0x1
    // Offset: 0xC
    bool IsInvokeLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: RpcInfo
    constexpr RpcInfo(::Fusion::Tick Tick_ = {}, ::Fusion::PlayerRef Source_ = {}, ::Fusion::RpcChannel Channel_ = {}, bool IsInvokeLocal_ = {}) noexcept : Tick{Tick_}, Source{Source_}, Channel{Channel_}, IsInvokeLocal{IsInvokeLocal_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Fusion.Tick Tick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn_Tick();
    // Get instance field reference: public Fusion.PlayerRef Source
    [[deprecated("Use field access instead!")]] ::Fusion::PlayerRef& dyn_Source();
    // Get instance field reference: public Fusion.RpcChannel Channel
    [[deprecated("Use field access instead!")]] ::Fusion::RpcChannel& dyn_Channel();
    // Get instance field reference: public System.Boolean IsInvokeLocal
    [[deprecated("Use field access instead!")]] bool& dyn_IsInvokeLocal();
    // static public Fusion.RpcInfo FromLocal(Fusion.NetworkRunner runner, Fusion.RpcChannel channel, Fusion.RpcHostMode hostMode)
    // Offset: 0x2B508AC
    static ::Fusion::RpcInfo FromLocal(::Fusion::NetworkRunner* runner, ::Fusion::RpcChannel channel, ::Fusion::RpcHostMode hostMode);
    // static public Fusion.RpcInfo FromMessage(Fusion.NetworkRunner runner, Fusion.SimulationMessage* message, Fusion.RpcHostMode hostMode)
    // Offset: 0x2B50994
    static ::Fusion::RpcInfo FromMessage(::Fusion::NetworkRunner* runner, ::Fusion::SimulationMessage* message, ::Fusion::RpcHostMode hostMode);
    // public override System.String ToString()
    // Offset: 0x2B50A54
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Fusion.RpcInfo
  #pragma pack(pop)
  static check_size<sizeof(RpcInfo), 12 + sizeof(bool)> __Fusion_RpcInfoSizeCheck;
  static_assert(sizeof(RpcInfo) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RpcInfo::FromLocal
// Il2CppName: FromLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcInfo (*)(::Fusion::NetworkRunner*, ::Fusion::RpcChannel, ::Fusion::RpcHostMode)>(&Fusion::RpcInfo::FromLocal)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("Fusion", "RpcChannel")->byval_arg;
    static auto* hostMode = &::il2cpp_utils::GetClassFromName("Fusion", "RpcHostMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcInfo), "FromLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, channel, hostMode});
  }
};
// Writing MetadataGetter for method: Fusion::RpcInfo::FromMessage
// Il2CppName: FromMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcInfo (*)(::Fusion::NetworkRunner*, ::Fusion::SimulationMessage*, ::Fusion::RpcHostMode)>(&Fusion::RpcInfo::FromMessage)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* hostMode = &::il2cpp_utils::GetClassFromName("Fusion", "RpcHostMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcInfo), "FromMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, message, hostMode});
  }
};
// Writing MetadataGetter for method: Fusion::RpcInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::RpcInfo::*)()>(&Fusion::RpcInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::RpcInfo), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
