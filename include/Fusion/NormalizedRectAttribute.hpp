// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NormalizedRectAttribute
  class NormalizedRectAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NormalizedRectAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NormalizedRectAttribute*, "Fusion", "NormalizedRectAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NormalizedRectAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class NormalizedRectAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    public:
    // public System.Boolean InvertY
    // Size: 0x1
    // Offset: 0x14
    bool InvertY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvertY and: AspectRatio
    char __padding0[0x3] = {};
    // public System.Single AspectRatio
    // Size: 0x4
    // Offset: 0x18
    float AspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.Boolean InvertY
    [[deprecated("Use field access instead!")]] bool& dyn_InvertY();
    // Get instance field reference: public System.Single AspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_AspectRatio();
    // public System.Void .ctor(System.Boolean invertY, System.Single aspectRatio)
    // Offset: 0x2AFF380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NormalizedRectAttribute* New_ctor(bool invertY, float aspectRatio) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NormalizedRectAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NormalizedRectAttribute*, creationType>(invertY, aspectRatio)));
    }
  }; // Fusion.NormalizedRectAttribute
  #pragma pack(pop)
  static check_size<sizeof(NormalizedRectAttribute), 24 + sizeof(float)> __Fusion_NormalizedRectAttributeSizeCheck;
  static_assert(sizeof(NormalizedRectAttribute) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NormalizedRectAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
