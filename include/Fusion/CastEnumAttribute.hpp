// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: CastEnumAttribute
  class CastEnumAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::CastEnumAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CastEnumAttribute*, "Fusion", "CastEnumAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.CastEnumAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class CastEnumAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // public System.String GetTypeMethodName
    // Size: 0x8
    // Offset: 0x18
    ::StringW GetTypeMethodName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Type CastToType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* CastToType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.String GetTypeMethodName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GetTypeMethodName();
    // Get instance field reference: public System.Type CastToType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_CastToType();
    // public System.Void .ctor(System.String getTypeMethodName)
    // Offset: 0x2AFECCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CastEnumAttribute* New_ctor(::StringW getTypeMethodName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CastEnumAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CastEnumAttribute*, creationType>(getTypeMethodName)));
    }
    // public System.Void .ctor(System.Type castToType)
    // Offset: 0x2AFECFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CastEnumAttribute* New_ctor(::System::Type* castToType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CastEnumAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CastEnumAttribute*, creationType>(castToType)));
    }
  }; // Fusion.CastEnumAttribute
  #pragma pack(pop)
  static check_size<sizeof(CastEnumAttribute), 32 + sizeof(::System::Type*)> __Fusion_CastEnumAttributeSizeCheck;
  static_assert(sizeof(CastEnumAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::CastEnumAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::CastEnumAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
