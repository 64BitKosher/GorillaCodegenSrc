// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.HitboxTypes
#include "Fusion/HitboxTypes.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Fusion.LagCompensationUtils/BoxNarrowData
#include "Fusion/LagCompensationUtils_BoxNarrowData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Hitbox
  class Hitbox;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: HitboxCollider
  struct HitboxCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HitboxCollider, "Fusion", "HitboxCollider");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1AD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.HitboxCollider
  // [TokenAttribute] Offset: FFFFFFFF
  struct HitboxCollider/*, public ::System::ValueType*/ {
    public:
    public:
    // Fusion.HitboxTypes Type
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::HitboxTypes Type;
    // Field size check
    static_assert(sizeof(::Fusion::HitboxTypes) == 0x4);
    // UnityEngine.Matrix4x4 LocalToWorld
    // Size: 0x40
    // Offset: 0x4
    ::UnityEngine::Matrix4x4 LocalToWorld;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // UnityEngine.Vector3 Offset
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 Offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 BoxExtents
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 BoxExtents;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // System.Single SphereRadius
    // Size: 0x4
    // Offset: 0x5C
    float SphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean Active
    // Size: 0x1
    // Offset: 0x60
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Active and: Hitbox
    char __padding5[0x7] = {};
    // Fusion.Hitbox Hitbox
    // Size: 0x8
    // Offset: 0x68
    ::Fusion::Hitbox* Hitbox;
    // Field size check
    static_assert(sizeof(::Fusion::Hitbox*) == 0x8);
    // System.Int32 layerMask
    // Size: 0x4
    // Offset: 0x70
    int layerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 DebugTick
    // Size: 0x4
    // Offset: 0x74
    int DebugTick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean Used
    // Size: 0x1
    // Offset: 0x78
    bool Used;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Used and: Next
    char __padding9[0x3] = {};
    // System.Int32 Next
    // Size: 0x4
    // Offset: 0x7C
    int Next;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Fusion.LagCompensationUtils/BoxNarrowData BoxNarrowData
    // Size: 0x12C
    // Offset: 0x80
    ::Fusion::LagCompensationUtils::BoxNarrowData BoxNarrowData;
    // Field size check
    static_assert(sizeof(::Fusion::LagCompensationUtils::BoxNarrowData) == 0x12C);
    // private System.Boolean <IsBoxNarrowDataInitialized>k__BackingField
    // Size: 0x1
    // Offset: 0x1AC
    bool IsBoxNarrowDataInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: HitboxCollider
    constexpr HitboxCollider(::Fusion::HitboxTypes Type_ = {}, ::UnityEngine::Matrix4x4 LocalToWorld_ = {}, ::UnityEngine::Vector3 Offset_ = {}, ::UnityEngine::Vector3 BoxExtents_ = {}, float SphereRadius_ = {}, bool Active_ = {}, ::Fusion::Hitbox* Hitbox_ = {}, int layerMask_ = {}, int DebugTick_ = {}, bool Used_ = {}, int Next_ = {}, ::Fusion::LagCompensationUtils::BoxNarrowData BoxNarrowData_ = {}, bool IsBoxNarrowDataInitialized_ = {}) noexcept : Type{Type_}, LocalToWorld{LocalToWorld_}, Offset{Offset_}, BoxExtents{BoxExtents_}, SphereRadius{SphereRadius_}, Active{Active_}, Hitbox{Hitbox_}, layerMask{layerMask_}, DebugTick{DebugTick_}, Used{Used_}, Next{Next_}, BoxNarrowData{BoxNarrowData_}, IsBoxNarrowDataInitialized{IsBoxNarrowDataInitialized_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Fusion.HitboxTypes Type
    [[deprecated("Use field access instead!")]] ::Fusion::HitboxTypes& dyn_Type();
    // Get instance field reference: UnityEngine.Matrix4x4 LocalToWorld
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_LocalToWorld();
    // Get instance field reference: UnityEngine.Vector3 Offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Offset();
    // Get instance field reference: UnityEngine.Vector3 BoxExtents
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BoxExtents();
    // Get instance field reference: System.Single SphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_SphereRadius();
    // Get instance field reference: System.Boolean Active
    [[deprecated("Use field access instead!")]] bool& dyn_Active();
    // Get instance field reference: Fusion.Hitbox Hitbox
    [[deprecated("Use field access instead!")]] ::Fusion::Hitbox*& dyn_Hitbox();
    // Get instance field reference: System.Int32 layerMask
    [[deprecated("Use field access instead!")]] int& dyn_layerMask();
    // Get instance field reference: System.Int32 DebugTick
    [[deprecated("Use field access instead!")]] int& dyn_DebugTick();
    // Get instance field reference: System.Boolean Used
    [[deprecated("Use field access instead!")]] bool& dyn_Used();
    // Get instance field reference: System.Int32 Next
    [[deprecated("Use field access instead!")]] int& dyn_Next();
    // Get instance field reference: Fusion.LagCompensationUtils/BoxNarrowData BoxNarrowData
    [[deprecated("Use field access instead!")]] ::Fusion::LagCompensationUtils::BoxNarrowData& dyn_BoxNarrowData();
    // Get instance field reference: private System.Boolean <IsBoxNarrowDataInitialized>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsBoxNarrowDataInitialized$k__BackingField();
    // System.Boolean get_IsBoxNarrowDataInitialized()
    // Offset: 0x2B4491C
    bool get_IsBoxNarrowDataInitialized();
    // System.Void set_IsBoxNarrowDataInitialized(System.Boolean value)
    // Offset: 0x2B44924
    void set_IsBoxNarrowDataInitialized(bool value);
    // UnityEngine.Vector3 get_Position()
    // Offset: 0x2B4371C
    ::UnityEngine::Vector3 get_Position();
    // static System.Void Lerp(ref Fusion.HitboxCollider from, ref Fusion.HitboxCollider to, System.Single alpha, ref Fusion.HitboxCollider result)
    // Offset: 0x2B43AB8
    static void Lerp(ByRef<::Fusion::HitboxCollider> from, ByRef<::Fusion::HitboxCollider> to, float alpha, ByRef<::Fusion::HitboxCollider> result);
    // System.Void InitNarrowData()
    // Offset: 0x2B433E0
    void InitNarrowData();
    // static private UnityEngine.Matrix4x4 Lerp(ref UnityEngine.Matrix4x4 from, ref UnityEngine.Matrix4x4 to, System.Single alpha)
    // Offset: 0x2B44930
    static ::UnityEngine::Matrix4x4 Lerp(ByRef<::UnityEngine::Matrix4x4> from, ByRef<::UnityEngine::Matrix4x4> to, float alpha);
  }; // Fusion.HitboxCollider
  #pragma pack(pop)
  static check_size<sizeof(HitboxCollider), 428 + sizeof(bool)> __Fusion_HitboxColliderSizeCheck;
  static_assert(sizeof(HitboxCollider) == 0x1AD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::HitboxCollider::get_IsBoxNarrowDataInitialized
// Il2CppName: get_IsBoxNarrowDataInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxCollider::*)()>(&Fusion::HitboxCollider::get_IsBoxNarrowDataInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "get_IsBoxNarrowDataInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxCollider::set_IsBoxNarrowDataInitialized
// Il2CppName: set_IsBoxNarrowDataInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxCollider::*)(bool)>(&Fusion::HitboxCollider::set_IsBoxNarrowDataInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "set_IsBoxNarrowDataInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxCollider::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::HitboxCollider::*)()>(&Fusion::HitboxCollider::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxCollider::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Fusion::HitboxCollider>, ByRef<::Fusion::HitboxCollider>, float, ByRef<::Fusion::HitboxCollider>)>(&Fusion::HitboxCollider::Lerp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxCollider")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxCollider")->this_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxCollider")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, alpha, result});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxCollider::InitNarrowData
// Il2CppName: InitNarrowData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxCollider::*)()>(&Fusion::HitboxCollider::InitNarrowData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "InitNarrowData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxCollider::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (*)(ByRef<::UnityEngine::Matrix4x4>, ByRef<::UnityEngine::Matrix4x4>, float)>(&Fusion::HitboxCollider::Lerp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxCollider), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, alpha});
  }
};
