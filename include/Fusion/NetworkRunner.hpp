// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Behaviour
#include "Fusion/Behaviour.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: Fusion.Simulation/ICallbacks
#include "Fusion/Simulation_ICallbacks.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: Fusion.ReadAccuracy
#include "Fusion/ReadAccuracy.hpp"
// Including type: Fusion.WriteAccuracy
#include "Fusion/WriteAccuracy.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.ValueTuple`5
#include "System/ValueTuple_5.hpp"
// Including type: Unity.Jobs.JobHandle
#include "Unity/Jobs/JobHandle.hpp"
// Including type: Fusion.GameMode
#include "Fusion/GameMode.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Fusion.ShutdownReason
#include "Fusion/ShutdownReason.hpp"
// Including type: Fusion.NetworkObjectGuid
#include "Fusion/NetworkObjectGuid.hpp"
// Including type: Fusion.SceneRef
#include "Fusion/SceneRef.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: Fusion.SimulationConfig
#include "Fusion/SimulationConfig.hpp"
// Including type: Fusion.PlayerRef
#include "Fusion/PlayerRef.hpp"
// Including type: Fusion.NetworkInput
#include "Fusion/NetworkInput.hpp"
// Including type: Fusion.NetworkBehaviourId
#include "Fusion/NetworkBehaviourId.hpp"
// Including type: Fusion.NetworkObjectPredictionKey
#include "Fusion/NetworkObjectPredictionKey.hpp"
// Including type: Fusion.NetworkObjectHeaderPtr
#include "Fusion/NetworkObjectHeaderPtr.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Fusion.NetworkPrefabId
#include "Fusion/NetworkPrefabId.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObjectRefMap`1<T>
  template<typename T>
  class NetworkObjectRefMap_1;
  // Forward declaring type: SimulationModes
  struct SimulationModes;
  // Forward declaring type: NetworkObject
  class NetworkObject;
  // Forward declaring type: SimulationBehaviourUpdater
  class SimulationBehaviourUpdater;
  // Forward declaring type: INetworkRunnerCallbacks
  class INetworkRunnerCallbacks;
  // Forward declaring type: Allocator
  struct Allocator;
  // Forward declaring type: RunnerVisibilityNode
  class RunnerVisibilityNode;
  // Forward declaring type: NetworkProjectConfig
  class NetworkProjectConfig;
  // Forward declaring type: INetworkObjectPool
  class INetworkObjectPool;
  // Forward declaring type: SessionInfo
  class SessionInfo;
  // Forward declaring type: LobbyInfo
  class LobbyInfo;
  // Forward declaring type: CloudServices
  class CloudServices;
  // Forward declaring type: INetworkSceneManager
  class INetworkSceneManager;
  // Forward declaring type: INetworkSceneManagerObjectResolver
  class INetworkSceneManagerObjectResolver;
  // Forward declaring type: SimulationStages
  struct SimulationStages;
  // Forward declaring type: Tick
  struct Tick;
  // Forward declaring type: HitboxManager
  class HitboxManager;
  // Forward declaring type: NetworkRunnerInitializeArgs
  struct NetworkRunnerInitializeArgs;
  // Forward declaring type: SimulationBehaviour
  class SimulationBehaviour;
  // Forward declaring type: SimulationBehaviourListScope
  struct SimulationBehaviourListScope;
  // Forward declaring type: SimulationMessage
  struct SimulationMessage;
  // Forward declaring type: RpcSendResult
  struct RpcSendResult;
  // Forward declaring type: ConnectionType
  struct ConnectionType;
  // Forward declaring type: INetworkInput
  class INetworkInput;
  // Forward declaring type: InterpolationData
  struct InterpolationData;
  // Forward declaring type: NetworkBehaviour
  class NetworkBehaviour;
  // Forward declaring type: SimulationSnapshot
  class SimulationSnapshot;
  // Forward declaring type: NetworkPrefabRef
  struct NetworkPrefabRef;
  // Forward declaring type: NetworkPrefabAsset
  class NetworkPrefabAsset;
  // Forward declaring type: NetworkObjectDestroyFlags
  struct NetworkObjectDestroyFlags;
  // Forward declaring type: IPredictedSpawnBehaviour
  class IPredictedSpawnBehaviour;
  // Forward declaring type: IPredictedDespawnBehaviour
  class IPredictedDespawnBehaviour;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: RpcTargetStatus
  struct RpcTargetStatus;
  // Forward declaring type: NetworkObjectFlags
  struct NetworkObjectFlags;
  // Forward declaring type: LogOptions
  struct LogOptions;
  // Skipping declaration: HostSnapshotCompressionJob because it is already included!
  // Forward declaring type: HostMigrationToken
  class HostMigrationToken;
  // Forward declaring type: StartGameResult
  class StartGameResult;
  // Forward declaring type: SessionLobby
  struct SessionLobby;
  // Forward declaring type: StartGameArgs
  struct StartGameArgs;
  // Forward declaring type: CloudCommunicator
  class CloudCommunicator;
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: HostMigration
  class HostMigration;
  // Forward declaring type: Snapshot
  class Snapshot;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IReadOnlyList`1 because it is already included!
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Skipping declaration: IEnumerable`1 because it is already included!
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: INetSocket
  class INetSocket;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: PhysicsScene
  struct PhysicsScene;
  // Forward declaring type: PhysicsScene2D
  struct PhysicsScene2D;
  // Skipping declaration: Component because it is already included!
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: AuthenticationValues
  class AuthenticationValues;
  // Forward declaring type: AppSettings
  class AppSettings;
}
// Forward declaring namespace: Fusion::Sockets::Stun
namespace Fusion::Sockets::Stun {
  // Forward declaring type: NATType
  struct NATType;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkRunner);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner*, "Fusion", "NetworkRunner");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.NetworkRunner
  // [TokenAttribute] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class NetworkRunner : public ::Fusion::Behaviour/*, public ::Fusion::ILogBuilder, public ::Fusion::Simulation::ICallbacks*/ {
    public:
    // Nested type: ::Fusion::NetworkRunner::BuildTypes
    struct BuildTypes;
    // Nested type: ::Fusion::NetworkRunner::States
    struct States;
    // Nested type: ::Fusion::NetworkRunner::ShutdownFlags
    struct ShutdownFlags;
    // Nested type: ::Fusion::NetworkRunner::OnBeforeSpawned
    class OnBeforeSpawned;
    // Nested type: ::Fusion::NetworkRunner::SpawnQueueEntry
    struct SpawnQueueEntry;
    // Nested type: ::Fusion::NetworkRunner::DeferredShutdownParams
    struct DeferredShutdownParams;
    // Nested type: ::Fusion::NetworkRunner::SimulationPhase
    struct SimulationPhase;
    // Nested type: ::Fusion::NetworkRunner::AttachOptions
    struct AttachOptions;
    // Nested type: ::Fusion::NetworkRunner::HostSnapshotCompressionJob
    struct HostSnapshotCompressionJob;
    // Nested type: ::Fusion::NetworkRunner::NetworkObjectInactivityGuard
    class NetworkObjectInactivityGuard;
    // Nested type: ::Fusion::NetworkRunner::$$c
    class $$c;
    // Nested type: ::Fusion::NetworkRunner::$$c__DisplayClass119_0
    class $$c__DisplayClass119_0;
    // Nested type: ::Fusion::NetworkRunner::$$c__DisplayClass119_1
    class $$c__DisplayClass119_1;
    // Nested type: ::Fusion::NetworkRunner::$ConnectToCloud$d__314
    struct $ConnectToCloud$d__314;
    // Nested type: ::Fusion::NetworkRunner::$DisconnectFromCloud$d__315
    struct $DisconnectFromCloud$d__315;
    // Nested type: ::Fusion::NetworkRunner::$GetResumeSnapshotNetworkObjects$d__257
    class $GetResumeSnapshotNetworkObjects$d__257;
    // Nested type: ::Fusion::NetworkRunner::$GetResumeSnapshotNetworkSceneObjects$d__258
    class $GetResumeSnapshotNetworkSceneObjects$d__258;
    // Nested type: ::Fusion::NetworkRunner::$JoinSessionLobby$d__312
    struct $JoinSessionLobby$d__312;
    // Nested type: ::Fusion::NetworkRunner::$RunHostMigrationResume$d__259
    class $RunHostMigrationResume$d__259;
    // Nested type: ::Fusion::NetworkRunner::$ShutdownAndBuildResult$d__318
    struct $ShutdownAndBuildResult$d__318;
    // Nested type: ::Fusion::NetworkRunner::$ShutdownWithCleanupCoroutine$d__118
    class $ShutdownWithCleanupCoroutine$d__118;
    // Nested type: ::Fusion::NetworkRunner::$StartGameModeCloud$d__317
    struct $StartGameModeCloud$d__317;
    // Nested type: ::Fusion::NetworkRunner::$StartGameModeSinglePlayer$d__316
    struct $StartGameModeSinglePlayer$d__316;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkRunner/ShutdownFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct ShutdownFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShutdownFlags
      constexpr ShutdownFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkRunner/ShutdownFlags Regular
      static constexpr const int Regular = 1;
      // Get static field: static public Fusion.NetworkRunner/ShutdownFlags Regular
      static ::Fusion::NetworkRunner::ShutdownFlags _get_Regular();
      // Set static field: static public Fusion.NetworkRunner/ShutdownFlags Regular
      static void _set_Regular(::Fusion::NetworkRunner::ShutdownFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkRunner/ShutdownFlags
    #pragma pack(pop)
    static check_size<sizeof(NetworkRunner::ShutdownFlags), 0 + sizeof(int)> __Fusion_NetworkRunner_ShutdownFlagsSizeCheck;
    static_assert(sizeof(NetworkRunner::ShutdownFlags) == 0x4);
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkRunner/SpawnQueueEntry
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpawnQueueEntry/*, public ::System::ValueType*/ {
      public:
      public:
      // public Fusion.NetworkPrefabId PrefabId
      // Size: 0x4
      // Offset: 0x0
      ::Fusion::NetworkPrefabId PrefabId;
      // Field size check
      static_assert(sizeof(::Fusion::NetworkPrefabId) == 0x4);
      // public System.Nullable`1<UnityEngine.Vector3> Position
      // Size: 0xFFFFFFFF
      // Offset: 0x4
      ::System::Nullable_1<::UnityEngine::Vector3> Position;
      // public System.Nullable`1<UnityEngine.Quaternion> Rotation
      // Size: 0xFFFFFFFF
      // Offset: 0x14
      ::System::Nullable_1<::UnityEngine::Quaternion> Rotation;
      // public System.Nullable`1<Fusion.PlayerRef> InputAuthority
      // Size: 0xFFFFFFFF
      // Offset: 0x28
      ::System::Nullable_1<::Fusion::PlayerRef> InputAuthority;
      // public System.Object OnBeforeSpawned
      // Size: 0x8
      // Offset: 0x30
      ::Il2CppObject* OnBeforeSpawned;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public System.Nullable`1<Fusion.NetworkObjectPredictionKey> PredictionKey
      // Size: 0xFFFFFFFF
      // Offset: 0x38
      ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> PredictionKey;
      // public System.Boolean SyncPhysics
      // Size: 0x1
      // Offset: 0x40
      bool SyncPhysics;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: SpawnQueueEntry
      constexpr SpawnQueueEntry(::Fusion::NetworkPrefabId PrefabId_ = {}, ::System::Nullable_1<::UnityEngine::Vector3> Position_ = {}, ::System::Nullable_1<::UnityEngine::Quaternion> Rotation_ = {}, ::System::Nullable_1<::Fusion::PlayerRef> InputAuthority_ = {}, ::Il2CppObject* OnBeforeSpawned_ = {}, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> PredictionKey_ = {}, bool SyncPhysics_ = {}) noexcept : PrefabId{PrefabId_}, Position{Position_}, Rotation{Rotation_}, InputAuthority{InputAuthority_}, OnBeforeSpawned{OnBeforeSpawned_}, PredictionKey{PredictionKey_}, SyncPhysics{SyncPhysics_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Fusion.NetworkPrefabId PrefabId
      [[deprecated("Use field access instead!")]] ::Fusion::NetworkPrefabId& dyn_PrefabId();
      // Get instance field reference: public System.Nullable`1<UnityEngine.Vector3> Position
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& dyn_Position();
      // Get instance field reference: public System.Nullable`1<UnityEngine.Quaternion> Rotation
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Quaternion>& dyn_Rotation();
      // Get instance field reference: public System.Nullable`1<Fusion.PlayerRef> InputAuthority
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Fusion::PlayerRef>& dyn_InputAuthority();
      // Get instance field reference: public System.Object OnBeforeSpawned
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_OnBeforeSpawned();
      // Get instance field reference: public System.Nullable`1<Fusion.NetworkObjectPredictionKey> PredictionKey
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>& dyn_PredictionKey();
      // Get instance field reference: public System.Boolean SyncPhysics
      [[deprecated("Use field access instead!")]] bool& dyn_SyncPhysics();
    }; // Fusion.NetworkRunner/SpawnQueueEntry
    // WARNING Not writing size check since size may be invalid!
    // Size: 0x9
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkRunner/DeferredShutdownParams
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeferredShutdownParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean ShutdownRequested
      // Size: 0x1
      // Offset: 0x0
      bool ShutdownRequested;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: ShutdownRequested and: ShutdownReason
      char __padding0[0x3] = {};
      // public Fusion.ShutdownReason ShutdownReason
      // Size: 0x4
      // Offset: 0x4
      ::Fusion::ShutdownReason ShutdownReason;
      // Field size check
      static_assert(sizeof(::Fusion::ShutdownReason) == 0x4);
      // public System.Boolean DestroyGO
      // Size: 0x1
      // Offset: 0x8
      bool DestroyGO;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: DeferredShutdownParams
      constexpr DeferredShutdownParams(bool ShutdownRequested_ = {}, ::Fusion::ShutdownReason ShutdownReason_ = {}, bool DestroyGO_ = {}) noexcept : ShutdownRequested{ShutdownRequested_}, ShutdownReason{ShutdownReason_}, DestroyGO{DestroyGO_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean ShutdownRequested
      [[deprecated("Use field access instead!")]] bool& dyn_ShutdownRequested();
      // Get instance field reference: public Fusion.ShutdownReason ShutdownReason
      [[deprecated("Use field access instead!")]] ::Fusion::ShutdownReason& dyn_ShutdownReason();
      // Get instance field reference: public System.Boolean DestroyGO
      [[deprecated("Use field access instead!")]] bool& dyn_DestroyGO();
    }; // Fusion.NetworkRunner/DeferredShutdownParams
    #pragma pack(pop)
    static check_size<sizeof(NetworkRunner::DeferredShutdownParams), 8 + sizeof(bool)> __Fusion_NetworkRunner_DeferredShutdownParamsSizeCheck;
    static_assert(sizeof(NetworkRunner::DeferredShutdownParams) == 0x9);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.NetworkRunner/SimulationPhase
    // [TokenAttribute] Offset: FFFFFFFF
    struct SimulationPhase/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SimulationPhase
      constexpr SimulationPhase(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.NetworkRunner/SimulationPhase None
      static constexpr const int None = 0;
      // Get static field: static public Fusion.NetworkRunner/SimulationPhase None
      static ::Fusion::NetworkRunner::SimulationPhase _get_None();
      // Set static field: static public Fusion.NetworkRunner/SimulationPhase None
      static void _set_None(::Fusion::NetworkRunner::SimulationPhase value);
      // static field const value: static public Fusion.NetworkRunner/SimulationPhase Update
      static constexpr const int Update = 1;
      // Get static field: static public Fusion.NetworkRunner/SimulationPhase Update
      static ::Fusion::NetworkRunner::SimulationPhase _get_Update();
      // Set static field: static public Fusion.NetworkRunner/SimulationPhase Update
      static void _set_Update(::Fusion::NetworkRunner::SimulationPhase value);
      // static field const value: static public Fusion.NetworkRunner/SimulationPhase Render
      static constexpr const int Render = 2;
      // Get static field: static public Fusion.NetworkRunner/SimulationPhase Render
      static ::Fusion::NetworkRunner::SimulationPhase _get_Render();
      // Set static field: static public Fusion.NetworkRunner/SimulationPhase Render
      static void _set_Render(::Fusion::NetworkRunner::SimulationPhase value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.NetworkRunner/SimulationPhase
    #pragma pack(pop)
    static check_size<sizeof(NetworkRunner::SimulationPhase), 0 + sizeof(int)> __Fusion_NetworkRunner_SimulationPhaseSizeCheck;
    static_assert(sizeof(NetworkRunner::SimulationPhase) == 0x4);
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.NetworkRunner/HostSnapshotCompressionJob
    // [TokenAttribute] Offset: FFFFFFFF
    struct HostSnapshotCompressionJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
      public:
      public:
      // System.Int32 CurrentTick
      // Size: 0x4
      // Offset: 0x0
      int CurrentTick;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 Length
      // Size: 0x4
      // Offset: 0x4
      int Length;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.UInt32 LastID
      // Size: 0x4
      // Offset: 0x8
      uint LastID;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: LastID and: Previous
      char __padding2[0x4] = {};
      // System.Int32* Previous
      // Size: 0x8
      // Offset: 0x10
      int* Previous;
      // Field size check
      static_assert(sizeof(int*) == 0x8);
      // System.Int32* Current
      // Size: 0x8
      // Offset: 0x18
      int* Current;
      // Field size check
      static_assert(sizeof(int*) == 0x8);
      // System.Int32* Result
      // Size: 0x8
      // Offset: 0x20
      int* Result;
      // Field size check
      static_assert(sizeof(int*) == 0x8);
      public:
      // Creating value type constructor for type: HostSnapshotCompressionJob
      constexpr HostSnapshotCompressionJob(int CurrentTick_ = {}, int Length_ = {}, uint LastID_ = {}, int* Previous_ = {}, int* Current_ = {}, int* Result_ = {}) noexcept : CurrentTick{CurrentTick_}, Length{Length_}, LastID{LastID_}, Previous{Previous_}, Current{Current_}, Result{Result_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::Unity::Jobs::IJob
      operator ::Unity::Jobs::IJob() noexcept {
        return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
      }
      // Get instance field reference: System.Int32 CurrentTick
      [[deprecated("Use field access instead!")]] int& dyn_CurrentTick();
      // Get instance field reference: System.Int32 Length
      [[deprecated("Use field access instead!")]] int& dyn_Length();
      // Get instance field reference: System.UInt32 LastID
      [[deprecated("Use field access instead!")]] uint& dyn_LastID();
      // Get instance field reference: System.Int32* Previous
      [[deprecated("Use field access instead!")]] int*& dyn_Previous();
      // Get instance field reference: System.Int32* Current
      [[deprecated("Use field access instead!")]] int*& dyn_Current();
      // Get instance field reference: System.Int32* Result
      [[deprecated("Use field access instead!")]] int*& dyn_Result();
      // public System.Int32 get_ResultLength()
      // Offset: 0x2B66584
      int get_ResultLength();
      // System.Void set_ResultLength(System.Int32 value)
      // Offset: 0x2B66590
      void set_ResultLength(int value);
      // public System.Int32 get_ResultTick()
      // Offset: 0x2B6659C
      int get_ResultTick();
      // System.Void set_ResultTick(System.Int32 value)
      // Offset: 0x2B665A8
      void set_ResultTick(int value);
      // public System.Int32* get_ResultData()
      // Offset: 0x2B665B4
      int* get_ResultData();
      // public System.Void Execute()
      // Offset: 0x2B665C0
      void Execute();
    }; // Fusion.NetworkRunner/HostSnapshotCompressionJob
    #pragma pack(pop)
    static check_size<sizeof(NetworkRunner::HostSnapshotCompressionJob), 32 + sizeof(int*)> __Fusion_NetworkRunner_HostSnapshotCompressionJobSizeCheck;
    static_assert(sizeof(NetworkRunner::HostSnapshotCompressionJob) == 0x28);
    public:
    // private Fusion.NetworkRunner/DeferredShutdownParams _deferredShutdownParams
    // Size: 0x9
    // Offset: 0x20
    ::Fusion::NetworkRunner::DeferredShutdownParams deferredShutdownParams;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner::DeferredShutdownParams) == 0x9);
    // Fusion.Simulation _simulation
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Simulation* simulation;
    // Field size check
    static_assert(sizeof(::Fusion::Simulation*) == 0x8);
    // private Fusion.NetworkRunner/SimulationPhase _simulationPhase
    // Size: 0x4
    // Offset: 0x38
    ::Fusion::NetworkRunner::SimulationPhase simulationPhase;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner::SimulationPhase) == 0x4);
    // private Fusion.NetworkRunner/ShutdownFlags _simulationShutdown
    // Size: 0x4
    // Offset: 0x3C
    ::Fusion::NetworkRunner::ShutdownFlags simulationShutdown;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner::ShutdownFlags) == 0x4);
    // private Fusion.NetworkObjectRefMap`1<Fusion.NetworkObject> _objects
    // Size: 0x8
    // Offset: 0x40
    ::Fusion::NetworkObjectRefMap_1<::Fusion::NetworkObject*>* objects;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkObjectRefMap_1<::Fusion::NetworkObject*>*) == 0x8);
    // private Fusion.SimulationBehaviourUpdater _behaviourUpdater
    // Size: 0x8
    // Offset: 0x48
    ::Fusion::SimulationBehaviourUpdater* behaviourUpdater;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviourUpdater*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.INetworkRunnerCallbacks> _callbacks
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>*) == 0x8);
    // private Fusion.Allocator* _changedAllocator
    // Size: 0x8
    // Offset: 0x58
    ::Fusion::Allocator* changedAllocator;
    // Field size check
    static_assert(sizeof(::Fusion::Allocator*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkId> _destroyIdsBuffer
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::Fusion::NetworkId>* destroyIdsBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkId>*) == 0x8);
    // System.Collections.Generic.LinkedList`1<Fusion.RunnerVisibilityNode> _visibilityNodes
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::LinkedList_1<::Fusion::RunnerVisibilityNode*>* visibilityNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<::Fusion::RunnerVisibilityNode*>*) == 0x8);
    // private System.Boolean _isVisible
    // Size: 0x1
    // Offset: 0x70
    bool isVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Queue`1<Fusion.NetworkRunner/SpawnQueueEntry> _spawnQueue
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Queue_1<::Fusion::NetworkRunner::SpawnQueueEntry>* spawnQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Fusion::NetworkRunner::SpawnQueueEntry>*) == 0x8);
    // private System.Boolean _printedInterestGroupsWarning
    // Size: 0x1
    // Offset: 0x80
    bool printedInterestGroupsWarning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _initializeOperation
    // Size: 0x8
    // Offset: 0x88
    ::System::Threading::Tasks::TaskCompletionSource_1<bool>* initializeOperation;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<bool>*) == 0x8);
    // private Fusion.NetworkProjectConfig _config
    // Size: 0x8
    // Offset: 0x90
    ::Fusion::NetworkProjectConfig* config;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkProjectConfig*) == 0x8);
    // private System.Int32 _ticksExecuted
    // Size: 0x4
    // Offset: 0x98
    int ticksExecuted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Fusion.INetworkObjectPool _networkObjectPool
    // Size: 0x8
    // Offset: 0xA0
    ::Fusion::INetworkObjectPool* networkObjectPool;
    // Field size check
    static_assert(sizeof(::Fusion::INetworkObjectPool*) == 0x8);
    // private System.UInt32 _idCounter
    // Size: 0x4
    // Offset: 0xA8
    uint idCounter;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Collections.Generic.List`1<Fusion.NetworkObject> _predictionSpawns
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>* predictionSpawns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkObject> _predictionDespawns
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>* predictionDespawns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkObject> _activeSceneObjectsBuffer
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>* activeSceneObjectsBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*) == 0x8);
    // Fusion.ReadAccuracy _positionReadAccuracy
    // Size: 0x4
    // Offset: 0xC8
    ::Fusion::ReadAccuracy positionReadAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::ReadAccuracy) == 0x4);
    // Fusion.WriteAccuracy _positionWriteAccuracy
    // Size: 0x4
    // Offset: 0xCC
    ::Fusion::WriteAccuracy positionWriteAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::WriteAccuracy) == 0x4);
    // Fusion.ReadAccuracy _rotationReadAccuracy
    // Size: 0x4
    // Offset: 0xD0
    ::Fusion::ReadAccuracy rotationReadAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::ReadAccuracy) == 0x4);
    // Fusion.WriteAccuracy _rotationWriteAccuracy
    // Size: 0x4
    // Offset: 0xD4
    ::Fusion::WriteAccuracy rotationWriteAccuracy;
    // Field size check
    static_assert(sizeof(::Fusion::WriteAccuracy) == 0x4);
    // System.Byte[] _connectionToken
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<uint8_t> connectionToken;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Nullable`1<System.Boolean> _provideInput
    // Size: 0xFFFFFFFF
    // Offset: 0xE0
    ::System::Nullable_1<bool> provideInput;
    // private System.Threading.CancellationTokenSource OperationsCancellationTokenSource
    // Size: 0x8
    // Offset: 0xE8
    ::System::Threading::CancellationTokenSource* OperationsCancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkObject> _remotePrefabsWaitingForSpawnedCallback
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>* remotePrefabsWaitingForSpawnedCallback;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.INetworkRunnerCallbacks> _callbacksBuffer
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>* callbacksBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>*) == 0x8);
    // private System.Boolean <IsHostMigrationEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x100
    bool IsHostMigrationEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.UInt32 <HostMigrationSnapshotDelay>k__BackingField
    // Size: 0x4
    // Offset: 0x104
    uint HostMigrationSnapshotDelay;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Byte* _hostSnapshotData0
    // Size: 0x8
    // Offset: 0x108
    uint8_t* hostSnapshotData0;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.Byte* _hostSnapshotData1
    // Size: 0x8
    // Offset: 0x110
    uint8_t* hostSnapshotData1;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.Byte* _hostSnapshotDelta
    // Size: 0x8
    // Offset: 0x118
    uint8_t* hostSnapshotDelta;
    // Field size check
    static_assert(sizeof(uint8_t*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<System.ValueTuple`5<System.Boolean,System.Int32,System.Int32,System.UInt32,System.Byte[]>> _buildHostSnapshotTask
    // Size: 0x8
    // Offset: 0x120
    ::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_5<bool, int, int, uint, ::ArrayW<uint8_t>>>* buildHostSnapshotTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_5<bool, int, int, uint, ::ArrayW<uint8_t>>>*) == 0x8);
    // private System.Nullable`1<Fusion.NetworkRunner/HostSnapshotCompressionJob> _buildHostSnapshotJob
    // Size: 0xFFFFFFFF
    // Offset: 0x128
    ::System::Nullable_1<::Fusion::NetworkRunner::HostSnapshotCompressionJob> buildHostSnapshotJob;
    // private System.Nullable`1<Unity.Jobs.JobHandle> _buildHostSnapshotHandler
    // Size: 0xFFFFFFFF
    // Offset: 0x158
    ::System::Nullable_1<::Unity::Jobs::JobHandle> buildHostSnapshotHandler;
    // private Fusion.Protocol.HostMigration _lastHostMigrationInfo
    // Size: 0x8
    // Offset: 0x170
    ::Fusion::Protocol::HostMigration* lastHostMigrationInfo;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::HostMigration*) == 0x8);
    // private System.Collections.Generic.Stack`1<Fusion.NetworkRunner/NetworkObjectInactivityGuard> _inactivityGuardPool
    // Size: 0x8
    // Offset: 0x178
    ::System::Collections::Generic::Stack_1<::Fusion::NetworkRunner::NetworkObjectInactivityGuard*>* inactivityGuardPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Fusion::NetworkRunner::NetworkObjectInactivityGuard*>*) == 0x8);
    // private Fusion.GameMode <GameMode>k__BackingField
    // Size: 0x4
    // Offset: 0x180
    ::Fusion::GameMode GameMode;
    // Field size check
    static_assert(sizeof(::Fusion::GameMode) == 0x4);
    // private Fusion.SessionInfo <SessionInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x188
    ::Fusion::SessionInfo* SessionInfo;
    // Field size check
    static_assert(sizeof(::Fusion::SessionInfo*) == 0x8);
    // private Fusion.LobbyInfo <LobbyInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x190
    ::Fusion::LobbyInfo* LobbyInfo;
    // Field size check
    static_assert(sizeof(::Fusion::LobbyInfo*) == 0x8);
    // System.Threading.Tasks.TaskCompletionSource`1<System.ValueTuple`2<Fusion.ShutdownReason,System.String>> _cloudOperation
    // Size: 0x8
    // Offset: 0x198
    ::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_2<::Fusion::ShutdownReason, ::StringW>>* cloudOperation;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_2<::Fusion::ShutdownReason, ::StringW>>*) == 0x8);
    // Fusion.CloudServices _cloudServices
    // Size: 0x8
    // Offset: 0x1A0
    ::Fusion::CloudServices* cloudServices;
    // Field size check
    static_assert(sizeof(::Fusion::CloudServices*) == 0x8);
    // private Fusion.INetworkSceneManager _sceneManager
    // Size: 0x8
    // Offset: 0x1A8
    ::Fusion::INetworkSceneManager* sceneManager;
    // Field size check
    static_assert(sizeof(::Fusion::INetworkSceneManager*) == 0x8);
    // private Fusion.INetworkSceneManagerObjectResolver _sceneObjectResolver
    // Size: 0x8
    // Offset: 0x1B0
    ::Fusion::INetworkSceneManagerObjectResolver* sceneObjectResolver;
    // Field size check
    static_assert(sizeof(::Fusion::INetworkSceneManagerObjectResolver*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Fusion.NetworkObjectGuid,Fusion.NetworkObject> _sceneObjectLoopkup
    // Size: 0x8
    // Offset: 0x1B8
    ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkObject*>* sceneObjectLoopkup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkObject*>*) == 0x8);
    // private System.Nullable`1<Fusion.SceneRef> _sharedModeStartSceneRef
    // Size: 0xFFFFFFFF
    // Offset: 0x1C0
    ::System::Nullable_1<::Fusion::SceneRef> sharedModeStartSceneRef;
    // private UnityEngine.SceneManagement.Scene _multiplePeerUnityScene
    // Size: 0x4
    // Offset: 0x1C8
    ::UnityEngine::SceneManagement::Scene multiplePeerUnityScene;
    // Field size check
    static_assert(sizeof(::UnityEngine::SceneManagement::Scene) == 0x4);
    // private System.Boolean _isMultiplePeerUnitySceneTemp
    // Size: 0x1
    // Offset: 0x1CC
    bool isMultiplePeerUnitySceneTemp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32* _tempWords
    // Size: 0x8
    // Offset: 0x1D0
    int* tempWords;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32 _tempWordsCapacity
    // Size: 0x4
    // Offset: 0x1D8
    int tempWordsCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogBuilder
    operator ::Fusion::ILogBuilder() noexcept {
      return *reinterpret_cast<::Fusion::ILogBuilder*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::Simulation::ICallbacks
    operator ::Fusion::Simulation::ICallbacks() noexcept {
      return *reinterpret_cast<::Fusion::Simulation::ICallbacks*>(this);
    }
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,Fusion.NetworkRunner> _instancesByMultiPeerScene
    static ::System::Collections::Generic::Dictionary_2<int, ::Fusion::NetworkRunner*>* _get__instancesByMultiPeerScene();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,Fusion.NetworkRunner> _instancesByMultiPeerScene
    static void _set__instancesByMultiPeerScene(::System::Collections::Generic::Dictionary_2<int, ::Fusion::NetworkRunner*>* value);
    // Get static field: static public Fusion.Simulation/IDeltaCompressor BurstDeltaCompressor
    static ::Fusion::Simulation::IDeltaCompressor* _get_BurstDeltaCompressor();
    // Set static field: static public Fusion.Simulation/IDeltaCompressor BurstDeltaCompressor
    static void _set_BurstDeltaCompressor(::Fusion::Simulation::IDeltaCompressor* value);
    // Get static field: static private System.Collections.Generic.List`1<Fusion.NetworkRunner> _instances
    static ::System::Collections::Generic::List_1<::Fusion::NetworkRunner*>* _get__instances();
    // Set static field: static private System.Collections.Generic.List`1<Fusion.NetworkRunner> _instances
    static void _set__instances(::System::Collections::Generic::List_1<::Fusion::NetworkRunner*>* value);
    // Get static field: static private Fusion.NetworkRunner[] _instancesSnapshot
    static ::ArrayW<::Fusion::NetworkRunner*> _get__instancesSnapshot();
    // Set static field: static private Fusion.NetworkRunner[] _instancesSnapshot
    static void _set__instancesSnapshot(::ArrayW<::Fusion::NetworkRunner*> value);
    // Get static field: static private System.Int32 _instancesSnapshotCount
    static int _get__instancesSnapshotCount();
    // Set static field: static private System.Int32 _instancesSnapshotCount
    static void _set__instancesSnapshotCount(int value);
    // Get instance field reference: private Fusion.NetworkRunner/DeferredShutdownParams _deferredShutdownParams
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner::DeferredShutdownParams& dyn__deferredShutdownParams();
    // Get instance field reference: Fusion.Simulation _simulation
    [[deprecated("Use field access instead!")]] ::Fusion::Simulation*& dyn__simulation();
    // Get instance field reference: private Fusion.NetworkRunner/SimulationPhase _simulationPhase
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner::SimulationPhase& dyn__simulationPhase();
    // Get instance field reference: private Fusion.NetworkRunner/ShutdownFlags _simulationShutdown
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner::ShutdownFlags& dyn__simulationShutdown();
    // Get instance field reference: private Fusion.NetworkObjectRefMap`1<Fusion.NetworkObject> _objects
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkObjectRefMap_1<::Fusion::NetworkObject*>*& dyn__objects();
    // Get instance field reference: private Fusion.SimulationBehaviourUpdater _behaviourUpdater
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviourUpdater*& dyn__behaviourUpdater();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.INetworkRunnerCallbacks> _callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>*& dyn__callbacks();
    // Get instance field reference: private Fusion.Allocator* _changedAllocator
    [[deprecated("Use field access instead!")]] ::Fusion::Allocator*& dyn__changedAllocator();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkId> _destroyIdsBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkId>*& dyn__destroyIdsBuffer();
    // Get instance field reference: System.Collections.Generic.LinkedList`1<Fusion.RunnerVisibilityNode> _visibilityNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<::Fusion::RunnerVisibilityNode*>*& dyn__visibilityNodes();
    // Get instance field reference: private System.Boolean _isVisible
    [[deprecated("Use field access instead!")]] bool& dyn__isVisible();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Fusion.NetworkRunner/SpawnQueueEntry> _spawnQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Fusion::NetworkRunner::SpawnQueueEntry>*& dyn__spawnQueue();
    // Get instance field reference: private System.Boolean _printedInterestGroupsWarning
    [[deprecated("Use field access instead!")]] bool& dyn__printedInterestGroupsWarning();
    // Get instance field reference: System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _initializeOperation
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<bool>*& dyn__initializeOperation();
    // Get instance field reference: private Fusion.NetworkProjectConfig _config
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkProjectConfig*& dyn__config();
    // Get instance field reference: private System.Int32 _ticksExecuted
    [[deprecated("Use field access instead!")]] int& dyn__ticksExecuted();
    // Get instance field reference: private Fusion.INetworkObjectPool _networkObjectPool
    [[deprecated("Use field access instead!")]] ::Fusion::INetworkObjectPool*& dyn__networkObjectPool();
    // Get instance field reference: private System.UInt32 _idCounter
    [[deprecated("Use field access instead!")]] uint& dyn__idCounter();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkObject> _predictionSpawns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*& dyn__predictionSpawns();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkObject> _predictionDespawns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*& dyn__predictionDespawns();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkObject> _activeSceneObjectsBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*& dyn__activeSceneObjectsBuffer();
    // Get instance field reference: Fusion.ReadAccuracy _positionReadAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::ReadAccuracy& dyn__positionReadAccuracy();
    // Get instance field reference: Fusion.WriteAccuracy _positionWriteAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::WriteAccuracy& dyn__positionWriteAccuracy();
    // Get instance field reference: Fusion.ReadAccuracy _rotationReadAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::ReadAccuracy& dyn__rotationReadAccuracy();
    // Get instance field reference: Fusion.WriteAccuracy _rotationWriteAccuracy
    [[deprecated("Use field access instead!")]] ::Fusion::WriteAccuracy& dyn__rotationWriteAccuracy();
    // Get instance field reference: System.Byte[] _connectionToken
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__connectionToken();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _provideInput
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__provideInput();
    // Get instance field reference: private System.Threading.CancellationTokenSource OperationsCancellationTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn_OperationsCancellationTokenSource();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkObject> _remotePrefabsWaitingForSpawnedCallback
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkObject*>*& dyn__remotePrefabsWaitingForSpawnedCallback();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.INetworkRunnerCallbacks> _callbacksBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::INetworkRunnerCallbacks*>*& dyn__callbacksBuffer();
    // Get instance field reference: private System.Boolean <IsHostMigrationEnabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsHostMigrationEnabled$k__BackingField();
    // Get instance field reference: private System.UInt32 <HostMigrationSnapshotDelay>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$HostMigrationSnapshotDelay$k__BackingField();
    // Get instance field reference: private System.Byte* _hostSnapshotData0
    [[deprecated("Use field access instead!")]] uint8_t*& dyn__hostSnapshotData0();
    // Get instance field reference: private System.Byte* _hostSnapshotData1
    [[deprecated("Use field access instead!")]] uint8_t*& dyn__hostSnapshotData1();
    // Get instance field reference: private System.Byte* _hostSnapshotDelta
    [[deprecated("Use field access instead!")]] uint8_t*& dyn__hostSnapshotDelta();
    // Get instance field reference: private System.Threading.Tasks.TaskCompletionSource`1<System.ValueTuple`5<System.Boolean,System.Int32,System.Int32,System.UInt32,System.Byte[]>> _buildHostSnapshotTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_5<bool, int, int, uint, ::ArrayW<uint8_t>>>*& dyn__buildHostSnapshotTask();
    // Get instance field reference: private System.Nullable`1<Fusion.NetworkRunner/HostSnapshotCompressionJob> _buildHostSnapshotJob
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Fusion::NetworkRunner::HostSnapshotCompressionJob>& dyn__buildHostSnapshotJob();
    // Get instance field reference: private System.Nullable`1<Unity.Jobs.JobHandle> _buildHostSnapshotHandler
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Unity::Jobs::JobHandle>& dyn__buildHostSnapshotHandler();
    // Get instance field reference: private Fusion.Protocol.HostMigration _lastHostMigrationInfo
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::HostMigration*& dyn__lastHostMigrationInfo();
    // Get instance field reference: private System.Collections.Generic.Stack`1<Fusion.NetworkRunner/NetworkObjectInactivityGuard> _inactivityGuardPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Fusion::NetworkRunner::NetworkObjectInactivityGuard*>*& dyn__inactivityGuardPool();
    // Get instance field reference: private Fusion.GameMode <GameMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::GameMode& dyn_$GameMode$k__BackingField();
    // Get instance field reference: private Fusion.SessionInfo <SessionInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::SessionInfo*& dyn_$SessionInfo$k__BackingField();
    // Get instance field reference: private Fusion.LobbyInfo <LobbyInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::LobbyInfo*& dyn_$LobbyInfo$k__BackingField();
    // Get instance field reference: System.Threading.Tasks.TaskCompletionSource`1<System.ValueTuple`2<Fusion.ShutdownReason,System.String>> _cloudOperation
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<::System::ValueTuple_2<::Fusion::ShutdownReason, ::StringW>>*& dyn__cloudOperation();
    // Get instance field reference: Fusion.CloudServices _cloudServices
    [[deprecated("Use field access instead!")]] ::Fusion::CloudServices*& dyn__cloudServices();
    // Get instance field reference: private Fusion.INetworkSceneManager _sceneManager
    [[deprecated("Use field access instead!")]] ::Fusion::INetworkSceneManager*& dyn__sceneManager();
    // Get instance field reference: private Fusion.INetworkSceneManagerObjectResolver _sceneObjectResolver
    [[deprecated("Use field access instead!")]] ::Fusion::INetworkSceneManagerObjectResolver*& dyn__sceneObjectResolver();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.NetworkObjectGuid,Fusion.NetworkObject> _sceneObjectLoopkup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkObject*>*& dyn__sceneObjectLoopkup();
    // Get instance field reference: private System.Nullable`1<Fusion.SceneRef> _sharedModeStartSceneRef
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Fusion::SceneRef>& dyn__sharedModeStartSceneRef();
    // Get instance field reference: private UnityEngine.SceneManagement.Scene _multiplePeerUnityScene
    [[deprecated("Use field access instead!")]] ::UnityEngine::SceneManagement::Scene& dyn__multiplePeerUnityScene();
    // Get instance field reference: private System.Boolean _isMultiplePeerUnitySceneTemp
    [[deprecated("Use field access instead!")]] bool& dyn__isMultiplePeerUnitySceneTemp();
    // Get instance field reference: private System.Int32* _tempWords
    [[deprecated("Use field access instead!")]] int*& dyn__tempWords();
    // Get instance field reference: private System.Int32 _tempWordsCapacity
    [[deprecated("Use field access instead!")]] int& dyn__tempWordsCapacity();
    // static public Fusion.NetworkRunner/BuildTypes get_BuildType()
    // Offset: 0x2B52D30
    static ::Fusion::NetworkRunner::BuildTypes get_BuildType();
    // static System.Void ResetStatics()
    // Offset: 0x2B53F94
    static void ResetStatics();
    // System.Boolean get_IsSimulationUpdating()
    // Offset: 0x2B54058
    bool get_IsSimulationUpdating();
    // private System.Boolean _hasNetworkObject()
    // Offset: 0x2B54068
    bool _hasNetworkObject();
    // System.Boolean get_IsInitialized()
    // Offset: 0x2B54124
    bool get_IsInitialized();
    // public System.Boolean get_IsVisible()
    // Offset: 0x2B541B4
    bool get_IsVisible();
    // public System.Void set_IsVisible(System.Boolean value)
    // Offset: 0x2B541BC
    void set_IsVisible(bool value);
    // public System.Boolean get_ProvideInput()
    // Offset: 0x2B54238
    bool get_ProvideInput();
    // public System.Void set_ProvideInput(System.Boolean value)
    // Offset: 0x2B54274
    void set_ProvideInput(bool value);
    // public Fusion.SimulationConfig/Topologies get_Topology()
    // Offset: 0x2B542DC
    ::Fusion::SimulationConfig::Topologies get_Topology();
    // public Fusion.Simulation get_Simulation()
    // Offset: 0x2B54308
    ::Fusion::Simulation* get_Simulation();
    // public Fusion.SimulationModes get_Mode()
    // Offset: 0x2B54310
    ::Fusion::SimulationModes get_Mode();
    // public Fusion.SimulationStages get_Stage()
    // Offset: 0x2B54328
    ::Fusion::SimulationStages get_Stage();
    // public System.Single get_DeltaTime()
    // Offset: 0x2B54340
    float get_DeltaTime();
    // public System.Single get_SimulationTime()
    // Offset: 0x2B54358
    float get_SimulationTime();
    // public System.Single get_SimulationRenderTime()
    // Offset: 0x2B54394
    float get_SimulationRenderTime();
    // public System.Single get_InterpolationRenderTime()
    // Offset: 0x2B54400
    float get_InterpolationRenderTime();
    // public System.Boolean get_IsRunning()
    // Offset: 0x2B54484
    bool get_IsRunning();
    // public System.Boolean get_IsShutdown()
    // Offset: 0x2B54498
    bool get_IsShutdown();
    // private System.Boolean get_IsRegularShutdown()
    // Offset: 0x2B544A8
    bool get_IsRegularShutdown();
    // public System.Boolean get_IsStarting()
    // Offset: 0x2B544B4
    bool get_IsStarting();
    // public System.Boolean get_IsClient()
    // Offset: 0x2B544EC
    bool get_IsClient();
    // public System.Boolean get_IsConnectedToServer()
    // Offset: 0x2B54500
    bool get_IsConnectedToServer();
    // public System.Boolean get_IsServer()
    // Offset: 0x2B54470
    bool get_IsServer();
    // public System.Boolean get_IsPlayer()
    // Offset: 0x2B545A4
    bool get_IsPlayer();
    // public System.Boolean get_IsSinglePlayer()
    // Offset: 0x2B545B8
    bool get_IsSinglePlayer();
    // public System.Boolean get_IsLastTick()
    // Offset: 0x2B545CC
    bool get_IsLastTick();
    // public System.Boolean get_IsFirstTick()
    // Offset: 0x2B545EC
    bool get_IsFirstTick();
    // public System.Boolean get_IsForward()
    // Offset: 0x2B5460C
    bool get_IsForward();
    // public System.Boolean get_IsResimulation()
    // Offset: 0x2B54620
    bool get_IsResimulation();
    // public Fusion.NetworkRunner/States get_State()
    // Offset: 0x2B54640
    ::Fusion::NetworkRunner::States get_State();
    // public Fusion.PlayerRef get_LocalPlayer()
    // Offset: 0x2B5467C
    ::Fusion::PlayerRef get_LocalPlayer();
    // public Fusion.Tick get_Tick()
    // Offset: 0x2B546A4
    ::Fusion::Tick get_Tick();
    // public Fusion.NetworkProjectConfig get_Config()
    // Offset: 0x2B546C4
    ::Fusion::NetworkProjectConfig* get_Config();
    // public System.Int32 get_TicksExecuted()
    // Offset: 0x2B546CC
    int get_TicksExecuted();
    // public System.Collections.Generic.IEnumerable`1<Fusion.PlayerRef> get_ActivePlayers()
    // Offset: 0x2B546D4
    ::System::Collections::Generic::IEnumerable_1<::Fusion::PlayerRef>* get_ActivePlayers();
    // public Fusion.INetworkSceneManager get_SceneManager()
    // Offset: 0x2B54780
    ::Fusion::INetworkSceneManager* get_SceneManager();
    // public Fusion.INetworkObjectPool get_ObjectPool()
    // Offset: 0x2B54788
    ::Fusion::INetworkObjectPool* get_ObjectPool();
    // System.Threading.CancellationToken get_OperationsCancellationToken()
    // Offset: 0x2B54790
    ::System::Threading::CancellationToken get_OperationsCancellationToken();
    // public Fusion.HitboxManager get_LagCompensation()
    // Offset: 0x2B54858
    ::Fusion::HitboxManager* get_LagCompensation();
    // public System.Void Disconnect(Fusion.PlayerRef player)
    // Offset: 0x2B548A0
    void Disconnect(::Fusion::PlayerRef player);
    // System.Void Disconnect(Fusion.Sockets.NetAddress address)
    // Offset: 0x2B54990
    void Disconnect(::Fusion::Sockets::NetAddress address);
    // System.Void Connect(Fusion.Sockets.NetAddress address, System.Byte[] token, System.Byte[] uniqueId)
    // Offset: 0x2B54AB4
    void Connect(::Fusion::Sockets::NetAddress address, ::ArrayW<uint8_t> token, ::ArrayW<uint8_t> uniqueId);
    // System.Void ShutdownAction()
    // Offset: 0x2B54C04
    void ShutdownAction();
    // System.Collections.IEnumerator ShutdownWithCleanupCoroutine()
    // Offset: 0x2B54C24
    ::System::Collections::IEnumerator* ShutdownWithCleanupCoroutine();
    // public System.Threading.Tasks.Task Shutdown(System.Boolean destroyGameObject, Fusion.ShutdownReason shutdownReason, System.Boolean forceShutdownProcedure)
    // Offset: 0x2B54C98
    ::System::Threading::Tasks::Task* Shutdown(bool destroyGameObject, ::Fusion::ShutdownReason shutdownReason, bool forceShutdownProcedure);
    // private Fusion.Sockets.INetSocket CreateCloudSocket()
    // Offset: 0x2B55DB4
    ::Fusion::Sockets::INetSocket* CreateCloudSocket();
    // System.Void SetInitializationDone(Fusion.NetworkRunnerInitializeArgs args)
    // Offset: 0x2B55ED0
    void SetInitializationDone(::Fusion::NetworkRunnerInitializeArgs args);
    // System.Threading.Tasks.Task`1<System.Boolean> Initialize(Fusion.NetworkRunnerInitializeArgs args)
    // Offset: 0x2B56004
    ::System::Threading::Tasks::Task_1<bool>* Initialize(::Fusion::NetworkRunnerInitializeArgs args);
    // public System.Void SinglePlayerPause()
    // Offset: 0x2B575F4
    void SinglePlayerPause();
    // public System.Void SinglePlayerContinue()
    // Offset: 0x2B57614
    void SinglePlayerContinue();
    // public System.Void SinglePlayerPause(System.Boolean paused)
    // Offset: 0x2B57634
    void SinglePlayerPause(bool paused);
    // public System.Void SetInterestGroup(Fusion.NetworkObject obj, Fusion.PlayerRef player, System.String group, System.Boolean interested)
    // Offset: 0x2B57654
    void SetInterestGroup(::Fusion::NetworkObject* obj, ::Fusion::PlayerRef player, ::StringW group, bool interested);
    // public System.Int32 GetInterfaceListsCount(System.Type type)
    // Offset: 0x2B57770
    int GetInterfaceListsCount(::System::Type* type);
    // public Fusion.SimulationBehaviour GetInterfaceListHead(System.Type type, System.Int32 index)
    // Offset: 0x2B5778C
    ::Fusion::SimulationBehaviour* GetInterfaceListHead(::System::Type* type, int index);
    // public Fusion.SimulationBehaviourListScope GetInterfaceListHead(System.Type type, System.Int32 index, out Fusion.SimulationBehaviour head)
    // Offset: 0x2B577A8
    ::Fusion::SimulationBehaviourListScope GetInterfaceListHead(::System::Type* type, int index, ByRef<::Fusion::SimulationBehaviour*> head);
    // public Fusion.SimulationBehaviour GetInterfaceListPrev(Fusion.SimulationBehaviour behaviour)
    // Offset: 0x2B577C4
    ::Fusion::SimulationBehaviour* GetInterfaceListPrev(::Fusion::SimulationBehaviour* behaviour);
    // public Fusion.SimulationBehaviour GetInterfaceListNext(Fusion.SimulationBehaviour behaviour)
    // Offset: 0x2B577DC
    ::Fusion::SimulationBehaviour* GetInterfaceListNext(::Fusion::SimulationBehaviour* behaviour);
    // public System.Nullable`1<System.Int32> GetPlayerActorId(Fusion.PlayerRef player)
    // Offset: 0x2B577F4
    ::System::Nullable_1<int> GetPlayerActorId(::Fusion::PlayerRef player);
    // public System.String GetPlayerUserId(Fusion.PlayerRef player)
    // Offset: 0x2B578E0
    ::StringW GetPlayerUserId(::Fusion::PlayerRef player);
    // public System.Void SetPlayerObject(Fusion.PlayerRef player, Fusion.NetworkObject networkObject)
    // Offset: 0x2B57A74
    void SetPlayerObject(::Fusion::PlayerRef player, ::Fusion::NetworkObject* networkObject);
    // public Fusion.NetworkObject GetPlayerObject(Fusion.PlayerRef player)
    // Offset: 0x2B57ADC
    ::Fusion::NetworkObject* GetPlayerObject(::Fusion::PlayerRef player);
    // public System.Boolean TryGetPlayerObject(Fusion.PlayerRef player, out Fusion.NetworkObject networkObject)
    // Offset: 0x2B57B6C
    bool TryGetPlayerObject(::Fusion::PlayerRef player, ByRef<::Fusion::NetworkObject*> networkObject);
    // public System.Collections.Generic.List`1<T> GetAllBehaviours()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::List_1<T>* GetAllBehaviours() {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::GetAllBehaviours");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllBehaviours", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(this, ___generic__method);
    }
    // public System.Void GetAllBehaviours(System.Collections.Generic.List`1<T> result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void GetAllBehaviours(::System::Collections::Generic::List_1<T>* result) {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::GetAllBehaviours");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllBehaviours", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, result);
    }
    // public System.Double GetPlayerRtt(Fusion.PlayerRef playerRef)
    // Offset: 0x2B57BEC
    double GetPlayerRtt(::Fusion::PlayerRef playerRef);
    // public System.Void SendRpc(Fusion.SimulationMessage* message)
    // Offset: 0x2B57C14
    void SendRpc(::Fusion::SimulationMessage* message);
    // public System.Void SendRpc(Fusion.SimulationMessage* message, out Fusion.RpcSendResult info)
    // Offset: 0x2B57C38
    void SendRpc(::Fusion::SimulationMessage* message, ByRef<::Fusion::RpcSendResult> info);
    // public System.Boolean IsPlayerValid(Fusion.PlayerRef player)
    // Offset: 0x2B57CC8
    bool IsPlayerValid(::Fusion::PlayerRef player);
    // public System.Boolean IsPlayerActive(Fusion.PlayerRef player)
    // Offset: 0x2B57CE8
    bool IsPlayerActive(::Fusion::PlayerRef player);
    // public System.Byte[] GetPlayerConnectionToken(Fusion.PlayerRef player)
    // Offset: 0x2B57D08
    ::ArrayW<uint8_t> GetPlayerConnectionToken(::Fusion::PlayerRef player);
    // public Fusion.ConnectionType GetPlayerConnectionType(Fusion.PlayerRef player)
    // Offset: 0x2B57D94
    ::Fusion::ConnectionType GetPlayerConnectionType(::Fusion::PlayerRef player);
    // public Fusion.SimulationBehaviour[] GetAllBehaviours(System.Type type)
    // Offset: 0x2B57E5C
    ::ArrayW<::Fusion::SimulationBehaviour*> GetAllBehaviours(::System::Type* type);
    // public System.Void AddCallbacks(params Fusion.INetworkRunnerCallbacks[] callbacks)
    // Offset: 0x2B57E78
    void AddCallbacks(::ArrayW<::Fusion::INetworkRunnerCallbacks*> callbacks);
    // public System.Void RemoveCallbacks(params Fusion.INetworkRunnerCallbacks[] callbacks)
    // Offset: 0x2B57FF0
    void RemoveCallbacks(::ArrayW<::Fusion::INetworkRunnerCallbacks*> callbacks);
    // private System.Void OnApplicationQuit()
    // Offset: 0x2B58118
    void OnApplicationQuit();
    // System.Void RenderInternal()
    // Offset: 0x2B581A8
    void RenderInternal();
    // private System.Void Awake()
    // Offset: 0x2B58774
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2B5885C
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x2B5886C
    void Update();
    // System.Void UpdateInternal(System.Double dt)
    // Offset: 0x2B58AD4
    void UpdateInternal(double dt);
    // private System.Void ExpirePredictedSpawns()
    // Offset: 0x2B590EC
    void ExpirePredictedSpawns();
    // private System.Void RegisterNetworkCallbacks()
    // Offset: 0x2B554BC
    void RegisterNetworkCallbacks();
    // public System.Void SendReliableDataToPlayer(Fusion.PlayerRef player, System.Byte[] data)
    // Offset: 0x2B596D4
    void SendReliableDataToPlayer(::Fusion::PlayerRef player, ::ArrayW<uint8_t> data);
    // public System.Void SendReliableDataToServer(System.Byte[] data)
    // Offset: 0x2B5981C
    void SendReliableDataToServer(::ArrayW<uint8_t> data);
    // public System.Void SetPlayerAlwaysInterested(Fusion.PlayerRef player, Fusion.NetworkObject networkObject, System.Boolean alwaysInterested)
    // Offset: 0x2B59920
    void SetPlayerAlwaysInterested(::Fusion::PlayerRef player, ::Fusion::NetworkObject* networkObject, bool alwaysInterested);
    // public System.Void AddPlayerAreaOfInterest(Fusion.PlayerRef player, UnityEngine.Vector3 position, System.Single extent, System.Int32 layersMask)
    // Offset: 0x2B59994
    void AddPlayerAreaOfInterest(::Fusion::PlayerRef player, ::UnityEngine::Vector3 position, float extent, int layersMask);
    // public System.Nullable`1<T> GetInputForPlayer(Fusion.PlayerRef player)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Nullable_1<T> GetInputForPlayer(::Fusion::PlayerRef player) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::INetworkInput>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::GetInputForPlayer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputForPlayer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<T>, false>(this, ___generic__method, player);
    }
    // public System.Nullable`1<Fusion.NetworkInput> GetRawInputForPlayer(Fusion.PlayerRef player)
    // Offset: 0x2B599B4
    ::System::Nullable_1<::Fusion::NetworkInput> GetRawInputForPlayer(::Fusion::PlayerRef player);
    // public System.Boolean TryGetInputForPlayer(Fusion.PlayerRef player, out T input)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetInputForPlayer(::Fusion::PlayerRef player, ByRef<T> input) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::INetworkInput>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::TryGetInputForPlayer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetInputForPlayer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, player, byref(input));
    }
    // public Fusion.NetworkObject FindObject(Fusion.NetworkId oref)
    // Offset: 0x2B59A7C
    ::Fusion::NetworkObject* FindObject(::Fusion::NetworkId oref);
    // public System.Boolean TryFindObject(Fusion.NetworkId oref, out Fusion.NetworkObject obj)
    // Offset: 0x2B59AF4
    bool TryFindObject(::Fusion::NetworkId oref, ByRef<::Fusion::NetworkObject*> obj);
    // public System.Boolean TryFindBehaviour(Fusion.NetworkBehaviourId bref, out Fusion.NetworkBehaviour behaviour)
    // Offset: 0x2B59B5C
    bool TryFindBehaviour(::Fusion::NetworkBehaviourId bref, ByRef<::Fusion::NetworkBehaviour*> behaviour);
    // public System.Boolean TryFindBehaviour(Fusion.NetworkBehaviourId id, out T behaviour)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryFindBehaviour(::Fusion::NetworkBehaviourId id, ByRef<T> behaviour) {
      static_assert(std::is_convertible_v<T, ::Fusion::NetworkBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::TryFindBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFindBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, id, byref(behaviour));
    }
    // public System.Boolean GetInterpolationData(Fusion.NetworkBehaviour behaviour, System.Boolean predicted, out Fusion.InterpolationData data)
    // Offset: 0x2B59C34
    bool GetInterpolationData(::Fusion::NetworkBehaviour* behaviour, bool predicted, ByRef<::Fusion::InterpolationData> data);
    // public T TryGetNetworkedBehaviourFromNetworkedObjectRef(Fusion.NetworkId id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T TryGetNetworkedBehaviourFromNetworkedObjectRef(::Fusion::NetworkId id) {
      static_assert(std::is_convertible_v<T, ::Fusion::NetworkBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::TryGetNetworkedBehaviourFromNetworkedObjectRef");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetNetworkedBehaviourFromNetworkedObjectRef", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, id);
    }
    // public Fusion.NetworkId TryGetObjectRefFromNetworkedBehaviour(Fusion.NetworkBehaviour behaviour)
    // Offset: 0x2B59D8C
    ::Fusion::NetworkId TryGetObjectRefFromNetworkedBehaviour(::Fusion::NetworkBehaviour* behaviour);
    // public Fusion.NetworkBehaviourId TryGetNetworkedBehaviourId(Fusion.NetworkBehaviour behaviour)
    // Offset: 0x2B59E24
    ::Fusion::NetworkBehaviourId TryGetNetworkedBehaviourId(::Fusion::NetworkBehaviour* behaviour);
    // public System.Boolean SetSimulationState(Fusion.NetworkObject obj, System.Boolean simulate)
    // Offset: 0x2B59EC8
    bool SetSimulationState(::Fusion::NetworkObject* obj, bool simulate);
    // public System.Boolean Exists(Fusion.NetworkObject obj)
    // Offset: 0x2B57724
    bool Exists(::Fusion::NetworkObject* obj);
    // public System.Boolean Exists(Fusion.NetworkId id)
    // Offset: 0x2B5A2E0
    bool Exists(::Fusion::NetworkId id);
    // System.Boolean ExistsIn(Fusion.NetworkObject obj, Fusion.SimulationSnapshot snapshot)
    // Offset: 0x2B5A328
    bool ExistsIn(::Fusion::NetworkObject* obj, ::Fusion::SimulationSnapshot* snapshot);
    // public T Spawn(T prefab, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Spawn(T prefab, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics) {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::Spawn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Spawn", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inputAuthority), ::il2cpp_utils::ExtractType(onBeforeSpawned), ::il2cpp_utils::ExtractType(predictionKey), ::il2cpp_utils::ExtractType(syncPhysics)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, prefab, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics);
    }
    // public Fusion.NetworkObject Spawn(UnityEngine.GameObject prefab, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics)
    // Offset: 0x2B5A368
    ::Fusion::NetworkObject* Spawn(::UnityEngine::GameObject* prefab, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics);
    // public Fusion.NetworkObject Spawn(Fusion.NetworkObject prefab, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics)
    // Offset: 0x2B5A5A0
    ::Fusion::NetworkObject* Spawn(::Fusion::NetworkObject* prefab, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics);
    // public Fusion.NetworkObject Spawn(Fusion.NetworkPrefabRef prefabRef, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey)
    // Offset: 0x2B5A944
    ::Fusion::NetworkObject* Spawn(::Fusion::NetworkPrefabRef prefabRef, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey);
    // public Fusion.NetworkObject Spawn(Fusion.NetworkPrefabAsset prefabAsset, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey)
    // Offset: 0x2B5AB58
    ::Fusion::NetworkObject* Spawn(::Fusion::NetworkPrefabAsset* prefabAsset, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey);
    // public Fusion.NetworkObject Spawn(Fusion.NetworkObjectGuid prefabGuid, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics)
    // Offset: 0x2B5A9A4
    ::Fusion::NetworkObject* Spawn(::Fusion::NetworkObjectGuid prefabGuid, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics);
    // public Fusion.NetworkObject Spawn(Fusion.NetworkPrefabId prefabId, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics, Fusion.NetworkObject resumeNO)
    // Offset: 0x2B5A830
    ::Fusion::NetworkObject* Spawn(::Fusion::NetworkPrefabId prefabId, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics, ::Fusion::NetworkObject* resumeNO);
    // public System.Void Despawn(Fusion.NetworkObject networkObject, System.Boolean allowPredicted)
    // Offset: 0x2B5BD58
    void Despawn(::Fusion::NetworkObject* networkObject, bool allowPredicted);
    // public T GetGlobal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetGlobal() {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::GetGlobal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlobal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public T AddOrGetGlobal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T AddOrGetGlobal() {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::AddOrGetGlobal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddOrGetGlobal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Void AddGlobal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AddGlobal() {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::AddGlobal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGlobal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // public System.Void RemoveGlobal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RemoveGlobal() {
      static_assert(std::is_convertible_v<T, ::Fusion::SimulationBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::RemoveGlobal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveGlobal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // public System.Void AddSimulationBehaviour(Fusion.SimulationBehaviour behaviour, Fusion.NetworkObject obj)
    // Offset: 0x2B57330
    void AddSimulationBehaviour(::Fusion::SimulationBehaviour* behaviour, ::Fusion::NetworkObject* obj);
    // public System.Void RemoveSimulationBehavior(Fusion.SimulationBehaviour behaviour)
    // Offset: 0x2B5C410
    void RemoveSimulationBehavior(::Fusion::SimulationBehaviour* behaviour);
    // System.Void Destroy(Fusion.NetworkObject networkObject, Fusion.NetworkObjectDestroyFlags flags)
    // Offset: 0x2B5C0A4
    void Destroy(::Fusion::NetworkObject* networkObject, ::Fusion::NetworkObjectDestroyFlags flags);
    // System.Void DestroyOrphaned(Fusion.NetworkObject networkObject, System.Boolean destroyedByEngine)
    // Offset: 0x2B5C4AC
    void DestroyOrphaned(::Fusion::NetworkObject* networkObject, bool destroyedByEngine);
    // System.Void DestroyOrphanedUnattached(Fusion.NetworkObject networkObject)
    // Offset: 0x2B5C53C
    void DestroyOrphanedUnattached(::Fusion::NetworkObject* networkObject);
    // System.Void PerformPrefabCleanup(Fusion.NetworkObject networkObject, System.Boolean destroyedByEngine, System.Boolean hasState)
    // Offset: 0x2B55B20
    void PerformPrefabCleanup(::Fusion::NetworkObject* networkObject, bool destroyedByEngine, bool hasState);
    // private System.Void PerformSceneObjectCleanup(Fusion.NetworkObject networkObject)
    // Offset: 0x2B5C584
    void PerformSceneObjectCleanup(::Fusion::NetworkObject* networkObject);
    // public System.Void Attach(Fusion.NetworkObject networkObject, System.Nullable`1<Fusion.PlayerRef> inputAuthority)
    // Offset: 0x2B5C9C4
    void Attach(::Fusion::NetworkObject* networkObject, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority);
    // System.Void AttachActivatedByUser(Fusion.NetworkObject networkObject)
    // Offset: 0x2B5DCD8
    void AttachActivatedByUser(::Fusion::NetworkObject* networkObject);
    // public System.Void RegisterUniqueObjects(System.Collections.Generic.IEnumerable`1<Fusion.NetworkObject> objects)
    // Offset: 0x2B5DE48
    void RegisterUniqueObjects(::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>* objects);
    // public System.Void RegisterSceneObjects(System.Collections.Generic.IEnumerable`1<Fusion.NetworkObject> objects)
    // Offset: 0x2B5DE4C
    void RegisterSceneObjects(::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>* objects);
    // System.Void InvokeOnBeforePhysicsStep()
    // Offset: 0x2B5EE8C
    void InvokeOnBeforePhysicsStep();
    // System.Void InvokeOnAfterPhysicsStep()
    // Offset: 0x2B5EEE8
    void InvokeOnAfterPhysicsStep();
    // System.Void InvokeOnAfterPhysicsSyncTransforms2D()
    // Offset: 0x2B5EF44
    void InvokeOnAfterPhysicsSyncTransforms2D();
    // System.Void InvokeOnAfterPhysicsSyncTransforms3D()
    // Offset: 0x2B5EFA0
    void InvokeOnAfterPhysicsSyncTransforms3D();
    // System.Void InvokeOnBeforeHitboxRegistration()
    // Offset: 0x2B5EFFC
    void InvokeOnBeforeHitboxRegistration();
    // private System.Boolean ExistsIn(Fusion.SimulationSnapshot snapshot, Fusion.NetworkObject obj)
    // Offset: 0x2B5F058
    bool ExistsIn(::Fusion::SimulationSnapshot* snapshot, ::Fusion::NetworkObject* obj);
    // private System.Void InvokeMethodOnPredictedSpawnedObject(Fusion.NetworkObject obj, System.Action`2<Fusion.NetworkObject,Fusion.IPredictedSpawnBehaviour> callback)
    // Offset: 0x2B584CC
    void InvokeMethodOnPredictedSpawnedObject(::Fusion::NetworkObject* obj, ::System::Action_2<::Fusion::NetworkObject*, ::Fusion::IPredictedSpawnBehaviour*>* callback);
    // private System.Void InvokeMethodOnPredictedDespawnedObject(Fusion.NetworkObject obj, System.Action`2<Fusion.NetworkObject,Fusion.IPredictedDespawnBehaviour> callback)
    // Offset: 0x2B5942C
    void InvokeMethodOnPredictedDespawnedObject(::Fusion::NetworkObject* obj, ::System::Action_2<::Fusion::NetworkObject*, ::Fusion::IPredictedDespawnBehaviour*>* callback);
    // private Fusion.NetworkObject SpawnInternal(Fusion.NetworkPrefabId prefabId, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<Fusion.PlayerRef> inputAuthority, System.Object onBeforeSpawned, System.Nullable`1<Fusion.NetworkObjectPredictionKey> predictionKey, System.Boolean syncPhysics, Fusion.NetworkObject resumeNO)
    // Offset: 0x2B5AC8C
    ::Fusion::NetworkObject* SpawnInternal(::Fusion::NetworkPrefabId prefabId, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Il2CppObject* onBeforeSpawned, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey> predictionKey, bool syncPhysics, ::Fusion::NetworkObject* resumeNO);
    // private Fusion.NetworkId GetNextId()
    // Offset: 0x2B5CA98
    ::Fusion::NetworkId GetNextId();
    // private Fusion.NetworkObject CreateInstance(Fusion.NetworkPrefabId prefab, Fusion.NetworkObjectHeader* header)
    // Offset: 0x2B5F09C
    ::Fusion::NetworkObject* CreateInstance(::Fusion::NetworkPrefabId prefab, ::Fusion::NetworkObjectHeader* header);
    // private System.Boolean TryResolvePrefabInstance(Fusion.NetworkObjectHeader* header, out Fusion.NetworkObject result)
    // Offset: 0x2B5F4D0
    bool TryResolvePrefabInstance(::Fusion::NetworkObjectHeader* header, ByRef<::Fusion::NetworkObject*> result);
    // private System.Void InitializeNetworkObjectAssignRunner(Fusion.NetworkObject instance)
    // Offset: 0x2B5CB4C
    void InitializeNetworkObjectAssignRunner(::Fusion::NetworkObject* instance);
    // private System.Void InitializeNetworkObjectInstance(Fusion.NetworkObjectHeader* header, Fusion.NetworkObject instance, System.Nullable`1<Fusion.PlayerRef> inputAuthority, Fusion.NetworkRunner/AttachOptions options, System.Int32* interestGroups)
    // Offset: 0x2B5CC38
    void InitializeNetworkObjectInstance(::Fusion::NetworkObjectHeader* header, ::Fusion::NetworkObject* instance, ::System::Nullable_1<::Fusion::PlayerRef> inputAuthority, ::Fusion::NetworkRunner::AttachOptions options, int* interestGroups);
    // private System.Void InitializeNetworkObjectState(Fusion.NetworkObject instance, Fusion.NetworkRunner/AttachOptions options)
    // Offset: 0x2B5D520
    void InitializeNetworkObjectState(::Fusion::NetworkObject* instance, ::Fusion::NetworkRunner::AttachOptions options);
    // private System.Void InvokeBeforeSpawnedCallbacks(Fusion.NetworkObject instance, Fusion.NetworkRunner/AttachOptions options, Fusion.NetworkRunner/OnBeforeSpawned onBeforeSpawned)
    // Offset: 0x2B5D630
    void InvokeBeforeSpawnedCallbacks(::Fusion::NetworkObject* instance, ::Fusion::NetworkRunner::AttachOptions options, ::Fusion::NetworkRunner::OnBeforeSpawned* onBeforeSpawned);
    // private System.Void InvokeSpawnedCallback(Fusion.NetworkObject instance)
    // Offset: 0x2B5DA00
    void InvokeSpawnedCallback(::Fusion::NetworkObject* instance);
    // System.Void InvokeDespawnedCallback(Fusion.NetworkObject instance, System.Boolean hasState)
    // Offset: 0x2B5C6CC
    void InvokeDespawnedCallback(::Fusion::NetworkObject* instance, bool hasState);
    // private System.Void InvokeAfterSpawnedCallback(Fusion.NetworkObject instance)
    // Offset: 0x2B5DB48
    void InvokeAfterSpawnedCallback(::Fusion::NetworkObject* instance);
    // private System.Void InvokeBeforeUpdate()
    // Offset: 0x2B58F48
    void InvokeBeforeUpdate();
    // private System.Void InvokeAfterUpdate()
    // Offset: 0x2B590E0
    void InvokeAfterUpdate();
    // System.Void InitFusionLogSystem()
    // Offset: 0x2B56F6C
    void InitFusionLogSystem();
    // static Fusion.NetworkProjectConfig SetupNetworkProjectConfig(Fusion.NetworkRunnerInitializeArgs args)
    // Offset: 0x2B57144
    static ::Fusion::NetworkProjectConfig* SetupNetworkProjectConfig(::Fusion::NetworkRunnerInitializeArgs args);
    // public Fusion.RpcTargetStatus GetRpcTargetStatus(Fusion.PlayerRef target)
    // Offset: 0x2B5F8E8
    ::Fusion::RpcTargetStatus GetRpcTargetStatus(::Fusion::PlayerRef target);
    // public System.Boolean HasAnyActiveConnections()
    // Offset: 0x2B5F908
    bool HasAnyActiveConnections();
    // System.Boolean IsHostPlayer(Fusion.PlayerRef player)
    // Offset: 0x2B50938
    bool IsHostPlayer(::Fusion::PlayerRef player);
    // System.Boolean TryGetHostPlayer(out Fusion.PlayerRef player)
    // Offset: 0x2B509EC
    bool TryGetHostPlayer(ByRef<::Fusion::PlayerRef> player);
    // static private Fusion.NetworkObjectFlags AttachOptionsToNetworkObjectFlags(Fusion.NetworkRunner/AttachOptions options)
    // Offset: 0x2B5F8E0
    static ::Fusion::NetworkObjectFlags AttachOptionsToNetworkObjectFlags(::Fusion::NetworkRunner::AttachOptions options);
    // static private Fusion.NetworkRunner/AttachOptions NetworkObjectFlagsToAttachOptions(Fusion.NetworkObjectFlags flags)
    // Offset: 0x2B5DE40
    static ::Fusion::NetworkRunner::AttachOptions NetworkObjectFlagsToAttachOptions(::Fusion::NetworkObjectFlags flags);
    // static private System.Boolean IsAwakeAtInitialization(Fusion.NetworkObject obj)
    // Offset: 0x2B5F924
    static bool IsAwakeAtInitialization(::Fusion::NetworkObject* obj);
    // public System.Int32 GetHashCodeForLogger()
    // Offset: 0x2B5F944
    int GetHashCodeForLogger();
    // System.String BuildReport()
    // Offset: 0x2B5F950
    ::StringW BuildReport();
    // static System.Boolean TryGetPrettyRunnerName(System.Text.StringBuilder output, Fusion.NetworkRunner runner, in Fusion.LogOptions options)
    // Offset: 0x2B5FBEC
    static bool TryGetPrettyRunnerName(::System::Text::StringBuilder* output, ::Fusion::NetworkRunner* runner, ByRef<::Fusion::LogOptions> options);
    // private System.Void Fusion.ILogBuilder.BuildLogMessage(System.Text.StringBuilder builder, System.String message, in Fusion.LogOptions options)
    // Offset: 0x2B5FE44
    void Fusion_ILogBuilder_BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options);
    // static private System.Void ResetAllSimulationStatics()
    // Offset: 0x2B5FF04
    static void ResetAllSimulationStatics();
    // public System.Boolean get_IsHostMigrationEnabled()
    // Offset: 0x2B5FFE0
    bool get_IsHostMigrationEnabled();
    // private System.Void set_IsHostMigrationEnabled(System.Boolean value)
    // Offset: 0x2B5FFE8
    void set_IsHostMigrationEnabled(bool value);
    // public System.Boolean get_IsResume()
    // Offset: 0x2B5A7C4
    bool get_IsResume();
    // System.UInt32 get_HostMigrationSnapshotDelay()
    // Offset: 0x2B5FFF4
    uint get_HostMigrationSnapshotDelay();
    // private System.Void set_HostMigrationSnapshotDelay(System.UInt32 value)
    // Offset: 0x2B5FFFC
    void set_HostMigrationSnapshotDelay(uint value);
    // public System.Threading.Tasks.Task`1<System.Boolean> PushHostMigrationSnapshot()
    // Offset: 0x2B60004
    ::System::Threading::Tasks::Task_1<bool>* PushHostMigrationSnapshot();
    // public System.Collections.Generic.IEnumerable`1<Fusion.NetworkObject> GetResumeSnapshotNetworkObjects()
    // Offset: 0x2B600B8
    ::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>* GetResumeSnapshotNetworkObjects();
    // public System.Collections.Generic.IEnumerable`1<System.ValueTuple`2<Fusion.NetworkObject,Fusion.NetworkObjectHeaderPtr>> GetResumeSnapshotNetworkSceneObjects()
    // Offset: 0x2B6012C
    ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Fusion::NetworkObject*, ::Fusion::NetworkObjectHeaderPtr>>* GetResumeSnapshotNetworkSceneObjects();
    // private System.Collections.IEnumerator RunHostMigrationResume(Fusion.NetworkRunnerInitializeArgs args)
    // Offset: 0x2B57558
    ::System::Collections::IEnumerator* RunHostMigrationResume(::Fusion::NetworkRunnerInitializeArgs args);
    // private System.Void CleanHostMigrationSnapshots()
    // Offset: 0x2B55D68
    void CleanHostMigrationSnapshots();
    // private System.UInt32 GetResumeNetworkId()
    // Offset: 0x2B601A0
    uint GetResumeNetworkId();
    // private Fusion.NetworkObject GetNetworkObjectFromResumeSnapshot(Fusion.NetworkObjectHeaderPtr networkObjectPtr, System.Collections.Generic.Dictionary`2<Fusion.NetworkId,Fusion.NetworkObjectHeaderPtr> headerList, System.Collections.Generic.Dictionary`2<Fusion.NetworkId,System.Collections.Generic.List`1<Fusion.NetworkId>> nestedMapping)
    // Offset: 0x2B601A8
    ::Fusion::NetworkObject* GetNetworkObjectFromResumeSnapshot(::Fusion::NetworkObjectHeaderPtr networkObjectPtr, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::NetworkObjectHeaderPtr>* headerList, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::System::Collections::Generic::List_1<::Fusion::NetworkId>*>* nestedMapping);
    // private Fusion.NetworkObject GetSceneNetworkObjectFromResumeSnapshot(Fusion.NetworkObjectHeaderPtr networkObjectPtr)
    // Offset: 0x2B60504
    ::Fusion::NetworkObject* GetSceneNetworkObjectFromResumeSnapshot(::Fusion::NetworkObjectHeaderPtr networkObjectPtr);
    // private System.Void InitialzeTempNetworkObjectInstance(Fusion.NetworkObjectHeader* header, Fusion.NetworkObject instance)
    // Offset: 0x2B60364
    void InitialzeTempNetworkObjectInstance(::Fusion::NetworkObjectHeader* header, ::Fusion::NetworkObject* instance);
    // System.Void SetupHostMigration(Fusion.Protocol.HostMigration hostMigration)
    // Offset: 0x2B60668
    void SetupHostMigration(::Fusion::Protocol::HostMigration* hostMigration);
    // System.Void StartHostMigration(Fusion.Protocol.Snapshot snapshot)
    // Offset: 0x2B60678
    void StartHostMigration(::Fusion::Protocol::Snapshot* snapshot);
    // System.Void Service_HostSnapshot()
    // Offset: 0x2B58890
    void Service_HostSnapshot();
    // System.Threading.Tasks.Task`1<System.ValueTuple`5<System.Boolean,System.Int32,System.Int32,System.UInt32,System.Byte[]>> GetServerSnapshot()
    // Offset: 0x2B60940
    ::System::Threading::Tasks::Task_1<::System::ValueTuple_5<bool, int, int, uint, ::ArrayW<uint8_t>>>* GetServerSnapshot();
    // System.Int32 GetHostSnapshotBufferSize()
    // Offset: 0x2B60918
    int GetHostSnapshotBufferSize();
    // Fusion.NetworkRunner/HostSnapshotCompressionJob BuildCompressHostSnapshotJob()
    // Offset: 0x2B60BA8
    ::Fusion::NetworkRunner::HostSnapshotCompressionJob BuildCompressHostSnapshotJob();
    // System.Void InvokeHostMigration(Fusion.HostMigrationToken migrationToken)
    // Offset: 0x2B6074C
    void InvokeHostMigration(::Fusion::HostMigrationToken* migrationToken);
    // private System.Void AddInactiveObjectGuard(Fusion.NetworkObject obj)
    // Offset: 0x2B5F794
    void AddInactiveObjectGuard(::Fusion::NetworkObject* obj);
    // static public System.Collections.Generic.List`1/Enumerator<Fusion.NetworkRunner> GetInstancesEnumerator()
    // Offset: 0x2B60CCC
    static typename ::System::Collections::Generic::List_1<::Fusion::NetworkRunner*>::Enumerator GetInstancesEnumerator();
    // static public System.Collections.Generic.IReadOnlyList`1<Fusion.NetworkRunner> get_Instances()
    // Offset: 0x2B60D68
    static ::System::Collections::Generic::IReadOnlyList_1<::Fusion::NetworkRunner*>* get_Instances();
    // static private System.Boolean AddInstance(Fusion.NetworkRunner runner)
    // Offset: 0x2B573D4
    static bool AddInstance(::Fusion::NetworkRunner* runner);
    // static private System.Boolean RemoveInstance(Fusion.NetworkRunner runner)
    // Offset: 0x2B55800
    static bool RemoveInstance(::Fusion::NetworkRunner* runner);
    // static System.Void InvokeUpdate(System.Single delta)
    // Offset: 0x2B60DC0
    static void InvokeUpdate(float delta);
    // static System.Void InvokeRender()
    // Offset: 0x2B60FAC
    static void InvokeRender();
    // public System.Boolean get_IsCloudReady()
    // Offset: 0x2B579C4
    bool get_IsCloudReady();
    // public System.String get_UserId()
    // Offset: 0x2B57A40
    ::StringW get_UserId();
    // public Fusion.Photon.Realtime.AuthenticationValues get_AuthenticationValues()
    // Offset: 0x2B61190
    ::Fusion::Photon::Realtime::AuthenticationValues* get_AuthenticationValues();
    // public Fusion.GameMode get_GameMode()
    // Offset: 0x2B611C4
    ::Fusion::GameMode get_GameMode();
    // private System.Void set_GameMode(Fusion.GameMode value)
    // Offset: 0x2B611CC
    void set_GameMode(::Fusion::GameMode value);
    // public Fusion.SessionInfo get_SessionInfo()
    // Offset: 0x2B611D4
    ::Fusion::SessionInfo* get_SessionInfo();
    // private System.Void set_SessionInfo(Fusion.SessionInfo value)
    // Offset: 0x2B611DC
    void set_SessionInfo(::Fusion::SessionInfo* value);
    // public Fusion.LobbyInfo get_LobbyInfo()
    // Offset: 0x2B611EC
    ::Fusion::LobbyInfo* get_LobbyInfo();
    // private System.Void set_LobbyInfo(Fusion.LobbyInfo value)
    // Offset: 0x2B611F4
    void set_LobbyInfo(::Fusion::LobbyInfo* value);
    // public Fusion.ConnectionType get_CurrentConnectionType()
    // Offset: 0x2B61204
    ::Fusion::ConnectionType get_CurrentConnectionType();
    // public Fusion.Sockets.Stun.NATType get_NATType()
    // Offset: 0x2B612F8
    ::Fusion::Sockets::Stun::NATType get_NATType();
    // public System.Boolean get_IsSharedModeMasterClient()
    // Offset: 0x2B57510
    bool get_IsSharedModeMasterClient();
    // public System.Threading.Tasks.Task`1<Fusion.StartGameResult> JoinSessionLobby(Fusion.SessionLobby sessionLobby, System.String lobbyID, Fusion.Photon.Realtime.AuthenticationValues authentication, Fusion.Photon.Realtime.AppSettings customAppSettings, System.Nullable`1<System.Boolean> useDefaultCloudPorts)
    // Offset: 0x2B6130C
    ::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* JoinSessionLobby(::Fusion::SessionLobby sessionLobby, ::StringW lobbyID, ::Fusion::Photon::Realtime::AuthenticationValues* authentication, ::Fusion::Photon::Realtime::AppSettings* customAppSettings, ::System::Nullable_1<bool> useDefaultCloudPorts);
    // public System.Threading.Tasks.Task`1<Fusion.StartGameResult> StartGame(Fusion.StartGameArgs args)
    // Offset: 0x2B61478
    ::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* StartGame(::Fusion::StartGameArgs args);
    // System.Threading.Tasks.Task ConnectToCloud(Fusion.Photon.Realtime.AuthenticationValues authentication, Fusion.Photon.Realtime.AppSettings customAppSettings, Fusion.CloudCommunicator externalCommunicator, System.Nullable`1<System.Boolean> useDefaultCloudPorts)
    // Offset: 0x2B61950
    ::System::Threading::Tasks::Task* ConnectToCloud(::Fusion::Photon::Realtime::AuthenticationValues* authentication, ::Fusion::Photon::Realtime::AppSettings* customAppSettings, ::Fusion::CloudCommunicator* externalCommunicator, ::System::Nullable_1<bool> useDefaultCloudPorts);
    // System.Threading.Tasks.Task DisconnectFromCloud()
    // Offset: 0x2B55880
    ::System::Threading::Tasks::Task* DisconnectFromCloud();
    // private System.Threading.Tasks.Task`1<Fusion.StartGameResult> StartGameModeSinglePlayer(Fusion.StartGameArgs args)
    // Offset: 0x2B616B0
    ::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* StartGameModeSinglePlayer(::Fusion::StartGameArgs args);
    // private System.Threading.Tasks.Task`1<Fusion.StartGameResult> StartGameModeCloud(Fusion.StartGameArgs args)
    // Offset: 0x2B61800
    ::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* StartGameModeCloud(::Fusion::StartGameArgs args);
    // private System.Threading.Tasks.Task`1<Fusion.StartGameResult> ShutdownAndBuildResult(System.Exception e)
    // Offset: 0x2B61A8C
    ::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* ShutdownAndBuildResult(::System::Exception* e);
    // System.Void InvokeSessionListUpdated(System.Collections.Generic.List`1<Fusion.SessionInfo> sessionList)
    // Offset: 0x2B61BA4
    void InvokeSessionListUpdated(::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionList);
    // System.Void InvokeCustomAuthenticationResponse(System.Collections.Generic.Dictionary`2<System.String,System.Object> data)
    // Offset: 0x2B61D80
    void InvokeCustomAuthenticationResponse(::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* data);
    // public Fusion.SceneRef get_CurrentScene()
    // Offset: 0x2B61F5C
    ::Fusion::SceneRef get_CurrentScene();
    // private System.Boolean get_IsSceneMaster()
    // Offset: 0x2B5C990
    bool get_IsSceneMaster();
    // public UnityEngine.SceneManagement.Scene get_SimulationUnityScene()
    // Offset: 0x2B61F94
    ::UnityEngine::SceneManagement::Scene get_SimulationUnityScene();
    // public UnityEngine.SceneManagement.Scene get_MultiplePeerUnityScene()
    // Offset: 0x2B62014
    ::UnityEngine::SceneManagement::Scene get_MultiplePeerUnityScene();
    // public System.Void set_MultiplePeerUnityScene(UnityEngine.SceneManagement.Scene value)
    // Offset: 0x2B55964
    void set_MultiplePeerUnityScene(::UnityEngine::SceneManagement::Scene value);
    // public System.Boolean get_IsMultiplePeerSceneTemp()
    // Offset: 0x2B6201C
    bool get_IsMultiplePeerSceneTemp();
    // public System.Void SetActiveScene(Fusion.SceneRef scene)
    // Offset: 0x2B574F8
    void SetActiveScene(::Fusion::SceneRef scene);
    // public System.Void InvokeSceneLoadStart()
    // Offset: 0x2B62024
    void InvokeSceneLoadStart();
    // public System.Void InvokeSceneLoadDone()
    // Offset: 0x2B621E4
    void InvokeSceneLoadDone();
    // static public Fusion.NetworkRunner GetRunnerForGameObject(UnityEngine.GameObject gameObject)
    // Offset: 0x2B623A4
    static ::Fusion::NetworkRunner* GetRunnerForGameObject(::UnityEngine::GameObject* gameObject);
    // static public Fusion.NetworkRunner GetRunnerForScene(UnityEngine.SceneManagement.Scene scene)
    // Offset: 0x2B62414
    static ::Fusion::NetworkRunner* GetRunnerForScene(::UnityEngine::SceneManagement::Scene scene);
    // public System.Boolean TryMultiplePeerAssignTempScene()
    // Offset: 0x2B57234
    bool TryMultiplePeerAssignTempScene();
    // public UnityEngine.PhysicsScene GetPhysicsScene()
    // Offset: 0x2B6260C
    ::UnityEngine::PhysicsScene GetPhysicsScene();
    // public UnityEngine.PhysicsScene2D GetPhysicsScene2D()
    // Offset: 0x2B626B4
    ::UnityEngine::PhysicsScene2D GetPhysicsScene2D();
    // public UnityEngine.GameObject InstantiateInRunnerScene(UnityEngine.GameObject original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x2B62760
    ::UnityEngine::GameObject* InstantiateInRunnerScene(::UnityEngine::GameObject* original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public UnityEngine.GameObject InstantiateInRunnerScene(UnityEngine.GameObject original)
    // Offset: 0x2B62964
    ::UnityEngine::GameObject* InstantiateInRunnerScene(::UnityEngine::GameObject* original);
    // public T InstantiateInRunnerScene(T original)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T InstantiateInRunnerScene(T original) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::InstantiateInRunnerScene");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateInRunnerScene", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, original);
    }
    // public T InstantiateInRunnerScene(T original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T InstantiateInRunnerScene(T original, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::InstantiateInRunnerScene");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateInRunnerScene", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, original, position, rotation);
    }
    // public System.Void MoveToRunnerScene(T component)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void MoveToRunnerScene(T component) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::MoveToRunnerScene");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveToRunnerScene", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, component);
    }
    // public System.Void MoveToRunnerScene(UnityEngine.GameObject go)
    // Offset: 0x2B5F2C0
    void MoveToRunnerScene(::UnityEngine::GameObject* go);
    // public System.Boolean EnsureRunnerSceneIsActive(out UnityEngine.SceneManagement.Scene previousActiveScene)
    // Offset: 0x2B628A0
    bool EnsureRunnerSceneIsActive(ByRef<::UnityEngine::SceneManagement::Scene> previousActiveScene);
    // static Fusion.NetworkRunner GetRunnerForScene(System.Int32 sceneHandle)
    // Offset: 0x2B62480
    static ::Fusion::NetworkRunner* GetRunnerForScene(int sceneHandle);
    // private System.Boolean Fusion.Simulation.ICallbacks.get_CanReceivePlayerJoinLeaveCallbacks()
    // Offset: 0x2B62A44
    bool Fusion_Simulation_ICallbacks_get_CanReceivePlayerJoinLeaveCallbacks();
    // private System.Boolean Fusion.Simulation.ICallbacks.get_IsSharedModeMasterClient()
    // Offset: 0x2B62B0C
    bool Fusion_Simulation_ICallbacks_get_IsSharedModeMasterClient();
    // private System.String[] Fusion.Simulation.ICallbacks.GetDefaultInterestGroups(Fusion.NetworkId id)
    // Offset: 0x2B62B10
    ::ArrayW<::StringW> Fusion_Simulation_ICallbacks_GetDefaultInterestGroups(::Fusion::NetworkId id);
    // private System.Void Fusion.Simulation.ICallbacks.ObjectReceivedUpdate(Fusion.NetworkId id, System.Int32 tick)
    // Offset: 0x2B62BE8
    void Fusion_Simulation_ICallbacks_ObjectReceivedUpdate(::Fusion::NetworkId id, int tick);
    // private System.Void Fusion.Simulation.ICallbacks.ObjectStateAuthorityChanged(Fusion.NetworkId id)
    // Offset: 0x2B62C6C
    void Fusion_Simulation_ICallbacks_ObjectStateAuthorityChanged(::Fusion::NetworkId id);
    // private System.Void ObjectLeaveSimulation(Fusion.NetworkId id)
    // Offset: 0x2B5A108
    void ObjectLeaveSimulation(::Fusion::NetworkId id);
    // private System.Void ObjectJoinSimulation(Fusion.NetworkId id)
    // Offset: 0x2B59F2C
    void ObjectJoinSimulation(::Fusion::NetworkId id);
    // private System.Void Fusion.Simulation.ICallbacks.OnAfterSimulation()
    // Offset: 0x2B62FCC
    void Fusion_Simulation_ICallbacks_OnAfterSimulation();
    // private System.Void Fusion.Simulation.ICallbacks.OnBeforeSimulation()
    // Offset: 0x2B63484
    void Fusion_Simulation_ICallbacks_OnBeforeSimulation();
    // private System.Boolean Fusion.Simulation.ICallbacks.TryBeginUpdateRemotePrefabs()
    // Offset: 0x2B63488
    bool Fusion_Simulation_ICallbacks_TryBeginUpdateRemotePrefabs();
    // private System.Void Fusion.Simulation.ICallbacks.EndUpdateRemotePrefabs()
    // Offset: 0x2B635BC
    void Fusion_Simulation_ICallbacks_EndUpdateRemotePrefabs();
    // private System.Boolean Fusion.Simulation.ICallbacks.CreateRemotePrefab(Fusion.NetworkObjectHeader* header)
    // Offset: 0x2B63D9C
    bool Fusion_Simulation_ICallbacks_CreateRemotePrefab(::Fusion::NetworkObjectHeader* header);
    // private System.Boolean Fusion.Simulation.ICallbacks.DestroyRemotePrefab(Fusion.NetworkId id, System.Boolean exists)
    // Offset: 0x2B64244
    bool Fusion_Simulation_ICallbacks_DestroyRemotePrefab(::Fusion::NetworkId id, bool exists);
    // private System.Void ProcessSpawnQueue()
    // Offset: 0x2B58F54
    void ProcessSpawnQueue();
    // private System.Void Fusion.Simulation.ICallbacks.OnBeforeCopyPreviousState()
    // Offset: 0x2B64368
    void Fusion_Simulation_ICallbacks_OnBeforeCopyPreviousState();
    // private System.Void Fusion.Simulation.ICallbacks.OnTick()
    // Offset: 0x2B64374
    void Fusion_Simulation_ICallbacks_OnTick();
    // private System.Void Fusion.Simulation.ICallbacks.OnServerStart()
    // Offset: 0x2B6472C
    void Fusion_Simulation_ICallbacks_OnServerStart();
    // private System.Void Fusion.Simulation.ICallbacks.OnInputMissing(Fusion.SimulationInput input)
    // Offset: 0x2B6478C
    void Fusion_Simulation_ICallbacks_OnInputMissing(::Fusion::SimulationInput* input);
    // private System.Void Fusion.Simulation.ICallbacks.OnInput(Fusion.SimulationInput input)
    // Offset: 0x2B648F8
    void Fusion_Simulation_ICallbacks_OnInput(::Fusion::SimulationInput* input);
    // private System.Void OnMessageUser(Fusion.SimulationMessage* message)
    // Offset: 0x2B64A84
    void OnMessageUser(::Fusion::SimulationMessage* message);
    // private System.Void Fusion.Simulation.ICallbacks.OnMessage(Fusion.SimulationMessage* message)
    // Offset: 0x2B64C60
    void Fusion_Simulation_ICallbacks_OnMessage(::Fusion::SimulationMessage* message);
    // private System.Void Fusion.Simulation.ICallbacks.OnBeforeClientSidePredictionReset()
    // Offset: 0x2B6544C
    void Fusion_Simulation_ICallbacks_OnBeforeClientSidePredictionReset();
    // private System.Void Fusion.Simulation.ICallbacks.OnAfterClientSidePredictionReset()
    // Offset: 0x2B65458
    void Fusion_Simulation_ICallbacks_OnAfterClientSidePredictionReset();
    // private System.Void Fusion.Simulation.ICallbacks.OnAfterTick()
    // Offset: 0x2B65464
    void Fusion_Simulation_ICallbacks_OnAfterTick();
    // private System.Void Fusion.Simulation.ICallbacks.OnBeforeTick()
    // Offset: 0x2B65470
    void Fusion_Simulation_ICallbacks_OnBeforeTick();
    // private System.Void Fusion.Simulation.ICallbacks.OnBeforeAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B6547C
    void Fusion_Simulation_ICallbacks_OnBeforeAllTicks(bool resimulation, int tickCount);
    // private System.Void Fusion.Simulation.ICallbacks.OnConnectedToServer()
    // Offset: 0x2B6548C
    void Fusion_Simulation_ICallbacks_OnConnectedToServer();
    // private System.Void Fusion.Simulation.ICallbacks.OnDisconnectedFromServer()
    // Offset: 0x2B65648
    void Fusion_Simulation_ICallbacks_OnDisconnectedFromServer();
    // private System.Void Fusion.Simulation.ICallbacks.OnAfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B6574C
    void Fusion_Simulation_ICallbacks_OnAfterAllTicks(bool resimulation, int tickCount);
    // private System.Void Fusion.Simulation.ICallbacks.OnConnectionFailed(Fusion.Sockets.NetAddress remoteAddress, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0x2B65770
    void Fusion_Simulation_ICallbacks_OnConnectionFailed(::Fusion::Sockets::NetAddress remoteAddress, ::Fusion::Sockets::NetConnectFailedReason reason);
    // private System.Void Fusion.Simulation.ICallbacks.OnReliableData(Fusion.PlayerRef player, System.Byte[] dataArray)
    // Offset: 0x2B659B0
    void Fusion_Simulation_ICallbacks_OnReliableData(::Fusion::PlayerRef player, ::ArrayW<uint8_t> dataArray);
    // private System.Void Fusion.Simulation.ICallbacks.PlayerJoined(Fusion.PlayerRef player)
    // Offset: 0x2B65B18
    void Fusion_Simulation_ICallbacks_PlayerJoined(::Fusion::PlayerRef player);
    // private System.Void Fusion.Simulation.ICallbacks.PlayerLeft(Fusion.PlayerRef player)
    // Offset: 0x2B65C38
    void Fusion_Simulation_ICallbacks_PlayerLeft(::Fusion::PlayerRef player);
    // private System.Boolean Fusion.Simulation.ICallbacks.OnConnectionRequest(Fusion.Sockets.NetAddress remoteAddress, System.Byte[] token)
    // Offset: 0x2B65D60
    bool Fusion_Simulation_ICallbacks_OnConnectionRequest(::Fusion::Sockets::NetAddress remoteAddress, ::ArrayW<uint8_t> token);
    // private System.Void Fusion.Simulation.ICallbacks.OnInternalConnectionAttempt(System.Int32 attempt, System.Int32 totalConnectionAttempts, out System.Boolean shouldChange, out Fusion.Sockets.NetAddress newAddress)
    // Offset: 0x2B65F5C
    void Fusion_Simulation_ICallbacks_OnInternalConnectionAttempt(int attempt, int totalConnectionAttempts, ByRef<bool> shouldChange, ByRef<::Fusion::Sockets::NetAddress> newAddress);
    // static private System.Void .cctor()
    // Offset: 0x2B6627C
    static void _cctor();
    // private System.Void <PerformPrefabCleanup>g__FreeObject|194_0(Fusion.NetworkObject obj)
    // Offset: 0x2B5C858
    void $PerformPrefabCleanup$g__FreeObject_194_0(::Fusion::NetworkObject* obj);
    // static System.Void <RegisterSceneObjects>g__ThrowIfInvalidSceneObject|199_0(Fusion.NetworkObject obj)
    // Offset: 0x2B5EC8C
    static void $RegisterSceneObjects$g__ThrowIfInvalidSceneObject_199_0(::Fusion::NetworkObject* obj);
    // private Fusion.NetworkId <SpawnInternal>g__CheckIdOrGetNewId|208_0(Fusion.NetworkObject obj)
    // Offset: 0x2B5F444
    ::Fusion::NetworkId $SpawnInternal$g__CheckIdOrGetNewId_208_0(::Fusion::NetworkObject* obj);
    // private System.Boolean <RunHostMigrationResume>b__259_0()
    // Offset: 0x2B663E0
    bool $RunHostMigrationResume$b__259_0();
    // public System.Void .ctor()
    // Offset: 0x2B65FD0
    // Implemented from: Fusion.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkRunner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkRunner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkRunner*, creationType>()));
    }
  }; // Fusion.NetworkRunner
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner::HostSnapshotCompressionJob, "Fusion", "NetworkRunner/HostSnapshotCompressionJob");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner::SimulationPhase, "Fusion", "NetworkRunner/SimulationPhase");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner::DeferredShutdownParams, "Fusion", "NetworkRunner/DeferredShutdownParams");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner::SpawnQueueEntry, "Fusion", "NetworkRunner/SpawnQueueEntry");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkRunner::ShutdownFlags, "Fusion", "NetworkRunner/ShutdownFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_BuildType
// Il2CppName: get_BuildType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner::BuildTypes (*)()>(&Fusion::NetworkRunner::get_BuildType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_BuildType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ResetStatics
// Il2CppName: ResetStatics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkRunner::ResetStatics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ResetStatics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsSimulationUpdating
// Il2CppName: get_IsSimulationUpdating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsSimulationUpdating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsSimulationUpdating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::_hasNetworkObject
// Il2CppName: _hasNetworkObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::_hasNetworkObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "_hasNetworkObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsVisible
// Il2CppName: get_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_IsVisible
// Il2CppName: set_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool)>(&Fusion::NetworkRunner::set_IsVisible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_ProvideInput
// Il2CppName: get_ProvideInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_ProvideInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_ProvideInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_ProvideInput
// Il2CppName: set_ProvideInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool)>(&Fusion::NetworkRunner::set_ProvideInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_ProvideInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Topology
// Il2CppName: get_Topology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationConfig::Topologies (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Topology)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Topology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Simulation
// Il2CppName: get_Simulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Simulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Simulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Mode
// Il2CppName: get_Mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationModes (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationStages (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_DeltaTime
// Il2CppName: get_DeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_DeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_DeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_SimulationTime
// Il2CppName: get_SimulationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_SimulationTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_SimulationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_SimulationRenderTime
// Il2CppName: get_SimulationRenderTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_SimulationRenderTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_SimulationRenderTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_InterpolationRenderTime
// Il2CppName: get_InterpolationRenderTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_InterpolationRenderTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_InterpolationRenderTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsShutdown
// Il2CppName: get_IsShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsRegularShutdown
// Il2CppName: get_IsRegularShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsRegularShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsRegularShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsStarting
// Il2CppName: get_IsStarting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsStarting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsStarting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsClient
// Il2CppName: get_IsClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsConnectedToServer
// Il2CppName: get_IsConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsConnectedToServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsServer
// Il2CppName: get_IsServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsPlayer
// Il2CppName: get_IsPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsSinglePlayer
// Il2CppName: get_IsSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsSinglePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsLastTick
// Il2CppName: get_IsLastTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsLastTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsLastTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsFirstTick
// Il2CppName: get_IsFirstTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsFirstTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsFirstTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsForward
// Il2CppName: get_IsForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsForward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsResimulation
// Il2CppName: get_IsResimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsResimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsResimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner::States (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_LocalPlayer
// Il2CppName: get_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::PlayerRef (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_LocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Tick
// Il2CppName: get_Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Tick (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_TicksExecuted
// Il2CppName: get_TicksExecuted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_TicksExecuted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_TicksExecuted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_ActivePlayers
// Il2CppName: get_ActivePlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Fusion::PlayerRef>* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_ActivePlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_ActivePlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_SceneManager
// Il2CppName: get_SceneManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::INetworkSceneManager* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_SceneManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_SceneManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_ObjectPool
// Il2CppName: get_ObjectPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::INetworkObjectPool* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_ObjectPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_ObjectPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_OperationsCancellationToken
// Il2CppName: get_OperationsCancellationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationToken (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_OperationsCancellationToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_OperationsCancellationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_LagCompensation
// Il2CppName: get_LagCompensation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::HitboxManager* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_LagCompensation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_LagCompensation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::Disconnect)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::Sockets::NetAddress)>(&Fusion::NetworkRunner::Disconnect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Fusion::NetworkRunner::Connect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* uniqueId = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, token, uniqueId});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ShutdownAction
// Il2CppName: ShutdownAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::ShutdownAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ShutdownAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ShutdownWithCleanupCoroutine
// Il2CppName: ShutdownWithCleanupCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::ShutdownWithCleanupCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ShutdownWithCleanupCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Shutdown
// Il2CppName: Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Fusion::NetworkRunner::*)(bool, ::Fusion::ShutdownReason, bool)>(&Fusion::NetworkRunner::Shutdown)> {
  static const MethodInfo* get() {
    static auto* destroyGameObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* shutdownReason = &::il2cpp_utils::GetClassFromName("Fusion", "ShutdownReason")->byval_arg;
    static auto* forceShutdownProcedure = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destroyGameObject, shutdownReason, forceShutdownProcedure});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::CreateCloudSocket
// Il2CppName: CreateCloudSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::INetSocket* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::CreateCloudSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "CreateCloudSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetInitializationDone
// Il2CppName: SetInitializationDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkRunnerInitializeArgs)>(&Fusion::NetworkRunner::SetInitializationDone)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerInitializeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetInitializationDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (Fusion::NetworkRunner::*)(::Fusion::NetworkRunnerInitializeArgs)>(&Fusion::NetworkRunner::Initialize)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerInitializeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SinglePlayerPause
// Il2CppName: SinglePlayerPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::SinglePlayerPause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SinglePlayerPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SinglePlayerContinue
// Il2CppName: SinglePlayerContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::SinglePlayerContinue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SinglePlayerContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SinglePlayerPause
// Il2CppName: SinglePlayerPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool)>(&Fusion::NetworkRunner::SinglePlayerPause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SinglePlayerPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetInterestGroup
// Il2CppName: SetInterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::Fusion::PlayerRef, ::StringW, bool)>(&Fusion::NetworkRunner::SetInterestGroup)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* interested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetInterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, player, group, interested});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterfaceListsCount
// Il2CppName: GetInterfaceListsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRunner::*)(::System::Type*)>(&Fusion::NetworkRunner::GetInterfaceListsCount)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterfaceListsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterfaceListHead
// Il2CppName: GetInterfaceListHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationBehaviour* (Fusion::NetworkRunner::*)(::System::Type*, int)>(&Fusion::NetworkRunner::GetInterfaceListHead)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterfaceListHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, index});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterfaceListHead
// Il2CppName: GetInterfaceListHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationBehaviourListScope (Fusion::NetworkRunner::*)(::System::Type*, int, ByRef<::Fusion::SimulationBehaviour*>)>(&Fusion::NetworkRunner::GetInterfaceListHead)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* head = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterfaceListHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, index, head});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterfaceListPrev
// Il2CppName: GetInterfaceListPrev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationBehaviour* (Fusion::NetworkRunner::*)(::Fusion::SimulationBehaviour*)>(&Fusion::NetworkRunner::GetInterfaceListPrev)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterfaceListPrev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterfaceListNext
// Il2CppName: GetInterfaceListNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationBehaviour* (Fusion::NetworkRunner::*)(::Fusion::SimulationBehaviour*)>(&Fusion::NetworkRunner::GetInterfaceListNext)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterfaceListNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerActorId
// Il2CppName: GetPlayerActorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerActorId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerActorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerUserId
// Il2CppName: GetPlayerUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerUserId)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetPlayerObject
// Il2CppName: SetPlayerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::SetPlayerObject)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetPlayerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, networkObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerObject
// Il2CppName: GetPlayerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerObject)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetPlayerObject
// Il2CppName: TryGetPlayerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ByRef<::Fusion::NetworkObject*>)>(&Fusion::NetworkRunner::TryGetPlayerObject)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryGetPlayerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, networkObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetAllBehaviours
// Il2CppName: GetAllBehaviours
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetAllBehaviours
// Il2CppName: GetAllBehaviours
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerRtt
// Il2CppName: GetPlayerRtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerRtt)> {
  static const MethodInfo* get() {
    static auto* playerRef = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerRtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerRef});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SendRpc
// Il2CppName: SendRpc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationMessage*)>(&Fusion::NetworkRunner::SendRpc)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SendRpc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SendRpc
// Il2CppName: SendRpc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationMessage*, ByRef<::Fusion::RpcSendResult>)>(&Fusion::NetworkRunner::SendRpc)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "RpcSendResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SendRpc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, info});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::IsPlayerValid
// Il2CppName: IsPlayerValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::IsPlayerValid)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "IsPlayerValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::IsPlayerActive
// Il2CppName: IsPlayerActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::IsPlayerActive)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "IsPlayerActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerConnectionToken
// Il2CppName: GetPlayerConnectionToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerConnectionToken)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerConnectionToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPlayerConnectionType
// Il2CppName: GetPlayerConnectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::ConnectionType (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetPlayerConnectionType)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPlayerConnectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetAllBehaviours
// Il2CppName: GetAllBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Fusion::SimulationBehaviour*> (Fusion::NetworkRunner::*)(::System::Type*)>(&Fusion::NetworkRunner::GetAllBehaviours)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetAllBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddCallbacks
// Il2CppName: AddCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::ArrayW<::Fusion::INetworkRunnerCallbacks*>)>(&Fusion::NetworkRunner::AddCallbacks)> {
  static const MethodInfo* get() {
    static auto* callbacks = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "INetworkRunnerCallbacks"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AddCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbacks});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RemoveCallbacks
// Il2CppName: RemoveCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::ArrayW<::Fusion::INetworkRunnerCallbacks*>)>(&Fusion::NetworkRunner::RemoveCallbacks)> {
  static const MethodInfo* get() {
    static auto* callbacks = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Fusion", "INetworkRunnerCallbacks"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RemoveCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbacks});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RenderInternal
// Il2CppName: RenderInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::RenderInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RenderInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::UpdateInternal
// Il2CppName: UpdateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(double)>(&Fusion::NetworkRunner::UpdateInternal)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "UpdateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ExpirePredictedSpawns
// Il2CppName: ExpirePredictedSpawns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::ExpirePredictedSpawns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ExpirePredictedSpawns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RegisterNetworkCallbacks
// Il2CppName: RegisterNetworkCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::RegisterNetworkCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RegisterNetworkCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SendReliableDataToPlayer
// Il2CppName: SendReliableDataToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ::ArrayW<uint8_t>)>(&Fusion::NetworkRunner::SendReliableDataToPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SendReliableDataToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, data});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SendReliableDataToServer
// Il2CppName: SendReliableDataToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::ArrayW<uint8_t>)>(&Fusion::NetworkRunner::SendReliableDataToServer)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SendReliableDataToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetPlayerAlwaysInterested
// Il2CppName: SetPlayerAlwaysInterested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ::Fusion::NetworkObject*, bool)>(&Fusion::NetworkRunner::SetPlayerAlwaysInterested)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* alwaysInterested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetPlayerAlwaysInterested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, networkObject, alwaysInterested});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddPlayerAreaOfInterest
// Il2CppName: AddPlayerAreaOfInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ::UnityEngine::Vector3, float, int)>(&Fusion::NetworkRunner::AddPlayerAreaOfInterest)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* extent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layersMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AddPlayerAreaOfInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, position, extent, layersMask});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInputForPlayer
// Il2CppName: GetInputForPlayer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetRawInputForPlayer
// Il2CppName: GetRawInputForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::Fusion::NetworkInput> (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetRawInputForPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetRawInputForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetInputForPlayer
// Il2CppName: TryGetInputForPlayer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::FindObject
// Il2CppName: FindObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::FindObject)> {
  static const MethodInfo* get() {
    static auto* oref = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "FindObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oref});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryFindObject
// Il2CppName: TryFindObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkId, ByRef<::Fusion::NetworkObject*>)>(&Fusion::NetworkRunner::TryFindObject)> {
  static const MethodInfo* get() {
    static auto* oref = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryFindObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oref, obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryFindBehaviour
// Il2CppName: TryFindBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkBehaviourId, ByRef<::Fusion::NetworkBehaviour*>)>(&Fusion::NetworkRunner::TryFindBehaviour)> {
  static const MethodInfo* get() {
    static auto* bref = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviourId")->byval_arg;
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryFindBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bref, behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryFindBehaviour
// Il2CppName: TryFindBehaviour
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInterpolationData
// Il2CppName: GetInterpolationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkBehaviour*, bool, ByRef<::Fusion::InterpolationData>)>(&Fusion::NetworkRunner::GetInterpolationData)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    static auto* predicted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInterpolationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, predicted, data});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetNetworkedBehaviourFromNetworkedObjectRef
// Il2CppName: TryGetNetworkedBehaviourFromNetworkedObjectRef
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetObjectRefFromNetworkedBehaviour
// Il2CppName: TryGetObjectRefFromNetworkedBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::NetworkRunner::*)(::Fusion::NetworkBehaviour*)>(&Fusion::NetworkRunner::TryGetObjectRefFromNetworkedBehaviour)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryGetObjectRefFromNetworkedBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetNetworkedBehaviourId
// Il2CppName: TryGetNetworkedBehaviourId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkBehaviourId (Fusion::NetworkRunner::*)(::Fusion::NetworkBehaviour*)>(&Fusion::NetworkRunner::TryGetNetworkedBehaviourId)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryGetNetworkedBehaviourId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetSimulationState
// Il2CppName: SetSimulationState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, bool)>(&Fusion::NetworkRunner::SetSimulationState)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* simulate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetSimulationState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, simulate});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::Exists)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::Exists)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ExistsIn
// Il2CppName: ExistsIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::Fusion::SimulationSnapshot*)>(&Fusion::NetworkRunner::ExistsIn)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ExistsIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, snapshot});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::UnityEngine::GameObject*, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>, bool)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    static auto* syncPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>, bool)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    static auto* syncPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkPrefabRef, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefabRef = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabRef")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabRef, position, rotation, inputAuthority, onBeforeSpawned, predictionKey});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkPrefabAsset*, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefabAsset = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabAsset")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabAsset, position, rotation, inputAuthority, onBeforeSpawned, predictionKey});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectGuid, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>, bool)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefabGuid = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectGuid")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    static auto* syncPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabGuid, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Spawn
// Il2CppName: Spawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkPrefabId, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::OnBeforeSpawned*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>, bool, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::Spawn)> {
  static const MethodInfo* get() {
    static auto* prefabId = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    static auto* syncPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resumeNO = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Spawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabId, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics, resumeNO});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, bool)>(&Fusion::NetworkRunner::Despawn)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* allowPredicted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject, allowPredicted});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetGlobal
// Il2CppName: GetGlobal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddOrGetGlobal
// Il2CppName: AddOrGetGlobal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddGlobal
// Il2CppName: AddGlobal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::RemoveGlobal
// Il2CppName: RemoveGlobal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddSimulationBehaviour
// Il2CppName: AddSimulationBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationBehaviour*, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::AddSimulationBehaviour)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AddSimulationBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour, obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RemoveSimulationBehavior
// Il2CppName: RemoveSimulationBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationBehaviour*)>(&Fusion::NetworkRunner::RemoveSimulationBehavior)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RemoveSimulationBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::Fusion::NetworkObjectDestroyFlags)>(&Fusion::NetworkRunner::Destroy)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectDestroyFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject, flags});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::DestroyOrphaned
// Il2CppName: DestroyOrphaned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, bool)>(&Fusion::NetworkRunner::DestroyOrphaned)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* destroyedByEngine = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "DestroyOrphaned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject, destroyedByEngine});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::DestroyOrphanedUnattached
// Il2CppName: DestroyOrphanedUnattached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::DestroyOrphanedUnattached)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "DestroyOrphanedUnattached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::PerformPrefabCleanup
// Il2CppName: PerformPrefabCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, bool, bool)>(&Fusion::NetworkRunner::PerformPrefabCleanup)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* destroyedByEngine = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "PerformPrefabCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject, destroyedByEngine, hasState});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::PerformSceneObjectCleanup
// Il2CppName: PerformSceneObjectCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::PerformSceneObjectCleanup)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "PerformSceneObjectCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Attach
// Il2CppName: Attach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::System::Nullable_1<::Fusion::PlayerRef>)>(&Fusion::NetworkRunner::Attach)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Attach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject, inputAuthority});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AttachActivatedByUser
// Il2CppName: AttachActivatedByUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::AttachActivatedByUser)> {
  static const MethodInfo* get() {
    static auto* networkObject = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AttachActivatedByUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RegisterUniqueObjects
// Il2CppName: RegisterUniqueObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>*)>(&Fusion::NetworkRunner::RegisterUniqueObjects)> {
  static const MethodInfo* get() {
    static auto* objects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RegisterUniqueObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objects});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RegisterSceneObjects
// Il2CppName: RegisterSceneObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>*)>(&Fusion::NetworkRunner::RegisterSceneObjects)> {
  static const MethodInfo* get() {
    static auto* objects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RegisterSceneObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objects});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeOnBeforePhysicsStep
// Il2CppName: InvokeOnBeforePhysicsStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeOnBeforePhysicsStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeOnBeforePhysicsStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeOnAfterPhysicsStep
// Il2CppName: InvokeOnAfterPhysicsStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeOnAfterPhysicsStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeOnAfterPhysicsStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeOnAfterPhysicsSyncTransforms2D
// Il2CppName: InvokeOnAfterPhysicsSyncTransforms2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeOnAfterPhysicsSyncTransforms2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeOnAfterPhysicsSyncTransforms2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeOnAfterPhysicsSyncTransforms3D
// Il2CppName: InvokeOnAfterPhysicsSyncTransforms3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeOnAfterPhysicsSyncTransforms3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeOnAfterPhysicsSyncTransforms3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeOnBeforeHitboxRegistration
// Il2CppName: InvokeOnBeforeHitboxRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeOnBeforeHitboxRegistration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeOnBeforeHitboxRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ExistsIn
// Il2CppName: ExistsIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::SimulationSnapshot*, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::ExistsIn)> {
  static const MethodInfo* get() {
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ExistsIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapshot, obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeMethodOnPredictedSpawnedObject
// Il2CppName: InvokeMethodOnPredictedSpawnedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::System::Action_2<::Fusion::NetworkObject*, ::Fusion::IPredictedSpawnBehaviour*>*)>(&Fusion::NetworkRunner::InvokeMethodOnPredictedSpawnedObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject"), ::il2cpp_utils::GetClassFromName("Fusion", "IPredictedSpawnBehaviour")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeMethodOnPredictedSpawnedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, callback});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeMethodOnPredictedDespawnedObject
// Il2CppName: InvokeMethodOnPredictedDespawnedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::System::Action_2<::Fusion::NetworkObject*, ::Fusion::IPredictedDespawnBehaviour*>*)>(&Fusion::NetworkRunner::InvokeMethodOnPredictedDespawnedObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject"), ::il2cpp_utils::GetClassFromName("Fusion", "IPredictedDespawnBehaviour")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeMethodOnPredictedDespawnedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, callback});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SpawnInternal
// Il2CppName: SpawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkPrefabId, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::Fusion::PlayerRef>, ::Il2CppObject*, ::System::Nullable_1<::Fusion::NetworkObjectPredictionKey>, bool, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::SpawnInternal)> {
  static const MethodInfo* get() {
    static auto* prefabId = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* predictionKey = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectPredictionKey")})->byval_arg;
    static auto* syncPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resumeNO = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SpawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabId, position, rotation, inputAuthority, onBeforeSpawned, predictionKey, syncPhysics, resumeNO});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetNextId
// Il2CppName: GetNextId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetNextId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetNextId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkPrefabId, ::Fusion::NetworkObjectHeader*)>(&Fusion::NetworkRunner::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* prefab = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefab, header});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryResolvePrefabInstance
// Il2CppName: TryResolvePrefabInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeader*, ByRef<::Fusion::NetworkObject*>)>(&Fusion::NetworkRunner::TryResolvePrefabInstance)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryResolvePrefabInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, result});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InitializeNetworkObjectAssignRunner
// Il2CppName: InitializeNetworkObjectAssignRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::InitializeNetworkObjectAssignRunner)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InitializeNetworkObjectAssignRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InitializeNetworkObjectInstance
// Il2CppName: InitializeNetworkObjectInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeader*, ::Fusion::NetworkObject*, ::System::Nullable_1<::Fusion::PlayerRef>, ::Fusion::NetworkRunner::AttachOptions, int*)>(&Fusion::NetworkRunner::InitializeNetworkObjectInstance)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* inputAuthority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")})->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/AttachOptions")->byval_arg;
    static auto* interestGroups = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InitializeNetworkObjectInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, instance, inputAuthority, options, interestGroups});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InitializeNetworkObjectState
// Il2CppName: InitializeNetworkObjectState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::Fusion::NetworkRunner::AttachOptions)>(&Fusion::NetworkRunner::InitializeNetworkObjectState)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/AttachOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InitializeNetworkObjectState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, options});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeBeforeSpawnedCallbacks
// Il2CppName: InvokeBeforeSpawnedCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, ::Fusion::NetworkRunner::AttachOptions, ::Fusion::NetworkRunner::OnBeforeSpawned*)>(&Fusion::NetworkRunner::InvokeBeforeSpawnedCallbacks)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/AttachOptions")->byval_arg;
    static auto* onBeforeSpawned = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/OnBeforeSpawned")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeBeforeSpawnedCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, options, onBeforeSpawned});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeSpawnedCallback
// Il2CppName: InvokeSpawnedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::InvokeSpawnedCallback)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeSpawnedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeDespawnedCallback
// Il2CppName: InvokeDespawnedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*, bool)>(&Fusion::NetworkRunner::InvokeDespawnedCallback)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* hasState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeDespawnedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, hasState});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeAfterSpawnedCallback
// Il2CppName: InvokeAfterSpawnedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::InvokeAfterSpawnedCallback)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeAfterSpawnedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeBeforeUpdate
// Il2CppName: InvokeBeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeBeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeBeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeAfterUpdate
// Il2CppName: InvokeAfterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeAfterUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeAfterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InitFusionLogSystem
// Il2CppName: InitFusionLogSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InitFusionLogSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InitFusionLogSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetupNetworkProjectConfig
// Il2CppName: SetupNetworkProjectConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkProjectConfig* (*)(::Fusion::NetworkRunnerInitializeArgs)>(&Fusion::NetworkRunner::SetupNetworkProjectConfig)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerInitializeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetupNetworkProjectConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetRpcTargetStatus
// Il2CppName: GetRpcTargetStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::RpcTargetStatus (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::GetRpcTargetStatus)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetRpcTargetStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::HasAnyActiveConnections
// Il2CppName: HasAnyActiveConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::HasAnyActiveConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "HasAnyActiveConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::IsHostPlayer
// Il2CppName: IsHostPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::IsHostPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "IsHostPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetHostPlayer
// Il2CppName: TryGetHostPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(ByRef<::Fusion::PlayerRef>)>(&Fusion::NetworkRunner::TryGetHostPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryGetHostPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AttachOptionsToNetworkObjectFlags
// Il2CppName: AttachOptionsToNetworkObjectFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectFlags (*)(::Fusion::NetworkRunner::AttachOptions)>(&Fusion::NetworkRunner::AttachOptionsToNetworkObjectFlags)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner/AttachOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AttachOptionsToNetworkObjectFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::NetworkObjectFlagsToAttachOptions
// Il2CppName: NetworkObjectFlagsToAttachOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner::AttachOptions (*)(::Fusion::NetworkObjectFlags)>(&Fusion::NetworkRunner::NetworkObjectFlagsToAttachOptions)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "NetworkObjectFlagsToAttachOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::IsAwakeAtInitialization
// Il2CppName: IsAwakeAtInitialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::IsAwakeAtInitialization)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "IsAwakeAtInitialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetHashCodeForLogger
// Il2CppName: GetHashCodeForLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetHashCodeForLogger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetHashCodeForLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::BuildReport
// Il2CppName: BuildReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::BuildReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "BuildReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryGetPrettyRunnerName
// Il2CppName: TryGetPrettyRunnerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Text::StringBuilder*, ::Fusion::NetworkRunner*, ByRef<::Fusion::LogOptions>)>(&Fusion::NetworkRunner::TryGetPrettyRunnerName)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryGetPrettyRunnerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, runner, options});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_ILogBuilder_BuildLogMessage
// Il2CppName: Fusion.ILogBuilder.BuildLogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::System::Text::StringBuilder*, ::StringW, ByRef<::Fusion::LogOptions>)>(&Fusion::NetworkRunner::Fusion_ILogBuilder_BuildLogMessage)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Fusion", "LogOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.ILogBuilder.BuildLogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder, message, options});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ResetAllSimulationStatics
// Il2CppName: ResetAllSimulationStatics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkRunner::ResetAllSimulationStatics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ResetAllSimulationStatics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsHostMigrationEnabled
// Il2CppName: get_IsHostMigrationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsHostMigrationEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsHostMigrationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_IsHostMigrationEnabled
// Il2CppName: set_IsHostMigrationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool)>(&Fusion::NetworkRunner::set_IsHostMigrationEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_IsHostMigrationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsResume
// Il2CppName: get_IsResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsResume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_HostMigrationSnapshotDelay
// Il2CppName: get_HostMigrationSnapshotDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_HostMigrationSnapshotDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_HostMigrationSnapshotDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_HostMigrationSnapshotDelay
// Il2CppName: set_HostMigrationSnapshotDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(uint)>(&Fusion::NetworkRunner::set_HostMigrationSnapshotDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_HostMigrationSnapshotDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::PushHostMigrationSnapshot
// Il2CppName: PushHostMigrationSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::PushHostMigrationSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "PushHostMigrationSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetResumeSnapshotNetworkObjects
// Il2CppName: GetResumeSnapshotNetworkObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Fusion::NetworkObject*>* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetResumeSnapshotNetworkObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetResumeSnapshotNetworkObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetResumeSnapshotNetworkSceneObjects
// Il2CppName: GetResumeSnapshotNetworkSceneObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Fusion::NetworkObject*, ::Fusion::NetworkObjectHeaderPtr>>* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetResumeSnapshotNetworkSceneObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetResumeSnapshotNetworkSceneObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RunHostMigrationResume
// Il2CppName: RunHostMigrationResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Fusion::NetworkRunner::*)(::Fusion::NetworkRunnerInitializeArgs)>(&Fusion::NetworkRunner::RunHostMigrationResume)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerInitializeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RunHostMigrationResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::CleanHostMigrationSnapshots
// Il2CppName: CleanHostMigrationSnapshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::CleanHostMigrationSnapshots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "CleanHostMigrationSnapshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetResumeNetworkId
// Il2CppName: GetResumeNetworkId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetResumeNetworkId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetResumeNetworkId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetNetworkObjectFromResumeSnapshot
// Il2CppName: GetNetworkObjectFromResumeSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeaderPtr, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::NetworkObjectHeaderPtr>*, ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::System::Collections::Generic::List_1<::Fusion::NetworkId>*>*)>(&Fusion::NetworkRunner::GetNetworkObjectFromResumeSnapshot)> {
  static const MethodInfo* get() {
    static auto* networkObjectPtr = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeaderPtr")->byval_arg;
    static auto* headerList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkId"), ::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeaderPtr")})->byval_arg;
    static auto* nestedMapping = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkId"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetNetworkObjectFromResumeSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObjectPtr, headerList, nestedMapping});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetSceneNetworkObjectFromResumeSnapshot
// Il2CppName: GetSceneNetworkObjectFromResumeSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeaderPtr)>(&Fusion::NetworkRunner::GetSceneNetworkObjectFromResumeSnapshot)> {
  static const MethodInfo* get() {
    static auto* networkObjectPtr = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeaderPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetSceneNetworkObjectFromResumeSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkObjectPtr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InitialzeTempNetworkObjectInstance
// Il2CppName: InitialzeTempNetworkObjectInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeader*, ::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::InitialzeTempNetworkObjectInstance)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InitialzeTempNetworkObjectInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, instance});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetupHostMigration
// Il2CppName: SetupHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::Protocol::HostMigration*)>(&Fusion::NetworkRunner::SetupHostMigration)> {
  static const MethodInfo* get() {
    static auto* hostMigration = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "HostMigration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetupHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostMigration});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::StartHostMigration
// Il2CppName: StartHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::Protocol::Snapshot*)>(&Fusion::NetworkRunner::StartHostMigration)> {
  static const MethodInfo* get() {
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "Snapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "StartHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapshot});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Service_HostSnapshot
// Il2CppName: Service_HostSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Service_HostSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Service_HostSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetServerSnapshot
// Il2CppName: GetServerSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::ValueTuple_5<bool, int, int, uint, ::ArrayW<uint8_t>>>* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetServerSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetServerSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetHostSnapshotBufferSize
// Il2CppName: GetHostSnapshotBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetHostSnapshotBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetHostSnapshotBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::BuildCompressHostSnapshotJob
// Il2CppName: BuildCompressHostSnapshotJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner::HostSnapshotCompressionJob (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::BuildCompressHostSnapshotJob)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "BuildCompressHostSnapshotJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeHostMigration
// Il2CppName: InvokeHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::HostMigrationToken*)>(&Fusion::NetworkRunner::InvokeHostMigration)> {
  static const MethodInfo* get() {
    static auto* migrationToken = &::il2cpp_utils::GetClassFromName("Fusion", "HostMigrationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{migrationToken});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddInactiveObjectGuard
// Il2CppName: AddInactiveObjectGuard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::AddInactiveObjectGuard)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AddInactiveObjectGuard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetInstancesEnumerator
// Il2CppName: GetInstancesEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::System::Collections::Generic::List_1<::Fusion::NetworkRunner*>::Enumerator (*)()>(&Fusion::NetworkRunner::GetInstancesEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetInstancesEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_Instances
// Il2CppName: get_Instances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Fusion::NetworkRunner*>* (*)()>(&Fusion::NetworkRunner::get_Instances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_Instances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::AddInstance
// Il2CppName: AddInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkRunner*)>(&Fusion::NetworkRunner::AddInstance)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "AddInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::RemoveInstance
// Il2CppName: RemoveInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkRunner*)>(&Fusion::NetworkRunner::RemoveInstance)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "RemoveInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&Fusion::NetworkRunner::InvokeUpdate)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeRender
// Il2CppName: InvokeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkRunner::InvokeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsCloudReady
// Il2CppName: get_IsCloudReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsCloudReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsCloudReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_UserId
// Il2CppName: get_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_UserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_AuthenticationValues
// Il2CppName: get_AuthenticationValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Photon::Realtime::AuthenticationValues* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_AuthenticationValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_AuthenticationValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_GameMode
// Il2CppName: get_GameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::GameMode (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_GameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_GameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_GameMode
// Il2CppName: set_GameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::GameMode)>(&Fusion::NetworkRunner::set_GameMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "GameMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_GameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_SessionInfo
// Il2CppName: get_SessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SessionInfo* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_SessionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_SessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_SessionInfo
// Il2CppName: set_SessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SessionInfo*)>(&Fusion::NetworkRunner::set_SessionInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_SessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_LobbyInfo
// Il2CppName: get_LobbyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::LobbyInfo* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_LobbyInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_LobbyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_LobbyInfo
// Il2CppName: set_LobbyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::LobbyInfo*)>(&Fusion::NetworkRunner::set_LobbyInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "LobbyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_LobbyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_CurrentConnectionType
// Il2CppName: get_CurrentConnectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::ConnectionType (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_CurrentConnectionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_CurrentConnectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_NATType
// Il2CppName: get_NATType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::Stun::NATType (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_NATType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_NATType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsSharedModeMasterClient
// Il2CppName: get_IsSharedModeMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsSharedModeMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsSharedModeMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::JoinSessionLobby
// Il2CppName: JoinSessionLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* (Fusion::NetworkRunner::*)(::Fusion::SessionLobby, ::StringW, ::Fusion::Photon::Realtime::AuthenticationValues*, ::Fusion::Photon::Realtime::AppSettings*, ::System::Nullable_1<bool>)>(&Fusion::NetworkRunner::JoinSessionLobby)> {
  static const MethodInfo* get() {
    static auto* sessionLobby = &::il2cpp_utils::GetClassFromName("Fusion", "SessionLobby")->byval_arg;
    static auto* lobbyID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* authentication = &::il2cpp_utils::GetClassFromName("Fusion.Photon.Realtime", "AuthenticationValues")->byval_arg;
    static auto* customAppSettings = &::il2cpp_utils::GetClassFromName("Fusion.Photon.Realtime", "AppSettings")->byval_arg;
    static auto* useDefaultCloudPorts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "JoinSessionLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionLobby, lobbyID, authentication, customAppSettings, useDefaultCloudPorts});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::StartGame
// Il2CppName: StartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* (Fusion::NetworkRunner::*)(::Fusion::StartGameArgs)>(&Fusion::NetworkRunner::StartGame)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "StartGameArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "StartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ConnectToCloud
// Il2CppName: ConnectToCloud
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Fusion::NetworkRunner::*)(::Fusion::Photon::Realtime::AuthenticationValues*, ::Fusion::Photon::Realtime::AppSettings*, ::Fusion::CloudCommunicator*, ::System::Nullable_1<bool>)>(&Fusion::NetworkRunner::ConnectToCloud)> {
  static const MethodInfo* get() {
    static auto* authentication = &::il2cpp_utils::GetClassFromName("Fusion.Photon.Realtime", "AuthenticationValues")->byval_arg;
    static auto* customAppSettings = &::il2cpp_utils::GetClassFromName("Fusion.Photon.Realtime", "AppSettings")->byval_arg;
    static auto* externalCommunicator = &::il2cpp_utils::GetClassFromName("Fusion", "CloudCommunicator")->byval_arg;
    static auto* useDefaultCloudPorts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ConnectToCloud", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{authentication, customAppSettings, externalCommunicator, useDefaultCloudPorts});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::DisconnectFromCloud
// Il2CppName: DisconnectFromCloud
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::DisconnectFromCloud)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "DisconnectFromCloud", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::StartGameModeSinglePlayer
// Il2CppName: StartGameModeSinglePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* (Fusion::NetworkRunner::*)(::Fusion::StartGameArgs)>(&Fusion::NetworkRunner::StartGameModeSinglePlayer)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "StartGameArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "StartGameModeSinglePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::StartGameModeCloud
// Il2CppName: StartGameModeCloud
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* (Fusion::NetworkRunner::*)(::Fusion::StartGameArgs)>(&Fusion::NetworkRunner::StartGameModeCloud)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Fusion", "StartGameArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "StartGameModeCloud", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ShutdownAndBuildResult
// Il2CppName: ShutdownAndBuildResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Fusion::StartGameResult*>* (Fusion::NetworkRunner::*)(::System::Exception*)>(&Fusion::NetworkRunner::ShutdownAndBuildResult)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ShutdownAndBuildResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeSessionListUpdated
// Il2CppName: InvokeSessionListUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*)>(&Fusion::NetworkRunner::InvokeSessionListUpdated)> {
  static const MethodInfo* get() {
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeSessionListUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionList});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeCustomAuthenticationResponse
// Il2CppName: InvokeCustomAuthenticationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*)>(&Fusion::NetworkRunner::InvokeCustomAuthenticationResponse)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeCustomAuthenticationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_CurrentScene
// Il2CppName: get_CurrentScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SceneRef (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_CurrentScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_CurrentScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsSceneMaster
// Il2CppName: get_IsSceneMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsSceneMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsSceneMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_SimulationUnityScene
// Il2CppName: get_SimulationUnityScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SceneManagement::Scene (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_SimulationUnityScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_SimulationUnityScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_MultiplePeerUnityScene
// Il2CppName: get_MultiplePeerUnityScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SceneManagement::Scene (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_MultiplePeerUnityScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_MultiplePeerUnityScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::set_MultiplePeerUnityScene
// Il2CppName: set_MultiplePeerUnityScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::UnityEngine::SceneManagement::Scene)>(&Fusion::NetworkRunner::set_MultiplePeerUnityScene)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "set_MultiplePeerUnityScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::get_IsMultiplePeerSceneTemp
// Il2CppName: get_IsMultiplePeerSceneTemp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::get_IsMultiplePeerSceneTemp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "get_IsMultiplePeerSceneTemp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::SetActiveScene
// Il2CppName: SetActiveScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SceneRef)>(&Fusion::NetworkRunner::SetActiveScene)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("Fusion", "SceneRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "SetActiveScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeSceneLoadStart
// Il2CppName: InvokeSceneLoadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeSceneLoadStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeSceneLoadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InvokeSceneLoadDone
// Il2CppName: InvokeSceneLoadDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::InvokeSceneLoadDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InvokeSceneLoadDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetRunnerForGameObject
// Il2CppName: GetRunnerForGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner* (*)(::UnityEngine::GameObject*)>(&Fusion::NetworkRunner::GetRunnerForGameObject)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetRunnerForGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetRunnerForScene
// Il2CppName: GetRunnerForScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner* (*)(::UnityEngine::SceneManagement::Scene)>(&Fusion::NetworkRunner::GetRunnerForScene)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetRunnerForScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::TryMultiplePeerAssignTempScene
// Il2CppName: TryMultiplePeerAssignTempScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::TryMultiplePeerAssignTempScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "TryMultiplePeerAssignTempScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPhysicsScene
// Il2CppName: GetPhysicsScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PhysicsScene (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetPhysicsScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPhysicsScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetPhysicsScene2D
// Il2CppName: GetPhysicsScene2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PhysicsScene2D (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::GetPhysicsScene2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetPhysicsScene2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InstantiateInRunnerScene
// Il2CppName: InstantiateInRunnerScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Fusion::NetworkRunner::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Fusion::NetworkRunner::InstantiateInRunnerScene)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InstantiateInRunnerScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, position, rotation});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InstantiateInRunnerScene
// Il2CppName: InstantiateInRunnerScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Fusion::NetworkRunner::*)(::UnityEngine::GameObject*)>(&Fusion::NetworkRunner::InstantiateInRunnerScene)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "InstantiateInRunnerScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::InstantiateInRunnerScene
// Il2CppName: InstantiateInRunnerScene
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::InstantiateInRunnerScene
// Il2CppName: InstantiateInRunnerScene
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::MoveToRunnerScene
// Il2CppName: MoveToRunnerScene
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkRunner::MoveToRunnerScene
// Il2CppName: MoveToRunnerScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::UnityEngine::GameObject*)>(&Fusion::NetworkRunner::MoveToRunnerScene)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "MoveToRunnerScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::EnsureRunnerSceneIsActive
// Il2CppName: EnsureRunnerSceneIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(ByRef<::UnityEngine::SceneManagement::Scene>)>(&Fusion::NetworkRunner::EnsureRunnerSceneIsActive)> {
  static const MethodInfo* get() {
    static auto* previousActiveScene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "EnsureRunnerSceneIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousActiveScene});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::GetRunnerForScene
// Il2CppName: GetRunnerForScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunner* (*)(int)>(&Fusion::NetworkRunner::GetRunnerForScene)> {
  static const MethodInfo* get() {
    static auto* sceneHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "GetRunnerForScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneHandle});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_get_CanReceivePlayerJoinLeaveCallbacks
// Il2CppName: Fusion.Simulation.ICallbacks.get_CanReceivePlayerJoinLeaveCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_get_CanReceivePlayerJoinLeaveCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.get_CanReceivePlayerJoinLeaveCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_get_IsSharedModeMasterClient
// Il2CppName: Fusion.Simulation.ICallbacks.get_IsSharedModeMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_get_IsSharedModeMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.get_IsSharedModeMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_GetDefaultInterestGroups
// Il2CppName: Fusion.Simulation.ICallbacks.GetDefaultInterestGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_GetDefaultInterestGroups)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.GetDefaultInterestGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_ObjectReceivedUpdate
// Il2CppName: Fusion.Simulation.ICallbacks.ObjectReceivedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkId, int)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_ObjectReceivedUpdate)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.ObjectReceivedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_ObjectStateAuthorityChanged
// Il2CppName: Fusion.Simulation.ICallbacks.ObjectStateAuthorityChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_ObjectStateAuthorityChanged)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.ObjectStateAuthorityChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ObjectLeaveSimulation
// Il2CppName: ObjectLeaveSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::ObjectLeaveSimulation)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ObjectLeaveSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ObjectJoinSimulation
// Il2CppName: ObjectJoinSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkId)>(&Fusion::NetworkRunner::ObjectJoinSimulation)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ObjectJoinSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterSimulation
// Il2CppName: Fusion.Simulation.ICallbacks.OnAfterSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnAfterSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeSimulation
// Il2CppName: Fusion.Simulation.ICallbacks.OnBeforeSimulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeSimulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnBeforeSimulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_TryBeginUpdateRemotePrefabs
// Il2CppName: Fusion.Simulation.ICallbacks.TryBeginUpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_TryBeginUpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.TryBeginUpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_EndUpdateRemotePrefabs
// Il2CppName: Fusion.Simulation.ICallbacks.EndUpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_EndUpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.EndUpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_CreateRemotePrefab
// Il2CppName: Fusion.Simulation.ICallbacks.CreateRemotePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkObjectHeader*)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_CreateRemotePrefab)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.CreateRemotePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_DestroyRemotePrefab
// Il2CppName: Fusion.Simulation.ICallbacks.DestroyRemotePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::NetworkId, bool)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_DestroyRemotePrefab)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* exists = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.DestroyRemotePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, exists});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::ProcessSpawnQueue
// Il2CppName: ProcessSpawnQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::ProcessSpawnQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "ProcessSpawnQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeCopyPreviousState
// Il2CppName: Fusion.Simulation.ICallbacks.OnBeforeCopyPreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeCopyPreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnBeforeCopyPreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnTick
// Il2CppName: Fusion.Simulation.ICallbacks.OnTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnServerStart
// Il2CppName: Fusion.Simulation.ICallbacks.OnServerStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnServerStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnServerStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInputMissing
// Il2CppName: Fusion.Simulation.ICallbacks.OnInputMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationInput*)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInputMissing)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnInputMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInput
// Il2CppName: Fusion.Simulation.ICallbacks.OnInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationInput*)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInput)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::OnMessageUser
// Il2CppName: OnMessageUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationMessage*)>(&Fusion::NetworkRunner::OnMessageUser)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "OnMessageUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnMessage
// Il2CppName: Fusion.Simulation.ICallbacks.OnMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::SimulationMessage*)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessage"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeClientSidePredictionReset
// Il2CppName: Fusion.Simulation.ICallbacks.OnBeforeClientSidePredictionReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeClientSidePredictionReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnBeforeClientSidePredictionReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterClientSidePredictionReset
// Il2CppName: Fusion.Simulation.ICallbacks.OnAfterClientSidePredictionReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterClientSidePredictionReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnAfterClientSidePredictionReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterTick
// Il2CppName: Fusion.Simulation.ICallbacks.OnAfterTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnAfterTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeTick
// Il2CppName: Fusion.Simulation.ICallbacks.OnBeforeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnBeforeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeAllTicks
// Il2CppName: Fusion.Simulation.ICallbacks.OnBeforeAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool, int)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnBeforeAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnBeforeAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectedToServer
// Il2CppName: Fusion.Simulation.ICallbacks.OnConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectedToServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnDisconnectedFromServer
// Il2CppName: Fusion.Simulation.ICallbacks.OnDisconnectedFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnDisconnectedFromServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnDisconnectedFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterAllTicks
// Il2CppName: Fusion.Simulation.ICallbacks.OnAfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(bool, int)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnAfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnAfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectionFailed
// Il2CppName: Fusion.Simulation.ICallbacks.OnConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddress, reason});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnReliableData
// Il2CppName: Fusion.Simulation.ICallbacks.OnReliableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef, ::ArrayW<uint8_t>)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnReliableData)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* dataArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnReliableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, dataArray});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_PlayerJoined
// Il2CppName: Fusion.Simulation.ICallbacks.PlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_PlayerJoined)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.PlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_PlayerLeft
// Il2CppName: Fusion.Simulation.ICallbacks.PlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::PlayerRef)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_PlayerLeft)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.PlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectionRequest
// Il2CppName: Fusion.Simulation.ICallbacks.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)(::Fusion::Sockets::NetAddress, ::ArrayW<uint8_t>)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteAddress, token});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInternalConnectionAttempt
// Il2CppName: Fusion.Simulation.ICallbacks.OnInternalConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(int, int, ByRef<bool>, ByRef<::Fusion::Sockets::NetAddress>)>(&Fusion::NetworkRunner::Fusion_Simulation_ICallbacks_OnInternalConnectionAttempt)> {
  static const MethodInfo* get() {
    static auto* attempt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* totalConnectionAttempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shouldChange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* newAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "Fusion.Simulation.ICallbacks.OnInternalConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attempt, totalConnectionAttempts, shouldChange, newAddress});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::NetworkRunner::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::$PerformPrefabCleanup$g__FreeObject_194_0
// Il2CppName: <PerformPrefabCleanup>g__FreeObject|194_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::$PerformPrefabCleanup$g__FreeObject_194_0)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "<PerformPrefabCleanup>g__FreeObject|194_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::$RegisterSceneObjects$g__ThrowIfInvalidSceneObject_199_0
// Il2CppName: <RegisterSceneObjects>g__ThrowIfInvalidSceneObject|199_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::$RegisterSceneObjects$g__ThrowIfInvalidSceneObject_199_0)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "<RegisterSceneObjects>g__ThrowIfInvalidSceneObject|199_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::$SpawnInternal$g__CheckIdOrGetNewId_208_0
// Il2CppName: <SpawnInternal>g__CheckIdOrGetNewId|208_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkId (Fusion::NetworkRunner::*)(::Fusion::NetworkObject*)>(&Fusion::NetworkRunner::$SpawnInternal$g__CheckIdOrGetNewId_208_0)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "<SpawnInternal>g__CheckIdOrGetNewId|208_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::$RunHostMigrationResume$b__259_0
// Il2CppName: <RunHostMigrationResume>b__259_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkRunner::*)()>(&Fusion::NetworkRunner::$RunHostMigrationResume$b__259_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkRunner*), "<RunHostMigrationResume>b__259_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkRunner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
