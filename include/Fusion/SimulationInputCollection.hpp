// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInput
  class SimulationInput;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationInputCollection
  class SimulationInputCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::SimulationInputCollection);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationInputCollection*, "Fusion", "SimulationInputCollection");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.SimulationInputCollection
  // [TokenAttribute] Offset: FFFFFFFF
  class SimulationInputCollection : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x10
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: count and: byIndex
    char __padding0[0x4] = {};
    // private Fusion.SimulationInput[] _byIndex
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Fusion::SimulationInput*> byIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationInput*>) == 0x8);
    // private Fusion.SimulationInput[] _byPlayer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Fusion::SimulationInput*> byPlayer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::SimulationInput*>) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: private Fusion.SimulationInput[] _byIndex
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationInput*>& dyn__byIndex();
    // Get instance field reference: private Fusion.SimulationInput[] _byPlayer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::SimulationInput*>& dyn__byPlayer();
    // public System.Int32 get_Count()
    // Offset: 0x2B8412C
    int get_Count();
    // public System.Void .ctor(System.Int32 playerCount)
    // Offset: 0x2B84134
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimulationInputCollection* New_ctor(int playerCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::SimulationInputCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimulationInputCollection*, creationType>(playerCount)));
    }
    // public Fusion.SimulationInput GetByIndex(System.Int32 index)
    // Offset: 0x2B841C0
    ::Fusion::SimulationInput* GetByIndex(int index);
    // public Fusion.SimulationInput GetByPlayer(System.Int32 player)
    // Offset: 0x2B84208
    ::Fusion::SimulationInput* GetByPlayer(int player);
    // public System.Void Clear()
    // Offset: 0x2B84248
    void Clear();
    // public System.Void AddInput(Fusion.SimulationInput input)
    // Offset: 0x2B8428C
    void AddInput(::Fusion::SimulationInput* input);
  }; // Fusion.SimulationInputCollection
  #pragma pack(pop)
  static check_size<sizeof(SimulationInputCollection), 32 + sizeof(::ArrayW<::Fusion::SimulationInput*>)> __Fusion_SimulationInputCollectionSizeCheck;
  static_assert(sizeof(SimulationInputCollection) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::SimulationInputCollection::*)()>(&Fusion::SimulationInputCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::GetByIndex
// Il2CppName: GetByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::SimulationInputCollection::*)(int)>(&Fusion::SimulationInputCollection::GetByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputCollection*), "GetByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::GetByPlayer
// Il2CppName: GetByPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::SimulationInput* (Fusion::SimulationInputCollection::*)(int)>(&Fusion::SimulationInputCollection::GetByPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputCollection*), "GetByPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputCollection::*)()>(&Fusion::SimulationInputCollection::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputCollection*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::SimulationInputCollection::AddInput
// Il2CppName: AddInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationInputCollection::*)(::Fusion::SimulationInput*)>(&Fusion::SimulationInputCollection::AddInput)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationInputCollection*), "AddInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
