// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkPositionRotation
#include "Fusion/NetworkPositionRotation.hpp"
// Including type: Fusion.IAfterTick
#include "Fusion/IAfterTick.hpp"
// Including type: Fusion.IPredictedSpawnBehaviour
#include "Fusion/IPredictedSpawnBehaviour.hpp"
// Including type: Fusion.Spaces
#include "Fusion/Spaces.hpp"
// Including type: Fusion.NetworkPosition/EncodedPosition
#include "Fusion/NetworkPosition_EncodedPosition.hpp"
// Including type: Fusion.NetworkPositionRotation/EncodedRotation
#include "Fusion/NetworkPositionRotation_EncodedRotation.hpp"
// Including type: Fusion.Tick
#include "Fusion/Tick.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: InterpolatedErrorCorrectionSettings
  class InterpolatedErrorCorrectionSettings;
  // Forward declaring type: InterpolationData
  struct InterpolationData;
  // Forward declaring type: ReadAccuracy
  struct ReadAccuracy;
  // Forward declaring type: WriteAccuracy
  struct WriteAccuracy;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Nullable`1 because it is already included!
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkTransform
  class NetworkTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkTransform);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkTransform*, "Fusion", "NetworkTransform");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x144
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkTransform
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [OrderAfterAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  class NetworkTransform : public ::Fusion::NetworkPositionRotation/*, public ::Fusion::IAfterTick, public ::Fusion::IPredictedSpawnBehaviour*/ {
    public:
    // Writing base type padding for base size: 0x91 to desired offset: 0x98
    char ___base_padding[0x7] = {};
    // Nested type: ::Fusion::NetworkTransform::ConsecutiveStateInterp
    class ConsecutiveStateInterp;
    // Nested type: ::Fusion::NetworkTransform::InterpolatedTransformParameters
    struct InterpolatedTransformParameters;
    // Nested type: ::Fusion::NetworkTransform::IInterpolationImplementation
    class IInterpolationImplementation;
    // Nested type: ::Fusion::NetworkTransform::IntermittentStateInterp
    class IntermittentStateInterp;
    // Nested type: ::Fusion::NetworkTransform::LegacyIntermittentStateInterp
    class LegacyIntermittentStateInterp;
    // Nested type: ::Fusion::NetworkTransform::PositionRotationValues
    struct PositionRotationValues;
    // Nested type: ::Fusion::NetworkTransform::SmoothErrorCorrectionInterp
    class SmoothErrorCorrectionInterp;
    public:
    // private Fusion.NetworkTransform/ConsecutiveStateInterp _consecutiveInterp
    // Size: 0x8
    // Offset: 0x98
    ::Fusion::NetworkTransform::ConsecutiveStateInterp* consecutiveInterp;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::ConsecutiveStateInterp*) == 0x8);
    // private Fusion.NetworkTransform/IInterpolationImplementation _currInterpImpl
    // Size: 0x8
    // Offset: 0xA0
    ::Fusion::NetworkTransform::IInterpolationImplementation* currInterpImpl;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::IInterpolationImplementation*) == 0x8);
    // private System.Boolean _wasRenderedThisUpdate
    // Size: 0x1
    // Offset: 0xA8
    bool wasRenderedThisUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasRenderedThisUpdate and: InterpolationSpace
    char __padding2[0x3] = {};
    // public Fusion.Spaces InterpolationSpace
    // Size: 0x4
    // Offset: 0xAC
    ::Fusion::Spaces InterpolationSpace;
    // Field size check
    static_assert(sizeof(::Fusion::Spaces) == 0x4);
    // public UnityEngine.Transform InterpolationTarget
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Transform* InterpolationTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean InterpolateErrorCorrection
    // Size: 0x1
    // Offset: 0xB8
    bool InterpolateErrorCorrection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InterpolateErrorCorrection and: InterpolatedErrorCorrectionSettings
    char __padding5[0x7] = {};
    // public Fusion.InterpolatedErrorCorrectionSettings InterpolatedErrorCorrectionSettings
    // Size: 0x8
    // Offset: 0xC0
    ::Fusion::InterpolatedErrorCorrectionSettings* InterpolatedErrorCorrectionSettings;
    // Field size check
    static_assert(sizeof(::Fusion::InterpolatedErrorCorrectionSettings*) == 0x8);
    // public System.Boolean UseLegacySharedModeInterpolation
    // Size: 0x1
    // Offset: 0xC8
    bool UseLegacySharedModeInterpolation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseLegacySharedModeInterpolation and: TargetInterpolationDelay
    char __padding7[0x3] = {};
    // public System.Single TargetInterpolationDelay
    // Size: 0x4
    // Offset: 0xCC
    float TargetInterpolationDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Fusion.NetworkTransform/IntermittentStateInterp _intermittentInterp
    // Size: 0x8
    // Offset: 0xD0
    ::Fusion::NetworkTransform::IntermittentStateInterp* intermittentInterp;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::IntermittentStateInterp*) == 0x8);
    // private Fusion.NetworkTransform/LegacyIntermittentStateInterp _legacyIntermittentInterp
    // Size: 0x8
    // Offset: 0xD8
    ::Fusion::NetworkTransform::LegacyIntermittentStateInterp* legacyIntermittentInterp;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::LegacyIntermittentStateInterp*) == 0x8);
    // private Fusion.NetworkTransform/SmoothErrorCorrectionInterp _smoothErrorCorrectedInterp
    // Size: 0x8
    // Offset: 0xE0
    ::Fusion::NetworkTransform::SmoothErrorCorrectionInterp* smoothErrorCorrectedInterp;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkTransform::SmoothErrorCorrectionInterp*) == 0x8);
    // private Fusion.NetworkPosition/EncodedPosition _prevEncodedPos
    // Size: 0x4
    // Offset: 0xE8
    ::Fusion::NetworkPosition::EncodedPosition prevEncodedPos;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkPosition::EncodedPosition) == 0x4);
    // Padding between fields: prevEncodedPos and: prevEncodedRot
    char __padding12[0xC] = {};
    // private Fusion.NetworkPositionRotation/EncodedRotation _prevEncodedRot
    // Size: 0x8
    // Offset: 0xF8
    ::Fusion::NetworkPositionRotation::EncodedRotation prevEncodedRot;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkPositionRotation::EncodedRotation) == 0x8);
    // Padding between fields: prevEncodedRot and: predictedSpawnLatestToTick
    char __padding13[0x8] = {};
    // private Fusion.Tick _predictedSpawnLatestToTick
    // Size: 0x4
    // Offset: 0x108
    ::Fusion::Tick predictedSpawnLatestToTick;
    // Field size check
    static_assert(sizeof(::Fusion::Tick) == 0x4);
    // private UnityEngine.Vector3 _predictedSpawnPosFrom
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 predictedSpawnPosFrom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _predictedSpawnPosTo
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 predictedSpawnPosTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _predictedSpawnRotFrom
    // Size: 0x10
    // Offset: 0x124
    ::UnityEngine::Quaternion predictedSpawnRotFrom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _predictedSpawnRotTo
    // Size: 0x10
    // Offset: 0x134
    ::UnityEngine::Quaternion predictedSpawnRotTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating interface conversion operator: operator ::Fusion::IAfterTick
    operator ::Fusion::IAfterTick() noexcept {
      return *reinterpret_cast<::Fusion::IAfterTick*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::IPredictedSpawnBehaviour
    operator ::Fusion::IPredictedSpawnBehaviour() noexcept {
      return *reinterpret_cast<::Fusion::IPredictedSpawnBehaviour*>(this);
    }
    // static field const value: static private System.Int32 WORD_COUNT_TELEPORT_POS_TICK
    static constexpr const int WORD_COUNT_TELEPORT_POS_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_TELEPORT_POS_TICK
    static int _get_WORD_COUNT_TELEPORT_POS_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_TELEPORT_POS_TICK
    static void _set_WORD_COUNT_TELEPORT_POS_TICK(int value);
    // static field const value: static private System.Int32 WORD_COUNT_TELEPORT_ROT_TICK
    static constexpr const int WORD_COUNT_TELEPORT_ROT_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_TELEPORT_ROT_TICK
    static int _get_WORD_COUNT_TELEPORT_ROT_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_TELEPORT_ROT_TICK
    static void _set_WORD_COUNT_TELEPORT_ROT_TICK(int value);
    // static field const value: static private System.Int32 WORD_COUNT_POS_CHANGED_TICK
    static constexpr const int WORD_COUNT_POS_CHANGED_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_POS_CHANGED_TICK
    static int _get_WORD_COUNT_POS_CHANGED_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_POS_CHANGED_TICK
    static void _set_WORD_COUNT_POS_CHANGED_TICK(int value);
    // static field const value: static private System.Int32 WORD_COUNT_ROT_CHANGED_TICK
    static constexpr const int WORD_COUNT_ROT_CHANGED_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_ROT_CHANGED_TICK
    static int _get_WORD_COUNT_ROT_CHANGED_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_ROT_CHANGED_TICK
    static void _set_WORD_COUNT_ROT_CHANGED_TICK(int value);
    // static field const value: static private System.Int32 WORD_COUNT_POS_STOPPED_CHANGING_TICK
    static constexpr const int WORD_COUNT_POS_STOPPED_CHANGING_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_POS_STOPPED_CHANGING_TICK
    static int _get_WORD_COUNT_POS_STOPPED_CHANGING_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_POS_STOPPED_CHANGING_TICK
    static void _set_WORD_COUNT_POS_STOPPED_CHANGING_TICK(int value);
    // static field const value: static private System.Int32 WORD_COUNT_ROT_STOPPED_CHANGING_TICK
    static constexpr const int WORD_COUNT_ROT_STOPPED_CHANGING_TICK = 1;
    // Get static field: static private System.Int32 WORD_COUNT_ROT_STOPPED_CHANGING_TICK
    static int _get_WORD_COUNT_ROT_STOPPED_CHANGING_TICK();
    // Set static field: static private System.Int32 WORD_COUNT_ROT_STOPPED_CHANGING_TICK
    static void _set_WORD_COUNT_ROT_STOPPED_CHANGING_TICK(int value);
    // static field const value: static private System.Int32 INTERPOLATE_BACKWARDS_FLAG
    static constexpr const int INTERPOLATE_BACKWARDS_FLAG = -2147483648;
    // Get static field: static private System.Int32 INTERPOLATE_BACKWARDS_FLAG
    static int _get_INTERPOLATE_BACKWARDS_FLAG();
    // Set static field: static private System.Int32 INTERPOLATE_BACKWARDS_FLAG
    static void _set_INTERPOLATE_BACKWARDS_FLAG(int value);
    // static field const value: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_VEL
    static constexpr const int WORD_COUNT_TELEPORT_INTERPOL_VEL = 3;
    // Get static field: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_VEL
    static int _get_WORD_COUNT_TELEPORT_INTERPOL_VEL();
    // Set static field: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_VEL
    static void _set_WORD_COUNT_TELEPORT_INTERPOL_VEL(int value);
    // static field const value: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL
    static constexpr const int WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL = 4;
    // Get static field: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL
    static int _get_WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL();
    // Set static field: static private System.Int32 WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL
    static void _set_WORD_COUNT_TELEPORT_INTERPOL_ANG_VEL(int value);
    // static field const value: static private System.Int32 OFFSET_BASE
    static constexpr const int OFFSET_BASE = 7;
    // Get static field: static private System.Int32 OFFSET_BASE
    static int _get_OFFSET_BASE();
    // Set static field: static private System.Int32 OFFSET_BASE
    static void _set_OFFSET_BASE(int value);
    // static field const value: static private System.Int32 OFFSET_TELEPORT_INTERPOL_VEL
    static constexpr const int OFFSET_TELEPORT_INTERPOL_VEL = 7;
    // Get static field: static private System.Int32 OFFSET_TELEPORT_INTERPOL_VEL
    static int _get_OFFSET_TELEPORT_INTERPOL_VEL();
    // Set static field: static private System.Int32 OFFSET_TELEPORT_INTERPOL_VEL
    static void _set_OFFSET_TELEPORT_INTERPOL_VEL(int value);
    // static field const value: static private System.Int32 OFFSET_TELEPORT_INTERPOL_ANG_VEL
    static constexpr const int OFFSET_TELEPORT_INTERPOL_ANG_VEL = 10;
    // Get static field: static private System.Int32 OFFSET_TELEPORT_INTERPOL_ANG_VEL
    static int _get_OFFSET_TELEPORT_INTERPOL_ANG_VEL();
    // Set static field: static private System.Int32 OFFSET_TELEPORT_INTERPOL_ANG_VEL
    static void _set_OFFSET_TELEPORT_INTERPOL_ANG_VEL(int value);
    // static field const value: static private System.Int32 OFFSET_TELEPORT_POS_TICK
    static constexpr const int OFFSET_TELEPORT_POS_TICK = 14;
    // Get static field: static private System.Int32 OFFSET_TELEPORT_POS_TICK
    static int _get_OFFSET_TELEPORT_POS_TICK();
    // Set static field: static private System.Int32 OFFSET_TELEPORT_POS_TICK
    static void _set_OFFSET_TELEPORT_POS_TICK(int value);
    // static field const value: static private System.Int32 OFFSET_TELEPORT_ROT_TICK
    static constexpr const int OFFSET_TELEPORT_ROT_TICK = 15;
    // Get static field: static private System.Int32 OFFSET_TELEPORT_ROT_TICK
    static int _get_OFFSET_TELEPORT_ROT_TICK();
    // Set static field: static private System.Int32 OFFSET_TELEPORT_ROT_TICK
    static void _set_OFFSET_TELEPORT_ROT_TICK(int value);
    // static field const value: static private System.Int32 OFFSET_POS_CHANGED_TICK
    static constexpr const int OFFSET_POS_CHANGED_TICK = 16;
    // Get static field: static private System.Int32 OFFSET_POS_CHANGED_TICK
    static int _get_OFFSET_POS_CHANGED_TICK();
    // Set static field: static private System.Int32 OFFSET_POS_CHANGED_TICK
    static void _set_OFFSET_POS_CHANGED_TICK(int value);
    // static field const value: static private System.Int32 OFFSET_ROT_CHANGED_TICK
    static constexpr const int OFFSET_ROT_CHANGED_TICK = 17;
    // Get static field: static private System.Int32 OFFSET_ROT_CHANGED_TICK
    static int _get_OFFSET_ROT_CHANGED_TICK();
    // Set static field: static private System.Int32 OFFSET_ROT_CHANGED_TICK
    static void _set_OFFSET_ROT_CHANGED_TICK(int value);
    // static field const value: static private System.Int32 OFFSET_POS_STOPPED_CHANGING_TICK
    static constexpr const int OFFSET_POS_STOPPED_CHANGING_TICK = 18;
    // Get static field: static private System.Int32 OFFSET_POS_STOPPED_CHANGING_TICK
    static int _get_OFFSET_POS_STOPPED_CHANGING_TICK();
    // Set static field: static private System.Int32 OFFSET_POS_STOPPED_CHANGING_TICK
    static void _set_OFFSET_POS_STOPPED_CHANGING_TICK(int value);
    // static field const value: static private System.Int32 OFFSET_ROT_STOPPED_CHANGING_TICK
    static constexpr const int OFFSET_ROT_STOPPED_CHANGING_TICK = 19;
    // Get static field: static private System.Int32 OFFSET_ROT_STOPPED_CHANGING_TICK
    static int _get_OFFSET_ROT_STOPPED_CHANGING_TICK();
    // Set static field: static private System.Int32 OFFSET_ROT_STOPPED_CHANGING_TICK
    static void _set_OFFSET_ROT_STOPPED_CHANGING_TICK(int value);
    // static field const value: static protected System.Int32 WORD_COUNT_NT
    static constexpr const int WORD_COUNT_NT = 20;
    // Get static field: static protected System.Int32 WORD_COUNT_NT
    static int _get_WORD_COUNT_NT();
    // Set static field: static protected System.Int32 WORD_COUNT_NT
    static void _set_WORD_COUNT_NT(int value);
    // Get instance field reference: private Fusion.NetworkTransform/ConsecutiveStateInterp _consecutiveInterp
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::ConsecutiveStateInterp*& dyn__consecutiveInterp();
    // Get instance field reference: private Fusion.NetworkTransform/IInterpolationImplementation _currInterpImpl
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::IInterpolationImplementation*& dyn__currInterpImpl();
    // Get instance field reference: private System.Boolean _wasRenderedThisUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__wasRenderedThisUpdate();
    // Get instance field reference: public Fusion.Spaces InterpolationSpace
    [[deprecated("Use field access instead!")]] ::Fusion::Spaces& dyn_InterpolationSpace();
    // Get instance field reference: public UnityEngine.Transform InterpolationTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_InterpolationTarget();
    // Get instance field reference: public System.Boolean InterpolateErrorCorrection
    [[deprecated("Use field access instead!")]] bool& dyn_InterpolateErrorCorrection();
    // Get instance field reference: public Fusion.InterpolatedErrorCorrectionSettings InterpolatedErrorCorrectionSettings
    [[deprecated("Use field access instead!")]] ::Fusion::InterpolatedErrorCorrectionSettings*& dyn_InterpolatedErrorCorrectionSettings();
    // Get instance field reference: public System.Boolean UseLegacySharedModeInterpolation
    [[deprecated("Use field access instead!")]] bool& dyn_UseLegacySharedModeInterpolation();
    // Get instance field reference: public System.Single TargetInterpolationDelay
    [[deprecated("Use field access instead!")]] float& dyn_TargetInterpolationDelay();
    // Get instance field reference: private Fusion.NetworkTransform/IntermittentStateInterp _intermittentInterp
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::IntermittentStateInterp*& dyn__intermittentInterp();
    // Get instance field reference: private Fusion.NetworkTransform/LegacyIntermittentStateInterp _legacyIntermittentInterp
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::LegacyIntermittentStateInterp*& dyn__legacyIntermittentInterp();
    // Get instance field reference: private Fusion.NetworkTransform/SmoothErrorCorrectionInterp _smoothErrorCorrectedInterp
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkTransform::SmoothErrorCorrectionInterp*& dyn__smoothErrorCorrectedInterp();
    // Get instance field reference: private Fusion.NetworkPosition/EncodedPosition _prevEncodedPos
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkPosition::EncodedPosition& dyn__prevEncodedPos();
    // Get instance field reference: private Fusion.NetworkPositionRotation/EncodedRotation _prevEncodedRot
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkPositionRotation::EncodedRotation& dyn__prevEncodedRot();
    // Get instance field reference: private Fusion.Tick _predictedSpawnLatestToTick
    [[deprecated("Use field access instead!")]] ::Fusion::Tick& dyn__predictedSpawnLatestToTick();
    // Get instance field reference: private UnityEngine.Vector3 _predictedSpawnPosFrom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__predictedSpawnPosFrom();
    // Get instance field reference: private UnityEngine.Vector3 _predictedSpawnPosTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__predictedSpawnPosTo();
    // Get instance field reference: private UnityEngine.Quaternion _predictedSpawnRotFrom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__predictedSpawnRotFrom();
    // Get instance field reference: private UnityEngine.Quaternion _predictedSpawnRotTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__predictedSpawnRotTo();
    // private System.Boolean get_InvalidInterpolationTarget()
    // Offset: 0x2B1FDD4
    bool get_InvalidInterpolationTarget();
    // public System.Void AfterTick()
    // Offset: 0x2B20438
    void AfterTick();
    // private Fusion.NetworkTransform/IInterpolationImplementation GetInterpolationImplementation()
    // Offset: 0x2B20098
    ::Fusion::NetworkTransform::IInterpolationImplementation* GetInterpolationImplementation();
    // protected System.Void ApplyInterpolatedTransform(ref Fusion.NetworkTransform/InterpolatedTransformParameters param)
    // Offset: 0x2B205EC
    void ApplyInterpolatedTransform(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters> param);
    // protected System.Void GetUninterpolatedWorldPositions(ref Fusion.InterpolationData data, out UnityEngine.Vector3 posFrom, out UnityEngine.Vector3 posTo)
    // Offset: 0x2B206A4
    void GetUninterpolatedWorldPositions(ByRef<::Fusion::InterpolationData> data, ByRef<::UnityEngine::Vector3> posFrom, ByRef<::UnityEngine::Vector3> posTo);
    // protected System.Void GetUninterpolatedWorldRotations(ref Fusion.InterpolationData data, out UnityEngine.Quaternion rotFrom, out UnityEngine.Quaternion rotTo)
    // Offset: 0x2B208AC
    void GetUninterpolatedWorldRotations(ByRef<::Fusion::InterpolationData> data, ByRef<::UnityEngine::Quaternion> rotFrom, ByRef<::UnityEngine::Quaternion> rotTo);
    // private System.Void InterpolatePositionRotation(UnityEngine.Vector3 fromPos, UnityEngine.Quaternion fromRot, UnityEngine.Vector3 toPos, UnityEngine.Quaternion toRot, System.Single alpha, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x2B20B70
    void InterpolatePositionRotation(::UnityEngine::Vector3 fromPos, ::UnityEngine::Quaternion fromRot, ::UnityEngine::Vector3 toPos, ::UnityEngine::Quaternion toRot, float alpha, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot);
    // protected UnityEngine.Vector3 get_DefaultTeleportInterpolationVelocity()
    // Offset: 0x2B211DC
    ::UnityEngine::Vector3 get_DefaultTeleportInterpolationVelocity();
    // protected UnityEngine.Vector3 get_DefaultTeleportInterpolationAngularVelocity()
    // Offset: 0x2B211EC
    ::UnityEngine::Vector3 get_DefaultTeleportInterpolationAngularVelocity();
    // private System.Void ComputeStateChanged()
    // Offset: 0x2B211FC
    void ComputeStateChanged();
    // public System.Void TeleportToPosition(UnityEngine.Vector3 position, System.Nullable`1<UnityEngine.Vector3> interpolationVel, System.Boolean interpolateBackwards)
    // Offset: 0x2B214C8
    void TeleportToPosition(::UnityEngine::Vector3 position, ::System::Nullable_1<::UnityEngine::Vector3> interpolationVel, bool interpolateBackwards);
    // public System.Void TeleportToRotation(UnityEngine.Quaternion rotation, System.Nullable`1<UnityEngine.Vector3> interpolationAngularVel, System.Boolean interpolateBackwards)
    // Offset: 0x2B21664
    void TeleportToRotation(::UnityEngine::Quaternion rotation, ::System::Nullable_1<::UnityEngine::Vector3> interpolationAngularVel, bool interpolateBackwards);
    // public System.Void TeleportToPositionRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Nullable`1<UnityEngine.Vector3> interpolationVel, System.Nullable`1<UnityEngine.Vector3> interpolationAngularVel, System.Boolean interpolateBackwards)
    // Offset: 0x2B21808
    void TeleportToPositionRotation(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::System::Nullable_1<::UnityEngine::Vector3> interpolationVel, ::System::Nullable_1<::UnityEngine::Vector3> interpolationAngularVel, bool interpolateBackwards);
    // public System.Void PredictedSpawnSpawned()
    // Offset: 0x2B21B04
    void PredictedSpawnSpawned();
    // public System.Void PredictedSpawnUpdate()
    // Offset: 0x2B21B2C
    void PredictedSpawnUpdate();
    // public System.Void PredictedSpawnRender()
    // Offset: 0x2B21B34
    void PredictedSpawnRender();
    // public System.Void PredictedSpawnFailed()
    // Offset: 0x2B21C0C
    void PredictedSpawnFailed();
    // public System.Void PredictedSpawnSuccess()
    // Offset: 0x2B21C10
    void PredictedSpawnSuccess();
    // public System.Void PredictedSpawnCacheTransformState()
    // Offset: 0x2B21C14
    void PredictedSpawnCacheTransformState();
    // private Fusion.NetworkTransform/InterpolatedTransformParameters PredictedSpawnGetInterpolationParameters()
    // Offset: 0x2B21D18
    ::Fusion::NetworkTransform::InterpolatedTransformParameters PredictedSpawnGetInterpolationParameters();
    // public UnityEngine.Vector3 ReadTeleportInterpolationVelocity()
    // Offset: 0x2B21E50
    ::UnityEngine::Vector3 ReadTeleportInterpolationVelocity();
    // public UnityEngine.Vector3 ReadTeleportInterpolationVelocity(System.Int32* ptr)
    // Offset: 0x2B21EA4
    ::UnityEngine::Vector3 ReadTeleportInterpolationVelocity(int* ptr);
    // static public UnityEngine.Vector3 ReadTeleportInterpolationVelocity(System.Int32* ptr, Fusion.ReadAccuracy readAccuracy)
    // Offset: 0x2B21EF4
    static ::UnityEngine::Vector3 ReadTeleportInterpolationVelocity(int* ptr, ::Fusion::ReadAccuracy readAccuracy);
    // public UnityEngine.Vector3 ReadTeleportInterpolationAngularVelocity()
    // Offset: 0x2B21F30
    ::UnityEngine::Vector3 ReadTeleportInterpolationAngularVelocity();
    // public UnityEngine.Vector3 ReadTeleportInterpolationAngularVelocity(System.Int32* ptr)
    // Offset: 0x2B21F84
    ::UnityEngine::Vector3 ReadTeleportInterpolationAngularVelocity(int* ptr);
    // static public UnityEngine.Vector3 ReadTeleportInterpolationAngularVelocity(System.Int32* ptr, Fusion.ReadAccuracy readAccuracy)
    // Offset: 0x2B21FD4
    static ::UnityEngine::Vector3 ReadTeleportInterpolationAngularVelocity(int* ptr, ::Fusion::ReadAccuracy readAccuracy);
    // public System.Int32 ReadTeleportPositionTick()
    // Offset: 0x2B22010
    int ReadTeleportPositionTick();
    // static public System.Int32 ReadTeleportPositionTick(System.Int32* ptr)
    // Offset: 0x2B22020
    static int ReadTeleportPositionTick(int* ptr);
    // public System.Int32 ReadTeleportRotationTick()
    // Offset: 0x2B2202C
    int ReadTeleportRotationTick();
    // static public System.Int32 ReadTeleportRotationTick(System.Int32* ptr)
    // Offset: 0x2B2203C
    static int ReadTeleportRotationTick(int* ptr);
    // public System.Boolean ReadTeleportPositionInterpolateBackwards()
    // Offset: 0x2B22048
    bool ReadTeleportPositionInterpolateBackwards();
    // static public System.Boolean ReadTeleportPositionInterpolateBackwards(System.Int32* ptr)
    // Offset: 0x2B22058
    static bool ReadTeleportPositionInterpolateBackwards(int* ptr);
    // public System.Boolean ReadTeleportRotationInterpolateBackwards()
    // Offset: 0x2B22064
    bool ReadTeleportRotationInterpolateBackwards();
    // static public System.Boolean ReadTeleportRotationInterpolateBackwards(System.Int32* ptr)
    // Offset: 0x2B22074
    static bool ReadTeleportRotationInterpolateBackwards(int* ptr);
    // System.Int32 ReadPositionChangedTick()
    // Offset: 0x2B22080
    int ReadPositionChangedTick();
    // static System.Int32 ReadPositionChangedTick(System.Int32* ptr)
    // Offset: 0x2B2208C
    static int ReadPositionChangedTick(int* ptr);
    // System.Int32 ReadRotationChangedTick()
    // Offset: 0x2B22094
    int ReadRotationChangedTick();
    // static System.Int32 ReadRotationChangedTick(System.Int32* ptr)
    // Offset: 0x2B220A0
    static int ReadRotationChangedTick(int* ptr);
    // System.Int32 ReadPositionStoppedChangingTick()
    // Offset: 0x2B220A8
    int ReadPositionStoppedChangingTick();
    // static System.Int32 ReadPositionStoppedChangingTick(System.Int32* ptr)
    // Offset: 0x2B220B4
    static int ReadPositionStoppedChangingTick(int* ptr);
    // System.Int32 ReadRotationStoppedChangingTick()
    // Offset: 0x2B220BC
    int ReadRotationStoppedChangingTick();
    // static System.Int32 ReadRotationStoppedChangingTick(System.Int32* ptr)
    // Offset: 0x2B220C8
    static int ReadRotationStoppedChangingTick(int* ptr);
    // public System.Void WriteTeleportInterpolationVelocity(UnityEngine.Vector3 velocity)
    // Offset: 0x2B220D0
    void WriteTeleportInterpolationVelocity(::UnityEngine::Vector3 velocity);
    // public System.Void WriteTeleportInterpolationVelocity(UnityEngine.Vector3 velocity, System.Int32* ptr)
    // Offset: 0x2B22180
    void WriteTeleportInterpolationVelocity(::UnityEngine::Vector3 velocity, int* ptr);
    // static public System.Void WriteTeleportInterpolationVelocity(UnityEngine.Vector3 velocity, System.Int32* ptr, Fusion.WriteAccuracy writeAccuracy)
    // Offset: 0x2B2222C
    static void WriteTeleportInterpolationVelocity(::UnityEngine::Vector3 velocity, int* ptr, ::Fusion::WriteAccuracy writeAccuracy);
    // public System.Void WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3 angularVel)
    // Offset: 0x2B222C0
    void WriteTeleportInterpolationAngularVelocity(::UnityEngine::Vector3 angularVel);
    // public System.Void WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3 angularVel, System.Int32* ptr)
    // Offset: 0x2B22370
    void WriteTeleportInterpolationAngularVelocity(::UnityEngine::Vector3 angularVel, int* ptr);
    // static public System.Void WriteTeleportInterpolationAngularVelocity(UnityEngine.Vector3 angularVel, System.Int32* ptr, Fusion.WriteAccuracy writeAccuracy)
    // Offset: 0x2B2241C
    static void WriteTeleportInterpolationAngularVelocity(::UnityEngine::Vector3 angularVel, int* ptr, ::Fusion::WriteAccuracy writeAccuracy);
    // public System.Void WriteTeleportPositionTick(System.Int32 tick)
    // Offset: 0x2B224B0
    void WriteTeleportPositionTick(int tick);
    // static public System.Void WriteTeleportPositionTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B224C8
    static void WriteTeleportPositionTick(int tick, int* ptr);
    // public System.Void WriteTeleportRotationTick(System.Int32 tick)
    // Offset: 0x2B224DC
    void WriteTeleportRotationTick(int tick);
    // static public System.Void WriteTeleportRotationTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B224F4
    static void WriteTeleportRotationTick(int tick, int* ptr);
    // public System.Void WriteTeleportPositionInterpolateBackwards(System.Boolean backwards)
    // Offset: 0x2B22508
    void WriteTeleportPositionInterpolateBackwards(bool backwards);
    // static public System.Void WriteTeleportPositionInterpolateBackwards(System.Int32* ptr, System.Boolean backwards)
    // Offset: 0x2B22528
    static void WriteTeleportPositionInterpolateBackwards(int* ptr, bool backwards);
    // public System.Void WriteTeleportRotationInterpolateBackwards(System.Boolean backwards)
    // Offset: 0x2B22544
    void WriteTeleportRotationInterpolateBackwards(bool backwards);
    // static public System.Void WriteTeleportRotationInterpolateBackwards(System.Int32* ptr, System.Boolean backwards)
    // Offset: 0x2B22564
    static void WriteTeleportRotationInterpolateBackwards(int* ptr, bool backwards);
    // System.Void WritePositionChangedTick(System.Int32 tick)
    // Offset: 0x2B22580
    void WritePositionChangedTick(int tick);
    // static System.Void WritePositionChangedTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B2258C
    static void WritePositionChangedTick(int tick, int* ptr);
    // System.Void WriteRotationChangedTick(System.Int32 tick)
    // Offset: 0x2B22594
    void WriteRotationChangedTick(int tick);
    // static System.Void WriteRotationChangedTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B225A0
    static void WriteRotationChangedTick(int tick, int* ptr);
    // System.Void WritePositionStoppedChangingTick(System.Int32 tick)
    // Offset: 0x2B225A8
    void WritePositionStoppedChangingTick(int tick);
    // static System.Void WritePositionStoppedChangingTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B225B4
    static void WritePositionStoppedChangingTick(int tick, int* ptr);
    // System.Void WriteRotationStoppedChangingTick(System.Int32 tick)
    // Offset: 0x2B225BC
    void WriteRotationStoppedChangingTick(int tick);
    // static System.Void WriteRotationStoppedChangingTick(System.Int32 tick, System.Int32* ptr)
    // Offset: 0x2B225C8
    static void WriteRotationStoppedChangingTick(int tick, int* ptr);
    // public override System.Void Spawned()
    // Offset: 0x2B1C49C
    // Implemented from: Fusion.NetworkPosition
    // Base method: System.Void NetworkPosition::Spawned()
    void Spawned();
    // public override System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    // Offset: 0x2B1FEB8
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    void Despawned(::Fusion::NetworkRunner* runner, bool hasState);
    // public override System.Void BeforeUpdate()
    // Offset: 0x2B1FEE0
    // Implemented from: Fusion.NetworkPosition
    // Base method: System.Void NetworkPosition::BeforeUpdate()
    void BeforeUpdate();
    // public override System.Void Render()
    // Offset: 0x2B1FEEC
    // Implemented from: Fusion.SimulationBehaviour
    // Base method: System.Void SimulationBehaviour::Render()
    void Render();
    // public override System.Void AfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    // Offset: 0x2B1F43C
    // Implemented from: Fusion.NetworkPosition
    // Base method: System.Void NetworkPosition::AfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)
    void AfterAllTicks(bool resimulation, int tickCount);
    // public override System.Void CopyBackingFieldsToState(System.Boolean firstTime)
    // Offset: 0x2B1F3AC
    // Implemented from: Fusion.NetworkPosition
    // Base method: System.Void NetworkPosition::CopyBackingFieldsToState(System.Boolean firstTime)
    void CopyBackingFieldsToState(bool firstTime);
    // protected override System.Int32 get_BaseWordCount()
    // Offset: 0x2B21E48
    // Implemented from: Fusion.NetworkPositionRotation
    // Base method: System.Int32 NetworkPositionRotation::get_BaseWordCount()
    int get_BaseWordCount();
    // public System.Void .ctor()
    // Offset: 0x2B1FD54
    // Implemented from: Fusion.NetworkPositionRotation
    // Base method: System.Void NetworkPositionRotation::.ctor()
    // Base method: System.Void NetworkPosition::.ctor()
    // Base method: System.Void NetworkAreaOfInterestBehaviour::.ctor()
    // Base method: System.Void NetworkBehaviour::.ctor()
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkTransform*, creationType>()));
    }
  }; // Fusion.NetworkTransform
  #pragma pack(pop)
  static check_size<sizeof(NetworkTransform), 308 + sizeof(::UnityEngine::Quaternion)> __Fusion_NetworkTransformSizeCheck;
  static_assert(sizeof(NetworkTransform) == 0x144);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkTransform::get_InvalidInterpolationTarget
// Il2CppName: get_InvalidInterpolationTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::get_InvalidInterpolationTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "get_InvalidInterpolationTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::AfterTick
// Il2CppName: AfterTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::AfterTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "AfterTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::GetInterpolationImplementation
// Il2CppName: GetInterpolationImplementation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkTransform::IInterpolationImplementation* (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::GetInterpolationImplementation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "GetInterpolationImplementation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ApplyInterpolatedTransform
// Il2CppName: ApplyInterpolatedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(ByRef<::Fusion::NetworkTransform::InterpolatedTransformParameters>)>(&Fusion::NetworkTransform::ApplyInterpolatedTransform)> {
  static const MethodInfo* get() {
    static auto* param = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkTransform/InterpolatedTransformParameters")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ApplyInterpolatedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::GetUninterpolatedWorldPositions
// Il2CppName: GetUninterpolatedWorldPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(ByRef<::Fusion::InterpolationData>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Fusion::NetworkTransform::GetUninterpolatedWorldPositions)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    static auto* posFrom = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* posTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "GetUninterpolatedWorldPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, posFrom, posTo});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::GetUninterpolatedWorldRotations
// Il2CppName: GetUninterpolatedWorldRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(ByRef<::Fusion::InterpolationData>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&Fusion::NetworkTransform::GetUninterpolatedWorldRotations)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Fusion", "InterpolationData")->this_arg;
    static auto* rotFrom = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* rotTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "GetUninterpolatedWorldRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, rotFrom, rotTo});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::InterpolatePositionRotation
// Il2CppName: InterpolatePositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Fusion::NetworkTransform::InterpolatePositionRotation)> {
  static const MethodInfo* get() {
    static auto* fromPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fromRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* toPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* toRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "InterpolatePositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPos, fromRot, toPos, toRot, alpha, pos, rot});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::get_DefaultTeleportInterpolationVelocity
// Il2CppName: get_DefaultTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::get_DefaultTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "get_DefaultTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::get_DefaultTeleportInterpolationAngularVelocity
// Il2CppName: get_DefaultTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::get_DefaultTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "get_DefaultTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ComputeStateChanged
// Il2CppName: ComputeStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ComputeStateChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ComputeStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::TeleportToPosition
// Il2CppName: TeleportToPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3, ::System::Nullable_1<::UnityEngine::Vector3>, bool)>(&Fusion::NetworkTransform::TeleportToPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* interpolationVel = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* interpolateBackwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "TeleportToPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, interpolationVel, interpolateBackwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::TeleportToRotation
// Il2CppName: TeleportToRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Quaternion, ::System::Nullable_1<::UnityEngine::Vector3>, bool)>(&Fusion::NetworkTransform::TeleportToRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* interpolationAngularVel = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* interpolateBackwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "TeleportToRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation, interpolationAngularVel, interpolateBackwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::TeleportToPositionRotation
// Il2CppName: TeleportToPositionRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Vector3>, bool)>(&Fusion::NetworkTransform::TeleportToPositionRotation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* interpolationVel = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* interpolationAngularVel = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* interpolateBackwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "TeleportToPositionRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, interpolationVel, interpolationAngularVel, interpolateBackwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnSpawned
// Il2CppName: PredictedSpawnSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnUpdate
// Il2CppName: PredictedSpawnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnRender
// Il2CppName: PredictedSpawnRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnFailed
// Il2CppName: PredictedSpawnFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnSuccess
// Il2CppName: PredictedSpawnSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnSuccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnCacheTransformState
// Il2CppName: PredictedSpawnCacheTransformState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnCacheTransformState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnCacheTransformState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::PredictedSpawnGetInterpolationParameters
// Il2CppName: PredictedSpawnGetInterpolationParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkTransform::InterpolatedTransformParameters (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::PredictedSpawnGetInterpolationParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "PredictedSpawnGetInterpolationParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationVelocity
// Il2CppName: ReadTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationVelocity
// Il2CppName: ReadTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)(int*)>(&Fusion::NetworkTransform::ReadTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationVelocity
// Il2CppName: ReadTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(int*, ::Fusion::ReadAccuracy)>(&Fusion::NetworkTransform::ReadTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* readAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "ReadAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, readAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity
// Il2CppName: ReadTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity
// Il2CppName: ReadTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::NetworkTransform::*)(int*)>(&Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity
// Il2CppName: ReadTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(int*, ::Fusion::ReadAccuracy)>(&Fusion::NetworkTransform::ReadTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* readAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "ReadAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, readAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportPositionTick
// Il2CppName: ReadTeleportPositionTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportPositionTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportPositionTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportPositionTick
// Il2CppName: ReadTeleportPositionTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadTeleportPositionTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportPositionTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportRotationTick
// Il2CppName: ReadTeleportRotationTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportRotationTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportRotationTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportRotationTick
// Il2CppName: ReadTeleportRotationTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadTeleportRotationTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportRotationTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportPositionInterpolateBackwards
// Il2CppName: ReadTeleportPositionInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportPositionInterpolateBackwards)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportPositionInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportPositionInterpolateBackwards
// Il2CppName: ReadTeleportPositionInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int*)>(&Fusion::NetworkTransform::ReadTeleportPositionInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportPositionInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportRotationInterpolateBackwards
// Il2CppName: ReadTeleportRotationInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadTeleportRotationInterpolateBackwards)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportRotationInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadTeleportRotationInterpolateBackwards
// Il2CppName: ReadTeleportRotationInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int*)>(&Fusion::NetworkTransform::ReadTeleportRotationInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadTeleportRotationInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadPositionChangedTick
// Il2CppName: ReadPositionChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadPositionChangedTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadPositionChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadPositionChangedTick
// Il2CppName: ReadPositionChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadPositionChangedTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadPositionChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadRotationChangedTick
// Il2CppName: ReadRotationChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadRotationChangedTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadRotationChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadRotationChangedTick
// Il2CppName: ReadRotationChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadRotationChangedTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadRotationChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadPositionStoppedChangingTick
// Il2CppName: ReadPositionStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadPositionStoppedChangingTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadPositionStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadPositionStoppedChangingTick
// Il2CppName: ReadPositionStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadPositionStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadPositionStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadRotationStoppedChangingTick
// Il2CppName: ReadRotationStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::ReadRotationStoppedChangingTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadRotationStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::ReadRotationStoppedChangingTick
// Il2CppName: ReadRotationStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&Fusion::NetworkTransform::ReadRotationStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "ReadRotationStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationVelocity
// Il2CppName: WriteTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3)>(&Fusion::NetworkTransform::WriteTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationVelocity
// Il2CppName: WriteTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3, int*)>(&Fusion::NetworkTransform::WriteTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationVelocity
// Il2CppName: WriteTeleportInterpolationVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, int*, ::Fusion::WriteAccuracy)>(&Fusion::NetworkTransform::WriteTeleportInterpolationVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* writeAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "WriteAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity, ptr, writeAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity
// Il2CppName: WriteTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3)>(&Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* angularVel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angularVel});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity
// Il2CppName: WriteTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::UnityEngine::Vector3, int*)>(&Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* angularVel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angularVel, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity
// Il2CppName: WriteTeleportInterpolationAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, int*, ::Fusion::WriteAccuracy)>(&Fusion::NetworkTransform::WriteTeleportInterpolationAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* angularVel = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* writeAccuracy = &::il2cpp_utils::GetClassFromName("Fusion", "WriteAccuracy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportInterpolationAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angularVel, ptr, writeAccuracy});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportPositionTick
// Il2CppName: WriteTeleportPositionTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WriteTeleportPositionTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportPositionTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportPositionTick
// Il2CppName: WriteTeleportPositionTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WriteTeleportPositionTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportPositionTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportRotationTick
// Il2CppName: WriteTeleportRotationTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WriteTeleportRotationTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportRotationTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportRotationTick
// Il2CppName: WriteTeleportRotationTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WriteTeleportRotationTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportRotationTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportPositionInterpolateBackwards
// Il2CppName: WriteTeleportPositionInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(bool)>(&Fusion::NetworkTransform::WriteTeleportPositionInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* backwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportPositionInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportPositionInterpolateBackwards
// Il2CppName: WriteTeleportPositionInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int*, bool)>(&Fusion::NetworkTransform::WriteTeleportPositionInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* backwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportPositionInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, backwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportRotationInterpolateBackwards
// Il2CppName: WriteTeleportRotationInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(bool)>(&Fusion::NetworkTransform::WriteTeleportRotationInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* backwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportRotationInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteTeleportRotationInterpolateBackwards
// Il2CppName: WriteTeleportRotationInterpolateBackwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int*, bool)>(&Fusion::NetworkTransform::WriteTeleportRotationInterpolateBackwards)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* backwards = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteTeleportRotationInterpolateBackwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, backwards});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WritePositionChangedTick
// Il2CppName: WritePositionChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WritePositionChangedTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WritePositionChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WritePositionChangedTick
// Il2CppName: WritePositionChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WritePositionChangedTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WritePositionChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteRotationChangedTick
// Il2CppName: WriteRotationChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WriteRotationChangedTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteRotationChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteRotationChangedTick
// Il2CppName: WriteRotationChangedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WriteRotationChangedTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteRotationChangedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WritePositionStoppedChangingTick
// Il2CppName: WritePositionStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WritePositionStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WritePositionStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WritePositionStoppedChangingTick
// Il2CppName: WritePositionStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WritePositionStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WritePositionStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteRotationStoppedChangingTick
// Il2CppName: WriteRotationStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(int)>(&Fusion::NetworkTransform::WriteRotationStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteRotationStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::WriteRotationStoppedChangingTick
// Il2CppName: WriteRotationStoppedChangingTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int*)>(&Fusion::NetworkTransform::WriteRotationStoppedChangingTick)> {
  static const MethodInfo* get() {
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "WriteRotationStoppedChangingTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tick, ptr});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::Spawned
// Il2CppName: Spawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::Spawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "Spawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::Despawned
// Il2CppName: Despawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(::Fusion::NetworkRunner*, bool)>(&Fusion::NetworkTransform::Despawned)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* hasState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "Despawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, hasState});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::BeforeUpdate
// Il2CppName: BeforeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::BeforeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "BeforeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::AfterAllTicks
// Il2CppName: AfterAllTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(bool, int)>(&Fusion::NetworkTransform::AfterAllTicks)> {
  static const MethodInfo* get() {
    static auto* resimulation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tickCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "AfterAllTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resimulation, tickCount});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::CopyBackingFieldsToState
// Il2CppName: CopyBackingFieldsToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkTransform::*)(bool)>(&Fusion::NetworkTransform::CopyBackingFieldsToState)> {
  static const MethodInfo* get() {
    static auto* firstTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "CopyBackingFieldsToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstTime});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::get_BaseWordCount
// Il2CppName: get_BaseWordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkTransform::*)()>(&Fusion::NetworkTransform::get_BaseWordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkTransform*), "get_BaseWordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
