// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Fusion.SimulationBehaviourUpdater
#include "Fusion/SimulationBehaviourUpdater.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationBehaviourListScope
  struct SimulationBehaviourListScope;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::SimulationBehaviourListScope, "Fusion", "SimulationBehaviourListScope");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.SimulationBehaviourListScope
  // [TokenAttribute] Offset: FFFFFFFF
  struct SimulationBehaviourListScope/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private Fusion.SimulationBehaviourUpdater/BehaviourList _list
    // Size: 0x8
    // Offset: 0x0
    ::Fusion::SimulationBehaviourUpdater::BehaviourList* list;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationBehaviourUpdater::BehaviourList*) == 0x8);
    public:
    // Creating value type constructor for type: SimulationBehaviourListScope
    constexpr SimulationBehaviourListScope(::Fusion::SimulationBehaviourUpdater::BehaviourList* list_ = {}) noexcept : list{list_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::Fusion::SimulationBehaviourUpdater::BehaviourList*
    constexpr operator ::Fusion::SimulationBehaviourUpdater::BehaviourList*() const noexcept {
      return list;
    }
    // Get instance field reference: private Fusion.SimulationBehaviourUpdater/BehaviourList _list
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationBehaviourUpdater::BehaviourList*& dyn__list();
    // System.Void .ctor(Fusion.SimulationBehaviourUpdater/BehaviourList list)
    // Offset: 0x2B183E0
    // ABORTED: conflicts with another method.  SimulationBehaviourListScope(::Fusion::SimulationBehaviourUpdater::BehaviourList* list);
    // public System.Void Dispose()
    // Offset: 0x2B18410
    void Dispose();
  }; // Fusion.SimulationBehaviourListScope
  #pragma pack(pop)
  static check_size<sizeof(SimulationBehaviourListScope), 0 + sizeof(::Fusion::SimulationBehaviourUpdater::BehaviourList*)> __Fusion_SimulationBehaviourListScopeSizeCheck;
  static_assert(sizeof(SimulationBehaviourListScope) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::SimulationBehaviourListScope::SimulationBehaviourListScope
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::SimulationBehaviourListScope::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::SimulationBehaviourListScope::*)()>(&Fusion::SimulationBehaviourListScope::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::SimulationBehaviourListScope), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
