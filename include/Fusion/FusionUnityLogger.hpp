// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.ILogger
#include "Fusion/ILogger.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: ILogBuilder
  class ILogBuilder;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: FusionUnityLogger
  class FusionUnityLogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::FusionUnityLogger);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::FusionUnityLogger*, "Fusion", "FusionUnityLogger");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.FusionUnityLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class FusionUnityLogger : public ::Il2CppObject/*, public ::Fusion::ILogger*/ {
    public:
    public:
    // private System.Text.StringBuilder _builder
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::StringBuilder* builder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // public System.Boolean UseGlobalPrefix
    // Size: 0x1
    // Offset: 0x18
    bool UseGlobalPrefix;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseColorTags
    // Size: 0x1
    // Offset: 0x19
    bool UseColorTags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseColorTags and: GlobalPrefixColor
    char __padding2[0x6] = {};
    // public System.String GlobalPrefixColor
    // Size: 0x8
    // Offset: 0x20
    ::StringW GlobalPrefixColor;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Color32 MinRandomColor
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::Color32 MinRandomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 MaxRandomColor
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::Color32 MaxRandomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color ServerColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color ServerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Func`2<System.Object,System.Int32> <GetColor>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::System::Func_2<::Il2CppObject*, int>* GetColor;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Il2CppObject*, int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Fusion::ILogger
    operator ::Fusion::ILogger() noexcept {
      return *reinterpret_cast<::Fusion::ILogger*>(this);
    }
    // Get instance field reference: private System.Text.StringBuilder _builder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__builder();
    // Get instance field reference: public System.Boolean UseGlobalPrefix
    [[deprecated("Use field access instead!")]] bool& dyn_UseGlobalPrefix();
    // Get instance field reference: public System.Boolean UseColorTags
    [[deprecated("Use field access instead!")]] bool& dyn_UseColorTags();
    // Get instance field reference: public System.String GlobalPrefixColor
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GlobalPrefixColor();
    // Get instance field reference: public UnityEngine.Color32 MinRandomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_MinRandomColor();
    // Get instance field reference: public UnityEngine.Color32 MaxRandomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_MaxRandomColor();
    // Get instance field reference: public UnityEngine.Color ServerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_ServerColor();
    // Get instance field reference: private System.Func`2<System.Object,System.Int32> <GetColor>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Il2CppObject*, int>*& dyn_$GetColor$k__BackingField();
    // public System.Func`2<System.Object,System.Int32> get_GetColor()
    // Offset: 0x2817274
    ::System::Func_2<::Il2CppObject*, int>* get_GetColor();
    // public System.Void set_GetColor(System.Func`2<System.Object,System.Int32> value)
    // Offset: 0x281727C
    void set_GetColor(::System::Func_2<::Il2CppObject*, int>* value);
    // public System.Void .ctor()
    // Offset: 0x2817284
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionUnityLogger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionUnityLogger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionUnityLogger*, creationType>()));
    }
    // public System.Void Log(Fusion.LogType logType, System.String prefix, ref T context, System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Log(::Fusion::LogType logType, ::StringW prefix, ByRef<T> context, ::StringW message) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionUnityLogger::Log");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::FusionUnityLogger*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, logType, prefix, byref(context), message);
    }
    // public System.Void LogException(System.String prefix, ref T context, System.Exception ex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void LogException(::StringW prefix, ByRef<T> context, ::System::Exception* ex) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Fusion::ILogBuilder>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionUnityLogger::LogException");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::FusionUnityLogger*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, prefix, byref(context), ex);
    }
    // private System.Int32 GetRandomColor(System.Int32 seed)
    // Offset: 0x2817414
    int GetRandomColor(int seed);
    // static private System.Int32 GetRandomColor(System.Int32 seed, UnityEngine.Color32 min, UnityEngine.Color32 max, UnityEngine.Color32 svr)
    // Offset: 0x2817450
    static int GetRandomColor(int seed, ::UnityEngine::Color32 min, ::UnityEngine::Color32 max, ::UnityEngine::Color32 svr);
    // static private System.Int32 Color32ToRGB24(UnityEngine.Color32 c)
    // Offset: 0x2817558
    static int Color32ToRGB24(::UnityEngine::Color32 c);
    // static private System.String Color32ToRGBString(UnityEngine.Color32 c)
    // Offset: 0x2817388
    static ::StringW Color32ToRGBString(::UnityEngine::Color32 c);
    // static private System.Void Initialize()
    // Offset: 0x281756C
    static void Initialize();
    // private System.Int32 <.ctor>b__12_0(System.Object obj)
    // Offset: 0x2817614
    int $_ctor$b__12_0(::Il2CppObject* obj);
  }; // Fusion.FusionUnityLogger
  #pragma pack(pop)
  static check_size<sizeof(FusionUnityLogger), 64 + sizeof(::System::Func_2<::Il2CppObject*, int>*)> __Fusion_FusionUnityLoggerSizeCheck;
  static_assert(sizeof(FusionUnityLogger) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::get_GetColor
// Il2CppName: get_GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_2<::Il2CppObject*, int>* (Fusion::FusionUnityLogger::*)()>(&Fusion::FusionUnityLogger::get_GetColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "get_GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::set_GetColor
// Il2CppName: set_GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::FusionUnityLogger::*)(::System::Func_2<::Il2CppObject*, int>*)>(&Fusion::FusionUnityLogger::set_GetColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "set_GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::Log
// Il2CppName: Log
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::LogException
// Il2CppName: LogException
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::GetRandomColor
// Il2CppName: GetRandomColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::FusionUnityLogger::*)(int)>(&Fusion::FusionUnityLogger::GetRandomColor)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "GetRandomColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::GetRandomColor
// Il2CppName: GetRandomColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::Color32, ::UnityEngine::Color32, ::UnityEngine::Color32)>(&Fusion::FusionUnityLogger::GetRandomColor)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* svr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "GetRandomColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, min, max, svr});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::Color32ToRGB24
// Il2CppName: Color32ToRGB24
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Color32)>(&Fusion::FusionUnityLogger::Color32ToRGB24)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "Color32ToRGB24", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::Color32ToRGBString
// Il2CppName: Color32ToRGBString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Color32)>(&Fusion::FusionUnityLogger::Color32ToRGBString)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "Color32ToRGBString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::FusionUnityLogger::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::FusionUnityLogger::$_ctor$b__12_0
// Il2CppName: <.ctor>b__12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::FusionUnityLogger::*)(::Il2CppObject*)>(&Fusion::FusionUnityLogger::$_ctor$b__12_0)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::FusionUnityLogger*), "<.ctor>b__12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
