// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Timer
#include "Fusion/Timer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Skipping declaration: StatsPer because it is already included!
  // Skipping declaration: NetworkId because it is already included!
  // Forward declaring type: IStatsBuffer
  class IStatsBuffer;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Skipping declaration: StatSourceInfo because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::Statistics);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics*, "Fusion", "Simulation/Statistics");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/Statistics
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::Statistics : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::Simulation::Statistics::StatSourceTypes
    struct StatSourceTypes;
    // Nested type: ::Fusion::Simulation::Statistics::StatsPer
    struct StatsPer;
    // Nested type: ::Fusion::Simulation::Statistics::StatFlags
    struct StatFlags;
    // Nested type: ::Fusion::Simulation::Statistics::StatSourceInfo
    struct StatSourceInfo;
    // Nested type: ::Fusion::Simulation::Statistics::NetStats
    struct NetStats;
    // Nested type: ::Fusion::Simulation::Statistics::NetStatFlags
    struct NetStatFlags;
    // Nested type: ::Fusion::Simulation::Statistics::ObjStats
    struct ObjStats;
    // Nested type: ::Fusion::Simulation::Statistics::ObjStatFlags
    struct ObjStatFlags;
    // Nested type: ::Fusion::Simulation::Statistics::SimStats
    struct SimStats;
    // Nested type: ::Fusion::Simulation::Statistics::SimStatFlags
    struct SimStatFlags;
    // Nested type: ::Fusion::Simulation::Statistics::RPCSample
    struct RPCSample;
    // Nested type: ::Fusion::Simulation::Statistics::FloatSample
    struct FloatSample;
    // Nested type: ::Fusion::Simulation::Statistics::TickSample_1<T>
    template<typename T>
    struct TickSample_1;
    // Nested type: ::Fusion::Simulation::Statistics::TimeSample_1<T>
    template<typename T>
    struct TimeSample_1;
    // Nested type: ::Fusion::Simulation::Statistics::StatsBufferBase_1<T>
    template<typename T>
    class StatsBufferBase_1;
    // Nested type: ::Fusion::Simulation::Statistics::FloatStatsBuffer
    class FloatStatsBuffer;
    // Nested type: ::Fusion::Simulation::Statistics::RPCStatsBuffer
    class RPCStatsBuffer;
    // Nested type: ::Fusion::Simulation::Statistics::TickFloatBuffer
    class TickFloatBuffer;
    // Nested type: ::Fusion::Simulation::Statistics::TimeFloatBuffer
    class TimeFloatBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.Simulation/Statistics/StatsPer
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct StatsPer/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatsPer
      constexpr StatsPer(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.Simulation/Statistics/StatsPer Individual
      static constexpr const int Individual = 1;
      // Get static field: static public Fusion.Simulation/Statistics/StatsPer Individual
      static ::Fusion::Simulation::Statistics::StatsPer _get_Individual();
      // Set static field: static public Fusion.Simulation/Statistics/StatsPer Individual
      static void _set_Individual(::Fusion::Simulation::Statistics::StatsPer value);
      // static field const value: static public Fusion.Simulation/Statistics/StatsPer Tick
      static constexpr const int Tick = 2;
      // Get static field: static public Fusion.Simulation/Statistics/StatsPer Tick
      static ::Fusion::Simulation::Statistics::StatsPer _get_Tick();
      // Set static field: static public Fusion.Simulation/Statistics/StatsPer Tick
      static void _set_Tick(::Fusion::Simulation::Statistics::StatsPer value);
      // static field const value: static public Fusion.Simulation/Statistics/StatsPer Second
      static constexpr const int Second = 4;
      // Get static field: static public Fusion.Simulation/Statistics/StatsPer Second
      static ::Fusion::Simulation::Statistics::StatsPer _get_Second();
      // Set static field: static public Fusion.Simulation/Statistics/StatsPer Second
      static void _set_Second(::Fusion::Simulation::Statistics::StatsPer value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.Simulation/Statistics/StatsPer
    #pragma pack(pop)
    static check_size<sizeof(Simulation::Statistics::StatsPer), 0 + sizeof(int)> __Fusion_Simulation_Statistics_StatsPerSizeCheck;
    static_assert(sizeof(Simulation::Statistics::StatsPer) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.Simulation/Statistics/StatFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct StatFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatFlags
      constexpr StatFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidOnServer
      static constexpr const int ValidOnServer = 1;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnServer
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidOnServer();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnServer
      static void _set_ValidOnServer(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidOnClient
      static constexpr const int ValidOnClient = 2;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnClient
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidOnClient();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnClient
      static void _set_ValidOnClient(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidInShared
      static constexpr const int ValidInShared = 4;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidInShared
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidInShared();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidInShared
      static void _set_ValidInShared(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidWithDeltaSnapshot
      static constexpr const int ValidWithDeltaSnapshot = 8;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidWithDeltaSnapshot
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidWithDeltaSnapshot();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidWithDeltaSnapshot
      static void _set_ValidWithDeltaSnapshot(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidWithEventualConsistency
      static constexpr const int ValidWithEventualConsistency = 16;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidWithEventualConsistency
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidWithEventualConsistency();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidWithEventualConsistency
      static void _set_ValidWithEventualConsistency(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidOnStateAuthority
      static constexpr const int ValidOnStateAuthority = 32;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnStateAuthority
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidOnStateAuthority();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidOnStateAuthority
      static void _set_ValidOnStateAuthority(::Fusion::Simulation::Statistics::StatFlags value);
      // static field const value: static public Fusion.Simulation/Statistics/StatFlags ValidForBuildType
      static constexpr const int ValidForBuildType = 64;
      // Get static field: static public Fusion.Simulation/Statistics/StatFlags ValidForBuildType
      static ::Fusion::Simulation::Statistics::StatFlags _get_ValidForBuildType();
      // Set static field: static public Fusion.Simulation/Statistics/StatFlags ValidForBuildType
      static void _set_ValidForBuildType(::Fusion::Simulation::Statistics::StatFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.Simulation/Statistics/StatFlags
    #pragma pack(pop)
    static check_size<sizeof(Simulation::Statistics::StatFlags), 0 + sizeof(int)> __Fusion_Simulation_Statistics_StatFlagsSizeCheck;
    static_assert(sizeof(Simulation::Statistics::StatFlags) == 0x4);
    // Size: 0x44
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Simulation/Statistics/StatSourceInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatSourceInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String LongName
      // Size: 0x8
      // Offset: 0x0
      ::StringW LongName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String ShortName
      // Size: 0x8
      // Offset: 0x8
      ::StringW ShortName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String InvalidReason
      // Size: 0x8
      // Offset: 0x10
      ::StringW InvalidReason;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Double Multiplier
      // Size: 0x8
      // Offset: 0x18
      double Multiplier;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Int32 Decimals
      // Size: 0x4
      // Offset: 0x20
      int Decimals;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 HistoBucketCount
      // Size: 0x4
      // Offset: 0x24
      int HistoBucketCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Double HistogMaxValue
      // Size: 0x8
      // Offset: 0x28
      double HistogMaxValue;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Single WarnThreshold
      // Size: 0x4
      // Offset: 0x30
      float WarnThreshold;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ErrorThreshold
      // Size: 0x4
      // Offset: 0x34
      float ErrorThreshold;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public Fusion.Simulation/Statistics/StatsPer PerFlags
      // Size: 0x4
      // Offset: 0x38
      ::Fusion::Simulation::Statistics::StatsPer PerFlags;
      // Field size check
      static_assert(sizeof(::Fusion::Simulation::Statistics::StatsPer) == 0x4);
      // public Fusion.Simulation/Statistics/StatsPer PerDefault
      // Size: 0x4
      // Offset: 0x3C
      ::Fusion::Simulation::Statistics::StatsPer PerDefault;
      // Field size check
      static_assert(sizeof(::Fusion::Simulation::Statistics::StatsPer) == 0x4);
      // public Fusion.Simulation/Statistics/StatFlags Flags
      // Size: 0x4
      // Offset: 0x40
      ::Fusion::Simulation::Statistics::StatFlags Flags;
      // Field size check
      static_assert(sizeof(::Fusion::Simulation::Statistics::StatFlags) == 0x4);
      public:
      // Creating value type constructor for type: StatSourceInfo
      constexpr StatSourceInfo(::StringW LongName_ = {}, ::StringW ShortName_ = {}, ::StringW InvalidReason_ = {}, double Multiplier_ = {}, int Decimals_ = {}, int HistoBucketCount_ = {}, double HistogMaxValue_ = {}, float WarnThreshold_ = {}, float ErrorThreshold_ = {}, ::Fusion::Simulation::Statistics::StatsPer PerFlags_ = {}, ::Fusion::Simulation::Statistics::StatsPer PerDefault_ = {}, ::Fusion::Simulation::Statistics::StatFlags Flags_ = {}) noexcept : LongName{LongName_}, ShortName{ShortName_}, InvalidReason{InvalidReason_}, Multiplier{Multiplier_}, Decimals{Decimals_}, HistoBucketCount{HistoBucketCount_}, HistogMaxValue{HistogMaxValue_}, WarnThreshold{WarnThreshold_}, ErrorThreshold{ErrorThreshold_}, PerFlags{PerFlags_}, PerDefault{PerDefault_}, Flags{Flags_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String LongName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_LongName();
      // Get instance field reference: public System.String ShortName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_ShortName();
      // Get instance field reference: public System.String InvalidReason
      [[deprecated("Use field access instead!")]] ::StringW& dyn_InvalidReason();
      // Get instance field reference: public System.Double Multiplier
      [[deprecated("Use field access instead!")]] double& dyn_Multiplier();
      // Get instance field reference: public System.Int32 Decimals
      [[deprecated("Use field access instead!")]] int& dyn_Decimals();
      // Get instance field reference: public System.Int32 HistoBucketCount
      [[deprecated("Use field access instead!")]] int& dyn_HistoBucketCount();
      // Get instance field reference: public System.Double HistogMaxValue
      [[deprecated("Use field access instead!")]] double& dyn_HistogMaxValue();
      // Get instance field reference: public System.Single WarnThreshold
      [[deprecated("Use field access instead!")]] float& dyn_WarnThreshold();
      // Get instance field reference: public System.Single ErrorThreshold
      [[deprecated("Use field access instead!")]] float& dyn_ErrorThreshold();
      // Get instance field reference: public Fusion.Simulation/Statistics/StatsPer PerFlags
      [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatsPer& dyn_PerFlags();
      // Get instance field reference: public Fusion.Simulation/Statistics/StatsPer PerDefault
      [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatsPer& dyn_PerDefault();
      // Get instance field reference: public Fusion.Simulation/Statistics/StatFlags Flags
      [[deprecated("Use field access instead!")]] ::Fusion::Simulation::Statistics::StatFlags& dyn_Flags();
      // public System.Void .ctor(System.String longname, System.String shortname, System.Double multiplier, System.Int32 decimals, System.Single warnThreshold, System.Single errorThreshold, Fusion.Simulation/Statistics/StatsPer perDefault, Fusion.Simulation/Statistics/StatsPer perFlags, Fusion.Simulation/Statistics/StatFlags statFlags, System.Int32 histoBucketCount, System.Double histoMaxValue)
      // Offset: 0x2B819CC
      StatSourceInfo(::StringW longname, ::StringW shortname, double multiplier, int decimals, float warnThreshold, float errorThreshold, ::Fusion::Simulation::Statistics::StatsPer perDefault, ::Fusion::Simulation::Statistics::StatsPer perFlags, ::Fusion::Simulation::Statistics::StatFlags statFlags, int histoBucketCount, double histoMaxValue);
    }; // Fusion.Simulation/Statistics/StatSourceInfo
    #pragma pack(pop)
    static check_size<sizeof(Simulation::Statistics::StatSourceInfo), 64 + sizeof(::Fusion::Simulation::Statistics::StatFlags)> __Fusion_Simulation_Statistics_StatSourceInfoSizeCheck;
    static_assert(sizeof(Simulation::Statistics::StatSourceInfo) == 0x44);
    public:
    // private Fusion.Timer _timer
    // Size: 0x11
    // Offset: 0x10
    ::Fusion::Timer timer;
    // Field size check
    static_assert(sizeof(::Fusion::Timer) == 0x11);
    // Padding between fields: timer and: paused
    char __padding0[0x7] = {};
    // private System.Boolean _paused
    // Size: 0x1
    // Offset: 0x28
    bool paused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: paused and: buffers
    char __padding1[0x7] = {};
    // private Fusion.Simulation/Statistics/FloatStatsBuffer[] _buffers
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Fusion::Simulation::Statistics::FloatStatsBuffer*> buffers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::Simulation::Statistics::FloatStatsBuffer*>) == 0x8);
    public:
    // static field const value: static private Fusion.Simulation/Statistics/StatFlags StatFlagsAllTrue
    static constexpr const int StatFlagsAllTrue = -1;
    // Get static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsAllTrue
    static ::Fusion::Simulation::Statistics::StatFlags _get_StatFlagsAllTrue();
    // Set static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsAllTrue
    static void _set_StatFlagsAllTrue(::Fusion::Simulation::Statistics::StatFlags value);
    // static field const value: static private Fusion.Simulation/Statistics/StatFlags StatFlagsDefault
    static constexpr const int StatFlagsDefault = 94;
    // Get static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsDefault
    static ::Fusion::Simulation::Statistics::StatFlags _get_StatFlagsDefault();
    // Set static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsDefault
    static void _set_StatFlagsDefault(::Fusion::Simulation::Statistics::StatFlags value);
    // static field const value: static private Fusion.Simulation/Statistics/StatFlags StatFlagsEC_Clnt
    static constexpr const int StatFlagsEC_Clnt = 22;
    // Get static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsEC_Clnt
    static ::Fusion::Simulation::Statistics::StatFlags _get_StatFlagsEC_Clnt();
    // Set static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagsEC_Clnt
    static void _set_StatFlagsEC_Clnt(::Fusion::Simulation::Statistics::StatFlags value);
    // static field const value: static private Fusion.Simulation/Statistics/StatFlags StatFlagReleaseOnly
    static constexpr const int StatFlagReleaseOnly = 0;
    // Get static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagReleaseOnly
    static ::Fusion::Simulation::Statistics::StatFlags _get_StatFlagReleaseOnly();
    // Set static field: static private Fusion.Simulation/Statistics/StatFlags StatFlagReleaseOnly
    static void _set_StatFlagReleaseOnly(::Fusion::Simulation::Statistics::StatFlags value);
    // static field const value: static public System.Int32 NET_STAT_TYPE_COUNT
    static constexpr const int NET_STAT_TYPE_COUNT = 3;
    // Get static field: static public System.Int32 NET_STAT_TYPE_COUNT
    static int _get_NET_STAT_TYPE_COUNT();
    // Set static field: static public System.Int32 NET_STAT_TYPE_COUNT
    static void _set_NET_STAT_TYPE_COUNT(int value);
    // Get static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] NetStatSourceInfo
    static ::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> _get_NetStatSourceInfo();
    // Set static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] NetStatSourceInfo
    static void _set_NetStatSourceInfo(::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> value);
    // static field const value: static public System.Int32 OBJ_STAT_TYPE_COUNT
    static constexpr const int OBJ_STAT_TYPE_COUNT = 2;
    // Get static field: static public System.Int32 OBJ_STAT_TYPE_COUNT
    static int _get_OBJ_STAT_TYPE_COUNT();
    // Set static field: static public System.Int32 OBJ_STAT_TYPE_COUNT
    static void _set_OBJ_STAT_TYPE_COUNT(int value);
    // Get static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] ObjStatSourceInfo
    static ::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> _get_ObjStatSourceInfo();
    // Set static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] ObjStatSourceInfo
    static void _set_ObjStatSourceInfo(::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> value);
    // static field const value: static public System.Int32 SIM_STAT_TYPE_COUNT
    static constexpr const int SIM_STAT_TYPE_COUNT = 16;
    // Get static field: static public System.Int32 SIM_STAT_TYPE_COUNT
    static int _get_SIM_STAT_TYPE_COUNT();
    // Set static field: static public System.Int32 SIM_STAT_TYPE_COUNT
    static void _set_SIM_STAT_TYPE_COUNT(int value);
    // Get static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] SimStatSourceInfo
    static ::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> _get_SimStatSourceInfo();
    // Set static field: static public readonly Fusion.Simulation/Statistics/StatSourceInfo[] SimStatSourceInfo
    static void _set_SimStatSourceInfo(::ArrayW<::Fusion::Simulation::Statistics::StatSourceInfo> value);
    // static field const value: static public System.Int32 SAMPLE_SIZE
    static constexpr const int SAMPLE_SIZE = 512;
    // Get static field: static public System.Int32 SAMPLE_SIZE
    static int _get_SAMPLE_SIZE();
    // Set static field: static public System.Int32 SAMPLE_SIZE
    static void _set_SAMPLE_SIZE(int value);
    // static field const value: static public System.Int32 OBJECT_SAMPLE_SIZE
    static constexpr const int OBJECT_SAMPLE_SIZE = 16;
    // Get static field: static public System.Int32 OBJECT_SAMPLE_SIZE
    static int _get_OBJECT_SAMPLE_SIZE();
    // Set static field: static public System.Int32 OBJECT_SAMPLE_SIZE
    static void _set_OBJECT_SAMPLE_SIZE(int value);
    // Get instance field reference: private Fusion.Timer _timer
    [[deprecated("Use field access instead!")]] ::Fusion::Timer& dyn__timer();
    // Get instance field reference: private System.Boolean _paused
    [[deprecated("Use field access instead!")]] bool& dyn__paused();
    // Get instance field reference: private Fusion.Simulation/Statistics/FloatStatsBuffer[] _buffers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::Simulation::Statistics::FloatStatsBuffer*>& dyn__buffers();
    // public Fusion.Timer get_Timer()
    // Offset: 0x2B80078
    ::Fusion::Timer get_Timer();
    // public Fusion.IStatsBuffer GetObjectBuffer(Fusion.NetworkId id, Fusion.Simulation/Statistics/ObjStats statId, System.Boolean createIfMissing)
    // Offset: 0x2B8008C
    ::Fusion::IStatsBuffer* GetObjectBuffer(::Fusion::NetworkId id, ::Fusion::Simulation::Statistics::ObjStats statId, bool createIfMissing);
    // public Fusion.Simulation/Statistics/TickFloatBuffer GetObjectBandwidthBuffer(Fusion.NetworkId id, System.Boolean createIfMissing)
    // Offset: 0x2B80094
    ::Fusion::Simulation::Statistics::TickFloatBuffer* GetObjectBandwidthBuffer(::Fusion::NetworkId id, bool createIfMissing);
    // public Fusion.Simulation/Statistics/RPCStatsBuffer GetObjectRpcBuffer(Fusion.NetworkId id, System.Boolean createIfMissing)
    // Offset: 0x2B8009C
    ::Fusion::Simulation::Statistics::RPCStatsBuffer* GetObjectRpcBuffer(::Fusion::NetworkId id, bool createIfMissing);
    // public Fusion.Simulation/Statistics/FloatStatsBuffer GetStatBuffer(Fusion.Simulation/Statistics/SimStats statistic)
    // Offset: 0x2B7B4B8
    ::Fusion::Simulation::Statistics::FloatStatsBuffer* GetStatBuffer(::Fusion::Simulation::Statistics::SimStats statistic);
    // public Fusion.IStatsBuffer GetStatBuffer(Fusion.Simulation/Statistics/NetStats statistic, Fusion.NetworkRunner runner)
    // Offset: 0x2B800A4
    ::Fusion::IStatsBuffer* GetStatBuffer(::Fusion::Simulation::Statistics::NetStats statistic, ::Fusion::NetworkRunner* runner);
    // System.Void .ctor()
    // Offset: 0x2B801B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::Statistics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::Statistics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::Statistics*, creationType>()));
    }
    // public System.Void Pause(System.Boolean paused)
    // Offset: 0x2B80414
    void Pause(bool paused);
    // public System.Void Clear()
    // Offset: 0x2B80498
    void Clear();
    // private Fusion.Simulation/Statistics/FloatStatsBuffer CreateBuffer(Fusion.Simulation/Statistics/SimStats statId)
    // Offset: 0x2B80348
    ::Fusion::Simulation::Statistics::FloatStatsBuffer* CreateBuffer(::Fusion::Simulation::Statistics::SimStats statId);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/SimStatFlags statFlag)
    // Offset: 0x2B80584
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::SimStatFlags statFlag);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/SimStats statId)
    // Offset: 0x2B80750
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::SimStats statId);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/ObjStatFlags statFlag)
    // Offset: 0x2B807D4
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::ObjStatFlags statFlag);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/ObjStats statId)
    // Offset: 0x2B808AC
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::ObjStats statId);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/NetStatFlags statFlag)
    // Offset: 0x2B80930
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::NetStatFlags statFlag);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/NetStats statId)
    // Offset: 0x2B80A08
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::NetStats statId);
    // static public Fusion.Simulation/Statistics/StatSourceInfo GetDescription(Fusion.Simulation/Statistics/StatSourceTypes statSource, System.Int32 statId)
    // Offset: 0x2B8065C
    static ::Fusion::Simulation::Statistics::StatSourceInfo GetDescription(::Fusion::Simulation::Statistics::StatSourceTypes statSource, int statId);
    // static private System.Void .cctor()
    // Offset: 0x2B80A8C
    static void _cctor();
  }; // Fusion.Simulation/Statistics
  #pragma pack(pop)
  static check_size<sizeof(Simulation::Statistics), 48 + sizeof(::ArrayW<::Fusion::Simulation::Statistics::FloatStatsBuffer*>)> __Fusion_Simulation_StatisticsSizeCheck;
  static_assert(sizeof(Simulation::Statistics) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics::StatSourceInfo, "Fusion", "Simulation/Statistics/StatSourceInfo");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics::StatFlags, "Fusion", "Simulation/Statistics/StatFlags");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics::StatsPer, "Fusion", "Simulation/Statistics/StatsPer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::get_Timer
// Il2CppName: get_Timer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Timer (Fusion::Simulation::Statistics::*)()>(&Fusion::Simulation::Statistics::get_Timer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "get_Timer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetObjectBuffer
// Il2CppName: GetObjectBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::IStatsBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::NetworkId, ::Fusion::Simulation::Statistics::ObjStats, bool)>(&Fusion::Simulation::Statistics::GetObjectBuffer)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* statId = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/ObjStats")->byval_arg;
    static auto* createIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetObjectBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, statId, createIfMissing});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetObjectBandwidthBuffer
// Il2CppName: GetObjectBandwidthBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::TickFloatBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::NetworkId, bool)>(&Fusion::Simulation::Statistics::GetObjectBandwidthBuffer)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* createIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetObjectBandwidthBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, createIfMissing});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetObjectRpcBuffer
// Il2CppName: GetObjectRpcBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::RPCStatsBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::NetworkId, bool)>(&Fusion::Simulation::Statistics::GetObjectRpcBuffer)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* createIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetObjectRpcBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, createIfMissing});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetStatBuffer
// Il2CppName: GetStatBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::FloatStatsBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::Simulation::Statistics::SimStats)>(&Fusion::Simulation::Statistics::GetStatBuffer)> {
  static const MethodInfo* get() {
    static auto* statistic = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetStatBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statistic});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetStatBuffer
// Il2CppName: GetStatBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::IStatsBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::Simulation::Statistics::NetStats, ::Fusion::NetworkRunner*)>(&Fusion::Simulation::Statistics::GetStatBuffer)> {
  static const MethodInfo* get() {
    static auto* statistic = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStats")->byval_arg;
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetStatBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statistic, runner});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Statistics::*)(bool)>(&Fusion::Simulation::Statistics::Pause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::Statistics::*)()>(&Fusion::Simulation::Statistics::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::CreateBuffer
// Il2CppName: CreateBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::FloatStatsBuffer* (Fusion::Simulation::Statistics::*)(::Fusion::Simulation::Statistics::SimStats)>(&Fusion::Simulation::Statistics::CreateBuffer)> {
  static const MethodInfo* get() {
    static auto* statId = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "CreateBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statId});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::SimStatFlags)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statFlag = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statFlag});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::SimStats)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statId = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/SimStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statId});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::ObjStatFlags)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statFlag = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/ObjStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statFlag});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::ObjStats)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statId = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/ObjStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statId});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::NetStatFlags)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statFlag = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStatFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statFlag});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::NetStats)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statId = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/NetStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statId});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Simulation::Statistics::StatSourceInfo (*)(::Fusion::Simulation::Statistics::StatSourceTypes, int)>(&Fusion::Simulation::Statistics::GetDescription)> {
  static const MethodInfo* get() {
    static auto* statSource = &::il2cpp_utils::GetClassFromName("Fusion", "Simulation/Statistics/StatSourceTypes")->byval_arg;
    static auto* statId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statSource, statId});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::Simulation::Statistics::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
