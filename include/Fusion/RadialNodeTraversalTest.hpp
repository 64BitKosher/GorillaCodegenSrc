// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.IBoundsTraversalTest
#include "Fusion/IBoundsTraversalTest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: RadialNodeTraversalTest
  class RadialNodeTraversalTest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::RadialNodeTraversalTest);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::RadialNodeTraversalTest*, "Fusion", "RadialNodeTraversalTest");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.RadialNodeTraversalTest
  // [TokenAttribute] Offset: FFFFFFFF
  class RadialNodeTraversalTest : public ::Il2CppObject/*, public ::Fusion::IBoundsTraversalTest*/ {
    public:
    public:
    // private UnityEngine.Vector3 _center
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x1C
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Fusion::IBoundsTraversalTest
    operator ::Fusion::IBoundsTraversalTest() noexcept {
      return *reinterpret_cast<::Fusion::IBoundsTraversalTest*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 _center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__center();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // System.Void .ctor(UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x2B34370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RadialNodeTraversalTest* New_ctor(::UnityEngine::Vector3 center, float radius) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::RadialNodeTraversalTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RadialNodeTraversalTest*, creationType>(center, radius)));
    }
    // System.Void SetTestSettings(UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x2B343B0
    void SetTestSettings(::UnityEngine::Vector3 center, float radius);
    // public System.Boolean Check(ref Fusion.BVHNode/CachedBounds bounds)
    // Offset: 0x2B343BC
    bool Check(ByRef<::Fusion::BVHNode::CachedBounds> bounds);
  }; // Fusion.RadialNodeTraversalTest
  #pragma pack(pop)
  static check_size<sizeof(RadialNodeTraversalTest), 28 + sizeof(float)> __Fusion_RadialNodeTraversalTestSizeCheck;
  static_assert(sizeof(RadialNodeTraversalTest) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::RadialNodeTraversalTest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::RadialNodeTraversalTest::SetTestSettings
// Il2CppName: SetTestSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::RadialNodeTraversalTest::*)(::UnityEngine::Vector3, float)>(&Fusion::RadialNodeTraversalTest::SetTestSettings)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RadialNodeTraversalTest*), "SetTestSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius});
  }
};
// Writing MetadataGetter for method: Fusion::RadialNodeTraversalTest::Check
// Il2CppName: Check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::RadialNodeTraversalTest::*)(ByRef<::Fusion::BVHNode::CachedBounds>)>(&Fusion::RadialNodeTraversalTest::Check)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("Fusion", "BVHNode/CachedBounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::RadialNodeTraversalTest*), "Check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
