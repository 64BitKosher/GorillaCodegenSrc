// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation
#include "Fusion/Simulation.hpp"
// Including type: Fusion.Simulation/StateReplicator
#include "Fusion/Simulation_StateReplicator.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: Fusion.NetworkObjectPriorityHeap/Item
#include "Fusion/NetworkObjectPriorityHeap.hpp"
// Including type: Fusion.NetworkObjectRefMapPtr
#include "Fusion/NetworkObjectRefMapPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: SimulationSnapshot
  class SimulationSnapshot;
  // Forward declaring type: Allocator
  struct Allocator;
  // Forward declaring type: SimulationConnection
  class SimulationConnection;
  // Forward declaring type: SimulationPacketEnvelope
  struct SimulationPacketEnvelope;
  // Forward declaring type: SimulationGlobalState
  struct SimulationGlobalState;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: NetworkObjectHeader
  struct NetworkObjectHeader;
  // Forward declaring type: NetworkPrefabId
  struct NetworkPrefabId;
  // Forward declaring type: NetworkObjectHeaderFlags
  struct NetworkObjectHeaderFlags;
  // Forward declaring type: NetworkObjectNestingKey
  struct NetworkObjectNestingKey;
  // Forward declaring type: NetworkObjectDestroyFlags
  struct NetworkObjectDestroyFlags;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetBitBuffer
  struct NetBitBuffer;
  // Forward declaring type: NetConnection
  struct NetConnection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Simulation::StateReplicatorEventualConsistencyBase);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::StateReplicatorEventualConsistencyBase*, "Fusion", "Simulation/StateReplicatorEventualConsistencyBase");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Simulation/StateReplicatorEventualConsistencyBase
  // [TokenAttribute] Offset: FFFFFFFF
  class Simulation::StateReplicatorEventualConsistencyBase : public ::Fusion::Simulation::StateReplicator {
    public:
    // Writing base type padding for base size: 0x1C to desired offset: 0x20
    char ___base_padding[0x4] = {};
    // Nested type: ::Fusion::Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet
    struct ConnectionBitSet;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Simulation/StateReplicatorEventualConsistencyBase/ConnectionBitSet
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionBitSet/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt32* Words
      // Size: 0x8
      // Offset: 0x0
      uint* Words;
      // Field size check
      static_assert(sizeof(uint*) == 0x8);
      public:
      // Creating value type constructor for type: ConnectionBitSet
      constexpr ConnectionBitSet(uint* Words_ = {}) noexcept : Words{Words_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint*
      constexpr operator uint*() const noexcept {
        return Words;
      }
      // Get instance field reference: public System.UInt32* Words
      [[deprecated("Use field access instead!")]] uint*& dyn_Words();
      // public System.Void Set(System.Int32 bit)
      // Offset: 0x2B7EA00
      void Set(int bit);
      // public System.Boolean IsSet(System.Int32 bit)
      // Offset: 0x2B7EA2C
      bool IsSet(int bit);
    }; // Fusion.Simulation/StateReplicatorEventualConsistencyBase/ConnectionBitSet
    #pragma pack(pop)
    static check_size<sizeof(Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet), 0 + sizeof(uint*)> __Fusion_Simulation_StateReplicatorEventualConsistencyBase_ConnectionBitSetSizeCheck;
    static_assert(sizeof(Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet) == 0x8);
    public:
    // protected System.Int32* _changed
    // Size: 0x8
    // Offset: 0x20
    int* changed;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // protected Fusion.SimulationSnapshot _delta
    // Size: 0x8
    // Offset: 0x28
    ::Fusion::SimulationSnapshot* delta;
    // Field size check
    static_assert(sizeof(::Fusion::SimulationSnapshot*) == 0x8);
    // private Fusion.Allocator* _setsAllocator
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::Allocator* setsAllocator;
    // Field size check
    static_assert(sizeof(::Fusion::Allocator*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Fusion.NetworkId,Fusion.Simulation/StateReplicatorEventualConsistencyBase/ConnectionBitSet> _sets
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet>* sets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet>*) == 0x8);
    // private System.Collections.Generic.List`1<Fusion.NetworkObjectPriorityHeap/Item> _priorityPopped
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Fusion::NetworkObjectPriorityHeap::Item>* priorityPopped;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Fusion::NetworkObjectPriorityHeap::Item>*) == 0x8);
    // protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _create
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>* create;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*) == 0x8);
    // protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _createNested
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>* createNested;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*) == 0x8);
    // protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _destroy
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>* destroy;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*) == 0x8);
    public:
    // static field const value: static protected System.Int32 SET_WORD_BITS
    static constexpr const int SET_WORD_BITS = 32;
    // Get static field: static protected System.Int32 SET_WORD_BITS
    static int _get_SET_WORD_BITS();
    // Set static field: static protected System.Int32 SET_WORD_BITS
    static void _set_SET_WORD_BITS(int value);
    // static field const value: static protected System.Int32 DATA_BLOCK_SIZE
    static constexpr const int DATA_BLOCK_SIZE = 6;
    // Get static field: static protected System.Int32 DATA_BLOCK_SIZE
    static int _get_DATA_BLOCK_SIZE();
    // Set static field: static protected System.Int32 DATA_BLOCK_SIZE
    static void _set_DATA_BLOCK_SIZE(int value);
    // static field const value: static protected System.Int32 OFFSET_BLOCK_SIZE
    static constexpr const int OFFSET_BLOCK_SIZE = 4;
    // Get static field: static protected System.Int32 OFFSET_BLOCK_SIZE
    static int _get_OFFSET_BLOCK_SIZE();
    // Set static field: static protected System.Int32 OFFSET_BLOCK_SIZE
    static void _set_OFFSET_BLOCK_SIZE(int value);
    // static field const value: static protected System.Int32 HEADER_BLOCK_SIZE
    static constexpr const int HEADER_BLOCK_SIZE = 8;
    // Get static field: static protected System.Int32 HEADER_BLOCK_SIZE
    static int _get_HEADER_BLOCK_SIZE();
    // Set static field: static protected System.Int32 HEADER_BLOCK_SIZE
    static void _set_HEADER_BLOCK_SIZE(int value);
    // static field const value: static protected System.Int32 GLOBAL_BLOCK_SIZE
    static constexpr const int GLOBAL_BLOCK_SIZE = 8;
    // Get static field: static protected System.Int32 GLOBAL_BLOCK_SIZE
    static int _get_GLOBAL_BLOCK_SIZE();
    // Set static field: static protected System.Int32 GLOBAL_BLOCK_SIZE
    static void _set_GLOBAL_BLOCK_SIZE(int value);
    // Get instance field reference: protected System.Int32* _changed
    [[deprecated("Use field access instead!")]] int*& dyn__changed();
    // Get instance field reference: protected Fusion.SimulationSnapshot _delta
    [[deprecated("Use field access instead!")]] ::Fusion::SimulationSnapshot*& dyn__delta();
    // Get instance field reference: private Fusion.Allocator* _setsAllocator
    [[deprecated("Use field access instead!")]] ::Fusion::Allocator*& dyn__setsAllocator();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.NetworkId,Fusion.Simulation/StateReplicatorEventualConsistencyBase/ConnectionBitSet> _sets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkId, ::Fusion::Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet>*& dyn__sets();
    // Get instance field reference: private System.Collections.Generic.List`1<Fusion.NetworkObjectPriorityHeap/Item> _priorityPopped
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Fusion::NetworkObjectPriorityHeap::Item>*& dyn__priorityPopped();
    // Get instance field reference: protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _create
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*& dyn__create();
    // Get instance field reference: protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _createNested
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*& dyn__createNested();
    // Get instance field reference: protected System.Collections.Generic.Queue`1<Fusion.NetworkId> _destroy
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*& dyn__destroy();
    // protected System.Int32 get_SetWordCount()
    // Offset: 0x2B7B9F8
    int get_SetWordCount();
    // public System.Int32 get_PacketSizeLimitInBits()
    // Offset: 0x2B7BA58
    int get_PacketSizeLimitInBits();
    // static protected System.Void WriteFooter(Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7BD9C
    static void WriteFooter(::Fusion::Sockets::NetBitBuffer* buffer);
    // private System.Void WriteGlobals(Fusion.SimulationConnection sc, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7BDAC
    void WriteGlobals(::Fusion::SimulationConnection* sc, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // static protected System.Void ReadGlobals(Fusion.SimulationConnection sc, Fusion.SimulationGlobalState* globals, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7BECC
    static void ReadGlobals(::Fusion::SimulationConnection* sc, ::Fusion::SimulationGlobalState* globals, ::Fusion::Sockets::NetBitBuffer* buffer);
    // protected System.Void ReadDestroys(Fusion.PlayerRef player, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7BF24
    void ReadDestroys(::Fusion::PlayerRef player, ::Fusion::Sockets::NetBitBuffer* buffer);
    // protected Fusion.NetworkObjectHeader* ReadObjectHeader(Fusion.Sockets.NetConnection* connection, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationSnapshot snapshot, out System.Int32 bitOffset, out System.Boolean created, out System.Boolean skip)
    // Offset: 0x2B7C4E8
    ::Fusion::NetworkObjectHeader* ReadObjectHeader(::Fusion::Sockets::NetConnection* connection, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationSnapshot* snapshot, ByRef<int> bitOffset, ByRef<bool> created, ByRef<bool> skip);
    // protected System.Void WriteHeader(Fusion.SimulationConnection sc, Fusion.Sockets.NetBitBuffer* buffer, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7C990
    void WriteHeader(::Fusion::SimulationConnection* sc, ::Fusion::Sockets::NetBitBuffer* buffer, ::Fusion::SimulationPacketEnvelope* envelope);
    // protected System.Void WriteUsingAllObjects(Fusion.SimulationConnection sc, Fusion.PlayerRef player, Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7CC2C
    void WriteUsingAllObjects(::Fusion::SimulationConnection* sc, ::Fusion::PlayerRef player, ::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer);
    // protected System.Void WriteUsingInterestManagement(Fusion.SimulationConnection sc, Fusion.PlayerRef player, Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7D148
    void WriteUsingInterestManagement(::Fusion::SimulationConnection* sc, ::Fusion::PlayerRef player, ::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer);
    // protected System.Int32* InitDefaultInterestGroups(Fusion.NetworkObjectHeader* header, Fusion.SimulationConnection sc)
    // Offset: 0x2B7DA3C
    int* InitDefaultInterestGroups(::Fusion::NetworkObjectHeader* header, ::Fusion::SimulationConnection* sc);
    // protected System.Boolean IsLocalDestroyWaitingForConfirmation(Fusion.NetworkId id)
    // Offset: 0x2B7DA74
    bool IsLocalDestroyWaitingForConfirmation(::Fusion::NetworkId id);
    // protected System.Boolean WriteObjectFromEntry(Fusion.NetworkObjectRefMapPtr/Entry* entry, Fusion.NetworkObjectHeader* header, Fusion.SimulationConnection sc, Fusion.PlayerRef player, Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer)
    // Offset: 0x2B7CF30
    bool WriteObjectFromEntry(::Fusion::NetworkObjectRefMapPtr::Entry* entry, ::Fusion::NetworkObjectHeader* header, ::Fusion::SimulationConnection* sc, ::Fusion::PlayerRef player, ::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer);
    // private System.Int32 FindChangedWord(System.Int32* changes, System.Int32 startWord, System.Int32 maxWord, System.Int32 minTick, System.Int32* groups, System.Int32* interestGroups)
    // Offset: 0x2B7DFE8
    int FindChangedWord(int* changes, int startWord, int maxWord, int minTick, int* groups, int* interestGroups);
    // static private System.Void WriteWord(Fusion.Sockets.NetBitBuffer* buffer, System.Int32* ptr, System.Int32 w, System.Int32 previous)
    // Offset: 0x2B7E050
    static void WriteWord(::Fusion::Sockets::NetBitBuffer* buffer, int* ptr, int w, int previous);
    // protected System.Boolean WriteObject(Fusion.NetworkObjectHeader* header, Fusion.SimulationConnection sc, Fusion.PlayerRef player, Fusion.Sockets.NetConnection* connection, Fusion.SimulationPacketEnvelope* envelope, Fusion.Sockets.NetBitBuffer* buffer, System.Int32 changedTick)
    // Offset: 0x2B7DA7C
    bool WriteObject(::Fusion::NetworkObjectHeader* header, ::Fusion::SimulationConnection* sc, ::Fusion::PlayerRef player, ::Fusion::Sockets::NetConnection* connection, ::Fusion::SimulationPacketEnvelope* envelope, ::Fusion::Sockets::NetBitBuffer* buffer, int changedTick);
    // static protected System.Boolean ReadHeaderData(Fusion.Sockets.NetBitBuffer* buffer, out Fusion.NetworkPrefabId type, out System.Int32 wordCount, out System.Int32 transformOffset, out Fusion.NetworkObjectHeaderFlags flags, out Fusion.NetworkId nestingRoot, out Fusion.NetworkObjectNestingKey nestingKey, out System.Guid sceneGuid)
    // Offset: 0x2B7C828
    static bool ReadHeaderData(::Fusion::Sockets::NetBitBuffer* buffer, ByRef<::Fusion::NetworkPrefabId> type, ByRef<int> wordCount, ByRef<int> transformOffset, ByRef<::Fusion::NetworkObjectHeaderFlags> flags, ByRef<::Fusion::NetworkId> nestingRoot, ByRef<::Fusion::NetworkObjectNestingKey> nestingKey, ByRef<::System::Guid> sceneGuid);
    // protected System.Void TrackChanges(System.Int32* oldState, System.Int32* newState, System.Int32 words, System.Int32 tick)
    // Offset: 0x2B7E504
    void TrackChanges(int* oldState, int* newState, int words, int tick);
    // public override System.Boolean get_UseObjectInterest()
    // Offset: 0x2B7BA34
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Boolean StateReplicator::get_UseObjectInterest()
    bool get_UseObjectInterest();
    // protected System.Void .ctor(Fusion.Simulation simulation)
    // Offset: 0x2B7BA60
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::.ctor(Fusion.Simulation simulation)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Simulation::StateReplicatorEventualConsistencyBase* New_ctor(::Fusion::Simulation* simulation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Simulation::StateReplicatorEventualConsistencyBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Simulation::StateReplicatorEventualConsistencyBase*, creationType>(simulation)));
    }
    // public override System.Void UpdateRemotePrefabs()
    // Offset: 0x2B7BFD8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::UpdateRemotePrefabs()
    void UpdateRemotePrefabs();
    // override System.Boolean HasObjectInterest(Fusion.PlayerRef player, Fusion.NetworkId id)
    // Offset: 0x2B7D074
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Boolean StateReplicator::HasObjectInterest(Fusion.PlayerRef player, Fusion.NetworkId id)
    bool HasObjectInterest(::Fusion::PlayerRef player, ::Fusion::NetworkId id);
    // public override System.Void Dispose()
    // Offset: 0x2B7D5A8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::Dispose()
    void Dispose();
    // public override System.Void OnObjectDestroyed(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    // Offset: 0x2B7D5E0
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnObjectDestroyed(Fusion.NetworkId id, Fusion.NetworkObjectDestroyFlags flags)
    void OnObjectDestroyed(::Fusion::NetworkId id, ::Fusion::NetworkObjectDestroyFlags flags);
    // public override System.Void SendBegin()
    // Offset: 0x2B7E45C
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::SendBegin()
    void SendBegin();
    // public override System.Void SendEnd()
    // Offset: 0x2B7E68C
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::SendEnd()
    void SendEnd();
    // public override System.Void OnPacketLost(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7E690
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnPacketLost(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    void OnPacketLost(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
    // public override System.Void OnPacketDelivered(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    // Offset: 0x2B7E758
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::OnPacketDelivered(Fusion.Sockets.NetConnection* c, Fusion.SimulationPacketEnvelope* envelope)
    void OnPacketDelivered(::Fusion::Sockets::NetConnection* c, ::Fusion::SimulationPacketEnvelope* envelope);
    // override System.Void AssertVerifyNothingIsPending()
    // Offset: 0x2B7E8E8
    // Implemented from: Fusion.Simulation/StateReplicator
    // Base method: System.Void StateReplicator::AssertVerifyNothingIsPending()
    void AssertVerifyNothingIsPending();
  }; // Fusion.Simulation/StateReplicatorEventualConsistencyBase
  #pragma pack(pop)
  static check_size<sizeof(Simulation::StateReplicatorEventualConsistencyBase), 88 + sizeof(::System::Collections::Generic::Queue_1<::Fusion::NetworkId>*)> __Fusion_Simulation_StateReplicatorEventualConsistencyBaseSizeCheck;
  static_assert(sizeof(Simulation::StateReplicatorEventualConsistencyBase) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::StateReplicatorEventualConsistencyBase::ConnectionBitSet, "Fusion", "Simulation/StateReplicatorEventualConsistencyBase/ConnectionBitSet");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_SetWordCount
// Il2CppName: get_SetWordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_SetWordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "get_SetWordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_PacketSizeLimitInBits
// Il2CppName: get_PacketSizeLimitInBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_PacketSizeLimitInBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "get_PacketSizeLimitInBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteFooter
// Il2CppName: WriteFooter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteFooter)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteFooter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteGlobals
// Il2CppName: WriteGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::SimulationConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteGlobals)> {
  static const MethodInfo* get() {
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sc, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadGlobals
// Il2CppName: ReadGlobals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::SimulationConnection*, ::Fusion::SimulationGlobalState*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadGlobals)> {
  static const MethodInfo* get() {
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* globals = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationGlobalState"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "ReadGlobals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sc, globals, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadDestroys
// Il2CppName: ReadDestroys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::PlayerRef, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadDestroys)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "ReadDestroys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadObjectHeader
// Il2CppName: ReadObjectHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObjectHeader* (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::Sockets::NetConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationSnapshot*, ByRef<int>, ByRef<bool>, ByRef<bool>)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadObjectHeader)> {
  static const MethodInfo* get() {
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationSnapshot")->byval_arg;
    static auto* bitOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* created = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* skip = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "ReadObjectHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, buffer, snapshot, bitOffset, created, skip});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::SimulationConnection*, ::Fusion::Sockets::NetBitBuffer*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteHeader)> {
  static const MethodInfo* get() {
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sc, buffer, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteUsingAllObjects
// Il2CppName: WriteUsingAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::SimulationConnection*, ::Fusion::PlayerRef, ::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteUsingAllObjects)> {
  static const MethodInfo* get() {
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteUsingAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sc, player, connection, envelope, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteUsingInterestManagement
// Il2CppName: WriteUsingInterestManagement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::SimulationConnection*, ::Fusion::PlayerRef, ::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteUsingInterestManagement)> {
  static const MethodInfo* get() {
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteUsingInterestManagement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sc, player, connection, envelope, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::InitDefaultInterestGroups
// Il2CppName: InitDefaultInterestGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int* (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::NetworkObjectHeader*, ::Fusion::SimulationConnection*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::InitDefaultInterestGroups)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "InitDefaultInterestGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, sc});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::IsLocalDestroyWaitingForConfirmation
// Il2CppName: IsLocalDestroyWaitingForConfirmation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::NetworkId)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::IsLocalDestroyWaitingForConfirmation)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "IsLocalDestroyWaitingForConfirmation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteObjectFromEntry
// Il2CppName: WriteObjectFromEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::NetworkObjectRefMapPtr::Entry*, ::Fusion::NetworkObjectHeader*, ::Fusion::SimulationConnection*, ::Fusion::PlayerRef, ::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*, ::Fusion::Sockets::NetBitBuffer*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteObjectFromEntry)> {
  static const MethodInfo* get() {
    static auto* entry = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectRefMapPtr/Entry"))->byval_arg;
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteObjectFromEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, header, sc, player, connection, envelope, buffer});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::FindChangedWord
// Il2CppName: FindChangedWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(int*, int, int, int, int*, int*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::FindChangedWord)> {
  static const MethodInfo* get() {
    static auto* changes = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* startWord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxWord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minTick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groups = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* interestGroups = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "FindChangedWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes, startWord, maxWord, minTick, groups, interestGroups});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteWord
// Il2CppName: WriteWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Sockets::NetBitBuffer*, int*, int, int)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteWord)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* previous = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, ptr, w, previous});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteObject
// Il2CppName: WriteObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::NetworkObjectHeader*, ::Fusion::SimulationConnection*, ::Fusion::PlayerRef, ::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*, ::Fusion::Sockets::NetBitBuffer*, int)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::WriteObject)> {
  static const MethodInfo* get() {
    static auto* header = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeader"))->byval_arg;
    static auto* sc = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationConnection")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* connection = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* changedTick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "WriteObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, sc, player, connection, envelope, buffer, changedTick});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadHeaderData
// Il2CppName: ReadHeaderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::Sockets::NetBitBuffer*, ByRef<::Fusion::NetworkPrefabId>, ByRef<int>, ByRef<int>, ByRef<::Fusion::NetworkObjectHeaderFlags>, ByRef<::Fusion::NetworkId>, ByRef<::Fusion::NetworkObjectNestingKey>, ByRef<::System::Guid>)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::ReadHeaderData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetBitBuffer"))->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->this_arg;
    static auto* wordCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* transformOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectHeaderFlags")->this_arg;
    static auto* nestingRoot = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->this_arg;
    static auto* nestingKey = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectNestingKey")->this_arg;
    static auto* sceneGuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "ReadHeaderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, type, wordCount, transformOffset, flags, nestingRoot, nestingKey, sceneGuid});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::TrackChanges
// Il2CppName: TrackChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(int*, int*, int, int)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::TrackChanges)> {
  static const MethodInfo* get() {
    static auto* oldState = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* newState = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->byval_arg;
    static auto* words = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "TrackChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState, newState, words, tick});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_UseObjectInterest
// Il2CppName: get_UseObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::get_UseObjectInterest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "get_UseObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::UpdateRemotePrefabs
// Il2CppName: UpdateRemotePrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::UpdateRemotePrefabs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "UpdateRemotePrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::HasObjectInterest
// Il2CppName: HasObjectInterest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::PlayerRef, ::Fusion::NetworkId)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::HasObjectInterest)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "HasObjectInterest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, id});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnObjectDestroyed
// Il2CppName: OnObjectDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::NetworkId, ::Fusion::NetworkObjectDestroyFlags)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnObjectDestroyed)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkId")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectDestroyFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "OnObjectDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, flags});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::SendBegin
// Il2CppName: SendBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::SendBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "SendBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::SendEnd
// Il2CppName: SendEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::SendEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "SendEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnPacketLost
// Il2CppName: OnPacketLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnPacketLost)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "OnPacketLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnPacketDelivered
// Il2CppName: OnPacketDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)(::Fusion::Sockets::NetConnection*, ::Fusion::SimulationPacketEnvelope*)>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::OnPacketDelivered)> {
  static const MethodInfo* get() {
    static auto* c = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnection"))->byval_arg;
    static auto* envelope = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Fusion", "SimulationPacketEnvelope"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "OnPacketDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, envelope});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::StateReplicatorEventualConsistencyBase::AssertVerifyNothingIsPending
// Il2CppName: AssertVerifyNothingIsPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Simulation::StateReplicatorEventualConsistencyBase::*)()>(&Fusion::Simulation::StateReplicatorEventualConsistencyBase::AssertVerifyNothingIsPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::StateReplicatorEventualConsistencyBase*), "AssertVerifyNothingIsPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
