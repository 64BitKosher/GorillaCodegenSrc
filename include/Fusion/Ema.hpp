// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Ema
  struct Ema;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Ema, "Fusion", "Ema");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Ema
  // [TokenAttribute] Offset: FFFFFFFF
  struct Ema/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Ema::$_wnd$e__FixedBuffer
    struct $_wnd$e__FixedBuffer;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.Ema/<_wnd>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $_wnd$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Double FixedElementField
      // Size: 0x8
      // Offset: 0x0
      double FixedElementField;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: $_wnd$e__FixedBuffer
      constexpr $_wnd$e__FixedBuffer(double FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator double
      constexpr operator double() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Double FixedElementField
      [[deprecated("Use field access instead!")]] double& dyn_FixedElementField();
    }; // Fusion.Ema/<_wnd>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(Ema::$_wnd$e__FixedBuffer), 0 + sizeof(double)> __Fusion_Ema_$_wnd$e__FixedBufferSizeCheck;
    static_assert(sizeof(Ema::$_wnd$e__FixedBuffer) == 0x8);
    public:
    // private System.Int32 _cnt
    // Size: 0x4
    // Offset: 0x0
    int cnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cnt and: val
    char __padding0[0x4] = {};
    // private System.Double _val
    // Size: 0x8
    // Offset: 0x8
    double val;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _var
    // Size: 0x8
    // Offset: 0x10
    double var;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _lst
    // Size: 0x8
    // Offset: 0x18
    double lst;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Fusion.Ema/<_wnd>e__FixedBuffer _wnd
    // Size: 0x8
    // Offset: 0x20
    ::Fusion::Ema::$_wnd$e__FixedBuffer wnd;
    // Field size check
    static_assert(sizeof(::Fusion::Ema::$_wnd$e__FixedBuffer) == 0x8);
    public:
    // Creating value type constructor for type: Ema
    constexpr Ema(int cnt_ = {}, double val_ = {}, double var_ = {}, double lst_ = {}, ::Fusion::Ema::$_wnd$e__FixedBuffer wnd_ = {}) noexcept : cnt{cnt_}, val{val_}, var{var_}, lst{lst_}, wnd{wnd_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Int32 LENGTH
    static constexpr const int LENGTH = 64;
    // Get static field: static private System.Int32 LENGTH
    static int _get_LENGTH();
    // Set static field: static private System.Int32 LENGTH
    static void _set_LENGTH(int value);
    // Get instance field reference: private System.Int32 _cnt
    [[deprecated("Use field access instead!")]] int& dyn__cnt();
    // Get instance field reference: private System.Double _val
    [[deprecated("Use field access instead!")]] double& dyn__val();
    // Get instance field reference: private System.Double _var
    [[deprecated("Use field access instead!")]] double& dyn__var();
    // Get instance field reference: private System.Double _lst
    [[deprecated("Use field access instead!")]] double& dyn__lst();
    // Get instance field reference: private Fusion.Ema/<_wnd>e__FixedBuffer _wnd
    [[deprecated("Use field access instead!")]] ::Fusion::Ema::$_wnd$e__FixedBuffer& dyn__wnd();
    // public System.Boolean get_Full()
    // Offset: 0x2B487B4
    bool get_Full();
    // public System.Double get_Lst()
    // Offset: 0x2B487C4
    double get_Lst();
    // public System.Double get_Val()
    // Offset: 0x2B487CC
    double get_Val();
    // public System.Double get_Dev()
    // Offset: 0x2B487D4
    double get_Dev();
    // private System.Double GetVar()
    // Offset: 0x2B4886C
    double GetVar();
    // public System.Void Add(System.Double val)
    // Offset: 0x2B488F4
    void Add(double val);
  }; // Fusion.Ema
  #pragma pack(pop)
  static check_size<sizeof(Ema), 32 + sizeof(::Fusion::Ema::$_wnd$e__FixedBuffer)> __Fusion_EmaSizeCheck;
  static_assert(sizeof(Ema) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Ema::$_wnd$e__FixedBuffer, "Fusion", "Ema/<_wnd>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Ema::get_Full
// Il2CppName: get_Full
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::Ema::*)()>(&Fusion::Ema::get_Full)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "get_Full", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ema::get_Lst
// Il2CppName: get_Lst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Ema::*)()>(&Fusion::Ema::get_Lst)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "get_Lst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ema::get_Val
// Il2CppName: get_Val
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Ema::*)()>(&Fusion::Ema::get_Val)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "get_Val", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ema::get_Dev
// Il2CppName: get_Dev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Ema::*)()>(&Fusion::Ema::get_Dev)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "get_Dev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ema::GetVar
// Il2CppName: GetVar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::Ema::*)()>(&Fusion::Ema::GetVar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "GetVar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Ema::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::Ema::*)(double)>(&Fusion::Ema::Add)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Ema), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
