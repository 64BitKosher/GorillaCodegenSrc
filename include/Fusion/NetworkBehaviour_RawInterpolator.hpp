// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Fusion.NetworkArray`1
#include "Fusion/NetworkArray_1.hpp"
// Including type: Fusion.NetworkDictionary`2
#include "Fusion/NetworkDictionary_2.hpp"
// Including type: Fusion.NetworkLinkedList`1
#include "Fusion/NetworkLinkedList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkBehaviour::RawInterpolator, "Fusion", "NetworkBehaviour/RawInterpolator");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkBehaviour/RawInterpolator
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkBehaviour::RawInterpolator/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _offset
    // Size: 0x4
    // Offset: 0x0
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: offset and: behaviour
    char __padding0[0x4] = {};
    // private Fusion.NetworkBehaviour _behaviour
    // Size: 0x8
    // Offset: 0x8
    ::Fusion::NetworkBehaviour* behaviour;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkBehaviour*) == 0x8);
    public:
    // Creating value type constructor for type: RawInterpolator
    constexpr RawInterpolator(int offset_ = {}, ::Fusion::NetworkBehaviour* behaviour_ = {}) noexcept : offset{offset_}, behaviour{behaviour_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 _offset
    [[deprecated("Use field access instead!")]] int& dyn__offset();
    // Get instance field reference: private Fusion.NetworkBehaviour _behaviour
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkBehaviour*& dyn__behaviour();
    // public System.Int32 get_Offset()
    // Offset: 0x2B0C794
    int get_Offset();
    // public Fusion.NetworkBehaviour get_Behaviour()
    // Offset: 0x2B0C79C
    ::Fusion::NetworkBehaviour* get_Behaviour();
    // public System.Void .ctor(Fusion.NetworkBehaviour behaviour, System.Int32 offset)
    // Offset: 0x2B0C214
    RawInterpolator(::Fusion::NetworkBehaviour* behaviour, int offset);
    // public System.Boolean TryGetValues(out System.Void* from, out System.Void* to, out System.Single alpha, System.Nullable`1<System.Boolean> force)
    // Offset: 0x2B0C7A4
    bool TryGetValues(ByRef<void*> from, ByRef<void*> to, ByRef<float> alpha, ::System::Nullable_1<bool> force);
    // public System.Boolean TryGetStruct(out T from, out T to, out System.Single alpha, System.Nullable`1<System.Boolean> force)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetStruct(ByRef<T> from, ByRef<T> to, ByRef<float> alpha, ::System::Nullable_1<bool> force) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkBehaviour::RawInterpolator::TryGetStruct");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetStruct", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>(), ::il2cpp_utils::ExtractIndependentType<T&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractType(force)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(from), byref(to), byref(alpha), force);
    }
    // public System.Boolean TryGetArray(Fusion.NetworkArray`1<T> base, out Fusion.NetworkArray`1<T> from, out Fusion.NetworkArray`1<T> to, out System.Single alpha, System.Nullable`1<System.Boolean> force)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetArray(::Fusion::NetworkArray_1<T> base, ByRef<::Fusion::NetworkArray_1<T>> from, ByRef<::Fusion::NetworkArray_1<T>> to, ByRef<float> alpha, ::System::Nullable_1<bool> force) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkBehaviour::RawInterpolator::TryGetArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(base), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkArray_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkArray_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractType(force)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, base, byref(from), byref(to), byref(alpha), force);
    }
    // public System.Boolean TryGetDictionary(Fusion.NetworkDictionary`2<K,V> base, out Fusion.NetworkDictionary`2<K,V> from, out Fusion.NetworkDictionary`2<K,V> to, out System.Single alpha, System.Nullable`1<System.Boolean> force)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class K, class V>
    bool TryGetDictionary(::Fusion::NetworkDictionary_2<K, V> base, ByRef<::Fusion::NetworkDictionary_2<K, V>> from, ByRef<::Fusion::NetworkDictionary_2<K, V>> to, ByRef<float> alpha, ::System::Nullable_1<bool> force) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkBehaviour::RawInterpolator::TryGetDictionary");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetDictionary", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<K>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(base), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkDictionary_2<K, V>&>(), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkDictionary_2<K, V>&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractType(force)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<K>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<V>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, base, byref(from), byref(to), byref(alpha), force);
    }
    // public System.Boolean TryGetLinkedList(Fusion.NetworkLinkedList`1<T> base, out Fusion.NetworkLinkedList`1<T> from, out Fusion.NetworkLinkedList`1<T> to, out System.Single alpha, System.Nullable`1<System.Boolean> force)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetLinkedList(::Fusion::NetworkLinkedList_1<T> base, ByRef<::Fusion::NetworkLinkedList_1<T>> from, ByRef<::Fusion::NetworkLinkedList_1<T>> to, ByRef<float> alpha, ::System::Nullable_1<bool> force) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkBehaviour::RawInterpolator::TryGetLinkedList");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetLinkedList", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(base), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkLinkedList_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<::Fusion::NetworkLinkedList_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractType(force)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, base, byref(from), byref(to), byref(alpha), force);
    }
  }; // Fusion.NetworkBehaviour/RawInterpolator
  #pragma pack(pop)
  static check_size<sizeof(NetworkBehaviour::RawInterpolator), 8 + sizeof(::Fusion::NetworkBehaviour*)> __Fusion_NetworkBehaviour_RawInterpolatorSizeCheck;
  static_assert(sizeof(NetworkBehaviour::RawInterpolator) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::get_Offset
// Il2CppName: get_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkBehaviour::RawInterpolator::*)()>(&Fusion::NetworkBehaviour::RawInterpolator::get_Offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviour::RawInterpolator), "get_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::get_Behaviour
// Il2CppName: get_Behaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkBehaviour* (Fusion::NetworkBehaviour::RawInterpolator::*)()>(&Fusion::NetworkBehaviour::RawInterpolator::get_Behaviour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviour::RawInterpolator), "get_Behaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::RawInterpolator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::TryGetValues
// Il2CppName: TryGetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkBehaviour::RawInterpolator::*)(ByRef<void*>, ByRef<void*>, ByRef<float>, ::System::Nullable_1<bool>)>(&Fusion::NetworkBehaviour::RawInterpolator::TryGetValues)> {
  static const MethodInfo* get() {
    static auto* from = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->this_arg;
    static auto* to = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->this_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* force = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkBehaviour::RawInterpolator), "TryGetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, alpha, force});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::TryGetStruct
// Il2CppName: TryGetStruct
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::TryGetArray
// Il2CppName: TryGetArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::TryGetDictionary
// Il2CppName: TryGetDictionary
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::NetworkBehaviour::RawInterpolator::TryGetLinkedList
// Il2CppName: TryGetLinkedList
// Cannot write MetadataGetter for generic methods!
