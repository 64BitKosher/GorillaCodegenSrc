// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.Simulation/Statistics
#include "Fusion/Simulation_Statistics.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.ISampleData
#include "Fusion/ISampleData.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Simulation::Statistics::FloatSample, "Fusion", "Simulation/Statistics/FloatSample");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.Simulation/Statistics/FloatSample
  // [TokenAttribute] Offset: FFFFFFFF
  struct Simulation::Statistics::FloatSample/*, public ::System::ValueType, public ::Fusion::ISampleData*/ {
    public:
    public:
    // private System.Single _value
    // Size: 0x4
    // Offset: 0x0
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: FloatSample
    constexpr FloatSample(float value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::ISampleData
    operator ::Fusion::ISampleData() noexcept {
      return *reinterpret_cast<::Fusion::ISampleData*>(this);
    }
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return value;
    }
    // Get instance field reference: private System.Single _value
    [[deprecated("Use field access instead!")]] float& dyn__value();
    // public System.Int32 get_TickValue()
    // Offset: 0x2B81A84
    int get_TickValue();
    // public System.Single get_TimeValue()
    // Offset: 0x2B81A8C
    float get_TimeValue();
    // public System.Single get_FloatValue()
    // Offset: 0x2B81A94
    float get_FloatValue();
    // static public System.Single op_Explicit(Fusion.Simulation/Statistics/FloatSample sample)
    // Offset: 0x2B81A9C
    // ABORTED: conflicts with another method.  explicit operator float();
  }; // Fusion.Simulation/Statistics/FloatSample
  #pragma pack(pop)
  static check_size<sizeof(Simulation::Statistics::FloatSample), 0 + sizeof(float)> __Fusion_Simulation_Statistics_FloatSampleSizeCheck;
  static_assert(sizeof(Simulation::Statistics::FloatSample) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::FloatSample::get_TickValue
// Il2CppName: get_TickValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::Simulation::Statistics::FloatSample::*)()>(&Fusion::Simulation::Statistics::FloatSample::get_TickValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics::FloatSample), "get_TickValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::FloatSample::get_TimeValue
// Il2CppName: get_TimeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Simulation::Statistics::FloatSample::*)()>(&Fusion::Simulation::Statistics::FloatSample::get_TimeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics::FloatSample), "get_TimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::FloatSample::get_FloatValue
// Il2CppName: get_FloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Simulation::Statistics::FloatSample::*)()>(&Fusion::Simulation::Statistics::FloatSample::get_FloatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Simulation::Statistics::FloatSample), "get_FloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Simulation::Statistics::FloatSample::operator float
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
