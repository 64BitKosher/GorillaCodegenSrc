// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkObjectRefMapPtr
#include "Fusion/NetworkObjectRefMapPtr.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.NetworkId
#include "Fusion/NetworkId.hpp"
// Including type: Fusion.Ptr
#include "Fusion/Ptr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkObjectRefMapPtr::Entry, "Fusion", "NetworkObjectRefMapPtr/Entry");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkObjectRefMapPtr/Entry
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetworkObjectRefMapPtr::Entry/*, public ::System::ValueType*/ {
    public:
    public:
    // public Fusion.NetworkId Id
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::NetworkId Id;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkId) == 0x4);
    // public Fusion.Ptr Ptr
    // Size: 0x4
    // Offset: 0x4
    ::Fusion::Ptr Ptr;
    // Field size check
    static_assert(sizeof(::Fusion::Ptr) == 0x4);
    // public System.UInt16 Next
    // Size: 0x2
    // Offset: 0x8
    uint16_t Next;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: Next and: CheckedTick
    char __padding2[0x2] = {};
    // public System.Int32 CheckedTick
    // Size: 0x4
    // Offset: 0xC
    int CheckedTick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ChangedTick
    // Size: 0x4
    // Offset: 0x10
    int ChangedTick;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Entry
    constexpr Entry(::Fusion::NetworkId Id_ = {}, ::Fusion::Ptr Ptr_ = {}, uint16_t Next_ = {}, int CheckedTick_ = {}, int ChangedTick_ = {}) noexcept : Id{Id_}, Ptr{Ptr_}, Next{Next_}, CheckedTick{CheckedTick_}, ChangedTick{ChangedTick_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 SIZE
    static constexpr const int SIZE = 20;
    // Get static field: static public System.Int32 SIZE
    static int _get_SIZE();
    // Set static field: static public System.Int32 SIZE
    static void _set_SIZE(int value);
    // Get instance field reference: public Fusion.NetworkId Id
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkId& dyn_Id();
    // Get instance field reference: public Fusion.Ptr Ptr
    [[deprecated("Use field access instead!")]] ::Fusion::Ptr& dyn_Ptr();
    // Get instance field reference: public System.UInt16 Next
    [[deprecated("Use field access instead!")]] uint16_t& dyn_Next();
    // Get instance field reference: public System.Int32 CheckedTick
    [[deprecated("Use field access instead!")]] int& dyn_CheckedTick();
    // Get instance field reference: public System.Int32 ChangedTick
    [[deprecated("Use field access instead!")]] int& dyn_ChangedTick();
  }; // Fusion.NetworkObjectRefMapPtr/Entry
  #pragma pack(pop)
  static check_size<sizeof(NetworkObjectRefMapPtr::Entry), 16 + sizeof(int)> __Fusion_NetworkObjectRefMapPtr_EntrySizeCheck;
  static_assert(sizeof(NetworkObjectRefMapPtr::Entry) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
