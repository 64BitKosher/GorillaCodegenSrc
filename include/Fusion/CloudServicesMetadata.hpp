// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkRunnerInitializeArgs
#include "Fusion/NetworkRunnerInitializeArgs.hpp"
// Including type: Fusion.NATPunchStage
#include "Fusion/NATPunchStage.hpp"
// Including type: Fusion.JoinProcessStage
#include "Fusion/JoinProcessStage.hpp"
// Including type: Fusion.Protocol.ProtocolMessageVersion
#include "Fusion/Protocol/ProtocolMessageVersion.hpp"
// Including type: Fusion.ScheduledRequests
#include "Fusion/ScheduledRequests.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion::Protocol
namespace Fusion::Protocol {
  // Forward declaring type: ReflexiveInfo
  class ReflexiveInfo;
  // Forward declaring type: Disconnect
  class Disconnect;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Fusion::Sockets::Stun
namespace Fusion::Sockets::Stun {
  // Forward declaring type: StunResult
  class StunResult;
}
// Forward declaring namespace: Fusion::Photon::Realtime
namespace Fusion::Photon::Realtime {
  // Forward declaring type: TypedLobby
  class TypedLobby;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: CloudServicesMetadata
  class CloudServicesMetadata;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::CloudServicesMetadata);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CloudServicesMetadata*, "Fusion", "CloudServicesMetadata");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // Autogenerated type: Fusion.CloudServicesMetadata
  // [TokenAttribute] Offset: FFFFFFFF
  class CloudServicesMetadata : public ::Il2CppObject {
    public:
    public:
    // private Fusion.NetworkRunnerInitializeArgs <RunnerInitializeArgs>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Fusion::NetworkRunnerInitializeArgs RunnerInitializeArgs;
    // private Fusion.NATPunchStage <CurrentPunchStage>k__BackingField
    // Size: 0x4
    // Offset: 0xC8
    ::Fusion::NATPunchStage CurrentPunchStage;
    // Field size check
    static_assert(sizeof(::Fusion::NATPunchStage) == 0x4);
    // private Fusion.JoinProcessStage <CurrentJoinStage>k__BackingField
    // Size: 0x4
    // Offset: 0xCC
    ::Fusion::JoinProcessStage CurrentJoinStage;
    // Field size check
    static_assert(sizeof(::Fusion::JoinProcessStage) == 0x4);
    // private Fusion.Protocol.ProtocolMessageVersion <CurrentProtocolMessageVersion>k__BackingField
    // Size: 0x1
    // Offset: 0xD0
    ::Fusion::Protocol::ProtocolMessageVersion CurrentProtocolMessageVersion;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::ProtocolMessageVersion) == 0x1);
    // private Fusion.Protocol.ReflexiveInfo <RemoteReflexiveInfo>k__BackingField
    // Size: 0x8
    // Offset: 0xD8
    ::Fusion::Protocol::ReflexiveInfo* RemoteReflexiveInfo;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::ReflexiveInfo*) == 0x8);
    // private System.Byte[] <UniqueId>k__BackingField
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<uint8_t> UniqueId;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public Fusion.ScheduledRequests ScheduledRequests
    // Size: 0x4
    // Offset: 0xE8
    ::Fusion::ScheduledRequests ScheduledRequests;
    // Field size check
    static_assert(sizeof(::Fusion::ScheduledRequests) == 0x4);
    // public Fusion.Protocol.Disconnect LastDisconnectMsg
    // Size: 0x8
    // Offset: 0xF0
    ::Fusion::Protocol::Disconnect* LastDisconnectMsg;
    // Field size check
    static_assert(sizeof(::Fusion::Protocol::Disconnect*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int64,Fusion.Protocol.ReflexiveInfo> UniqueIdToReflexiveInfoTable
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::Dictionary_2<int64_t, ::Fusion::Protocol::ReflexiveInfo*>* UniqueIdToReflexiveInfoTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int64_t, ::Fusion::Protocol::ReflexiveInfo*>*) == 0x8);
    // private Fusion.Sockets.Stun.StunResult _localStunResult
    // Size: 0x8
    // Offset: 0x100
    ::Fusion::Sockets::Stun::StunResult* localStunResult;
    // Field size check
    static_assert(sizeof(::Fusion::Sockets::Stun::StunResult*) == 0x8);
    public:
    // static field const value: static public System.Int32 JOIN_PM_TIMEOUT
    static constexpr const int JOIN_PM_TIMEOUT = 15000;
    // Get static field: static public System.Int32 JOIN_PM_TIMEOUT
    static int _get_JOIN_PM_TIMEOUT();
    // Set static field: static public System.Int32 JOIN_PM_TIMEOUT
    static void _set_JOIN_PM_TIMEOUT(int value);
    // Get static field: static public readonly Fusion.Photon.Realtime.TypedLobby LobbyClientServer
    static ::Fusion::Photon::Realtime::TypedLobby* _get_LobbyClientServer();
    // Set static field: static public readonly Fusion.Photon.Realtime.TypedLobby LobbyClientServer
    static void _set_LobbyClientServer(::Fusion::Photon::Realtime::TypedLobby* value);
    // Get static field: static public readonly Fusion.Photon.Realtime.TypedLobby LobbyShared
    static ::Fusion::Photon::Realtime::TypedLobby* _get_LobbyShared();
    // Set static field: static public readonly Fusion.Photon.Realtime.TypedLobby LobbyShared
    static void _set_LobbyShared(::Fusion::Photon::Realtime::TypedLobby* value);
    // Get instance field reference: private Fusion.NetworkRunnerInitializeArgs <RunnerInitializeArgs>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunnerInitializeArgs& dyn_$RunnerInitializeArgs$k__BackingField();
    // Get instance field reference: private Fusion.NATPunchStage <CurrentPunchStage>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::NATPunchStage& dyn_$CurrentPunchStage$k__BackingField();
    // Get instance field reference: private Fusion.JoinProcessStage <CurrentJoinStage>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::JoinProcessStage& dyn_$CurrentJoinStage$k__BackingField();
    // Get instance field reference: private Fusion.Protocol.ProtocolMessageVersion <CurrentProtocolMessageVersion>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::ProtocolMessageVersion& dyn_$CurrentProtocolMessageVersion$k__BackingField();
    // Get instance field reference: private Fusion.Protocol.ReflexiveInfo <RemoteReflexiveInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::ReflexiveInfo*& dyn_$RemoteReflexiveInfo$k__BackingField();
    // Get instance field reference: private System.Byte[] <UniqueId>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_$UniqueId$k__BackingField();
    // Get instance field reference: public Fusion.ScheduledRequests ScheduledRequests
    [[deprecated("Use field access instead!")]] ::Fusion::ScheduledRequests& dyn_ScheduledRequests();
    // Get instance field reference: public Fusion.Protocol.Disconnect LastDisconnectMsg
    [[deprecated("Use field access instead!")]] ::Fusion::Protocol::Disconnect*& dyn_LastDisconnectMsg();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int64,Fusion.Protocol.ReflexiveInfo> UniqueIdToReflexiveInfoTable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int64_t, ::Fusion::Protocol::ReflexiveInfo*>*& dyn_UniqueIdToReflexiveInfoTable();
    // Get instance field reference: private Fusion.Sockets.Stun.StunResult _localStunResult
    [[deprecated("Use field access instead!")]] ::Fusion::Sockets::Stun::StunResult*& dyn__localStunResult();
    // public Fusion.NetworkRunnerInitializeArgs get_RunnerInitializeArgs()
    // Offset: 0x2B06158
    ::Fusion::NetworkRunnerInitializeArgs get_RunnerInitializeArgs();
    // public System.Void set_RunnerInitializeArgs(Fusion.NetworkRunnerInitializeArgs value)
    // Offset: 0x2B06168
    void set_RunnerInitializeArgs(::Fusion::NetworkRunnerInitializeArgs value);
    // public Fusion.NATPunchStage get_CurrentPunchStage()
    // Offset: 0x2B0618C
    ::Fusion::NATPunchStage get_CurrentPunchStage();
    // public System.Void set_CurrentPunchStage(Fusion.NATPunchStage value)
    // Offset: 0x2B06194
    void set_CurrentPunchStage(::Fusion::NATPunchStage value);
    // public Fusion.JoinProcessStage get_CurrentJoinStage()
    // Offset: 0x2B0619C
    ::Fusion::JoinProcessStage get_CurrentJoinStage();
    // public System.Void set_CurrentJoinStage(Fusion.JoinProcessStage value)
    // Offset: 0x2B061A4
    void set_CurrentJoinStage(::Fusion::JoinProcessStage value);
    // public Fusion.Protocol.ProtocolMessageVersion get_CurrentProtocolMessageVersion()
    // Offset: 0x2B061AC
    ::Fusion::Protocol::ProtocolMessageVersion get_CurrentProtocolMessageVersion();
    // public System.Void set_CurrentProtocolMessageVersion(Fusion.Protocol.ProtocolMessageVersion value)
    // Offset: 0x2B061B4
    void set_CurrentProtocolMessageVersion(::Fusion::Protocol::ProtocolMessageVersion value);
    // public Fusion.Protocol.ReflexiveInfo get_RemoteReflexiveInfo()
    // Offset: 0x2B061BC
    ::Fusion::Protocol::ReflexiveInfo* get_RemoteReflexiveInfo();
    // public System.Void set_RemoteReflexiveInfo(Fusion.Protocol.ReflexiveInfo value)
    // Offset: 0x2B061C4
    void set_RemoteReflexiveInfo(::Fusion::Protocol::ReflexiveInfo* value);
    // public Fusion.Sockets.Stun.StunResult get_LocalReflexiveInfo()
    // Offset: 0x2B061CC
    ::Fusion::Sockets::Stun::StunResult* get_LocalReflexiveInfo();
    // public System.Void set_LocalReflexiveInfo(Fusion.Sockets.Stun.StunResult value)
    // Offset: 0x2B04CF8
    void set_LocalReflexiveInfo(::Fusion::Sockets::Stun::StunResult* value);
    // public System.Byte[] get_UniqueId()
    // Offset: 0x2B061D4
    ::ArrayW<uint8_t> get_UniqueId();
    // public System.Void set_UniqueId(System.Byte[] value)
    // Offset: 0x2B061DC
    void set_UniqueId(::ArrayW<uint8_t> value);
    // public System.Void .ctor()
    // Offset: 0x2B00DF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CloudServicesMetadata* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CloudServicesMetadata::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CloudServicesMetadata*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2B061E4
    static void _cctor();
  }; // Fusion.CloudServicesMetadata
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_RunnerInitializeArgs
// Il2CppName: get_RunnerInitializeArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkRunnerInitializeArgs (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_RunnerInitializeArgs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_RunnerInitializeArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_RunnerInitializeArgs
// Il2CppName: set_RunnerInitializeArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::NetworkRunnerInitializeArgs)>(&Fusion::CloudServicesMetadata::set_RunnerInitializeArgs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerInitializeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_RunnerInitializeArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_CurrentPunchStage
// Il2CppName: get_CurrentPunchStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NATPunchStage (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_CurrentPunchStage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_CurrentPunchStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_CurrentPunchStage
// Il2CppName: set_CurrentPunchStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::NATPunchStage)>(&Fusion::CloudServicesMetadata::set_CurrentPunchStage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "NATPunchStage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_CurrentPunchStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_CurrentJoinStage
// Il2CppName: get_CurrentJoinStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::JoinProcessStage (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_CurrentJoinStage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_CurrentJoinStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_CurrentJoinStage
// Il2CppName: set_CurrentJoinStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::JoinProcessStage)>(&Fusion::CloudServicesMetadata::set_CurrentJoinStage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "JoinProcessStage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_CurrentJoinStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_CurrentProtocolMessageVersion
// Il2CppName: get_CurrentProtocolMessageVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Protocol::ProtocolMessageVersion (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_CurrentProtocolMessageVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_CurrentProtocolMessageVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_CurrentProtocolMessageVersion
// Il2CppName: set_CurrentProtocolMessageVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::Protocol::ProtocolMessageVersion)>(&Fusion::CloudServicesMetadata::set_CurrentProtocolMessageVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "ProtocolMessageVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_CurrentProtocolMessageVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_RemoteReflexiveInfo
// Il2CppName: get_RemoteReflexiveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Protocol::ReflexiveInfo* (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_RemoteReflexiveInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_RemoteReflexiveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_RemoteReflexiveInfo
// Il2CppName: set_RemoteReflexiveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::Protocol::ReflexiveInfo*)>(&Fusion::CloudServicesMetadata::set_RemoteReflexiveInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Protocol", "ReflexiveInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_RemoteReflexiveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_LocalReflexiveInfo
// Il2CppName: get_LocalReflexiveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Sockets::Stun::StunResult* (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_LocalReflexiveInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_LocalReflexiveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_LocalReflexiveInfo
// Il2CppName: set_LocalReflexiveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::Fusion::Sockets::Stun::StunResult*)>(&Fusion::CloudServicesMetadata::set_LocalReflexiveInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion.Sockets.Stun", "StunResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_LocalReflexiveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::get_UniqueId
// Il2CppName: get_UniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Fusion::CloudServicesMetadata::*)()>(&Fusion::CloudServicesMetadata::get_UniqueId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "get_UniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::set_UniqueId
// Il2CppName: set_UniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::CloudServicesMetadata::*)(::ArrayW<uint8_t>)>(&Fusion::CloudServicesMetadata::set_UniqueId)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), "set_UniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::CloudServicesMetadata::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Fusion::CloudServicesMetadata::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::CloudServicesMetadata*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
