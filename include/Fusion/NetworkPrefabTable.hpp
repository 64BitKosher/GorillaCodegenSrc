// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkObjectGuid
#include "Fusion/NetworkObjectGuid.hpp"
// Including type: Fusion.NetworkPrefabId
#include "Fusion/NetworkPrefabId.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: INetworkPrefabSource
  class INetworkPrefabSource;
  // Forward declaring type: NetworkObject
  class NetworkObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkPrefabTable
  class NetworkPrefabTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::NetworkPrefabTable);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::NetworkPrefabTable*, "Fusion", "NetworkPrefabTable");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.NetworkPrefabTable
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkPrefabTable : public ::Il2CppObject {
    public:
    // Nested type: ::Fusion::NetworkPrefabTable::PrefabEntry
    class PrefabEntry;
    // Nested type: ::Fusion::NetworkPrefabTable::$GetEntries$d__9
    class $GetEntries$d__9;
    public:
    // private System.Collections.Generic.Dictionary`2<Fusion.NetworkObjectGuid,Fusion.NetworkPrefabId> _guidToId
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkPrefabId>* guidToId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkPrefabId>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Fusion.NetworkPrefabId,Fusion.NetworkPrefabTable/PrefabEntry> _typeToPrefab
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkPrefabId, ::Fusion::NetworkPrefabTable::PrefabEntry*>* typeToPrefab;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Fusion::NetworkPrefabId, ::Fusion::NetworkPrefabTable::PrefabEntry*>*) == 0x8);
    // private Fusion.NetworkPrefabId _lastId
    // Size: 0x4
    // Offset: 0x20
    ::Fusion::NetworkPrefabId lastId;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkPrefabId) == 0x4);
    // Padding between fields: lastId and: beingLoadedState
    char __padding2[0x4] = {};
    // private System.Object _beingLoadedState
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* beingLoadedState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.NetworkObjectGuid,Fusion.NetworkPrefabId> _guidToId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkObjectGuid, ::Fusion::NetworkPrefabId>*& dyn__guidToId();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Fusion.NetworkPrefabId,Fusion.NetworkPrefabTable/PrefabEntry> _typeToPrefab
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Fusion::NetworkPrefabId, ::Fusion::NetworkPrefabTable::PrefabEntry*>*& dyn__typeToPrefab();
    // Get instance field reference: private Fusion.NetworkPrefabId _lastId
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkPrefabId& dyn__lastId();
    // Get instance field reference: private System.Object _beingLoadedState
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__beingLoadedState();
    // public System.Int32 get_Count()
    // Offset: 0x2B4F7D0
    int get_Count();
    // public Fusion.NetworkPrefabId get_LastId()
    // Offset: 0x2B4F820
    ::Fusion::NetworkPrefabId get_LastId();
    // public System.Collections.Generic.IEnumerable`1<System.ValueTuple`2<Fusion.NetworkPrefabId,Fusion.INetworkPrefabSource>> GetEntries()
    // Offset: 0x2B4F828
    ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Fusion::NetworkPrefabId, ::Fusion::INetworkPrefabSource*>>* GetEntries();
    // System.Boolean TryGetPrefabEntry(Fusion.NetworkObjectGuid guid, out Fusion.INetworkPrefabSource prefab)
    // Offset: 0x2B4F8D8
    bool TryGetPrefabEntry(::Fusion::NetworkObjectGuid guid, ByRef<::Fusion::INetworkPrefabSource*> prefab);
    // public System.Boolean TryGetPrefab(Fusion.NetworkPrefabId typeId, out Fusion.NetworkObject obj)
    // Offset: 0x2B4DA34
    bool TryGetPrefab(::Fusion::NetworkPrefabId typeId, ByRef<::Fusion::NetworkObject*> obj);
    // System.Void Clear()
    // Offset: 0x2B4FA28
    void Clear();
    // public System.Boolean Unload(Fusion.NetworkPrefabId id)
    // Offset: 0x2B4FC08
    bool Unload(::Fusion::NetworkPrefabId id);
    // public System.Void UnloadAll()
    // Offset: 0x2B4FAAC
    void UnloadAll();
    // public System.Boolean TryGetId(Fusion.NetworkObjectGuid guid, out Fusion.NetworkPrefabId id)
    // Offset: 0x2B4F9A8
    bool TryGetId(::Fusion::NetworkObjectGuid guid, ByRef<::Fusion::NetworkPrefabId> id);
    // public System.Boolean TryAdd(Fusion.NetworkObjectGuid guid, Fusion.INetworkPrefabSource source, out Fusion.NetworkPrefabId id)
    // Offset: 0x2B4FD58
    bool TryAdd(::Fusion::NetworkObjectGuid guid, ::Fusion::INetworkPrefabSource* source, ByRef<::Fusion::NetworkPrefabId> id);
    // private Fusion.NetworkPrefabId AddInternal(Fusion.NetworkObjectGuid guid, Fusion.INetworkPrefabSource prefab)
    // Offset: 0x2B4FF00
    ::Fusion::NetworkPrefabId AddInternal(::Fusion::NetworkObjectGuid guid, ::Fusion::INetworkPrefabSource* prefab);
    // static private System.Boolean UnloadEntry(Fusion.NetworkPrefabTable/PrefabEntry entry)
    // Offset: 0x2B4FC8C
    static bool UnloadEntry(::Fusion::NetworkPrefabTable::PrefabEntry* entry);
    // public System.Void .ctor()
    // Offset: 0x2B50004
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPrefabTable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPrefabTable*, creationType>()));
    }
  }; // Fusion.NetworkPrefabTable
  #pragma pack(pop)
  static check_size<sizeof(NetworkPrefabTable), 40 + sizeof(::Il2CppObject*)> __Fusion_NetworkPrefabTableSizeCheck;
  static_assert(sizeof(NetworkPrefabTable) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::NetworkPrefabTable::*)()>(&Fusion::NetworkPrefabTable::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::get_LastId
// Il2CppName: get_LastId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkPrefabId (Fusion::NetworkPrefabTable::*)()>(&Fusion::NetworkPrefabTable::get_LastId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "get_LastId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::GetEntries
// Il2CppName: GetEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Fusion::NetworkPrefabId, ::Fusion::INetworkPrefabSource*>>* (Fusion::NetworkPrefabTable::*)()>(&Fusion::NetworkPrefabTable::GetEntries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "GetEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::TryGetPrefabEntry
// Il2CppName: TryGetPrefabEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkObjectGuid, ByRef<::Fusion::INetworkPrefabSource*>)>(&Fusion::NetworkPrefabTable::TryGetPrefabEntry)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectGuid")->byval_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("Fusion", "INetworkPrefabSource")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "TryGetPrefabEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, prefab});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::TryGetPrefab
// Il2CppName: TryGetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkPrefabId, ByRef<::Fusion::NetworkObject*>)>(&Fusion::NetworkPrefabTable::TryGetPrefab)> {
  static const MethodInfo* get() {
    static auto* typeId = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "TryGetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeId, obj});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabTable::*)()>(&Fusion::NetworkPrefabTable::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkPrefabId)>(&Fusion::NetworkPrefabTable::Unload)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::UnloadAll
// Il2CppName: UnloadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::NetworkPrefabTable::*)()>(&Fusion::NetworkPrefabTable::UnloadAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "UnloadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::TryGetId
// Il2CppName: TryGetId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkObjectGuid, ByRef<::Fusion::NetworkPrefabId>)>(&Fusion::NetworkPrefabTable::TryGetId)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectGuid")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "TryGetId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::TryAdd
// Il2CppName: TryAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkObjectGuid, ::Fusion::INetworkPrefabSource*, ByRef<::Fusion::NetworkPrefabId>)>(&Fusion::NetworkPrefabTable::TryAdd)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectGuid")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("Fusion", "INetworkPrefabSource")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabId")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "TryAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, source, id});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::AddInternal
// Il2CppName: AddInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkPrefabId (Fusion::NetworkPrefabTable::*)(::Fusion::NetworkObjectGuid, ::Fusion::INetworkPrefabSource*)>(&Fusion::NetworkPrefabTable::AddInternal)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObjectGuid")->byval_arg;
    static auto* prefab = &::il2cpp_utils::GetClassFromName("Fusion", "INetworkPrefabSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "AddInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, prefab});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::UnloadEntry
// Il2CppName: UnloadEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Fusion::NetworkPrefabTable::PrefabEntry*)>(&Fusion::NetworkPrefabTable::UnloadEntry)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabTable/PrefabEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::NetworkPrefabTable*), "UnloadEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Fusion::NetworkPrefabTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
