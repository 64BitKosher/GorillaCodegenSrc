// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Completed includes
// Type namespace: Fusion.CodeGen
namespace Fusion::CodeGen {
  // Forward declaring type: FixedStorage@17
  struct FixedStorage@17;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CodeGen::FixedStorage@17, "Fusion.CodeGen", "FixedStorage@17");
// Type namespace: Fusion.CodeGen
namespace Fusion::CodeGen {
  // Size: 0x44
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.CodeGen.FixedStorage@17
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  struct FixedStorage@17/*, public ::System::ValueType, public ::Fusion::INetworkStruct*/ {
    public:
    // Nested type: ::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer
    struct $Data$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Fusion.CodeGen.FixedStorage@17/<Data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $Data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Int32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      int FixedElementField;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: $Data$e__FixedBuffer
      constexpr $Data$e__FixedBuffer(int FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: private System.Int32 FixedElementField
      [[deprecated("Use field access instead!")]] int& dyn_FixedElementField();
    }; // Fusion.CodeGen.FixedStorage@17/<Data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(FixedStorage@17::$Data$e__FixedBuffer), 0 + sizeof(int)> __Fusion_CodeGen_FixedStorage@17_$Data$e__FixedBufferSizeCheck;
    static_assert(sizeof(FixedStorage@17::$Data$e__FixedBuffer) == 0x4);
    public:
    // public Fusion.CodeGen.FixedStorage@17/<Data>e__FixedBuffer Data
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer Data;
    // Field size check
    static_assert(sizeof(::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer) == 0x4);
    // private System.Int32 _1
    // Size: 0x4
    // Offset: 0x4
    int _1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _2
    // Size: 0x4
    // Offset: 0x8
    int _2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _3
    // Size: 0x4
    // Offset: 0xC
    int _3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _4
    // Size: 0x4
    // Offset: 0x10
    int _4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _5
    // Size: 0x4
    // Offset: 0x14
    int _5;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _6
    // Size: 0x4
    // Offset: 0x18
    int _6;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _7
    // Size: 0x4
    // Offset: 0x1C
    int _7;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _8
    // Size: 0x4
    // Offset: 0x20
    int _8;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _9
    // Size: 0x4
    // Offset: 0x24
    int _9;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _10
    // Size: 0x4
    // Offset: 0x28
    int _10;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _11
    // Size: 0x4
    // Offset: 0x2C
    int _11;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _12
    // Size: 0x4
    // Offset: 0x30
    int _12;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _13
    // Size: 0x4
    // Offset: 0x34
    int _13;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _14
    // Size: 0x4
    // Offset: 0x38
    int _14;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _15
    // Size: 0x4
    // Offset: 0x3C
    int _15;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _16
    // Size: 0x4
    // Offset: 0x40
    int _16;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FixedStorage@17
    constexpr FixedStorage@17(::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer Data_ = {}, int _1_ = {}, int _2_ = {}, int _3_ = {}, int _4_ = {}, int _5_ = {}, int _6_ = {}, int _7_ = {}, int _8_ = {}, int _9_ = {}, int _10_ = {}, int _11_ = {}, int _12_ = {}, int _13_ = {}, int _14_ = {}, int _15_ = {}, int _16_ = {}) noexcept : Data{Data_}, _1{_1_}, _2{_2_}, _3{_3_}, _4{_4_}, _5{_5_}, _6{_6_}, _7{_7_}, _8{_8_}, _9{_9_}, _10{_10_}, _11{_11_}, _12{_12_}, _13{_13_}, _14{_14_}, _15{_15_}, _16{_16_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Get instance field reference: public Fusion.CodeGen.FixedStorage@17/<Data>e__FixedBuffer Data
    [[deprecated("Use field access instead!")]] ::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer& dyn_Data();
    // Get instance field reference: private System.Int32 _1
    [[deprecated("Use field access instead!")]] int& dyn__1();
    // Get instance field reference: private System.Int32 _2
    [[deprecated("Use field access instead!")]] int& dyn__2();
    // Get instance field reference: private System.Int32 _3
    [[deprecated("Use field access instead!")]] int& dyn__3();
    // Get instance field reference: private System.Int32 _4
    [[deprecated("Use field access instead!")]] int& dyn__4();
    // Get instance field reference: private System.Int32 _5
    [[deprecated("Use field access instead!")]] int& dyn__5();
    // Get instance field reference: private System.Int32 _6
    [[deprecated("Use field access instead!")]] int& dyn__6();
    // Get instance field reference: private System.Int32 _7
    [[deprecated("Use field access instead!")]] int& dyn__7();
    // Get instance field reference: private System.Int32 _8
    [[deprecated("Use field access instead!")]] int& dyn__8();
    // Get instance field reference: private System.Int32 _9
    [[deprecated("Use field access instead!")]] int& dyn__9();
    // Get instance field reference: private System.Int32 _10
    [[deprecated("Use field access instead!")]] int& dyn__10();
    // Get instance field reference: private System.Int32 _11
    [[deprecated("Use field access instead!")]] int& dyn__11();
    // Get instance field reference: private System.Int32 _12
    [[deprecated("Use field access instead!")]] int& dyn__12();
    // Get instance field reference: private System.Int32 _13
    [[deprecated("Use field access instead!")]] int& dyn__13();
    // Get instance field reference: private System.Int32 _14
    [[deprecated("Use field access instead!")]] int& dyn__14();
    // Get instance field reference: private System.Int32 _15
    [[deprecated("Use field access instead!")]] int& dyn__15();
    // Get instance field reference: private System.Int32 _16
    [[deprecated("Use field access instead!")]] int& dyn__16();
  }; // Fusion.CodeGen.FixedStorage@17
  #pragma pack(pop)
  static check_size<sizeof(FixedStorage@17), 64 + sizeof(int)> __Fusion_CodeGen_FixedStorage@17SizeCheck;
  static_assert(sizeof(FixedStorage@17) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::CodeGen::FixedStorage@17::$Data$e__FixedBuffer, "Fusion.CodeGen", "FixedStorage@17/<Data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
