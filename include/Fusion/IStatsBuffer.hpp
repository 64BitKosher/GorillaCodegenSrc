// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: FusionGraphVisualization
  struct FusionGraphVisualization;
  // Forward declaring type: ISampleData
  class ISampleData;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: IStatsBuffer
  class IStatsBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::IStatsBuffer);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::IStatsBuffer*, "Fusion", "IStatsBuffer");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.IStatsBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class IStatsBuffer {
    public:
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count();
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity();
    // public Fusion.FusionGraphVisualization get_DefaultVisualization()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::FusionGraphVisualization get_DefaultVisualization();
    // public Fusion.FusionGraphVisualization get_VisualizationFlags()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::FusionGraphVisualization get_VisualizationFlags();
    // public Fusion.ISampleData GetSampleAtIndex(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::ISampleData* GetSampleAtIndex(int index);
  }; // Fusion.IStatsBuffer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::IStatsBuffer::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::IStatsBuffer::*)()>(&Fusion::IStatsBuffer::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::IStatsBuffer*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::IStatsBuffer::get_Capacity
// Il2CppName: get_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Fusion::IStatsBuffer::*)()>(&Fusion::IStatsBuffer::get_Capacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::IStatsBuffer*), "get_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::IStatsBuffer::get_DefaultVisualization
// Il2CppName: get_DefaultVisualization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::FusionGraphVisualization (Fusion::IStatsBuffer::*)()>(&Fusion::IStatsBuffer::get_DefaultVisualization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::IStatsBuffer*), "get_DefaultVisualization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::IStatsBuffer::get_VisualizationFlags
// Il2CppName: get_VisualizationFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::FusionGraphVisualization (Fusion::IStatsBuffer::*)()>(&Fusion::IStatsBuffer::get_VisualizationFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::IStatsBuffer*), "get_VisualizationFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::IStatsBuffer::GetSampleAtIndex
// Il2CppName: GetSampleAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::ISampleData* (Fusion::IStatsBuffer::*)(int)>(&Fusion::IStatsBuffer::GetSampleAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::IStatsBuffer*), "GetSampleAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
