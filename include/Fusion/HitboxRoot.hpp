// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.NetworkBehaviour
#include "Fusion/NetworkBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: Hitbox
  class Hitbox;
  // Forward declaring type: HitboxManager
  class HitboxManager;
  // Forward declaring type: IHitboxColliderContainer
  class IHitboxColliderContainer;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: HitboxRoot
  class HitboxRoot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::HitboxRoot);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HitboxRoot*, "Fusion", "HitboxRoot");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.HitboxRoot
  // [TokenAttribute] Offset: FFFFFFFF
  // [NetworkBehaviourWeavedAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class HitboxRoot : public ::Fusion::NetworkBehaviour {
    public:
    // Nested type: ::Fusion::HitboxRoot::ConfigFlags
    struct ConfigFlags;
    // Nested type: ::Fusion::HitboxRoot::HitboxComparerX
    class HitboxComparerX;
    // Nested type: ::Fusion::HitboxRoot::HitboxComparerY
    class HitboxComparerY;
    // Nested type: ::Fusion::HitboxRoot::HitboxComparerZ
    class HitboxComparerZ;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.HitboxRoot/ConfigFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct ConfigFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConfigFlags
      constexpr ConfigFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.HitboxRoot/ConfigFlags ReinitializeHitboxesBeforeRegistration
      static constexpr const int ReinitializeHitboxesBeforeRegistration = 1;
      // Get static field: static public Fusion.HitboxRoot/ConfigFlags ReinitializeHitboxesBeforeRegistration
      static ::Fusion::HitboxRoot::ConfigFlags _get_ReinitializeHitboxesBeforeRegistration();
      // Set static field: static public Fusion.HitboxRoot/ConfigFlags ReinitializeHitboxesBeforeRegistration
      static void _set_ReinitializeHitboxesBeforeRegistration(::Fusion::HitboxRoot::ConfigFlags value);
      // static field const value: static public Fusion.HitboxRoot/ConfigFlags IncludeInactiveHitboxes
      static constexpr const int IncludeInactiveHitboxes = 2;
      // Get static field: static public Fusion.HitboxRoot/ConfigFlags IncludeInactiveHitboxes
      static ::Fusion::HitboxRoot::ConfigFlags _get_IncludeInactiveHitboxes();
      // Set static field: static public Fusion.HitboxRoot/ConfigFlags IncludeInactiveHitboxes
      static void _set_IncludeInactiveHitboxes(::Fusion::HitboxRoot::ConfigFlags value);
      // static field const value: static public Fusion.HitboxRoot/ConfigFlags Legacy
      static constexpr const int Legacy = 1;
      // Get static field: static public Fusion.HitboxRoot/ConfigFlags Legacy
      static ::Fusion::HitboxRoot::ConfigFlags _get_Legacy();
      // Set static field: static public Fusion.HitboxRoot/ConfigFlags Legacy
      static void _set_Legacy(::Fusion::HitboxRoot::ConfigFlags value);
      // static field const value: static public Fusion.HitboxRoot/ConfigFlags Default
      static constexpr const int Default = 3;
      // Get static field: static public Fusion.HitboxRoot/ConfigFlags Default
      static ::Fusion::HitboxRoot::ConfigFlags _get_Default();
      // Set static field: static public Fusion.HitboxRoot/ConfigFlags Default
      static void _set_Default(::Fusion::HitboxRoot::ConfigFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.HitboxRoot/ConfigFlags
    #pragma pack(pop)
    static check_size<sizeof(HitboxRoot::ConfigFlags), 0 + sizeof(int)> __Fusion_HitboxRoot_ConfigFlagsSizeCheck;
    static_assert(sizeof(HitboxRoot::ConfigFlags) == 0x4);
    public:
    // public Fusion.HitboxRoot/ConfigFlags Config
    // Size: 0x4
    // Offset: 0x78
    ::Fusion::HitboxRoot::ConfigFlags Config;
    // Field size check
    static_assert(sizeof(::Fusion::HitboxRoot::ConfigFlags) == 0x4);
    // public System.Single BroadRadius
    // Size: 0x4
    // Offset: 0x7C
    float BroadRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 Offset
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 Offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Color GizmosColor
    // Size: 0x10
    // Offset: 0x8C
    ::UnityEngine::Color GizmosColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: GizmosColor and: Hitboxes
    char __padding3[0x4] = {};
    // public Fusion.Hitbox[] Hitboxes
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::Fusion::Hitbox*> Hitboxes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Fusion::Hitbox*>) == 0x8);
    // private Fusion.HitboxManager <Manager>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::Fusion::HitboxManager* Manager;
    // Field size check
    static_assert(sizeof(::Fusion::HitboxManager*) == 0x8);
    public:
    // static field const value: static private System.Int32 WORD_COUNT
    static constexpr const int WORD_COUNT = 1;
    // Get static field: static private System.Int32 WORD_COUNT
    static int _get_WORD_COUNT();
    // Set static field: static private System.Int32 WORD_COUNT
    static void _set_WORD_COUNT(int value);
    // static field const value: static public System.Int32 MAX_HITBOXES
    static constexpr const int MAX_HITBOXES = 31;
    // Get static field: static public System.Int32 MAX_HITBOXES
    static int _get_MAX_HITBOXES();
    // Set static field: static public System.Int32 MAX_HITBOXES
    static void _set_MAX_HITBOXES(int value);
    // Get instance field reference: public Fusion.HitboxRoot/ConfigFlags Config
    [[deprecated("Use field access instead!")]] ::Fusion::HitboxRoot::ConfigFlags& dyn_Config();
    // Get instance field reference: public System.Single BroadRadius
    [[deprecated("Use field access instead!")]] float& dyn_BroadRadius();
    // Get instance field reference: public UnityEngine.Vector3 Offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Offset();
    // Get instance field reference: public UnityEngine.Color GizmosColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_GizmosColor();
    // Get instance field reference: public Fusion.Hitbox[] Hitboxes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Fusion::Hitbox*>& dyn_Hitboxes();
    // Get instance field reference: private Fusion.HitboxManager <Manager>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::HitboxManager*& dyn_$Manager$k__BackingField();
    // public System.Boolean get_HitboxRootActive()
    // Offset: 0x2B404E8
    bool get_HitboxRootActive();
    // public System.Void set_HitboxRootActive(System.Boolean value)
    // Offset: 0x2B404FC
    void set_HitboxRootActive(bool value);
    // System.Boolean get_Registered()
    // Offset: 0x2B40120
    bool get_Registered();
    // public Fusion.HitboxManager get_Manager()
    // Offset: 0x2B40514
    ::Fusion::HitboxManager* get_Manager();
    // System.Void set_Manager(Fusion.HitboxManager value)
    // Offset: 0x2B4051C
    void set_Manager(::Fusion::HitboxManager* value);
    // public System.Void OnDrawGizmos()
    // Offset: 0x2B40524
    void OnDrawGizmos();
    // protected System.Void DrawGizmos(UnityEngine.Color color, ref UnityEngine.Matrix4x4 localToWorldMatrix)
    // Offset: 0x2B40654
    void DrawGizmos(::UnityEngine::Color color, ByRef<::UnityEngine::Matrix4x4> localToWorldMatrix);
    // public System.Void InitHitboxes()
    // Offset: 0x2B40734
    void InitHitboxes();
    // public System.Void SetMinBoundingRadius()
    // Offset: 0x2B40924
    void SetMinBoundingRadius();
    // public System.Void SetHitboxActive(Fusion.Hitbox hitbox, System.Boolean setActive)
    // Offset: 0x2B3C13C
    void SetHitboxActive(::Fusion::Hitbox* hitbox, bool setActive);
    // System.Void SetHitboxActiveFastUnchecked(Fusion.Hitbox hitbox, System.Boolean setActive)
    // Offset: 0x2B40B64
    void SetHitboxActiveFastUnchecked(::Fusion::Hitbox* hitbox, bool setActive);
    // public System.Boolean IsHitboxActive(Fusion.Hitbox hitbox)
    // Offset: 0x2B3BF94
    bool IsHitboxActive(::Fusion::Hitbox* hitbox);
    // System.Boolean IsHitboxActiveFastUnchecked(Fusion.Hitbox hitbox)
    // Offset: 0x2B40BA4
    bool IsHitboxActiveFastUnchecked(::Fusion::Hitbox* hitbox);
    // public System.Void DeRegister()
    // Offset: 0x2B40BD8
    void DeRegister();
    // System.Void RegisterColliders(Fusion.IHitboxColliderContainer container, System.Int32 tick)
    // Offset: 0x2B40C88
    void RegisterColliders(::Fusion::IHitboxColliderContainer* container, int tick);
    // System.Void DeregisterColliders(Fusion.IHitboxColliderContainer container)
    // Offset: 0x2B40DB0
    void DeregisterColliders(::Fusion::IHitboxColliderContainer* container);
    // UnityEngine.Bounds GetBounds()
    // Offset: 0x2B40EB0
    ::UnityEngine::Bounds GetBounds();
    // public override System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    // Offset: 0x2B40BD4
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)
    void Despawned(::Fusion::NetworkRunner* runner, bool hasState);
    // public System.Void .ctor()
    // Offset: 0x2B40F60
    // Implemented from: Fusion.NetworkBehaviour
    // Base method: System.Void NetworkBehaviour::.ctor()
    // Base method: System.Void SimulationBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitboxRoot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::HitboxRoot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitboxRoot*, creationType>()));
    }
  }; // Fusion.HitboxRoot
  #pragma pack(pop)
  static check_size<sizeof(HitboxRoot), 168 + sizeof(::Fusion::HitboxManager*)> __Fusion_HitboxRootSizeCheck;
  static_assert(sizeof(HitboxRoot) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HitboxRoot::ConfigFlags, "Fusion", "HitboxRoot/ConfigFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::HitboxRoot::get_HitboxRootActive
// Il2CppName: get_HitboxRootActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::get_HitboxRootActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "get_HitboxRootActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::set_HitboxRootActive
// Il2CppName: set_HitboxRootActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(bool)>(&Fusion::HitboxRoot::set_HitboxRootActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "set_HitboxRootActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::get_Registered
// Il2CppName: get_Registered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::get_Registered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "get_Registered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::get_Manager
// Il2CppName: get_Manager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::HitboxManager* (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::get_Manager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "get_Manager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::set_Manager
// Il2CppName: set_Manager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::HitboxManager*)>(&Fusion::HitboxRoot::set_Manager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Fusion", "HitboxManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "set_Manager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::UnityEngine::Color, ByRef<::UnityEngine::Matrix4x4>)>(&Fusion::HitboxRoot::DrawGizmos)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* localToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, localToWorldMatrix});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::InitHitboxes
// Il2CppName: InitHitboxes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::InitHitboxes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "InitHitboxes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::SetMinBoundingRadius
// Il2CppName: SetMinBoundingRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::SetMinBoundingRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "SetMinBoundingRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::SetHitboxActive
// Il2CppName: SetHitboxActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::Hitbox*, bool)>(&Fusion::HitboxRoot::SetHitboxActive)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* setActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "SetHitboxActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox, setActive});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::SetHitboxActiveFastUnchecked
// Il2CppName: SetHitboxActiveFastUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::Hitbox*, bool)>(&Fusion::HitboxRoot::SetHitboxActiveFastUnchecked)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    static auto* setActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "SetHitboxActiveFastUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox, setActive});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::IsHitboxActive
// Il2CppName: IsHitboxActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxRoot::*)(::Fusion::Hitbox*)>(&Fusion::HitboxRoot::IsHitboxActive)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "IsHitboxActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::IsHitboxActiveFastUnchecked
// Il2CppName: IsHitboxActiveFastUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Fusion::HitboxRoot::*)(::Fusion::Hitbox*)>(&Fusion::HitboxRoot::IsHitboxActiveFastUnchecked)> {
  static const MethodInfo* get() {
    static auto* hitbox = &::il2cpp_utils::GetClassFromName("Fusion", "Hitbox")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "IsHitboxActiveFastUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitbox});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::DeRegister
// Il2CppName: DeRegister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::DeRegister)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "DeRegister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::RegisterColliders
// Il2CppName: RegisterColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::IHitboxColliderContainer*, int)>(&Fusion::HitboxRoot::RegisterColliders)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Fusion", "IHitboxColliderContainer")->byval_arg;
    static auto* tick = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "RegisterColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container, tick});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::DeregisterColliders
// Il2CppName: DeregisterColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::IHitboxColliderContainer*)>(&Fusion::HitboxRoot::DeregisterColliders)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Fusion", "IHitboxColliderContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "DeregisterColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Fusion::HitboxRoot::*)()>(&Fusion::HitboxRoot::GetBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::Despawned
// Il2CppName: Despawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::HitboxRoot::*)(::Fusion::NetworkRunner*, bool)>(&Fusion::HitboxRoot::Despawned)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* hasState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HitboxRoot*), "Despawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, hasState});
  }
};
// Writing MetadataGetter for method: Fusion::HitboxRoot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
