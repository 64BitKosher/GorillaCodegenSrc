// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Behaviour
  class Behaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::Behaviour);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Behaviour*, "Fusion", "Behaviour");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.Behaviour
  // [TokenAttribute] Offset: FFFFFFFF
  // [ScriptHelpAttribute] Offset: FFFFFFFF
  class Behaviour : public ::UnityEngine::MonoBehaviour {
    public:
    // public T AddBehaviour()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T AddBehaviour() {
      static_assert(std::is_convertible_v<T, ::Fusion::Behaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Behaviour::AddBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Boolean TryGetBehaviour(out T behaviour)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetBehaviour(ByRef<T> behaviour) {
      static_assert(std::is_convertible_v<T, ::Fusion::Behaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Behaviour::TryGetBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(behaviour));
    }
    // public T GetBehaviour()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetBehaviour() {
      static_assert(std::is_convertible_v<T, ::Fusion::Behaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Behaviour::GetBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // static public System.Void DestroyBehaviour(Fusion.Behaviour behaviour)
    // Offset: 0x2B46210
    static void DestroyBehaviour(::Fusion::Behaviour* behaviour);
    // protected System.Void .ctor()
    // Offset: 0x2B3C7B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Behaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::Behaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Behaviour*, creationType>()));
    }
  }; // Fusion.Behaviour
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Behaviour::AddBehaviour
// Il2CppName: AddBehaviour
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Behaviour::TryGetBehaviour
// Il2CppName: TryGetBehaviour
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Behaviour::GetBehaviour
// Il2CppName: GetBehaviour
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Fusion::Behaviour::DestroyBehaviour
// Il2CppName: DestroyBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Fusion::Behaviour*)>(&Fusion::Behaviour::DestroyBehaviour)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Fusion", "Behaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::Behaviour*), "DestroyBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Fusion::Behaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
