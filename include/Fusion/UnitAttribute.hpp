// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PropertyAttribute
#include "Fusion/PropertyAttribute.hpp"
// Including type: Fusion.Units
#include "Fusion/Units.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: UnitAttribute
  class UnitAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::UnitAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::UnitAttribute*, "Fusion", "UnitAttribute");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.UnitAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class UnitAttribute : public ::Fusion::PropertyAttribute {
    public:
    public:
    // private readonly Fusion.Units <Unit>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::Fusion::Units Unit;
    // Field size check
    static_assert(sizeof(::Fusion::Units) == 0x4);
    // private readonly System.Double <Min>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    double Min;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private readonly System.Double <Max>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    double Max;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int32 DecimalPlaces
    // Size: 0x4
    // Offset: 0x28
    int DecimalPlaces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean ClampMin
    // Size: 0x1
    // Offset: 0x2C
    bool ClampMin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ClampMax
    // Size: 0x1
    // Offset: 0x2D
    bool ClampMax;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseInverse
    // Size: 0x1
    // Offset: 0x2E
    bool UseInverse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseInverse and: InverseName
    char __padding6[0x1] = {};
    // public System.String InverseName
    // Size: 0x8
    // Offset: 0x30
    ::StringW InverseName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Fusion.Units InverseUnit
    // Size: 0x4
    // Offset: 0x38
    ::Fusion::Units InverseUnit;
    // Field size check
    static_assert(sizeof(::Fusion::Units) == 0x4);
    // public System.Int32 InverseDecimalPlaces
    // Size: 0x4
    // Offset: 0x3C
    int InverseDecimalPlaces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean UseSlider
    // Size: 0x1
    // Offset: 0x40
    bool UseSlider;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private readonly Fusion.Units <Unit>k__BackingField
    [[deprecated("Use field access instead!")]] ::Fusion::Units& dyn_$Unit$k__BackingField();
    // Get instance field reference: private readonly System.Double <Min>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$Min$k__BackingField();
    // Get instance field reference: private readonly System.Double <Max>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$Max$k__BackingField();
    // Get instance field reference: public System.Int32 DecimalPlaces
    [[deprecated("Use field access instead!")]] int& dyn_DecimalPlaces();
    // Get instance field reference: public System.Boolean ClampMin
    [[deprecated("Use field access instead!")]] bool& dyn_ClampMin();
    // Get instance field reference: public System.Boolean ClampMax
    [[deprecated("Use field access instead!")]] bool& dyn_ClampMax();
    // Get instance field reference: public System.Boolean UseInverse
    [[deprecated("Use field access instead!")]] bool& dyn_UseInverse();
    // Get instance field reference: public System.String InverseName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_InverseName();
    // Get instance field reference: public Fusion.Units InverseUnit
    [[deprecated("Use field access instead!")]] ::Fusion::Units& dyn_InverseUnit();
    // Get instance field reference: public System.Int32 InverseDecimalPlaces
    [[deprecated("Use field access instead!")]] int& dyn_InverseDecimalPlaces();
    // Get instance field reference: public System.Boolean UseSlider
    [[deprecated("Use field access instead!")]] bool& dyn_UseSlider();
    // Fusion.Units get_Unit()
    // Offset: 0x2AFF460
    ::Fusion::Units get_Unit();
    // System.Double get_Min()
    // Offset: 0x2AFF468
    double get_Min();
    // System.Double get_Max()
    // Offset: 0x2AFF470
    double get_Max();
    // public System.Void .ctor(Fusion.Units unit)
    // Offset: 0x2AFF478
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnitAttribute* New_ctor(::Fusion::Units unit) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::UnitAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnitAttribute*, creationType>(unit)));
    }
    // public System.Void .ctor(Fusion.Units unit, System.Double min, System.Double max)
    // Offset: 0x2AFF4AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnitAttribute* New_ctor(::Fusion::Units unit, double min, double max) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::UnitAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnitAttribute*, creationType>(unit, min, max)));
    }
  }; // Fusion.UnitAttribute
  #pragma pack(pop)
  static check_size<sizeof(UnitAttribute), 64 + sizeof(bool)> __Fusion_UnitAttributeSizeCheck;
  static_assert(sizeof(UnitAttribute) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::UnitAttribute::get_Unit
// Il2CppName: get_Unit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Units (Fusion::UnitAttribute::*)()>(&Fusion::UnitAttribute::get_Unit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UnitAttribute*), "get_Unit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UnitAttribute::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::UnitAttribute::*)()>(&Fusion::UnitAttribute::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UnitAttribute*), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UnitAttribute::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Fusion::UnitAttribute::*)()>(&Fusion::UnitAttribute::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::UnitAttribute*), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::UnitAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::UnitAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
