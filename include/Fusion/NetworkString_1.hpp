// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Fusion.INetworkStruct
#include "Fusion/INetworkStruct.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Fusion.UTF32Tools/CharEnumerator
#include "Fusion/UTF32Tools_CharEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: IFixedStorage
  class IFixedStorage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkString`1<Size>
  template<typename Size>
  struct NetworkString_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::Fusion::NetworkString_1, "Fusion", "NetworkString`1");
// Type namespace: Fusion
namespace Fusion {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.NetworkString`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [NetworkStructWeavedAttribute] Offset: FFFFFFFF
  template<typename Size>
  struct NetworkString_1/*, public ::System::ValueType, public ::Fusion::INetworkString, public ::Fusion::INetworkStruct, public ::System::IEquatable_1<::Fusion::NetworkString_1<Size>>, public ::System::Collections::Generic::IEnumerable_1<::Il2CppChar>*/ {
    public:
    public:
    // System.Int32 _length
    // Size: 0x4
    // Offset: 0x0
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Size _data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    Size data;
    public:
    // Creating value type constructor for type: NetworkString_1
    constexpr NetworkString_1(int length_ = {}, Size data_ = {}) noexcept : length{length_}, data{data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkString
    operator ::Fusion::INetworkString() noexcept {
      return *reinterpret_cast<::Fusion::INetworkString*>(this);
    }
    // Creating interface conversion operator: operator ::Fusion::INetworkStruct
    operator ::Fusion::INetworkStruct() noexcept {
      return *reinterpret_cast<::Fusion::INetworkStruct*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Fusion::NetworkString_1<Size>>
    operator ::System::IEquatable_1<::Fusion::NetworkString_1<Size>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Fusion::NetworkString_1<Size>>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::Il2CppChar>
    operator ::System::Collections::Generic::IEnumerable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::Il2CppChar>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::dyn__length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Size _data
    [[deprecated("Use field access instead!")]] Size& dyn__data() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::dyn__data");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
      return *reinterpret_cast<Size*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::get_Capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.String get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_Value(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Value(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::set_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.UInt32 get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, index);
    }
    // public System.Boolean Get(ref System.String cache)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Get(ByRef<::StringW> cache) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cache)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(cache));
    }
    // public System.Boolean Set(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Set(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Int32 IndexOf(System.Char c, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(::Il2CppChar c, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(startIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, c, startIndex);
    }
    // public System.Int32 IndexOf(System.Char c, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(::Il2CppChar c, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, c, startIndex, count);
    }
    // public System.Int32 IndexOf(System.UInt32 codePoint, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(uint codePoint, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codePoint), ::il2cpp_utils::ExtractType(startIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, codePoint, startIndex);
    }
    // public System.Int32 IndexOf(System.UInt32 codePoint, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(uint codePoint, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codePoint), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, codePoint, startIndex, count);
    }
    // public System.Int32 IndexOf(System.String str, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(::StringW str, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, str, startIndex);
    }
    // public System.Int32 IndexOf(System.String str, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(::StringW str, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, str, startIndex, count);
    }
    // public System.Int32 IndexOf(Fusion.NetworkString`1<OtherSize> str, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int IndexOf(::Fusion::NetworkString_1<OtherSize> str, int startIndex) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, str, startIndex);
    }
    // public System.Int32 IndexOf(Fusion.NetworkString`1<OtherSize> str, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int IndexOf(::Fusion::NetworkString_1<OtherSize> str, int startIndex, int count) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, str, startIndex, count);
    }
    // public System.Int32 IndexOf(ref Fusion.NetworkString`1<OtherSize> str, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int IndexOf_(ByRef<::Fusion::NetworkString_1<OtherSize>> str, int startIndex) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, byref(str), startIndex);
    }
    // public System.Int32 IndexOf(ref Fusion.NetworkString`1<OtherSize> str, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int IndexOf_(ByRef<::Fusion::NetworkString_1<OtherSize>> str, int startIndex, int count) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, byref(str), startIndex, count);
    }
    // public System.Boolean Contains(System.Char c)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(::Il2CppChar c) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, c);
    }
    // public System.Boolean Contains(System.UInt32 codePoint)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(uint codePoint) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codePoint)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, codePoint);
    }
    // public System.Boolean Contains(System.String str)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(::StringW str) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, str);
    }
    // public System.Boolean Contains(Fusion.NetworkString`1<OtherSize> str)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool Contains(::Fusion::NetworkString_1<OtherSize> str) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, str);
    }
    // public System.Boolean Contains(ref Fusion.NetworkString`1<OtherSize> str)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool Contains_(ByRef<::Fusion::NetworkString_1<OtherSize>> str) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(str));
    }
    // public Fusion.NetworkString`1<Size> Substring(System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkString_1<Size> Substring(int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Substring");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Substring", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkString_1<Size>, false>(this, ___internal__method, startIndex);
    }
    // public Fusion.NetworkString`1<Size> Substring(System.Int32 startIndex, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkString_1<Size> Substring(int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Substring");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Substring", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkString_1<Size>, false>(this, ___internal__method, startIndex, length);
    }
    // public Fusion.NetworkString`1<Size> ToLower()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkString_1<Size> ToLower() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::ToLower");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToLower", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkString_1<Size>, false>(this, ___internal__method);
    }
    // public Fusion.NetworkString`1<Size> ToUpper()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkString_1<Size> ToUpper() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::ToUpper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToUpper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::NetworkString_1<Size>, false>(this, ___internal__method);
    }
    // public System.Int32 GetCharCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetCharCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::GetCharCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetCharCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 Compare(System.String s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Compare(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
    }
    // public System.Int32 Compare(Fusion.NetworkString`1<Size> s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Compare(::Fusion::NetworkString_1<Size> s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
    }
    // public System.Int32 Compare(ref Fusion.NetworkString`1<Size> s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Compare_(ByRef<::Fusion::NetworkString_1<Size>> s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byref(s));
    }
    // public System.Int32 Compare(Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int Compare(::Fusion::NetworkString_1<OtherSize> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Compare", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, other);
    }
    // public System.Int32 Compare(ref Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    int Compare_(ByRef<::Fusion::NetworkString_1<OtherSize>> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Compare");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Compare", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, byref(other));
    }
    // public System.Boolean Equals(System.String s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, s);
    }
    // public System.Boolean Equals(Fusion.NetworkString`1<Size> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::Fusion::NetworkString_1<Size> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkString_1<Size>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.Boolean Equals(ref Fusion.NetworkString`1<Size> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals_(ByRef<::Fusion::NetworkString_1<Size>> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(other));
    }
    // public System.Boolean Equals(Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool Equals(::Fusion::NetworkString_1<OtherSize> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, other);
    }
    // public System.Boolean Equals(ref Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool Equals_(ByRef<::Fusion::NetworkString_1<OtherSize>> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkString_1<Size>), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(other));
    }
    // public System.Boolean StartsWith(System.String s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool StartsWith(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::StartsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "StartsWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, s);
    }
    // public System.Boolean StartsWith(ref Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool StartsWith(ByRef<::Fusion::NetworkString_1<OtherSize>> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::StartsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "StartsWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(other));
    }
    // public System.Boolean EndsWith(ref Fusion.NetworkString`1<OtherSize> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class OtherSize>
    bool EndsWith(ByRef<::Fusion::NetworkString_1<OtherSize>> other) {
      static_assert(std::is_convertible_v<OtherSize, ::System::ValueType*> && std::is_convertible_v<std::remove_pointer_t<OtherSize>, ::Fusion::IFixedStorage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::EndsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "EndsWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<OtherSize>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(other));
    }
    // public System.Boolean EndsWith(System.String s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool EndsWith(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::EndsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "EndsWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, s);
    }
    // public Fusion.UTF32Tools/CharEnumerator GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::UTF32Tools::CharEnumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Fusion::UTF32Tools::CharEnumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<System.Char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>* System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkString_1<Size>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::Il2CppChar>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::NetworkString_1<Size>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Int32 SafeIndex(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int SafeIndex(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::SafeIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SafeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, index);
    }
    // private System.Int32 get_SafeLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_SafeLength() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::get_SafeLength");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SafeLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // Fusion.NetworkString`1
  // Could not write size check! Type: Fusion.NetworkString`1 is generic, or has no fields that are valid for size checks!
  // static public System.Boolean op_Inequality(Fusion.NetworkString`1<Size> a, Fusion.NetworkString`1<Size> b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator !=(const ::Fusion::NetworkString_1<Size>& a, const ::Fusion::NetworkString_1<Size>& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Inequality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
  // static public System.Boolean op_Inequality(System.String a, Fusion.NetworkString`1<Size> b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator !=(const ::StringW& a, const ::Fusion::NetworkString_1<Size>& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Inequality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
  // static public System.Boolean op_Inequality(Fusion.NetworkString`1<Size> a, System.String b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator !=(const ::Fusion::NetworkString_1<Size>& a, const ::StringW& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Inequality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
  // static public System.Boolean op_Equality(Fusion.NetworkString`1<Size> a, Fusion.NetworkString`1<Size> b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::Fusion::NetworkString_1<Size>& a, const ::Fusion::NetworkString_1<Size>& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
  // static public System.Boolean op_Equality(System.String a, Fusion.NetworkString`1<Size> b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::StringW& a, const ::Fusion::NetworkString_1<Size>& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
  // static public System.Boolean op_Equality(Fusion.NetworkString`1<Size> a, System.String b)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::Fusion::NetworkString_1<Size>& a, const ::StringW& b) {
    static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkString_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<NetworkString_1<Size>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
  }
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
