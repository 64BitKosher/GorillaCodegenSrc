// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkObject
  class NetworkObject;
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: NetworkPrefabInfo
  struct NetworkPrefabInfo;
}
// Completed forward declares
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: INetworkObjectPool
  class INetworkObjectPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::INetworkObjectPool);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::INetworkObjectPool*, "Fusion", "INetworkObjectPool");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.INetworkObjectPool
  // [TokenAttribute] Offset: FFFFFFFF
  class INetworkObjectPool {
    public:
    // public Fusion.NetworkObject AcquireInstance(Fusion.NetworkRunner runner, Fusion.NetworkPrefabInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Fusion::NetworkObject* AcquireInstance(::Fusion::NetworkRunner* runner, ::Fusion::NetworkPrefabInfo info);
    // public System.Void ReleaseInstance(Fusion.NetworkRunner runner, Fusion.NetworkObject instance, System.Boolean isSceneObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReleaseInstance(::Fusion::NetworkRunner* runner, ::Fusion::NetworkObject* instance, bool isSceneObject);
  }; // Fusion.INetworkObjectPool
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::INetworkObjectPool::AcquireInstance
// Il2CppName: AcquireInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::NetworkObject* (Fusion::INetworkObjectPool::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkPrefabInfo)>(&Fusion::INetworkObjectPool::AcquireInstance)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkPrefabInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::INetworkObjectPool*), "AcquireInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, info});
  }
};
// Writing MetadataGetter for method: Fusion::INetworkObjectPool::ReleaseInstance
// Il2CppName: ReleaseInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Fusion::INetworkObjectPool::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkObject*, bool)>(&Fusion::INetworkObjectPool::ReleaseInstance)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkObject")->byval_arg;
    static auto* isSceneObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::INetworkObjectPool*), "ReleaseInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, instance, isSceneObject});
  }
};
