// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.PageSizes
#include "Fusion/PageSizes.hpp"
// Including type: Fusion.Allocator
#include "Fusion/Allocator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: HeapConfiguration
  class HeapConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Fusion::HeapConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Fusion::HeapConfiguration*, "Fusion", "HeapConfiguration");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.HeapConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class HeapConfiguration : public ::Il2CppObject {
    public:
    public:
    // public Fusion.PageSizes PageShift
    // Size: 0x4
    // Offset: 0x10
    ::Fusion::PageSizes PageShift;
    // Field size check
    static_assert(sizeof(::Fusion::PageSizes) == 0x4);
    // public System.Int32 PageCount
    // Size: 0x4
    // Offset: 0x14
    int PageCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 GlobalsSize
    // Size: 0x4
    // Offset: 0x18
    int GlobalsSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public Fusion.PageSizes PageShift
    [[deprecated("Use field access instead!")]] ::Fusion::PageSizes& dyn_PageShift();
    // Get instance field reference: public System.Int32 PageCount
    [[deprecated("Use field access instead!")]] int& dyn_PageCount();
    // Get instance field reference: public System.Int32 GlobalsSize
    [[deprecated("Use field access instead!")]] int& dyn_GlobalsSize();
    // Fusion.Allocator/Config ToAllocatorConfig()
    // Offset: 0x2B820B4
    ::Fusion::Allocator::Config ToAllocatorConfig();
    // public Fusion.HeapConfiguration Init(System.Int32 globalsSize)
    // Offset: 0x2B8210C
    ::Fusion::HeapConfiguration* Init(int globalsSize);
    // public System.Void .ctor()
    // Offset: 0x2B82270
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeapConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::HeapConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeapConfiguration*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x2B82198
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Fusion.HeapConfiguration
  #pragma pack(pop)
  static check_size<sizeof(HeapConfiguration), 24 + sizeof(int)> __Fusion_HeapConfigurationSizeCheck;
  static_assert(sizeof(HeapConfiguration) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::HeapConfiguration::ToAllocatorConfig
// Il2CppName: ToAllocatorConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::Allocator::Config (Fusion::HeapConfiguration::*)()>(&Fusion::HeapConfiguration::ToAllocatorConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HeapConfiguration*), "ToAllocatorConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::HeapConfiguration::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Fusion::HeapConfiguration* (Fusion::HeapConfiguration::*)(int)>(&Fusion::HeapConfiguration::Init)> {
  static const MethodInfo* get() {
    static auto* globalsSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::HeapConfiguration*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{globalsSize});
  }
};
// Writing MetadataGetter for method: Fusion::HeapConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::HeapConfiguration::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Fusion::HeapConfiguration::*)()>(&Fusion::HeapConfiguration::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::HeapConfiguration*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
