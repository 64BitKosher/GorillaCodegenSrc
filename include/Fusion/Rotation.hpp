// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: Rotation
  struct Rotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Rotation, "Fusion", "Rotation");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Fusion.Rotation
  // [TokenAttribute] Offset: FFFFFFFF
  struct Rotation/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Fusion::Rotation::RotationTypes
    struct RotationTypes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Fusion.Rotation/RotationTypes
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotationTypes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationTypes
      constexpr RotationTypes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Fusion.Rotation/RotationTypes Quaternion
      static constexpr const int Quaternion = 0;
      // Get static field: static public Fusion.Rotation/RotationTypes Quaternion
      static ::Fusion::Rotation::RotationTypes _get_Quaternion();
      // Set static field: static public Fusion.Rotation/RotationTypes Quaternion
      static void _set_Quaternion(::Fusion::Rotation::RotationTypes value);
      // static field const value: static public Fusion.Rotation/RotationTypes Euler
      static constexpr const int Euler = 1;
      // Get static field: static public Fusion.Rotation/RotationTypes Euler
      static ::Fusion::Rotation::RotationTypes _get_Euler();
      // Set static field: static public Fusion.Rotation/RotationTypes Euler
      static void _set_Euler(::Fusion::Rotation::RotationTypes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Fusion.Rotation/RotationTypes
    #pragma pack(pop)
    static check_size<sizeof(Rotation::RotationTypes), 0 + sizeof(int)> __Fusion_Rotation_RotationTypesSizeCheck;
    static_assert(sizeof(Rotation::RotationTypes) == 0x4);
    public:
    // public readonly Fusion.Rotation/RotationTypes Type
    // Size: 0x4
    // Offset: 0x0
    ::Fusion::Rotation::RotationTypes Type;
    // Field size check
    static_assert(sizeof(::Fusion::Rotation::RotationTypes) == 0x4);
    // Creating union for fields at offset: 0x4
    union {
      // private readonly UnityEngine.Quaternion quaternion
      // Size: 0x10
      // Offset: 0x4
      ::UnityEngine::Quaternion quaternion;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // private readonly UnityEngine.Vector3 euler
      // Size: 0xC
      // Offset: 0x4
      ::UnityEngine::Vector3 euler;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // private readonly System.Single x
      // Size: 0x4
      // Offset: 0x4
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
    };
    // private readonly System.Single y
    // Size: 0x4
    // Offset: 0x8
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single z
    // Size: 0x4
    // Offset: 0xC
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single w
    // Size: 0x4
    // Offset: 0x10
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Rotation
    constexpr Rotation(::Fusion::Rotation::RotationTypes Type_ = {}, ::UnityEngine::Quaternion quaternion_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) noexcept : Type{Type_}, quaternion{quaternion_}, y{y_}, z{z_}, w{w_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly Fusion.Rotation/RotationTypes Type
    [[deprecated("Use field access instead!")]] ::Fusion::Rotation::RotationTypes& dyn_Type();
    // Get instance field reference: private readonly UnityEngine.Quaternion quaternion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_quaternion();
    // Get instance field reference: private readonly UnityEngine.Vector3 euler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_euler();
    // Get instance field reference: private readonly System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: private readonly System.Single y
    [[deprecated("Use field access instead!")]] float& dyn_y();
    // Get instance field reference: private readonly System.Single z
    [[deprecated("Use field access instead!")]] float& dyn_z();
    // Get instance field reference: private readonly System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // public System.Void .ctor(UnityEngine.Quaternion quaternion)
    // Offset: 0x2B4A274
    Rotation(::UnityEngine::Quaternion quaternion);
    // public System.Void .ctor(UnityEngine.Vector3 euler)
    // Offset: 0x2B4A284
    Rotation(::UnityEngine::Vector3 euler);
    // public System.Void .ctor(System.Single z)
    // Offset: 0x2B4A298
    Rotation(float z);
    // public UnityEngine.Quaternion get_AsQuaternion()
    // Offset: 0x2B4A2A8
    ::UnityEngine::Quaternion get_AsQuaternion();
    // public UnityEngine.Vector3 get_AsEuler()
    // Offset: 0x2B4A314
    ::UnityEngine::Vector3 get_AsEuler();
    // public System.Single get_AsFloatZ()
    // Offset: 0x2B4A388
    float get_AsFloatZ();
  }; // Fusion.Rotation
  #pragma pack(pop)
  static check_size<sizeof(Rotation), 16 + sizeof(float)> __Fusion_RotationSizeCheck;
  static_assert(sizeof(Rotation) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::Rotation::RotationTypes, "Fusion", "Rotation/RotationTypes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::Rotation::Rotation
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Rotation::Rotation
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Rotation::Rotation
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::Rotation::get_AsQuaternion
// Il2CppName: get_AsQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Fusion::Rotation::*)()>(&Fusion::Rotation::get_AsQuaternion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Rotation), "get_AsQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Rotation::get_AsEuler
// Il2CppName: get_AsEuler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::Rotation::*)()>(&Fusion::Rotation::get_AsEuler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Rotation), "get_AsEuler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Fusion::Rotation::get_AsFloatZ
// Il2CppName: get_AsFloatZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Fusion::Rotation::*)()>(&Fusion::Rotation::get_AsFloatZ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Fusion::Rotation), "get_AsFloatZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
