// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Fusion
namespace Fusion {
  // Forward declaring type: GameMode
  struct GameMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::GameMode, "Fusion", "GameMode");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Fusion.GameMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct GameMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: GameMode
    constexpr GameMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Fusion.GameMode Single
    static constexpr const int Single = 1;
    // Get static field: static public Fusion.GameMode Single
    static ::Fusion::GameMode _get_Single();
    // Set static field: static public Fusion.GameMode Single
    static void _set_Single(::Fusion::GameMode value);
    // static field const value: static public Fusion.GameMode Shared
    static constexpr const int Shared = 2;
    // Get static field: static public Fusion.GameMode Shared
    static ::Fusion::GameMode _get_Shared();
    // Set static field: static public Fusion.GameMode Shared
    static void _set_Shared(::Fusion::GameMode value);
    // static field const value: static public Fusion.GameMode Server
    static constexpr const int Server = 3;
    // Get static field: static public Fusion.GameMode Server
    static ::Fusion::GameMode _get_Server();
    // Set static field: static public Fusion.GameMode Server
    static void _set_Server(::Fusion::GameMode value);
    // static field const value: static public Fusion.GameMode Host
    static constexpr const int Host = 4;
    // Get static field: static public Fusion.GameMode Host
    static ::Fusion::GameMode _get_Host();
    // Set static field: static public Fusion.GameMode Host
    static void _set_Host(::Fusion::GameMode value);
    // static field const value: static public Fusion.GameMode Client
    static constexpr const int Client = 5;
    // Get static field: static public Fusion.GameMode Client
    static ::Fusion::GameMode _get_Client();
    // Set static field: static public Fusion.GameMode Client
    static void _set_Client(::Fusion::GameMode value);
    // static field const value: static public Fusion.GameMode AutoHostOrClient
    static constexpr const int AutoHostOrClient = 6;
    // Get static field: static public Fusion.GameMode AutoHostOrClient
    static ::Fusion::GameMode _get_AutoHostOrClient();
    // Set static field: static public Fusion.GameMode AutoHostOrClient
    static void _set_AutoHostOrClient(::Fusion::GameMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Fusion.GameMode
  #pragma pack(pop)
  static check_size<sizeof(GameMode), 0 + sizeof(int)> __Fusion_GameModeSizeCheck;
  static_assert(sizeof(GameMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
