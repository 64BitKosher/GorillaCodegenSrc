// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Fusion.LagCompensationUtils
#include "Fusion/LagCompensationUtils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Fusion.LagCompensationUtils/CustomPlanesBox
#include "Fusion/LagCompensationUtils_CustomPlanesBox.hpp"
// Including type: Fusion.LagCompensationUtils/CustomEdgesBox
#include "Fusion/LagCompensationUtils_CustomEdgesBox.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Fusion::LagCompensationUtils::BoxNarrowData, "Fusion", "LagCompensationUtils/BoxNarrowData");
// Type namespace: Fusion
namespace Fusion {
  // Size: 0x12C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Fusion.LagCompensationUtils/BoxNarrowData
  // [TokenAttribute] Offset: FFFFFFFF
  struct LagCompensationUtils::BoxNarrowData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Extents
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 Extents;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 RotatedRight
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 RotatedRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 RotatedUp
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 RotatedUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 RotatedForward
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 RotatedForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Fusion.LagCompensationUtils/CustomPlanesBox BoxPlanesRotated
    // Size: 0x90
    // Offset: 0x3C
    ::Fusion::LagCompensationUtils::CustomPlanesBox BoxPlanesRotated;
    // Field size check
    static_assert(sizeof(::Fusion::LagCompensationUtils::CustomPlanesBox) == 0x90);
    // public Fusion.LagCompensationUtils/CustomEdgesBox BoxEdgesRotated
    // Size: 0x60
    // Offset: 0xCC
    ::Fusion::LagCompensationUtils::CustomEdgesBox BoxEdgesRotated;
    // Field size check
    static_assert(sizeof(::Fusion::LagCompensationUtils::CustomEdgesBox) == 0x60);
    public:
    // Creating value type constructor for type: BoxNarrowData
    constexpr BoxNarrowData(::UnityEngine::Vector3 Position_ = {}, ::UnityEngine::Vector3 Extents_ = {}, ::UnityEngine::Vector3 RotatedRight_ = {}, ::UnityEngine::Vector3 RotatedUp_ = {}, ::UnityEngine::Vector3 RotatedForward_ = {}, ::Fusion::LagCompensationUtils::CustomPlanesBox BoxPlanesRotated_ = {}, ::Fusion::LagCompensationUtils::CustomEdgesBox BoxEdgesRotated_ = {}) noexcept : Position{Position_}, Extents{Extents_}, RotatedRight{RotatedRight_}, RotatedUp{RotatedUp_}, RotatedForward{RotatedForward_}, BoxPlanesRotated{BoxPlanesRotated_}, BoxEdgesRotated{BoxEdgesRotated_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Position();
    // Get instance field reference: public UnityEngine.Vector3 Extents
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Extents();
    // Get instance field reference: public UnityEngine.Vector3 RotatedRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RotatedRight();
    // Get instance field reference: public UnityEngine.Vector3 RotatedUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RotatedUp();
    // Get instance field reference: public UnityEngine.Vector3 RotatedForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RotatedForward();
    // Get instance field reference: public Fusion.LagCompensationUtils/CustomPlanesBox BoxPlanesRotated
    [[deprecated("Use field access instead!")]] ::Fusion::LagCompensationUtils::CustomPlanesBox& dyn_BoxPlanesRotated();
    // Get instance field reference: public Fusion.LagCompensationUtils/CustomEdgesBox BoxEdgesRotated
    [[deprecated("Use field access instead!")]] ::Fusion::LagCompensationUtils::CustomEdgesBox& dyn_BoxEdgesRotated();
    // public System.Void .ctor(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, UnityEngine.Vector3 extents)
    // Offset: 0x2B3BA3C
    BoxNarrowData(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, ::UnityEngine::Vector3 extents);
    // public UnityEngine.Vector3 LocalToWorldPoint(UnityEngine.Vector3 point)
    // Offset: 0x2B3BDF4
    ::UnityEngine::Vector3 LocalToWorldPoint(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 WorldToLocalPoint(UnityEngine.Vector3 point)
    // Offset: 0x2B3BE64
    ::UnityEngine::Vector3 WorldToLocalPoint(::UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 LocalToWorldVector(UnityEngine.Vector3 vec)
    // Offset: 0x2B3BE1C
    ::UnityEngine::Vector3 LocalToWorldVector(::UnityEngine::Vector3 vec);
    // public UnityEngine.Vector3 WorldToLocalVector(UnityEngine.Vector3 vec)
    // Offset: 0x2B3BE7C
    ::UnityEngine::Vector3 WorldToLocalVector(::UnityEngine::Vector3 vec);
  }; // Fusion.LagCompensationUtils/BoxNarrowData
  #pragma pack(pop)
  static check_size<sizeof(LagCompensationUtils::BoxNarrowData), 204 + sizeof(::Fusion::LagCompensationUtils::CustomEdgesBox)> __Fusion_LagCompensationUtils_BoxNarrowDataSizeCheck;
  static_assert(sizeof(LagCompensationUtils::BoxNarrowData) == 0x12C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::BoxNarrowData::BoxNarrowData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::BoxNarrowData::LocalToWorldPoint
// Il2CppName: LocalToWorldPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::LagCompensationUtils::BoxNarrowData::*)(::UnityEngine::Vector3)>(&Fusion::LagCompensationUtils::BoxNarrowData::LocalToWorldPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensationUtils::BoxNarrowData), "LocalToWorldPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::BoxNarrowData::WorldToLocalPoint
// Il2CppName: WorldToLocalPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::LagCompensationUtils::BoxNarrowData::*)(::UnityEngine::Vector3)>(&Fusion::LagCompensationUtils::BoxNarrowData::WorldToLocalPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensationUtils::BoxNarrowData), "WorldToLocalPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::BoxNarrowData::LocalToWorldVector
// Il2CppName: LocalToWorldVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::LagCompensationUtils::BoxNarrowData::*)(::UnityEngine::Vector3)>(&Fusion::LagCompensationUtils::BoxNarrowData::LocalToWorldVector)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensationUtils::BoxNarrowData), "LocalToWorldVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec});
  }
};
// Writing MetadataGetter for method: Fusion::LagCompensationUtils::BoxNarrowData::WorldToLocalVector
// Il2CppName: WorldToLocalVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Fusion::LagCompensationUtils::BoxNarrowData::*)(::UnityEngine::Vector3)>(&Fusion::LagCompensationUtils::BoxNarrowData::WorldToLocalVector)> {
  static const MethodInfo* get() {
    static auto* vec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Fusion::LagCompensationUtils::BoxNarrowData), "WorldToLocalVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec});
  }
};
