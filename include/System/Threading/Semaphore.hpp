// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: Semaphore
  class Semaphore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Semaphore);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Semaphore*, "System.Threading", "Semaphore");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Semaphore
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  class Semaphore : public ::System::Threading::WaitHandle {
    public:
    // static System.IntPtr CreateSemaphore_internal(System.Int32 initialCount, System.Int32 maximumCount, System.String name, out System.Int32 errorCode)
    // Offset: 0x4F6714C
    static ::System::IntPtr CreateSemaphore_internal(int initialCount, int maximumCount, ::StringW name, ByRef<int> errorCode);
    // static private System.IntPtr CreateSemaphore_icall(System.Int32 initialCount, System.Int32 maximumCount, System.Char* name, System.Int32 name_length, out System.Int32 errorCode)
    // Offset: 0x4F671A0
    static ::System::IntPtr CreateSemaphore_icall(int initialCount, int maximumCount, ::Il2CppChar* name, int name_length, ByRef<int> errorCode);
    // static System.Boolean ReleaseSemaphore_internal(System.IntPtr handle, System.Int32 releaseCount, out System.Int32 previousCount)
    // Offset: 0x4F671A4
    static bool ReleaseSemaphore_internal(::System::IntPtr handle, int releaseCount, ByRef<int> previousCount);
  }; // System.Threading.Semaphore
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Semaphore::CreateSemaphore_internal
// Il2CppName: CreateSemaphore_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, ::StringW, ByRef<int>)>(&System::Threading::Semaphore::CreateSemaphore_internal)> {
  static const MethodInfo* get() {
    static auto* initialCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maximumCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Semaphore*), "CreateSemaphore_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialCount, maximumCount, name, errorCode});
  }
};
// Writing MetadataGetter for method: System::Threading::Semaphore::CreateSemaphore_icall
// Il2CppName: CreateSemaphore_icall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, ::Il2CppChar*, int, ByRef<int>)>(&System::Threading::Semaphore::CreateSemaphore_icall)> {
  static const MethodInfo* get() {
    static auto* initialCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maximumCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* name_length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Semaphore*), "CreateSemaphore_icall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialCount, maximumCount, name, name_length, errorCode});
  }
};
// Writing MetadataGetter for method: System::Threading::Semaphore::ReleaseSemaphore_internal
// Il2CppName: ReleaseSemaphore_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, int, ByRef<int>)>(&System::Threading::Semaphore::ReleaseSemaphore_internal)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* releaseCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* previousCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Semaphore*), "ReleaseSemaphore_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, releaseCount, previousCount});
  }
};
