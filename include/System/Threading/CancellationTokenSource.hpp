// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: SparselyPopulatedArray`1<T>
  template<typename T>
  class SparselyPopulatedArray_1;
  // Forward declaring type: CancellationCallbackInfo
  class CancellationCallbackInfo;
  // Forward declaring type: Timer
  class Timer;
  // Forward declaring type: TimerCallback
  class TimerCallback;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
  // Forward declaring type: CancellationTokenRegistration
  struct CancellationTokenRegistration;
  // Forward declaring type: SynchronizationContext
  class SynchronizationContext;
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
  // Forward declaring type: CancellationCallbackCoreWorkArguments
  struct CancellationCallbackCoreWorkArguments;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::CancellationTokenSource);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::CancellationTokenSource*, "System.Threading", "CancellationTokenSource");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.CancellationTokenSource
  // [TokenAttribute] Offset: FFFFFFFF
  class CancellationTokenSource : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Threading::CancellationTokenSource::Linked1CancellationTokenSource
    class Linked1CancellationTokenSource;
    // Nested type: ::System::Threading::CancellationTokenSource::Linked2CancellationTokenSource
    class Linked2CancellationTokenSource;
    // Nested type: ::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource
    class LinkedNCancellationTokenSource;
    public:
    // private System.Threading.ManualResetEvent _kernelEvent
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::ManualResetEvent* kernelEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private System.Threading.SparselyPopulatedArray`1<System.Threading.CancellationCallbackInfo>[] _registeredCallbacksLists
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*> registeredCallbacksLists;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>) == 0x8);
    // private System.Int32 _state
    // Size: 0x4
    // Offset: 0x20
    int state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _threadIDExecutingCallbacks
    // Size: 0x4
    // Offset: 0x24
    int threadIDExecutingCallbacks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x28
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: executingCallback
    char __padding4[0x7] = {};
    // private System.Threading.CancellationCallbackInfo _executingCallback
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::CancellationCallbackInfo* executingCallback;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationCallbackInfo*) == 0x8);
    // private System.Threading.Timer _timer
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::Timer* timer;
    // Field size check
    static_assert(sizeof(::System::Threading::Timer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static readonly System.Threading.CancellationTokenSource s_canceledSource
    static ::System::Threading::CancellationTokenSource* _get_s_canceledSource();
    // Set static field: static readonly System.Threading.CancellationTokenSource s_canceledSource
    static void _set_s_canceledSource(::System::Threading::CancellationTokenSource* value);
    // Get static field: static readonly System.Threading.CancellationTokenSource s_neverCanceledSource
    static ::System::Threading::CancellationTokenSource* _get_s_neverCanceledSource();
    // Set static field: static readonly System.Threading.CancellationTokenSource s_neverCanceledSource
    static void _set_s_neverCanceledSource(::System::Threading::CancellationTokenSource* value);
    // Get static field: static private readonly System.Int32 s_nLists
    static int _get_s_nLists();
    // Set static field: static private readonly System.Int32 s_nLists
    static void _set_s_nLists(int value);
    // static field const value: static private System.Int32 CannotBeCanceled
    static constexpr const int CannotBeCanceled = 0;
    // Get static field: static private System.Int32 CannotBeCanceled
    static int _get_CannotBeCanceled();
    // Set static field: static private System.Int32 CannotBeCanceled
    static void _set_CannotBeCanceled(int value);
    // static field const value: static private System.Int32 NotCanceledState
    static constexpr const int NotCanceledState = 1;
    // Get static field: static private System.Int32 NotCanceledState
    static int _get_NotCanceledState();
    // Set static field: static private System.Int32 NotCanceledState
    static void _set_NotCanceledState(int value);
    // static field const value: static private System.Int32 NotifyingState
    static constexpr const int NotifyingState = 2;
    // Get static field: static private System.Int32 NotifyingState
    static int _get_NotifyingState();
    // Set static field: static private System.Int32 NotifyingState
    static void _set_NotifyingState(int value);
    // static field const value: static private System.Int32 NotifyingCompleteState
    static constexpr const int NotifyingCompleteState = 3;
    // Get static field: static private System.Int32 NotifyingCompleteState
    static int _get_NotifyingCompleteState();
    // Set static field: static private System.Int32 NotifyingCompleteState
    static void _set_NotifyingCompleteState(int value);
    // Get static field: static private readonly System.Threading.TimerCallback s_timerCallback
    static ::System::Threading::TimerCallback* _get_s_timerCallback();
    // Set static field: static private readonly System.Threading.TimerCallback s_timerCallback
    static void _set_s_timerCallback(::System::Threading::TimerCallback* value);
    // Get instance field reference: private System.Threading.ManualResetEvent _kernelEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn__kernelEvent();
    // Get instance field reference: private System.Threading.SparselyPopulatedArray`1<System.Threading.CancellationCallbackInfo>[] _registeredCallbacksLists
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>& dyn__registeredCallbacksLists();
    // Get instance field reference: private System.Int32 _state
    [[deprecated("Use field access instead!")]] int& dyn__state();
    // Get instance field reference: private System.Int32 _threadIDExecutingCallbacks
    [[deprecated("Use field access instead!")]] int& dyn__threadIDExecutingCallbacks();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Threading.CancellationCallbackInfo _executingCallback
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationCallbackInfo*& dyn__executingCallback();
    // Get instance field reference: private System.Threading.Timer _timer
    [[deprecated("Use field access instead!")]] ::System::Threading::Timer*& dyn__timer();
    // public System.Boolean get_IsCancellationRequested()
    // Offset: 0x46C06F0
    bool get_IsCancellationRequested();
    // System.Boolean get_IsCancellationCompleted()
    // Offset: 0x46C2A44
    bool get_IsCancellationCompleted();
    // System.Boolean get_IsDisposed()
    // Offset: 0x46C2C60
    bool get_IsDisposed();
    // System.Int32 get_ThreadIDExecutingCallbacks()
    // Offset: 0x46C2A60
    int get_ThreadIDExecutingCallbacks();
    // System.Void set_ThreadIDExecutingCallbacks(System.Int32 value)
    // Offset: 0x46C2C68
    void set_ThreadIDExecutingCallbacks(int value);
    // public System.Threading.CancellationToken get_Token()
    // Offset: 0x46C2C8C
    ::System::Threading::CancellationToken get_Token();
    // System.Threading.CancellationCallbackInfo get_ExecutingCallback()
    // Offset: 0x46C2D10
    ::System::Threading::CancellationCallbackInfo* get_ExecutingCallback();
    // public System.Void .ctor(System.TimeSpan delay)
    // Offset: 0x46C2D5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CancellationTokenSource* New_ctor(::System::TimeSpan delay) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CancellationTokenSource*, creationType>(delay)));
    }
    // public System.Void .ctor(System.Int32 millisecondsDelay)
    // Offset: 0x46C2ED0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CancellationTokenSource* New_ctor(int millisecondsDelay) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CancellationTokenSource*, creationType>(millisecondsDelay)));
    }
    // private System.Void InitializeWithTimer(System.Int32 millisecondsDelay)
    // Offset: 0x46C2E14
    void InitializeWithTimer(int millisecondsDelay);
    // public System.Void Cancel()
    // Offset: 0x46C2F5C
    void Cancel();
    // public System.Void Cancel(System.Boolean throwOnFirstException)
    // Offset: 0x46C2F78
    void Cancel(bool throwOnFirstException);
    // public System.Void CancelAfter(System.Int32 millisecondsDelay)
    // Offset: 0x46C3050
    void CancelAfter(int millisecondsDelay);
    // static private System.Void TimerCallbackLogic(System.Object obj)
    // Offset: 0x46C3238
    static void TimerCallbackLogic(::Il2CppObject* obj);
    // public System.Void Dispose()
    // Offset: 0x46C3350
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x46C33BC
    void Dispose(bool disposing);
    // System.Void ThrowIfDisposed()
    // Offset: 0x46C2CBC
    void ThrowIfDisposed();
    // static private System.Void ThrowObjectDisposedException()
    // Offset: 0x46C3458
    static void ThrowObjectDisposedException();
    // System.Threading.CancellationTokenRegistration InternalRegister(System.Action`1<System.Object> callback, System.Object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext)
    // Offset: 0x46C0B9C
    ::System::Threading::CancellationTokenRegistration InternalRegister(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* stateForCallback, ::System::Threading::SynchronizationContext* targetSyncContext, ::System::Threading::ExecutionContext* executionContext);
    // private System.Void NotifyCancellation(System.Boolean throwOnFirstException)
    // Offset: 0x46C2FA0
    void NotifyCancellation(bool throwOnFirstException);
    // private System.Void ExecuteCallbackHandlers(System.Boolean throwOnFirstException)
    // Offset: 0x46C3548
    void ExecuteCallbackHandlers(bool throwOnFirstException);
    // private System.Void CancellationCallbackCoreWork_OnSyncContext(System.Object obj)
    // Offset: 0x46C3B08
    void CancellationCallbackCoreWork_OnSyncContext(::Il2CppObject* obj);
    // private System.Void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args)
    // Offset: 0x46C3A4C
    void CancellationCallbackCoreWork(::System::Threading::CancellationCallbackCoreWorkArguments args);
    // static public System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2)
    // Offset: 0x46C3C84
    static ::System::Threading::CancellationTokenSource* CreateLinkedTokenSource(::System::Threading::CancellationToken token1, ::System::Threading::CancellationToken token2);
    // static System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token)
    // Offset: 0x46C3F4C
    static ::System::Threading::CancellationTokenSource* CreateLinkedTokenSource(::System::Threading::CancellationToken token);
    // System.Void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo)
    // Offset: 0x46C2A78
    void WaitForCallbackToComplete(::System::Threading::CancellationCallbackInfo* callbackInfo);
    // static private System.Void .cctor()
    // Offset: 0x46C3FF0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x46C2D28
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CancellationTokenSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CancellationTokenSource*, creationType>()));
    }
  }; // System.Threading.CancellationTokenSource
  #pragma pack(pop)
  static check_size<sizeof(CancellationTokenSource), 56 + sizeof(::System::Threading::Timer*)> __System_Threading_CancellationTokenSourceSizeCheck;
  static_assert(sizeof(CancellationTokenSource) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_IsCancellationRequested
// Il2CppName: get_IsCancellationRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_IsCancellationRequested)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_IsCancellationRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_IsCancellationCompleted
// Il2CppName: get_IsCancellationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_IsCancellationCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_IsCancellationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_IsDisposed
// Il2CppName: get_IsDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_IsDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_IsDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks
// Il2CppName: get_ThreadIDExecutingCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks
// Il2CppName: set_ThreadIDExecutingCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(int)>(&System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "set_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_Token
// Il2CppName: get_Token
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationToken (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_Token)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_Token", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::get_ExecutingCallback
// Il2CppName: get_ExecutingCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationCallbackInfo* (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::get_ExecutingCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "get_ExecutingCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::InitializeWithTimer
// Il2CppName: InitializeWithTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(int)>(&System::Threading::CancellationTokenSource::InitializeWithTimer)> {
  static const MethodInfo* get() {
    static auto* millisecondsDelay = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "InitializeWithTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsDelay});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(bool)>(&System::Threading::CancellationTokenSource::Cancel)> {
  static const MethodInfo* get() {
    static auto* throwOnFirstException = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwOnFirstException});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::CancelAfter
// Il2CppName: CancelAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(int)>(&System::Threading::CancellationTokenSource::CancelAfter)> {
  static const MethodInfo* get() {
    static auto* millisecondsDelay = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "CancelAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsDelay});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::TimerCallbackLogic
// Il2CppName: TimerCallbackLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&System::Threading::CancellationTokenSource::TimerCallbackLogic)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "TimerCallbackLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(bool)>(&System::Threading::CancellationTokenSource::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::ThrowIfDisposed
// Il2CppName: ThrowIfDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)()>(&System::Threading::CancellationTokenSource::ThrowIfDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "ThrowIfDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::ThrowObjectDisposedException
// Il2CppName: ThrowObjectDisposedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::CancellationTokenSource::ThrowObjectDisposedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "ThrowObjectDisposedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::InternalRegister
// Il2CppName: InternalRegister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationTokenRegistration (System::Threading::CancellationTokenSource::*)(::System::Action_1<::Il2CppObject*>*, ::Il2CppObject*, ::System::Threading::SynchronizationContext*, ::System::Threading::ExecutionContext*)>(&System::Threading::CancellationTokenSource::InternalRegister)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* stateForCallback = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* targetSyncContext = &::il2cpp_utils::GetClassFromName("System.Threading", "SynchronizationContext")->byval_arg;
    static auto* executionContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "InternalRegister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, stateForCallback, targetSyncContext, executionContext});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::NotifyCancellation
// Il2CppName: NotifyCancellation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(bool)>(&System::Threading::CancellationTokenSource::NotifyCancellation)> {
  static const MethodInfo* get() {
    static auto* throwOnFirstException = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "NotifyCancellation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwOnFirstException});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::ExecuteCallbackHandlers
// Il2CppName: ExecuteCallbackHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(bool)>(&System::Threading::CancellationTokenSource::ExecuteCallbackHandlers)> {
  static const MethodInfo* get() {
    static auto* throwOnFirstException = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "ExecuteCallbackHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwOnFirstException});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext
// Il2CppName: CancellationCallbackCoreWork_OnSyncContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(::Il2CppObject*)>(&System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "CancellationCallbackCoreWork_OnSyncContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::CancellationCallbackCoreWork
// Il2CppName: CancellationCallbackCoreWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(::System::Threading::CancellationCallbackCoreWorkArguments)>(&System::Threading::CancellationTokenSource::CancellationCallbackCoreWork)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationCallbackCoreWorkArguments")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "CancellationCallbackCoreWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::CreateLinkedTokenSource
// Il2CppName: CreateLinkedTokenSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationTokenSource* (*)(::System::Threading::CancellationToken, ::System::Threading::CancellationToken)>(&System::Threading::CancellationTokenSource::CreateLinkedTokenSource)> {
  static const MethodInfo* get() {
    static auto* token1 = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    static auto* token2 = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "CreateLinkedTokenSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token1, token2});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::CreateLinkedTokenSource
// Il2CppName: CreateLinkedTokenSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationTokenSource* (*)(::System::Threading::CancellationToken)>(&System::Threading::CancellationTokenSource::CreateLinkedTokenSource)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "CreateLinkedTokenSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::WaitForCallbackToComplete
// Il2CppName: WaitForCallbackToComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::CancellationTokenSource::*)(::System::Threading::CancellationCallbackInfo*)>(&System::Threading::CancellationTokenSource::WaitForCallbackToComplete)> {
  static const MethodInfo* get() {
    static auto* callbackInfo = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationCallbackInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), "WaitForCallbackToComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackInfo});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::CancellationTokenSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::CancellationTokenSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::CancellationTokenSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
