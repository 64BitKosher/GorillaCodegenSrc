// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: Lock
  class Lock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Lock);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Lock*, "System.Threading", "Lock");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Lock
  // [TokenAttribute] Offset: FFFFFFFF
  class Lock : public ::Il2CppObject {
    public:
    public:
    // private System.Object _lock
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept {
      return lock;
    }
    // Get instance field reference: private System.Object _lock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lock();
    // public System.Void Acquire()
    // Offset: 0x46C4660
    void Acquire();
    // public System.Void Release()
    // Offset: 0x46C4684
    void Release();
    // public System.Void .ctor()
    // Offset: 0x46C4694
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Lock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Lock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Lock*, creationType>()));
    }
  }; // System.Threading.Lock
  #pragma pack(pop)
  static check_size<sizeof(Lock), 16 + sizeof(::Il2CppObject*)> __System_Threading_LockSizeCheck;
  static_assert(sizeof(Lock) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Lock::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Lock::*)()>(&System::Threading::Lock::Acquire)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Lock*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Lock::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Lock::*)()>(&System::Threading::Lock::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Lock*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Lock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
