// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LowLevelDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class LowLevelDictionary_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: CausalityTraceLevel
  struct CausalityTraceLevel;
  // Forward declaring type: CausalityRelation
  struct CausalityRelation;
  // Forward declaring type: CausalitySynchronousWork
  struct CausalitySynchronousWork;
}
// Forward declaring namespace: Internal::Runtime::Augments
namespace Internal::Runtime::Augments {
  // Forward declaring type: AsyncStatus
  struct AsyncStatus;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: DebuggerSupport
  class DebuggerSupport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Tasks::DebuggerSupport);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Tasks::DebuggerSupport*, "System.Threading.Tasks", "DebuggerSupport");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.DebuggerSupport
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class DebuggerSupport : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.LowLevelDictionary`2<System.Int32,System.Threading.Tasks.Task> s_activeTasks
    static ::System::Collections::Generic::LowLevelDictionary_2<int, ::System::Threading::Tasks::Task*>* _get_s_activeTasks();
    // Set static field: static private readonly System.Collections.Generic.LowLevelDictionary`2<System.Int32,System.Threading.Tasks.Task> s_activeTasks
    static void _set_s_activeTasks(::System::Collections::Generic::LowLevelDictionary_2<int, ::System::Threading::Tasks::Task*>* value);
    // Get static field: static private readonly System.Object s_activeTasksLock
    static ::Il2CppObject* _get_s_activeTasksLock();
    // Set static field: static private readonly System.Object s_activeTasksLock
    static void _set_s_activeTasksLock(::Il2CppObject* value);
    // static public System.Boolean get_LoggingOn()
    // Offset: 0x46D2C64
    static bool get_LoggingOn();
    // static public System.Void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.String operationName, System.UInt64 relatedContext)
    // Offset: 0x46D2C6C
    static void TraceOperationCreation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::StringW operationName, uint64_t relatedContext);
    // static public System.Void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, Internal.Runtime.Augments.AsyncStatus status)
    // Offset: 0x46D2C70
    static void TraceOperationCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::Internal::Runtime::Augments::AsyncStatus status);
    // static public System.Void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalityRelation relation)
    // Offset: 0x46D2C74
    static void TraceOperationRelation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::System::Threading::Tasks::CausalityRelation relation);
    // static public System.Void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalitySynchronousWork work)
    // Offset: 0x46D2C78
    static void TraceSynchronousWorkStart(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::System::Threading::Tasks::CausalitySynchronousWork work);
    // static public System.Void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work)
    // Offset: 0x46D2C7C
    static void TraceSynchronousWorkCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::CausalitySynchronousWork work);
    // static public System.Void AddToActiveTasks(System.Threading.Tasks.Task task)
    // Offset: 0x46D2C80
    static void AddToActiveTasks(::System::Threading::Tasks::Task* task);
    // static private System.Void AddToActiveTasksNonInlined(System.Threading.Tasks.Task task)
    // Offset: 0x46D2D14
    static void AddToActiveTasksNonInlined(::System::Threading::Tasks::Task* task);
    // static public System.Void RemoveFromActiveTasks(System.Threading.Tasks.Task task)
    // Offset: 0x46D2EFC
    static void RemoveFromActiveTasks(::System::Threading::Tasks::Task* task);
    // static private System.Void RemoveFromActiveTasksNonInlined(System.Threading.Tasks.Task task)
    // Offset: 0x46D2F90
    static void RemoveFromActiveTasksNonInlined(::System::Threading::Tasks::Task* task);
    // static private System.Void .cctor()
    // Offset: 0x46D30E8
    static void _cctor();
  }; // System.Threading.Tasks.DebuggerSupport
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::get_LoggingOn
// Il2CppName: get_LoggingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Threading::Tasks::DebuggerSupport::get_LoggingOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "get_LoggingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::TraceOperationCreation
// Il2CppName: TraceOperationCreation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::CausalityTraceLevel, ::System::Threading::Tasks::Task*, ::StringW, uint64_t)>(&System::Threading::Tasks::DebuggerSupport::TraceOperationCreation)> {
  static const MethodInfo* get() {
    static auto* traceLevel = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityTraceLevel")->byval_arg;
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    static auto* operationName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relatedContext = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "TraceOperationCreation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{traceLevel, task, operationName, relatedContext});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::TraceOperationCompletion
// Il2CppName: TraceOperationCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::CausalityTraceLevel, ::System::Threading::Tasks::Task*, ::Internal::Runtime::Augments::AsyncStatus)>(&System::Threading::Tasks::DebuggerSupport::TraceOperationCompletion)> {
  static const MethodInfo* get() {
    static auto* traceLevel = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityTraceLevel")->byval_arg;
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("Internal.Runtime.Augments", "AsyncStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "TraceOperationCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{traceLevel, task, status});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::TraceOperationRelation
// Il2CppName: TraceOperationRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::CausalityTraceLevel, ::System::Threading::Tasks::Task*, ::System::Threading::Tasks::CausalityRelation)>(&System::Threading::Tasks::DebuggerSupport::TraceOperationRelation)> {
  static const MethodInfo* get() {
    static auto* traceLevel = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityTraceLevel")->byval_arg;
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    static auto* relation = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityRelation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "TraceOperationRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{traceLevel, task, relation});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkStart
// Il2CppName: TraceSynchronousWorkStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::CausalityTraceLevel, ::System::Threading::Tasks::Task*, ::System::Threading::Tasks::CausalitySynchronousWork)>(&System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkStart)> {
  static const MethodInfo* get() {
    static auto* traceLevel = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityTraceLevel")->byval_arg;
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    static auto* work = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalitySynchronousWork")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "TraceSynchronousWorkStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{traceLevel, task, work});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkCompletion
// Il2CppName: TraceSynchronousWorkCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::CausalityTraceLevel, ::System::Threading::Tasks::CausalitySynchronousWork)>(&System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkCompletion)> {
  static const MethodInfo* get() {
    static auto* traceLevel = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalityTraceLevel")->byval_arg;
    static auto* work = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "CausalitySynchronousWork")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{traceLevel, work});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::AddToActiveTasks
// Il2CppName: AddToActiveTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::DebuggerSupport::AddToActiveTasks)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "AddToActiveTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::AddToActiveTasksNonInlined
// Il2CppName: AddToActiveTasksNonInlined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::DebuggerSupport::AddToActiveTasksNonInlined)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "AddToActiveTasksNonInlined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasks
// Il2CppName: RemoveFromActiveTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasks)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "RemoveFromActiveTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasksNonInlined
// Il2CppName: RemoveFromActiveTasksNonInlined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasksNonInlined)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), "RemoveFromActiveTasksNonInlined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::DebuggerSupport::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Tasks::DebuggerSupport::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::DebuggerSupport*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
