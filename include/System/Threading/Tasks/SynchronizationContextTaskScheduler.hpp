// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SynchronizationContext
  class SynchronizationContext;
  // Forward declaring type: SendOrPostCallback
  class SendOrPostCallback;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: SynchronizationContextTaskScheduler
  class SynchronizationContextTaskScheduler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Tasks::SynchronizationContextTaskScheduler);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Tasks::SynchronizationContextTaskScheduler*, "System.Threading.Tasks", "SynchronizationContextTaskScheduler");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.SynchronizationContextTaskScheduler
  // [TokenAttribute] Offset: FFFFFFFF
  class SynchronizationContextTaskScheduler : public ::System::Threading::Tasks::TaskScheduler {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    // Nested type: ::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c
    class $$c;
    public:
    // private System.Threading.SynchronizationContext m_synchronizationContext
    // Size: 0x8
    // Offset: 0x18
    ::System::Threading::SynchronizationContext* m_synchronizationContext;
    // Field size check
    static_assert(sizeof(::System::Threading::SynchronizationContext*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
    static ::System::Threading::SendOrPostCallback* _get_s_postCallback();
    // Set static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
    static void _set_s_postCallback(::System::Threading::SendOrPostCallback* value);
    // Get instance field reference: private System.Threading.SynchronizationContext m_synchronizationContext
    [[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& dyn_m_synchronizationContext();
    // System.Void .ctor()
    // Offset: 0x46DE800
    // Implemented from: System.Threading.Tasks.TaskScheduler
    // Base method: System.Void TaskScheduler::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SynchronizationContextTaskScheduler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SynchronizationContextTaskScheduler*, creationType>()));
    }
    // protected internal override System.Void QueueTask(System.Threading.Tasks.Task task)
    // Offset: 0x46DEA3C
    // Implemented from: System.Threading.Tasks.TaskScheduler
    // Base method: System.Void TaskScheduler::QueueTask(System.Threading.Tasks.Task task)
    void QueueTask(::System::Threading::Tasks::Task* task);
    // protected override System.Boolean TryExecuteTaskInline(System.Threading.Tasks.Task task, System.Boolean taskWasPreviouslyQueued)
    // Offset: 0x46DEAC0
    // Implemented from: System.Threading.Tasks.TaskScheduler
    // Base method: System.Boolean TaskScheduler::TryExecuteTaskInline(System.Threading.Tasks.Task task, System.Boolean taskWasPreviouslyQueued)
    bool TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued);
    // static private System.Void .cctor()
    // Offset: 0x46DEB08
    // Implemented from: System.Threading.Tasks.TaskScheduler
    // Base method: System.Void TaskScheduler::.cctor()
    static void _cctor();
  }; // System.Threading.Tasks.SynchronizationContextTaskScheduler
  #pragma pack(pop)
  static check_size<sizeof(SynchronizationContextTaskScheduler), 24 + sizeof(::System::Threading::SynchronizationContext*)> __System_Threading_Tasks_SynchronizationContextTaskSchedulerSizeCheck;
  static_assert(sizeof(SynchronizationContextTaskScheduler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Tasks::SynchronizationContextTaskScheduler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Tasks::SynchronizationContextTaskScheduler::QueueTask
// Il2CppName: QueueTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::SynchronizationContextTaskScheduler::*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::SynchronizationContextTaskScheduler::QueueTask)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::SynchronizationContextTaskScheduler*), "QueueTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::SynchronizationContextTaskScheduler::TryExecuteTaskInline
// Il2CppName: TryExecuteTaskInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Tasks::SynchronizationContextTaskScheduler::*)(::System::Threading::Tasks::Task*, bool)>(&System::Threading::Tasks::SynchronizationContextTaskScheduler::TryExecuteTaskInline)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    static auto* taskWasPreviouslyQueued = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::SynchronizationContextTaskScheduler*), "TryExecuteTaskInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task, taskWasPreviouslyQueued});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::SynchronizationContextTaskScheduler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Tasks::SynchronizationContextTaskScheduler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::SynchronizationContextTaskScheduler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
