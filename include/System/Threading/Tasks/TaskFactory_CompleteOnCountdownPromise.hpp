// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*, "System.Threading.Tasks", "TaskFactory/CompleteOnCountdownPromise");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskFactory::CompleteOnCountdownPromise : public ::System::Threading::Tasks::Task_1<::ArrayW<::System::Threading::Tasks::Task*>>/*, public ::System::Threading::Tasks::ITaskCompletionAction*/ {
    public:
    public:
    // private readonly System.Threading.Tasks.Task[] _tasks
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::System::Threading::Tasks::Task*> tasks;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Threading::Tasks::Task*>) == 0x8);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x60
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Threading::Tasks::ITaskCompletionAction
    operator ::System::Threading::Tasks::ITaskCompletionAction() noexcept {
      return *reinterpret_cast<::System::Threading::Tasks::ITaskCompletionAction*>(this);
    }
    // Get instance field reference: private readonly System.Threading.Tasks.Task[] _tasks
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::Tasks::Task*>& dyn__tasks();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // System.Void .ctor(System.Threading.Tasks.Task[] tasksCopy)
    // Offset: 0x46DDF20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskFactory::CompleteOnCountdownPromise* New_ctor(::ArrayW<::System::Threading::Tasks::Task*> tasksCopy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskFactory::CompleteOnCountdownPromise*, creationType>(tasksCopy)));
    }
    // public System.Void Invoke(System.Threading.Tasks.Task completingTask)
    // Offset: 0x46DE050
    void Invoke(::System::Threading::Tasks::Task* completingTask);
    // public System.Boolean get_InvokeMayRunArbitraryCode()
    // Offset: 0x46DE6B8
    bool get_InvokeMayRunArbitraryCode();
    // override System.Boolean get_ShouldNotifyDebuggerOfWaitCompletion()
    // Offset: 0x46DE6C0
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Boolean Task::get_ShouldNotifyDebuggerOfWaitCompletion()
    bool get_ShouldNotifyDebuggerOfWaitCompletion();
  }; // System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::*)(::System::Threading::Tasks::Task*)>(&System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::Invoke)> {
  static const MethodInfo* get() {
    static auto* completingTask = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{completingTask});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_InvokeMayRunArbitraryCode
// Il2CppName: get_InvokeMayRunArbitraryCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::*)()>(&System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_InvokeMayRunArbitraryCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*), "get_InvokeMayRunArbitraryCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_ShouldNotifyDebuggerOfWaitCompletion
// Il2CppName: get_ShouldNotifyDebuggerOfWaitCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::*)()>(&System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_ShouldNotifyDebuggerOfWaitCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*), "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
