// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.ICriticalNotifyCompletion
#include "System/Runtime/CompilerServices/ICriticalNotifyCompletion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: ForceAsyncAwaiter
  struct ForceAsyncAwaiter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Tasks::ForceAsyncAwaiter, "System.Threading.Tasks", "ForceAsyncAwaiter");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.Tasks.ForceAsyncAwaiter
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct ForceAsyncAwaiter/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::ICriticalNotifyCompletion*/ {
    public:
    public:
    // private readonly System.Threading.Tasks.Task _task
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::Task* task;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    public:
    // Creating value type constructor for type: ForceAsyncAwaiter
    constexpr ForceAsyncAwaiter(::System::Threading::Tasks::Task* task_ = {}) noexcept : task{task_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::ICriticalNotifyCompletion
    operator ::System::Runtime::CompilerServices::ICriticalNotifyCompletion() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::ICriticalNotifyCompletion*>(this);
    }
    // Creating conversion operator: operator ::System::Threading::Tasks::Task*
    constexpr operator ::System::Threading::Tasks::Task*() const noexcept {
      return task;
    }
    // Get instance field reference: private readonly System.Threading.Tasks.Task _task
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn__task();
    // System.Void .ctor(System.Threading.Tasks.Task task)
    // Offset: 0x46D2B5C
    // ABORTED: conflicts with another method.  ForceAsyncAwaiter(::System::Threading::Tasks::Task* task);
    // public System.Threading.Tasks.ForceAsyncAwaiter GetAwaiter()
    // Offset: 0x46D2B64
    ::System::Threading::Tasks::ForceAsyncAwaiter GetAwaiter();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x46D2B6C
    bool get_IsCompleted();
    // public System.Void GetResult()
    // Offset: 0x46D2B74
    void GetResult();
    // public System.Void OnCompleted(System.Action action)
    // Offset: 0x46D2BB4
    void OnCompleted(::System::Action* action);
    // public System.Void UnsafeOnCompleted(System.Action action)
    // Offset: 0x46D2C0C
    void UnsafeOnCompleted(::System::Action* action);
  }; // System.Threading.Tasks.ForceAsyncAwaiter
  #pragma pack(pop)
  static check_size<sizeof(ForceAsyncAwaiter), 0 + sizeof(::System::Threading::Tasks::Task*)> __System_Threading_Tasks_ForceAsyncAwaiterSizeCheck;
  static_assert(sizeof(ForceAsyncAwaiter) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::ForceAsyncAwaiter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::GetAwaiter
// Il2CppName: GetAwaiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::ForceAsyncAwaiter (System::Threading::Tasks::ForceAsyncAwaiter::*)()>(&System::Threading::Tasks::ForceAsyncAwaiter::GetAwaiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::ForceAsyncAwaiter), "GetAwaiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Tasks::ForceAsyncAwaiter::*)()>(&System::Threading::Tasks::ForceAsyncAwaiter::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::ForceAsyncAwaiter), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::GetResult
// Il2CppName: GetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::ForceAsyncAwaiter::*)()>(&System::Threading::Tasks::ForceAsyncAwaiter::GetResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::ForceAsyncAwaiter), "GetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::OnCompleted
// Il2CppName: OnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::ForceAsyncAwaiter::*)(::System::Action*)>(&System::Threading::Tasks::ForceAsyncAwaiter::OnCompleted)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::ForceAsyncAwaiter), "OnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::ForceAsyncAwaiter::UnsafeOnCompleted
// Il2CppName: UnsafeOnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::ForceAsyncAwaiter::*)(::System::Action*)>(&System::Threading::Tasks::ForceAsyncAwaiter::UnsafeOnCompleted)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::ForceAsyncAwaiter), "UnsafeOnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
