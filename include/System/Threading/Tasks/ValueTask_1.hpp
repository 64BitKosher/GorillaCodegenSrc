// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Skipping declaration: ValueTaskSourceAsTask because it is already included!
}
// Forward declaring namespace: System::Threading::Tasks::Sources
namespace System::Threading::Tasks::Sources {
  // Forward declaring type: IValueTaskSource`1<TResult>
  template<typename TResult>
  class IValueTaskSource_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: ValueTask`1<TResult>
  template<typename TResult>
  struct ValueTask_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Threading::Tasks::ValueTask_1, "System.Threading.Tasks", "ValueTask`1");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.Tasks.ValueTask`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [AsyncMethodBuilderAttribute] Offset: FFFFFFFF
  template<typename TResult>
  struct ValueTask_1/*, public ::System::ValueType, public ::System::IEquatable_1<::System::Threading::Tasks::ValueTask_1<TResult>>*/ {
    public:
    // Nested type: ::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask<TResult>
    class ValueTaskSourceAsTask;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask
    // [TokenAttribute] Offset: FFFFFFFF
    class ValueTaskSourceAsTask : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::Threading::Tasks::Task_1<TResult> {
      public:
      using declaring_type = ValueTask_1<TResult>;
      static constexpr std::string_view NESTED_NAME = "ValueTaskSourceAsTask";
      static constexpr bool IS_VALUE_TYPE = false;
      // Nested type: ::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c<TResult>
      class $$c;
      // WARNING Size may be invalid!
      // Autogenerated type: System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask/<>c
      // [TokenAttribute] Offset: FFFFFFFF
      // [CompilerGeneratedAttribute] Offset: FFFFFFFF
      class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
        public:
        using declaring_type = typename ValueTask_1<TResult>::ValueTaskSourceAsTask*;
        static constexpr std::string_view NESTED_NAME = "<>c";
        static constexpr bool IS_VALUE_TYPE = false;
        // Autogenerated static field getter
        // Get static field: static public readonly System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask/<>c<TResult> <>9
        static typename ::System::Threading::Tasks::ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c* _get_$$9() {
          static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c::_get_$$9");
          return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::System::Threading::Tasks::ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c*>::get(), "<>9")));
        }
        // Autogenerated static field setter
        // Set static field: static public readonly System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask/<>c<TResult> <>9
        static void _set_$$9(typename ::System::Threading::Tasks::ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c* value) {
          static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c::_set_$$9");
          THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c*>::get(), "<>9", value)));
        }
        // static private System.Void .cctor()
        // Offset: 0xFFFFFFFFFFFFFFFF
        static void _cctor() {
          static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c::.cctor");
          static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
          ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
        }
        // System.Void <.cctor>b__4_0(System.Object state)
        // Offset: 0xFFFFFFFFFFFFFFFF
        void $_cctor$b__4_0(::Il2CppObject* state) {
          static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c::<.cctor>b__4_0");
          static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
          ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
        }
        // public System.Void .ctor()
        // Offset: 0xFFFFFFFFFFFFFFFF
        // Implemented from: System.Object
        // Base method: System.Void Object::.ctor()
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        static typename ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c* New_ctor() {
          static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::$$c::.ctor");
          return THROW_UNLESS((::il2cpp_utils::New<typename ValueTask_1<TResult>::ValueTaskSourceAsTask::$$c*, creationType>()));
        }
      }; // System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask/<>c
      // Could not write size check! Type: System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask/<>c is generic, or has no fields that are valid for size checks!
      public:
      // private System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> _source
      // Size: 0x8
      // Offset: 0x0
      ::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>* source;
      // Field size check
      static_assert(sizeof(::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>*) == 0x8);
      // private readonly System.Int16 _token
      // Size: 0x2
      // Offset: 0x0
      int16_t token;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      public:
      // Autogenerated static field getter
      // Get static field: static private readonly System.Action`1<System.Object> s_completionAction
      static ::System::Action_1<::Il2CppObject*>* _get_s_completionAction() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::_get_s_completionAction");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask*>::get(), "s_completionAction"));
      }
      // Autogenerated static field setter
      // Set static field: static private readonly System.Action`1<System.Object> s_completionAction
      static void _set_s_completionAction(::System::Action_1<::Il2CppObject*>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::_set_s_completionAction");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask*>::get(), "s_completionAction", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> _source
      [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>*& dyn__source() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::dyn__source");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_source"))->offset;
        return *reinterpret_cast<::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int16 _token
      [[deprecated("Use field access instead!")]] int16_t& dyn__token() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::dyn__token");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_token"))->offset;
        return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> source, System.Int16 token)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ValueTask_1<TResult>::ValueTaskSourceAsTask* New_ctor(::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>* source, int16_t token) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ValueTask_1<TResult>::ValueTaskSourceAsTask*, creationType>(source, token)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Threading.Tasks.Task
      // Base method: System.Void Task::.cctor()
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ValueTaskSourceAsTask::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ValueTask_1<TResult>::ValueTaskSourceAsTask*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
    }; // System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask
    // Could not write size check! Type: System.Threading.Tasks.ValueTask`1/ValueTaskSourceAsTask is generic, or has no fields that are valid for size checks!
    public:
    // readonly System.Object _obj
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* obj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // readonly TResult _result
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TResult result;
    // readonly System.Int16 _token
    // Size: 0x2
    // Offset: 0x0
    int16_t token;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // readonly System.Boolean _continueOnCapturedContext
    // Size: 0x1
    // Offset: 0x0
    bool continueOnCapturedContext;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ValueTask_1
    constexpr ValueTask_1(::Il2CppObject* obj_ = {}, TResult result_ = {}, int16_t token_ = {}, bool continueOnCapturedContext_ = {}) noexcept : obj{obj_}, result{result_}, token{token_}, continueOnCapturedContext{continueOnCapturedContext_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::Threading::Tasks::ValueTask_1<TResult>>
    operator ::System::IEquatable_1<::System::Threading::Tasks::ValueTask_1<TResult>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::Threading::Tasks::ValueTask_1<TResult>>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Threading.Tasks.Task`1<TResult> s_canceledTask
    static ::System::Threading::Tasks::Task_1<TResult>* _get_s_canceledTask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::_get_s_canceledTask");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task_1<TResult>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueTask_1<TResult>>::get(), "s_canceledTask"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Threading.Tasks.Task`1<TResult> s_canceledTask
    static void _set_s_canceledTask(::System::Threading::Tasks::Task_1<TResult>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::_set_s_canceledTask");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ValueTask_1<TResult>>::get(), "s_canceledTask", value));
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.Object _obj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__obj() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::dyn__obj");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obj"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly TResult _result
    [[deprecated("Use field access instead!")]] TResult& dyn__result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::dyn__result");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_result"))->offset;
      return *reinterpret_cast<TResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.Int16 _token
    [[deprecated("Use field access instead!")]] int16_t& dyn__token() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::dyn__token");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_token"))->offset;
      return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.Boolean _continueOnCapturedContext
    [[deprecated("Use field access instead!")]] bool& dyn__continueOnCapturedContext() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::dyn__continueOnCapturedContext");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continueOnCapturedContext"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(TResult result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ValueTask_1(TResult result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
    }
    // public System.Void .ctor(System.Threading.Tasks.Task`1<TResult> task)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ValueTask_1(::System::Threading::Tasks::Task_1<TResult>* task) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
    }
    // public System.Void .ctor(System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> source, System.Int16 token)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ValueTask_1(::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>* source, int16_t token) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(token)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, token);
    }
    // private System.Void .ctor(System.Object obj, TResult result, System.Int16 token, System.Boolean continueOnCapturedContext)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  ValueTask_1(::Il2CppObject* obj, TResult result, int16_t token, bool continueOnCapturedContext)
    // public System.Boolean Equals(System.Threading.Tasks.ValueTask`1<TResult> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::System::Threading::Tasks::ValueTask_1<TResult> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Tasks::ValueTask_1<TResult>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.Threading.Tasks.Task`1<TResult> AsTask()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<TResult>* AsTask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::AsTask");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AsTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<TResult>*, false>(this, ___internal__method);
    }
    // private System.Threading.Tasks.Task`1<TResult> GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource`1<TResult> t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<TResult>* GetTaskForValueTaskSource(::System::Threading::Tasks::Sources::IValueTaskSource_1<TResult>* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::GetTaskForValueTaskSource");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTaskForValueTaskSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<TResult>*, false>(this, ___internal__method, t);
    }
    // public System.Boolean get_IsCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::get_IsCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsCompletedSuccessfully()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCompletedSuccessfully() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::get_IsCompletedSuccessfully");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompletedSuccessfully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public TResult get_Result()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult get_Result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::get_Result");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method);
    }
    // public System.Runtime.CompilerServices.ValueTaskAwaiter`1<TResult> GetAwaiter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Runtime::CompilerServices::ValueTaskAwaiter_1<TResult> GetAwaiter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::GetAwaiter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ValueTaskAwaiter_1<TResult>, false>(this, ___internal__method);
    }
    // public System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1<TResult> ConfigureAwait(System.Boolean continueOnCapturedContext)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Runtime::CompilerServices::ConfiguredValueTaskAwaitable_1<TResult> ConfigureAwait(bool continueOnCapturedContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ConfigureAwait");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ConfiguredValueTaskAwaitable_1<TResult>, false>(this, ___internal__method, continueOnCapturedContext);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // System.Threading.Tasks.ValueTask`1
  // Could not write size check! Type: System.Threading.Tasks.ValueTask`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
