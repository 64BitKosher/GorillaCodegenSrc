// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.IComparer
#include "System/Collections/IComparer.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Timer::TimerComparer, "System.Threading", "Timer/TimerComparer");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.Timer/TimerComparer
  // [TokenAttribute] Offset: FFFFFFFF
  struct Timer::TimerComparer/*, public ::System::ValueType, public ::System::Collections::IComparer, public ::System::Collections::Generic::IComparer_1<::System::Threading::Timer*>*/ {
    public:
    // Creating value type constructor for type: TimerComparer
    constexpr TimerComparer() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IComparer
    operator ::System::Collections::IComparer() noexcept {
      return *reinterpret_cast<::System::Collections::IComparer*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::System::Threading::Timer*>
    operator ::System::Collections::Generic::IComparer_1<::System::Threading::Timer*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::System::Threading::Timer*>*>(this);
    }
    // private System.Int32 System.Collections.IComparer.Compare(System.Object x, System.Object y)
    // Offset: 0x46D049C
    int System_Collections_IComparer_Compare(::Il2CppObject* x, ::Il2CppObject* y);
    // public System.Int32 Compare(System.Threading.Timer tx, System.Threading.Timer ty)
    // Offset: 0x46D0534
    int Compare(::System::Threading::Timer* tx, ::System::Threading::Timer* ty);
  }; // System.Threading.Timer/TimerComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Timer::TimerComparer::System_Collections_IComparer_Compare
// Il2CppName: System.Collections.IComparer.Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::Timer::TimerComparer::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Threading::Timer::TimerComparer::System_Collections_IComparer_Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Timer::TimerComparer), "System.Collections.IComparer.Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::Threading::Timer::TimerComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::Timer::TimerComparer::*)(::System::Threading::Timer*, ::System::Threading::Timer*)>(&System::Threading::Timer::TimerComparer::Compare)> {
  static const MethodInfo* get() {
    static auto* tx = &::il2cpp_utils::GetClassFromName("System.Threading", "Timer")->byval_arg;
    static auto* ty = &::il2cpp_utils::GetClassFromName("System.Threading", "Timer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Timer::TimerComparer), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tx, ty});
  }
};
