// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Threading::ThreadPool::$$c__DisplayClass17_0_1, "System.Threading", "ThreadPool/<>c__DisplayClass17_0`1");
// Type namespace: System.Threading
namespace System::Threading {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.ThreadPool/<>c__DisplayClass17_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename TState>
  class ThreadPool::$$c__DisplayClass17_0_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Action`1<TState> callBack
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<TState>* callBack;
    // Field size check
    static_assert(sizeof(::System::Action_1<TState>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action_1<TState>*
    constexpr operator ::System::Action_1<TState>*() const noexcept {
      return callBack;
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Action`1<TState> callBack
    [[deprecated("Use field access instead!")]] ::System::Action_1<TState>*& dyn_callBack() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::$$c__DisplayClass17_0_1::dyn_callBack");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callBack"))->offset;
      return *reinterpret_cast<::System::Action_1<TState>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void <QueueUserWorkItem>b__0(System.Object x)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $QueueUserWorkItem$b__0(::Il2CppObject* x) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::$$c__DisplayClass17_0_1::<QueueUserWorkItem>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<QueueUserWorkItem>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadPool::$$c__DisplayClass17_0_1<TState>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::$$c__DisplayClass17_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadPool::$$c__DisplayClass17_0_1<TState>*, creationType>()));
    }
  }; // System.Threading.ThreadPool/<>c__DisplayClass17_0`1
  // Could not write size check! Type: System.Threading.ThreadPool/<>c__DisplayClass17_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
