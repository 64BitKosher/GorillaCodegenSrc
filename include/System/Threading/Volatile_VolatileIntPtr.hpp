// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.Volatile
#include "System/Threading/Volatile.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Volatile::VolatileIntPtr, "System.Threading", "Volatile/VolatileIntPtr");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.Volatile/VolatileIntPtr
  // [TokenAttribute] Offset: FFFFFFFF
  struct Volatile::VolatileIntPtr/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr Value
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr Value;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: VolatileIntPtr
    constexpr VolatileIntPtr(::System::IntPtr Value_ = {}) noexcept : Value{Value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return Value;
    }
    // Get instance field reference: public System.IntPtr Value
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_Value();
  }; // System.Threading.Volatile/VolatileIntPtr
  #pragma pack(pop)
  static check_size<sizeof(Volatile::VolatileIntPtr), 0 + sizeof(::System::IntPtr)> __System_Threading_Volatile_VolatileIntPtrSizeCheck;
  static_assert(sizeof(Volatile::VolatileIntPtr) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
