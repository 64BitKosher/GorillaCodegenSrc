// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: SpinWait
  struct SpinWait;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::SpinWait, "System.Threading", "SpinWait");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.SpinWait
  // [TokenAttribute] Offset: FFFFFFFF
  struct SpinWait/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SpinWait
    constexpr SpinWait(int count_ = {}) noexcept : count{count_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return count;
    }
    // Get static field: static readonly System.Int32 SpinCountforSpinBeforeWait
    static int _get_SpinCountforSpinBeforeWait();
    // Set static field: static readonly System.Int32 SpinCountforSpinBeforeWait
    static void _set_SpinCountforSpinBeforeWait(int value);
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // public System.Int32 get_Count()
    // Offset: 0x46C250C
    int get_Count();
    // public System.Boolean get_NextSpinWillYield()
    // Offset: 0x46C2514
    bool get_NextSpinWillYield();
    // public System.Void SpinOnce()
    // Offset: 0x46C2464
    void SpinOnce();
    // public System.Void SpinOnce(System.Int32 sleep1Threshold)
    // Offset: 0x46C20F4
    void SpinOnce(int sleep1Threshold);
    // private System.Void SpinOnceCore(System.Int32 sleep1Threshold)
    // Offset: 0x46C258C
    void SpinOnceCore(int sleep1Threshold);
    // static private System.Void .cctor()
    // Offset: 0x46C2738
    static void _cctor();
  }; // System.Threading.SpinWait
  #pragma pack(pop)
  static check_size<sizeof(SpinWait), 0 + sizeof(int)> __System_Threading_SpinWaitSizeCheck;
  static_assert(sizeof(SpinWait) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::SpinWait::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::SpinWait::*)()>(&System::Threading::SpinWait::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::SpinWait::get_NextSpinWillYield
// Il2CppName: get_NextSpinWillYield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::SpinWait::*)()>(&System::Threading::SpinWait::get_NextSpinWillYield)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), "get_NextSpinWillYield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::SpinWait::SpinOnce
// Il2CppName: SpinOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::SpinWait::*)()>(&System::Threading::SpinWait::SpinOnce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), "SpinOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::SpinWait::SpinOnce
// Il2CppName: SpinOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::SpinWait::*)(int)>(&System::Threading::SpinWait::SpinOnce)> {
  static const MethodInfo* get() {
    static auto* sleep1Threshold = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), "SpinOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sleep1Threshold});
  }
};
// Writing MetadataGetter for method: System::Threading::SpinWait::SpinOnceCore
// Il2CppName: SpinOnceCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::SpinWait::*)(int)>(&System::Threading::SpinWait::SpinOnceCore)> {
  static const MethodInfo* get() {
    static auto* sleep1Threshold = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), "SpinOnceCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sleep1Threshold});
  }
};
// Writing MetadataGetter for method: System::Threading::SpinWait::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::SpinWait::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::SpinWait), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
