// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SynchronizationContext
  class SynchronizationContext;
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::CancellationCallbackInfo::WithSyncContext);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::CancellationCallbackInfo::WithSyncContext*, "System.Threading", "CancellationCallbackInfo/WithSyncContext");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.CancellationCallbackInfo/WithSyncContext
  // [TokenAttribute] Offset: FFFFFFFF
  class CancellationCallbackInfo::WithSyncContext : public ::System::Threading::CancellationCallbackInfo {
    public:
    public:
    // readonly System.Threading.SynchronizationContext TargetSyncContext
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::SynchronizationContext* TargetSyncContext;
    // Field size check
    static_assert(sizeof(::System::Threading::SynchronizationContext*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Threading::SynchronizationContext*
    constexpr operator ::System::Threading::SynchronizationContext*() const noexcept {
      return TargetSyncContext;
    }
    // Get instance field reference: readonly System.Threading.SynchronizationContext TargetSyncContext
    [[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& dyn_TargetSyncContext();
    // System.Void .ctor(System.Action`1<System.Object> callback, System.Object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource, System.Threading.SynchronizationContext targetSyncContext)
    // Offset: 0x46C351C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CancellationCallbackInfo::WithSyncContext* New_ctor(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* stateForCallback, ::System::Threading::ExecutionContext* targetExecutionContext, ::System::Threading::CancellationTokenSource* cancellationTokenSource, ::System::Threading::SynchronizationContext* targetSyncContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::WithSyncContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CancellationCallbackInfo::WithSyncContext*, creationType>(callback, stateForCallback, targetExecutionContext, cancellationTokenSource, targetSyncContext)));
    }
  }; // System.Threading.CancellationCallbackInfo/WithSyncContext
  #pragma pack(pop)
  static check_size<sizeof(CancellationCallbackInfo::WithSyncContext), 48 + sizeof(::System::Threading::SynchronizationContext*)> __System_Threading_CancellationCallbackInfo_WithSyncContextSizeCheck;
  static_assert(sizeof(CancellationCallbackInfo::WithSyncContext) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::CancellationCallbackInfo::WithSyncContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
