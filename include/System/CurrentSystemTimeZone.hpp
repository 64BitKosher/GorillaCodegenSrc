// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeZone
#include "System/TimeZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: CurrentSystemTimeZone
  class CurrentSystemTimeZone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::CurrentSystemTimeZone);
DEFINE_IL2CPP_ARG_TYPE(::System::CurrentSystemTimeZone*, "System", "CurrentSystemTimeZone");
// Type namespace: System
namespace System {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.CurrentSystemTimeZone
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  class CurrentSystemTimeZone : public ::System::TimeZone {
    public:
    public:
    // private System.Int64 m_ticksOffset
    // Size: 0x8
    // Offset: 0x10
    int64_t m_ticksOffset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.String m_standardName
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_standardName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_daylightName
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_daylightName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Collections.Hashtable m_CachedDaylightChanges
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Hashtable* m_CachedDaylightChanges;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Get instance field reference: private System.Int64 m_ticksOffset
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_ticksOffset();
    // Get instance field reference: private System.String m_standardName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_standardName();
    // Get instance field reference: private System.String m_daylightName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_daylightName();
    // Get instance field reference: private readonly System.Collections.Hashtable m_CachedDaylightChanges
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_m_CachedDaylightChanges();
    // static public System.Boolean GetTimeZoneData(System.Int32 year, out System.Int64[] data, out System.String[] names, out System.Boolean daylight_inverted)
    // Offset: 0x463B680
    static bool GetTimeZoneData(int year, ByRef<::ArrayW<int64_t>> data, ByRef<::ArrayW<::StringW>> names, ByRef<bool> daylight_inverted);
    // System.Void .ctor()
    // Offset: 0x463B598
    // Implemented from: System.TimeZone
    // Base method: System.Void TimeZone::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CurrentSystemTimeZone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::CurrentSystemTimeZone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CurrentSystemTimeZone*, creationType>()));
    }
  }; // System.CurrentSystemTimeZone
  #pragma pack(pop)
  static check_size<sizeof(CurrentSystemTimeZone), 40 + sizeof(::System::Collections::Hashtable*)> __System_CurrentSystemTimeZoneSizeCheck;
  static_assert(sizeof(CurrentSystemTimeZone) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::CurrentSystemTimeZone::GetTimeZoneData
// Il2CppName: GetTimeZoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<::ArrayW<int64_t>>, ByRef<::ArrayW<::StringW>>, ByRef<bool>)>(&System::CurrentSystemTimeZone::GetTimeZoneData)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->this_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->this_arg;
    static auto* daylight_inverted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::CurrentSystemTimeZone*), "GetTimeZoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, data, names, daylight_inverted});
  }
};
// Writing MetadataGetter for method: System::CurrentSystemTimeZone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
