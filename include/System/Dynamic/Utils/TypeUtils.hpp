// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Dynamic::Utils
namespace System::Dynamic::Utils {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Forward declaring type: TypeUtils
  class TypeUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Dynamic::Utils::TypeUtils);
DEFINE_IL2CPP_ARG_TYPE(::System::Dynamic::Utils::TypeUtils*, "System.Dynamic.Utils", "TypeUtils");
// Type namespace: System.Dynamic.Utils
namespace System::Dynamic::Utils {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Dynamic.Utils.TypeUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TypeUtils : public ::Il2CppObject {
    public:
    // Nested type: ::System::Dynamic::Utils::TypeUtils::$$c
    class $$c;
    // Get static field: static private readonly System.Type[] s_arrayAssignableInterfaces
    static ::ArrayW<::System::Type*> _get_s_arrayAssignableInterfaces();
    // Set static field: static private readonly System.Type[] s_arrayAssignableInterfaces
    static void _set_s_arrayAssignableInterfaces(::ArrayW<::System::Type*> value);
    // static public System.Type GetNonNullableType(System.Type type)
    // Offset: 0x4BEA234
    static ::System::Type* GetNonNullableType(::System::Type* type);
    // static public System.Type GetNullableType(System.Type type)
    // Offset: 0x4BEA390
    static ::System::Type* GetNullableType(::System::Type* type);
    // static public System.Boolean IsNullableType(System.Type type)
    // Offset: 0x4BEA2C4
    static bool IsNullableType(::System::Type* type);
    // static public System.Boolean IsNullableOrReferenceType(System.Type type)
    // Offset: 0x4BEA4E0
    static bool IsNullableOrReferenceType(::System::Type* type);
    // static public System.Boolean IsBool(System.Type type)
    // Offset: 0x4BEA55C
    static bool IsBool(::System::Type* type);
    // static public System.Boolean IsNumeric(System.Type type)
    // Offset: 0x4BEA610
    static bool IsNumeric(::System::Type* type);
    // static public System.Boolean IsInteger(System.Type type)
    // Offset: 0x4BEA6CC
    static bool IsInteger(::System::Type* type);
    // static public System.Boolean IsArithmetic(System.Type type)
    // Offset: 0x4BEA788
    static bool IsArithmetic(::System::Type* type);
    // static public System.Boolean IsUnsignedInt(System.Type type)
    // Offset: 0x4BEA844
    static bool IsUnsignedInt(::System::Type* type);
    // static public System.Boolean IsIntegerOrBool(System.Type type)
    // Offset: 0x4BEA904
    static bool IsIntegerOrBool(::System::Type* type);
    // static public System.Boolean IsNumericOrBool(System.Type type)
    // Offset: 0x4BEA9C8
    static bool IsNumericOrBool(::System::Type* type);
    // static public System.Boolean IsValidInstanceType(System.Reflection.MemberInfo member, System.Type instanceType)
    // Offset: 0x4BEAA48
    static bool IsValidInstanceType(::System::Reflection::MemberInfo* member, ::System::Type* instanceType);
    // static public System.Boolean HasIdentityPrimitiveOrNullableConversionTo(System.Type source, System.Type dest)
    // Offset: 0x4BEAF60
    static bool HasIdentityPrimitiveOrNullableConversionTo(::System::Type* source, ::System::Type* dest);
    // static public System.Boolean HasReferenceConversionTo(System.Type source, System.Type dest)
    // Offset: 0x4BEB244
    static bool HasReferenceConversionTo(::System::Type* source, ::System::Type* dest);
    // static private System.Boolean StrictHasReferenceConversionTo(System.Type source, System.Type dest, System.Boolean skipNonArray)
    // Offset: 0x4BEB734
    static bool StrictHasReferenceConversionTo(::System::Type* source, ::System::Type* dest, bool skipNonArray);
    // static private System.Boolean HasArrayToInterfaceConversion(System.Type source, System.Type dest)
    // Offset: 0x4BEBA34
    static bool HasArrayToInterfaceConversion(::System::Type* source, ::System::Type* dest);
    // static private System.Boolean HasInterfaceToArrayConversion(System.Type source, System.Type dest)
    // Offset: 0x4BEBBF4
    static bool HasInterfaceToArrayConversion(::System::Type* source, ::System::Type* dest);
    // static private System.Boolean IsCovariant(System.Type t)
    // Offset: 0x4BEBDE4
    static bool IsCovariant(::System::Type* t);
    // static private System.Boolean IsContravariant(System.Type t)
    // Offset: 0x4BEBE0C
    static bool IsContravariant(::System::Type* t);
    // static private System.Boolean IsInvariant(System.Type t)
    // Offset: 0x4BEBE34
    static bool IsInvariant(::System::Type* t);
    // static private System.Boolean IsDelegate(System.Type t)
    // Offset: 0x4BEBE60
    static bool IsDelegate(::System::Type* t);
    // static public System.Boolean IsLegalExplicitVariantDelegateConversion(System.Type source, System.Type dest)
    // Offset: 0x4BEB42C
    static bool IsLegalExplicitVariantDelegateConversion(::System::Type* source, ::System::Type* dest);
    // static public System.Boolean IsConvertible(System.Type type)
    // Offset: 0x4BEB18C
    static bool IsConvertible(::System::Type* type);
    // static public System.Boolean HasReferenceEquality(System.Type left, System.Type right)
    // Offset: 0x4BEBEF8
    static bool HasReferenceEquality(::System::Type* left, ::System::Type* right);
    // static public System.Boolean HasBuiltInEqualityOperator(System.Type left, System.Type right)
    // Offset: 0x4BEBFD8
    static bool HasBuiltInEqualityOperator(::System::Type* left, ::System::Type* right);
    // static public System.Boolean IsImplicitlyConvertibleTo(System.Type source, System.Type destination)
    // Offset: 0x4BEC1BC
    static bool IsImplicitlyConvertibleTo(::System::Type* source, ::System::Type* destination);
    // static public System.Reflection.MethodInfo GetUserDefinedCoercionMethod(System.Type convertFrom, System.Type convertToType)
    // Offset: 0x4BEC61C
    static ::System::Reflection::MethodInfo* GetUserDefinedCoercionMethod(::System::Type* convertFrom, ::System::Type* convertToType);
    // static private System.Reflection.MethodInfo FindConversionOperator(System.Reflection.MethodInfo[] methods, System.Type typeFrom, System.Type typeTo)
    // Offset: 0x4BEC834
    static ::System::Reflection::MethodInfo* FindConversionOperator(::ArrayW<::System::Reflection::MethodInfo*> methods, ::System::Type* typeFrom, ::System::Type* typeTo);
    // static private System.Boolean IsImplicitNumericConversion(System.Type source, System.Type destination)
    // Offset: 0x4BEC2C8
    static bool IsImplicitNumericConversion(::System::Type* source, ::System::Type* destination);
    // static private System.Boolean IsImplicitReferenceConversion(System.Type source, System.Type destination)
    // Offset: 0x4BEBDB8
    static bool IsImplicitReferenceConversion(::System::Type* source, ::System::Type* destination);
    // static private System.Boolean IsImplicitBoxingConversion(System.Type source, System.Type destination)
    // Offset: 0x4BEC404
    static bool IsImplicitBoxingConversion(::System::Type* source, ::System::Type* destination);
    // static private System.Boolean IsImplicitNullableConversion(System.Type source, System.Type destination)
    // Offset: 0x4BEC574
    static bool IsImplicitNullableConversion(::System::Type* source, ::System::Type* destination);
    // static public System.Type FindGenericType(System.Type definition, System.Type type)
    // Offset: 0x4BECA00
    static ::System::Type* FindGenericType(::System::Type* definition, ::System::Type* type);
    // static public System.Reflection.MethodInfo GetBooleanOperator(System.Type type, System.String name)
    // Offset: 0x4BECEA0
    static ::System::Reflection::MethodInfo* GetBooleanOperator(::System::Type* type, ::StringW name);
    // static public System.Type GetNonRefType(System.Type type)
    // Offset: 0x4BED020
    static ::System::Type* GetNonRefType(::System::Type* type);
    // static public System.Boolean AreEquivalent(System.Type t1, System.Type t2)
    // Offset: 0x4BE7724
    static bool AreEquivalent(::System::Type* t1, ::System::Type* t2);
    // static public System.Boolean AreReferenceAssignable(System.Type dest, System.Type src)
    // Offset: 0x4BE930C
    static bool AreReferenceAssignable(::System::Type* dest, ::System::Type* src);
    // static public System.Boolean IsSameOrSubclass(System.Type type, System.Type subType)
    // Offset: 0x4BE950C
    static bool IsSameOrSubclass(::System::Type* type, ::System::Type* subType);
    // static public System.Void ValidateType(System.Type type, System.String paramName)
    // Offset: 0x4BED060
    static void ValidateType(::System::Type* type, ::StringW paramName);
    // static public System.Void ValidateType(System.Type type, System.String paramName, System.Boolean allowByRef, System.Boolean allowPointer)
    // Offset: 0x4BE9220
    static void ValidateType(::System::Type* type, ::StringW paramName, bool allowByRef, bool allowPointer);
    // static public System.Boolean ValidateType(System.Type type, System.String paramName, System.Int32 index)
    // Offset: 0x4BED0CC
    static bool ValidateType(::System::Type* type, ::StringW paramName, int index);
    // static public System.Reflection.MethodInfo GetInvokeMethod(System.Type delegateType)
    // Offset: 0x4BED1F8
    static ::System::Reflection::MethodInfo* GetInvokeMethod(::System::Type* delegateType);
    // static private System.Void .cctor()
    // Offset: 0x4BED250
    static void _cctor();
  }; // System.Dynamic.Utils.TypeUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetNonNullableType
// Il2CppName: GetNonNullableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::GetNonNullableType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetNonNullableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetNullableType
// Il2CppName: GetNullableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::GetNullableType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetNullableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsNullableType
// Il2CppName: IsNullableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsNullableType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsNullableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsNullableOrReferenceType
// Il2CppName: IsNullableOrReferenceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsNullableOrReferenceType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsNullableOrReferenceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsBool
// Il2CppName: IsBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsBool)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsNumeric
// Il2CppName: IsNumeric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsNumeric)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsNumeric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsInteger
// Il2CppName: IsInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsInteger)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsArithmetic
// Il2CppName: IsArithmetic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsArithmetic)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsArithmetic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsUnsignedInt
// Il2CppName: IsUnsignedInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsUnsignedInt)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsUnsignedInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsIntegerOrBool
// Il2CppName: IsIntegerOrBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsIntegerOrBool)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsIntegerOrBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsNumericOrBool
// Il2CppName: IsNumericOrBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsNumericOrBool)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsNumericOrBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsValidInstanceType
// Il2CppName: IsValidInstanceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsValidInstanceType)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* instanceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsValidInstanceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, instanceType});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasIdentityPrimitiveOrNullableConversionTo
// Il2CppName: HasIdentityPrimitiveOrNullableConversionTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasIdentityPrimitiveOrNullableConversionTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasIdentityPrimitiveOrNullableConversionTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasReferenceConversionTo
// Il2CppName: HasReferenceConversionTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasReferenceConversionTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasReferenceConversionTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::StrictHasReferenceConversionTo
// Il2CppName: StrictHasReferenceConversionTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*, bool)>(&System::Dynamic::Utils::TypeUtils::StrictHasReferenceConversionTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* skipNonArray = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "StrictHasReferenceConversionTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, skipNonArray});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasArrayToInterfaceConversion
// Il2CppName: HasArrayToInterfaceConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasArrayToInterfaceConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasArrayToInterfaceConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasInterfaceToArrayConversion
// Il2CppName: HasInterfaceToArrayConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasInterfaceToArrayConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasInterfaceToArrayConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsCovariant
// Il2CppName: IsCovariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsCovariant)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsCovariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsContravariant
// Il2CppName: IsContravariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsContravariant)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsContravariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsInvariant
// Il2CppName: IsInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsInvariant)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsDelegate
// Il2CppName: IsDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsDelegate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsLegalExplicitVariantDelegateConversion
// Il2CppName: IsLegalExplicitVariantDelegateConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsLegalExplicitVariantDelegateConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsLegalExplicitVariantDelegateConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsConvertible
// Il2CppName: IsConvertible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsConvertible)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsConvertible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasReferenceEquality
// Il2CppName: HasReferenceEquality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasReferenceEquality)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasReferenceEquality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::HasBuiltInEqualityOperator
// Il2CppName: HasBuiltInEqualityOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::HasBuiltInEqualityOperator)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "HasBuiltInEqualityOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsImplicitlyConvertibleTo
// Il2CppName: IsImplicitlyConvertibleTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsImplicitlyConvertibleTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsImplicitlyConvertibleTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetUserDefinedCoercionMethod
// Il2CppName: GetUserDefinedCoercionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::GetUserDefinedCoercionMethod)> {
  static const MethodInfo* get() {
    static auto* convertFrom = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* convertToType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetUserDefinedCoercionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{convertFrom, convertToType});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::FindConversionOperator
// Il2CppName: FindConversionOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::ArrayW<::System::Reflection::MethodInfo*>, ::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::FindConversionOperator)> {
  static const MethodInfo* get() {
    static auto* methods = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo"), 1)->byval_arg;
    static auto* typeFrom = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* typeTo = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "FindConversionOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methods, typeFrom, typeTo});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsImplicitNumericConversion
// Il2CppName: IsImplicitNumericConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsImplicitNumericConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsImplicitNumericConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsImplicitReferenceConversion
// Il2CppName: IsImplicitReferenceConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsImplicitReferenceConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsImplicitReferenceConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsImplicitBoxingConversion
// Il2CppName: IsImplicitBoxingConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsImplicitBoxingConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsImplicitBoxingConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsImplicitNullableConversion
// Il2CppName: IsImplicitNullableConversion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsImplicitNullableConversion)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsImplicitNullableConversion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::FindGenericType
// Il2CppName: FindGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::FindGenericType)> {
  static const MethodInfo* get() {
    static auto* definition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "FindGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{definition, type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetBooleanOperator
// Il2CppName: GetBooleanOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::System::Type*, ::StringW)>(&System::Dynamic::Utils::TypeUtils::GetBooleanOperator)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetBooleanOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, name});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetNonRefType
// Il2CppName: GetNonRefType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::GetNonRefType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetNonRefType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::AreEquivalent
// Il2CppName: AreEquivalent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::AreEquivalent)> {
  static const MethodInfo* get() {
    static auto* t1 = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* t2 = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "AreEquivalent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t1, t2});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::AreReferenceAssignable
// Il2CppName: AreReferenceAssignable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::AreReferenceAssignable)> {
  static const MethodInfo* get() {
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "AreReferenceAssignable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::IsSameOrSubclass
// Il2CppName: IsSameOrSubclass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Dynamic::Utils::TypeUtils::IsSameOrSubclass)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* subType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "IsSameOrSubclass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, subType});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::ValidateType
// Il2CppName: ValidateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ::StringW)>(&System::Dynamic::Utils::TypeUtils::ValidateType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "ValidateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, paramName});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::ValidateType
// Il2CppName: ValidateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ::StringW, bool, bool)>(&System::Dynamic::Utils::TypeUtils::ValidateType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* allowByRef = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* allowPointer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "ValidateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, paramName, allowByRef, allowPointer});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::ValidateType
// Il2CppName: ValidateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::StringW, int)>(&System::Dynamic::Utils::TypeUtils::ValidateType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "ValidateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, paramName, index});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::GetInvokeMethod
// Il2CppName: GetInvokeMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::System::Type*)>(&System::Dynamic::Utils::TypeUtils::GetInvokeMethod)> {
  static const MethodInfo* get() {
    static auto* delegateType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), "GetInvokeMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delegateType});
  }
};
// Writing MetadataGetter for method: System::Dynamic::Utils::TypeUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Dynamic::Utils::TypeUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Dynamic::Utils::TypeUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
