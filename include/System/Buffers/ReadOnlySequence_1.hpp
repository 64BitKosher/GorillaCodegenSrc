// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ReadOnlyMemory`1
#include "System/ReadOnlyMemory_1.hpp"
// Including type: System.SequencePosition
#include "System/SequencePosition.hpp"
// Including type: System.ExceptionArgument
#include "System/ExceptionArgument.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Skipping declaration: SequenceType because it is already included!
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: ReadOnlySequenceSegment`1<T>
  template<typename T>
  class ReadOnlySequenceSegment_1;
  // Forward declaring type: SpanAction`2<T, TArg>
  template<typename T, typename TArg>
  class SpanAction_2;
}
// Completed forward declares
// Type namespace: System.Buffers
namespace System::Buffers {
  // Forward declaring type: ReadOnlySequence`1<T>
  template<typename T>
  struct ReadOnlySequence_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Buffers::ReadOnlySequence_1, "System.Buffers", "ReadOnlySequence`1");
// Type namespace: System.Buffers
namespace System::Buffers {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Buffers.ReadOnlySequence`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct ReadOnlySequence_1/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::Buffers::ReadOnlySequence_1::SequenceType<T>
    struct SequenceType;
    // Nested type: ::System::Buffers::ReadOnlySequence_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Buffers.ReadOnlySequence`1/SequenceType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SequenceType : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = ReadOnlySequence_1<T>;
      static constexpr std::string_view NESTED_NAME = "SequenceType";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SequenceType
      constexpr SequenceType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> MultiSegment
      static typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType _get_MultiSegment() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_get_MultiSegment");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "MultiSegment"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> MultiSegment
      static void _set_MultiSegment(typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_set_MultiSegment");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "MultiSegment", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> Array
      static typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType _get_Array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_get_Array");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "Array"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> Array
      static void _set_Array(typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_set_Array");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "Array", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> MemoryManager
      static typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType _get_MemoryManager() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_get_MemoryManager");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "MemoryManager"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> MemoryManager
      static void _set_MemoryManager(typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_set_MemoryManager");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "MemoryManager", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> String
      static typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType _get_String() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_get_String");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "String"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> String
      static void _set_String(typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_set_String");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "String", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> Empty
      static typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType _get_Empty() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_get_Empty");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "Empty"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.ReadOnlySequence`1/SequenceType<T> Empty
      static void _set_Empty(typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::_set_Empty");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::SequenceType>::get(), "Empty", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SequenceType::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Buffers.ReadOnlySequence`1/SequenceType
    // Could not write size check! Type: System.Buffers.ReadOnlySequence`1/SequenceType is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Buffers.ReadOnlySequence`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ReadOnlySequence_1<T>;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly System.Buffers.ReadOnlySequence`1/<>c<T> <>9
      static typename ::System::Buffers::ReadOnlySequence_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::System::Buffers::ReadOnlySequence_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly System.Buffers.ReadOnlySequence`1/<>c<T> <>9
      static void _set_$$9(typename ::System::Buffers::ReadOnlySequence_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Buffers.SpanAction`2<System.Char,System.Buffers.ReadOnlySequence`1<System.Char>> <>9__33_0
      static ::System::Buffers::SpanAction_2<::Il2CppChar, ::System::Buffers::ReadOnlySequence_1<::Il2CppChar>>* _get_$$9__33_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::_get_$$9__33_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Buffers::SpanAction_2<::Il2CppChar, ::System::Buffers::ReadOnlySequence_1<::Il2CppChar>>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::$$c*>::get(), "<>9__33_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Buffers.SpanAction`2<System.Char,System.Buffers.ReadOnlySequence`1<System.Char>> <>9__33_0
      static void _set_$$9__33_0(::System::Buffers::SpanAction_2<::Il2CppChar, ::System::Buffers::ReadOnlySequence_1<::Il2CppChar>>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::_set_$$9__33_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::$$c*>::get(), "<>9__33_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename ReadOnlySequence_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // System.Void <ToString>b__33_0(System.Span`1<System.Char> span, System.Buffers.ReadOnlySequence`1<System.Char> sequence)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ToString$b__33_0(::System::Span_1<::Il2CppChar> span, ::System::Buffers::ReadOnlySequence_1<::Il2CppChar> sequence) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::<ToString>b__33_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToString>b__33_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(sequence)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, span, sequence);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadOnlySequence_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadOnlySequence_1<T>::$$c*, creationType>()));
      }
    }; // System.Buffers.ReadOnlySequence`1/<>c
    // Could not write size check! Type: System.Buffers.ReadOnlySequence`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Object _startObject
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* startObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Object _endObject
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* endObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Int32 _startInteger
    // Size: 0x4
    // Offset: 0x0
    int startInteger;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _endInteger
    // Size: 0x4
    // Offset: 0x0
    int endInteger;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ReadOnlySequence_1
    constexpr ReadOnlySequence_1(::Il2CppObject* startObject_ = {}, ::Il2CppObject* endObject_ = {}, int startInteger_ = {}, int endInteger_ = {}) noexcept : startObject{startObject_}, endObject{endObject_}, startInteger{startInteger_}, endInteger{endInteger_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public readonly System.Buffers.ReadOnlySequence`1<T> Empty
    static ::System::Buffers::ReadOnlySequence_1<T> _get_Empty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::_get_Empty");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Buffers::ReadOnlySequence_1<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "Empty"));
    }
    // Autogenerated static field setter
    // Set static field: static public readonly System.Buffers.ReadOnlySequence`1<T> Empty
    static void _set_Empty(::System::Buffers::ReadOnlySequence_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::_set_Empty");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "Empty", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Object _startObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__startObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::dyn__startObject");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startObject"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Object _endObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__endObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::dyn__endObject");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endObject"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _startInteger
    [[deprecated("Use field access instead!")]] int& dyn__startInteger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::dyn__startInteger");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startInteger"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _endInteger
    [[deprecated("Use field access instead!")]] int& dyn__endInteger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::dyn__endInteger");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endInteger"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int64 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsSingleSegment()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsSingleSegment() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::get_IsSingleSegment");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsSingleSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.ReadOnlyMemory`1<T> get_First()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlyMemory_1<T> get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::get_First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_First", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlyMemory_1<T>, false>(this, ___internal__method);
    }
    // public System.SequencePosition get_Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::SequencePosition get_Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::get_Start");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::SequencePosition, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Buffers.ReadOnlySequenceSegment`1<T> startSegment, System.Int32 startIndex, System.Buffers.ReadOnlySequenceSegment`1<T> endSegment, System.Int32 endIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySequence_1(::System::Buffers::ReadOnlySequenceSegment_1<T>* startSegment, int startIndex, ::System::Buffers::ReadOnlySequenceSegment_1<T>* endSegment, int endIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startSegment), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endSegment), ::il2cpp_utils::ExtractType(endIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startSegment, startIndex, endSegment, endIndex);
    }
    // public System.Void .ctor(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySequence_1(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // public System.Void .ctor(System.ReadOnlyMemory`1<T> memory)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySequence_1(::System::ReadOnlyMemory_1<T> memory) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, memory);
    }
    // public System.SequencePosition GetPosition(System.Int64 offset, System.SequencePosition origin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::SequencePosition GetPosition(int64_t offset, ::System::SequencePosition origin) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetPosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(origin)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::SequencePosition, false>(this, ___internal__method, offset, origin);
    }
    // public System.Boolean TryGet(ref System.SequencePosition position, out System.ReadOnlyMemory`1<T> memory, System.Boolean advance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGet(ByRef<::System::SequencePosition> position, ByRef<::System::ReadOnlyMemory_1<T>> memory, bool advance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractIndependentType<::System::ReadOnlyMemory_1<T>&>(), ::il2cpp_utils::ExtractType(advance)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(position), byref(memory), advance);
    }
    // System.Boolean TryGetBuffer(in System.SequencePosition position, out System.ReadOnlyMemory`1<T> memory, out System.SequencePosition next)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetBuffer(ByRef<::System::SequencePosition> position, ByRef<::System::ReadOnlyMemory_1<T>> memory, ByRef<::System::SequencePosition> next) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::TryGetBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractIndependentType<::System::ReadOnlyMemory_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<::System::SequencePosition&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(position), byref(memory), byref(next));
    }
    // private System.ReadOnlyMemory`1<T> GetFirstBuffer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlyMemory_1<T> GetFirstBuffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetFirstBuffer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetFirstBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlyMemory_1<T>, false>(this, ___internal__method);
    }
    // private System.ReadOnlyMemory`1<T> GetFirstBufferSlow(System.Object startObject, System.Boolean isMultiSegment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlyMemory_1<T> GetFirstBufferSlow(::Il2CppObject* startObject, bool isMultiSegment) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetFirstBufferSlow");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetFirstBufferSlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startObject), ::il2cpp_utils::ExtractType(isMultiSegment)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlyMemory_1<T>, false>(this, ___internal__method, startObject, isMultiSegment);
    }
    // private System.SequencePosition Seek(in System.SequencePosition start, System.Int64 offset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::SequencePosition Seek(ByRef<::System::SequencePosition> start, int64_t offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::Seek");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(offset)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::SequencePosition, false>(this, ___internal__method, byref(start), offset);
    }
    // static private System.SequencePosition SeekMultiSegment(System.Buffers.ReadOnlySequenceSegment`1<T> currentSegment, System.Object endObject, System.Int32 endIndex, System.Int64 offset, System.ExceptionArgument argument)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::SequencePosition SeekMultiSegment(::System::Buffers::ReadOnlySequenceSegment_1<T>* currentSegment, ::Il2CppObject* endObject, int endIndex, int64_t offset, ::System::ExceptionArgument argument) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::SeekMultiSegment");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "SeekMultiSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentSegment), ::il2cpp_utils::ExtractType(endObject), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(argument)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::SequencePosition, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, currentSegment, endObject, endIndex, offset, argument);
    }
    // private System.Buffers.ReadOnlySequence`1/SequenceType<T> GetSequenceType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType GetSequenceType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetSequenceType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSequenceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Buffers::ReadOnlySequence_1<T>::SequenceType, false>(this, ___internal__method);
    }
    // static private System.Int32 GetIndex(in System.SequencePosition position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int GetIndex(ByRef<::System::SequencePosition> position) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "GetIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(position));
    }
    // static private System.Int32 GetIndex(System.Int32 Integer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int GetIndex(int Integer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "GetIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Integer)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, Integer);
    }
    // private System.Int64 GetLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t GetLength() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetLength");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // System.Boolean TryGetString(out System.String text, out System.Int32 start, out System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetString(ByRef<::StringW> text, ByRef<int> start, ByRef<int> length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::TryGetString");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(text), byref(start), byref(length));
    }
    // System.Void GetFirstSpan(out System.ReadOnlySpan`1<T> first, out System.SequencePosition next)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetFirstSpan(ByRef<::System::ReadOnlySpan_1<T>> first, ByRef<::System::SequencePosition> next) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetFirstSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetFirstSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::ReadOnlySpan_1<T>&>(), ::il2cpp_utils::ExtractIndependentType<::System::SequencePosition&>()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(first), byref(next));
    }
    // static private System.ReadOnlySpan`1<T> GetFirstSpanSlow(System.Object startObject, System.Int32 startIndex, System.Int32 endIndex, System.Boolean hasMultipleSegments)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::ReadOnlySpan_1<T> GetFirstSpanSlow(::Il2CppObject* startObject, int startIndex, int endIndex, bool hasMultipleSegments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::GetFirstSpanSlow");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), "GetFirstSpanSlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startObject), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(hasMultipleSegments)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, startObject, startIndex, endIndex, hasMultipleSegments);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySequence_1<T>>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequence_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // System.Buffers.ReadOnlySequence`1
  // Could not write size check! Type: System.Buffers.ReadOnlySequence`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
