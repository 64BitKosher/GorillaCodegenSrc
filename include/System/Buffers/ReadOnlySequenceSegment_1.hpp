// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ReadOnlyMemory`1
#include "System/ReadOnlyMemory_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Buffers
namespace System::Buffers {
  // Forward declaring type: ReadOnlySequenceSegment`1<T>
  template<typename T>
  class ReadOnlySequenceSegment_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Buffers::ReadOnlySequenceSegment_1, "System.Buffers", "ReadOnlySequenceSegment`1");
// Type namespace: System.Buffers
namespace System::Buffers {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Buffers.ReadOnlySequenceSegment`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ReadOnlySequenceSegment_1 : public ::Il2CppObject {
    public:
    public:
    // private System.ReadOnlyMemory`1<T> <Memory>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ReadOnlyMemory_1<T> Memory;
    // private System.Buffers.ReadOnlySequenceSegment`1<T> <Next>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Buffers::ReadOnlySequenceSegment_1<T>* Next;
    // Field size check
    static_assert(sizeof(::System::Buffers::ReadOnlySequenceSegment_1<T>*) == 0x8);
    // private System.Int64 <RunningIndex>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    int64_t RunningIndex;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.ReadOnlyMemory`1<T> <Memory>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ReadOnlyMemory_1<T>& dyn_$Memory$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::dyn_$Memory$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Memory>k__BackingField"))->offset;
      return *reinterpret_cast<::System::ReadOnlyMemory_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Buffers.ReadOnlySequenceSegment`1<T> <Next>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Buffers::ReadOnlySequenceSegment_1<T>*& dyn_$Next$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::dyn_$Next$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Next>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Buffers::ReadOnlySequenceSegment_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int64 <RunningIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$RunningIndex$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::dyn_$RunningIndex$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RunningIndex>k__BackingField"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.ReadOnlyMemory`1<T> get_Memory()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlyMemory_1<T> get_Memory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::get_Memory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Memory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlyMemory_1<T>, false>(this, ___internal__method);
    }
    // protected System.Void set_Memory(System.ReadOnlyMemory`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Memory(::System::ReadOnlyMemory_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::set_Memory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Memory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Buffers.ReadOnlySequenceSegment`1<T> get_Next()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Buffers::ReadOnlySequenceSegment_1<T>* get_Next() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::get_Next");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Buffers::ReadOnlySequenceSegment_1<T>*, false>(this, ___internal__method);
    }
    // protected System.Void set_Next(System.Buffers.ReadOnlySequenceSegment`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Next(::System::Buffers::ReadOnlySequenceSegment_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::set_Next");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int64 get_RunningIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_RunningIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::get_RunningIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RunningIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // protected System.Void set_RunningIndex(System.Int64 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_RunningIndex(int64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::set_RunningIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RunningIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadOnlySequenceSegment_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::ReadOnlySequenceSegment_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadOnlySequenceSegment_1<T>*, creationType>()));
    }
  }; // System.Buffers.ReadOnlySequenceSegment`1
  // Could not write size check! Type: System.Buffers.ReadOnlySequenceSegment`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
