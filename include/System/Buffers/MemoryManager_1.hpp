// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Buffers.IPinnable
#include "System/Buffers/IPinnable.hpp"
// Including type: System.Memory`1
#include "System/Memory_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Buffers
namespace System::Buffers {
  // Forward declaring type: MemoryManager`1<T>
  template<typename T>
  class MemoryManager_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Buffers::MemoryManager_1, "System.Buffers", "MemoryManager`1");
// Type namespace: System.Buffers
namespace System::Buffers {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Buffers.MemoryManager`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class MemoryManager_1 : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Buffers::IPinnable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Buffers::IPinnable
    operator ::System::Buffers::IPinnable() noexcept {
      return *reinterpret_cast<::System::Buffers::IPinnable*>(this);
    }
    // public System.Memory`1<T> get_Memory()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Memory_1<T> get_Memory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::get_Memory");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Memory_1<T>, false>(this, ___internal__method);
    }
    // public System.Span`1<T> GetSpan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Span_1<T> GetSpan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::GetSpan");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(this, ___internal__method);
    }
    // public System.Buffers.MemoryHandle Pin(System.Int32 elementIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Buffers::MemoryHandle Pin(int elementIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::Pin");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Buffers::MemoryHandle, false>(this, ___internal__method, elementIndex);
    }
    // public System.Void Unpin()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unpin() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::Unpin");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected internal System.Boolean TryGetArray(out System.ArraySegment`1<T> segment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetArray(ByRef<::System::ArraySegment_1<T>> segment) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::TryGetArray");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(segment));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_IDisposable_Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::System.IDisposable.Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose(bool disposing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::MemoryManager_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Buffers::MemoryManager_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
    }
  }; // System.Buffers.MemoryManager`1
  // Could not write size check! Type: System.Buffers.MemoryManager`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
