// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.SequencePosition
#include "System/SequencePosition.hpp"
// Including type: System.Buffers.ReadOnlySequence`1
#include "System/Buffers/ReadOnlySequence_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IEquatable`1 because it is already included!
}
// Completed forward declares
// Type namespace: System.Buffers
namespace System::Buffers {
  // Forward declaring type: SequenceReader`1<T>
  template<typename T>
  struct SequenceReader_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Buffers::SequenceReader_1, "System.Buffers", "SequenceReader`1");
// Type namespace: System.Buffers
namespace System::Buffers {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Buffers.SequenceReader`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  template<typename T>
  struct SequenceReader_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.SequencePosition _currentPosition
    // Size: 0xC
    // Offset: 0x0
    ::System::SequencePosition currentPosition;
    // Field size check
    static_assert(sizeof(::System::SequencePosition) == 0xC);
    // private System.SequencePosition _nextPosition
    // Size: 0xC
    // Offset: 0x0
    ::System::SequencePosition nextPosition;
    // Field size check
    static_assert(sizeof(::System::SequencePosition) == 0xC);
    // private System.Boolean _moreData
    // Size: 0x1
    // Offset: 0x0
    bool moreData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Int64 _length
    // Size: 0x8
    // Offset: 0x0
    int64_t length;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly System.Buffers.ReadOnlySequence`1<T> <Sequence>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::Buffers::ReadOnlySequence_1<T> Sequence;
    // private System.ReadOnlySpan`1<T> <CurrentSpan>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ReadOnlySpan_1<T> CurrentSpan;
    // private System.Int32 <CurrentSpanIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int CurrentSpanIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 <Consumed>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    int64_t Consumed;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: SequenceReader_1
    constexpr SequenceReader_1(::System::SequencePosition currentPosition_ = {}, ::System::SequencePosition nextPosition_ = {}, bool moreData_ = {}, int64_t length_ = {}, ::System::Buffers::ReadOnlySequence_1<T> Sequence_ = {}, ::System::ReadOnlySpan_1<T> CurrentSpan_ = {}, int CurrentSpanIndex_ = {}, int64_t Consumed_ = {}) noexcept : currentPosition{currentPosition_}, nextPosition{nextPosition_}, moreData{moreData_}, length{length_}, Sequence{Sequence_}, CurrentSpan{CurrentSpan_}, CurrentSpanIndex{CurrentSpanIndex_}, Consumed{Consumed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.SequencePosition _currentPosition
    [[deprecated("Use field access instead!")]] ::System::SequencePosition& dyn__currentPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn__currentPosition");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPosition"))->offset;
      return *reinterpret_cast<::System::SequencePosition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.SequencePosition _nextPosition
    [[deprecated("Use field access instead!")]] ::System::SequencePosition& dyn__nextPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn__nextPosition");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextPosition"))->offset;
      return *reinterpret_cast<::System::SequencePosition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _moreData
    [[deprecated("Use field access instead!")]] bool& dyn__moreData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn__moreData");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_moreData"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int64 _length
    [[deprecated("Use field access instead!")]] int64_t& dyn__length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn__length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Buffers.ReadOnlySequence`1<T> <Sequence>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Buffers::ReadOnlySequence_1<T>& dyn_$Sequence$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn_$Sequence$k__BackingField");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Sequence>k__BackingField"))->offset;
      return *reinterpret_cast<::System::Buffers::ReadOnlySequence_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.ReadOnlySpan`1<T> <CurrentSpan>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<T>& dyn_$CurrentSpan$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn_$CurrentSpan$k__BackingField");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CurrentSpan>k__BackingField"))->offset;
      return *reinterpret_cast<::System::ReadOnlySpan_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <CurrentSpanIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CurrentSpanIndex$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn_$CurrentSpanIndex$k__BackingField");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CurrentSpanIndex>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int64 <Consumed>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$Consumed$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::dyn_$Consumed$k__BackingField");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Consumed>k__BackingField"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean IsNext(System.ReadOnlySpan`1<T> next, System.Boolean advancePast)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsNext(::System::ReadOnlySpan_1<T> next, bool advancePast) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::IsNext");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(next), ::il2cpp_utils::ExtractType(advancePast)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, next, advancePast);
    }
    // private System.Boolean IsNextSlow(System.ReadOnlySpan`1<T> next, System.Boolean advancePast)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsNextSlow(::System::ReadOnlySpan_1<T> next, bool advancePast) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::IsNextSlow");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsNextSlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(next), ::il2cpp_utils::ExtractType(advancePast)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, next, advancePast);
    }
    // public System.Void .ctor(System.Buffers.ReadOnlySequence`1<T> sequence)
    // Offset: 0xFFFFFFFFFFFFFFFF
    SequenceReader_1(::System::Buffers::ReadOnlySequence_1<T> sequence) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequence)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sequence);
    }
    // public System.Boolean get_End()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_End() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_End");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Buffers.ReadOnlySequence`1<T> get_Sequence()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Buffers::ReadOnlySequence_1<T> get_Sequence() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_Sequence");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Buffers::ReadOnlySequence_1<T>, false>(this, ___internal__method);
    }
    // public System.SequencePosition get_Position()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::SequencePosition get_Position() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_Position");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::SequencePosition, false>(this, ___internal__method);
    }
    // public System.ReadOnlySpan`1<T> get_CurrentSpan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlySpan_1<T> get_CurrentSpan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_CurrentSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CurrentSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(this, ___internal__method);
    }
    // private System.Void set_CurrentSpan(System.ReadOnlySpan`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CurrentSpan(::System::ReadOnlySpan_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::set_CurrentSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_CurrentSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_CurrentSpanIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_CurrentSpanIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_CurrentSpanIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CurrentSpanIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Void set_CurrentSpanIndex(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CurrentSpanIndex(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::set_CurrentSpanIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_CurrentSpanIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.ReadOnlySpan`1<T> get_UnreadSpan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlySpan_1<T> get_UnreadSpan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_UnreadSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_UnreadSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(this, ___internal__method);
    }
    // public System.Int64 get_Consumed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_Consumed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_Consumed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Consumed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // private System.Void set_Consumed(System.Int64 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Consumed(int64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::set_Consumed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Consumed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int64 get_Remaining()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_Remaining() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_Remaining");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Remaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // public System.Int64 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // public System.Boolean TryPeek(out T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryPeek(ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::TryPeek");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryPeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(value));
    }
    // private System.Void GetNextSpan()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetNextSpan() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::GetNextSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetNextSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Advance(System.Int64 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Advance(int64_t count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::Advance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Advance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
    }
    // System.Void AdvanceCurrentSpan(System.Int64 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AdvanceCurrentSpan(int64_t count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::AdvanceCurrentSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AdvanceCurrentSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
    }
    // private System.Void AdvanceToNextSpan(System.Int64 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AdvanceToNextSpan(int64_t count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::SequenceReader_1::AdvanceToNextSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AdvanceToNextSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, count);
    }
  }; // System.Buffers.SequenceReader`1
  // Could not write size check! Type: System.Buffers.SequenceReader`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
