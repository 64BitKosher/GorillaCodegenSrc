// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Buffers.Text.Utf8Parser
#include "System/Buffers/Text/Utf8Parser.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::Text::Utf8Parser::TimeSpanSplitter, "System.Buffers.Text", "Utf8Parser/TimeSpanSplitter");
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Buffers.Text.Utf8Parser/TimeSpanSplitter
  // [TokenAttribute] Offset: FFFFFFFF
  struct Utf8Parser::TimeSpanSplitter/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 V1
    // Size: 0x4
    // Offset: 0x0
    uint V1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 V2
    // Size: 0x4
    // Offset: 0x4
    uint V2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 V3
    // Size: 0x4
    // Offset: 0x8
    uint V3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 V4
    // Size: 0x4
    // Offset: 0xC
    uint V4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 V5
    // Size: 0x4
    // Offset: 0x10
    uint V5;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Boolean IsNegative
    // Size: 0x1
    // Offset: 0x14
    bool IsNegative;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsNegative and: Separators
    char __padding5[0x3] = {};
    // public System.UInt32 Separators
    // Size: 0x4
    // Offset: 0x18
    uint Separators;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: TimeSpanSplitter
    constexpr TimeSpanSplitter(uint V1_ = {}, uint V2_ = {}, uint V3_ = {}, uint V4_ = {}, uint V5_ = {}, bool IsNegative_ = {}, uint Separators_ = {}) noexcept : V1{V1_}, V2{V2_}, V3{V3_}, V4{V4_}, V5{V5_}, IsNegative{IsNegative_}, Separators{Separators_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 V1
    [[deprecated("Use field access instead!")]] uint& dyn_V1();
    // Get instance field reference: public System.UInt32 V2
    [[deprecated("Use field access instead!")]] uint& dyn_V2();
    // Get instance field reference: public System.UInt32 V3
    [[deprecated("Use field access instead!")]] uint& dyn_V3();
    // Get instance field reference: public System.UInt32 V4
    [[deprecated("Use field access instead!")]] uint& dyn_V4();
    // Get instance field reference: public System.UInt32 V5
    [[deprecated("Use field access instead!")]] uint& dyn_V5();
    // Get instance field reference: public System.Boolean IsNegative
    [[deprecated("Use field access instead!")]] bool& dyn_IsNegative();
    // Get instance field reference: public System.UInt32 Separators
    [[deprecated("Use field access instead!")]] uint& dyn_Separators();
    // public System.Boolean TrySplitTimeSpan(System.ReadOnlySpan`1<System.Byte> source, System.Boolean periodUsedToSeparateDay, out System.Int32 bytesConsumed)
    // Offset: 0x4639F08
    bool TrySplitTimeSpan(::System::ReadOnlySpan_1<uint8_t> source, bool periodUsedToSeparateDay, ByRef<int> bytesConsumed);
    // static private System.Buffers.Text.Utf8Parser/ComponentParseResult ParseComponent(System.ReadOnlySpan`1<System.Byte> source, System.Boolean neverParseAsFraction, ref System.Int32 srcIndex, out System.UInt32 value)
    // Offset: 0x463A190
    static ::System::Buffers::Text::Utf8Parser::ComponentParseResult ParseComponent(::System::ReadOnlySpan_1<uint8_t> source, bool neverParseAsFraction, ByRef<int> srcIndex, ByRef<uint> value);
  }; // System.Buffers.Text.Utf8Parser/TimeSpanSplitter
  #pragma pack(pop)
  static check_size<sizeof(Utf8Parser::TimeSpanSplitter), 24 + sizeof(uint)> __System_Buffers_Text_Utf8Parser_TimeSpanSplitterSizeCheck;
  static_assert(sizeof(Utf8Parser::TimeSpanSplitter) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TimeSpanSplitter::TrySplitTimeSpan
// Il2CppName: TrySplitTimeSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Buffers::Text::Utf8Parser::TimeSpanSplitter::*)(::System::ReadOnlySpan_1<uint8_t>, bool, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TimeSpanSplitter::TrySplitTimeSpan)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* periodUsedToSeparateDay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser::TimeSpanSplitter), "TrySplitTimeSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, periodUsedToSeparateDay, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TimeSpanSplitter::ParseComponent
// Il2CppName: ParseComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Buffers::Text::Utf8Parser::ComponentParseResult (*)(::System::ReadOnlySpan_1<uint8_t>, bool, ByRef<int>, ByRef<uint>)>(&System::Buffers::Text::Utf8Parser::TimeSpanSplitter::ParseComponent)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* neverParseAsFraction = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser::TimeSpanSplitter), "ParseComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, neverParseAsFraction, srcIndex, value});
  }
};
