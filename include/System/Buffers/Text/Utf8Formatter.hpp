// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.Buffers.StandardFormat
#include "System/Buffers/StandardFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Buffers::Text
namespace System::Buffers::Text {
  // Forward declaring type: NumberBuffer
  struct NumberBuffer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: IFormattable
  class IFormattable;
}
// Completed forward declares
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Forward declaring type: Utf8Formatter
  class Utf8Formatter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Buffers::Text::Utf8Formatter);
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::Text::Utf8Formatter*, "System.Buffers.Text", "Utf8Formatter");
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Buffers.Text.Utf8Formatter
  // [TokenAttribute] Offset: FFFFFFFF
  class Utf8Formatter : public ::Il2CppObject {
    public:
    // Nested type: ::System::Buffers::Text::Utf8Formatter::DecomposedGuid
    struct DecomposedGuid;
    // Get static field: static private readonly System.UInt32[] DayAbbreviations
    static ::ArrayW<uint> _get_DayAbbreviations();
    // Set static field: static private readonly System.UInt32[] DayAbbreviations
    static void _set_DayAbbreviations(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] DayAbbreviationsLowercase
    static ::ArrayW<uint> _get_DayAbbreviationsLowercase();
    // Set static field: static private readonly System.UInt32[] DayAbbreviationsLowercase
    static void _set_DayAbbreviationsLowercase(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] MonthAbbreviations
    static ::ArrayW<uint> _get_MonthAbbreviations();
    // Set static field: static private readonly System.UInt32[] MonthAbbreviations
    static void _set_MonthAbbreviations(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] MonthAbbreviationsLowercase
    static ::ArrayW<uint> _get_MonthAbbreviationsLowercase();
    // Set static field: static private readonly System.UInt32[] MonthAbbreviationsLowercase
    static void _set_MonthAbbreviationsLowercase(::ArrayW<uint> value);
    // static public System.Boolean TryFormat(System.Boolean value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x462E208
    static bool TryFormat(bool value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Boolean TryFormatDateTimeG(System.DateTime value, System.TimeSpan offset, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x462E494
    static bool TryFormatDateTimeG(::System::DateTime value, ::System::TimeSpan offset, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatDateTimeL(System.DateTime value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x462E800
    static bool TryFormatDateTimeL(::System::DateTime value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatDateTimeO(System.DateTime value, System.TimeSpan offset, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x462EA78
    static bool TryFormatDateTimeO(::System::DateTime value, ::System::TimeSpan offset, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatDateTimeR(System.DateTime value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x462EEF0
    static bool TryFormatDateTimeR(::System::DateTime value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static public System.Boolean TryFormat(System.DateTimeOffset value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x462F168
    static bool TryFormat(::System::DateTimeOffset value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.DateTime value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x462F398
    static bool TryFormat(::System::DateTime value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Boolean TryFormatDecimalE(ref System.Buffers.Text.NumberBuffer number, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Byte precision, System.Byte exponentSymbol)
    // Offset: 0x462F590
    static bool TryFormatDecimalE(ByRef<::System::Buffers::Text::NumberBuffer> number, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, uint8_t precision, uint8_t exponentSymbol);
    // static private System.Boolean TryFormatDecimalF(ref System.Buffers.Text.NumberBuffer number, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Byte precision)
    // Offset: 0x462F808
    static bool TryFormatDecimalF(ByRef<::System::Buffers::Text::NumberBuffer> number, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, uint8_t precision);
    // static private System.Boolean TryFormatDecimalG(ref System.Buffers.Text.NumberBuffer number, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x462FAEC
    static bool TryFormatDecimalG(ByRef<::System::Buffers::Text::NumberBuffer> number, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static public System.Boolean TryFormat(System.Decimal value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x462FD3C
    static bool TryFormat(::System::Decimal value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Double value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x463006C
    static bool TryFormat(double value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Single value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4630110
    static bool TryFormat(float value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Boolean TryFormatFloatingPoint(T value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryFormatFloatingPoint(T value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IFormattable>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::Text::Utf8Formatter::TryFormatFloatingPoint");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Buffers.Text", "Utf8Formatter", "TryFormatFloatingPoint", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(format)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value, destination, byref(bytesWritten), format);
    }
    // static public System.Boolean TryFormat(System.Guid value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x46301B4
    static bool TryFormat(::System::Guid value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Boolean TryFormatInt64D(System.Int64 value, System.Byte precision, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4630810
    static bool TryFormatInt64D(int64_t value, uint8_t precision, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64Default(System.Int64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4630B68
    static bool TryFormatInt64Default(int64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt32MultipleDigits(System.Int32 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4631764
    static bool TryFormatInt32MultipleDigits(int value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64MultipleDigits(System.Int64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4631960
    static bool TryFormatInt64MultipleDigits(int64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64MoreThanNegativeBillionMaxUInt(System.Int64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4630FB4
    static bool TryFormatInt64MoreThanNegativeBillionMaxUInt(int64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64LessThanNegativeBillionMaxUInt(System.Int64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x46314B4
    static bool TryFormatInt64LessThanNegativeBillionMaxUInt(int64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64N(System.Int64 value, System.Byte precision, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4631BA4
    static bool TryFormatInt64N(int64_t value, uint8_t precision, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatInt64(System.Int64 value, System.UInt64 mask, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4631F44
    static bool TryFormatInt64(int64_t value, uint64_t mask, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Boolean TryFormatUInt64D(System.UInt64 value, System.Byte precision, System.Span`1<System.Byte> destination, System.Boolean insertNegationSign, out System.Int32 bytesWritten)
    // Offset: 0x463089C
    static bool TryFormatUInt64D(uint64_t value, uint8_t precision, ::System::Span_1<uint8_t> destination, bool insertNegationSign, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64Default(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x46323E4
    static bool TryFormatUInt64Default(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt32SingleDigit(System.UInt32 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4632570
    static bool TryFormatUInt32SingleDigit(uint value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt32MultipleDigits(System.UInt32 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x46325E0
    static bool TryFormatUInt32MultipleDigits(uint value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64MultipleDigits(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x463276C
    static bool TryFormatUInt64MultipleDigits(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64LessThanBillionMaxUInt(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4630D68
    static bool TryFormatUInt64LessThanBillionMaxUInt(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64MoreThanBillionMaxUInt(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4631230
    static bool TryFormatUInt64MoreThanBillionMaxUInt(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64N(System.UInt64 value, System.Byte precision, System.Span`1<System.Byte> destination, System.Boolean insertNegationSign, out System.Int32 bytesWritten)
    // Offset: 0x4631C30
    static bool TryFormatUInt64N(uint64_t value, uint8_t precision, ::System::Span_1<uint8_t> destination, bool insertNegationSign, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64X(System.UInt64 value, System.Byte precision, System.Boolean useLower, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4632278
    static bool TryFormatUInt64X(uint64_t value, uint8_t precision, bool useLower, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // static private System.Boolean TryFormatUInt64(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x463294C
    static bool TryFormatUInt64(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Byte value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632BDC
    static bool TryFormat(uint8_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.SByte value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632C64
    static bool TryFormat(int8_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.UInt16 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632CF0
    static bool TryFormat(uint16_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Int16 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632D78
    static bool TryFormat(int16_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.UInt32 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632E04
    static bool TryFormat(uint value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Int32 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632E8C
    static bool TryFormat(int value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.UInt64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632F18
    static bool TryFormat(uint64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.Int64 value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x4632FA0
    static bool TryFormat(int64_t value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static public System.Boolean TryFormat(System.TimeSpan value, System.Span`1<System.Byte> destination, out System.Int32 bytesWritten, System.Buffers.StandardFormat format)
    // Offset: 0x463302C
    static bool TryFormat(::System::TimeSpan value, ::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten, ::System::Buffers::StandardFormat format);
    // static private System.Void .cctor()
    // Offset: 0x463373C
    static void _cctor();
  }; // System.Buffers.Text.Utf8Formatter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDateTimeG
// Il2CppName: TryFormatDateTimeG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeSpan, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatDateTimeG)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDateTimeG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, offset, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDateTimeL
// Il2CppName: TryFormatDateTimeL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatDateTimeL)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDateTimeL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDateTimeO
// Il2CppName: TryFormatDateTimeO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeSpan, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatDateTimeO)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDateTimeO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, offset, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDateTimeR
// Il2CppName: TryFormatDateTimeR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatDateTimeR)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDateTimeR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTimeOffset, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDecimalE
// Il2CppName: TryFormatDecimalE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Buffers::Text::NumberBuffer>, ::System::Span_1<uint8_t>, ByRef<int>, uint8_t, uint8_t)>(&System::Buffers::Text::Utf8Formatter::TryFormatDecimalE)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System.Buffers.Text", "NumberBuffer")->this_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* exponentSymbol = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDecimalE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, destination, bytesWritten, precision, exponentSymbol});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDecimalF
// Il2CppName: TryFormatDecimalF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Buffers::Text::NumberBuffer>, ::System::Span_1<uint8_t>, ByRef<int>, uint8_t)>(&System::Buffers::Text::Utf8Formatter::TryFormatDecimalF)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System.Buffers.Text", "NumberBuffer")->this_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDecimalF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, destination, bytesWritten, precision});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatDecimalG
// Il2CppName: TryFormatDecimalG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Buffers::Text::NumberBuffer>, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatDecimalG)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System.Buffers.Text", "NumberBuffer")->this_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatDecimalG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Decimal, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatFloatingPoint
// Il2CppName: TryFormatFloatingPoint
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Guid, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64D
// Il2CppName: TryFormatInt64D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, uint8_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64Default
// Il2CppName: TryFormatInt64Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64Default)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt32MultipleDigits
// Il2CppName: TryFormatInt32MultipleDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt32MultipleDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt32MultipleDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64MultipleDigits
// Il2CppName: TryFormatInt64MultipleDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64MultipleDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64MultipleDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64MoreThanNegativeBillionMaxUInt
// Il2CppName: TryFormatInt64MoreThanNegativeBillionMaxUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64MoreThanNegativeBillionMaxUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64MoreThanNegativeBillionMaxUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64LessThanNegativeBillionMaxUInt
// Il2CppName: TryFormatInt64LessThanNegativeBillionMaxUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64LessThanNegativeBillionMaxUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64LessThanNegativeBillionMaxUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64N
// Il2CppName: TryFormatInt64N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, uint8_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64N)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatInt64
// Il2CppName: TryFormatInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, uint64_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormatInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, mask, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64D
// Il2CppName: TryFormatUInt64D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint8_t, ::System::Span_1<uint8_t>, bool, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64D)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* insertNegationSign = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, destination, insertNegationSign, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64Default
// Il2CppName: TryFormatUInt64Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64Default)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt32SingleDigit
// Il2CppName: TryFormatUInt32SingleDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt32SingleDigit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt32SingleDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt32MultipleDigits
// Il2CppName: TryFormatUInt32MultipleDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt32MultipleDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt32MultipleDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64MultipleDigits
// Il2CppName: TryFormatUInt64MultipleDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64MultipleDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64MultipleDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64LessThanBillionMaxUInt
// Il2CppName: TryFormatUInt64LessThanBillionMaxUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64LessThanBillionMaxUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64LessThanBillionMaxUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64MoreThanBillionMaxUInt
// Il2CppName: TryFormatUInt64MoreThanBillionMaxUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64MoreThanBillionMaxUInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64MoreThanBillionMaxUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64N
// Il2CppName: TryFormatUInt64N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint8_t, ::System::Span_1<uint8_t>, bool, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64N)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* insertNegationSign = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, destination, insertNegationSign, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64X
// Il2CppName: TryFormatUInt64X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint8_t, bool, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64X)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* useLower = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, useLower, destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormatUInt64
// Il2CppName: TryFormatUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormatUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormatUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int8_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint16_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int16_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::TimeSpan, ::System::Span_1<uint8_t>, ByRef<int>, ::System::Buffers::StandardFormat)>(&System::Buffers::Text::Utf8Formatter::TryFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Buffers", "StandardFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, bytesWritten, format});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Formatter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Buffers::Text::Utf8Formatter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Formatter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
