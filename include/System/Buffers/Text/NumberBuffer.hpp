// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Forward declaring type: NumberBuffer
  struct NumberBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::Text::NumberBuffer, "System.Buffers.Text", "NumberBuffer");
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Buffers.Text.NumberBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct NumberBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 Scale
    // Size: 0x4
    // Offset: 0x0
    int Scale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean IsNegative
    // Size: 0x1
    // Offset: 0x4
    bool IsNegative;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte _b0
    // Size: 0x1
    // Offset: 0x5
    uint8_t b0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b1
    // Size: 0x1
    // Offset: 0x6
    uint8_t b1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b2
    // Size: 0x1
    // Offset: 0x7
    uint8_t b2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b3
    // Size: 0x1
    // Offset: 0x8
    uint8_t b3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b4
    // Size: 0x1
    // Offset: 0x9
    uint8_t b4;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b5
    // Size: 0x1
    // Offset: 0xA
    uint8_t b5;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b6
    // Size: 0x1
    // Offset: 0xB
    uint8_t b6;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b7
    // Size: 0x1
    // Offset: 0xC
    uint8_t b7;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b8
    // Size: 0x1
    // Offset: 0xD
    uint8_t b8;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b9
    // Size: 0x1
    // Offset: 0xE
    uint8_t b9;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b10
    // Size: 0x1
    // Offset: 0xF
    uint8_t b10;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b11
    // Size: 0x1
    // Offset: 0x10
    uint8_t b11;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b12
    // Size: 0x1
    // Offset: 0x11
    uint8_t b12;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b13
    // Size: 0x1
    // Offset: 0x12
    uint8_t b13;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b14
    // Size: 0x1
    // Offset: 0x13
    uint8_t b14;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b15
    // Size: 0x1
    // Offset: 0x14
    uint8_t b15;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b16
    // Size: 0x1
    // Offset: 0x15
    uint8_t b16;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b17
    // Size: 0x1
    // Offset: 0x16
    uint8_t b17;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b18
    // Size: 0x1
    // Offset: 0x17
    uint8_t b18;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b19
    // Size: 0x1
    // Offset: 0x18
    uint8_t b19;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b20
    // Size: 0x1
    // Offset: 0x19
    uint8_t b20;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b21
    // Size: 0x1
    // Offset: 0x1A
    uint8_t b21;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b22
    // Size: 0x1
    // Offset: 0x1B
    uint8_t b22;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b23
    // Size: 0x1
    // Offset: 0x1C
    uint8_t b23;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b24
    // Size: 0x1
    // Offset: 0x1D
    uint8_t b24;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b25
    // Size: 0x1
    // Offset: 0x1E
    uint8_t b25;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b26
    // Size: 0x1
    // Offset: 0x1F
    uint8_t b26;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b27
    // Size: 0x1
    // Offset: 0x20
    uint8_t b27;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b28
    // Size: 0x1
    // Offset: 0x21
    uint8_t b28;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b29
    // Size: 0x1
    // Offset: 0x22
    uint8_t b29;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b30
    // Size: 0x1
    // Offset: 0x23
    uint8_t b30;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b31
    // Size: 0x1
    // Offset: 0x24
    uint8_t b31;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b32
    // Size: 0x1
    // Offset: 0x25
    uint8_t b32;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b33
    // Size: 0x1
    // Offset: 0x26
    uint8_t b33;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b34
    // Size: 0x1
    // Offset: 0x27
    uint8_t b34;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b35
    // Size: 0x1
    // Offset: 0x28
    uint8_t b35;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b36
    // Size: 0x1
    // Offset: 0x29
    uint8_t b36;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b37
    // Size: 0x1
    // Offset: 0x2A
    uint8_t b37;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b38
    // Size: 0x1
    // Offset: 0x2B
    uint8_t b38;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b39
    // Size: 0x1
    // Offset: 0x2C
    uint8_t b39;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b40
    // Size: 0x1
    // Offset: 0x2D
    uint8_t b40;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b41
    // Size: 0x1
    // Offset: 0x2E
    uint8_t b41;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b42
    // Size: 0x1
    // Offset: 0x2F
    uint8_t b42;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b43
    // Size: 0x1
    // Offset: 0x30
    uint8_t b43;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b44
    // Size: 0x1
    // Offset: 0x31
    uint8_t b44;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b45
    // Size: 0x1
    // Offset: 0x32
    uint8_t b45;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b46
    // Size: 0x1
    // Offset: 0x33
    uint8_t b46;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b47
    // Size: 0x1
    // Offset: 0x34
    uint8_t b47;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b48
    // Size: 0x1
    // Offset: 0x35
    uint8_t b48;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b49
    // Size: 0x1
    // Offset: 0x36
    uint8_t b49;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _b50
    // Size: 0x1
    // Offset: 0x37
    uint8_t b50;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: NumberBuffer
    constexpr NumberBuffer(int Scale_ = {}, bool IsNegative_ = {}, uint8_t b0_ = {}, uint8_t b1_ = {}, uint8_t b2_ = {}, uint8_t b3_ = {}, uint8_t b4_ = {}, uint8_t b5_ = {}, uint8_t b6_ = {}, uint8_t b7_ = {}, uint8_t b8_ = {}, uint8_t b9_ = {}, uint8_t b10_ = {}, uint8_t b11_ = {}, uint8_t b12_ = {}, uint8_t b13_ = {}, uint8_t b14_ = {}, uint8_t b15_ = {}, uint8_t b16_ = {}, uint8_t b17_ = {}, uint8_t b18_ = {}, uint8_t b19_ = {}, uint8_t b20_ = {}, uint8_t b21_ = {}, uint8_t b22_ = {}, uint8_t b23_ = {}, uint8_t b24_ = {}, uint8_t b25_ = {}, uint8_t b26_ = {}, uint8_t b27_ = {}, uint8_t b28_ = {}, uint8_t b29_ = {}, uint8_t b30_ = {}, uint8_t b31_ = {}, uint8_t b32_ = {}, uint8_t b33_ = {}, uint8_t b34_ = {}, uint8_t b35_ = {}, uint8_t b36_ = {}, uint8_t b37_ = {}, uint8_t b38_ = {}, uint8_t b39_ = {}, uint8_t b40_ = {}, uint8_t b41_ = {}, uint8_t b42_ = {}, uint8_t b43_ = {}, uint8_t b44_ = {}, uint8_t b45_ = {}, uint8_t b46_ = {}, uint8_t b47_ = {}, uint8_t b48_ = {}, uint8_t b49_ = {}, uint8_t b50_ = {}) noexcept : Scale{Scale_}, IsNegative{IsNegative_}, b0{b0_}, b1{b1_}, b2{b2_}, b3{b3_}, b4{b4_}, b5{b5_}, b6{b6_}, b7{b7_}, b8{b8_}, b9{b9_}, b10{b10_}, b11{b11_}, b12{b12_}, b13{b13_}, b14{b14_}, b15{b15_}, b16{b16_}, b17{b17_}, b18{b18_}, b19{b19_}, b20{b20_}, b21{b21_}, b22{b22_}, b23{b23_}, b24{b24_}, b25{b25_}, b26{b26_}, b27{b27_}, b28{b28_}, b29{b29_}, b30{b30_}, b31{b31_}, b32{b32_}, b33{b33_}, b34{b34_}, b35{b35_}, b36{b36_}, b37{b37_}, b38{b38_}, b39{b39_}, b40{b40_}, b41{b41_}, b42{b42_}, b43{b43_}, b44{b44_}, b45{b45_}, b46{b46_}, b47{b47_}, b48{b48_}, b49{b49_}, b50{b50_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 Scale
    [[deprecated("Use field access instead!")]] int& dyn_Scale();
    // Get instance field reference: public System.Boolean IsNegative
    [[deprecated("Use field access instead!")]] bool& dyn_IsNegative();
    // Get instance field reference: private System.Byte _b0
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b0();
    // Get instance field reference: private System.Byte _b1
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b1();
    // Get instance field reference: private System.Byte _b2
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b2();
    // Get instance field reference: private System.Byte _b3
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b3();
    // Get instance field reference: private System.Byte _b4
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b4();
    // Get instance field reference: private System.Byte _b5
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b5();
    // Get instance field reference: private System.Byte _b6
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b6();
    // Get instance field reference: private System.Byte _b7
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b7();
    // Get instance field reference: private System.Byte _b8
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b8();
    // Get instance field reference: private System.Byte _b9
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b9();
    // Get instance field reference: private System.Byte _b10
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b10();
    // Get instance field reference: private System.Byte _b11
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b11();
    // Get instance field reference: private System.Byte _b12
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b12();
    // Get instance field reference: private System.Byte _b13
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b13();
    // Get instance field reference: private System.Byte _b14
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b14();
    // Get instance field reference: private System.Byte _b15
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b15();
    // Get instance field reference: private System.Byte _b16
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b16();
    // Get instance field reference: private System.Byte _b17
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b17();
    // Get instance field reference: private System.Byte _b18
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b18();
    // Get instance field reference: private System.Byte _b19
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b19();
    // Get instance field reference: private System.Byte _b20
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b20();
    // Get instance field reference: private System.Byte _b21
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b21();
    // Get instance field reference: private System.Byte _b22
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b22();
    // Get instance field reference: private System.Byte _b23
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b23();
    // Get instance field reference: private System.Byte _b24
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b24();
    // Get instance field reference: private System.Byte _b25
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b25();
    // Get instance field reference: private System.Byte _b26
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b26();
    // Get instance field reference: private System.Byte _b27
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b27();
    // Get instance field reference: private System.Byte _b28
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b28();
    // Get instance field reference: private System.Byte _b29
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b29();
    // Get instance field reference: private System.Byte _b30
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b30();
    // Get instance field reference: private System.Byte _b31
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b31();
    // Get instance field reference: private System.Byte _b32
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b32();
    // Get instance field reference: private System.Byte _b33
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b33();
    // Get instance field reference: private System.Byte _b34
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b34();
    // Get instance field reference: private System.Byte _b35
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b35();
    // Get instance field reference: private System.Byte _b36
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b36();
    // Get instance field reference: private System.Byte _b37
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b37();
    // Get instance field reference: private System.Byte _b38
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b38();
    // Get instance field reference: private System.Byte _b39
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b39();
    // Get instance field reference: private System.Byte _b40
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b40();
    // Get instance field reference: private System.Byte _b41
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b41();
    // Get instance field reference: private System.Byte _b42
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b42();
    // Get instance field reference: private System.Byte _b43
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b43();
    // Get instance field reference: private System.Byte _b44
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b44();
    // Get instance field reference: private System.Byte _b45
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b45();
    // Get instance field reference: private System.Byte _b46
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b46();
    // Get instance field reference: private System.Byte _b47
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b47();
    // Get instance field reference: private System.Byte _b48
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b48();
    // Get instance field reference: private System.Byte _b49
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b49();
    // Get instance field reference: private System.Byte _b50
    [[deprecated("Use field access instead!")]] uint8_t& dyn__b50();
    // public System.Span`1<System.Byte> get_Digits()
    // Offset: 0x463ACE8
    ::System::Span_1<uint8_t> get_Digits();
    // public System.Byte* get_UnsafeDigits()
    // Offset: 0x463AB08
    uint8_t* get_UnsafeDigits();
    // public System.Int32 get_NumDigits()
    // Offset: 0x463AE98
    int get_NumDigits();
    // public override System.String ToString()
    // Offset: 0x463B1CC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Buffers.Text.NumberBuffer
  #pragma pack(pop)
  static check_size<sizeof(NumberBuffer), 55 + sizeof(uint8_t)> __System_Buffers_Text_NumberBufferSizeCheck;
  static_assert(sizeof(NumberBuffer) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Buffers::Text::NumberBuffer::get_Digits
// Il2CppName: get_Digits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Span_1<uint8_t> (System::Buffers::Text::NumberBuffer::*)()>(&System::Buffers::Text::NumberBuffer::get_Digits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::NumberBuffer), "get_Digits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::NumberBuffer::get_UnsafeDigits
// Il2CppName: get_UnsafeDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (System::Buffers::Text::NumberBuffer::*)()>(&System::Buffers::Text::NumberBuffer::get_UnsafeDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::NumberBuffer), "get_UnsafeDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::NumberBuffer::get_NumDigits
// Il2CppName: get_NumDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Buffers::Text::NumberBuffer::*)()>(&System::Buffers::Text::NumberBuffer::get_NumDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::NumberBuffer), "get_NumDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::NumberBuffer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Buffers::Text::NumberBuffer::*)()>(&System::Buffers::Text::NumberBuffer::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::NumberBuffer), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
