// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Buffers::Text
namespace System::Buffers::Text {
  // Forward declaring type: NumberBuffer
  struct NumberBuffer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: DateTimeKind
  struct DateTimeKind;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Forward declaring type: Utf8Parser
  class Utf8Parser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Buffers::Text::Utf8Parser);
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::Text::Utf8Parser*, "System.Buffers.Text", "Utf8Parser");
// Type namespace: System.Buffers.Text
namespace System::Buffers::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Buffers.Text.Utf8Parser
  // [TokenAttribute] Offset: FFFFFFFF
  class Utf8Parser : public ::Il2CppObject {
    public:
    // Nested type: ::System::Buffers::Text::Utf8Parser::ParseNumberOptions
    struct ParseNumberOptions;
    // Nested type: ::System::Buffers::Text::Utf8Parser::ComponentParseResult
    struct ComponentParseResult;
    // Nested type: ::System::Buffers::Text::Utf8Parser::TimeSpanSplitter
    struct TimeSpanSplitter;
    // Get static field: static private readonly System.Int32[] s_daysToMonth365
    static ::ArrayW<int> _get_s_daysToMonth365();
    // Set static field: static private readonly System.Int32[] s_daysToMonth365
    static void _set_s_daysToMonth365(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] s_daysToMonth366
    static ::ArrayW<int> _get_s_daysToMonth366();
    // Set static field: static private readonly System.Int32[] s_daysToMonth366
    static void _set_s_daysToMonth366(::ArrayW<int> value);
    // static private System.Boolean TryParseDateTimeOffsetDefault(System.ReadOnlySpan`1<System.Byte> source, out System.DateTimeOffset value, out System.Int32 bytesConsumed)
    // Offset: 0x4633960
    static bool TryParseDateTimeOffsetDefault(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::DateTimeOffset> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseDateTimeG(System.ReadOnlySpan`1<System.Byte> source, out System.DateTime value, out System.DateTimeOffset valueAsOffset, out System.Int32 bytesConsumed)
    // Offset: 0x4633B34
    static bool TryParseDateTimeG(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::DateTime> value, ByRef<::System::DateTimeOffset> valueAsOffset, ByRef<int> bytesConsumed);
    // static private System.Boolean TryCreateDateTimeOffset(System.DateTime dateTime, System.Boolean offsetNegative, System.Int32 offsetHours, System.Int32 offsetMinutes, out System.DateTimeOffset value)
    // Offset: 0x4633D84
    static bool TryCreateDateTimeOffset(::System::DateTime dateTime, bool offsetNegative, int offsetHours, int offsetMinutes, ByRef<::System::DateTimeOffset> value);
    // static private System.Boolean TryCreateDateTimeOffset(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 fraction, System.Boolean offsetNegative, System.Int32 offsetHours, System.Int32 offsetMinutes, out System.DateTimeOffset value)
    // Offset: 0x4634004
    static bool TryCreateDateTimeOffset(int year, int month, int day, int hour, int minute, int second, int fraction, bool offsetNegative, int offsetHours, int offsetMinutes, ByRef<::System::DateTimeOffset> value);
    // static private System.Boolean TryCreateDateTimeOffsetInterpretingDataAsLocalTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 fraction, out System.DateTimeOffset value)
    // Offset: 0x4633EA4
    static bool TryCreateDateTimeOffsetInterpretingDataAsLocalTime(int year, int month, int day, int hour, int minute, int second, int fraction, ByRef<::System::DateTimeOffset> value);
    // static private System.Boolean TryCreateDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 fraction, System.DateTimeKind kind, out System.DateTime value)
    // Offset: 0x4634118
    static bool TryCreateDateTime(int year, int month, int day, int hour, int minute, int second, int fraction, ::System::DateTimeKind kind, ByRef<::System::DateTime> value);
    // static private System.Boolean TryParseDateTimeOffsetO(System.ReadOnlySpan`1<System.Byte> source, out System.DateTimeOffset value, out System.Int32 bytesConsumed, out System.DateTimeKind kind)
    // Offset: 0x4634344
    static bool TryParseDateTimeOffsetO(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::DateTimeOffset> value, ByRef<int> bytesConsumed, ByRef<::System::DateTimeKind> kind);
    // static private System.Boolean TryParseDateTimeOffsetR(System.ReadOnlySpan`1<System.Byte> source, System.UInt32 caseFlipXorMask, out System.DateTimeOffset dateTimeOffset, out System.Int32 bytesConsumed)
    // Offset: 0x4634788
    static bool TryParseDateTimeOffsetR(::System::ReadOnlySpan_1<uint8_t> source, uint caseFlipXorMask, ByRef<::System::DateTimeOffset> dateTimeOffset, ByRef<int> bytesConsumed);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.DateTime value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4634C5C
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::DateTime> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.DateTimeOffset value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4634E68
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::DateTimeOffset> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Decimal value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4635020
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::Decimal> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Single value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4635730
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<float> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Double value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4635A08
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<double> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseNormalAsFloatingPoint(System.ReadOnlySpan`1<System.Byte> source, out System.Double value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4635858
    static bool TryParseNormalAsFloatingPoint(::System::ReadOnlySpan_1<uint8_t> source, ByRef<double> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseAsSpecialFloatingPoint(System.ReadOnlySpan`1<System.Byte> source, T positiveInfinity, T negativeInfinity, T nan, out T value, out System.Int32 bytesConsumed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryParseAsSpecialFloatingPoint(::System::ReadOnlySpan_1<uint8_t> source, T positiveInfinity, T negativeInfinity, T nan, ByRef<T> value, ByRef<int> bytesConsumed) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Buffers::Text::Utf8Parser::TryParseAsSpecialFloatingPoint");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Buffers.Text", "Utf8Parser", "TryParseAsSpecialFloatingPoint", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(positiveInfinity), ::il2cpp_utils::ExtractType(negativeInfinity), ::il2cpp_utils::ExtractType(nan), ::il2cpp_utils::ExtractIndependentType<T&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, positiveInfinity, negativeInfinity, nan, byref(value), byref(bytesConsumed));
    }
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Guid value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4635AFC
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::Guid> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseGuidN(System.ReadOnlySpan`1<System.Byte> text, out System.Guid value, out System.Int32 bytesConsumed)
    // Offset: 0x4635FE8
    static bool TryParseGuidN(::System::ReadOnlySpan_1<uint8_t> text, ByRef<::System::Guid> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseGuidCore(System.ReadOnlySpan`1<System.Byte> source, System.Boolean ends, System.Char begin, System.Char end, out System.Guid value, out System.Int32 bytesConsumed)
    // Offset: 0x4635C84
    static bool TryParseGuidCore(::System::ReadOnlySpan_1<uint8_t> source, bool ends, ::Il2CppChar begin, ::Il2CppChar end, ByRef<::System::Guid> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseInt32D(System.ReadOnlySpan`1<System.Byte> source, out System.Int32 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636778
    static bool TryParseInt32D(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseInt64D(System.ReadOnlySpan`1<System.Byte> source, out System.Int64 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636B0C
    static bool TryParseInt64D(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int64_t> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseInt32N(System.ReadOnlySpan`1<System.Byte> source, out System.Int32 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636D1C
    static bool TryParseInt32N(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseInt64N(System.ReadOnlySpan`1<System.Byte> source, out System.Int64 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636F24
    static bool TryParseInt64N(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int64_t> value, ByRef<int> bytesConsumed);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Int32 value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x463713C
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.Int64 value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x46372E8
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<int64_t> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseUInt32D(System.ReadOnlySpan`1<System.Byte> source, out System.UInt32 value, out System.Int32 bytesConsumed)
    // Offset: 0x4637494
    static bool TryParseUInt32D(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt64D(System.ReadOnlySpan`1<System.Byte> source, out System.UInt64 value, out System.Int32 bytesConsumed)
    // Offset: 0x46377C8
    static bool TryParseUInt64D(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint64_t> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt32N(System.ReadOnlySpan`1<System.Byte> source, out System.UInt32 value, out System.Int32 bytesConsumed)
    // Offset: 0x463793C
    static bool TryParseUInt32N(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt64N(System.ReadOnlySpan`1<System.Byte> source, out System.UInt64 value, out System.Int32 bytesConsumed)
    // Offset: 0x4637B14
    static bool TryParseUInt64N(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint64_t> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt16X(System.ReadOnlySpan`1<System.Byte> source, out System.UInt16 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636430
    static bool TryParseUInt16X(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint16_t> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt32X(System.ReadOnlySpan`1<System.Byte> source, out System.UInt32 value, out System.Int32 bytesConsumed)
    // Offset: 0x4636288
    static bool TryParseUInt32X(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseUInt64X(System.ReadOnlySpan`1<System.Byte> source, out System.UInt64 value, out System.Int32 bytesConsumed)
    // Offset: 0x46365D0
    static bool TryParseUInt64X(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint64_t> value, ByRef<int> bytesConsumed);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.UInt32 value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4637CF8
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.UInt64 value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4637EA0
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint64_t> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseNumber(System.ReadOnlySpan`1<System.Byte> source, ref System.Buffers.Text.NumberBuffer number, out System.Int32 bytesConsumed, System.Buffers.Text.Utf8Parser/ParseNumberOptions options, out System.Boolean textUsedExponentNotation)
    // Offset: 0x46351DC
    static bool TryParseNumber(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::Buffers::Text::NumberBuffer> number, ByRef<int> bytesConsumed, ::System::Buffers::Text::Utf8Parser::ParseNumberOptions options, ByRef<bool> textUsedExponentNotation);
    // static private System.Boolean TryParseTimeSpanBigG(System.ReadOnlySpan`1<System.Byte> source, out System.TimeSpan value, out System.Int32 bytesConsumed)
    // Offset: 0x4638048
    static bool TryParseTimeSpanBigG(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::TimeSpan> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseTimeSpanC(System.ReadOnlySpan`1<System.Byte> source, out System.TimeSpan value, out System.Int32 bytesConsumed)
    // Offset: 0x4638608
    static bool TryParseTimeSpanC(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::TimeSpan> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryParseTimeSpanLittleG(System.ReadOnlySpan`1<System.Byte> source, out System.TimeSpan value, out System.Int32 bytesConsumed)
    // Offset: 0x4638900
    static bool TryParseTimeSpanLittleG(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::TimeSpan> value, ByRef<int> bytesConsumed);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Byte> source, out System.TimeSpan value, out System.Int32 bytesConsumed, System.Char standardFormat)
    // Offset: 0x4638BAC
    static bool TryParse(::System::ReadOnlySpan_1<uint8_t> source, ByRef<::System::TimeSpan> value, ByRef<int> bytesConsumed, ::Il2CppChar standardFormat);
    // static private System.Boolean TryParseTimeSpanFraction(System.ReadOnlySpan`1<System.Byte> source, out System.UInt32 value, out System.Int32 bytesConsumed)
    // Offset: 0x46383F8
    static bool TryParseTimeSpanFraction(::System::ReadOnlySpan_1<uint8_t> source, ByRef<uint> value, ByRef<int> bytesConsumed);
    // static private System.Boolean TryCreateTimeSpan(System.Boolean isNegative, System.UInt32 days, System.UInt32 hours, System.UInt32 minutes, System.UInt32 seconds, System.UInt32 fraction, out System.TimeSpan timeSpan)
    // Offset: 0x463854C
    static bool TryCreateTimeSpan(bool isNegative, uint days, uint hours, uint minutes, uint seconds, uint fraction, ByRef<::System::TimeSpan> timeSpan);
    // static private System.Void .cctor()
    // Offset: 0x4638D08
    static void _cctor();
  }; // System.Buffers.Text.Utf8Parser
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetDefault
// Il2CppName: TryParseDateTimeOffsetDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::DateTimeOffset>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetDefault)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseDateTimeOffsetDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseDateTimeG
// Il2CppName: TryParseDateTimeG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::DateTime>, ByRef<::System::DateTimeOffset>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseDateTimeG)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    static auto* valueAsOffset = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseDateTimeG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, valueAsOffset, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffset
// Il2CppName: TryCreateDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, bool, int, int, ByRef<::System::DateTimeOffset>)>(&System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offsetNegative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* offsetHours = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetMinutes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryCreateDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offsetNegative, offsetHours, offsetMinutes, value});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffset
// Il2CppName: TryCreateDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, int, int, int, int, bool, int, int, ByRef<::System::DateTimeOffset>)>(&System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minute = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fraction = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetNegative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* offsetHours = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetMinutes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryCreateDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day, hour, minute, second, fraction, offsetNegative, offsetHours, offsetMinutes, value});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffsetInterpretingDataAsLocalTime
// Il2CppName: TryCreateDateTimeOffsetInterpretingDataAsLocalTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, int, int, int, int, ByRef<::System::DateTimeOffset>)>(&System::Buffers::Text::Utf8Parser::TryCreateDateTimeOffsetInterpretingDataAsLocalTime)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minute = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fraction = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryCreateDateTimeOffsetInterpretingDataAsLocalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day, hour, minute, second, fraction, value});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryCreateDateTime
// Il2CppName: TryCreateDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int, int, int, int, int, ::System::DateTimeKind, ByRef<::System::DateTime>)>(&System::Buffers::Text::Utf8Parser::TryCreateDateTime)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minute = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fraction = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryCreateDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day, hour, minute, second, fraction, kind, value});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetO
// Il2CppName: TryParseDateTimeOffsetO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::DateTimeOffset>, ByRef<int>, ByRef<::System::DateTimeKind>)>(&System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetO)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseDateTimeOffsetO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, kind});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetR
// Il2CppName: TryParseDateTimeOffsetR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, uint, ByRef<::System::DateTimeOffset>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseDateTimeOffsetR)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* caseFlipXorMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* dateTimeOffset = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseDateTimeOffsetR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, caseFlipXorMask, dateTimeOffset, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::DateTime>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::DateTimeOffset>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::Decimal>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<float>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<double>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseNormalAsFloatingPoint
// Il2CppName: TryParseNormalAsFloatingPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<double>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParseNormalAsFloatingPoint)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseNormalAsFloatingPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseAsSpecialFloatingPoint
// Il2CppName: TryParseAsSpecialFloatingPoint
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::Guid>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseGuidN
// Il2CppName: TryParseGuidN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::Guid>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseGuidN)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseGuidN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseGuidCore
// Il2CppName: TryParseGuidCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, bool, ::Il2CppChar, ::Il2CppChar, ByRef<::System::Guid>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseGuidCore)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* ends = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* begin = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseGuidCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, ends, begin, end, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseInt32D
// Il2CppName: TryParseInt32D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseInt32D)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseInt32D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseInt64D
// Il2CppName: TryParseInt64D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int64_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseInt64D)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseInt64D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseInt32N
// Il2CppName: TryParseInt32N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseInt32N)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseInt32N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseInt64N
// Il2CppName: TryParseInt64N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int64_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseInt64N)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseInt64N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<int64_t>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt32D
// Il2CppName: TryParseUInt32D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt32D)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt32D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt64D
// Il2CppName: TryParseUInt64D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint64_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt64D)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt64D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt32N
// Il2CppName: TryParseUInt32N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt32N)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt32N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt64N
// Il2CppName: TryParseUInt64N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint64_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt64N)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt64N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt16X
// Il2CppName: TryParseUInt16X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint16_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt16X)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt16X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt32X
// Il2CppName: TryParseUInt32X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt32X)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt32X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseUInt64X
// Il2CppName: TryParseUInt64X
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint64_t>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseUInt64X)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseUInt64X", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint64_t>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseNumber
// Il2CppName: TryParseNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::Buffers::Text::NumberBuffer>, ByRef<int>, ::System::Buffers::Text::Utf8Parser::ParseNumberOptions, ByRef<bool>)>(&System::Buffers::Text::Utf8Parser::TryParseNumber)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System.Buffers.Text", "NumberBuffer")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Buffers.Text", "Utf8Parser/ParseNumberOptions")->byval_arg;
    static auto* textUsedExponentNotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, number, bytesConsumed, options, textUsedExponentNotation});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseTimeSpanBigG
// Il2CppName: TryParseTimeSpanBigG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::TimeSpan>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseTimeSpanBigG)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseTimeSpanBigG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseTimeSpanC
// Il2CppName: TryParseTimeSpanC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::TimeSpan>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseTimeSpanC)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseTimeSpanC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseTimeSpanLittleG
// Il2CppName: TryParseTimeSpanLittleG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::TimeSpan>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseTimeSpanLittleG)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseTimeSpanLittleG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<::System::TimeSpan>, ByRef<int>, ::Il2CppChar)>(&System::Buffers::Text::Utf8Parser::TryParse)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* standardFormat = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed, standardFormat});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryParseTimeSpanFraction
// Il2CppName: TryParseTimeSpanFraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<uint8_t>, ByRef<uint>, ByRef<int>)>(&System::Buffers::Text::Utf8Parser::TryParseTimeSpanFraction)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bytesConsumed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryParseTimeSpanFraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value, bytesConsumed});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::TryCreateTimeSpan
// Il2CppName: TryCreateTimeSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, uint, uint, uint, uint, uint, ByRef<::System::TimeSpan>)>(&System::Buffers::Text::Utf8Parser::TryCreateTimeSpan)> {
  static const MethodInfo* get() {
    static auto* isNegative = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* days = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hours = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* minutes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* fraction = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* timeSpan = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), "TryCreateTimeSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isNegative, days, hours, minutes, seconds, fraction, timeSpan});
  }
};
// Writing MetadataGetter for method: System::Buffers::Text::Utf8Parser::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Buffers::Text::Utf8Parser::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::Text::Utf8Parser*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
