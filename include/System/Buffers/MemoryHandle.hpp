// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: IPinnable
  class IPinnable;
}
// Completed forward declares
// Type namespace: System.Buffers
namespace System::Buffers {
  // Forward declaring type: MemoryHandle
  struct MemoryHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::MemoryHandle, "System.Buffers", "MemoryHandle");
// Type namespace: System.Buffers
namespace System::Buffers {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Buffers.MemoryHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct MemoryHandle/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Void* _pointer
    // Size: 0x8
    // Offset: 0x0
    void* pointer;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // private System.Runtime.InteropServices.GCHandle _handle
    // Size: 0x8
    // Offset: 0x8
    ::System::Runtime::InteropServices::GCHandle handle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x8);
    // private System.Buffers.IPinnable _pinnable
    // Size: 0x8
    // Offset: 0x10
    ::System::Buffers::IPinnable* pinnable;
    // Field size check
    static_assert(sizeof(::System::Buffers::IPinnable*) == 0x8);
    public:
    // Creating value type constructor for type: MemoryHandle
    constexpr MemoryHandle(void* pointer_ = {}, ::System::Runtime::InteropServices::GCHandle handle_ = {}, ::System::Buffers::IPinnable* pinnable_ = {}) noexcept : pointer{pointer_}, handle{handle_}, pinnable{pinnable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Void* _pointer
    [[deprecated("Use field access instead!")]] void*& dyn__pointer();
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle _handle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn__handle();
    // Get instance field reference: private System.Buffers.IPinnable _pinnable
    [[deprecated("Use field access instead!")]] ::System::Buffers::IPinnable*& dyn__pinnable();
    // public System.Void .ctor(System.Void* pointer, System.Runtime.InteropServices.GCHandle handle, System.Buffers.IPinnable pinnable)
    // Offset: 0x462D310
    // ABORTED: conflicts with another method.  MemoryHandle(void* pointer, ::System::Runtime::InteropServices::GCHandle handle, ::System::Buffers::IPinnable* pinnable);
    // public System.Void* get_Pointer()
    // Offset: 0x462D320
    void* get_Pointer();
    // public System.Void Dispose()
    // Offset: 0x462D328
    void Dispose();
  }; // System.Buffers.MemoryHandle
  #pragma pack(pop)
  static check_size<sizeof(MemoryHandle), 16 + sizeof(::System::Buffers::IPinnable*)> __System_Buffers_MemoryHandleSizeCheck;
  static_assert(sizeof(MemoryHandle) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Buffers::MemoryHandle::MemoryHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Buffers::MemoryHandle::get_Pointer
// Il2CppName: get_Pointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (System::Buffers::MemoryHandle::*)()>(&System::Buffers::MemoryHandle::get_Pointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::MemoryHandle), "get_Pointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Buffers::MemoryHandle::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Buffers::MemoryHandle::*)()>(&System::Buffers::MemoryHandle::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Buffers::MemoryHandle), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
