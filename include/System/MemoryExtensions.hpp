// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.Range
#include "System/Range.hpp"
// Including type: System.Memory`1
#include "System/Memory_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: StringComparison
  struct StringComparison;
  // Skipping declaration: ReadOnlyMemory`1 because it is already included!
  // Skipping declaration: IEquatable`1 because it is already included!
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: MemoryExtensions
  class MemoryExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::MemoryExtensions);
DEFINE_IL2CPP_ARG_TYPE(::System::MemoryExtensions*, "System", "MemoryExtensions");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.MemoryExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class MemoryExtensions : public ::Il2CppObject {
    public:
    // static System.Boolean EqualsOrdinal(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x465D164
    static bool EqualsOrdinal(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value);
    // static System.Boolean EqualsOrdinalIgnoreCase(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x465D200
    static bool EqualsOrdinalIgnoreCase(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value);
    // static System.Boolean Contains(System.ReadOnlySpan`1<System.Char> source, System.Char value)
    // Offset: 0x465D2AC
    static bool Contains(::System::ReadOnlySpan_1<::Il2CppChar> source, ::Il2CppChar value);
    // static public System.Int32 IndexOf(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.StringComparison comparisonType)
    // Offset: 0x465D340
    static int IndexOf(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::StringComparison comparisonType);
    // static public System.Int32 ToUpperInvariant(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination)
    // Offset: 0x465D544
    static int ToUpperInvariant(::System::ReadOnlySpan_1<::Il2CppChar> source, ::System::Span_1<::Il2CppChar> destination);
    // static public System.Boolean EndsWith(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.StringComparison comparisonType)
    // Offset: 0x465D69C
    static bool EndsWith(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::StringComparison comparisonType);
    // static public System.Boolean StartsWith(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.StringComparison comparisonType)
    // Offset: 0x465D910
    static bool StartsWith(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::StringComparison comparisonType);
    // static public System.Span`1<T> AsSpan(T[] array, System.Int32 start)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<T> AsSpan(::ArrayW<T> array, int start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsSpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(start)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, start);
    }
    // static public System.Span`1<T> AsSpan(T[] array, System.Range range)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<T> AsSpan(::ArrayW<T> array, ::System::Range range) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsSpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(range)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, range);
    }
    // static public System.ReadOnlySpan`1<System.Char> AsSpan(System.String text)
    // Offset: 0x465DB84
    static ::System::ReadOnlySpan_1<::Il2CppChar> AsSpan(::StringW text);
    // static public System.ReadOnlySpan`1<System.Char> AsSpan(System.String text, System.Int32 start)
    // Offset: 0x465DBDC
    static ::System::ReadOnlySpan_1<::Il2CppChar> AsSpan(::StringW text, int start);
    // static public System.ReadOnlySpan`1<System.Char> AsSpan(System.String text, System.Int32 start, System.Int32 length)
    // Offset: 0x465DC68
    static ::System::ReadOnlySpan_1<::Il2CppChar> AsSpan(::StringW text, int start, int length);
    // static public System.ReadOnlyMemory`1<System.Char> AsMemory(System.String text, System.Int32 start, System.Int32 length)
    // Offset: 0x465DD08
    static ::System::ReadOnlyMemory_1<::Il2CppChar> AsMemory(::StringW text, int start, int length);
    // static public System.ReadOnlySpan`1<System.Char> Trim(System.ReadOnlySpan`1<System.Char> span)
    // Offset: 0x465426C
    static ::System::ReadOnlySpan_1<::Il2CppChar> Trim(::System::ReadOnlySpan_1<::Il2CppChar> span);
    // static public System.ReadOnlySpan`1<System.Char> TrimStart(System.ReadOnlySpan`1<System.Char> span)
    // Offset: 0x465DDB0
    static ::System::ReadOnlySpan_1<::Il2CppChar> TrimStart(::System::ReadOnlySpan_1<::Il2CppChar> span);
    // static public System.ReadOnlySpan`1<System.Char> TrimEnd(System.ReadOnlySpan`1<System.Char> span)
    // Offset: 0x465DEA4
    static ::System::ReadOnlySpan_1<::Il2CppChar> TrimEnd(::System::ReadOnlySpan_1<::Il2CppChar> span);
    // static public System.Int32 IndexOf(System.Span`1<T> span, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(::System::Span_1<T> span, T value) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, value);
    }
    // static public System.Boolean SequenceEqual(System.Span`1<T> span, System.ReadOnlySpan`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool SequenceEqual(::System::Span_1<T> span, ::System::ReadOnlySpan_1<T> other) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::SequenceEqual");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "SequenceEqual", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, other);
    }
    // static public System.Int32 IndexOf(System.ReadOnlySpan`1<T> span, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(::System::ReadOnlySpan_1<T> span, T value) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, value);
    }
    // static public System.Int32 IndexOfAny(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOfAny(::System::ReadOnlySpan_1<T> span, ::System::ReadOnlySpan_1<T> values) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::IndexOfAny");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "IndexOfAny", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, values);
    }
    // static public System.Boolean SequenceEqual(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool SequenceEqual(::System::ReadOnlySpan_1<T> span, ::System::ReadOnlySpan_1<T> other) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::SequenceEqual");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "SequenceEqual", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, other);
    }
    // static public System.Boolean StartsWith(System.Span`1<T> span, System.ReadOnlySpan`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool StartsWith(::System::Span_1<T> span, ::System::ReadOnlySpan_1<T> value) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::StartsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "StartsWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, value);
    }
    // static public System.Boolean StartsWith(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool StartsWith(::System::ReadOnlySpan_1<T> span, ::System::ReadOnlySpan_1<T> value) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::StartsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "StartsWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, value);
    }
    // static public System.Boolean EndsWith(System.ReadOnlySpan`1<T> span, System.ReadOnlySpan`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool EndsWith(::System::ReadOnlySpan_1<T> span, ::System::ReadOnlySpan_1<T> value) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::EndsWith");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "EndsWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span, value);
    }
    // static public System.Span`1<T> AsSpan(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<T> AsSpan(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsSpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Span`1<T> AsSpan(T[] array, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<T> AsSpan(::ArrayW<T> array, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsSpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, start, length);
    }
    // static public System.Memory`1<T> AsMemory(T[] array, System.Int32 start)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Memory_1<T> AsMemory(::ArrayW<T> array, int start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsMemory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsMemory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(start)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Memory_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, start);
    }
    // static public System.Memory`1<T> AsMemory(T[] array, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Memory_1<T> AsMemory(::ArrayW<T> array, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsMemory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsMemory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Memory_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, start, length);
    }
    // static public System.Memory`1<T> AsMemory(System.ArraySegment`1<T> segment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Memory_1<T> AsMemory(::System::ArraySegment_1<T> segment) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::AsMemory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "AsMemory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segment)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Memory_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, segment);
    }
    // static public System.Void CopyTo(T[] source, System.Span`1<T> destination)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void CopyTo(::ArrayW<T> source, ::System::Span_1<T> destination) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "CopyTo", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(destination)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, destination);
    }
    // static private System.Boolean IsTypeComparableAsBytes(out System.UInt64 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsTypeComparableAsBytes(ByRef<uint64_t> size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::MemoryExtensions::IsTypeComparableAsBytes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "MemoryExtensions", "IsTypeComparableAsBytes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(size));
    }
  }; // System.MemoryExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::MemoryExtensions::EqualsOrdinal
// Il2CppName: EqualsOrdinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::MemoryExtensions::EqualsOrdinal)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "EqualsOrdinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::EqualsOrdinalIgnoreCase
// Il2CppName: EqualsOrdinalIgnoreCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::MemoryExtensions::EqualsOrdinalIgnoreCase)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "EqualsOrdinalIgnoreCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::Il2CppChar)>(&System::MemoryExtensions::Contains)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::StringComparison)>(&System::MemoryExtensions::IndexOf)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::ToUpperInvariant
// Il2CppName: ToUpperInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Span_1<::Il2CppChar>)>(&System::MemoryExtensions::ToUpperInvariant)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "ToUpperInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::EndsWith
// Il2CppName: EndsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::StringComparison)>(&System::MemoryExtensions::EndsWith)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::StringComparison)>(&System::MemoryExtensions::StartsWith)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::StringW)>(&System::MemoryExtensions::AsSpan)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::StringW, int)>(&System::MemoryExtensions::AsSpan)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, start});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::StringW, int, int)>(&System::MemoryExtensions::AsSpan)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "AsSpan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, start, length});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::AsMemory
// Il2CppName: AsMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlyMemory_1<::Il2CppChar> (*)(::StringW, int, int)>(&System::MemoryExtensions::AsMemory)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "AsMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, start, length});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::Trim
// Il2CppName: Trim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::MemoryExtensions::Trim)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::TrimStart
// Il2CppName: TrimStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::MemoryExtensions::TrimStart)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "TrimStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::TrimEnd
// Il2CppName: TrimEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::MemoryExtensions::TrimEnd)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MemoryExtensions*), "TrimEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span});
  }
};
// Writing MetadataGetter for method: System::MemoryExtensions::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::SequenceEqual
// Il2CppName: SequenceEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::IndexOfAny
// Il2CppName: IndexOfAny
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::SequenceEqual
// Il2CppName: SequenceEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::StartsWith
// Il2CppName: StartsWith
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::StartsWith
// Il2CppName: StartsWith
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::EndsWith
// Il2CppName: EndsWith
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsSpan
// Il2CppName: AsSpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsMemory
// Il2CppName: AsMemory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsMemory
// Il2CppName: AsMemory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::AsMemory
// Il2CppName: AsMemory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::CopyTo
// Il2CppName: CopyTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::MemoryExtensions::IsTypeComparableAsBytes
// Il2CppName: IsTypeComparableAsBytes
// Cannot write MetadataGetter for generic methods!
