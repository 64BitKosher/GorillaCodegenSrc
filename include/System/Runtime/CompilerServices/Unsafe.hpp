// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: Unsafe
  class Unsafe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::CompilerServices::Unsafe);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::CompilerServices::Unsafe*, "System.Runtime.CompilerServices", "Unsafe");
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.CompilerServices.Unsafe
  // [TokenAttribute] Offset: FFFFFFFF
  class Unsafe : public ::Il2CppObject {
    public:
    // static public T Add(ref T source, System.Int32 elementOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Add(ByRef<T> source, int elementOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(elementOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), elementOffset);
    }
    // static public T Add(ref T source, System.IntPtr elementOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Add(ByRef<T> source, ::System::IntPtr elementOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(elementOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), elementOffset);
    }
    // static public System.Void* Add(System.Void* source, System.Int32 elementOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void* Add(void* source, int elementOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(elementOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, elementOffset);
    }
    // static public T AddByteOffset(ref T source, System.IntPtr byteOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AddByteOffset(ByRef<T> source, ::System::IntPtr byteOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AddByteOffset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AddByteOffset", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(byteOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), byteOffset);
    }
    // static public System.Boolean AreSame(ref T left, ref T right)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AreSame(ByRef<T> left, ByRef<T> right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AreSame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AreSame", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(left), byref(right));
    }
    // static public T As(System.Object o)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T As(::Il2CppObject* o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::As");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "As", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, o);
    }
    // static public TTo As(ref TFrom source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TFrom, class TTo>
    static TTo As(ByRef<TFrom> source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::As");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "As", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFrom>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTo>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFrom>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTo>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TTo, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source));
    }
    // static public System.Void* AsPointer(ref T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void* AsPointer(ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AsPointer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AsPointer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(value));
    }
    // static public T AsRef(System.Void* source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AsRef(void* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AsRef");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AsRef", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public T AsRef(in T source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AsRef(ByRef<T> source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AsRef");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AsRef", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source));
    }
    // static public System.Void InitBlockUnaligned(ref System.Byte startAddress, System.Byte value, System.UInt32 byteCount)
    // Offset: 0x457A410
    static void InitBlockUnaligned(ByRef<uint8_t> startAddress, uint8_t value, uint byteCount);
    // static public T Read(System.Void* source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Read(void* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::Read");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "Read", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public T ReadUnaligned(ref System.Byte source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T ReadUnaligned(ByRef<uint8_t> source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::ReadUnaligned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "ReadUnaligned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source));
    }
    // static public System.Int32 SizeOf()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int SizeOf() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::SizeOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "SizeOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Void WriteUnaligned(ref System.Byte destination, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void WriteUnaligned(ByRef<uint8_t> destination, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::WriteUnaligned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "WriteUnaligned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(destination), value);
    }
    // static public System.Boolean IsAddressLessThan(ref T left, ref T right)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsAddressLessThan(ByRef<T> left, ByRef<T> right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::IsAddressLessThan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "IsAddressLessThan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(left), byref(right));
    }
    // static T AddByteOffset(ref T source, System.UInt64 byteOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AddByteOffset(ByRef<T> source, uint64_t byteOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AddByteOffset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AddByteOffset", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(byteOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), byteOffset);
    }
  }; // System.Runtime.CompilerServices.Unsafe
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AddByteOffset
// Il2CppName: AddByteOffset
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AreSame
// Il2CppName: AreSame
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::As
// Il2CppName: As
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::As
// Il2CppName: As
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AsPointer
// Il2CppName: AsPointer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AsRef
// Il2CppName: AsRef
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AsRef
// Il2CppName: AsRef
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::InitBlockUnaligned
// Il2CppName: InitBlockUnaligned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint8_t>, uint8_t, uint)>(&System::Runtime::CompilerServices::Unsafe::InitBlockUnaligned)> {
  static const MethodInfo* get() {
    static auto* startAddress = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* byteCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::CompilerServices::Unsafe*), "InitBlockUnaligned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startAddress, value, byteCount});
  }
};
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::Read
// Il2CppName: Read
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::ReadUnaligned
// Il2CppName: ReadUnaligned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::SizeOf
// Il2CppName: SizeOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::WriteUnaligned
// Il2CppName: WriteUnaligned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::IsAddressLessThan
// Il2CppName: IsAddressLessThan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AddByteOffset
// Il2CppName: AddByteOffset
// Cannot write MetadataGetter for generic methods!
