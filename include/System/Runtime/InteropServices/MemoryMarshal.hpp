// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.Memory`1
#include "System/Memory_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Buffers
namespace System::Buffers {
  // Forward declaring type: MemoryManager`1<T>
  template<typename T>
  class MemoryManager_1;
}
// Completed forward declares
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: MemoryMarshal
  class MemoryMarshal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::MemoryMarshal);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::MemoryMarshal*, "System.Runtime.InteropServices", "MemoryMarshal");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.MemoryMarshal
  // [TokenAttribute] Offset: FFFFFFFF
  class MemoryMarshal : public ::Il2CppObject {
    public:
    // static public System.Span`1<System.Byte> AsBytes(System.Span`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<uint8_t> AsBytes(::System::Span_1<T> span) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::AsBytes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "AsBytes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static public System.ReadOnlySpan`1<System.Byte> AsBytes(System.ReadOnlySpan`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::ReadOnlySpan_1<uint8_t> AsBytes(::System::ReadOnlySpan_1<T> span) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::AsBytes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "AsBytes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static public System.Memory`1<T> AsMemory(System.ReadOnlyMemory`1<T> memory)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Memory_1<T> AsMemory(::System::ReadOnlyMemory_1<T> memory) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::AsMemory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "AsMemory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Memory_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, memory);
    }
    // static public T GetReference(System.Span`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetReference(::System::Span_1<T> span) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::GetReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "GetReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static public T GetReference(System.ReadOnlySpan`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetReference(::System::ReadOnlySpan_1<T> span) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::GetReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "GetReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static T GetNonNullPinnableReference(System.Span`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetNonNullPinnableReference(::System::Span_1<T> span) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::GetNonNullPinnableReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "GetNonNullPinnableReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static T GetNonNullPinnableReference(System.ReadOnlySpan`1<T> span)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetNonNullPinnableReference(::System::ReadOnlySpan_1<T> span) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::GetNonNullPinnableReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "GetNonNullPinnableReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(span)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, span);
    }
    // static public System.Span`1<T> CreateSpan(ref T reference, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Span_1<T> CreateSpan(ByRef<T> reference, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::CreateSpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "CreateSpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(reference), length);
    }
    // static public System.ReadOnlySpan`1<T> CreateReadOnlySpan(ref T reference, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::ReadOnlySpan_1<T> CreateReadOnlySpan(ByRef<T> reference, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::CreateReadOnlySpan");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "CreateReadOnlySpan", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(reference), length);
    }
    // static public System.Boolean TryGetArray(System.ReadOnlyMemory`1<T> memory, out System.ArraySegment`1<T> segment)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryGetArray(::System::ReadOnlyMemory_1<T> memory, ByRef<::System::ArraySegment_1<T>> segment) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::TryGetArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "TryGetArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory), ::il2cpp_utils::ExtractIndependentType<::System::ArraySegment_1<T>&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, memory, byref(segment));
    }
    // static public System.Boolean TryGetMemoryManager(System.ReadOnlyMemory`1<T> memory, out TManager manager, out System.Int32 start, out System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class TManager>
    static bool TryGetMemoryManager(::System::ReadOnlyMemory_1<T> memory, ByRef<TManager> manager, ByRef<int> start, ByRef<int> length) {
      static_assert(std::is_convertible_v<TManager, ::System::Buffers::MemoryManager_1<T>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::TryGetMemoryManager");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "TryGetMemoryManager", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TManager>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memory), ::il2cpp_utils::ExtractIndependentType<TManager&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TManager>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, memory, byref(manager), byref(start), byref(length));
    }
    // static public System.Boolean TryGetString(System.ReadOnlyMemory`1<System.Char> memory, out System.String text, out System.Int32 start, out System.Int32 length)
    // Offset: 0x4572AE8
    static bool TryGetString(::System::ReadOnlyMemory_1<::Il2CppChar> memory, ByRef<::StringW> text, ByRef<int> start, ByRef<int> length);
    // static public System.Void Write(System.Span`1<System.Byte> destination, ref T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Write(::System::Span_1<uint8_t> destination, ByRef<T> value) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::Write");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "Write", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, destination, byref(value));
    }
    // static public System.Boolean TryWrite(System.Span`1<System.Byte> destination, ref T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TryWrite(::System::Span_1<uint8_t> destination, ByRef<T> value) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::MemoryMarshal::TryWrite");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.InteropServices", "MemoryMarshal", "TryWrite", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, destination, byref(value));
    }
  }; // System.Runtime.InteropServices.MemoryMarshal
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::AsBytes
// Il2CppName: AsBytes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::AsBytes
// Il2CppName: AsBytes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::AsMemory
// Il2CppName: AsMemory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::GetReference
// Il2CppName: GetReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::GetReference
// Il2CppName: GetReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::GetNonNullPinnableReference
// Il2CppName: GetNonNullPinnableReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::GetNonNullPinnableReference
// Il2CppName: GetNonNullPinnableReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::CreateSpan
// Il2CppName: CreateSpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::CreateReadOnlySpan
// Il2CppName: CreateReadOnlySpan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::TryGetArray
// Il2CppName: TryGetArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::TryGetMemoryManager
// Il2CppName: TryGetMemoryManager
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::TryGetString
// Il2CppName: TryGetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlyMemory_1<::Il2CppChar>, ByRef<::StringW>, ByRef<int>, ByRef<int>)>(&System::Runtime::InteropServices::MemoryMarshal::TryGetString)> {
  static const MethodInfo* get() {
    static auto* memory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::MemoryMarshal*), "TryGetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memory, text, start, length});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::Write
// Il2CppName: Write
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::InteropServices::MemoryMarshal::TryWrite
// Il2CppName: TryWrite
// Cannot write MetadataGetter for generic methods!
