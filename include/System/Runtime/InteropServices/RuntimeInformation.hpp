// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.InteropServices.Architecture
#include "System/Runtime/InteropServices/Architecture.hpp"
// Including type: System.Runtime.InteropServices.OSPlatform
#include "System/Runtime/InteropServices/OSPlatform.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: RuntimeInformation
  class RuntimeInformation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::RuntimeInformation);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::RuntimeInformation*, "System.Runtime.InteropServices", "RuntimeInformation");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.RuntimeInformation
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeInformation : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Runtime.InteropServices.Architecture _osArchitecture
    static ::System::Runtime::InteropServices::Architecture _get__osArchitecture();
    // Set static field: static private readonly System.Runtime.InteropServices.Architecture _osArchitecture
    static void _set__osArchitecture(::System::Runtime::InteropServices::Architecture value);
    // Get static field: static private readonly System.Runtime.InteropServices.Architecture _processArchitecture
    static ::System::Runtime::InteropServices::Architecture _get__processArchitecture();
    // Set static field: static private readonly System.Runtime.InteropServices.Architecture _processArchitecture
    static void _set__processArchitecture(::System::Runtime::InteropServices::Architecture value);
    // Get static field: static private readonly System.Runtime.InteropServices.OSPlatform _osPlatform
    static ::System::Runtime::InteropServices::OSPlatform _get__osPlatform();
    // Set static field: static private readonly System.Runtime.InteropServices.OSPlatform _osPlatform
    static void _set__osPlatform(::System::Runtime::InteropServices::OSPlatform value);
    // static private System.Void .cctor()
    // Offset: 0x4573FA0
    static void _cctor();
    // static private System.String GetRuntimeArchitecture()
    // Offset: 0x45746CC
    static ::StringW GetRuntimeArchitecture();
    // static private System.String GetOSName()
    // Offset: 0x45746D0
    static ::StringW GetOSName();
    // static public System.Boolean IsOSPlatform(System.Runtime.InteropServices.OSPlatform osPlatform)
    // Offset: 0x45746D4
    static bool IsOSPlatform(::System::Runtime::InteropServices::OSPlatform osPlatform);
  }; // System.Runtime.InteropServices.RuntimeInformation
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::RuntimeInformation::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Runtime::InteropServices::RuntimeInformation::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::RuntimeInformation*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::RuntimeInformation::GetRuntimeArchitecture
// Il2CppName: GetRuntimeArchitecture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::Runtime::InteropServices::RuntimeInformation::GetRuntimeArchitecture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::RuntimeInformation*), "GetRuntimeArchitecture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::RuntimeInformation::GetOSName
// Il2CppName: GetOSName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::Runtime::InteropServices::RuntimeInformation::GetOSName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::RuntimeInformation*), "GetOSName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::RuntimeInformation::IsOSPlatform
// Il2CppName: IsOSPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Runtime::InteropServices::OSPlatform)>(&System::Runtime::InteropServices::RuntimeInformation::IsOSPlatform)> {
  static const MethodInfo* get() {
    static auto* osPlatform = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "OSPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::RuntimeInformation*), "IsOSPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{osPlatform});
  }
};
