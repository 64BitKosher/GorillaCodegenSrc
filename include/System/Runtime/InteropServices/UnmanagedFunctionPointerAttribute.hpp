// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Runtime.InteropServices.CallingConvention
#include "System/Runtime/InteropServices/CallingConvention.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: UnmanagedFunctionPointerAttribute
  class UnmanagedFunctionPointerAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::UnmanagedFunctionPointerAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::UnmanagedFunctionPointerAttribute*, "System.Runtime.InteropServices", "UnmanagedFunctionPointerAttribute");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  class UnmanagedFunctionPointerAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Runtime.InteropServices.CallingConvention m_callingConvention
    // Size: 0x4
    // Offset: 0x10
    ::System::Runtime::InteropServices::CallingConvention m_callingConvention;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::CallingConvention) == 0x4);
    public:
    // Creating conversion operator: operator ::System::Runtime::InteropServices::CallingConvention
    constexpr operator ::System::Runtime::InteropServices::CallingConvention() const noexcept {
      return m_callingConvention;
    }
    // Get instance field reference: private System.Runtime.InteropServices.CallingConvention m_callingConvention
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::CallingConvention& dyn_m_callingConvention();
    // public System.Void .ctor(System.Runtime.InteropServices.CallingConvention callingConvention)
    // Offset: 0x457352C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnmanagedFunctionPointerAttribute* New_ctor(::System::Runtime::InteropServices::CallingConvention callingConvention) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::UnmanagedFunctionPointerAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnmanagedFunctionPointerAttribute*, creationType>(callingConvention)));
    }
  }; // System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute
  #pragma pack(pop)
  static check_size<sizeof(UnmanagedFunctionPointerAttribute), 16 + sizeof(::System::Runtime::InteropServices::CallingConvention)> __System_Runtime_InteropServices_UnmanagedFunctionPointerAttributeSizeCheck;
  static_assert(sizeof(UnmanagedFunctionPointerAttribute) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::UnmanagedFunctionPointerAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
