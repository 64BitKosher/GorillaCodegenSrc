// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
#include "Microsoft/Win32/SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.hpp"
// Including type: System.UIntPtr
#include "System/UIntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: InvalidOperationException
  class InvalidOperationException;
}
// Completed forward declares
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeBuffer
  class SafeBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::SafeBuffer);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::SafeBuffer*, "System.Runtime.InteropServices", "SafeBuffer");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.SafeBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class SafeBuffer : public ::Microsoft::Win32::SafeHandles::SafeHandleZeroOrMinusOneIsInvalid {
    public:
    // Writing base type padding for base size: 0x1E to desired offset: 0x20
    char ___base_padding[0x2] = {};
    public:
    // private System.UIntPtr _numBytes
    // Size: 0x8
    // Offset: 0x20
    ::System::UIntPtr numBytes;
    // Field size check
    static_assert(sizeof(::System::UIntPtr) == 0x8);
    public:
    // Creating conversion operator: operator ::System::UIntPtr
    constexpr operator ::System::UIntPtr() const noexcept {
      return numBytes;
    }
    // Get static field: static private readonly System.UIntPtr Uninitialized
    static ::System::UIntPtr _get_Uninitialized();
    // Set static field: static private readonly System.UIntPtr Uninitialized
    static void _set_Uninitialized(::System::UIntPtr value);
    // Get instance field reference: private System.UIntPtr _numBytes
    [[deprecated("Use field access instead!")]] ::System::UIntPtr& dyn__numBytes();
    // public System.Void AcquirePointer(ref System.Byte* pointer)
    // Offset: 0x4573024
    void AcquirePointer(ByRef<uint8_t*> pointer);
    // public System.Void ReleasePointer()
    // Offset: 0x4573224
    void ReleasePointer();
    // static private System.InvalidOperationException NotInitialized()
    // Offset: 0x45730F4
    static ::System::InvalidOperationException* NotInitialized();
    // static private System.Void .cctor()
    // Offset: 0x45732D4
    static void _cctor();
  }; // System.Runtime.InteropServices.SafeBuffer
  #pragma pack(pop)
  static check_size<sizeof(SafeBuffer), 32 + sizeof(::System::UIntPtr)> __System_Runtime_InteropServices_SafeBufferSizeCheck;
  static_assert(sizeof(SafeBuffer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::AcquirePointer
// Il2CppName: AcquirePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::SafeBuffer::*)(ByRef<uint8_t*>)>(&System::Runtime::InteropServices::SafeBuffer::AcquirePointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), "AcquirePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::ReleasePointer
// Il2CppName: ReleasePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::SafeBuffer::*)()>(&System::Runtime::InteropServices::SafeBuffer::ReleasePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), "ReleasePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::NotInitialized
// Il2CppName: NotInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::InvalidOperationException* (*)()>(&System::Runtime::InteropServices::SafeBuffer::NotInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), "NotInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Runtime::InteropServices::SafeBuffer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
