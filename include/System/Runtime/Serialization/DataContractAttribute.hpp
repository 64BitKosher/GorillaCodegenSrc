// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Runtime.Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: DataContractAttribute
  class DataContractAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::Serialization::DataContractAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::Serialization::DataContractAttribute*, "System.Runtime.Serialization", "DataContractAttribute");
// Type namespace: System.Runtime.Serialization
namespace System::Runtime::Serialization {
  // Size: 0x1A
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.DataContractAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class DataContractAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean isNameSetExplicitly
    // Size: 0x1
    // Offset: 0x18
    bool isNameSetExplicitly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isReference
    // Size: 0x1
    // Offset: 0x19
    bool isReference;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.Boolean isNameSetExplicitly
    [[deprecated("Use field access instead!")]] bool& dyn_isNameSetExplicitly();
    // Get instance field reference: private System.Boolean isReference
    [[deprecated("Use field access instead!")]] bool& dyn_isReference();
    // public System.Void .ctor()
    // Offset: 0x4D06860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataContractAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Serialization::DataContractAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataContractAttribute*, creationType>()));
    }
    // public System.Boolean get_IsReference()
    // Offset: 0x4D06868
    bool get_IsReference();
    // public System.Void set_Name(System.String value)
    // Offset: 0x4D06870
    void set_Name(::StringW value);
  }; // System.Runtime.Serialization.DataContractAttribute
  #pragma pack(pop)
  static check_size<sizeof(DataContractAttribute), 25 + sizeof(bool)> __System_Runtime_Serialization_DataContractAttributeSizeCheck;
  static_assert(sizeof(DataContractAttribute) == 0x1A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::Serialization::DataContractAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Serialization::DataContractAttribute::get_IsReference
// Il2CppName: get_IsReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Runtime::Serialization::DataContractAttribute::*)()>(&System::Runtime::Serialization::DataContractAttribute::get_IsReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::DataContractAttribute*), "get_IsReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::DataContractAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::DataContractAttribute::*)(::StringW)>(&System::Runtime::Serialization::DataContractAttribute::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::DataContractAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
