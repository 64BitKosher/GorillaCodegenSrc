// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: DecimalEx
  class DecimalEx;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::DecimalEx);
DEFINE_IL2CPP_ARG_TYPE(::System::DecimalEx*, "System", "DecimalEx");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.DecimalEx
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class DecimalEx : public ::Il2CppObject {
    public:
    // Nested type: ::System::DecimalEx::DecimalBits
    struct DecimalBits;
    // Nested type: ::System::DecimalEx::DecCalc
    struct DecCalc;
    // static field const value: static private System.Int32 ScaleShift
    static constexpr const int ScaleShift = 16;
    // Get static field: static private System.Int32 ScaleShift
    static int _get_ScaleShift();
    // Set static field: static private System.Int32 ScaleShift
    static void _set_ScaleShift(int value);
    // static private System.DecimalEx/DecCalc AsMutable(ref System.Decimal d)
    // Offset: 0x574ADFC
    static ::System::DecimalEx::DecCalc AsMutable(ByRef<::System::Decimal> d);
    // static System.UInt32 High(System.Decimal value)
    // Offset: 0x574AE00
    static uint High(::System::Decimal value);
    // static System.UInt32 Low(System.Decimal value)
    // Offset: 0x574AE08
    static uint Low(::System::Decimal value);
    // static System.UInt32 Mid(System.Decimal value)
    // Offset: 0x574AE10
    static uint Mid(::System::Decimal value);
    // static System.Boolean IsNegative(System.Decimal value)
    // Offset: 0x574AE18
    static bool IsNegative(::System::Decimal value);
    // static System.Int32 Scale(System.Decimal value)
    // Offset: 0x574AE20
    static int Scale(::System::Decimal value);
    // static System.UInt32 DecDivMod1E9(ref System.Decimal value)
    // Offset: 0x574AE28
    static uint DecDivMod1E9(ByRef<::System::Decimal> value);
  }; // System.DecimalEx
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::DecimalEx::AsMutable
// Il2CppName: AsMutable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DecimalEx::DecCalc (*)(ByRef<::System::Decimal>)>(&System::DecimalEx::AsMutable)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "AsMutable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::High
// Il2CppName: High
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::Decimal)>(&System::DecimalEx::High)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "High", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::Low
// Il2CppName: Low
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::Decimal)>(&System::DecimalEx::Low)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "Low", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::Mid
// Il2CppName: Mid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::Decimal)>(&System::DecimalEx::Mid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "Mid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Decimal)>(&System::DecimalEx::IsNegative)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Decimal)>(&System::DecimalEx::Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::DecimalEx::DecDivMod1E9
// Il2CppName: DecDivMod1E9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal>)>(&System::DecimalEx::DecDivMod1E9)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DecimalEx*), "DecDivMod1E9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
