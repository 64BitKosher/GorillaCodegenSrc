// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: NumberStyles
  struct NumberStyles;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: ValueStringBuilder
  struct ValueStringBuilder__;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Number
  class Number_;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Number_);
DEFINE_IL2CPP_ARG_TYPE(::System::Number_*, "System", "Number");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Number
  // [TokenAttribute] Offset: FFFFFFFF
  class Number_ : public ::Il2CppObject {
    public:
    // Nested type: ::System::Number_::BigInteger
    struct BigInteger;
    // Nested type: ::System::Number_::DiyFp
    struct DiyFp;
    // Nested type: ::System::Number_::Grisu3
    class Grisu3;
    // Nested type: ::System::Number_::NumberBuffer
    struct NumberBuffer;
    // Nested type: ::System::Number_::NumberBufferKind
    struct NumberBufferKind;
    // Nested type: ::System::Number_::FloatingPointInfo
    struct FloatingPointInfo;
    // Nested type: ::System::Number_::ParsingStatus
    struct ParsingStatus;
    // static field const value: static System.Int32 DecimalPrecision
    static constexpr const int DecimalPrecision = 29;
    // Get static field: static System.Int32 DecimalPrecision
    static int _get_DecimalPrecision();
    // Set static field: static System.Int32 DecimalPrecision
    static void _set_DecimalPrecision(int value);
    // static field const value: static private System.Int32 SinglePrecision
    static constexpr const int SinglePrecision = 9;
    // Get static field: static private System.Int32 SinglePrecision
    static int _get_SinglePrecision();
    // Set static field: static private System.Int32 SinglePrecision
    static void _set_SinglePrecision(int value);
    // static field const value: static private System.Int32 DoublePrecision
    static constexpr const int DoublePrecision = 17;
    // Get static field: static private System.Int32 DoublePrecision
    static int _get_DoublePrecision();
    // Set static field: static private System.Int32 DoublePrecision
    static void _set_DoublePrecision(int value);
    // static field const value: static private System.Int32 SinglePrecisionCustomFormat
    static constexpr const int SinglePrecisionCustomFormat = 7;
    // Get static field: static private System.Int32 SinglePrecisionCustomFormat
    static int _get_SinglePrecisionCustomFormat();
    // Set static field: static private System.Int32 SinglePrecisionCustomFormat
    static void _set_SinglePrecisionCustomFormat(int value);
    // static field const value: static private System.Int32 DoublePrecisionCustomFormat
    static constexpr const int DoublePrecisionCustomFormat = 15;
    // Get static field: static private System.Int32 DoublePrecisionCustomFormat
    static int _get_DoublePrecisionCustomFormat();
    // Set static field: static private System.Int32 DoublePrecisionCustomFormat
    static void _set_DoublePrecisionCustomFormat(int value);
    // static field const value: static private System.Int32 DefaultPrecisionExponentialFormat
    static constexpr const int DefaultPrecisionExponentialFormat = 6;
    // Get static field: static private System.Int32 DefaultPrecisionExponentialFormat
    static int _get_DefaultPrecisionExponentialFormat();
    // Set static field: static private System.Int32 DefaultPrecisionExponentialFormat
    static void _set_DefaultPrecisionExponentialFormat(int value);
    // static field const value: static private System.Int32 MaxUInt32DecDigits
    static constexpr const int MaxUInt32DecDigits = 10;
    // Get static field: static private System.Int32 MaxUInt32DecDigits
    static int _get_MaxUInt32DecDigits();
    // Set static field: static private System.Int32 MaxUInt32DecDigits
    static void _set_MaxUInt32DecDigits(int value);
    // static field const value: static private System.Int32 CharStackBufferSize
    static constexpr const int CharStackBufferSize = 32;
    // Get static field: static private System.Int32 CharStackBufferSize
    static int _get_CharStackBufferSize();
    // Set static field: static private System.Int32 CharStackBufferSize
    static void _set_CharStackBufferSize(int value);
    // static field const value: static private System.String PosNumberFormat
    static constexpr const char* PosNumberFormat = "#";
    // Get static field: static private System.String PosNumberFormat
    static ::StringW _get_PosNumberFormat();
    // Set static field: static private System.String PosNumberFormat
    static void _set_PosNumberFormat(::StringW value);
    // Get static field: static private readonly System.String[] s_singleDigitStringCache
    static ::ArrayW<::StringW> _get_s_singleDigitStringCache();
    // Set static field: static private readonly System.String[] s_singleDigitStringCache
    static void _set_s_singleDigitStringCache(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_posCurrencyFormats
    static ::ArrayW<::StringW> _get_s_posCurrencyFormats();
    // Set static field: static private readonly System.String[] s_posCurrencyFormats
    static void _set_s_posCurrencyFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negCurrencyFormats
    static ::ArrayW<::StringW> _get_s_negCurrencyFormats();
    // Set static field: static private readonly System.String[] s_negCurrencyFormats
    static void _set_s_negCurrencyFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_posPercentFormats
    static ::ArrayW<::StringW> _get_s_posPercentFormats();
    // Set static field: static private readonly System.String[] s_posPercentFormats
    static void _set_s_posPercentFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negPercentFormats
    static ::ArrayW<::StringW> _get_s_negPercentFormats();
    // Set static field: static private readonly System.String[] s_negPercentFormats
    static void _set_s_negPercentFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negNumberFormats
    static ::ArrayW<::StringW> _get_s_negNumberFormats();
    // Set static field: static private readonly System.String[] s_negNumberFormats
    static void _set_s_negNumberFormats(::ArrayW<::StringW> value);
    // static field const value: static System.Int32 DecimalNumberBufferLength
    static constexpr const int DecimalNumberBufferLength = 31;
    // Get static field: static System.Int32 DecimalNumberBufferLength
    static int _get_DecimalNumberBufferLength();
    // Set static field: static System.Int32 DecimalNumberBufferLength
    static void _set_DecimalNumberBufferLength(int value);
    // static field const value: static System.Int32 DoubleNumberBufferLength
    static constexpr const int DoubleNumberBufferLength = 769;
    // Get static field: static System.Int32 DoubleNumberBufferLength
    static int _get_DoubleNumberBufferLength();
    // Set static field: static System.Int32 DoubleNumberBufferLength
    static void _set_DoubleNumberBufferLength(int value);
    // static field const value: static System.Int32 Int32NumberBufferLength
    static constexpr const int Int32NumberBufferLength = 11;
    // Get static field: static System.Int32 Int32NumberBufferLength
    static int _get_Int32NumberBufferLength();
    // Set static field: static System.Int32 Int32NumberBufferLength
    static void _set_Int32NumberBufferLength(int value);
    // static field const value: static System.Int32 Int64NumberBufferLength
    static constexpr const int Int64NumberBufferLength = 20;
    // Get static field: static System.Int32 Int64NumberBufferLength
    static int _get_Int64NumberBufferLength();
    // Set static field: static System.Int32 Int64NumberBufferLength
    static void _set_Int64NumberBufferLength(int value);
    // static field const value: static System.Int32 SingleNumberBufferLength
    static constexpr const int SingleNumberBufferLength = 114;
    // Get static field: static System.Int32 SingleNumberBufferLength
    static int _get_SingleNumberBufferLength();
    // Set static field: static System.Int32 SingleNumberBufferLength
    static void _set_SingleNumberBufferLength(int value);
    // static field const value: static System.Int32 UInt32NumberBufferLength
    static constexpr const int UInt32NumberBufferLength = 11;
    // Get static field: static System.Int32 UInt32NumberBufferLength
    static int _get_UInt32NumberBufferLength();
    // Set static field: static System.Int32 UInt32NumberBufferLength
    static void _set_UInt32NumberBufferLength(int value);
    // static field const value: static System.Int32 UInt64NumberBufferLength
    static constexpr const int UInt64NumberBufferLength = 21;
    // Get static field: static System.Int32 UInt64NumberBufferLength
    static int _get_UInt64NumberBufferLength();
    // Set static field: static System.Int32 UInt64NumberBufferLength
    static void _set_UInt64NumberBufferLength(int value);
    // Get static field: static private readonly System.Single[] s_Pow10SingleTable
    static ::ArrayW<float> _get_s_Pow10SingleTable();
    // Set static field: static private readonly System.Single[] s_Pow10SingleTable
    static void _set_s_Pow10SingleTable(::ArrayW<float> value);
    // Get static field: static private readonly System.Double[] s_Pow10DoubleTable
    static ::ArrayW<double> _get_s_Pow10DoubleTable();
    // Set static field: static private readonly System.Double[] s_Pow10DoubleTable
    static void _set_s_Pow10DoubleTable(::ArrayW<double> value);
    // static field const value: static private System.Int32 Int32Precision
    static constexpr const int Int32Precision = 10;
    // Get static field: static private System.Int32 Int32Precision
    static int _get_Int32Precision();
    // Set static field: static private System.Int32 Int32Precision
    static void _set_Int32Precision(int value);
    // static field const value: static private System.Int32 UInt32Precision
    static constexpr const int UInt32Precision = 10;
    // Get static field: static private System.Int32 UInt32Precision
    static int _get_UInt32Precision();
    // Set static field: static private System.Int32 UInt32Precision
    static void _set_UInt32Precision(int value);
    // static field const value: static private System.Int32 Int64Precision
    static constexpr const int Int64Precision = 19;
    // Get static field: static private System.Int32 Int64Precision
    static int _get_Int64Precision();
    // Set static field: static private System.Int32 Int64Precision
    static void _set_Int64Precision(int value);
    // static field const value: static private System.Int32 UInt64Precision
    static constexpr const int UInt64Precision = 20;
    // Get static field: static private System.Int32 UInt64Precision
    static int _get_UInt64Precision();
    // Set static field: static private System.Int32 UInt64Precision
    static void _set_UInt64Precision(int value);
    // static field const value: static private System.Int32 DoubleMaxExponent
    static constexpr const int DoubleMaxExponent = 309;
    // Get static field: static private System.Int32 DoubleMaxExponent
    static int _get_DoubleMaxExponent();
    // Set static field: static private System.Int32 DoubleMaxExponent
    static void _set_DoubleMaxExponent(int value);
    // static field const value: static private System.Int32 DoubleMinExponent
    static constexpr const int DoubleMinExponent = -324;
    // Get static field: static private System.Int32 DoubleMinExponent
    static int _get_DoubleMinExponent();
    // Set static field: static private System.Int32 DoubleMinExponent
    static void _set_DoubleMinExponent(int value);
    // static field const value: static private System.Int32 FloatingPointMaxExponent
    static constexpr const int FloatingPointMaxExponent = 309;
    // Get static field: static private System.Int32 FloatingPointMaxExponent
    static int _get_FloatingPointMaxExponent();
    // Set static field: static private System.Int32 FloatingPointMaxExponent
    static void _set_FloatingPointMaxExponent(int value);
    // static field const value: static private System.Int32 FloatingPointMinExponent
    static constexpr const int FloatingPointMinExponent = -324;
    // Get static field: static private System.Int32 FloatingPointMinExponent
    static int _get_FloatingPointMinExponent();
    // Set static field: static private System.Int32 FloatingPointMinExponent
    static void _set_FloatingPointMinExponent(int value);
    // static field const value: static private System.Int32 SingleMaxExponent
    static constexpr const int SingleMaxExponent = 39;
    // Get static field: static private System.Int32 SingleMaxExponent
    static int _get_SingleMaxExponent();
    // Set static field: static private System.Int32 SingleMaxExponent
    static void _set_SingleMaxExponent(int value);
    // static field const value: static private System.Int32 SingleMinExponent
    static constexpr const int SingleMinExponent = -45;
    // Get static field: static private System.Int32 SingleMinExponent
    static int _get_SingleMinExponent();
    // Set static field: static private System.Int32 SingleMinExponent
    static void _set_SingleMinExponent(int value);
    // static private System.Boolean IsNegative(System.Double d)
    // Offset: 0x574C170
    static bool IsNegative(double d);
    // static public System.Boolean IsNegativeInfinity(System.Single f)
    // Offset: 0x574C17C
    static bool IsNegativeInfinity(float f);
    // static public System.Void Dragon4Double(System.Double value, System.Int32 cutoffNumber, System.Boolean isSignificantDigits, ref System.Number/NumberBuffer number)
    // Offset: 0x574C190
    static void Dragon4Double(double value, int cutoffNumber, bool isSignificantDigits, ByRef<::System::Number_::NumberBuffer> number);
    // static public System.Void Dragon4Single(System.Single value, System.Int32 cutoffNumber, System.Boolean isSignificantDigits, ref System.Number/NumberBuffer number)
    // Offset: 0x574CA6C
    static void Dragon4Single(float value, int cutoffNumber, bool isSignificantDigits, ByRef<::System::Number_::NumberBuffer> number);
    // static private System.UInt32 Dragon4(System.UInt64 mantissa, System.Int32 exponent, System.UInt32 mantissaHighBitIdx, System.Boolean hasUnequalMargins, System.Int32 cutoffNumber, System.Boolean isSignificantDigits, System.Span`1<System.Byte> buffer, out System.Int32 decimalExponent)
    // Offset: 0x574C32C
    static uint Dragon4(uint64_t mantissa, int exponent, uint mantissaHighBitIdx, bool hasUnequalMargins, int cutoffNumber, bool isSignificantDigits, ::System::Span_1<uint8_t> buffer, ByRef<int> decimalExponent);
    // static public System.String FormatDecimal(System.Decimal value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574D6D4
    static ::StringW FormatDecimal(::System::Decimal value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatDecimal(System.Decimal value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x574F1D0
    static bool TryFormatDecimal(::System::Decimal value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static System.Void DecimalToNumber(ref System.Decimal d, ref System.Number/NumberBuffer number)
    // Offset: 0x574D9B4
    static void DecimalToNumber(ByRef<::System::Decimal> d, ByRef<::System::Number_::NumberBuffer> number);
    // static public System.String FormatDouble(System.Double value, System.String format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574F3DC
    static ::StringW FormatDouble(double value, ::StringW format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatDouble(System.Double value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x574F7D0
    static bool TryFormatDouble(double value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Int32 GetFloatingPointMaxDigitsAndPrecision(System.Char fmt, ref System.Int32 precision, System.Globalization.NumberFormatInfo info, out System.Boolean isSignificantDigits)
    // Offset: 0x574FA00
    static int GetFloatingPointMaxDigitsAndPrecision(::Il2CppChar fmt, ByRef<int> precision, ::System::Globalization::NumberFormatInfo* info, ByRef<bool> isSignificantDigits);
    // static private System.String FormatDouble(ref System.Text.ValueStringBuilder sb, System.Double value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574F51C
    static ::StringW FormatDouble(ByRef<::System::Text::ValueStringBuilder__> sb, double value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.String FormatSingle(System.Single value, System.String format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574FB5C
    static ::StringW FormatSingle(float value, ::StringW format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatSingle(System.Single value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x574FF58
    static bool TryFormatSingle(float value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String FormatSingle(ref System.Text.ValueStringBuilder sb, System.Single value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574FC9C
    static ::StringW FormatSingle(ByRef<::System::Text::ValueStringBuilder__> sb, float value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean TryCopyTo(System.String source, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x574F92C
    static bool TryCopyTo(::StringW source, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatInt32(System.Int32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x57500B4
    static ::StringW FormatInt32(int value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatInt32(System.Int32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5750930
    static bool TryFormatInt32(int value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatUInt32(System.UInt32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x5751244
    static ::StringW FormatUInt32(uint value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatUInt32(System.UInt32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5751568
    static bool TryFormatUInt32(uint value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatInt64(System.Int64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x57518F0
    static ::StringW FormatInt64(int64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatInt64(System.Int64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x57524D4
    static bool TryFormatInt64(int64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatUInt64(System.UInt64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x5752F48
    static ::StringW FormatUInt64(uint64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatUInt64(System.UInt64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5753314
    static bool TryFormatUInt64(uint64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void Int32ToNumber(System.Int32 value, ref System.Number/NumberBuffer number)
    // Offset: 0x57535B0
    static void Int32ToNumber(int value, ByRef<::System::Number_::NumberBuffer> number);
    // static private System.String NegativeInt32ToDecStr(System.Int32 value, System.Int32 digits, System.String sNegative)
    // Offset: 0x5750624
    static ::StringW NegativeInt32ToDecStr(int value, int digits, ::StringW sNegative);
    // static private System.Boolean TryNegativeInt32ToDecStr(System.Int32 value, System.Int32 digits, System.String sNegative, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5750EF8
    static bool TryNegativeInt32ToDecStr(int value, int digits, ::StringW sNegative, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String Int32ToHexStr(System.Int32 value, System.Char hexBase, System.Int32 digits)
    // Offset: 0x57507F4
    static ::StringW Int32ToHexStr(int value, ::Il2CppChar hexBase, int digits);
    // static private System.Boolean TryInt32ToHexStr(System.Int32 value, System.Char hexBase, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x57510E8
    static bool TryInt32ToHexStr(int value, ::Il2CppChar hexBase, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Char* Int32ToHexChars(System.Char* buffer, System.UInt32 value, System.Int32 hexBase, System.Int32 digits)
    // Offset: 0x575371C
    static ::Il2CppChar* Int32ToHexChars(::Il2CppChar* buffer, uint value, int hexBase, int digits);
    // static private System.Void UInt32ToNumber(System.UInt32 value, ref System.Number/NumberBuffer number)
    // Offset: 0x575375C
    static void UInt32ToNumber(uint value, ByRef<::System::Number_::NumberBuffer> number);
    // static System.Byte* UInt32ToDecChars(System.Byte* bufferEnd, System.UInt32 value, System.Int32 digits)
    // Offset: 0x574F390
    static uint8_t* UInt32ToDecChars(uint8_t* bufferEnd, uint value, int digits);
    // static System.Char* UInt32ToDecChars(System.Char* bufferEnd, System.UInt32 value, System.Int32 digits)
    // Offset: 0x57536D0
    static ::Il2CppChar* UInt32ToDecChars(::Il2CppChar* bufferEnd, uint value, int digits);
    // static System.String UInt32ToDecStr(System.UInt32 value, System.Int32 digits)
    // Offset: 0x5750434
    static ::StringW UInt32ToDecStr(uint value, int digits);
    // static private System.Boolean TryUInt32ToDecStr(System.UInt32 value, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5750D28
    static bool TryUInt32ToDecStr(uint value, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void Int64ToNumber(System.Int64 input, ref System.Number/NumberBuffer number)
    // Offset: 0x575234C
    static void Int64ToNumber(int64_t input, ByRef<::System::Number_::NumberBuffer> number);
    // static private System.String NegativeInt64ToDecStr(System.Int64 input, System.Int32 digits, System.String sNegative)
    // Offset: 0x5751E60
    static ::StringW NegativeInt64ToDecStr(int64_t input, int digits, ::StringW sNegative);
    // static private System.Boolean TryNegativeInt64ToDecStr(System.Int64 input, System.Int32 digits, System.String sNegative, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5752A58
    static bool TryNegativeInt64ToDecStr(int64_t input, int digits, ::StringW sNegative, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String Int64ToHexStr(System.Int64 value, System.Char hexBase, System.Int32 digits)
    // Offset: 0x5752124
    static ::StringW Int64ToHexStr(int64_t value, ::Il2CppChar hexBase, int digits);
    // static private System.Boolean TryInt64ToHexStr(System.Int64 value, System.Char hexBase, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x5752D2C
    static bool TryInt64ToHexStr(int64_t value, ::Il2CppChar hexBase, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void UInt64ToNumber(System.UInt64 value, ref System.Number/NumberBuffer number)
    // Offset: 0x5753198
    static void UInt64ToNumber(uint64_t value, ByRef<::System::Number_::NumberBuffer> number);
    // static System.String UInt64ToDecStr(System.UInt64 value, System.Int32 digits)
    // Offset: 0x5751B88
    static ::StringW UInt64ToDecStr(uint64_t value, int digits);
    // static private System.Boolean TryUInt64ToDecStr(System.UInt64 value, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x57527CC
    static bool TryUInt64ToDecStr(uint64_t value, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static System.Char ParseFormatSpecifier(System.ReadOnlySpan`1<System.Char> format, out System.Int32 digits)
    // Offset: 0x574D870
    static ::Il2CppChar ParseFormatSpecifier(::System::ReadOnlySpan_1<::Il2CppChar> format, ByRef<int> digits);
    // static System.Void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574DB90
    static void NumberToString(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, ::Il2CppChar format, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static System.Void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x574E104
    static void NumberToStringFormat(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x57539F4
    static void FormatCurrency(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Int32[] groupDigits, System.String sDecimal, System.String sGroup)
    // Offset: 0x5753C44
    static void FormatFixed(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::ArrayW<int> groupDigits, ::StringW sDecimal, ::StringW sGroup);
    // static private System.Void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5754154
    static void FormatNumber(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Char expChar)
    // Offset: 0x57543A0
    static void FormatScientific(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, ::Il2CppChar expChar);
    // static private System.Void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, System.Int32 value, System.Char expChar, System.Int32 minDigits, System.Boolean positiveSign)
    // Offset: 0x5754D04
    static void FormatExponent(ByRef<::System::Text::ValueStringBuilder__> sb, ::System::Globalization::NumberFormatInfo* info, int value, ::Il2CppChar expChar, int minDigits, bool positiveSign);
    // static private System.Void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Char expChar, System.Boolean bSuppressScientific)
    // Offset: 0x57545E0
    static void FormatGeneral(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, ::Il2CppChar expChar, bool bSuppressScientific);
    // static private System.Void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5754968
    static void FormatPercent(ByRef<::System::Text::ValueStringBuilder__> sb, ByRef<::System::Number_::NumberBuffer> number, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static System.Void RoundNumber(ref System.Number/NumberBuffer number, System.Int32 pos, System.Boolean isCorrectlyRounded)
    // Offset: 0x57538A0
    static void RoundNumber(ByRef<::System::Number_::NumberBuffer> number, int pos, bool isCorrectlyRounded);
    // static private System.Int32 FindSection(System.ReadOnlySpan`1<System.Char> format, System.Int32 section)
    // Offset: 0x5754BB8
    static int FindSection(::System::ReadOnlySpan_1<::Il2CppChar> format, int section);
    // static private System.UInt32 Low32(System.UInt64 value)
    // Offset: 0x575389C
    static uint Low32(uint64_t value);
    // static private System.UInt32 High32(System.UInt64 value)
    // Offset: 0x5753894
    static uint High32(uint64_t value);
    // static private System.UInt32 Int64DivMod1E9(ref System.UInt64 value)
    // Offset: 0x575385C
    static uint Int64DivMod1E9(ByRef<uint64_t> value);
    // static private System.UInt64 ExtractFractionAndBiasedExponent(System.Double value, out System.Int32 exponent)
    // Offset: 0x574C2F4
    static uint64_t ExtractFractionAndBiasedExponent(double value, ByRef<int> exponent);
    // static private System.UInt32 ExtractFractionAndBiasedExponent(System.Single value, out System.Int32 exponent)
    // Offset: 0x574CB98
    static uint ExtractFractionAndBiasedExponent(float value, ByRef<int> exponent);
    // static private System.String FastAllocateString(System.Int32 length)
    // Offset: 0x57536BC
    static ::StringW FastAllocateString(int length);
    // static private System.Int32 SingleToInt32Bits(System.Single value)
    // Offset: 0x5754FB4
    static int SingleToInt32Bits(float value);
    // static private System.Void AccumulateDecimalDigitsIntoBigInteger(ref System.Number/NumberBuffer number, System.UInt32 firstIndex, System.UInt32 lastIndex, out System.Number/BigInteger result)
    // Offset: 0x5754FBC
    static void AccumulateDecimalDigitsIntoBigInteger(ByRef<::System::Number_::NumberBuffer> number, uint firstIndex, uint lastIndex, ByRef<::System::Number_::BigInteger> result);
    // static private System.UInt64 AssembleFloatingPointBits(in System.Number/FloatingPointInfo info, System.UInt64 initialMantissa, System.Int32 initialExponent, System.Boolean hasZeroTail)
    // Offset: 0x5755210
    static uint64_t AssembleFloatingPointBits(ByRef<::System::Number_::FloatingPointInfo> info, uint64_t initialMantissa, int initialExponent, bool hasZeroTail);
    // static private System.UInt64 ConvertBigIntegerToFloatingPointBits(ref System.Number/BigInteger value, in System.Number/FloatingPointInfo info, System.UInt32 integerBitsOfPrecision, System.Boolean hasNonZeroFractionalPart)
    // Offset: 0x57554AC
    static uint64_t ConvertBigIntegerToFloatingPointBits(ByRef<::System::Number_::BigInteger> value, ByRef<::System::Number_::FloatingPointInfo> info, uint integerBitsOfPrecision, bool hasNonZeroFractionalPart);
    // static private System.UInt32 DigitsToUInt32(System.Byte* p, System.Int32 count)
    // Offset: 0x5755110
    static uint DigitsToUInt32(uint8_t* p, int count);
    // static private System.UInt64 DigitsToUInt64(System.Byte* p, System.Int32 count)
    // Offset: 0x575564C
    static uint64_t DigitsToUInt64(uint8_t* p, int count);
    // static private System.UInt64 NumberToFloatingPointBits(ref System.Number/NumberBuffer number, in System.Number/FloatingPointInfo info)
    // Offset: 0x5755688
    static uint64_t NumberToFloatingPointBits(ByRef<::System::Number_::NumberBuffer> number, ByRef<::System::Number_::FloatingPointInfo> info);
    // static private System.UInt64 NumberToFloatingPointBitsSlow(ref System.Number/NumberBuffer number, in System.Number/FloatingPointInfo info, System.UInt32 positiveExponent, System.UInt32 integerDigitsPresent, System.UInt32 fractionalDigitsPresent)
    // Offset: 0x5755904
    static uint64_t NumberToFloatingPointBitsSlow(ByRef<::System::Number_::NumberBuffer> number, ByRef<::System::Number_::FloatingPointInfo> info, uint positiveExponent, uint integerDigitsPresent, uint fractionalDigitsPresent);
    // static private System.UInt64 RightShiftWithRounding(System.UInt64 value, System.Int32 shift, System.Boolean hasZeroTail)
    // Offset: 0x57553F0
    static uint64_t RightShiftWithRounding(uint64_t value, int shift, bool hasZeroTail);
    // static private System.Boolean ShouldRoundUp(System.Boolean lsbBit, System.Boolean roundBit, System.Boolean hasTailBits)
    // Offset: 0x57562BC
    static bool ShouldRoundUp(bool lsbBit, bool roundBit, bool hasTailBits);
    // static System.ReadOnlySpan`1<System.Byte> get_CharToHexLookup()
    // Offset: 0x57562CC
    static ::System::ReadOnlySpan_1<uint8_t> get_CharToHexLookup();
    // static private System.Boolean TryNumberToInt32(ref System.Number/NumberBuffer number, ref System.Int32 value)
    // Offset: 0x575631C
    static bool TryNumberToInt32(ByRef<::System::Number_::NumberBuffer> number, ByRef<int> value);
    // static private System.Boolean TryNumberToInt64(ref System.Number/NumberBuffer number, ref System.Int64 value)
    // Offset: 0x57563C8
    static bool TryNumberToInt64(ByRef<::System::Number_::NumberBuffer> number, ByRef<int64_t> value);
    // static private System.Boolean TryNumberToUInt32(ref System.Number/NumberBuffer number, ref System.UInt32 value)
    // Offset: 0x5756470
    static bool TryNumberToUInt32(ByRef<::System::Number_::NumberBuffer> number, ByRef<uint> value);
    // static private System.Boolean TryNumberToUInt64(ref System.Number/NumberBuffer number, ref System.UInt64 value)
    // Offset: 0x5756510
    static bool TryNumberToUInt64(ByRef<::System::Number_::NumberBuffer> number, ByRef<uint64_t> value);
    // static System.Int32 ParseInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x57565B0
    static int ParseInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Int64 ParseInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x57566A4
    static int64_t ParseInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.UInt32 ParseUInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5756750
    static uint ParseUInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.UInt64 ParseUInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x575687C
    static uint64_t ParseUInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean TryParseNumber(ref System.Char* str, System.Char* strEnd, System.Globalization.NumberStyles styles, ref System.Number/NumberBuffer number, System.Globalization.NumberFormatInfo info)
    // Offset: 0x57569A8
    static bool TryParseNumber(ByRef<::Il2CppChar*> str, ::Il2CppChar* strEnd, ::System::Globalization::NumberStyles styles, ByRef<::System::Number_::NumberBuffer> number, ::System::Globalization::NumberFormatInfo* info);
    // static System.Number/ParsingStatus TryParseInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int32 result)
    // Offset: 0x575718C
    static ::System::Number_::ParsingStatus TryParseInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int> result);
    // static private System.Number/ParsingStatus TryParseInt32Number(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int32 result)
    // Offset: 0x5757BE8
    static ::System::Number_::ParsingStatus TryParseInt32Number(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int> result);
    // static System.Number/ParsingStatus TryParseInt32IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int32 result)
    // Offset: 0x575729C
    static ::System::Number_::ParsingStatus TryParseInt32IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int> result);
    // static System.Number/ParsingStatus TryParseInt64IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int64 result)
    // Offset: 0x5757EB8
    static ::System::Number_::ParsingStatus TryParseInt64IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int64_t> result);
    // static System.Number/ParsingStatus TryParseInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int64 result)
    // Offset: 0x5758498
    static ::System::Number_::ParsingStatus TryParseInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int64_t> result);
    // static private System.Number/ParsingStatus TryParseInt64Number(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int64 result)
    // Offset: 0x5758928
    static ::System::Number_::ParsingStatus TryParseInt64Number(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int64_t> result);
    // static System.Number/ParsingStatus TryParseUInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result)
    // Offset: 0x5758A4C
    static ::System::Number_::ParsingStatus TryParseUInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result);
    // static private System.Number/ParsingStatus TryParseUInt32Number(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result)
    // Offset: 0x575912C
    static ::System::Number_::ParsingStatus TryParseUInt32Number(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result);
    // static System.Number/ParsingStatus TryParseUInt32IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result)
    // Offset: 0x5758B2C
    static ::System::Number_::ParsingStatus TryParseUInt32IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result);
    // static private System.Number/ParsingStatus TryParseUInt32HexNumberStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, out System.UInt32 result)
    // Offset: 0x5757868
    static ::System::Number_::ParsingStatus TryParseUInt32HexNumberStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ByRef<uint> result);
    // static System.Number/ParsingStatus TryParseUInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result)
    // Offset: 0x5759250
    static ::System::Number_::ParsingStatus TryParseUInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result);
    // static private System.Number/ParsingStatus TryParseUInt64Number(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result)
    // Offset: 0x575993C
    static ::System::Number_::ParsingStatus TryParseUInt64Number(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result);
    // static System.Number/ParsingStatus TryParseUInt64IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result)
    // Offset: 0x5759330
    static ::System::Number_::ParsingStatus TryParseUInt64IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result);
    // static private System.Number/ParsingStatus TryParseUInt64HexNumberStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, out System.UInt64 result)
    // Offset: 0x57585A8
    static ::System::Number_::ParsingStatus TryParseUInt64HexNumberStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ByRef<uint64_t> result);
    // static System.Decimal ParseDecimal(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5759A60
    static ::System::Decimal ParseDecimal(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Boolean TryNumberToDecimal(ref System.Number/NumberBuffer number, ref System.Decimal value)
    // Offset: 0x5759C58
    static bool TryNumberToDecimal(ByRef<::System::Number_::NumberBuffer> number, ByRef<::System::Decimal> value);
    // static System.Double ParseDouble(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5759F08
    static double ParseDouble(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Single ParseSingle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x575A688
    static float ParseSingle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Number/ParsingStatus TryParseDecimal(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Decimal result)
    // Offset: 0x5759B30
    static ::System::Number_::ParsingStatus TryParseDecimal(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<::System::Decimal> result);
    // static System.Boolean TryParseDouble(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Double result)
    // Offset: 0x5759FAC
    static bool TryParseDouble(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<double> result);
    // static System.Boolean TryParseSingle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Single result)
    // Offset: 0x575A72C
    static bool TryParseSingle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<float> result);
    // static System.Boolean TryStringToNumber(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, ref System.Number/NumberBuffer number, System.Globalization.NumberFormatInfo info)
    // Offset: 0x5757D0C
    static bool TryStringToNumber(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ByRef<::System::Number_::NumberBuffer> number, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean TrailingZeros(System.ReadOnlySpan`1<System.Char> value, System.Int32 index)
    // Offset: 0x5757E2C
    static bool TrailingZeros(::System::ReadOnlySpan_1<::Il2CppChar> value, int index);
    // static private System.Boolean IsSpaceReplacingChar(System.Char c)
    // Offset: 0x575AFEC
    static bool IsSpaceReplacingChar(::Il2CppChar c);
    // static private System.Char* MatchChars(System.Char* p, System.Char* pEnd, System.String value)
    // Offset: 0x57570A8
    static ::Il2CppChar* MatchChars(::Il2CppChar* p, ::Il2CppChar* pEnd, ::StringW value);
    // static private System.Boolean IsWhite(System.Int32 ch)
    // Offset: 0x575708C
    static bool IsWhite(int ch);
    // static private System.Boolean IsDigit(System.Int32 ch)
    // Offset: 0x575717C
    static bool IsDigit(int ch);
    // static System.Void ThrowOverflowOrFormatException(System.Number/ParsingStatus status, System.TypeCode type)
    // Offset: 0x575665C
    static void ThrowOverflowOrFormatException(::System::Number_::ParsingStatus status, ::System::TypeCode type);
    // static System.Void ThrowOverflowException(System.TypeCode type)
    // Offset: 0x575B134
    static void ThrowOverflowException(::System::TypeCode type);
    // static private System.Exception GetException(System.Number/ParsingStatus status, System.TypeCode type)
    // Offset: 0x575B00C
    static ::System::Exception* GetException(::System::Number_::ParsingStatus status, ::System::TypeCode type);
    // static System.Double NumberToDouble(ref System.Number/NumberBuffer number)
    // Offset: 0x575AE60
    static double NumberToDouble(ByRef<::System::Number_::NumberBuffer> number);
    // static System.Single NumberToSingle(ref System.Number/NumberBuffer number)
    // Offset: 0x575AF24
    static float NumberToSingle(ByRef<::System::Number_::NumberBuffer> number);
    // static private System.Single Int32BitsToSingle(System.Int32 value)
    // Offset: 0x575B174
    static float Int32BitsToSingle(int value);
    // static private System.Void .cctor()
    // Offset: 0x575B17C
    static void _cctor();
    // static System.Boolean <RoundNumber>g__ShouldRoundUp|70_0(System.Byte* _dig, System.Int32 _i, System.Number/NumberBufferKind numberKind, System.Boolean _isCorrectlyRounded)
    // Offset: 0x5754F90
    static bool $RoundNumber$g__ShouldRoundUp_70_0(uint8_t* _dig, int _i, ::System::Number_::NumberBufferKind numberKind, bool _isCorrectlyRounded);
  }; // System.Number
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number_::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&System::Number_::IsNegative)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Number_::IsNegativeInfinity
// Il2CppName: IsNegativeInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&System::Number_::IsNegativeInfinity)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "IsNegativeInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: System::Number_::Dragon4Double
// Il2CppName: Dragon4Double
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(double, int, bool, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Dragon4Double)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* cutoffNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isSignificantDigits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Dragon4Double", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, cutoffNumber, isSignificantDigits, number});
  }
};
// Writing MetadataGetter for method: System::Number_::Dragon4Single
// Il2CppName: Dragon4Single
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, int, bool, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Dragon4Single)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cutoffNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isSignificantDigits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Dragon4Single", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, cutoffNumber, isSignificantDigits, number});
  }
};
// Writing MetadataGetter for method: System::Number_::Dragon4
// Il2CppName: Dragon4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t, int, uint, bool, int, bool, ::System::Span_1<uint8_t>, ByRef<int>)>(&System::Number_::Dragon4)> {
  static const MethodInfo* get() {
    static auto* mantissa = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mantissaHighBitIdx = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hasUnequalMargins = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cutoffNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isSignificantDigits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* decimalExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Dragon4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mantissa, exponent, mantissaHighBitIdx, hasUnequalMargins, cutoffNumber, isSignificantDigits, buffer, decimalExponent});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatDecimal
// Il2CppName: FormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Decimal, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatDecimal
// Il2CppName: TryFormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Decimal, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::DecimalToNumber
// Il2CppName: DecimalToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal>, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::DecimalToNumber)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "DecimalToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, number});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatDouble
// Il2CppName: FormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(double, ::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatDouble
// Il2CppName: TryFormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::GetFloatingPointMaxDigitsAndPrecision
// Il2CppName: GetFloatingPointMaxDigitsAndPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar, ByRef<int>, ::System::Globalization::NumberFormatInfo*, ByRef<bool>)>(&System::Number_::GetFloatingPointMaxDigitsAndPrecision)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* isSignificantDigits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "GetFloatingPointMaxDigitsAndPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, precision, info, isSignificantDigits});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatDouble
// Il2CppName: FormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::System::Text::ValueStringBuilder__>, double, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatDouble)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatSingle
// Il2CppName: FormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float, ::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatSingle
// Il2CppName: TryFormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatSingle
// Il2CppName: FormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::System::Text::ValueStringBuilder__>, float, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatSingle)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryCopyTo
// Il2CppName: TryCopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryCopyTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryCopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatInt32
// Il2CppName: FormatInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number_::FormatInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatInt32
// Il2CppName: TryFormatInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatUInt32
// Il2CppName: FormatUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number_::FormatUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatUInt32
// Il2CppName: TryFormatUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatInt64
// Il2CppName: FormatInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number_::FormatInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatInt64
// Il2CppName: TryFormatInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatUInt64
// Il2CppName: FormatUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number_::FormatUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number_::TryFormatUInt64
// Il2CppName: TryFormatUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryFormatUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryFormatUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::Int32ToNumber
// Il2CppName: Int32ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Int32ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int32ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number_::NegativeInt32ToDecStr
// Il2CppName: NegativeInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int, ::StringW)>(&System::Number_::NegativeInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NegativeInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, sNegative});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNegativeInt32ToDecStr
// Il2CppName: TryNegativeInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, ::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryNegativeInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNegativeInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, sNegative, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::Int32ToHexStr
// Il2CppName: Int32ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::Il2CppChar, int)>(&System::Number_::Int32ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int32ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::TryInt32ToHexStr
// Il2CppName: TryInt32ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppChar, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryInt32ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryInt32ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::Int32ToHexChars
// Il2CppName: Int32ToHexChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, uint, int, int)>(&System::Number_::Int32ToHexChars)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int32ToHexChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt32ToNumber
// Il2CppName: UInt32ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::UInt32ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt32ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt32ToDecChars
// Il2CppName: UInt32ToDecChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*, uint, int)>(&System::Number_::UInt32ToDecChars)> {
  static const MethodInfo* get() {
    static auto* bufferEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt32ToDecChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferEnd, value, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt32ToDecChars
// Il2CppName: UInt32ToDecChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, uint, int)>(&System::Number_::UInt32ToDecChars)> {
  static const MethodInfo* get() {
    static auto* bufferEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt32ToDecChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferEnd, value, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt32ToDecStr
// Il2CppName: UInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint, int)>(&System::Number_::UInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::TryUInt32ToDecStr
// Il2CppName: TryUInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryUInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryUInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::Int64ToNumber
// Il2CppName: Int64ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Int64ToNumber)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int64ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, number});
  }
};
// Writing MetadataGetter for method: System::Number_::NegativeInt64ToDecStr
// Il2CppName: NegativeInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, int, ::StringW)>(&System::Number_::NegativeInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NegativeInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, digits, sNegative});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNegativeInt64ToDecStr
// Il2CppName: TryNegativeInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, int, ::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryNegativeInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNegativeInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, digits, sNegative, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::Int64ToHexStr
// Il2CppName: Int64ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, ::Il2CppChar, int)>(&System::Number_::Int64ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int64ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::TryInt64ToHexStr
// Il2CppName: TryInt64ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::Il2CppChar, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryInt64ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryInt64ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt64ToNumber
// Il2CppName: UInt64ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::UInt64ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt64ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number_::UInt64ToDecStr
// Il2CppName: UInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint64_t, int)>(&System::Number_::UInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "UInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::TryUInt64ToDecStr
// Il2CppName: TryUInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::TryUInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryUInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseFormatSpecifier
// Il2CppName: ParseFormatSpecifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<int>)>(&System::Number_::ParseFormatSpecifier)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseFormatSpecifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, digits});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, ::Il2CppChar, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::NumberToString)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, format, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToStringFormat
// Il2CppName: NumberToStringFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::NumberToStringFormat)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToStringFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, format, info});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatCurrency
// Il2CppName: FormatCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatCurrency)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatFixed
// Il2CppName: FormatFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::ArrayW<int>, ::StringW, ::StringW)>(&System::Number_::FormatFixed)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupDigits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* sDecimal = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sGroup = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, groupDigits, sDecimal, sGroup});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatNumber
// Il2CppName: FormatNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatNumber)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatScientific
// Il2CppName: FormatScientific
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::System::Globalization::NumberFormatInfo*, ::Il2CppChar)>(&System::Number_::FormatScientific)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatScientific", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, info, expChar});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatExponent
// Il2CppName: FormatExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ::System::Globalization::NumberFormatInfo*, int, ::Il2CppChar, int, bool)>(&System::Number_::FormatExponent)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* minDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* positiveSign = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, info, value, expChar, minDigits, positiveSign});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatGeneral
// Il2CppName: FormatGeneral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::System::Globalization::NumberFormatInfo*, ::Il2CppChar, bool)>(&System::Number_::FormatGeneral)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* bSuppressScientific = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatGeneral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, info, expChar, bSuppressScientific});
  }
};
// Writing MetadataGetter for method: System::Number_::FormatPercent
// Il2CppName: FormatPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder__>, ByRef<::System::Number_::NumberBuffer>, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::FormatPercent)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FormatPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number_::RoundNumber
// Il2CppName: RoundNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::NumberBuffer>, int, bool)>(&System::Number_::RoundNumber)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isCorrectlyRounded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "RoundNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, pos, isCorrectlyRounded});
  }
};
// Writing MetadataGetter for method: System::Number_::FindSection
// Il2CppName: FindSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&System::Number_::FindSection)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* section = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FindSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, section});
  }
};
// Writing MetadataGetter for method: System::Number_::Low32
// Il2CppName: Low32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Number_::Low32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Low32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::High32
// Il2CppName: High32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Number_::High32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "High32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::Int64DivMod1E9
// Il2CppName: Int64DivMod1E9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<uint64_t>)>(&System::Number_::Int64DivMod1E9)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int64DivMod1E9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::ExtractFractionAndBiasedExponent
// Il2CppName: ExtractFractionAndBiasedExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(double, ByRef<int>)>(&System::Number_::ExtractFractionAndBiasedExponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ExtractFractionAndBiasedExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, exponent});
  }
};
// Writing MetadataGetter for method: System::Number_::ExtractFractionAndBiasedExponent
// Il2CppName: ExtractFractionAndBiasedExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(float, ByRef<int>)>(&System::Number_::ExtractFractionAndBiasedExponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ExtractFractionAndBiasedExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, exponent});
  }
};
// Writing MetadataGetter for method: System::Number_::FastAllocateString
// Il2CppName: FastAllocateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&System::Number_::FastAllocateString)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "FastAllocateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: System::Number_::SingleToInt32Bits
// Il2CppName: SingleToInt32Bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&System::Number_::SingleToInt32Bits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "SingleToInt32Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::AccumulateDecimalDigitsIntoBigInteger
// Il2CppName: AccumulateDecimalDigitsIntoBigInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::NumberBuffer>, uint, uint, ByRef<::System::Number_::BigInteger>)>(&System::Number_::AccumulateDecimalDigitsIntoBigInteger)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* firstIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* lastIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "AccumulateDecimalDigitsIntoBigInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, firstIndex, lastIndex, result});
  }
};
// Writing MetadataGetter for method: System::Number_::AssembleFloatingPointBits
// Il2CppName: AssembleFloatingPointBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<::System::Number_::FloatingPointInfo>, uint64_t, int, bool)>(&System::Number_::AssembleFloatingPointBits)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System", "Number/FloatingPointInfo")->this_arg;
    static auto* initialMantissa = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* initialExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hasZeroTail = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "AssembleFloatingPointBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, initialMantissa, initialExponent, hasZeroTail});
  }
};
// Writing MetadataGetter for method: System::Number_::ConvertBigIntegerToFloatingPointBits
// Il2CppName: ConvertBigIntegerToFloatingPointBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::FloatingPointInfo>, uint, bool)>(&System::Number_::ConvertBigIntegerToFloatingPointBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System", "Number/FloatingPointInfo")->this_arg;
    static auto* integerBitsOfPrecision = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hasNonZeroFractionalPart = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ConvertBigIntegerToFloatingPointBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, info, integerBitsOfPrecision, hasNonZeroFractionalPart});
  }
};
// Writing MetadataGetter for method: System::Number_::DigitsToUInt32
// Il2CppName: DigitsToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint8_t*, int)>(&System::Number_::DigitsToUInt32)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "DigitsToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, count});
  }
};
// Writing MetadataGetter for method: System::Number_::DigitsToUInt64
// Il2CppName: DigitsToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint8_t*, int)>(&System::Number_::DigitsToUInt64)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "DigitsToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, count});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToFloatingPointBits
// Il2CppName: NumberToFloatingPointBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<::System::Number_::FloatingPointInfo>)>(&System::Number_::NumberToFloatingPointBits)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System", "Number/FloatingPointInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToFloatingPointBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, info});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToFloatingPointBitsSlow
// Il2CppName: NumberToFloatingPointBitsSlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<::System::Number_::FloatingPointInfo>, uint, uint, uint)>(&System::Number_::NumberToFloatingPointBitsSlow)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System", "Number/FloatingPointInfo")->this_arg;
    static auto* positiveExponent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* integerDigitsPresent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* fractionalDigitsPresent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToFloatingPointBitsSlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, info, positiveExponent, integerDigitsPresent, fractionalDigitsPresent});
  }
};
// Writing MetadataGetter for method: System::Number_::RightShiftWithRounding
// Il2CppName: RightShiftWithRounding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, int, bool)>(&System::Number_::RightShiftWithRounding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hasZeroTail = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "RightShiftWithRounding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, shift, hasZeroTail});
  }
};
// Writing MetadataGetter for method: System::Number_::ShouldRoundUp
// Il2CppName: ShouldRoundUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, bool)>(&System::Number_::ShouldRoundUp)> {
  static const MethodInfo* get() {
    static auto* lsbBit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* roundBit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasTailBits = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ShouldRoundUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lsbBit, roundBit, hasTailBits});
  }
};
// Writing MetadataGetter for method: System::Number_::get_CharToHexLookup
// Il2CppName: get_CharToHexLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<uint8_t> (*)()>(&System::Number_::get_CharToHexLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "get_CharToHexLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNumberToInt32
// Il2CppName: TryNumberToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<int>)>(&System::Number_::TryNumberToInt32)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNumberToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNumberToInt64
// Il2CppName: TryNumberToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<int64_t>)>(&System::Number_::TryNumberToInt64)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNumberToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNumberToUInt32
// Il2CppName: TryNumberToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<uint>)>(&System::Number_::TryNumberToUInt32)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNumberToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNumberToUInt64
// Il2CppName: TryNumberToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<uint64_t>)>(&System::Number_::TryNumberToUInt64)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNumberToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseInt32
// Il2CppName: ParseInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseInt64
// Il2CppName: ParseInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseUInt32
// Il2CppName: ParseUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseUInt64
// Il2CppName: ParseUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseNumber
// Il2CppName: TryParseNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Il2CppChar*>, ::Il2CppChar*, ::System::Globalization::NumberStyles, ByRef<::System::Number_::NumberBuffer>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::TryParseNumber)> {
  static const MethodInfo* get() {
    static auto* str = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->this_arg;
    static auto* strEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, strEnd, styles, number, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt32
// Il2CppName: TryParseInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int>)>(&System::Number_::TryParseInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt32Number
// Il2CppName: TryParseInt32Number
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int>)>(&System::Number_::TryParseInt32Number)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt32Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt32IntegerStyle
// Il2CppName: TryParseInt32IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int>)>(&System::Number_::TryParseInt32IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt32IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt64IntegerStyle
// Il2CppName: TryParseInt64IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int64_t>)>(&System::Number_::TryParseInt64IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt64IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt64
// Il2CppName: TryParseInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int64_t>)>(&System::Number_::TryParseInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseInt64Number
// Il2CppName: TryParseInt64Number
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int64_t>)>(&System::Number_::TryParseInt64Number)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseInt64Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt32
// Il2CppName: TryParseUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>)>(&System::Number_::TryParseUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt32Number
// Il2CppName: TryParseUInt32Number
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>)>(&System::Number_::TryParseUInt32Number)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt32Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt32IntegerStyle
// Il2CppName: TryParseUInt32IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>)>(&System::Number_::TryParseUInt32IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt32IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt32HexNumberStyle
// Il2CppName: TryParseUInt32HexNumberStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ByRef<uint>)>(&System::Number_::TryParseUInt32HexNumberStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt32HexNumberStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt64
// Il2CppName: TryParseUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>)>(&System::Number_::TryParseUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt64Number
// Il2CppName: TryParseUInt64Number
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>)>(&System::Number_::TryParseUInt64Number)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt64Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt64IntegerStyle
// Il2CppName: TryParseUInt64IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>)>(&System::Number_::TryParseUInt64IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt64IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseUInt64HexNumberStyle
// Il2CppName: TryParseUInt64HexNumberStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ByRef<uint64_t>)>(&System::Number_::TryParseUInt64HexNumberStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseUInt64HexNumberStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, result});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseDecimal
// Il2CppName: ParseDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryNumberToDecimal
// Il2CppName: TryNumberToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::NumberBuffer>, ByRef<::System::Decimal>)>(&System::Number_::TryNumberToDecimal)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryNumberToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseDouble
// Il2CppName: ParseDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::ParseSingle
// Il2CppName: ParseSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::ParseSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ParseSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseDecimal
// Il2CppName: TryParseDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::ParsingStatus (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<::System::Decimal>)>(&System::Number_::TryParseDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseDouble
// Il2CppName: TryParseDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<double>)>(&System::Number_::TryParseDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryParseSingle
// Il2CppName: TryParseSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<float>)>(&System::Number_::TryParseSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryParseSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number_::TryStringToNumber
// Il2CppName: TryStringToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ByRef<::System::Number_::NumberBuffer>, ::System::Globalization::NumberFormatInfo*)>(&System::Number_::TryStringToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TryStringToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, number, info});
  }
};
// Writing MetadataGetter for method: System::Number_::TrailingZeros
// Il2CppName: TrailingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&System::Number_::TrailingZeros)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "TrailingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index});
  }
};
// Writing MetadataGetter for method: System::Number_::IsSpaceReplacingChar
// Il2CppName: IsSpaceReplacingChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Number_::IsSpaceReplacingChar)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "IsSpaceReplacingChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Number_::MatchChars
// Il2CppName: MatchChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, ::Il2CppChar*, ::StringW)>(&System::Number_::MatchChars)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* pEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "MatchChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, pEnd, value});
  }
};
// Writing MetadataGetter for method: System::Number_::IsWhite
// Il2CppName: IsWhite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&System::Number_::IsWhite)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "IsWhite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Number_::IsDigit
// Il2CppName: IsDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&System::Number_::IsDigit)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "IsDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Number_::ThrowOverflowOrFormatException
// Il2CppName: ThrowOverflowOrFormatException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Number_::ParsingStatus, ::System::TypeCode)>(&System::Number_::ThrowOverflowOrFormatException)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Number/ParsingStatus")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ThrowOverflowOrFormatException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, type});
  }
};
// Writing MetadataGetter for method: System::Number_::ThrowOverflowException
// Il2CppName: ThrowOverflowException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::TypeCode)>(&System::Number_::ThrowOverflowException)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "ThrowOverflowException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Number_::GetException
// Il2CppName: GetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Number_::ParsingStatus, ::System::TypeCode)>(&System::Number_::GetException)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Number/ParsingStatus")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "GetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, type});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToDouble
// Il2CppName: NumberToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::NumberToDouble)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: System::Number_::NumberToSingle
// Il2CppName: NumberToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::NumberToSingle)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "NumberToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: System::Number_::Int32BitsToSingle
// Il2CppName: Int32BitsToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&System::Number_::Int32BitsToSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "Int32BitsToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Number_::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::$RoundNumber$g__ShouldRoundUp_70_0
// Il2CppName: <RoundNumber>g__ShouldRoundUp|70_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t*, int, ::System::Number_::NumberBufferKind, bool)>(&System::Number_::$RoundNumber$g__ShouldRoundUp_70_0)> {
  static const MethodInfo* get() {
    static auto* _dig = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* _i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numberKind = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBufferKind")->byval_arg;
    static auto* _isCorrectlyRounded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_*), "<RoundNumber>g__ShouldRoundUp|70_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_dig, _i, numberKind, _isCorrectlyRounded});
  }
};
