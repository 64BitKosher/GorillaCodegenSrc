// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: HexConverter
  class HexConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::HexConverter);
DEFINE_IL2CPP_ARG_TYPE(::System::HexConverter*, "System", "HexConverter");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.HexConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class HexConverter : public ::Il2CppObject {
    public:
    // Nested type: ::System::HexConverter::Casing
    struct Casing;
    // static public System.Void ToBytesBuffer(System.Byte value, System.Span`1<System.Byte> buffer, System.Int32 startingIndex, System.HexConverter/Casing casing)
    // Offset: 0x574B48C
    static void ToBytesBuffer(uint8_t value, ::System::Span_1<uint8_t> buffer, int startingIndex, ::System::HexConverter::Casing casing);
    // static public System.Void ToCharsBuffer(System.Byte value, System.Span`1<System.Char> buffer, System.Int32 startingIndex, System.HexConverter/Casing casing)
    // Offset: 0x574B4E8
    static void ToCharsBuffer(uint8_t value, ::System::Span_1<::Il2CppChar> buffer, int startingIndex, ::System::HexConverter::Casing casing);
    // static public System.String ToString(System.ReadOnlySpan`1<System.Byte> bytes, System.HexConverter/Casing casing)
    // Offset: 0x574B548
    static ::StringW ToString(::System::ReadOnlySpan_1<uint8_t> bytes, ::System::HexConverter::Casing casing);
    // static public System.Char ToCharUpper(System.Int32 value)
    // Offset: 0x574B73C
    static ::Il2CppChar ToCharUpper(int value);
    // static public System.Char ToCharLower(System.Int32 value)
    // Offset: 0x574B758
    static ::Il2CppChar ToCharLower(int value);
  }; // System.HexConverter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::HexConverter::ToBytesBuffer
// Il2CppName: ToBytesBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ::System::Span_1<uint8_t>, int, ::System::HexConverter::Casing)>(&System::HexConverter::ToBytesBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* startingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* casing = &::il2cpp_utils::GetClassFromName("System", "HexConverter/Casing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HexConverter*), "ToBytesBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, startingIndex, casing});
  }
};
// Writing MetadataGetter for method: System::HexConverter::ToCharsBuffer
// Il2CppName: ToCharsBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ::System::Span_1<::Il2CppChar>, int, ::System::HexConverter::Casing)>(&System::HexConverter::ToCharsBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* startingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* casing = &::il2cpp_utils::GetClassFromName("System", "HexConverter/Casing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HexConverter*), "ToCharsBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, startingIndex, casing});
  }
};
// Writing MetadataGetter for method: System::HexConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::ReadOnlySpan_1<uint8_t>, ::System::HexConverter::Casing)>(&System::HexConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* bytes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* casing = &::il2cpp_utils::GetClassFromName("System", "HexConverter/Casing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HexConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, casing});
  }
};
// Writing MetadataGetter for method: System::HexConverter::ToCharUpper
// Il2CppName: ToCharUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(int)>(&System::HexConverter::ToCharUpper)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HexConverter*), "ToCharUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::HexConverter::ToCharLower
// Il2CppName: ToCharLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(int)>(&System::HexConverter::ToCharLower)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HexConverter*), "ToCharLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
