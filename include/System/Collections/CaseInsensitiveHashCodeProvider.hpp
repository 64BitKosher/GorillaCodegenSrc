// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IHashCodeProvider
#include "System/Collections/IHashCodeProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Forward declaring type: CaseInsensitiveHashCodeProvider
  class CaseInsensitiveHashCodeProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::CaseInsensitiveHashCodeProvider);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::CaseInsensitiveHashCodeProvider*, "System.Collections", "CaseInsensitiveHashCodeProvider");
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.CaseInsensitiveHashCodeProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  class CaseInsensitiveHashCodeProvider : public ::Il2CppObject/*, public ::System::Collections::IHashCodeProvider*/ {
    public:
    public:
    // private readonly System.Globalization.CompareInfo _compareInfo
    // Size: 0x8
    // Offset: 0x10
    ::System::Globalization::CompareInfo* compareInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::CompareInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IHashCodeProvider
    operator ::System::Collections::IHashCodeProvider() noexcept {
      return *reinterpret_cast<::System::Collections::IHashCodeProvider*>(this);
    }
    // Creating conversion operator: operator ::System::Globalization::CompareInfo*
    constexpr operator ::System::Globalization::CompareInfo*() const noexcept {
      return compareInfo;
    }
    // Get instance field reference: private readonly System.Globalization.CompareInfo _compareInfo
    [[deprecated("Use field access instead!")]] ::System::Globalization::CompareInfo*& dyn__compareInfo();
    // public System.Void .ctor(System.Globalization.CultureInfo culture)
    // Offset: 0x461E134
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CaseInsensitiveHashCodeProvider* New_ctor(::System::Globalization::CultureInfo* culture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::CaseInsensitiveHashCodeProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CaseInsensitiveHashCodeProvider*, creationType>(culture)));
    }
    // public System.Int32 GetHashCode(System.Object obj)
    // Offset: 0x461E1C0
    int GetHashCode(::Il2CppObject* obj);
    // public System.Void .ctor()
    // Offset: 0x461E0B4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CaseInsensitiveHashCodeProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::CaseInsensitiveHashCodeProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CaseInsensitiveHashCodeProvider*, creationType>()));
    }
  }; // System.Collections.CaseInsensitiveHashCodeProvider
  #pragma pack(pop)
  static check_size<sizeof(CaseInsensitiveHashCodeProvider), 16 + sizeof(::System::Globalization::CompareInfo*)> __System_Collections_CaseInsensitiveHashCodeProviderSizeCheck;
  static_assert(sizeof(CaseInsensitiveHashCodeProvider) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::CaseInsensitiveHashCodeProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::CaseInsensitiveHashCodeProvider::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::CaseInsensitiveHashCodeProvider::*)(::Il2CppObject*)>(&System::Collections::CaseInsensitiveHashCodeProvider::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::CaseInsensitiveHashCodeProvider*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Collections::CaseInsensitiveHashCodeProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
