// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Skipping declaration: DictionaryEnumerator because it is already included!
  // Skipping declaration: KeyCollection because it is already included!
  // Skipping declaration: ValueCollection because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
  // Skipping declaration: IEnumerable`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Collections.ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ReadOnlyDictionary_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::ObjectModel::ReadOnlyDictionary_2, "System.Collections.ObjectModel", "ReadOnlyDictionary`2");
// Type namespace: System.Collections.ObjectModel
namespace System::Collections::ObjectModel {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.ObjectModel.ReadOnlyDictionary`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  class ReadOnlyDictionary_2 : public ::Il2CppObject/*, public ::System::Collections::Generic::IDictionary_2<TKey, TValue>, public ::System::Collections::IDictionary, public ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*/ {
    public:
    // Nested type: ::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator<TKey, TValue>
    struct DictionaryEnumerator;
    // Nested type: ::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection<TKey, TValue>
    class KeyCollection;
    // Nested type: ::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection<TKey, TValue>
    class ValueCollection;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.ObjectModel.ReadOnlyDictionary`2/DictionaryEnumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct DictionaryEnumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::IDictionaryEnumerator*/ {
      public:
      using declaring_type = ReadOnlyDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "DictionaryEnumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly System.Collections.Generic.IDictionary`2<TKey,TValue> _dictionary
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::IDictionary_2<TKey, TValue>*) == 0x8);
      // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> _enumerator
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* enumerator;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*) == 0x8);
      public:
      // Creating value type constructor for type: DictionaryEnumerator
      constexpr DictionaryEnumerator(::System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary_ = {}, ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* enumerator_ = {}) noexcept : dictionary{dictionary_}, enumerator{enumerator_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::IDictionaryEnumerator
      operator ::System::Collections::IDictionaryEnumerator() noexcept {
        return *reinterpret_cast<::System::Collections::IDictionaryEnumerator*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Collections.Generic.IDictionary`2<TKey,TValue> _dictionary
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<TKey, TValue>*& dyn__dictionary() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::dyn__dictionary");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dictionary"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> _enumerator
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*& dyn__enumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::dyn__enumerator");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enumerator"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFFFFFFFFFF
      DictionaryEnumerator(::System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dictionary)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dictionary);
      }
      // public System.Collections.DictionaryEntry get_Entry()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::DictionaryEntry get_Entry() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::get_Entry");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::DictionaryEntry, false>(this, ___internal__method);
      }
      // public System.Object get_Key()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::get_Key");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Object get_Value()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::get_Value");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Object get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::DictionaryEnumerator::Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::DictionaryEnumerator), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.ObjectModel.ReadOnlyDictionary`2/DictionaryEnumerator
    // Could not write size check! Type: System.Collections.ObjectModel.ReadOnlyDictionary`2/DictionaryEnumerator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    class KeyCollection : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<TKey>, public ::System::Collections::ICollection, public ::System::Collections::Generic::IReadOnlyCollection_1<TKey>*/ {
      public:
      using declaring_type = ReadOnlyDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "KeyCollection";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private readonly System.Collections.Generic.ICollection`1<TKey> _collection
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::ICollection_1<TKey>* collection;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::ICollection_1<TKey>*) == 0x8);
      // private System.Object _syncRoot
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* syncRoot;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<TKey>
      operator ::System::Collections::Generic::ICollection_1<TKey>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::ICollection_1<TKey>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::ICollection
      operator ::System::Collections::ICollection() noexcept {
        return *reinterpret_cast<::System::Collections::ICollection*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<TKey>
      operator ::System::Collections::Generic::IReadOnlyCollection_1<TKey>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<TKey>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Collections.Generic.ICollection`1<TKey> _collection
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ICollection_1<TKey>*& dyn__collection() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::dyn__collection");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collection"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::ICollection_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Object _syncRoot
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::dyn__syncRoot");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
        return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(System.Collections.Generic.ICollection`1<TKey> collection)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadOnlyDictionary_2<TKey, TValue>::KeyCollection* New_ctor(::System::Collections::Generic::ICollection_1<TKey>* collection) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*, creationType>(collection)));
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Add(TKey item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_Generic_ICollection$TKey$_Add(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Add");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Clear()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_Generic_ICollection$TKey$_Clear() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Clear");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Contains(TKey item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TKey$_Contains(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Contains");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
      }
      // public System.Void CopyTo(TKey[] array, System.Int32 arrayIndex)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void CopyTo(::ArrayW<TKey> array, int arrayIndex) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::CopyTo");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_Count() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::get_Count");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.get_IsReadOnly()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TKey$_get_IsReadOnly() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.get_IsReadOnly");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Remove(TKey item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TKey$_Remove(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Remove");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
      }
      // public System.Collections.Generic.IEnumerator`1<TKey> GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<TKey>* GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TKey>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.ICollection.CopyTo");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
      }
      // private System.Boolean System.Collections.ICollection.get_IsSynchronized()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_ICollection_get_IsSynchronized() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.ICollection.get_IsSynchronized");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.ICollection.get_SyncRoot()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::System.Collections.ICollection.get_SyncRoot");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadOnlyDictionary_2<TKey, TValue>::KeyCollection* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::KeyCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*, creationType>()));
      }
    }; // System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection
    // Could not write size check! Type: System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    class ValueCollection : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<TValue>, public ::System::Collections::ICollection, public ::System::Collections::Generic::IReadOnlyCollection_1<TValue>*/ {
      public:
      using declaring_type = ReadOnlyDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "ValueCollection";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private readonly System.Collections.Generic.ICollection`1<TValue> _collection
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::ICollection_1<TValue>* collection;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::ICollection_1<TValue>*) == 0x8);
      // private System.Object _syncRoot
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* syncRoot;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<TValue>
      operator ::System::Collections::Generic::ICollection_1<TValue>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::ICollection_1<TValue>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::ICollection
      operator ::System::Collections::ICollection() noexcept {
        return *reinterpret_cast<::System::Collections::ICollection*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<TValue>
      operator ::System::Collections::Generic::IReadOnlyCollection_1<TValue>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<TValue>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Collections.Generic.ICollection`1<TValue> _collection
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ICollection_1<TValue>*& dyn__collection() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::dyn__collection");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collection"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::ICollection_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Object _syncRoot
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::dyn__syncRoot");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
        return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(System.Collections.Generic.ICollection`1<TValue> collection)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadOnlyDictionary_2<TKey, TValue>::ValueCollection* New_ctor(::System::Collections::Generic::ICollection_1<TValue>* collection) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*, creationType>(collection)));
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Add(TValue item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_Generic_ICollection$TValue$_Add(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Add");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Clear()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_Generic_ICollection$TValue$_Clear() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Clear");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Contains(TValue item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TValue$_Contains(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Contains");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
      }
      // public System.Void CopyTo(TValue[] array, System.Int32 arrayIndex)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void CopyTo(::ArrayW<TValue> array, int arrayIndex) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::CopyTo");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_Count() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::get_Count");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.get_IsReadOnly()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TValue$_get_IsReadOnly() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.get_IsReadOnly");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Remove(TValue item)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_Generic_ICollection$TValue$_Remove(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Remove");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
      }
      // public System.Collections.Generic.IEnumerator`1<TValue> GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<TValue>* GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TValue>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.ICollection.CopyTo");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
      }
      // private System.Boolean System.Collections.ICollection.get_IsSynchronized()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool System_Collections_ICollection_get_IsSynchronized() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.ICollection.get_IsSynchronized");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.ICollection.get_SyncRoot()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::System.Collections.ICollection.get_SyncRoot");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadOnlyDictionary_2<TKey, TValue>::ValueCollection* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ValueCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*, creationType>()));
      }
    }; // System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection
    // Could not write size check! Type: System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Collections.Generic.IDictionary`2<TKey,TValue> m_dictionary
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IDictionary_2<TKey, TValue>* m_dictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<TKey, TValue>*) == 0x8);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection<TKey,TValue> _keys
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection* keys;
    // Field size check
    static_assert(sizeof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*) == 0x8);
    // private System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection<TKey,TValue> _values
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection* values;
    // Field size check
    static_assert(sizeof(typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IDictionary_2<TKey, TValue>
    operator ::System::Collections::Generic::IDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IDictionary
    operator ::System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<::System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>
    operator ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.IDictionary`2<TKey,TValue> m_dictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<TKey, TValue>*& dyn_m_dictionary() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::dyn_m_dictionary");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_dictionary"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Object _syncRoot
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::dyn__syncRoot");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection<TKey,TValue> _keys
    [[deprecated("Use field access instead!")]] typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*& dyn__keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::dyn__keys");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keys"))->offset;
      return *reinterpret_cast<typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection<TKey,TValue> _values
    [[deprecated("Use field access instead!")]] typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*& dyn__values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::dyn__values");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_values"))->offset;
      return *reinterpret_cast<typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadOnlyDictionary_2<TKey, TValue>* New_ctor(::System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadOnlyDictionary_2<TKey, TValue>*, creationType>(dictionary)));
    }
    // public System.Collections.ObjectModel.ReadOnlyDictionary`2/KeyCollection<TKey,TValue> get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection* get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::get_Keys");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::KeyCollection*, false>(this, ___internal__method);
    }
    // public System.Collections.ObjectModel.ReadOnlyDictionary`2/ValueCollection<TKey,TValue> get_Values()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection* get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::get_Values");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Values", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>::ValueCollection*, false>(this, ___internal__method);
    }
    // public System.Boolean ContainsKey(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsKey(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::ContainsKey");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.Generic.ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<TKey>* System_Collections_Generic_IDictionary$TKey_TValue$_get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<TKey>*, false>(this, ___internal__method);
    }
    // public System.Boolean TryGetValue(TKey key, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValue(TKey key, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::TryGetValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // private System.Collections.Generic.ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<TValue>* System_Collections_Generic_IDictionary$TKey_TValue$_get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.get_Values");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<TValue>*, false>(this, ___internal__method);
    }
    // public TValue get_Item(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue get_Item(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_IDictionary$TKey_TValue$_Add(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_IDictionary$TKey_TValue$_Remove(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue System_Collections_Generic_IDictionary$TKey_TValue$_get_Item(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_IDictionary$TKey_TValue$_set_Item(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Contains(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_CopyTo(::ArrayW<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Add(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Remove(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // static private System.Boolean IsCompatibleKey(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsCompatibleKey(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::IsCompatibleKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlyDictionary_2<TKey, TValue>*>::get(), "IsCompatibleKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, key);
    }
    // private System.Void System.Collections.IDictionary.Add(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_Add(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Void System.Collections.IDictionary.Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IDictionary.Contains(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IDictionary.get_IsFixedSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IDictionary_get_IsFixedSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.get_IsFixedSize");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IDictionary.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IDictionary_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Collections.ICollection System.Collections.IDictionary.get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::ICollection* System_Collections_IDictionary_get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.IDictionary.Remove(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_Remove(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
    }
    // private System.Collections.ICollection System.Collections.IDictionary.get_Values()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::ICollection* System_Collections_IDictionary_get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.get_Values");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IDictionary.get_Item(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.IDictionary.set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.ICollection.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Boolean System.Collections.ICollection.get_IsSynchronized()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_ICollection_get_IsSynchronized() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.ICollection.get_IsSynchronized");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.ICollection.get_SyncRoot");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<TKey>* System_Collections_Generic_IReadOnlyDictionary$TKey_TValue$_get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TKey>*, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<TValue>* System_Collections_Generic_IReadOnlyDictionary$TKey_TValue$_get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::ObjectModel::ReadOnlyDictionary_2::System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Collections::ObjectModel::ReadOnlyDictionary_2<TKey, TValue>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TValue>*, false>(this, ___internal__method);
    }
  }; // System.Collections.ObjectModel.ReadOnlyDictionary`2
  // Could not write size check! Type: System.Collections.ObjectModel.ReadOnlyDictionary`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
