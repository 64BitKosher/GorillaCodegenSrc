// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Entry because it is already included!
  // Skipping declaration: DefaultComparer`1 because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: LowLevelDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class LowLevelDictionary_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Generic::LowLevelDictionary_2, "System.Collections.Generic", "LowLevelDictionary`2");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.LowLevelDictionary`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  class LowLevelDictionary_2 : public ::Il2CppObject {
    public:
    // Nested type: ::System::Collections::Generic::LowLevelDictionary_2::Entry<TKey, TValue>
    class Entry;
    // Nested type: ::System::Collections::Generic::LowLevelDictionary_2::DefaultComparer_1<TKey, TValue, T>
    template<typename T>
    class DefaultComparer_1;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.LowLevelDictionary`2/Entry
    // [TokenAttribute] Offset: FFFFFFFF
    class Entry : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = LowLevelDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Entry";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public TKey _key
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey key;
      // public TValue _value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      // public System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue> _next
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry* next;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public TKey _key
      [[deprecated("Use field access instead!")]] TKey& dyn__key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Entry::dyn__key");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_key"))->offset;
        return *reinterpret_cast<TKey*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public TValue _value
      [[deprecated("Use field access instead!")]] TValue& dyn__value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Entry::dyn__value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue> _next
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*& dyn__next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Entry::dyn__next");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_next"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename LowLevelDictionary_2<TKey, TValue>::Entry* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Entry::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename LowLevelDictionary_2<TKey, TValue>::Entry*, creationType>()));
      }
    }; // System.Collections.Generic.LowLevelDictionary`2/Entry
    // Could not write size check! Type: System.Collections.Generic.LowLevelDictionary`2/Entry is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.LowLevelDictionary`2/DefaultComparer`1
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename T>
    class DefaultComparer_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEqualityComparer_1<T>*/ {
      public:
      using declaring_type = LowLevelDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "DefaultComparer`1";
      static constexpr bool IS_VALUE_TYPE = false;
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEqualityComparer_1<T>
      operator ::System::Collections::Generic::IEqualityComparer_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<T>*>(this);
      }
      // public System.Boolean Equals(T x, T y)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool Equals(T x, T y) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::DefaultComparer_1::Equals");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::DefaultComparer_1<T>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x, y);
      }
      // public System.Int32 GetHashCode(T obj)
      // Offset: 0xFFFFFFFFFFFFFFFF
      int GetHashCode(T obj) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::DefaultComparer_1::GetHashCode");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::DefaultComparer_1<T>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename LowLevelDictionary_2<TKey, TValue>::DefaultComparer_1<T>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::DefaultComparer_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename LowLevelDictionary_2<TKey, TValue>::DefaultComparer_1<T>*, creationType>()));
      }
    }; // System.Collections.Generic.LowLevelDictionary`2/DefaultComparer`1
    // Could not write size check! Type: System.Collections.Generic.LowLevelDictionary`2/DefaultComparer`1 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue>[] _buckets
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*> buckets;
    // Field size check
    static_assert(sizeof(::ArrayW<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*>) == 0x8);
    // private System.Int32 _numEntries
    // Size: 0x4
    // Offset: 0x0
    int numEntries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.IEqualityComparer`1<TKey> _comparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEqualityComparer_1<TKey>* comparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEqualityComparer_1<TKey>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue>[] _buckets
    [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*>& dyn__buckets() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::dyn__buckets");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buckets"))->offset;
      return *reinterpret_cast<::ArrayW<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _numEntries
    [[deprecated("Use field access instead!")]] int& dyn__numEntries() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::dyn__numEntries");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numEntries"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _version
    [[deprecated("Use field access instead!")]] int& dyn__version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::dyn__version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEqualityComparer`1<TKey> _comparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEqualityComparer_1<TKey>*& dyn__comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::dyn__comparer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 capacity, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LowLevelDictionary_2<TKey, TValue>* New_ctor(int capacity, ::System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LowLevelDictionary_2<TKey, TValue>*, creationType>(capacity, comparer)));
    }
    // public System.Void set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void Clear(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
    }
    // public System.Boolean Remove(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue> Find(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry* Find(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*, false>(this, ___internal__method, key);
    }
    // private System.Collections.Generic.LowLevelDictionary`2/Entry<TKey,TValue> UncheckedAdd(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry* UncheckedAdd(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::UncheckedAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UncheckedAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::LowLevelDictionary_2<TKey, TValue>::Entry*, false>(this, ___internal__method, key, value);
    }
    // private System.Void ExpandBuckets()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ExpandBuckets() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::ExpandBuckets");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExpandBuckets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Int32 GetBucket(TKey key, System.Int32 numBuckets)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetBucket(TKey key, int numBuckets) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::GetBucket");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBucket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(numBuckets)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key, numBuckets);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LowLevelDictionary_2<TKey, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LowLevelDictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LowLevelDictionary_2<TKey, TValue>*, creationType>()));
    }
  }; // System.Collections.Generic.LowLevelDictionary`2
  // Could not write size check! Type: System.Collections.Generic.LowLevelDictionary`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
