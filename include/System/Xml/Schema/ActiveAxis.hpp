// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: Asttree
  class Asttree;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: ActiveAxis
  class ActiveAxis;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::ActiveAxis);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::ActiveAxis*, "System.Xml.Schema", "ActiveAxis");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.ActiveAxis
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveAxis : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _currentDepth
    // Size: 0x4
    // Offset: 0x10
    int currentDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x14
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: axisTree
    char __padding1[0x3] = {};
    // private System.Xml.Schema.Asttree _axisTree
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::Asttree* axisTree;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::Asttree*) == 0x8);
    // private System.Collections.ArrayList _axisStack
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::ArrayList* axisStack;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _currentDepth
    [[deprecated("Use field access instead!")]] int& dyn__currentDepth();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private System.Xml.Schema.Asttree _axisTree
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::Asttree*& dyn__axisTree();
    // Get instance field reference: private System.Collections.ArrayList _axisStack
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__axisStack();
    // public System.Int32 get_CurrentDepth()
    // Offset: 0x4E70220
    int get_CurrentDepth();
    // System.Void Reactivate()
    // Offset: 0x4E70228
    void Reactivate();
    // System.Void .ctor(System.Xml.Schema.Asttree axisTree)
    // Offset: 0x4E7023C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveAxis* New_ctor(::System::Xml::Schema::Asttree* axisTree) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::ActiveAxis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveAxis*, creationType>(axisTree)));
    }
    // public System.Boolean MoveToStartElement(System.String localname, System.String URN)
    // Offset: 0x4E703FC
    bool MoveToStartElement(::StringW localname, ::StringW URN);
    // public System.Boolean EndElement(System.String localname, System.String URN)
    // Offset: 0x4E7053C
    bool EndElement(::StringW localname, ::StringW URN);
    // public System.Boolean MoveToAttribute(System.String localname, System.String URN)
    // Offset: 0x4E7064C
    bool MoveToAttribute(::StringW localname, ::StringW URN);
  }; // System.Xml.Schema.ActiveAxis
  #pragma pack(pop)
  static check_size<sizeof(ActiveAxis), 32 + sizeof(::System::Collections::ArrayList*)> __System_Xml_Schema_ActiveAxisSizeCheck;
  static_assert(sizeof(ActiveAxis) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::get_CurrentDepth
// Il2CppName: get_CurrentDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::ActiveAxis::*)()>(&System::Xml::Schema::ActiveAxis::get_CurrentDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ActiveAxis*), "get_CurrentDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::Reactivate
// Il2CppName: Reactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::ActiveAxis::*)()>(&System::Xml::Schema::ActiveAxis::Reactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ActiveAxis*), "Reactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::MoveToStartElement
// Il2CppName: MoveToStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ActiveAxis::*)(::StringW, ::StringW)>(&System::Xml::Schema::ActiveAxis::MoveToStartElement)> {
  static const MethodInfo* get() {
    static auto* localname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ActiveAxis*), "MoveToStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localname, URN});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::EndElement
// Il2CppName: EndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ActiveAxis::*)(::StringW, ::StringW)>(&System::Xml::Schema::ActiveAxis::EndElement)> {
  static const MethodInfo* get() {
    static auto* localname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ActiveAxis*), "EndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localname, URN});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ActiveAxis::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::ActiveAxis::*)(::StringW, ::StringW)>(&System::Xml::Schema::ActiveAxis::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* localname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* URN = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ActiveAxis*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localname, URN});
  }
};
