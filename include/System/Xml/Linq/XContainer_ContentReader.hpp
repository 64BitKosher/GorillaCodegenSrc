// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Linq.XContainer
#include "System/Xml/Linq/XContainer.hpp"
// Including type: System.Xml.Linq.NamespaceCache
#include "System/Xml/Linq/NamespaceCache.hpp"
// Including type: System.Xml.Linq.LoadOptions
#include "System/Xml/Linq/LoadOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IXmlLineInfo
  class IXmlLineInfo;
  // Forward declaring type: XmlReader
  class XmlReader;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Linq::XContainer::ContentReader);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::XContainer::ContentReader*, "System.Xml.Linq", "XContainer/ContentReader");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Linq.XContainer/ContentReader
  // [TokenAttribute] Offset: FFFFFFFF
  class XContainer::ContentReader : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Xml.Linq.NamespaceCache _eCache
    // Size: 0x10
    // Offset: 0x10
    ::System::Xml::Linq::NamespaceCache eCache;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::NamespaceCache) == 0x10);
    // private readonly System.Xml.Linq.NamespaceCache _aCache
    // Size: 0x10
    // Offset: 0x20
    ::System::Xml::Linq::NamespaceCache aCache;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::NamespaceCache) == 0x10);
    // private readonly System.Xml.IXmlLineInfo _lineInfo
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::IXmlLineInfo* lineInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IXmlLineInfo*) == 0x8);
    // private System.Xml.Linq.XContainer _currentContainer
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::Linq::XContainer* currentContainer;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XContainer*) == 0x8);
    // private System.String _baseUri
    // Size: 0x8
    // Offset: 0x40
    ::StringW baseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Xml.Linq.NamespaceCache _eCache
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::NamespaceCache& dyn__eCache();
    // Get instance field reference: private readonly System.Xml.Linq.NamespaceCache _aCache
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::NamespaceCache& dyn__aCache();
    // Get instance field reference: private readonly System.Xml.IXmlLineInfo _lineInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IXmlLineInfo*& dyn__lineInfo();
    // Get instance field reference: private System.Xml.Linq.XContainer _currentContainer
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XContainer*& dyn__currentContainer();
    // Get instance field reference: private System.String _baseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseUri();
    // public System.Void .ctor(System.Xml.Linq.XContainer rootContainer)
    // Offset: 0x4D19BCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XContainer::ContentReader* New_ctor(::System::Xml::Linq::XContainer* rootContainer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XContainer::ContentReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XContainer::ContentReader*, creationType>(rootContainer)));
    }
    // public System.Void .ctor(System.Xml.Linq.XContainer rootContainer, System.Xml.XmlReader r, System.Xml.Linq.LoadOptions o)
    // Offset: 0x4D1A2E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XContainer::ContentReader* New_ctor(::System::Xml::Linq::XContainer* rootContainer, ::System::Xml::XmlReader* r, ::System::Xml::Linq::LoadOptions o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XContainer::ContentReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XContainer::ContentReader*, creationType>(rootContainer, r, o)));
    }
    // public System.Boolean ReadContentFrom(System.Xml.Linq.XContainer rootContainer, System.Xml.XmlReader r)
    // Offset: 0x4D19BFC
    bool ReadContentFrom(::System::Xml::Linq::XContainer* rootContainer, ::System::Xml::XmlReader* r);
    // public System.Boolean ReadContentFrom(System.Xml.Linq.XContainer rootContainer, System.Xml.XmlReader r, System.Xml.Linq.LoadOptions o)
    // Offset: 0x4D1A3B0
    bool ReadContentFrom(::System::Xml::Linq::XContainer* rootContainer, ::System::Xml::XmlReader* r, ::System::Xml::Linq::LoadOptions o);
  }; // System.Xml.Linq.XContainer/ContentReader
  #pragma pack(pop)
  static check_size<sizeof(XContainer::ContentReader), 64 + sizeof(::StringW)> __System_Xml_Linq_XContainer_ContentReaderSizeCheck;
  static_assert(sizeof(XContainer::ContentReader) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::XContainer::ContentReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XContainer::ContentReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XContainer::ContentReader::ReadContentFrom
// Il2CppName: ReadContentFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XContainer::ContentReader::*)(::System::Xml::Linq::XContainer*, ::System::Xml::XmlReader*)>(&System::Xml::Linq::XContainer::ContentReader::ReadContentFrom)> {
  static const MethodInfo* get() {
    static auto* rootContainer = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XContainer")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XContainer::ContentReader*), "ReadContentFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootContainer, r});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XContainer::ContentReader::ReadContentFrom
// Il2CppName: ReadContentFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Linq::XContainer::ContentReader::*)(::System::Xml::Linq::XContainer*, ::System::Xml::XmlReader*, ::System::Xml::Linq::LoadOptions)>(&System::Xml::Linq::XContainer::ContentReader::ReadContentFrom)> {
  static const MethodInfo* get() {
    static auto* rootContainer = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XContainer")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "LoadOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XContainer::ContentReader*), "ReadContentFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootContainer, r, o});
  }
};
