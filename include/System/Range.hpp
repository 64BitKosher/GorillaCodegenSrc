// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Index
#include "System/Index.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Range
  struct Range;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Range, "System", "Range");
// Type namespace: System
namespace System {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Range
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct Range/*, public ::System::ValueType, public ::System::IEquatable_1<::System::Range>*/ {
    public:
    public:
    // private readonly System.Index <Start>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::System::Index Start;
    // Field size check
    static_assert(sizeof(::System::Index) == 0x4);
    // private readonly System.Index <End>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::System::Index End;
    // Field size check
    static_assert(sizeof(::System::Index) == 0x4);
    public:
    // Creating value type constructor for type: Range
    constexpr Range(::System::Index Start_ = {}, ::System::Index End_ = {}) noexcept : Start{Start_}, End{End_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::Range>
    operator ::System::IEquatable_1<::System::Range>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::Range>*>(this);
    }
    // Get instance field reference: private readonly System.Index <Start>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Index& dyn_$Start$k__BackingField();
    // Get instance field reference: private readonly System.Index <End>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Index& dyn_$End$k__BackingField();
    // public System.Index get_Start()
    // Offset: 0x466CC44
    ::System::Index get_Start();
    // public System.Index get_End()
    // Offset: 0x466CC4C
    ::System::Index get_End();
    // public System.Void .ctor(System.Index start, System.Index end)
    // Offset: 0x466CC54
    // ABORTED: conflicts with another method.  Range(::System::Index start, ::System::Index end);
    // public System.Boolean Equals(System.Range other)
    // Offset: 0x466CD04
    bool Equals(::System::Range other);
    // static public System.Range EndAt(System.Index end)
    // Offset: 0x466D0C0
    static ::System::Range EndAt(::System::Index end);
    // public System.ValueTuple`2<System.Int32,System.Int32> GetOffsetAndLength(System.Int32 length)
    // Offset: 0x466D0DC
    ::System::ValueTuple_2<int, int> GetOffsetAndLength(int length);
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x466CC5C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x466CD5C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x466CDD0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Range
  #pragma pack(pop)
  static check_size<sizeof(Range), 4 + sizeof(::System::Index)> __System_RangeSizeCheck;
  static_assert(sizeof(Range) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Range::get_Start
// Il2CppName: get_Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Index (System::Range::*)()>(&System::Range::get_Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Range), "get_Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Range::get_End
// Il2CppName: get_End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Index (System::Range::*)()>(&System::Range::get_End)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Range), "get_End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Range::Range
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Range::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Range::*)(::System::Range)>(&System::Range::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Range")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Range), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::Range::EndAt
// Il2CppName: EndAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Range (*)(::System::Index)>(&System::Range::EndAt)> {
  static const MethodInfo* get() {
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Index")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Range), "EndAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{end});
  }
};
// Writing MetadataGetter for method: System::Range::GetOffsetAndLength
// Il2CppName: GetOffsetAndLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<int, int> (System::Range::*)(int)>(&System::Range::GetOffsetAndLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Range), "GetOffsetAndLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: System::Range::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Range::*)(::Il2CppObject*)>(&System::Range::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Range), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Range::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Range::*)()>(&System::Range::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Range), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Range::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Range::*)()>(&System::Range::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Range), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
