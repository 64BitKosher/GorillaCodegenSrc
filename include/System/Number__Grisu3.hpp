// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Number
#include "System/Number_.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Double
#include "System/Double.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Number_::Grisu3);
DEFINE_IL2CPP_ARG_TYPE(::System::Number_::Grisu3*, "System", "Number/Grisu3");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Number/Grisu3
  // [TokenAttribute] Offset: FFFFFFFF
  class Number_::Grisu3 : public ::Il2CppObject {
    public:
    // static field const value: static private System.Int32 CachedPowersDecimalExponentDistance
    static constexpr const int CachedPowersDecimalExponentDistance = 8;
    // Get static field: static private System.Int32 CachedPowersDecimalExponentDistance
    static int _get_CachedPowersDecimalExponentDistance();
    // Set static field: static private System.Int32 CachedPowersDecimalExponentDistance
    static void _set_CachedPowersDecimalExponentDistance(int value);
    // static field const value: static private System.Int32 CachedPowersMinDecimalExponent
    static constexpr const int CachedPowersMinDecimalExponent = -348;
    // Get static field: static private System.Int32 CachedPowersMinDecimalExponent
    static int _get_CachedPowersMinDecimalExponent();
    // Set static field: static private System.Int32 CachedPowersMinDecimalExponent
    static void _set_CachedPowersMinDecimalExponent(int value);
    // static field const value: static private System.Int32 CachedPowersPowerMaxDecimalExponent
    static constexpr const int CachedPowersPowerMaxDecimalExponent = 340;
    // Get static field: static private System.Int32 CachedPowersPowerMaxDecimalExponent
    static int _get_CachedPowersPowerMaxDecimalExponent();
    // Set static field: static private System.Int32 CachedPowersPowerMaxDecimalExponent
    static void _set_CachedPowersPowerMaxDecimalExponent(int value);
    // static field const value: static private System.Int32 CachedPowersOffset
    static constexpr const int CachedPowersOffset = 348;
    // Get static field: static private System.Int32 CachedPowersOffset
    static int _get_CachedPowersOffset();
    // Set static field: static private System.Int32 CachedPowersOffset
    static void _set_CachedPowersOffset(int value);
    // static field const value: static private System.Double D1Log210
    static constexpr const double D1Log210 = 0.3010299956639812;
    // Get static field: static private System.Double D1Log210
    static double _get_D1Log210();
    // Set static field: static private System.Double D1Log210
    static void _set_D1Log210(double value);
    // static field const value: static private System.Int32 MaximalTargetExponent
    static constexpr const int MaximalTargetExponent = -32;
    // Get static field: static private System.Int32 MaximalTargetExponent
    static int _get_MaximalTargetExponent();
    // Set static field: static private System.Int32 MaximalTargetExponent
    static void _set_MaximalTargetExponent(int value);
    // static field const value: static private System.Int32 MinimalTargetExponent
    static constexpr const int MinimalTargetExponent = -60;
    // Get static field: static private System.Int32 MinimalTargetExponent
    static int _get_MinimalTargetExponent();
    // Set static field: static private System.Int32 MinimalTargetExponent
    static void _set_MinimalTargetExponent(int value);
    // Get static field: static private readonly System.Int16[] s_CachedPowersBinaryExponent
    static ::ArrayW<int16_t> _get_s_CachedPowersBinaryExponent();
    // Set static field: static private readonly System.Int16[] s_CachedPowersBinaryExponent
    static void _set_s_CachedPowersBinaryExponent(::ArrayW<int16_t> value);
    // Get static field: static private readonly System.Int16[] s_CachedPowersDecimalExponent
    static ::ArrayW<int16_t> _get_s_CachedPowersDecimalExponent();
    // Set static field: static private readonly System.Int16[] s_CachedPowersDecimalExponent
    static void _set_s_CachedPowersDecimalExponent(::ArrayW<int16_t> value);
    // Get static field: static private readonly System.UInt64[] s_CachedPowersSignificand
    static ::ArrayW<uint64_t> _get_s_CachedPowersSignificand();
    // Set static field: static private readonly System.UInt64[] s_CachedPowersSignificand
    static void _set_s_CachedPowersSignificand(::ArrayW<uint64_t> value);
    // Get static field: static private readonly System.UInt32[] s_SmallPowersOfTen
    static ::ArrayW<uint> _get_s_SmallPowersOfTen();
    // Set static field: static private readonly System.UInt32[] s_SmallPowersOfTen
    static void _set_s_SmallPowersOfTen(::ArrayW<uint> value);
    // static private System.Boolean IsNegative(System.Double d)
    // Offset: 0x575C7B0
    static bool IsNegative(double d);
    // static private System.Boolean IsNegativeInfinity(System.Single f)
    // Offset: 0x575C7BC
    static bool IsNegativeInfinity(float f);
    // static public System.Boolean TryRunDouble(System.Double value, System.Int32 requestedDigits, ref System.Number/NumberBuffer number)
    // Offset: 0x575C7D0
    static bool TryRunDouble(double value, int requestedDigits, ByRef<::System::Number_::NumberBuffer> number);
    // static public System.Boolean TryRunSingle(System.Single value, System.Int32 requestedDigits, ref System.Number/NumberBuffer number)
    // Offset: 0x575CB38
    static bool TryRunSingle(float value, int requestedDigits, ByRef<::System::Number_::NumberBuffer> number);
    // static private System.Boolean TryRunCounted(in System.Number/DiyFp w, System.Int32 requestedDigits, System.Span`1<System.Byte> buffer, out System.Int32 length, out System.Int32 decimalExponent)
    // Offset: 0x575CA5C
    static bool TryRunCounted(ByRef<::System::Number_::DiyFp> w, int requestedDigits, ::System::Span_1<uint8_t> buffer, ByRef<int> length, ByRef<int> decimalExponent);
    // static private System.Boolean TryRunShortest(in System.Number/DiyFp boundaryMinus, in System.Number/DiyFp w, in System.Number/DiyFp boundaryPlus, System.Span`1<System.Byte> buffer, out System.Int32 length, out System.Int32 decimalExponent)
    // Offset: 0x575C950
    static bool TryRunShortest(ByRef<::System::Number_::DiyFp> boundaryMinus, ByRef<::System::Number_::DiyFp> w, ByRef<::System::Number_::DiyFp> boundaryPlus, ::System::Span_1<uint8_t> buffer, ByRef<int> length, ByRef<int> decimalExponent);
    // static private System.UInt32 BiggestPowerTen(System.UInt32 number, System.Int32 numberBits, out System.Int32 exponentPlusOne)
    // Offset: 0x575D330
    static uint BiggestPowerTen(uint number, int numberBits, ByRef<int> exponentPlusOne);
    // static private System.Boolean TryDigitGenCounted(in System.Number/DiyFp w, System.Int32 requestedDigits, System.Span`1<System.Byte> buffer, out System.Int32 length, out System.Int32 kappa)
    // Offset: 0x575CDF0
    static bool TryDigitGenCounted(ByRef<::System::Number_::DiyFp> w, int requestedDigits, ::System::Span_1<uint8_t> buffer, ByRef<int> length, ByRef<int> kappa);
    // static private System.Boolean TryDigitGenShortest(in System.Number/DiyFp low, in System.Number/DiyFp w, in System.Number/DiyFp high, System.Span`1<System.Byte> buffer, out System.Int32 length, out System.Int32 kappa)
    // Offset: 0x575D0D0
    static bool TryDigitGenShortest(ByRef<::System::Number_::DiyFp> low, ByRef<::System::Number_::DiyFp> w, ByRef<::System::Number_::DiyFp> high, ::System::Span_1<uint8_t> buffer, ByRef<int> length, ByRef<int> kappa);
    // static private System.Number/DiyFp GetCachedPowerForBinaryExponentRange(System.Int32 minExponent, System.Int32 maxExponent, out System.Int32 decimalExponent)
    // Offset: 0x575CCB8
    static ::System::Number_::DiyFp GetCachedPowerForBinaryExponentRange(int minExponent, int maxExponent, ByRef<int> decimalExponent);
    // static private System.Boolean TryRoundWeedCounted(System.Span`1<System.Byte> buffer, System.Int32 length, System.UInt64 rest, System.UInt64 tenKappa, System.UInt64 unit, ref System.Int32 kappa)
    // Offset: 0x575D41C
    static bool TryRoundWeedCounted(::System::Span_1<uint8_t> buffer, int length, uint64_t rest, uint64_t tenKappa, uint64_t unit, ByRef<int> kappa);
    // static private System.Boolean TryRoundWeedShortest(System.Span`1<System.Byte> buffer, System.Int32 length, System.UInt64 distanceTooHighW, System.UInt64 unsafeInterval, System.UInt64 rest, System.UInt64 tenKappa, System.UInt64 unit)
    // Offset: 0x575D504
    static bool TryRoundWeedShortest(::System::Span_1<uint8_t> buffer, int length, uint64_t distanceTooHighW, uint64_t unsafeInterval, uint64_t rest, uint64_t tenKappa, uint64_t unit);
    // static private System.Void .cctor()
    // Offset: 0x575D5DC
    static void _cctor();
  }; // System.Number/Grisu3
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number_::Grisu3::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&System::Number_::Grisu3::IsNegative)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::IsNegativeInfinity
// Il2CppName: IsNegativeInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&System::Number_::Grisu3::IsNegativeInfinity)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "IsNegativeInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRunDouble
// Il2CppName: TryRunDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, int, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Grisu3::TryRunDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* requestedDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRunDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, requestedDigits, number});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRunSingle
// Il2CppName: TryRunSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, int, ByRef<::System::Number_::NumberBuffer>)>(&System::Number_::Grisu3::TryRunSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* requestedDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRunSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, requestedDigits, number});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRunCounted
// Il2CppName: TryRunCounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::DiyFp>, int, ::System::Span_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Number_::Grisu3::TryRunCounted)> {
  static const MethodInfo* get() {
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* requestedDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* decimalExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRunCounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{w, requestedDigits, buffer, length, decimalExponent});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRunShortest
// Il2CppName: TryRunShortest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>, ::System::Span_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Number_::Grisu3::TryRunShortest)> {
  static const MethodInfo* get() {
    static auto* boundaryMinus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* boundaryPlus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* decimalExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRunShortest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryMinus, w, boundaryPlus, buffer, length, decimalExponent});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::BiggestPowerTen
// Il2CppName: BiggestPowerTen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int, ByRef<int>)>(&System::Number_::Grisu3::BiggestPowerTen)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* numberBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* exponentPlusOne = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "BiggestPowerTen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, numberBits, exponentPlusOne});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryDigitGenCounted
// Il2CppName: TryDigitGenCounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::DiyFp>, int, ::System::Span_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Number_::Grisu3::TryDigitGenCounted)> {
  static const MethodInfo* get() {
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* requestedDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* kappa = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryDigitGenCounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{w, requestedDigits, buffer, length, kappa});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryDigitGenShortest
// Il2CppName: TryDigitGenShortest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>, ::System::Span_1<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Number_::Grisu3::TryDigitGenShortest)> {
  static const MethodInfo* get() {
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* high = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* kappa = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryDigitGenShortest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{low, w, high, buffer, length, kappa});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::GetCachedPowerForBinaryExponentRange
// Il2CppName: GetCachedPowerForBinaryExponentRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (*)(int, int, ByRef<int>)>(&System::Number_::Grisu3::GetCachedPowerForBinaryExponentRange)> {
  static const MethodInfo* get() {
    static auto* minExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* decimalExponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "GetCachedPowerForBinaryExponentRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minExponent, maxExponent, decimalExponent});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRoundWeedCounted
// Il2CppName: TryRoundWeedCounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Span_1<uint8_t>, int, uint64_t, uint64_t, uint64_t, ByRef<int>)>(&System::Number_::Grisu3::TryRoundWeedCounted)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rest = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* tenKappa = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unit = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* kappa = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRoundWeedCounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length, rest, tenKappa, unit, kappa});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::TryRoundWeedShortest
// Il2CppName: TryRoundWeedShortest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Span_1<uint8_t>, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)>(&System::Number_::Grisu3::TryRoundWeedShortest)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* distanceTooHighW = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unsafeInterval = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* rest = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* tenKappa = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* unit = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), "TryRoundWeedShortest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length, distanceTooHighW, unsafeInterval, rest, tenKappa, unit});
  }
};
// Writing MetadataGetter for method: System::Number_::Grisu3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Number_::Grisu3::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::Grisu3*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
