// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.TimeSpanParse
#include "System/Globalization/TimeSpanParse.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::TimeSpanParse::StringParser, "System.Globalization", "TimeSpanParse/StringParser");
// Type namespace: System.Globalization
namespace System::Globalization {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.TimeSpanParse/StringParser
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct TimeSpanParse::StringParser/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.ReadOnlySpan`1<System.Char> _str
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ReadOnlySpan_1<::Il2CppChar> str;
    // private System.Char _ch
    // Size: 0x2
    // Offset: 0x10
    ::Il2CppChar ch;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // private System.Int32 _pos
    // Size: 0x4
    // Offset: 0x14
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _len
    // Size: 0x4
    // Offset: 0x18
    int len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StringParser
    constexpr StringParser(::System::ReadOnlySpan_1<::Il2CppChar> str_ = {}, ::Il2CppChar ch_ = {}, int pos_ = {}, int len_ = {}) noexcept : str{str_}, ch{ch_}, pos{pos_}, len{len_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> _str
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn__str();
    // Get instance field reference: private System.Char _ch
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__ch();
    // Get instance field reference: private System.Int32 _pos
    [[deprecated("Use field access instead!")]] int& dyn__pos();
    // Get instance field reference: private System.Int32 _len
    [[deprecated("Use field access instead!")]] int& dyn__len();
    // System.Void NextChar()
    // Offset: 0x45F846C
    void NextChar();
    // System.Char NextNonDigit()
    // Offset: 0x45F84B8
    ::Il2CppChar NextNonDigit();
    // System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> input, ref System.Globalization.TimeSpanParse/TimeSpanResult result)
    // Offset: 0x45F8514
    bool TryParse(::System::ReadOnlySpan_1<::Il2CppChar> input, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult> result);
    // System.Boolean ParseInt(System.Int32 max, out System.Int32 i, ref System.Globalization.TimeSpanParse/TimeSpanResult result)
    // Offset: 0x45F88D8
    bool ParseInt(int max, ByRef<int> i, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult> result);
    // System.Boolean ParseTime(out System.Int64 time, ref System.Globalization.TimeSpanParse/TimeSpanResult result)
    // Offset: 0x45F8718
    bool ParseTime(ByRef<int64_t> time, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult> result);
    // System.Void SkipBlanks()
    // Offset: 0x45F86E8
    void SkipBlanks();
  }; // System.Globalization.TimeSpanParse/StringParser
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::NextChar
// Il2CppName: NextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TimeSpanParse::StringParser::*)()>(&System::Globalization::TimeSpanParse::StringParser::NextChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "NextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::NextNonDigit
// Il2CppName: NextNonDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TimeSpanParse::StringParser::*)()>(&System::Globalization::TimeSpanParse::StringParser::NextNonDigit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "NextNonDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TimeSpanParse::StringParser::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult>)>(&System::Globalization::TimeSpanParse::StringParser::TryParse)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Globalization", "TimeSpanParse/TimeSpanResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, result});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::ParseInt
// Il2CppName: ParseInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TimeSpanParse::StringParser::*)(int, ByRef<int>, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult>)>(&System::Globalization::TimeSpanParse::StringParser::ParseInt)> {
  static const MethodInfo* get() {
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Globalization", "TimeSpanParse/TimeSpanResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "ParseInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{max, i, result});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::ParseTime
// Il2CppName: ParseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TimeSpanParse::StringParser::*)(ByRef<int64_t>, ByRef<::System::Globalization::TimeSpanParse::TimeSpanResult>)>(&System::Globalization::TimeSpanParse::StringParser::ParseTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Globalization", "TimeSpanParse/TimeSpanResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "ParseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, result});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::StringParser::SkipBlanks
// Il2CppName: SkipBlanks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TimeSpanParse::StringParser::*)()>(&System::Globalization::TimeSpanParse::StringParser::SkipBlanks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::StringParser), "SkipBlanks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
