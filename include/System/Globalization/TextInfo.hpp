// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
  // Forward declaring type: UnicodeCategory
  struct UnicodeCategory;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Forward declaring type: TextInfo
  class TextInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Globalization::TextInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::TextInfo*, "System.Globalization", "TextInfo");
// Type namespace: System.Globalization
namespace System::Globalization {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Globalization.TextInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  class TextInfo : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    public:
    // private System.String m_listSeparator
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_listSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x18
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String m_cultureName
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_cultureName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Globalization.CultureData m_cultureData
    // Size: 0x8
    // Offset: 0x28
    ::System::Globalization::CultureData* m_cultureData;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureData*) == 0x8);
    // private System.String m_textInfoName
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_textInfoName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Nullable`1<System.Boolean> m_IsAsciiCasingSameAsInvariant
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::System::Nullable_1<bool> m_IsAsciiCasingSameAsInvariant;
    // private System.String customCultureName
    // Size: 0x8
    // Offset: 0x40
    ::StringW customCultureName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Int32 m_nDataItem
    // Size: 0x4
    // Offset: 0x48
    int m_nDataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0x4C
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Int32 m_win32LangID
    // Size: 0x4
    // Offset: 0x50
    int m_win32LangID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Get static field: static System.Globalization.TextInfo s_Invariant
    static ::System::Globalization::TextInfo* _get_s_Invariant();
    // Set static field: static System.Globalization.TextInfo s_Invariant
    static void _set_s_Invariant(::System::Globalization::TextInfo* value);
    // static field const value: static private System.Int32 wordSeparatorMask
    static constexpr const int wordSeparatorMask = 536672256;
    // Get static field: static private System.Int32 wordSeparatorMask
    static int _get_wordSeparatorMask();
    // Set static field: static private System.Int32 wordSeparatorMask
    static void _set_wordSeparatorMask(int value);
    // Get instance field reference: private System.String m_listSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_listSeparator();
    // Get instance field reference: private System.Boolean m_isReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_isReadOnly();
    // Get instance field reference: private System.String m_cultureName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_cultureName();
    // Get instance field reference: private System.Globalization.CultureData m_cultureData
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureData*& dyn_m_cultureData();
    // Get instance field reference: private System.String m_textInfoName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_textInfoName();
    // Get instance field reference: private System.Nullable`1<System.Boolean> m_IsAsciiCasingSameAsInvariant
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn_m_IsAsciiCasingSameAsInvariant();
    // Get instance field reference: private System.String customCultureName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_customCultureName();
    // Get instance field reference: System.Int32 m_nDataItem
    [[deprecated("Use field access instead!")]] int& dyn_m_nDataItem();
    // Get instance field reference: System.Boolean m_useUserOverride
    [[deprecated("Use field access instead!")]] bool& dyn_m_useUserOverride();
    // Get instance field reference: System.Int32 m_win32LangID
    [[deprecated("Use field access instead!")]] int& dyn_m_win32LangID();
    // static System.Globalization.TextInfo get_Invariant()
    // Offset: 0x4602418
    static ::System::Globalization::TextInfo* get_Invariant();
    // System.Void .ctor(System.Globalization.CultureData cultureData)
    // Offset: 0x4602888
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextInfo* New_ctor(::System::Globalization::CultureData* cultureData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::TextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextInfo*, creationType>(cultureData)));
    }
    // private System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x46028F4
    void OnDeserializing(::System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnDeserialized()
    // Offset: 0x460291C
    void OnDeserialized();
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x4602A44
    void OnDeserialized(::System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x4602A48
    void OnSerializing(::System::Runtime::Serialization::StreamingContext ctx);
    // public System.String get_CultureName()
    // Offset: 0x4602AD4
    ::StringW get_CultureName();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x4602ADC
    bool get_IsReadOnly();
    // public System.Object Clone()
    // Offset: 0x4602AE4
    ::Il2CppObject* Clone();
    // static public System.Globalization.TextInfo ReadOnly(System.Globalization.TextInfo textInfo)
    // Offset: 0x4602B6C
    static ::System::Globalization::TextInfo* ReadOnly(::System::Globalization::TextInfo* textInfo);
    // System.Void SetReadOnlyState(System.Boolean readOnly)
    // Offset: 0x4602C58
    void SetReadOnlyState(bool readOnly);
    // public System.Char ToLower(System.Char c)
    // Offset: 0x4602C64
    ::Il2CppChar ToLower(::Il2CppChar c);
    // public System.String ToLower(System.String str)
    // Offset: 0x4603270
    ::StringW ToLower(::StringW str);
    // static private System.Char ToLowerAsciiInvariant(System.Char c)
    // Offset: 0x4602DD4
    static ::Il2CppChar ToLowerAsciiInvariant(::Il2CppChar c);
    // public System.Char ToUpper(System.Char c)
    // Offset: 0x46033A8
    ::Il2CppChar ToUpper(::Il2CppChar c);
    // public System.String ToUpper(System.String str)
    // Offset: 0x46038B4
    ::StringW ToUpper(::StringW str);
    // static System.Char ToUpperAsciiInvariant(System.Char c)
    // Offset: 0x4603404
    static ::Il2CppChar ToUpperAsciiInvariant(::Il2CppChar c);
    // static private System.Boolean IsAscii(System.Char c)
    // Offset: 0x4602CC0
    static bool IsAscii(::Il2CppChar c);
    // private System.Boolean get_IsAsciiCasingSameAsInvariant()
    // Offset: 0x4602CD0
    bool get_IsAsciiCasingSameAsInvariant();
    // public System.String ToTitleCase(System.String str)
    // Offset: 0x4603B04
    ::StringW ToTitleCase(::StringW str);
    // static private System.Int32 AddNonLetter(ref System.Text.StringBuilder result, ref System.String input, System.Int32 inputIndex, System.Int32 charLen)
    // Offset: 0x4603FAC
    static int AddNonLetter(ByRef<::System::Text::StringBuilder*> result, ByRef<::StringW> input, int inputIndex, int charLen);
    // private System.Int32 AddTitlecaseLetter(ref System.Text.StringBuilder result, ref System.String input, System.Int32 inputIndex, System.Int32 charLen)
    // Offset: 0x4603E38
    int AddTitlecaseLetter(ByRef<::System::Text::StringBuilder*> result, ByRef<::StringW> input, int inputIndex, int charLen);
    // static private System.Boolean IsWordSeparator(System.Globalization.UnicodeCategory category)
    // Offset: 0x4603F90
    static bool IsWordSeparator(::System::Globalization::UnicodeCategory category);
    // static private System.Boolean IsLetterCategory(System.Globalization.UnicodeCategory uc)
    // Offset: 0x4603F84
    static bool IsLetterCategory(::System::Globalization::UnicodeCategory uc);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x4604048
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // private System.String ToUpperInternal(System.String str)
    // Offset: 0x4603908
    ::StringW ToUpperInternal(::StringW str);
    // private System.String ToLowerInternal(System.String str)
    // Offset: 0x46032C4
    ::StringW ToLowerInternal(::StringW str);
    // private System.Char ToUpperInternal(System.Char c)
    // Offset: 0x460341C
    ::Il2CppChar ToUpperInternal(::Il2CppChar c);
    // private System.Char ToLowerInternal(System.Char c)
    // Offset: 0x4602DEC
    ::Il2CppChar ToLowerInternal(::Il2CppChar c);
    // System.Void ToUpperAsciiInvariant(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination)
    // Offset: 0x460404C
    void ToUpperAsciiInvariant(::System::ReadOnlySpan_1<::Il2CppChar> source, ::System::Span_1<::Il2CppChar> destination);
    // System.Void ChangeCase(System.ReadOnlySpan`1<System.Char> source, System.Span`1<System.Char> destination, System.Boolean toUpper)
    // Offset: 0x46040D4
    void ChangeCase(::System::ReadOnlySpan_1<::Il2CppChar> source, ::System::Span_1<::Il2CppChar> destination, bool toUpper);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x46039EC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4603A8C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x4603AAC
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // System.Void .ctor()
    // Offset: 0x4604214
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::TextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextInfo*, creationType>()));
    }
  }; // System.Globalization.TextInfo
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_Invariant
// Il2CppName: get_Invariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::TextInfo* (*)()>(&System::Globalization::TextInfo::get_Invariant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "get_Invariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserializing
// Il2CppName: OnDeserializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::TextInfo::OnDeserializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "OnDeserializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserialized
// Il2CppName: OnDeserialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::OnDeserialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "OnDeserialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserialized
// Il2CppName: OnDeserialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::TextInfo::OnDeserialized)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "OnDeserialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnSerializing
// Il2CppName: OnSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::TextInfo::OnSerializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "OnSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_CultureName
// Il2CppName: get_CultureName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::get_CultureName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "get_CultureName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ReadOnly
// Il2CppName: ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::TextInfo* (*)(::System::Globalization::TextInfo*)>(&System::Globalization::TextInfo::ReadOnly)> {
  static const MethodInfo* get() {
    static auto* textInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "TextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textInfo});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::SetReadOnlyState
// Il2CppName: SetReadOnlyState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(bool)>(&System::Globalization::TextInfo::SetReadOnlyState)> {
  static const MethodInfo* get() {
    static auto* readOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "SetReadOnlyState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readOnly});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TextInfo::*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToLower)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)(::StringW)>(&System::Globalization::TextInfo::ToLower)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerAsciiInvariant
// Il2CppName: ToLowerAsciiInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToLowerAsciiInvariant)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToLowerAsciiInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TextInfo::*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToUpper)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)(::StringW)>(&System::Globalization::TextInfo::ToUpper)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperAsciiInvariant
// Il2CppName: ToUpperAsciiInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToUpperAsciiInvariant)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpperAsciiInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::IsAscii
// Il2CppName: IsAscii
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Globalization::TextInfo::IsAscii)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_IsAsciiCasingSameAsInvariant
// Il2CppName: get_IsAsciiCasingSameAsInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::get_IsAsciiCasingSameAsInvariant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "get_IsAsciiCasingSameAsInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToTitleCase
// Il2CppName: ToTitleCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)(::StringW)>(&System::Globalization::TextInfo::ToTitleCase)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToTitleCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::AddNonLetter
// Il2CppName: AddNonLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Text::StringBuilder*>, ByRef<::StringW>, int, int)>(&System::Globalization::TextInfo::AddNonLetter)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "AddNonLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, input, inputIndex, charLen});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::AddTitlecaseLetter
// Il2CppName: AddTitlecaseLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::TextInfo::*)(ByRef<::System::Text::StringBuilder*>, ByRef<::StringW>, int, int)>(&System::Globalization::TextInfo::AddTitlecaseLetter)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "AddTitlecaseLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, input, inputIndex, charLen});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::IsWordSeparator
// Il2CppName: IsWordSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Globalization::TextInfo::IsWordSeparator)> {
  static const MethodInfo* get() {
    static auto* category = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "IsWordSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{category});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::IsLetterCategory
// Il2CppName: IsLetterCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Globalization::TextInfo::IsLetterCategory)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "IsLetterCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::Il2CppObject*)>(&System::Globalization::TextInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperInternal
// Il2CppName: ToUpperInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)(::StringW)>(&System::Globalization::TextInfo::ToUpperInternal)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpperInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerInternal
// Il2CppName: ToLowerInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)(::StringW)>(&System::Globalization::TextInfo::ToLowerInternal)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToLowerInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperInternal
// Il2CppName: ToUpperInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TextInfo::*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToUpperInternal)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpperInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerInternal
// Il2CppName: ToLowerInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TextInfo::*)(::Il2CppChar)>(&System::Globalization::TextInfo::ToLowerInternal)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToLowerInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperAsciiInvariant
// Il2CppName: ToUpperAsciiInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Span_1<::Il2CppChar>)>(&System::Globalization::TextInfo::ToUpperAsciiInvariant)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToUpperAsciiInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ChangeCase
// Il2CppName: ChangeCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TextInfo::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Span_1<::Il2CppChar>, bool)>(&System::Globalization::TextInfo::ChangeCase)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* toUpper = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ChangeCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, toUpper});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TextInfo::*)(::Il2CppObject*)>(&System::Globalization::TextInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::TextInfo::*)()>(&System::Globalization::TextInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TextInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
