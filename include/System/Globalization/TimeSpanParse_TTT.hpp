// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.TimeSpanParse
#include "System/Globalization/TimeSpanParse.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::TimeSpanParse::TTT, "System.Globalization", "TimeSpanParse/TTT");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.TimeSpanParse/TTT
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimeSpanParse::TTT/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: TTT
    constexpr TTT(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public System.Globalization.TimeSpanParse/TTT None
    static constexpr const uint8_t None = 0u;
    // Get static field: static public System.Globalization.TimeSpanParse/TTT None
    static ::System::Globalization::TimeSpanParse::TTT _get_None();
    // Set static field: static public System.Globalization.TimeSpanParse/TTT None
    static void _set_None(::System::Globalization::TimeSpanParse::TTT value);
    // static field const value: static public System.Globalization.TimeSpanParse/TTT End
    static constexpr const uint8_t End = 1u;
    // Get static field: static public System.Globalization.TimeSpanParse/TTT End
    static ::System::Globalization::TimeSpanParse::TTT _get_End();
    // Set static field: static public System.Globalization.TimeSpanParse/TTT End
    static void _set_End(::System::Globalization::TimeSpanParse::TTT value);
    // static field const value: static public System.Globalization.TimeSpanParse/TTT Num
    static constexpr const uint8_t Num = 2u;
    // Get static field: static public System.Globalization.TimeSpanParse/TTT Num
    static ::System::Globalization::TimeSpanParse::TTT _get_Num();
    // Set static field: static public System.Globalization.TimeSpanParse/TTT Num
    static void _set_Num(::System::Globalization::TimeSpanParse::TTT value);
    // static field const value: static public System.Globalization.TimeSpanParse/TTT Sep
    static constexpr const uint8_t Sep = 3u;
    // Get static field: static public System.Globalization.TimeSpanParse/TTT Sep
    static ::System::Globalization::TimeSpanParse::TTT _get_Sep();
    // Set static field: static public System.Globalization.TimeSpanParse/TTT Sep
    static void _set_Sep(::System::Globalization::TimeSpanParse::TTT value);
    // static field const value: static public System.Globalization.TimeSpanParse/TTT NumOverflow
    static constexpr const uint8_t NumOverflow = 4u;
    // Get static field: static public System.Globalization.TimeSpanParse/TTT NumOverflow
    static ::System::Globalization::TimeSpanParse::TTT _get_NumOverflow();
    // Set static field: static public System.Globalization.TimeSpanParse/TTT NumOverflow
    static void _set_NumOverflow(::System::Globalization::TimeSpanParse::TTT value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // System.Globalization.TimeSpanParse/TTT
  #pragma pack(pop)
  static check_size<sizeof(TimeSpanParse::TTT), 0 + sizeof(uint8_t)> __System_Globalization_TimeSpanParse_TTTSizeCheck;
  static_assert(sizeof(TimeSpanParse::TTT) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
