// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.CultureData
#include "System/Globalization/CultureData.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::CultureData::NumberFormatEntryManaged, "System.Globalization", "CultureData/NumberFormatEntryManaged");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x5C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.CultureData/NumberFormatEntryManaged
  // [TokenAttribute] Offset: FFFFFFFF
  struct CultureData::NumberFormatEntryManaged/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Int32 currency_decimal_digits
    // Size: 0x4
    // Offset: 0x0
    int currency_decimal_digits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_decimal_separator
    // Size: 0x4
    // Offset: 0x4
    int currency_decimal_separator;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_group_separator
    // Size: 0x4
    // Offset: 0x8
    int currency_group_separator;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_group_sizes0
    // Size: 0x4
    // Offset: 0xC
    int currency_group_sizes0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_group_sizes1
    // Size: 0x4
    // Offset: 0x10
    int currency_group_sizes1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_negative_pattern
    // Size: 0x4
    // Offset: 0x14
    int currency_negative_pattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_positive_pattern
    // Size: 0x4
    // Offset: 0x18
    int currency_positive_pattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currency_symbol
    // Size: 0x4
    // Offset: 0x1C
    int currency_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 nan_symbol
    // Size: 0x4
    // Offset: 0x20
    int nan_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 negative_infinity_symbol
    // Size: 0x4
    // Offset: 0x24
    int negative_infinity_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 negative_sign
    // Size: 0x4
    // Offset: 0x28
    int negative_sign;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_decimal_digits
    // Size: 0x4
    // Offset: 0x2C
    int number_decimal_digits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_decimal_separator
    // Size: 0x4
    // Offset: 0x30
    int number_decimal_separator;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_group_separator
    // Size: 0x4
    // Offset: 0x34
    int number_group_separator;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_group_sizes0
    // Size: 0x4
    // Offset: 0x38
    int number_group_sizes0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_group_sizes1
    // Size: 0x4
    // Offset: 0x3C
    int number_group_sizes1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 number_negative_pattern
    // Size: 0x4
    // Offset: 0x40
    int number_negative_pattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 per_mille_symbol
    // Size: 0x4
    // Offset: 0x44
    int per_mille_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percent_negative_pattern
    // Size: 0x4
    // Offset: 0x48
    int percent_negative_pattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percent_positive_pattern
    // Size: 0x4
    // Offset: 0x4C
    int percent_positive_pattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percent_symbol
    // Size: 0x4
    // Offset: 0x50
    int percent_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 positive_infinity_symbol
    // Size: 0x4
    // Offset: 0x54
    int positive_infinity_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 positive_sign
    // Size: 0x4
    // Offset: 0x58
    int positive_sign;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: NumberFormatEntryManaged
    constexpr NumberFormatEntryManaged(int currency_decimal_digits_ = {}, int currency_decimal_separator_ = {}, int currency_group_separator_ = {}, int currency_group_sizes0_ = {}, int currency_group_sizes1_ = {}, int currency_negative_pattern_ = {}, int currency_positive_pattern_ = {}, int currency_symbol_ = {}, int nan_symbol_ = {}, int negative_infinity_symbol_ = {}, int negative_sign_ = {}, int number_decimal_digits_ = {}, int number_decimal_separator_ = {}, int number_group_separator_ = {}, int number_group_sizes0_ = {}, int number_group_sizes1_ = {}, int number_negative_pattern_ = {}, int per_mille_symbol_ = {}, int percent_negative_pattern_ = {}, int percent_positive_pattern_ = {}, int percent_symbol_ = {}, int positive_infinity_symbol_ = {}, int positive_sign_ = {}) noexcept : currency_decimal_digits{currency_decimal_digits_}, currency_decimal_separator{currency_decimal_separator_}, currency_group_separator{currency_group_separator_}, currency_group_sizes0{currency_group_sizes0_}, currency_group_sizes1{currency_group_sizes1_}, currency_negative_pattern{currency_negative_pattern_}, currency_positive_pattern{currency_positive_pattern_}, currency_symbol{currency_symbol_}, nan_symbol{nan_symbol_}, negative_infinity_symbol{negative_infinity_symbol_}, negative_sign{negative_sign_}, number_decimal_digits{number_decimal_digits_}, number_decimal_separator{number_decimal_separator_}, number_group_separator{number_group_separator_}, number_group_sizes0{number_group_sizes0_}, number_group_sizes1{number_group_sizes1_}, number_negative_pattern{number_negative_pattern_}, per_mille_symbol{per_mille_symbol_}, percent_negative_pattern{percent_negative_pattern_}, percent_positive_pattern{percent_positive_pattern_}, percent_symbol{percent_symbol_}, positive_infinity_symbol{positive_infinity_symbol_}, positive_sign{positive_sign_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Int32 currency_decimal_digits
    [[deprecated("Use field access instead!")]] int& dyn_currency_decimal_digits();
    // Get instance field reference: System.Int32 currency_decimal_separator
    [[deprecated("Use field access instead!")]] int& dyn_currency_decimal_separator();
    // Get instance field reference: System.Int32 currency_group_separator
    [[deprecated("Use field access instead!")]] int& dyn_currency_group_separator();
    // Get instance field reference: System.Int32 currency_group_sizes0
    [[deprecated("Use field access instead!")]] int& dyn_currency_group_sizes0();
    // Get instance field reference: System.Int32 currency_group_sizes1
    [[deprecated("Use field access instead!")]] int& dyn_currency_group_sizes1();
    // Get instance field reference: System.Int32 currency_negative_pattern
    [[deprecated("Use field access instead!")]] int& dyn_currency_negative_pattern();
    // Get instance field reference: System.Int32 currency_positive_pattern
    [[deprecated("Use field access instead!")]] int& dyn_currency_positive_pattern();
    // Get instance field reference: System.Int32 currency_symbol
    [[deprecated("Use field access instead!")]] int& dyn_currency_symbol();
    // Get instance field reference: System.Int32 nan_symbol
    [[deprecated("Use field access instead!")]] int& dyn_nan_symbol();
    // Get instance field reference: System.Int32 negative_infinity_symbol
    [[deprecated("Use field access instead!")]] int& dyn_negative_infinity_symbol();
    // Get instance field reference: System.Int32 negative_sign
    [[deprecated("Use field access instead!")]] int& dyn_negative_sign();
    // Get instance field reference: System.Int32 number_decimal_digits
    [[deprecated("Use field access instead!")]] int& dyn_number_decimal_digits();
    // Get instance field reference: System.Int32 number_decimal_separator
    [[deprecated("Use field access instead!")]] int& dyn_number_decimal_separator();
    // Get instance field reference: System.Int32 number_group_separator
    [[deprecated("Use field access instead!")]] int& dyn_number_group_separator();
    // Get instance field reference: System.Int32 number_group_sizes0
    [[deprecated("Use field access instead!")]] int& dyn_number_group_sizes0();
    // Get instance field reference: System.Int32 number_group_sizes1
    [[deprecated("Use field access instead!")]] int& dyn_number_group_sizes1();
    // Get instance field reference: System.Int32 number_negative_pattern
    [[deprecated("Use field access instead!")]] int& dyn_number_negative_pattern();
    // Get instance field reference: System.Int32 per_mille_symbol
    [[deprecated("Use field access instead!")]] int& dyn_per_mille_symbol();
    // Get instance field reference: System.Int32 percent_negative_pattern
    [[deprecated("Use field access instead!")]] int& dyn_percent_negative_pattern();
    // Get instance field reference: System.Int32 percent_positive_pattern
    [[deprecated("Use field access instead!")]] int& dyn_percent_positive_pattern();
    // Get instance field reference: System.Int32 percent_symbol
    [[deprecated("Use field access instead!")]] int& dyn_percent_symbol();
    // Get instance field reference: System.Int32 positive_infinity_symbol
    [[deprecated("Use field access instead!")]] int& dyn_positive_infinity_symbol();
    // Get instance field reference: System.Int32 positive_sign
    [[deprecated("Use field access instead!")]] int& dyn_positive_sign();
  }; // System.Globalization.CultureData/NumberFormatEntryManaged
  #pragma pack(pop)
  static check_size<sizeof(CultureData::NumberFormatEntryManaged), 88 + sizeof(int)> __System_Globalization_CultureData_NumberFormatEntryManagedSizeCheck;
  static_assert(sizeof(CultureData::NumberFormatEntryManaged) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
