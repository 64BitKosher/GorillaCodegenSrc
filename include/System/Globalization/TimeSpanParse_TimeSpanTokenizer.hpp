// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.TimeSpanParse
#include "System/Globalization/TimeSpanParse.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::TimeSpanParse::TimeSpanTokenizer, "System.Globalization", "TimeSpanParse/TimeSpanTokenizer");
// Type namespace: System.Globalization
namespace System::Globalization {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.TimeSpanParse/TimeSpanTokenizer
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  struct TimeSpanParse::TimeSpanTokenizer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.ReadOnlySpan`1<System.Char> _value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ReadOnlySpan_1<::Il2CppChar> value;
    // private System.Int32 _pos
    // Size: 0x4
    // Offset: 0x10
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TimeSpanTokenizer
    constexpr TimeSpanTokenizer(::System::ReadOnlySpan_1<::Il2CppChar> value_ = {}, int pos_ = {}) noexcept : value{value_}, pos{pos_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> _value
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn__value();
    // Get instance field reference: private System.Int32 _pos
    [[deprecated("Use field access instead!")]] int& dyn__pos();
    // System.Void .ctor(System.ReadOnlySpan`1<System.Char> input)
    // Offset: 0x45F2E34
    TimeSpanTokenizer(::System::ReadOnlySpan_1<::Il2CppChar> input);
    // System.Void .ctor(System.ReadOnlySpan`1<System.Char> input, System.Int32 startPosition)
    // Offset: 0x45F7B5C
    // ABORTED: conflicts with another method.  TimeSpanTokenizer(::System::ReadOnlySpan_1<::Il2CppChar> input, int startPosition);
    // System.Globalization.TimeSpanParse/TimeSpanToken GetNextToken()
    // Offset: 0x45F2E8C
    ::System::Globalization::TimeSpanParse::TimeSpanToken GetNextToken();
    // System.Boolean get_EOL()
    // Offset: 0x45F7D50
    bool get_EOL();
    // System.Void BackOne()
    // Offset: 0x45F7DB0
    void BackOne();
    // System.Char get_NextChar()
    // Offset: 0x45F7CF0
    ::Il2CppChar get_NextChar();
  }; // System.Globalization.TimeSpanParse/TimeSpanTokenizer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::TimeSpanTokenizer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::TimeSpanTokenizer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::GetNextToken
// Il2CppName: GetNextToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::TimeSpanParse::TimeSpanToken (System::Globalization::TimeSpanParse::TimeSpanTokenizer::*)()>(&System::Globalization::TimeSpanParse::TimeSpanTokenizer::GetNextToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::TimeSpanTokenizer), "GetNextToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::get_EOL
// Il2CppName: get_EOL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::TimeSpanParse::TimeSpanTokenizer::*)()>(&System::Globalization::TimeSpanParse::TimeSpanTokenizer::get_EOL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::TimeSpanTokenizer), "get_EOL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::BackOne
// Il2CppName: BackOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::TimeSpanParse::TimeSpanTokenizer::*)()>(&System::Globalization::TimeSpanParse::TimeSpanTokenizer::BackOne)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::TimeSpanTokenizer), "BackOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::TimeSpanParse::TimeSpanTokenizer::get_NextChar
// Il2CppName: get_NextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Globalization::TimeSpanParse::TimeSpanTokenizer::*)()>(&System::Globalization::TimeSpanParse::TimeSpanTokenizer::get_NextChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::TimeSpanParse::TimeSpanTokenizer), "get_NextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
