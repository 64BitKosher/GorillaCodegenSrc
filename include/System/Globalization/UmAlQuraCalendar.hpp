// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.Calendar
#include "System/Globalization/Calendar.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Forward declaring type: UmAlQuraCalendar
  class UmAlQuraCalendar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Globalization::UmAlQuraCalendar);
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::UmAlQuraCalendar*, "System.Globalization", "UmAlQuraCalendar");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.UmAlQuraCalendar
  // [TokenAttribute] Offset: FFFFFFFF
  class UmAlQuraCalendar : public ::System::Globalization::Calendar {
    public:
    // Nested type: ::System::Globalization::UmAlQuraCalendar::DateMapping
    struct DateMapping;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Globalization.UmAlQuraCalendar/DateMapping
    // [TokenAttribute] Offset: FFFFFFFF
    struct DateMapping/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Int32 HijriMonthsLengthFlags
      // Size: 0x4
      // Offset: 0x0
      int HijriMonthsLengthFlags;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: HijriMonthsLengthFlags and: GregorianDate
      char __padding0[0x4] = {};
      // System.DateTime GregorianDate
      // Size: 0x8
      // Offset: 0x8
      ::System::DateTime GregorianDate;
      // Field size check
      static_assert(sizeof(::System::DateTime) == 0x8);
      public:
      // Creating value type constructor for type: DateMapping
      constexpr DateMapping(int HijriMonthsLengthFlags_ = {}, ::System::DateTime GregorianDate_ = {}) noexcept : HijriMonthsLengthFlags{HijriMonthsLengthFlags_}, GregorianDate{GregorianDate_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Int32 HijriMonthsLengthFlags
      [[deprecated("Use field access instead!")]] int& dyn_HijriMonthsLengthFlags();
      // Get instance field reference: System.DateTime GregorianDate
      [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_GregorianDate();
      // System.Void .ctor(System.Int32 MonthsLengthFlags, System.Int32 GYear, System.Int32 GMonth, System.Int32 GDay)
      // Offset: 0x46049C0
      DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
    }; // System.Globalization.UmAlQuraCalendar/DateMapping
    #pragma pack(pop)
    static check_size<sizeof(UmAlQuraCalendar::DateMapping), 8 + sizeof(::System::DateTime)> __System_Globalization_UmAlQuraCalendar_DateMappingSizeCheck;
    static_assert(sizeof(UmAlQuraCalendar::DateMapping) == 0x10);
    // Get static field: static private readonly System.Globalization.UmAlQuraCalendar/DateMapping[] HijriYearInfo
    static ::ArrayW<::System::Globalization::UmAlQuraCalendar::DateMapping> _get_HijriYearInfo();
    // Set static field: static private readonly System.Globalization.UmAlQuraCalendar/DateMapping[] HijriYearInfo
    static void _set_HijriYearInfo(::ArrayW<::System::Globalization::UmAlQuraCalendar::DateMapping> value);
    // Get static field: static System.DateTime minDate
    static ::System::DateTime _get_minDate();
    // Set static field: static System.DateTime minDate
    static void _set_minDate(::System::DateTime value);
    // Get static field: static System.DateTime maxDate
    static ::System::DateTime _get_maxDate();
    // Set static field: static System.DateTime maxDate
    static void _set_maxDate(::System::DateTime value);
    // static private System.Globalization.UmAlQuraCalendar/DateMapping[] InitDateMapping()
    // Offset: 0x460485C
    static ::ArrayW<::System::Globalization::UmAlQuraCalendar::DateMapping> InitDateMapping();
    // static private System.Void ConvertHijriToGregorian(System.Int32 HijriYear, System.Int32 HijriMonth, System.Int32 HijriDay, ref System.Int32 yg, ref System.Int32 mg, ref System.Int32 dg)
    // Offset: 0x4604AD4
    static void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ByRef<int> yg, ByRef<int> mg, ByRef<int> dg);
    // static private System.Int64 GetAbsoluteDateUmAlQura(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x4604C14
    static int64_t GetAbsoluteDateUmAlQura(int year, int month, int day);
    // static System.Void CheckTicksRange(System.Int64 ticks)
    // Offset: 0x4604CD8
    static void CheckTicksRange(int64_t ticks);
    // static System.Void CheckEraRange(System.Int32 era)
    // Offset: 0x4604E84
    static void CheckEraRange(int era);
    // static System.Void CheckYearRange(System.Int32 year, System.Int32 era)
    // Offset: 0x4604EFC
    static void CheckYearRange(int year, int era);
    // static System.Void CheckYearMonthRange(System.Int32 year, System.Int32 month, System.Int32 era)
    // Offset: 0x4605044
    static void CheckYearMonthRange(int year, int month, int era);
    // static private System.Void ConvertGregorianToHijri(System.DateTime time, ref System.Int32 HijriYear, ref System.Int32 HijriMonth, ref System.Int32 HijriDay)
    // Offset: 0x4605120
    static void ConvertGregorianToHijri(::System::DateTime time, ByRef<int> HijriYear, ByRef<int> HijriMonth, ByRef<int> HijriDay);
    // System.Int32 GetDatePart(System.DateTime time, System.Int32 part)
    // Offset: 0x4605378
    int GetDatePart(::System::DateTime time, int part);
    // static System.Int32 RealGetDaysInYear(System.Int32 year)
    // Offset: 0x460560C
    static int RealGetDaysInYear(int year);
    // static private System.Void .cctor()
    // Offset: 0x4605DD8
    static void _cctor();
    // public override System.DateTime get_MinSupportedDateTime()
    // Offset: 0x4604A00
    // Implemented from: System.Globalization.Calendar
    // Base method: System.DateTime Calendar::get_MinSupportedDateTime()
    ::System::DateTime get_MinSupportedDateTime();
    // public override System.DateTime get_MaxSupportedDateTime()
    // Offset: 0x4604A58
    // Implemented from: System.Globalization.Calendar
    // Base method: System.DateTime Calendar::get_MaxSupportedDateTime()
    ::System::DateTime get_MaxSupportedDateTime();
    // public System.Void .ctor()
    // Offset: 0x4604AB0
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Void Calendar::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UmAlQuraCalendar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::UmAlQuraCalendar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UmAlQuraCalendar*, creationType>()));
    }
    // override System.Int32 get_BaseCalendarID()
    // Offset: 0x4604AC4
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::get_BaseCalendarID()
    int get_BaseCalendarID();
    // override System.Int32 get_ID()
    // Offset: 0x4604ACC
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::get_ID()
    int get_ID();
    // public override System.Int32 GetDayOfMonth(System.DateTime time)
    // Offset: 0x46054DC
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetDayOfMonth(System.DateTime time)
    int GetDayOfMonth(::System::DateTime time);
    // public override System.DayOfWeek GetDayOfWeek(System.DateTime time)
    // Offset: 0x46054F0
    // Implemented from: System.Globalization.Calendar
    // Base method: System.DayOfWeek Calendar::GetDayOfWeek(System.DateTime time)
    ::System::DayOfWeek GetDayOfWeek(::System::DateTime time);
    // public override System.Int32 GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)
    // Offset: 0x4605558
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)
    int GetDaysInMonth(int year, int month, int era);
    // public override System.Int32 GetDaysInYear(System.Int32 year, System.Int32 era)
    // Offset: 0x46056AC
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetDaysInYear(System.Int32 year, System.Int32 era)
    int GetDaysInYear(int year, int era);
    // public override System.Int32 GetEra(System.DateTime time)
    // Offset: 0x4605718
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetEra(System.DateTime time)
    int GetEra(::System::DateTime time);
    // public override System.Int32[] get_Eras()
    // Offset: 0x4605788
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32[] Calendar::get_Eras()
    ::ArrayW<int> get_Eras();
    // public override System.Int32 GetMonth(System.DateTime time)
    // Offset: 0x46057EC
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetMonth(System.DateTime time)
    int GetMonth(::System::DateTime time);
    // public override System.Int32 GetMonthsInYear(System.Int32 year, System.Int32 era)
    // Offset: 0x4605800
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetMonthsInYear(System.Int32 year, System.Int32 era)
    int GetMonthsInYear(int year, int era);
    // public override System.Int32 GetYear(System.DateTime time)
    // Offset: 0x460586C
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::GetYear(System.DateTime time)
    int GetYear(::System::DateTime time);
    // public override System.Boolean IsLeapYear(System.Int32 year, System.Int32 era)
    // Offset: 0x4605880
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Boolean Calendar::IsLeapYear(System.Int32 year, System.Int32 era)
    bool IsLeapYear(int year, int era);
    // public override System.DateTime ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
    // Offset: 0x46058F8
    // Implemented from: System.Globalization.Calendar
    // Base method: System.DateTime Calendar::ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
    ::System::DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    // public override System.Int32 get_TwoDigitYearMax()
    // Offset: 0x4605B40
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::get_TwoDigitYearMax()
    int get_TwoDigitYearMax();
    // public override System.Void set_TwoDigitYearMax(System.Int32 value)
    // Offset: 0x4605B84
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Void Calendar::set_TwoDigitYearMax(System.Int32 value)
    void set_TwoDigitYearMax(int value);
    // public override System.Int32 ToFourDigitYear(System.Int32 year)
    // Offset: 0x4605CA0
    // Implemented from: System.Globalization.Calendar
    // Base method: System.Int32 Calendar::ToFourDigitYear(System.Int32 year)
    int ToFourDigitYear(int year);
  }; // System.Globalization.UmAlQuraCalendar
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::UmAlQuraCalendar::DateMapping, "System.Globalization", "UmAlQuraCalendar/DateMapping");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::InitDateMapping
// Il2CppName: InitDateMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Globalization::UmAlQuraCalendar::DateMapping> (*)()>(&System::Globalization::UmAlQuraCalendar::InitDateMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "InitDateMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::ConvertHijriToGregorian
// Il2CppName: ConvertHijriToGregorian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int, ByRef<int>, ByRef<int>, ByRef<int>)>(&System::Globalization::UmAlQuraCalendar::ConvertHijriToGregorian)> {
  static const MethodInfo* get() {
    static auto* HijriYear = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* HijriMonth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* HijriDay = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yg = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* mg = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* dg = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "ConvertHijriToGregorian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HijriYear, HijriMonth, HijriDay, yg, mg, dg});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetAbsoluteDateUmAlQura
// Il2CppName: GetAbsoluteDateUmAlQura
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int, int)>(&System::Globalization::UmAlQuraCalendar::GetAbsoluteDateUmAlQura)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetAbsoluteDateUmAlQura", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::CheckTicksRange
// Il2CppName: CheckTicksRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t)>(&System::Globalization::UmAlQuraCalendar::CheckTicksRange)> {
  static const MethodInfo* get() {
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "CheckTicksRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ticks});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::CheckEraRange
// Il2CppName: CheckEraRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Globalization::UmAlQuraCalendar::CheckEraRange)> {
  static const MethodInfo* get() {
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "CheckEraRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::CheckYearRange
// Il2CppName: CheckYearRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&System::Globalization::UmAlQuraCalendar::CheckYearRange)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "CheckYearRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::CheckYearMonthRange
// Il2CppName: CheckYearMonthRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int)>(&System::Globalization::UmAlQuraCalendar::CheckYearMonthRange)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "CheckYearMonthRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::ConvertGregorianToHijri
// Il2CppName: ConvertGregorianToHijri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::DateTime, ByRef<int>, ByRef<int>, ByRef<int>)>(&System::Globalization::UmAlQuraCalendar::ConvertGregorianToHijri)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* HijriYear = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* HijriMonth = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* HijriDay = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "ConvertGregorianToHijri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, HijriYear, HijriMonth, HijriDay});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetDatePart
// Il2CppName: GetDatePart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime, int)>(&System::Globalization::UmAlQuraCalendar::GetDatePart)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* part = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetDatePart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, part});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::RealGetDaysInYear
// Il2CppName: RealGetDaysInYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Globalization::UmAlQuraCalendar::RealGetDaysInYear)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "RealGetDaysInYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Globalization::UmAlQuraCalendar::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_MinSupportedDateTime
// Il2CppName: get_MinSupportedDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_MinSupportedDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_MinSupportedDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_MaxSupportedDateTime
// Il2CppName: get_MaxSupportedDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_MaxSupportedDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_MaxSupportedDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_BaseCalendarID
// Il2CppName: get_BaseCalendarID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_BaseCalendarID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_BaseCalendarID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetDayOfMonth
// Il2CppName: GetDayOfMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime)>(&System::Globalization::UmAlQuraCalendar::GetDayOfMonth)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetDayOfMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetDayOfWeek
// Il2CppName: GetDayOfWeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DayOfWeek (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime)>(&System::Globalization::UmAlQuraCalendar::GetDayOfWeek)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetDayOfWeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetDaysInMonth
// Il2CppName: GetDaysInMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(int, int, int)>(&System::Globalization::UmAlQuraCalendar::GetDaysInMonth)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetDaysInMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetDaysInYear
// Il2CppName: GetDaysInYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(int, int)>(&System::Globalization::UmAlQuraCalendar::GetDaysInYear)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetDaysInYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetEra
// Il2CppName: GetEra
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime)>(&System::Globalization::UmAlQuraCalendar::GetEra)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetEra", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_Eras
// Il2CppName: get_Eras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_Eras)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_Eras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetMonth
// Il2CppName: GetMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime)>(&System::Globalization::UmAlQuraCalendar::GetMonth)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetMonthsInYear
// Il2CppName: GetMonthsInYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(int, int)>(&System::Globalization::UmAlQuraCalendar::GetMonthsInYear)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetMonthsInYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::GetYear
// Il2CppName: GetYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(::System::DateTime)>(&System::Globalization::UmAlQuraCalendar::GetYear)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "GetYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::IsLeapYear
// Il2CppName: IsLeapYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::UmAlQuraCalendar::*)(int, int)>(&System::Globalization::UmAlQuraCalendar::IsLeapYear)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "IsLeapYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Globalization::UmAlQuraCalendar::*)(int, int, int, int, int, int, int, int)>(&System::Globalization::UmAlQuraCalendar::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hour = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minute = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* millisecond = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day, hour, minute, second, millisecond, era});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::get_TwoDigitYearMax
// Il2CppName: get_TwoDigitYearMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)()>(&System::Globalization::UmAlQuraCalendar::get_TwoDigitYearMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "get_TwoDigitYearMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::set_TwoDigitYearMax
// Il2CppName: set_TwoDigitYearMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::UmAlQuraCalendar::*)(int)>(&System::Globalization::UmAlQuraCalendar::set_TwoDigitYearMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "set_TwoDigitYearMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::UmAlQuraCalendar::ToFourDigitYear
// Il2CppName: ToFourDigitYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::UmAlQuraCalendar::*)(int)>(&System::Globalization::UmAlQuraCalendar::ToFourDigitYear)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::UmAlQuraCalendar*), "ToFourDigitYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year});
  }
};
