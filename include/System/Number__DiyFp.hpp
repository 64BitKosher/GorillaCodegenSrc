// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Number
#include "System/Number_.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Number_::DiyFp, "System", "Number/DiyFp");
// Type namespace: System
namespace System {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Number/DiyFp
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct Number_::DiyFp/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.UInt64 f
    // Size: 0x8
    // Offset: 0x0
    uint64_t f;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public readonly System.Int32 e
    // Size: 0x4
    // Offset: 0x8
    int e;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DiyFp
    constexpr DiyFp(uint64_t f_ = {}, int e_ = {}) noexcept : f{f_}, e{e_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 DoubleImplicitBitIndex
    static constexpr const int DoubleImplicitBitIndex = 52;
    // Get static field: static public System.Int32 DoubleImplicitBitIndex
    static int _get_DoubleImplicitBitIndex();
    // Set static field: static public System.Int32 DoubleImplicitBitIndex
    static void _set_DoubleImplicitBitIndex(int value);
    // static field const value: static public System.Int32 SingleImplicitBitIndex
    static constexpr const int SingleImplicitBitIndex = 23;
    // Get static field: static public System.Int32 SingleImplicitBitIndex
    static int _get_SingleImplicitBitIndex();
    // Set static field: static public System.Int32 SingleImplicitBitIndex
    static void _set_SingleImplicitBitIndex(int value);
    // static field const value: static public System.Int32 SignificandSize
    static constexpr const int SignificandSize = 64;
    // Get static field: static public System.Int32 SignificandSize
    static int _get_SignificandSize();
    // Set static field: static public System.Int32 SignificandSize
    static void _set_SignificandSize(int value);
    // Get instance field reference: public readonly System.UInt64 f
    [[deprecated("Use field access instead!")]] uint64_t& dyn_f();
    // Get instance field reference: public readonly System.Int32 e
    [[deprecated("Use field access instead!")]] int& dyn_e();
    // static public System.Number/DiyFp CreateAndGetBoundaries(System.Double value, out System.Number/DiyFp mMinus, out System.Number/DiyFp mPlus)
    // Offset: 0x575C4C4
    static ::System::Number_::DiyFp CreateAndGetBoundaries(double value, ByRef<::System::Number_::DiyFp> mMinus, ByRef<::System::Number_::DiyFp> mPlus);
    // static public System.Number/DiyFp CreateAndGetBoundaries(System.Single value, out System.Number/DiyFp mMinus, out System.Number/DiyFp mPlus)
    // Offset: 0x575C620
    static ::System::Number_::DiyFp CreateAndGetBoundaries(float value, ByRef<::System::Number_::DiyFp> mMinus, ByRef<::System::Number_::DiyFp> mPlus);
    // public System.Void .ctor(System.Double value)
    // Offset: 0x575C50C
    DiyFp(double value);
    // public System.Void .ctor(System.Single value)
    // Offset: 0x575C668
    DiyFp(float value);
    // public System.Void .ctor(System.UInt64 f, System.Int32 e)
    // Offset: 0x575C6DC
    // ABORTED: conflicts with another method.  DiyFp(uint64_t f, int e);
    // public System.Number/DiyFp Multiply(in System.Number/DiyFp other)
    // Offset: 0x575C6E8
    ::System::Number_::DiyFp Multiply(ByRef<::System::Number_::DiyFp> other);
    // public System.Number/DiyFp Normalize()
    // Offset: 0x575C744
    ::System::Number_::DiyFp Normalize();
    // public System.Number/DiyFp Subtract(in System.Number/DiyFp other)
    // Offset: 0x575C79C
    ::System::Number_::DiyFp Subtract(ByRef<::System::Number_::DiyFp> other);
    // private System.Void GetBoundaries(System.Int32 implicitBitIndex, out System.Number/DiyFp mMinus, out System.Number/DiyFp mPlus)
    // Offset: 0x575C57C
    void GetBoundaries(int implicitBitIndex, ByRef<::System::Number_::DiyFp> mMinus, ByRef<::System::Number_::DiyFp> mPlus);
  }; // System.Number/DiyFp
  #pragma pack(pop)
  static check_size<sizeof(Number_::DiyFp), 8 + sizeof(int)> __System_Number__DiyFpSizeCheck;
  static_assert(sizeof(Number_::DiyFp) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number_::DiyFp::CreateAndGetBoundaries
// Il2CppName: CreateAndGetBoundaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (*)(double, ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>)>(&System::Number_::DiyFp::CreateAndGetBoundaries)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* mMinus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* mPlus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "CreateAndGetBoundaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, mMinus, mPlus});
  }
};
// Writing MetadataGetter for method: System::Number_::DiyFp::CreateAndGetBoundaries
// Il2CppName: CreateAndGetBoundaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (*)(float, ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>)>(&System::Number_::DiyFp::CreateAndGetBoundaries)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mMinus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* mPlus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "CreateAndGetBoundaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, mMinus, mPlus});
  }
};
// Writing MetadataGetter for method: System::Number_::DiyFp::DiyFp
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Number_::DiyFp::DiyFp
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Number_::DiyFp::DiyFp
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Number_::DiyFp::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (System::Number_::DiyFp::*)(ByRef<::System::Number_::DiyFp>)>(&System::Number_::DiyFp::Multiply)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::Number_::DiyFp::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (System::Number_::DiyFp::*)()>(&System::Number_::DiyFp::Normalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::DiyFp::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Number_::DiyFp (System::Number_::DiyFp::*)(ByRef<::System::Number_::DiyFp>)>(&System::Number_::DiyFp::Subtract)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::Number_::DiyFp::GetBoundaries
// Il2CppName: GetBoundaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::DiyFp::*)(int, ByRef<::System::Number_::DiyFp>, ByRef<::System::Number_::DiyFp>)>(&System::Number_::DiyFp::GetBoundaries)> {
  static const MethodInfo* get() {
    static auto* implicitBitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mMinus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    static auto* mPlus = &::il2cpp_utils::GetClassFromName("System", "Number/DiyFp")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::DiyFp), "GetBoundaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{implicitBitIndex, mMinus, mPlus});
  }
};
