// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Numerics
namespace System::Numerics {
  // Forward declaring type: Register
  struct Register;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Numerics::Register, "System.Numerics", "Register");
// Type namespace: System.Numerics
namespace System::Numerics {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: System.Numerics.Register
  // [TokenAttribute] Offset: FFFFFFFF
  struct Register/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Byte byte_0
    // Size: 0x1
    // Offset: 0x0
    uint8_t byte_0;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_1
    // Size: 0x1
    // Offset: 0x1
    uint8_t byte_1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_2
    // Size: 0x1
    // Offset: 0x2
    uint8_t byte_2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_3
    // Size: 0x1
    // Offset: 0x3
    uint8_t byte_3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_4
    // Size: 0x1
    // Offset: 0x4
    uint8_t byte_4;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_5
    // Size: 0x1
    // Offset: 0x5
    uint8_t byte_5;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_6
    // Size: 0x1
    // Offset: 0x6
    uint8_t byte_6;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_7
    // Size: 0x1
    // Offset: 0x7
    uint8_t byte_7;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_8
    // Size: 0x1
    // Offset: 0x8
    uint8_t byte_8;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_9
    // Size: 0x1
    // Offset: 0x9
    uint8_t byte_9;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_10
    // Size: 0x1
    // Offset: 0xA
    uint8_t byte_10;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_11
    // Size: 0x1
    // Offset: 0xB
    uint8_t byte_11;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_12
    // Size: 0x1
    // Offset: 0xC
    uint8_t byte_12;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_13
    // Size: 0x1
    // Offset: 0xD
    uint8_t byte_13;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_14
    // Size: 0x1
    // Offset: 0xE
    uint8_t byte_14;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte byte_15
    // Size: 0x1
    // Offset: 0xF
    uint8_t byte_15;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // WARNING Could not write padding for field: byte_15! Ignoring it instead (and assuming correct layout regardless)...
    // System.SByte sbyte_0
    // Size: 0x1
    // Offset: 0x0
    int8_t sbyte_0;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_1
    // Size: 0x1
    // Offset: 0x1
    int8_t sbyte_1;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_2
    // Size: 0x1
    // Offset: 0x2
    int8_t sbyte_2;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_3
    // Size: 0x1
    // Offset: 0x3
    int8_t sbyte_3;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_4
    // Size: 0x1
    // Offset: 0x4
    int8_t sbyte_4;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_5
    // Size: 0x1
    // Offset: 0x5
    int8_t sbyte_5;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_6
    // Size: 0x1
    // Offset: 0x6
    int8_t sbyte_6;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_7
    // Size: 0x1
    // Offset: 0x7
    int8_t sbyte_7;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_8
    // Size: 0x1
    // Offset: 0x8
    int8_t sbyte_8;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_9
    // Size: 0x1
    // Offset: 0x9
    int8_t sbyte_9;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_10
    // Size: 0x1
    // Offset: 0xA
    int8_t sbyte_10;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_11
    // Size: 0x1
    // Offset: 0xB
    int8_t sbyte_11;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_12
    // Size: 0x1
    // Offset: 0xC
    int8_t sbyte_12;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_13
    // Size: 0x1
    // Offset: 0xD
    int8_t sbyte_13;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_14
    // Size: 0x1
    // Offset: 0xE
    int8_t sbyte_14;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // System.SByte sbyte_15
    // Size: 0x1
    // Offset: 0xF
    int8_t sbyte_15;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // WARNING Could not write padding for field: sbyte_15! Ignoring it instead (and assuming correct layout regardless)...
    // System.UInt16 uint16_0
    // Size: 0x2
    // Offset: 0x0
    uint16_t uint16_0;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_1
    // Size: 0x2
    // Offset: 0x2
    uint16_t uint16_1;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_2
    // Size: 0x2
    // Offset: 0x4
    uint16_t uint16_2;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_3
    // Size: 0x2
    // Offset: 0x6
    uint16_t uint16_3;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_4
    // Size: 0x2
    // Offset: 0x8
    uint16_t uint16_4;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_5
    // Size: 0x2
    // Offset: 0xA
    uint16_t uint16_5;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_6
    // Size: 0x2
    // Offset: 0xC
    uint16_t uint16_6;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 uint16_7
    // Size: 0x2
    // Offset: 0xE
    uint16_t uint16_7;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // WARNING Could not write padding for field: uint16_7! Ignoring it instead (and assuming correct layout regardless)...
    // System.Int16 int16_0
    // Size: 0x2
    // Offset: 0x0
    int16_t int16_0;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_1
    // Size: 0x2
    // Offset: 0x2
    int16_t int16_1;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_2
    // Size: 0x2
    // Offset: 0x4
    int16_t int16_2;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_3
    // Size: 0x2
    // Offset: 0x6
    int16_t int16_3;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_4
    // Size: 0x2
    // Offset: 0x8
    int16_t int16_4;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_5
    // Size: 0x2
    // Offset: 0xA
    int16_t int16_5;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_6
    // Size: 0x2
    // Offset: 0xC
    int16_t int16_6;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 int16_7
    // Size: 0x2
    // Offset: 0xE
    int16_t int16_7;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // WARNING Could not write padding for field: int16_7! Ignoring it instead (and assuming correct layout regardless)...
    // System.UInt32 uint32_0
    // Size: 0x4
    // Offset: 0x0
    uint uint32_0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 uint32_1
    // Size: 0x4
    // Offset: 0x4
    uint uint32_1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 uint32_2
    // Size: 0x4
    // Offset: 0x8
    uint uint32_2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 uint32_3
    // Size: 0x4
    // Offset: 0xC
    uint uint32_3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // WARNING Could not write padding for field: uint32_3! Ignoring it instead (and assuming correct layout regardless)...
    // System.Int32 int32_0
    // Size: 0x4
    // Offset: 0x0
    int int32_0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 int32_1
    // Size: 0x4
    // Offset: 0x4
    int int32_1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 int32_2
    // Size: 0x4
    // Offset: 0x8
    int int32_2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 int32_3
    // Size: 0x4
    // Offset: 0xC
    int int32_3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // WARNING Could not write padding for field: int32_3! Ignoring it instead (and assuming correct layout regardless)...
    // System.UInt64 uint64_0
    // Size: 0x8
    // Offset: 0x0
    uint64_t uint64_0;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt64 uint64_1
    // Size: 0x8
    // Offset: 0x8
    uint64_t uint64_1;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // WARNING Could not write padding for field: uint64_1! Ignoring it instead (and assuming correct layout regardless)...
    // System.Int64 int64_0
    // Size: 0x8
    // Offset: 0x0
    int64_t int64_0;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 int64_1
    // Size: 0x8
    // Offset: 0x8
    int64_t int64_1;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // WARNING Could not write padding for field: int64_1! Ignoring it instead (and assuming correct layout regardless)...
    // System.Single single_0
    // Size: 0x4
    // Offset: 0x0
    float single_0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single single_1
    // Size: 0x4
    // Offset: 0x4
    float single_1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single single_2
    // Size: 0x4
    // Offset: 0x8
    float single_2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single single_3
    // Size: 0x4
    // Offset: 0xC
    float single_3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // WARNING Could not write padding for field: single_3! Ignoring it instead (and assuming correct layout regardless)...
    // System.Double double_0
    // Size: 0x8
    // Offset: 0x0
    double double_0;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // System.Double double_1
    // Size: 0x8
    // Offset: 0x8
    double double_1;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: Register
    constexpr Register(uint8_t byte_0_ = {}, uint8_t byte_1_ = {}, uint8_t byte_2_ = {}, uint8_t byte_3_ = {}, uint8_t byte_4_ = {}, uint8_t byte_5_ = {}, uint8_t byte_6_ = {}, uint8_t byte_7_ = {}, uint8_t byte_8_ = {}, uint8_t byte_9_ = {}, uint8_t byte_10_ = {}, uint8_t byte_11_ = {}, uint8_t byte_12_ = {}, uint8_t byte_13_ = {}, uint8_t byte_14_ = {}, uint8_t byte_15_ = {}, int8_t sbyte_0_ = {}, int8_t sbyte_1_ = {}, int8_t sbyte_2_ = {}, int8_t sbyte_3_ = {}, int8_t sbyte_4_ = {}, int8_t sbyte_5_ = {}, int8_t sbyte_6_ = {}, int8_t sbyte_7_ = {}, int8_t sbyte_8_ = {}, int8_t sbyte_9_ = {}, int8_t sbyte_10_ = {}, int8_t sbyte_11_ = {}, int8_t sbyte_12_ = {}, int8_t sbyte_13_ = {}, int8_t sbyte_14_ = {}, int8_t sbyte_15_ = {}, uint16_t uint16_0_ = {}, uint16_t uint16_1_ = {}, uint16_t uint16_2_ = {}, uint16_t uint16_3_ = {}, uint16_t uint16_4_ = {}, uint16_t uint16_5_ = {}, uint16_t uint16_6_ = {}, uint16_t uint16_7_ = {}, int16_t int16_0_ = {}, int16_t int16_1_ = {}, int16_t int16_2_ = {}, int16_t int16_3_ = {}, int16_t int16_4_ = {}, int16_t int16_5_ = {}, int16_t int16_6_ = {}, int16_t int16_7_ = {}, uint uint32_0_ = {}, uint uint32_1_ = {}, uint uint32_2_ = {}, uint uint32_3_ = {}, int int32_0_ = {}, int int32_1_ = {}, int int32_2_ = {}, int int32_3_ = {}, uint64_t uint64_0_ = {}, uint64_t uint64_1_ = {}, int64_t int64_0_ = {}, int64_t int64_1_ = {}, float single_0_ = {}, float single_1_ = {}, float single_2_ = {}, float single_3_ = {}, double double_0_ = {}, double double_1_ = {}) noexcept : byte_0{byte_0_}, byte_1{byte_1_}, byte_2{byte_2_}, byte_3{byte_3_}, byte_4{byte_4_}, byte_5{byte_5_}, byte_6{byte_6_}, byte_7{byte_7_}, byte_8{byte_8_}, byte_9{byte_9_}, byte_10{byte_10_}, byte_11{byte_11_}, byte_12{byte_12_}, byte_13{byte_13_}, byte_14{byte_14_}, byte_15{byte_15_}, sbyte_0{sbyte_0_}, sbyte_1{sbyte_1_}, sbyte_2{sbyte_2_}, sbyte_3{sbyte_3_}, sbyte_4{sbyte_4_}, sbyte_5{sbyte_5_}, sbyte_6{sbyte_6_}, sbyte_7{sbyte_7_}, sbyte_8{sbyte_8_}, sbyte_9{sbyte_9_}, sbyte_10{sbyte_10_}, sbyte_11{sbyte_11_}, sbyte_12{sbyte_12_}, sbyte_13{sbyte_13_}, sbyte_14{sbyte_14_}, sbyte_15{sbyte_15_}, uint16_0{uint16_0_}, uint16_1{uint16_1_}, uint16_2{uint16_2_}, uint16_3{uint16_3_}, uint16_4{uint16_4_}, uint16_5{uint16_5_}, uint16_6{uint16_6_}, uint16_7{uint16_7_}, int16_0{int16_0_}, int16_1{int16_1_}, int16_2{int16_2_}, int16_3{int16_3_}, int16_4{int16_4_}, int16_5{int16_5_}, int16_6{int16_6_}, int16_7{int16_7_}, uint32_0{uint32_0_}, uint32_1{uint32_1_}, uint32_2{uint32_2_}, uint32_3{uint32_3_}, int32_0{int32_0_}, int32_1{int32_1_}, int32_2{int32_2_}, int32_3{int32_3_}, uint64_0{uint64_0_}, uint64_1{uint64_1_}, int64_0{int64_0_}, int64_1{int64_1_}, single_0{single_0_}, single_1{single_1_}, single_2{single_2_}, single_3{single_3_}, double_0{double_0_}, double_1{double_1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Byte byte_0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_0();
    // Get instance field reference: System.Byte byte_1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_1();
    // Get instance field reference: System.Byte byte_2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_2();
    // Get instance field reference: System.Byte byte_3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_3();
    // Get instance field reference: System.Byte byte_4
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_4();
    // Get instance field reference: System.Byte byte_5
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_5();
    // Get instance field reference: System.Byte byte_6
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_6();
    // Get instance field reference: System.Byte byte_7
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_7();
    // Get instance field reference: System.Byte byte_8
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_8();
    // Get instance field reference: System.Byte byte_9
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_9();
    // Get instance field reference: System.Byte byte_10
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_10();
    // Get instance field reference: System.Byte byte_11
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_11();
    // Get instance field reference: System.Byte byte_12
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_12();
    // Get instance field reference: System.Byte byte_13
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_13();
    // Get instance field reference: System.Byte byte_14
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_14();
    // Get instance field reference: System.Byte byte_15
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte_15();
    // Get instance field reference: System.SByte sbyte_0
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_0();
    // Get instance field reference: System.SByte sbyte_1
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_1();
    // Get instance field reference: System.SByte sbyte_2
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_2();
    // Get instance field reference: System.SByte sbyte_3
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_3();
    // Get instance field reference: System.SByte sbyte_4
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_4();
    // Get instance field reference: System.SByte sbyte_5
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_5();
    // Get instance field reference: System.SByte sbyte_6
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_6();
    // Get instance field reference: System.SByte sbyte_7
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_7();
    // Get instance field reference: System.SByte sbyte_8
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_8();
    // Get instance field reference: System.SByte sbyte_9
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_9();
    // Get instance field reference: System.SByte sbyte_10
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_10();
    // Get instance field reference: System.SByte sbyte_11
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_11();
    // Get instance field reference: System.SByte sbyte_12
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_12();
    // Get instance field reference: System.SByte sbyte_13
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_13();
    // Get instance field reference: System.SByte sbyte_14
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_14();
    // Get instance field reference: System.SByte sbyte_15
    [[deprecated("Use field access instead!")]] int8_t& dyn_sbyte_15();
    // Get instance field reference: System.UInt16 uint16_0
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_0();
    // Get instance field reference: System.UInt16 uint16_1
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_1();
    // Get instance field reference: System.UInt16 uint16_2
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_2();
    // Get instance field reference: System.UInt16 uint16_3
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_3();
    // Get instance field reference: System.UInt16 uint16_4
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_4();
    // Get instance field reference: System.UInt16 uint16_5
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_5();
    // Get instance field reference: System.UInt16 uint16_6
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_6();
    // Get instance field reference: System.UInt16 uint16_7
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16_7();
    // Get instance field reference: System.Int16 int16_0
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_0();
    // Get instance field reference: System.Int16 int16_1
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_1();
    // Get instance field reference: System.Int16 int16_2
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_2();
    // Get instance field reference: System.Int16 int16_3
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_3();
    // Get instance field reference: System.Int16 int16_4
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_4();
    // Get instance field reference: System.Int16 int16_5
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_5();
    // Get instance field reference: System.Int16 int16_6
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_6();
    // Get instance field reference: System.Int16 int16_7
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16_7();
    // Get instance field reference: System.UInt32 uint32_0
    [[deprecated("Use field access instead!")]] uint& dyn_uint32_0();
    // Get instance field reference: System.UInt32 uint32_1
    [[deprecated("Use field access instead!")]] uint& dyn_uint32_1();
    // Get instance field reference: System.UInt32 uint32_2
    [[deprecated("Use field access instead!")]] uint& dyn_uint32_2();
    // Get instance field reference: System.UInt32 uint32_3
    [[deprecated("Use field access instead!")]] uint& dyn_uint32_3();
    // Get instance field reference: System.Int32 int32_0
    [[deprecated("Use field access instead!")]] int& dyn_int32_0();
    // Get instance field reference: System.Int32 int32_1
    [[deprecated("Use field access instead!")]] int& dyn_int32_1();
    // Get instance field reference: System.Int32 int32_2
    [[deprecated("Use field access instead!")]] int& dyn_int32_2();
    // Get instance field reference: System.Int32 int32_3
    [[deprecated("Use field access instead!")]] int& dyn_int32_3();
    // Get instance field reference: System.UInt64 uint64_0
    [[deprecated("Use field access instead!")]] uint64_t& dyn_uint64_0();
    // Get instance field reference: System.UInt64 uint64_1
    [[deprecated("Use field access instead!")]] uint64_t& dyn_uint64_1();
    // Get instance field reference: System.Int64 int64_0
    [[deprecated("Use field access instead!")]] int64_t& dyn_int64_0();
    // Get instance field reference: System.Int64 int64_1
    [[deprecated("Use field access instead!")]] int64_t& dyn_int64_1();
    // Get instance field reference: System.Single single_0
    [[deprecated("Use field access instead!")]] float& dyn_single_0();
    // Get instance field reference: System.Single single_1
    [[deprecated("Use field access instead!")]] float& dyn_single_1();
    // Get instance field reference: System.Single single_2
    [[deprecated("Use field access instead!")]] float& dyn_single_2();
    // Get instance field reference: System.Single single_3
    [[deprecated("Use field access instead!")]] float& dyn_single_3();
    // Get instance field reference: System.Double double_0
    [[deprecated("Use field access instead!")]] double& dyn_double_0();
    // Get instance field reference: System.Double double_1
    [[deprecated("Use field access instead!")]] double& dyn_double_1();
  }; // System.Numerics.Register
  #pragma pack(pop)
  static check_size<sizeof(Register), 8 + sizeof(double)> __System_Numerics_RegisterSizeCheck;
  static_assert(sizeof(Register) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
