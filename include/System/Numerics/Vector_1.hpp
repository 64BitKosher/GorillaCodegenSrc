// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.Numerics.Register
#include "System/Numerics/Register.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Numerics
namespace System::Numerics {
  // Skipping declaration: VectorSizeHelper because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Numerics
namespace System::Numerics {
  // Forward declaring type: Vector`1<T>
  template<typename T>
  struct Vector_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Numerics::Vector_1, "System.Numerics", "Vector`1");
// Type namespace: System.Numerics
namespace System::Numerics {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Numerics.Vector`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [IntrinsicAttribute] Offset: FFFFFFFF
  template<typename T>
  struct Vector_1/*, public ::System::ValueType, public ::System::IEquatable_1<::System::Numerics::Vector_1<T>>, public ::System::IFormattable*/ {
    public:
    // Nested type: ::System::Numerics::Vector_1::VectorSizeHelper<T>
    struct VectorSizeHelper;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Numerics.Vector`1/VectorSizeHelper
    // [TokenAttribute] Offset: FFFFFFFF
    struct VectorSizeHelper : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = Vector_1<T>;
      static constexpr std::string_view NESTED_NAME = "VectorSizeHelper";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // System.Numerics.Vector`1<T> _placeholder
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Numerics::Vector_1<T> placeholder;
      // System.Byte _byte
      // Size: 0x1
      // Offset: 0x0
      uint8_t byte;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: VectorSizeHelper
      constexpr VectorSizeHelper(::System::Numerics::Vector_1<T> placeholder_ = {}, uint8_t byte_ = {}) noexcept : placeholder{placeholder_}, byte{byte_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Numerics.Vector`1<T> _placeholder
      [[deprecated("Use field access instead!")]] ::System::Numerics::Vector_1<T>& dyn__placeholder() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::VectorSizeHelper::dyn__placeholder");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_placeholder"))->offset;
        return *reinterpret_cast<::System::Numerics::Vector_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Byte _byte
      [[deprecated("Use field access instead!")]] uint8_t& dyn__byte() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::VectorSizeHelper::dyn__byte");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_byte"))->offset;
        return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Numerics.Vector`1/VectorSizeHelper
    // Could not write size check! Type: System.Numerics.Vector`1/VectorSizeHelper is generic, or has no fields that are valid for size checks!
    public:
    // private System.Numerics.Register register
    // Size: 0x10
    // Offset: 0x0
    ::System::Numerics::Register _register;
    // Field size check
    static_assert(sizeof(::System::Numerics::Register) == 0x10);
    public:
    // Creating value type constructor for type: Vector_1
    constexpr Vector_1(::System::Numerics::Register _register_ = {}) noexcept : _register{_register_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::Numerics::Vector_1<T>>
    operator ::System::IEquatable_1<::System::Numerics::Vector_1<T>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::Numerics::Vector_1<T>>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Creating conversion operator: operator ::System::Numerics::Register
    constexpr operator ::System::Numerics::Register() const noexcept {
      return _register;
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Int32 s_count
    static int _get_s_count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_get_s_count");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_count"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Int32 s_count
    static void _set_s_count(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_set_s_count");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_count", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Numerics.Vector`1<T> s_zero
    static ::System::Numerics::Vector_1<T> _get_s_zero() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_get_s_zero");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Numerics::Vector_1<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_zero"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Numerics.Vector`1<T> s_zero
    static void _set_s_zero(::System::Numerics::Vector_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_set_s_zero");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_zero", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Numerics.Vector`1<T> s_one
    static ::System::Numerics::Vector_1<T> _get_s_one() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_get_s_one");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Numerics::Vector_1<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_one"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Numerics.Vector`1<T> s_one
    static void _set_s_one(::System::Numerics::Vector_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_set_s_one");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_one", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Numerics.Vector`1<T> s_allOnes
    static ::System::Numerics::Vector_1<T> _get_s_allOnes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_get_s_allOnes");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Numerics::Vector_1<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_allOnes"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Numerics.Vector`1<T> s_allOnes
    static void _set_s_allOnes(::System::Numerics::Vector_1<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::_set_s_allOnes");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "s_allOnes", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Numerics.Register register
    [[deprecated("Use field access instead!")]] ::System::Numerics::Register& dyn_register() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::dyn_register");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "register"))->offset;
      return *reinterpret_cast<::System::Numerics::Register*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static public System.Numerics.Vector`1<T> get_Zero()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::Numerics::Vector_1<T> get_Zero() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::get_Zero");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "get_Zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Numerics::Vector_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Int32 InitializeCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int InitializeCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::InitializeCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "InitializeCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Void .ctor(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    Vector_1(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void .ctor(System.Void* dataPointer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    Vector_1(void* dataPointer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataPointer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataPointer);
    }
    // System.Void .ctor(System.Void* dataPointer, System.Int32 offset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    Vector_1(void* dataPointer, int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataPointer), ::il2cpp_utils::ExtractType(offset)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataPointer, offset);
    }
    // private System.Void .ctor(ref System.Numerics.Register existingRegister)
    // Offset: 0xFFFFFFFFFFFFFFFF
    Vector_1(ByRef<::System::Numerics::Register> existingRegister) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(existingRegister)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(existingRegister));
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Boolean Equals(System.Numerics.Vector`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::System::Numerics::Vector_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Numerics::Vector_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Numerics::Vector_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, format, formatProvider);
    }
    // static public System.Numerics.Vector`1<System.UInt64> op_Explicit(System.Numerics.Vector`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    explicit Vector_1(::System::Numerics::Vector_1<T>& value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::op_Explicit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      *this = ::il2cpp_utils::RunMethodRethrow<::System::Numerics::Vector_1<uint64_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
    }
    // static System.Numerics.Vector`1<T> Equals(System.Numerics.Vector`1<T> left, System.Numerics.Vector`1<T> right)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::Numerics::Vector_1<T> Equals(::System::Numerics::Vector_1<T> left, ::System::Numerics::Vector_1<T> right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::Equals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Numerics::Vector_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
    }
    // static private System.Boolean ScalarEquals(T left, T right)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool ScalarEquals(T left, T right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::ScalarEquals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "ScalarEquals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
    }
    // static private T GetOneValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetOneValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::GetOneValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "GetOneValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private T GetAllBitsSetValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetAllBitsSetValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::GetAllBitsSetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "GetAllBitsSetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // System.Numerics.Vector`1
  // Could not write size check! Type: System.Numerics.Vector`1 is generic, or has no fields that are valid for size checks!
  // static public System.Boolean op_Equality(System.Numerics.Vector`1<T> left, System.Numerics.Vector`1<T> right)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::System::Numerics::Vector_1<T>& left, const ::System::Numerics::Vector_1<T>& right) {
    static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
  }
  // static public System.Boolean op_Inequality(System.Numerics.Vector`1<T> left, System.Numerics.Vector`1<T> right)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator !=(const ::System::Numerics::Vector_1<T>& left, const ::System::Numerics::Vector_1<T>& right) {
    static auto ___internal__logger = ::Logger::get().WithContext("::System::Numerics::Vector_1::op_Inequality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Vector_1<T>>::get(), "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
  }
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
