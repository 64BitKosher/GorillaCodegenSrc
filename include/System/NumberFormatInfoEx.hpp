// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: NumberFormatInfoEx
  class NumberFormatInfoEx;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::NumberFormatInfoEx);
DEFINE_IL2CPP_ARG_TYPE(::System::NumberFormatInfoEx*, "System", "NumberFormatInfoEx");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.NumberFormatInfoEx
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class NumberFormatInfoEx : public ::Il2CppObject {
    public:
    // static System.Boolean HasInvariantNumberSigns(System.Globalization.NumberFormatInfo info)
    // Offset: 0x575DBAC
    static bool HasInvariantNumberSigns(::System::Globalization::NumberFormatInfo* info);
  }; // System.NumberFormatInfoEx
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::NumberFormatInfoEx::HasInvariantNumberSigns
// Il2CppName: HasInvariantNumberSigns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatInfoEx::HasInvariantNumberSigns)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatInfoEx*), "HasInvariantNumberSigns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
