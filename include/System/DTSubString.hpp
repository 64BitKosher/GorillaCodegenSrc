// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
// Including type: System.DTSubStringType
#include "System/DTSubStringType.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: DTSubString
  struct DTSubString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::DTSubString, "System", "DTSubString");
// Type namespace: System
namespace System {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.DTSubString
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct DTSubString/*, public ::System::ValueType*/ {
    public:
    public:
    // System.ReadOnlySpan`1<System.Char> s
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ReadOnlySpan_1<::Il2CppChar> s;
    // System.Int32 index
    // Size: 0x4
    // Offset: 0x10
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 length
    // Size: 0x4
    // Offset: 0x14
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.DTSubStringType type
    // Size: 0x4
    // Offset: 0x18
    ::System::DTSubStringType type;
    // Field size check
    static_assert(sizeof(::System::DTSubStringType) == 0x4);
    // System.Int32 value
    // Size: 0x4
    // Offset: 0x1C
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DTSubString
    constexpr DTSubString(::System::ReadOnlySpan_1<::Il2CppChar> s_ = {}, int index_ = {}, int length_ = {}, ::System::DTSubStringType type_ = {}, int value_ = {}) noexcept : s{s_}, index{index_}, length{length_}, type{type_}, value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.ReadOnlySpan`1<System.Char> s
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn_s();
    // Get instance field reference: System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
    // Get instance field reference: System.DTSubStringType type
    [[deprecated("Use field access instead!")]] ::System::DTSubStringType& dyn_type();
    // Get instance field reference: System.Int32 value
    [[deprecated("Use field access instead!")]] int& dyn_value();
    // System.Char get_Item(System.Int32 relativeIndex)
    // Offset: 0x465345C
    ::Il2CppChar get_Item(int relativeIndex);
  }; // System.DTSubString
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::DTSubString::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::DTSubString::*)(int)>(&System::DTSubString::get_Item)> {
  static const MethodInfo* get() {
    static auto* relativeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DTSubString), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeIndex});
  }
};
