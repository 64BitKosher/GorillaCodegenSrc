// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeZoneInfo
#include "System/TimeZoneInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTimeKind
  struct DateTimeKind;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::TimeZoneInfo::CachedData);
DEFINE_IL2CPP_ARG_TYPE(::System::TimeZoneInfo::CachedData*, "System", "TimeZoneInfo/CachedData");
// Type namespace: System
namespace System {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.TimeZoneInfo/CachedData
  // [TokenAttribute] Offset: FFFFFFFF
  class TimeZoneInfo::CachedData : public ::Il2CppObject {
    public:
    public:
    // private System.TimeZoneInfo _localTimeZone
    // Size: 0x8
    // Offset: 0x10
    ::System::TimeZoneInfo* localTimeZone;
    // Field size check
    static_assert(sizeof(::System::TimeZoneInfo*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::TimeZoneInfo*
    constexpr operator ::System::TimeZoneInfo*() const noexcept {
      return localTimeZone;
    }
    // Get instance field reference: private System.TimeZoneInfo _localTimeZone
    [[deprecated("Use field access instead!")]] ::System::TimeZoneInfo*& dyn__localTimeZone();
    // private System.TimeZoneInfo CreateLocal()
    // Offset: 0x45B7E74
    ::System::TimeZoneInfo* CreateLocal();
    // public System.TimeZoneInfo get_Local()
    // Offset: 0x45B1B20
    ::System::TimeZoneInfo* get_Local();
    // public System.DateTimeKind GetCorrespondingKind(System.TimeZoneInfo timeZone)
    // Offset: 0x45B1BD0
    ::System::DateTimeKind GetCorrespondingKind(::System::TimeZoneInfo* timeZone);
    // public System.Void .ctor()
    // Offset: 0x45B6630
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo::CachedData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::CachedData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo::CachedData*, creationType>()));
    }
  }; // System.TimeZoneInfo/CachedData
  #pragma pack(pop)
  static check_size<sizeof(TimeZoneInfo::CachedData), 16 + sizeof(::System::TimeZoneInfo*)> __System_TimeZoneInfo_CachedDataSizeCheck;
  static_assert(sizeof(TimeZoneInfo::CachedData) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::TimeZoneInfo::CachedData::CreateLocal
// Il2CppName: CreateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (System::TimeZoneInfo::CachedData::*)()>(&System::TimeZoneInfo::CachedData::CreateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo::CachedData*), "CreateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CachedData::get_Local
// Il2CppName: get_Local
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (System::TimeZoneInfo::CachedData::*)()>(&System::TimeZoneInfo::CachedData::get_Local)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo::CachedData*), "get_Local", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CachedData::GetCorrespondingKind
// Il2CppName: GetCorrespondingKind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeKind (System::TimeZoneInfo::CachedData::*)(::System::TimeZoneInfo*)>(&System::TimeZoneInfo::CachedData::GetCorrespondingKind)> {
  static const MethodInfo* get() {
    static auto* timeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo::CachedData*), "GetCorrespondingKind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeZone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CachedData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
