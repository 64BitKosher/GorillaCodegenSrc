// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: AssemblyName
  class AssemblyName;
  // Forward declaring type: ManifestResourceInfo
  class ManifestResourceInfo;
  // Forward declaring type: Module
  class Module;
}
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
  // Forward declaring type: Evidence
  class Evidence;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::RuntimeAssembly);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::RuntimeAssembly*, "System.Reflection", "RuntimeAssembly");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.RuntimeAssembly
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  // [ComDefaultInterfaceAttribute] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: FFFFFFFF
  class RuntimeAssembly : public ::System::Reflection::Assembly {
    public:
    // Nested type: ::System::Reflection::RuntimeAssembly::UnmanagedMemoryStreamForModule
    class UnmanagedMemoryStreamForModule;
    public:
    // System.IntPtr _mono_assembly
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr mono_assembly;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Object _evidence
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* evidence;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Reflection.Assembly/ResolveEventHolder resolve_event_holder
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::Assembly::ResolveEventHolder* resolve_event_holder;
    // Field size check
    static_assert(sizeof(::System::Reflection::Assembly::ResolveEventHolder*) == 0x8);
    // private System.Object _minimum
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* minimum;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _optional
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* optional;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _refuse
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* refuse;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _granted
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* granted;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _denied
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* denied;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Boolean fromByteArray
    // Size: 0x1
    // Offset: 0x50
    bool fromByteArray;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fromByteArray and: assemblyName
    char __padding8[0x7] = {};
    // System.String assemblyName
    // Size: 0x8
    // Offset: 0x58
    ::StringW assemblyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: System.IntPtr _mono_assembly
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__mono_assembly();
    // Get instance field reference: private System.Object _evidence
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__evidence();
    // Get instance field reference: System.Reflection.Assembly/ResolveEventHolder resolve_event_holder
    [[deprecated("Use field access instead!")]] ::System::Reflection::Assembly::ResolveEventHolder*& dyn_resolve_event_holder();
    // Get instance field reference: private System.Object _minimum
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__minimum();
    // Get instance field reference: private System.Object _optional
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__optional();
    // Get instance field reference: private System.Object _refuse
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__refuse();
    // Get instance field reference: private System.Object _granted
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__granted();
    // Get instance field reference: private System.Object _denied
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__denied();
    // Get instance field reference: System.Boolean fromByteArray
    [[deprecated("Use field access instead!")]] bool& dyn_fromByteArray();
    // Get instance field reference: System.String assemblyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_assemblyName();
    // static System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.String partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x4593110
    static ::System::Reflection::RuntimeAssembly* LoadWithPartialNameInternal(::StringW partialName, ::System::Security::Policy::Evidence* securityEvidence, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // static System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x4593198
    static ::System::Reflection::RuntimeAssembly* LoadWithPartialNameInternal(::System::Reflection::AssemblyName* an, ::System::Security::Policy::Evidence* securityEvidence, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // static System.Byte[] GetAotId()
    // Offset: 0x459354C
    static ::ArrayW<uint8_t> GetAotId();
    // static private System.String get_code_base(System.Reflection.Assembly a, System.Boolean escaped)
    // Offset: 0x45935A8
    static ::StringW get_code_base(::System::Reflection::Assembly* a, bool escaped);
    // private System.String get_location()
    // Offset: 0x45935B0
    ::StringW get_location();
    // static System.String get_fullname(System.Reflection.Assembly a)
    // Offset: 0x45935B4
    static ::StringW get_fullname(::System::Reflection::Assembly* a);
    // static System.Boolean GetAotIdInternal(System.Byte[] aotid)
    // Offset: 0x45935A4
    static bool GetAotIdInternal(::ArrayW<uint8_t> aotid);
    // static System.String GetCodeBase(System.Reflection.Assembly a, System.Boolean escaped)
    // Offset: 0x45935BC
    static ::StringW GetCodeBase(::System::Reflection::Assembly* a, bool escaped);
    // private System.Boolean GetManifestResourceInfoInternal(System.String name, System.Reflection.ManifestResourceInfo info)
    // Offset: 0x4593644
    bool GetManifestResourceInfoInternal(::StringW name, ::System::Reflection::ManifestResourceInfo* info);
    // System.IntPtr GetManifestResourceInternal(System.String name, out System.Int32 size, out System.Reflection.Module module)
    // Offset: 0x4593750
    ::System::IntPtr GetManifestResourceInternal(::StringW name, ByRef<int> size, ByRef<::System::Reflection::Module*> module);
    // protected System.Void .ctor()
    // Offset: 0x459301C
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Void Assembly::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeAssembly* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::RuntimeAssembly::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeAssembly*, creationType>()));
    }
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x4593088
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Void Assembly::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // public override System.Reflection.AssemblyName GetName(System.Boolean copiedName)
    // Offset: 0x45931C0
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Reflection.AssemblyName Assembly::GetName(System.Boolean copiedName)
    ::System::Reflection::AssemblyName* GetName(bool copiedName);
    // public override System.Type GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x45931CC
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Type Assembly::GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    ::System::Type* GetType(::StringW name, bool throwOnError, bool ignoreCase);
    // public override System.Reflection.Module GetModule(System.String name)
    // Offset: 0x4593288
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Reflection.Module Assembly::GetModule(System.String name)
    ::System::Reflection::Module* GetModule(::StringW name);
    // public override System.Reflection.Module[] GetModules(System.Boolean getResourceModules)
    // Offset: 0x45933B0
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Reflection.Module[] Assembly::GetModules(System.Boolean getResourceModules)
    ::ArrayW<::System::Reflection::Module*> GetModules(bool getResourceModules);
    // public override System.Boolean get_ReflectionOnly()
    // Offset: 0x45935B8
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Boolean Assembly::get_ReflectionOnly()
    bool get_ReflectionOnly();
    // public override System.String get_CodeBase()
    // Offset: 0x45935C4
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String Assembly::get_CodeBase()
    ::StringW get_CodeBase();
    // public override System.String get_EscapedCodeBase()
    // Offset: 0x45935CC
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String Assembly::get_EscapedCodeBase()
    ::StringW get_EscapedCodeBase();
    // public override System.String get_FullName()
    // Offset: 0x45935D4
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String Assembly::get_FullName()
    ::StringW get_FullName();
    // override System.IntPtr get_MonoAssembly()
    // Offset: 0x45935D8
    // Implemented from: System.Reflection.Assembly
    // Base method: System.IntPtr Assembly::get_MonoAssembly()
    ::System::IntPtr get_MonoAssembly();
    // public override System.String get_Location()
    // Offset: 0x45935E0
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String Assembly::get_Location()
    ::StringW get_Location();
    // public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo(System.String resourceName)
    // Offset: 0x4593648
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Reflection.ManifestResourceInfo Assembly::GetManifestResourceInfo(System.String resourceName)
    ::System::Reflection::ManifestResourceInfo* GetManifestResourceInfo(::StringW resourceName);
    // public override System.String[] GetManifestResourceNames()
    // Offset: 0x459374C
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String[] Assembly::GetManifestResourceNames()
    ::ArrayW<::StringW> GetManifestResourceNames();
    // public override System.IO.Stream GetManifestResourceStream(System.String name)
    // Offset: 0x4593754
    // Implemented from: System.Reflection.Assembly
    // Base method: System.IO.Stream Assembly::GetManifestResourceStream(System.String name)
    ::System::IO::Stream* GetManifestResourceStream(::StringW name);
    // public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x4593B10
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Boolean Assembly::IsDefined(System.Type attributeType, System.Boolean inherit)
    bool IsDefined(::System::Type* attributeType, bool inherit);
    // public override System.Object[] GetCustomAttributes(System.Boolean inherit)
    // Offset: 0x4593B80
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Object[] Assembly::GetCustomAttributes(System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(bool inherit);
    // public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x4593BE8
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Object[] Assembly::GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(::System::Type* attributeType, bool inherit);
    // override System.Reflection.Module[] GetModulesInternal()
    // Offset: 0x4593C58
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Reflection.Module[] Assembly::GetModulesInternal()
    ::ArrayW<::System::Reflection::Module*> GetModulesInternal();
    // public override System.Int32 GetHashCode()
    // Offset: 0x4593C5C
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Int32 Assembly::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x4593C64
    // Implemented from: System.Reflection.Assembly
    // Base method: System.Boolean Assembly::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.String ToString()
    // Offset: 0x4593D04
    // Implemented from: System.Reflection.Assembly
    // Base method: System.String Assembly::ToString()
    ::StringW ToString();
  }; // System.Reflection.RuntimeAssembly
  #pragma pack(pop)
  static check_size<sizeof(RuntimeAssembly), 88 + sizeof(::StringW)> __System_Reflection_RuntimeAssemblySizeCheck;
  static_assert(sizeof(RuntimeAssembly) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal
// Il2CppName: LoadWithPartialNameInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeAssembly* (*)(::StringW, ::System::Security::Policy::Evidence*, ByRef<::System::Threading::StackCrawlMark>)>(&System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal)> {
  static const MethodInfo* get() {
    static auto* partialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* securityEvidence = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "LoadWithPartialNameInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partialName, securityEvidence, stackMark});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal
// Il2CppName: LoadWithPartialNameInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeAssembly* (*)(::System::Reflection::AssemblyName*, ::System::Security::Policy::Evidence*, ByRef<::System::Threading::StackCrawlMark>)>(&System::Reflection::RuntimeAssembly::LoadWithPartialNameInternal)> {
  static const MethodInfo* get() {
    static auto* an = &::il2cpp_utils::GetClassFromName("System.Reflection", "AssemblyName")->byval_arg;
    static auto* securityEvidence = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "LoadWithPartialNameInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{an, securityEvidence, stackMark});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetAotId
// Il2CppName: GetAotId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)()>(&System::Reflection::RuntimeAssembly::GetAotId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetAotId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_code_base
// Il2CppName: get_code_base
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Reflection::Assembly*, bool)>(&System::Reflection::RuntimeAssembly::get_code_base)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    static auto* escaped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_code_base", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, escaped});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_location
// Il2CppName: get_location
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_location)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_location", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_fullname
// Il2CppName: get_fullname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Reflection::Assembly*)>(&System::Reflection::RuntimeAssembly::get_fullname)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_fullname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetAotIdInternal
// Il2CppName: GetAotIdInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>)>(&System::Reflection::RuntimeAssembly::GetAotIdInternal)> {
  static const MethodInfo* get() {
    static auto* aotid = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetAotIdInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aotid});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetCodeBase
// Il2CppName: GetCodeBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Reflection::Assembly*, bool)>(&System::Reflection::RuntimeAssembly::GetCodeBase)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    static auto* escaped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetCodeBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, escaped});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetManifestResourceInfoInternal
// Il2CppName: GetManifestResourceInfoInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeAssembly::*)(::StringW, ::System::Reflection::ManifestResourceInfo*)>(&System::Reflection::RuntimeAssembly::GetManifestResourceInfoInternal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Reflection", "ManifestResourceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetManifestResourceInfoInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, info});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetManifestResourceInternal
// Il2CppName: GetManifestResourceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Reflection::RuntimeAssembly::*)(::StringW, ByRef<int>, ByRef<::System::Reflection::Module*>)>(&System::Reflection::RuntimeAssembly::GetManifestResourceInternal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* module = &::il2cpp_utils::GetClassFromName("System.Reflection", "Module")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetManifestResourceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, size, module});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Reflection::RuntimeAssembly::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Reflection::RuntimeAssembly::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::AssemblyName* (System::Reflection::RuntimeAssembly::*)(bool)>(&System::Reflection::RuntimeAssembly::GetName)> {
  static const MethodInfo* get() {
    static auto* copiedName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copiedName});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::RuntimeAssembly::*)(::StringW, bool, bool)>(&System::Reflection::RuntimeAssembly::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, throwOnError, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetModule
// Il2CppName: GetModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Module* (System::Reflection::RuntimeAssembly::*)(::StringW)>(&System::Reflection::RuntimeAssembly::GetModule)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetModules
// Il2CppName: GetModules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Module*> (System::Reflection::RuntimeAssembly::*)(bool)>(&System::Reflection::RuntimeAssembly::GetModules)> {
  static const MethodInfo* get() {
    static auto* getResourceModules = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetModules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{getResourceModules});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_ReflectionOnly
// Il2CppName: get_ReflectionOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_ReflectionOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_ReflectionOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_CodeBase
// Il2CppName: get_CodeBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_CodeBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_CodeBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_EscapedCodeBase
// Il2CppName: get_EscapedCodeBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_EscapedCodeBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_EscapedCodeBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_FullName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_MonoAssembly
// Il2CppName: get_MonoAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_MonoAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_MonoAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::get_Location
// Il2CppName: get_Location
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::get_Location)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "get_Location", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetManifestResourceInfo
// Il2CppName: GetManifestResourceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ManifestResourceInfo* (System::Reflection::RuntimeAssembly::*)(::StringW)>(&System::Reflection::RuntimeAssembly::GetManifestResourceInfo)> {
  static const MethodInfo* get() {
    static auto* resourceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetManifestResourceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resourceName});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetManifestResourceNames
// Il2CppName: GetManifestResourceNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::GetManifestResourceNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetManifestResourceNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetManifestResourceStream
// Il2CppName: GetManifestResourceStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Reflection::RuntimeAssembly::*)(::StringW)>(&System::Reflection::RuntimeAssembly::GetManifestResourceStream)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetManifestResourceStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeAssembly::*)(::System::Type*, bool)>(&System::Reflection::RuntimeAssembly::IsDefined)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::RuntimeAssembly::*)(bool)>(&System::Reflection::RuntimeAssembly::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::RuntimeAssembly::*)(::System::Type*, bool)>(&System::Reflection::RuntimeAssembly::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetModulesInternal
// Il2CppName: GetModulesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Module*> (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::GetModulesInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetModulesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeAssembly::*)(::Il2CppObject*)>(&System::Reflection::RuntimeAssembly::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeAssembly::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeAssembly::*)()>(&System::Reflection::RuntimeAssembly::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeAssembly*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
