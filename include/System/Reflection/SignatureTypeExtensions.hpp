// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: SignatureType
  class SignatureType;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: SignatureTypeExtensions
  class SignatureTypeExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::SignatureTypeExtensions);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::SignatureTypeExtensions*, "System.Reflection", "SignatureTypeExtensions");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.SignatureTypeExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class SignatureTypeExtensions : public ::Il2CppObject {
    public:
    // static public System.Boolean MatchesParameterTypeExactly(System.Type pattern, System.Reflection.ParameterInfo parameter)
    // Offset: 0x458BE24
    static bool MatchesParameterTypeExactly(::System::Type* pattern, ::System::Reflection::ParameterInfo* parameter);
    // static System.Boolean MatchesExactly(System.Reflection.SignatureType pattern, System.Type actual)
    // Offset: 0x458BED8
    static bool MatchesExactly(::System::Reflection::SignatureType* pattern, ::System::Type* actual);
    // static System.Type TryResolveAgainstGenericMethod(System.Reflection.SignatureType signatureType, System.Reflection.MethodInfo genericMethod)
    // Offset: 0x458C280
    static ::System::Type* TryResolveAgainstGenericMethod(::System::Reflection::SignatureType* signatureType, ::System::Reflection::MethodInfo* genericMethod);
    // static private System.Type TryResolve(System.Reflection.SignatureType signatureType, System.Type[] genericMethodParameters)
    // Offset: 0x458C2B8
    static ::System::Type* TryResolve(::System::Reflection::SignatureType* signatureType, ::ArrayW<::System::Type*> genericMethodParameters);
    // static private System.Type TryMakeArrayType(System.Type type)
    // Offset: 0x458C6AC
    static ::System::Type* TryMakeArrayType(::System::Type* type);
    // static private System.Type TryMakeArrayType(System.Type type, System.Int32 rank)
    // Offset: 0x458C748
    static ::System::Type* TryMakeArrayType(::System::Type* type, int rank);
    // static private System.Type TryMakeByRefType(System.Type type)
    // Offset: 0x458C7E4
    static ::System::Type* TryMakeByRefType(::System::Type* type);
    // static private System.Type TryMakePointerType(System.Type type)
    // Offset: 0x458C880
    static ::System::Type* TryMakePointerType(::System::Type* type);
    // static private System.Type TryMakeGenericType(System.Type type, System.Type[] instantiation)
    // Offset: 0x458C91C
    static ::System::Type* TryMakeGenericType(::System::Type* type, ::ArrayW<::System::Type*> instantiation);
  }; // System.Reflection.SignatureTypeExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::MatchesParameterTypeExactly
// Il2CppName: MatchesParameterTypeExactly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Reflection::ParameterInfo*)>(&System::Reflection::SignatureTypeExtensions::MatchesParameterTypeExactly)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "MatchesParameterTypeExactly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, parameter});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::MatchesExactly
// Il2CppName: MatchesExactly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::SignatureType*, ::System::Type*)>(&System::Reflection::SignatureTypeExtensions::MatchesExactly)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System.Reflection", "SignatureType")->byval_arg;
    static auto* actual = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "MatchesExactly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, actual});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryResolveAgainstGenericMethod
// Il2CppName: TryResolveAgainstGenericMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Reflection::SignatureType*, ::System::Reflection::MethodInfo*)>(&System::Reflection::SignatureTypeExtensions::TryResolveAgainstGenericMethod)> {
  static const MethodInfo* get() {
    static auto* signatureType = &::il2cpp_utils::GetClassFromName("System.Reflection", "SignatureType")->byval_arg;
    static auto* genericMethod = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryResolveAgainstGenericMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signatureType, genericMethod});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryResolve
// Il2CppName: TryResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Reflection::SignatureType*, ::ArrayW<::System::Type*>)>(&System::Reflection::SignatureTypeExtensions::TryResolve)> {
  static const MethodInfo* get() {
    static auto* signatureType = &::il2cpp_utils::GetClassFromName("System.Reflection", "SignatureType")->byval_arg;
    static auto* genericMethodParameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signatureType, genericMethodParameters});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryMakeArrayType
// Il2CppName: TryMakeArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Reflection::SignatureTypeExtensions::TryMakeArrayType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryMakeArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryMakeArrayType
// Il2CppName: TryMakeArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, int)>(&System::Reflection::SignatureTypeExtensions::TryMakeArrayType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* rank = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryMakeArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, rank});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryMakeByRefType
// Il2CppName: TryMakeByRefType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Reflection::SignatureTypeExtensions::TryMakeByRefType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryMakeByRefType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryMakePointerType
// Il2CppName: TryMakePointerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::Reflection::SignatureTypeExtensions::TryMakePointerType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryMakePointerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureTypeExtensions::TryMakeGenericType
// Il2CppName: TryMakeGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, ::ArrayW<::System::Type*>)>(&System::Reflection::SignatureTypeExtensions::TryMakeGenericType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* instantiation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureTypeExtensions*), "TryMakeGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, instantiation});
  }
};
