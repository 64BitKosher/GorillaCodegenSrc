// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.SignatureType
#include "System/Reflection/SignatureType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Type because it is already included!
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: SignatureHasElementType
  class SignatureHasElementType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::SignatureHasElementType);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::SignatureHasElementType*, "System.Reflection", "SignatureHasElementType");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.SignatureHasElementType
  // [TokenAttribute] Offset: FFFFFFFF
  class SignatureHasElementType : public ::System::Reflection::SignatureType {
    public:
    public:
    // private readonly System.Reflection.SignatureType _elementType
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::SignatureType* elementType;
    // Field size check
    static_assert(sizeof(::System::Reflection::SignatureType*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::RuntimeTypeHandle
    constexpr operator ::System::RuntimeTypeHandle() const noexcept = delete;
    // Get instance field reference: private readonly System.Reflection.SignatureType _elementType
    [[deprecated("Use field access instead!")]] ::System::Reflection::SignatureType*& dyn__elementType();
    // protected System.Void .ctor(System.Reflection.SignatureType elementType)
    // Offset: 0x458A09C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignatureHasElementType* New_ctor(::System::Reflection::SignatureType* elementType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::SignatureHasElementType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignatureHasElementType*, creationType>(elementType)));
    }
    // protected System.String get_Suffix()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Suffix();
    // public override System.Boolean get_IsGenericTypeDefinition()
    // Offset: 0x458A810
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsGenericTypeDefinition()
    bool get_IsGenericTypeDefinition();
    // protected override System.Boolean HasElementTypeImpl()
    // Offset: 0x458A818
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::HasElementTypeImpl()
    bool HasElementTypeImpl();
    // protected override System.Boolean IsArrayImpl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::IsArrayImpl()
    bool IsArrayImpl();
    // protected override System.Boolean IsByRefImpl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::IsByRefImpl()
    bool IsByRefImpl();
    // protected override System.Boolean IsPointerImpl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::IsPointerImpl()
    bool IsPointerImpl();
    // public override System.Boolean get_IsSZArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsSZArray()
    bool get_IsSZArray();
    // public override System.Boolean get_IsVariableBoundArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsVariableBoundArray()
    bool get_IsVariableBoundArray();
    // public override System.Boolean get_IsConstructedGenericType()
    // Offset: 0x458A820
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsConstructedGenericType()
    bool get_IsConstructedGenericType();
    // public override System.Boolean get_IsGenericParameter()
    // Offset: 0x458A828
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsGenericParameter()
    bool get_IsGenericParameter();
    // public override System.Boolean get_IsGenericMethodParameter()
    // Offset: 0x458A830
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_IsGenericMethodParameter()
    bool get_IsGenericMethodParameter();
    // public override System.Boolean get_ContainsGenericParameters()
    // Offset: 0x458A838
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Boolean SignatureType::get_ContainsGenericParameters()
    bool get_ContainsGenericParameters();
    // override System.Reflection.SignatureType get_ElementType()
    // Offset: 0x458A85C
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Reflection.SignatureType SignatureType::get_ElementType()
    ::System::Reflection::SignatureType* get_ElementType();
    // public override System.Int32 GetArrayRank()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Int32 SignatureType::GetArrayRank()
    int GetArrayRank();
    // public override System.Type GetGenericTypeDefinition()
    // Offset: 0x458A864
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Type SignatureType::GetGenericTypeDefinition()
    ::System::Type* GetGenericTypeDefinition();
    // public override System.Type[] GetGenericArguments()
    // Offset: 0x458A8B0
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Type[] SignatureType::GetGenericArguments()
    ::ArrayW<::System::Type*> GetGenericArguments();
    // public override System.Type[] get_GenericTypeArguments()
    // Offset: 0x458A93C
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Type[] SignatureType::get_GenericTypeArguments()
    ::ArrayW<::System::Type*> get_GenericTypeArguments();
    // public override System.Int32 get_GenericParameterPosition()
    // Offset: 0x458A9C8
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.Int32 SignatureType::get_GenericParameterPosition()
    int get_GenericParameterPosition();
    // public override System.String get_Name()
    // Offset: 0x458AA14
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.String SignatureType::get_Name()
    ::StringW get_Name();
    // public override System.String get_Namespace()
    // Offset: 0x458AA68
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.String SignatureType::get_Namespace()
    ::StringW get_Namespace();
    // public override System.String ToString()
    // Offset: 0x458AA8C
    // Implemented from: System.Reflection.SignatureType
    // Base method: System.String SignatureType::ToString()
    ::StringW ToString();
  }; // System.Reflection.SignatureHasElementType
  #pragma pack(pop)
  static check_size<sizeof(SignatureHasElementType), 24 + sizeof(::System::Reflection::SignatureType*)> __System_Reflection_SignatureHasElementTypeSizeCheck;
  static_assert(sizeof(SignatureHasElementType) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_Suffix
// Il2CppName: get_Suffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_Suffix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_Suffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsGenericTypeDefinition
// Il2CppName: get_IsGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsGenericTypeDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::HasElementTypeImpl
// Il2CppName: HasElementTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::HasElementTypeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "HasElementTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::IsArrayImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::IsByRefImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::IsPointerImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsSZArray
// Il2CppName: get_IsSZArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsSZArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsSZArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsVariableBoundArray
// Il2CppName: get_IsVariableBoundArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsVariableBoundArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsVariableBoundArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsConstructedGenericType
// Il2CppName: get_IsConstructedGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsConstructedGenericType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsConstructedGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsGenericParameter
// Il2CppName: get_IsGenericParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsGenericParameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsGenericParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_IsGenericMethodParameter
// Il2CppName: get_IsGenericMethodParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_IsGenericMethodParameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_IsGenericMethodParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_ContainsGenericParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_ElementType
// Il2CppName: get_ElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::SignatureType* (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_ElementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_ElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::GetArrayRank
// Il2CppName: GetArrayRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::GetArrayRank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "GetArrayRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::GetGenericTypeDefinition
// Il2CppName: GetGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::GetGenericTypeDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "GetGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::GetGenericArguments
// Il2CppName: GetGenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::GetGenericArguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "GetGenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_GenericTypeArguments
// Il2CppName: get_GenericTypeArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_GenericTypeArguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_GenericTypeArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_GenericParameterPosition
// Il2CppName: get_GenericParameterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_GenericParameterPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_GenericParameterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignatureHasElementType::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::SignatureHasElementType::*)()>(&System::Reflection::SignatureHasElementType::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignatureHasElementType*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
