// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: CustomAttributeTypedArgument
  struct CustomAttributeTypedArgument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::CustomAttributeTypedArgument, "System.Reflection", "CustomAttributeTypedArgument");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.CustomAttributeTypedArgument
  // [TokenAttribute] Offset: FFFFFFFF
  struct CustomAttributeTypedArgument/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Type <ArgumentType>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Type* ArgumentType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private readonly System.Object <Value>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppObject* Value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating value type constructor for type: CustomAttributeTypedArgument
    constexpr CustomAttributeTypedArgument(::System::Type* ArgumentType_ = {}, ::Il2CppObject* Value_ = {}) noexcept : ArgumentType{ArgumentType_}, Value{Value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Type <ArgumentType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$ArgumentType$k__BackingField();
    // Get instance field reference: private readonly System.Object <Value>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Value$k__BackingField();
    // public System.Void .ctor(System.Object value)
    // Offset: 0x458E92C
    CustomAttributeTypedArgument(::Il2CppObject* value);
    // public System.Void .ctor(System.Type argumentType, System.Object value)
    // Offset: 0x4587370
    // ABORTED: conflicts with another method.  CustomAttributeTypedArgument(::System::Type* argumentType, ::Il2CppObject* value);
    // public System.Type get_ArgumentType()
    // Offset: 0x458EA7C
    ::System::Type* get_ArgumentType();
    // public System.Object get_Value()
    // Offset: 0x458EA84
    ::Il2CppObject* get_Value();
    // System.String ToString(System.Boolean typed)
    // Offset: 0x458DFE4
    ::StringW ToString(bool typed);
    // static private System.Object CanonicalizeValue(System.Object value)
    // Offset: 0x458E9C4
    static ::Il2CppObject* CanonicalizeValue(::Il2CppObject* value);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x458EA8C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x458EAFC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x458EC54
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Reflection.CustomAttributeTypedArgument
  #pragma pack(pop)
  static check_size<sizeof(CustomAttributeTypedArgument), 8 + sizeof(::Il2CppObject*)> __System_Reflection_CustomAttributeTypedArgumentSizeCheck;
  static_assert(sizeof(CustomAttributeTypedArgument) == 0x10);
  // static public System.Boolean op_Equality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right)
  // Offset: 0x458EB60
  bool operator ==(const ::System::Reflection::CustomAttributeTypedArgument& left, const ::System::Reflection::CustomAttributeTypedArgument& right);
  // static public System.Boolean op_Inequality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right)
  // Offset: 0x458EBD8
  bool operator !=(const ::System::Reflection::CustomAttributeTypedArgument& left, const ::System::Reflection::CustomAttributeTypedArgument& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::CustomAttributeTypedArgument
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::CustomAttributeTypedArgument
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::get_ArgumentType
// Il2CppName: get_ArgumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::CustomAttributeTypedArgument::*)()>(&System::Reflection::CustomAttributeTypedArgument::get_ArgumentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "get_ArgumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Reflection::CustomAttributeTypedArgument::*)()>(&System::Reflection::CustomAttributeTypedArgument::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::CustomAttributeTypedArgument::*)(bool)>(&System::Reflection::CustomAttributeTypedArgument::ToString)> {
  static const MethodInfo* get() {
    static auto* typed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typed});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::CanonicalizeValue
// Il2CppName: CanonicalizeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::Il2CppObject*)>(&System::Reflection::CustomAttributeTypedArgument::CanonicalizeValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "CanonicalizeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::CustomAttributeTypedArgument::*)(::Il2CppObject*)>(&System::Reflection::CustomAttributeTypedArgument::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::CustomAttributeTypedArgument::*)()>(&System::Reflection::CustomAttributeTypedArgument::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::CustomAttributeTypedArgument::*)()>(&System::Reflection::CustomAttributeTypedArgument::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeTypedArgument), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeTypedArgument::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
