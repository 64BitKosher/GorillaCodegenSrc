// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: ReflectionTypeLoadException
  class ReflectionTypeLoadException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::ReflectionTypeLoadException);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::ReflectionTypeLoadException*, "System.Reflection", "ReflectionTypeLoadException");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.ReflectionTypeLoadException
  // [TokenAttribute] Offset: FFFFFFFF
  class ReflectionTypeLoadException : public ::System::SystemException {
    public:
    // Writing base type padding for base size: 0x8C to desired offset: 0x90
    char ___base_padding[0x4] = {};
    public:
    // private readonly System.Type[] <Types>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::System::Type*> Types;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Type*>) == 0x8);
    // private readonly System.Exception[] <LoaderExceptions>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::System::Exception*> LoaderExceptions;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Exception*>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Type[] <Types>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& dyn_$Types$k__BackingField();
    // Get instance field reference: private readonly System.Exception[] <LoaderExceptions>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Exception*>& dyn_$LoaderExceptions$k__BackingField();
    // public System.Void .ctor(System.Type[] classes, System.Exception[] exceptions)
    // Offset: 0x4589C3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionTypeLoadException* New_ctor(::ArrayW<::System::Type*> classes, ::ArrayW<::System::Exception*> exceptions) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::ReflectionTypeLoadException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionTypeLoadException*, creationType>(classes, exceptions)));
    }
    // public System.Type[] get_Types()
    // Offset: 0x4589EF8
    ::ArrayW<::System::Type*> get_Types();
    // public System.Exception[] get_LoaderExceptions()
    // Offset: 0x4589F00
    ::ArrayW<::System::Exception*> get_LoaderExceptions();
    // private System.String CreateString(System.Boolean isMessage)
    // Offset: 0x4589F10
    ::StringW CreateString(bool isMessage);
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x4589C94
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Base method: System.Void Exception::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionTypeLoadException* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::ReflectionTypeLoadException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionTypeLoadException*, creationType>(info, context)));
    }
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x4589DD0
    // Implemented from: System.Exception
    // Base method: System.Void Exception::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // public override System.String get_Message()
    // Offset: 0x4589F08
    // Implemented from: System.Exception
    // Base method: System.String Exception::get_Message()
    ::StringW get_Message();
    // public override System.String ToString()
    // Offset: 0x458A04C
    // Implemented from: System.Exception
    // Base method: System.String Exception::ToString()
    ::StringW ToString();
  }; // System.Reflection.ReflectionTypeLoadException
  #pragma pack(pop)
  static check_size<sizeof(ReflectionTypeLoadException), 152 + sizeof(::ArrayW<::System::Exception*>)> __System_Reflection_ReflectionTypeLoadExceptionSizeCheck;
  static_assert(sizeof(ReflectionTypeLoadException) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::get_Types
// Il2CppName: get_Types
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::Reflection::ReflectionTypeLoadException::*)()>(&System::Reflection::ReflectionTypeLoadException::get_Types)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "get_Types", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::get_LoaderExceptions
// Il2CppName: get_LoaderExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Exception*> (System::Reflection::ReflectionTypeLoadException::*)()>(&System::Reflection::ReflectionTypeLoadException::get_LoaderExceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "get_LoaderExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::ReflectionTypeLoadException::*)(bool)>(&System::Reflection::ReflectionTypeLoadException::CreateString)> {
  static const MethodInfo* get() {
    static auto* isMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMessage});
  }
};
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Reflection::ReflectionTypeLoadException::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Reflection::ReflectionTypeLoadException::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::ReflectionTypeLoadException::*)()>(&System::Reflection::ReflectionTypeLoadException::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::ReflectionTypeLoadException::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::ReflectionTypeLoadException::*)()>(&System::Reflection::ReflectionTypeLoadException::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::ReflectionTypeLoadException*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
