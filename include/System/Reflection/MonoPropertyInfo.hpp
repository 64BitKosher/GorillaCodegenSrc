// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Reflection.PropertyAttributes
#include "System/Reflection/PropertyAttributes.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: MonoPropertyInfo
  struct MonoPropertyInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::MonoPropertyInfo, "System.Reflection", "MonoPropertyInfo");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.MonoPropertyInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct MonoPropertyInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Type parent
    // Size: 0x8
    // Offset: 0x0
    ::System::Type* parent;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Type declaring_type
    // Size: 0x8
    // Offset: 0x8
    ::System::Type* declaring_type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Reflection.MethodInfo get_method
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::MethodInfo* get_method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Reflection.MethodInfo set_method
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::MethodInfo* set_method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Reflection.PropertyAttributes attrs
    // Size: 0x4
    // Offset: 0x28
    ::System::Reflection::PropertyAttributes attrs;
    // Field size check
    static_assert(sizeof(::System::Reflection::PropertyAttributes) == 0x4);
    public:
    // Creating value type constructor for type: MonoPropertyInfo
    constexpr MonoPropertyInfo(::System::Type* parent_ = {}, ::System::Type* declaring_type_ = {}, ::StringW name_ = {}, ::System::Reflection::MethodInfo* get_method_ = {}, ::System::Reflection::MethodInfo* set_method_ = {}, ::System::Reflection::PropertyAttributes attrs_ = {}) noexcept : parent{parent_}, declaring_type{declaring_type_}, name{name_}, get_method{get_method_}, set_method{set_method_}, attrs{attrs_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Type parent
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_parent();
    // Get instance field reference: public System.Type declaring_type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_declaring_type();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Reflection.MethodInfo get_method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_get_method();
    // Get instance field reference: public System.Reflection.MethodInfo set_method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_set_method();
    // Get instance field reference: public System.Reflection.PropertyAttributes attrs
    [[deprecated("Use field access instead!")]] ::System::Reflection::PropertyAttributes& dyn_attrs();
  }; // System.Reflection.MonoPropertyInfo
  #pragma pack(pop)
  static check_size<sizeof(MonoPropertyInfo), 40 + sizeof(::System::Reflection::PropertyAttributes)> __System_Reflection_MonoPropertyInfoSizeCheck;
  static_assert(sizeof(MonoPropertyInfo) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
