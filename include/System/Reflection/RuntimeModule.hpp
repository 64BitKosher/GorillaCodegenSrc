// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: RuntimeModule
  class RuntimeModule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::RuntimeModule);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::RuntimeModule*, "System.Reflection", "RuntimeModule");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.RuntimeModule
  // [TokenAttribute] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  // [ComDefaultInterfaceAttribute] Offset: FFFFFFFF
  class RuntimeModule : public ::System::Reflection::Module {
    public:
    public:
    // System.IntPtr _impl
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr impl;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // System.Reflection.Assembly assembly
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::Assembly* assembly;
    // Field size check
    static_assert(sizeof(::System::Reflection::Assembly*) == 0x8);
    // System.String fqname
    // Size: 0x8
    // Offset: 0x20
    ::StringW fqname;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String name
    // Size: 0x8
    // Offset: 0x28
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String scopename
    // Size: 0x8
    // Offset: 0x30
    ::StringW scopename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Boolean is_resource
    // Size: 0x1
    // Offset: 0x38
    bool is_resource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: is_resource and: token
    char __padding5[0x3] = {};
    // System.Int32 token
    // Size: 0x4
    // Offset: 0x3C
    int token;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: System.IntPtr _impl
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__impl();
    // Get instance field reference: System.Reflection.Assembly assembly
    [[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& dyn_assembly();
    // Get instance field reference: System.String fqname
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fqname();
    // Get instance field reference: System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: System.String scopename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_scopename();
    // Get instance field reference: System.Boolean is_resource
    [[deprecated("Use field access instead!")]] bool& dyn_is_resource();
    // Get instance field reference: System.Int32 token
    [[deprecated("Use field access instead!")]] int& dyn_token();
    // System.Reflection.RuntimeAssembly GetRuntimeAssembly()
    // Offset: 0x4597FB0
    ::System::Reflection::RuntimeAssembly* GetRuntimeAssembly();
    // static private System.Void GetGuidInternal(System.IntPtr module, System.Byte[] guid)
    // Offset: 0x45980A8
    static void GetGuidInternal(::System::IntPtr module, ::ArrayW<uint8_t> guid);
    // public override System.Reflection.Assembly get_Assembly()
    // Offset: 0x4597DA4
    // Implemented from: System.Reflection.Module
    // Base method: System.Reflection.Assembly Module::get_Assembly()
    ::System::Reflection::Assembly* get_Assembly();
    // public override System.String get_ScopeName()
    // Offset: 0x4597DAC
    // Implemented from: System.Reflection.Module
    // Base method: System.String Module::get_ScopeName()
    ::StringW get_ScopeName();
    // public override System.Guid get_ModuleVersionId()
    // Offset: 0x4597DB4
    // Implemented from: System.Reflection.Module
    // Base method: System.Guid Module::get_ModuleVersionId()
    ::System::Guid get_ModuleVersionId();
    // public override System.String get_FullyQualifiedName()
    // Offset: 0x4597DC4
    // Implemented from: System.Reflection.Module
    // Base method: System.String Module::get_FullyQualifiedName()
    ::StringW get_FullyQualifiedName();
    // public override System.Boolean IsResource()
    // Offset: 0x4597DCC
    // Implemented from: System.Reflection.Module
    // Base method: System.Boolean Module::IsResource()
    bool IsResource();
    // public override System.Object[] GetCustomAttributes(System.Boolean inherit)
    // Offset: 0x4597DD4
    // Implemented from: System.Reflection.Module
    // Base method: System.Object[] Module::GetCustomAttributes(System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(bool inherit);
    // public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x4597E3C
    // Implemented from: System.Reflection.Module
    // Base method: System.Object[] Module::GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(::System::Type* attributeType, bool inherit);
    // public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x4597EAC
    // Implemented from: System.Reflection.Module
    // Base method: System.Boolean Module::IsDefined(System.Type attributeType, System.Boolean inherit)
    bool IsDefined(::System::Type* attributeType, bool inherit);
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x4597F1C
    // Implemented from: System.Reflection.Module
    // Base method: System.Void Module::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // override System.Guid GetModuleVersionId()
    // Offset: 0x4598028
    // Implemented from: System.Reflection.Module
    // Base method: System.Guid Module::GetModuleVersionId()
    ::System::Guid GetModuleVersionId();
    // public System.Void .ctor()
    // Offset: 0x45980AC
    // Implemented from: System.Reflection.Module
    // Base method: System.Void Module::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::RuntimeModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeModule*, creationType>()));
    }
  }; // System.Reflection.RuntimeModule
  #pragma pack(pop)
  static check_size<sizeof(RuntimeModule), 60 + sizeof(int)> __System_Reflection_RuntimeModuleSizeCheck;
  static_assert(sizeof(RuntimeModule) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetRuntimeAssembly
// Il2CppName: GetRuntimeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeAssembly* (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::GetRuntimeAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetRuntimeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetGuidInternal
// Il2CppName: GetGuidInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::ArrayW<uint8_t>)>(&System::Reflection::RuntimeModule::GetGuidInternal)> {
  static const MethodInfo* get() {
    static auto* module = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetGuidInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{module, guid});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::get_Assembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::get_ScopeName
// Il2CppName: get_ScopeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::get_ScopeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "get_ScopeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::get_ModuleVersionId
// Il2CppName: get_ModuleVersionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::get_ModuleVersionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "get_ModuleVersionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::get_FullyQualifiedName
// Il2CppName: get_FullyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::get_FullyQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "get_FullyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::IsResource
// Il2CppName: IsResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::IsResource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "IsResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::RuntimeModule::*)(bool)>(&System::Reflection::RuntimeModule::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::RuntimeModule::*)(::System::Type*, bool)>(&System::Reflection::RuntimeModule::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::RuntimeModule::*)(::System::Type*, bool)>(&System::Reflection::RuntimeModule::IsDefined)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Reflection::RuntimeModule::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Reflection::RuntimeModule::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::GetModuleVersionId
// Il2CppName: GetModuleVersionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Reflection::RuntimeModule::*)()>(&System::Reflection::RuntimeModule::GetModuleVersionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::RuntimeModule*), "GetModuleVersionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::RuntimeModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
