// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Reflection.CustomAttributeTypedArgument
#include "System/Reflection/CustomAttributeTypedArgument.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: CustomAttributeNamedArgument
  struct CustomAttributeNamedArgument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::CustomAttributeNamedArgument, "System.Reflection", "CustomAttributeNamedArgument");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.CustomAttributeNamedArgument
  // [TokenAttribute] Offset: FFFFFFFF
  struct CustomAttributeNamedArgument/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField
    // Size: 0x10
    // Offset: 0x0
    ::System::Reflection::CustomAttributeTypedArgument TypedValue;
    // Field size check
    static_assert(sizeof(::System::Reflection::CustomAttributeTypedArgument) == 0x10);
    // private readonly System.Boolean <IsField>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsField and: MemberName
    char __padding1[0x7] = {};
    // private readonly System.String <MemberName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW MemberName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Type _attributeType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* attributeType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Reflection.MemberInfo _lazyMemberInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::Reflection::MemberInfo* lazyMemberInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::MemberInfo*) == 0x8);
    public:
    // Creating value type constructor for type: CustomAttributeNamedArgument
    constexpr CustomAttributeNamedArgument(::System::Reflection::CustomAttributeTypedArgument TypedValue_ = {}, bool IsField_ = {}, ::StringW MemberName_ = {}, ::System::Type* attributeType_ = {}, ::System::Reflection::MemberInfo* lazyMemberInfo_ = {}) noexcept : TypedValue{TypedValue_}, IsField{IsField_}, MemberName{MemberName_}, attributeType{attributeType_}, lazyMemberInfo{lazyMemberInfo_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::CustomAttributeTypedArgument& dyn_$TypedValue$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <IsField>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsField$k__BackingField();
    // Get instance field reference: private readonly System.String <MemberName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$MemberName$k__BackingField();
    // Get instance field reference: private readonly System.Type _attributeType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__attributeType();
    // Get instance field reference: private System.Reflection.MemberInfo _lazyMemberInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& dyn__lazyMemberInfo();
    // System.Void .ctor(System.Type attributeType, System.String memberName, System.Boolean isField, System.Reflection.CustomAttributeTypedArgument typedValue)
    // Offset: 0x458D5C8
    CustomAttributeNamedArgument(::System::Type* attributeType, ::StringW memberName, bool isField, ::System::Reflection::CustomAttributeTypedArgument typedValue);
    // public System.Void .ctor(System.Reflection.MemberInfo memberInfo, System.Object value)
    // Offset: 0x458D638
    CustomAttributeNamedArgument(::System::Reflection::MemberInfo* memberInfo, ::Il2CppObject* value);
    // public System.Void .ctor(System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument)
    // Offset: 0x458D884
    CustomAttributeNamedArgument(::System::Reflection::MemberInfo* memberInfo, ::System::Reflection::CustomAttributeTypedArgument typedArgument);
    // public System.Reflection.CustomAttributeTypedArgument get_TypedValue()
    // Offset: 0x458D9D0
    ::System::Reflection::CustomAttributeTypedArgument get_TypedValue();
    // public System.Boolean get_IsField()
    // Offset: 0x458D9DC
    bool get_IsField();
    // public System.String get_MemberName()
    // Offset: 0x458D9E4
    ::StringW get_MemberName();
    // public System.Reflection.MemberInfo get_MemberInfo()
    // Offset: 0x458D9EC
    ::System::Reflection::MemberInfo* get_MemberInfo();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x458DAD4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x458DB4C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x458DCBC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Reflection.CustomAttributeNamedArgument
  #pragma pack(pop)
  static check_size<sizeof(CustomAttributeNamedArgument), 40 + sizeof(::System::Reflection::MemberInfo*)> __System_Reflection_CustomAttributeNamedArgumentSizeCheck;
  static_assert(sizeof(CustomAttributeNamedArgument) == 0x30);
  // static public System.Boolean op_Equality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right)
  // Offset: 0x458DBB8
  bool operator ==(const ::System::Reflection::CustomAttributeNamedArgument& left, const ::System::Reflection::CustomAttributeNamedArgument& right);
  // static public System.Boolean op_Inequality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right)
  // Offset: 0x458DC38
  bool operator !=(const ::System::Reflection::CustomAttributeNamedArgument& left, const ::System::Reflection::CustomAttributeNamedArgument& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::CustomAttributeNamedArgument
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::CustomAttributeNamedArgument
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::CustomAttributeNamedArgument
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::get_TypedValue
// Il2CppName: get_TypedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::CustomAttributeTypedArgument (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::get_TypedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "get_TypedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::get_IsField
// Il2CppName: get_IsField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::get_IsField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "get_IsField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::get_MemberName
// Il2CppName: get_MemberName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::get_MemberName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "get_MemberName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::get_MemberInfo
// Il2CppName: get_MemberInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MemberInfo* (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::get_MemberInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "get_MemberInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::CustomAttributeNamedArgument::*)(::Il2CppObject*)>(&System::Reflection::CustomAttributeNamedArgument::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::CustomAttributeNamedArgument::*)()>(&System::Reflection::CustomAttributeNamedArgument::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::CustomAttributeNamedArgument), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::CustomAttributeNamedArgument::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
