// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.SignatureHasElementType
#include "System/Reflection/SignatureHasElementType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Skipping declaration: SignatureType because it is already included!
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: SignaturePointerType
  class SignaturePointerType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::SignaturePointerType);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::SignaturePointerType*, "System.Reflection", "SignaturePointerType");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.SignaturePointerType
  // [TokenAttribute] Offset: FFFFFFFF
  class SignaturePointerType : public ::System::Reflection::SignatureHasElementType {
    public:
    // System.Void .ctor(System.Reflection.SignatureType elementType)
    // Offset: 0x458AAE0
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Void SignatureHasElementType::.ctor(System.Reflection.SignatureType elementType)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignaturePointerType* New_ctor(::System::Reflection::SignatureType* elementType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::SignaturePointerType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignaturePointerType*, creationType>(elementType)));
    }
    // protected override System.Boolean IsArrayImpl()
    // Offset: 0x458AB0C
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Boolean SignatureHasElementType::IsArrayImpl()
    bool IsArrayImpl();
    // protected override System.Boolean IsByRefImpl()
    // Offset: 0x458AB14
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Boolean SignatureHasElementType::IsByRefImpl()
    bool IsByRefImpl();
    // protected override System.Boolean IsPointerImpl()
    // Offset: 0x458AB1C
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Boolean SignatureHasElementType::IsPointerImpl()
    bool IsPointerImpl();
    // public override System.Boolean get_IsSZArray()
    // Offset: 0x458AB24
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Boolean SignatureHasElementType::get_IsSZArray()
    bool get_IsSZArray();
    // public override System.Boolean get_IsVariableBoundArray()
    // Offset: 0x458AB2C
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Boolean SignatureHasElementType::get_IsVariableBoundArray()
    bool get_IsVariableBoundArray();
    // public override System.Int32 GetArrayRank()
    // Offset: 0x458AB34
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.Int32 SignatureHasElementType::GetArrayRank()
    int GetArrayRank();
    // protected override System.String get_Suffix()
    // Offset: 0x458AB80
    // Implemented from: System.Reflection.SignatureHasElementType
    // Base method: System.String SignatureHasElementType::get_Suffix()
    ::StringW get_Suffix();
  }; // System.Reflection.SignaturePointerType
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::IsArrayImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::IsByRefImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::IsPointerImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::get_IsSZArray
// Il2CppName: get_IsSZArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::get_IsSZArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "get_IsSZArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::get_IsVariableBoundArray
// Il2CppName: get_IsVariableBoundArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::get_IsVariableBoundArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "get_IsVariableBoundArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::GetArrayRank
// Il2CppName: GetArrayRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::GetArrayRank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "GetArrayRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::SignaturePointerType::get_Suffix
// Il2CppName: get_Suffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::SignaturePointerType::*)()>(&System::Reflection::SignaturePointerType::get_Suffix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::SignaturePointerType*), "get_Suffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
