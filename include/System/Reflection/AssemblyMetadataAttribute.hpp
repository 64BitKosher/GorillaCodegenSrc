// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: AssemblyMetadataAttribute
  class AssemblyMetadataAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::AssemblyMetadataAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::AssemblyMetadataAttribute*, "System.Reflection", "AssemblyMetadataAttribute");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.AssemblyMetadataAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class AssemblyMetadataAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.String <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <Value>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.String <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Key$k__BackingField();
    // Get instance field reference: private readonly System.String <Value>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Value$k__BackingField();
    // public System.Void .ctor(System.String key, System.String value)
    // Offset: 0x4586048
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssemblyMetadataAttribute* New_ctor(::StringW key, ::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::AssemblyMetadataAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssemblyMetadataAttribute*, creationType>(key, value)));
    }
  }; // System.Reflection.AssemblyMetadataAttribute
  #pragma pack(pop)
  static check_size<sizeof(AssemblyMetadataAttribute), 24 + sizeof(::StringW)> __System_Reflection_AssemblyMetadataAttributeSizeCheck;
  static_assert(sizeof(AssemblyMetadataAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::AssemblyMetadataAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
