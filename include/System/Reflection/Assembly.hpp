// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.ICustomAttributeProvider
#include "System/Reflection/ICustomAttributeProvider.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.InteropServices._Assembly
#include "System/Runtime/InteropServices/_Assembly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: AssemblyNameFlags
  struct AssemblyNameFlags;
  // Forward declaring type: Module
  class Module;
  // Forward declaring type: AssemblyName
  class AssemblyName;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
  // Forward declaring type: ManifestResourceInfo
  class ManifestResourceInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
  // Forward declaring type: Evidence
  class Evidence;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::Assembly);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::Assembly*, "System.Reflection", "Assembly");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.Assembly
  // [TokenAttribute] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  // [ComDefaultInterfaceAttribute] Offset: FFFFFFFF
  class Assembly : public ::Il2CppObject/*, public ::System::Reflection::ICustomAttributeProvider, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::InteropServices::_Assembly*/ {
    public:
    // Nested type: ::System::Reflection::Assembly::ResolveEventHolder
    class ResolveEventHolder;
    // Creating interface conversion operator: operator ::System::Reflection::ICustomAttributeProvider
    operator ::System::Reflection::ICustomAttributeProvider() noexcept {
      return *reinterpret_cast<::System::Reflection::ICustomAttributeProvider*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::InteropServices::_Assembly
    operator ::System::Runtime::InteropServices::_Assembly() noexcept {
      return *reinterpret_cast<::System::Runtime::InteropServices::_Assembly*>(this);
    }
    // public System.String get_CodeBase()
    // Offset: 0x458FBBC
    ::StringW get_CodeBase();
    // public System.String get_EscapedCodeBase()
    // Offset: 0x458FBF4
    ::StringW get_EscapedCodeBase();
    // public System.String get_FullName()
    // Offset: 0x458FC2C
    ::StringW get_FullName();
    // System.IntPtr get_MonoAssembly()
    // Offset: 0x458FC64
    ::System::IntPtr get_MonoAssembly();
    // public System.String get_Location()
    // Offset: 0x458FC9C
    ::StringW get_Location();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x458FCD4
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // public System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x458FD0C
    bool IsDefined(::System::Type* attributeType, bool inherit);
    // public System.Object[] GetCustomAttributes(System.Boolean inherit)
    // Offset: 0x458FD44
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(bool inherit);
    // public System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x458FD7C
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(::System::Type* attributeType, bool inherit);
    // public System.IO.Stream GetManifestResourceStream(System.String name)
    // Offset: 0x458FDB4
    ::System::IO::Stream* GetManifestResourceStream(::StringW name);
    // System.IO.Stream GetManifestResourceStream(System.Type type, System.String name, System.Boolean skipSecurityCheck, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x457EDDC
    ::System::IO::Stream* GetManifestResourceStream(::System::Type* type, ::StringW name, bool skipSecurityCheck, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // System.IO.Stream GetManifestResourceStream(System.String name, ref System.Threading.StackCrawlMark stackMark, System.Boolean skipSecurityCheck)
    // Offset: 0x457F2DC
    ::System::IO::Stream* GetManifestResourceStream(::StringW name, ByRef<::System::Threading::StackCrawlMark> stackMark, bool skipSecurityCheck);
    // System.String GetSimpleName()
    // Offset: 0x457EC44
    ::StringW GetSimpleName();
    // System.Byte[] GetPublicKey()
    // Offset: 0x457FD34
    ::ArrayW<uint8_t> GetPublicKey();
    // System.Version GetVersion()
    // Offset: 0x458FDEC
    ::System::Version* GetVersion();
    // private System.Reflection.AssemblyNameFlags GetFlags()
    // Offset: 0x458FE18
    ::System::Reflection::AssemblyNameFlags GetFlags();
    // System.Type[] GetTypes(System.Boolean exportedOnly)
    // Offset: 0x458FE44
    ::ArrayW<::System::Type*> GetTypes(bool exportedOnly);
    // public System.Type[] GetTypes()
    // Offset: 0x458FE4C
    ::ArrayW<::System::Type*> GetTypes();
    // public System.Type GetType(System.String name, System.Boolean throwOnError)
    // Offset: 0x458FE60
    ::System::Type* GetType(::StringW name, bool throwOnError);
    // public System.Type GetType(System.String name)
    // Offset: 0x458FE78
    ::System::Type* GetType(::StringW name);
    // System.Type InternalGetType(System.Reflection.Module module, System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x458FE90
    ::System::Type* InternalGetType(::System::Reflection::Module* module, ::StringW name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.AssemblyName GetName(System.Boolean copiedName)
    // Offset: 0x458FE9C
    ::System::Reflection::AssemblyName* GetName(bool copiedName);
    // public System.Reflection.AssemblyName GetName()
    // Offset: 0x458FED4
    ::System::Reflection::AssemblyName* GetName();
    // static public System.Reflection.Assembly GetAssembly(System.Type type)
    // Offset: 0x458FEF0
    static ::System::Reflection::Assembly* GetAssembly(::System::Type* type);
    // static public System.Reflection.Assembly GetEntryAssembly()
    // Offset: 0x458FFB4
    static ::System::Reflection::Assembly* GetEntryAssembly();
    // System.Reflection.RuntimeAssembly InternalGetSatelliteAssembly(System.String name, System.Globalization.CultureInfo culture, System.Version version, System.Boolean throwOnFileNotFound, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x457F42C
    ::System::Reflection::RuntimeAssembly* InternalGetSatelliteAssembly(::StringW name, ::System::Globalization::CultureInfo* culture, ::System::Version* version, bool throwOnFileNotFound, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // static private System.Reflection.Assembly LoadFrom(System.String assemblyFile, System.Boolean refOnly, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x4590008
    static ::System::Reflection::Assembly* LoadFrom(::StringW assemblyFile, bool refOnly, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // static public System.Reflection.Assembly Load(System.String assemblyString)
    // Offset: 0x4590010
    static ::System::Reflection::Assembly* Load(::StringW assemblyString);
    // static public System.Reflection.Assembly ReflectionOnlyLoad(System.String assemblyString)
    // Offset: 0x4590038
    static ::System::Reflection::Assembly* ReflectionOnlyLoad(::StringW assemblyString);
    // static public System.Reflection.Assembly LoadWithPartialName(System.String partialName)
    // Offset: 0x4590080
    static ::System::Reflection::Assembly* LoadWithPartialName(::StringW partialName);
    // static private System.Reflection.Assembly load_with_partial_name(System.String name, System.Security.Policy.Evidence e)
    // Offset: 0x4590094
    static ::System::Reflection::Assembly* load_with_partial_name(::StringW name, ::System::Security::Policy::Evidence* e);
    // static public System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence)
    // Offset: 0x459008C
    static ::System::Reflection::Assembly* LoadWithPartialName(::StringW partialName, ::System::Security::Policy::Evidence* securityEvidence);
    // static System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence, System.Boolean oldBehavior)
    // Offset: 0x4590098
    static ::System::Reflection::Assembly* LoadWithPartialName(::StringW partialName, ::System::Security::Policy::Evidence* securityEvidence, bool oldBehavior);
    // public System.Reflection.Module[] GetModules()
    // Offset: 0x4590100
    ::ArrayW<::System::Reflection::Module*> GetModules();
    // System.Reflection.Module[] GetModulesInternal()
    // Offset: 0x4590114
    ::ArrayW<::System::Reflection::Module*> GetModulesInternal();
    // static public System.Reflection.Assembly GetExecutingAssembly()
    // Offset: 0x459014C
    static ::System::Reflection::Assembly* GetExecutingAssembly();
    // static public System.Reflection.Assembly GetCallingAssembly()
    // Offset: 0x457FFC8
    static ::System::Reflection::Assembly* GetCallingAssembly();
    // public System.String[] GetManifestResourceNames()
    // Offset: 0x459018C
    ::ArrayW<::StringW> GetManifestResourceNames();
    // public System.Reflection.ManifestResourceInfo GetManifestResourceInfo(System.String resourceName)
    // Offset: 0x45901C4
    ::System::Reflection::ManifestResourceInfo* GetManifestResourceInfo(::StringW resourceName);
    // public System.Boolean get_ReflectionOnly()
    // Offset: 0x45901FC
    bool get_ReflectionOnly();
    // static private System.Exception CreateNIE()
    // Offset: 0x4590244
    static ::System::Exception* CreateNIE();
    // public System.Boolean get_IsFullyTrusted()
    // Offset: 0x45902B0
    bool get_IsFullyTrusted();
    // public System.Type GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x45902B8
    ::System::Type* GetType(::StringW name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.Module GetModule(System.String name)
    // Offset: 0x45902DC
    ::System::Reflection::Module* GetModule(::StringW name);
    // public System.Reflection.Module[] GetModules(System.Boolean getResourceModules)
    // Offset: 0x4590300
    ::ArrayW<::System::Reflection::Module*> GetModules(bool getResourceModules);
    // public System.Boolean get_IsDynamic()
    // Offset: 0x4590324
    bool get_IsDynamic();
    // public override System.String ToString()
    // Offset: 0x458FEE8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x4590234
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x459023C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public System.Void .ctor()
    // Offset: 0x459032C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Assembly* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::Assembly::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Assembly*, creationType>()));
    }
  }; // System.Reflection.Assembly
  #pragma pack(pop)
  // static public System.Boolean op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x457D718
  bool operator ==(::System::Reflection::Assembly* left, ::System::Reflection::Assembly& right);
  // static public System.Boolean op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x457DB1C
  bool operator !=(::System::Reflection::Assembly* left, ::System::Reflection::Assembly& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::Assembly::get_CodeBase
// Il2CppName: get_CodeBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_CodeBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_CodeBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_EscapedCodeBase
// Il2CppName: get_EscapedCodeBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_EscapedCodeBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_EscapedCodeBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_FullName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_MonoAssembly
// Il2CppName: get_MonoAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_MonoAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_MonoAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_Location
// Il2CppName: get_Location
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_Location)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_Location", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Reflection::Assembly::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Reflection::Assembly::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Assembly::*)(::System::Type*, bool)>(&System::Reflection::Assembly::IsDefined)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::Assembly::*)(bool)>(&System::Reflection::Assembly::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Reflection::Assembly::*)(::System::Type*, bool)>(&System::Reflection::Assembly::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceStream
// Il2CppName: GetManifestResourceStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Reflection::Assembly::*)(::StringW)>(&System::Reflection::Assembly::GetManifestResourceStream)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetManifestResourceStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceStream
// Il2CppName: GetManifestResourceStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Reflection::Assembly::*)(::System::Type*, ::StringW, bool, ByRef<::System::Threading::StackCrawlMark>)>(&System::Reflection::Assembly::GetManifestResourceStream)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* skipSecurityCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetManifestResourceStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, name, skipSecurityCheck, stackMark});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceStream
// Il2CppName: GetManifestResourceStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Reflection::Assembly::*)(::StringW, ByRef<::System::Threading::StackCrawlMark>, bool)>(&System::Reflection::Assembly::GetManifestResourceStream)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    static auto* skipSecurityCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetManifestResourceStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, stackMark, skipSecurityCheck});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetSimpleName
// Il2CppName: GetSimpleName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetSimpleName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetSimpleName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetPublicKey
// Il2CppName: GetPublicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetPublicKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetPublicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetVersion
// Il2CppName: GetVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetFlags
// Il2CppName: GetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::AssemblyNameFlags (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetTypes
// Il2CppName: GetTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::Reflection::Assembly::*)(bool)>(&System::Reflection::Assembly::GetTypes)> {
  static const MethodInfo* get() {
    static auto* exportedOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exportedOnly});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetTypes
// Il2CppName: GetTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::Assembly::*)(::StringW, bool)>(&System::Reflection::Assembly::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, throwOnError});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::Assembly::*)(::StringW)>(&System::Reflection::Assembly::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::InternalGetType
// Il2CppName: InternalGetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::Assembly::*)(::System::Reflection::Module*, ::StringW, bool, bool)>(&System::Reflection::Assembly::InternalGetType)> {
  static const MethodInfo* get() {
    static auto* module = &::il2cpp_utils::GetClassFromName("System.Reflection", "Module")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "InternalGetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{module, name, throwOnError, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::AssemblyName* (System::Reflection::Assembly::*)(bool)>(&System::Reflection::Assembly::GetName)> {
  static const MethodInfo* get() {
    static auto* copiedName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copiedName});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::AssemblyName* (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetAssembly
// Il2CppName: GetAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::System::Type*)>(&System::Reflection::Assembly::GetAssembly)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetEntryAssembly
// Il2CppName: GetEntryAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)()>(&System::Reflection::Assembly::GetEntryAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetEntryAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::InternalGetSatelliteAssembly
// Il2CppName: InternalGetSatelliteAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeAssembly* (System::Reflection::Assembly::*)(::StringW, ::System::Globalization::CultureInfo*, ::System::Version*, bool, ByRef<::System::Threading::StackCrawlMark>)>(&System::Reflection::Assembly::InternalGetSatelliteAssembly)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "Version")->byval_arg;
    static auto* throwOnFileNotFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "InternalGetSatelliteAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, culture, version, throwOnFileNotFound, stackMark});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadFrom
// Il2CppName: LoadFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW, bool, ByRef<::System::Threading::StackCrawlMark>)>(&System::Reflection::Assembly::LoadFrom)> {
  static const MethodInfo* get() {
    static auto* assemblyFile = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* refOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "LoadFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyFile, refOnly, stackMark});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW)>(&System::Reflection::Assembly::Load)> {
  static const MethodInfo* get() {
    static auto* assemblyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyString});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::ReflectionOnlyLoad
// Il2CppName: ReflectionOnlyLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW)>(&System::Reflection::Assembly::ReflectionOnlyLoad)> {
  static const MethodInfo* get() {
    static auto* assemblyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "ReflectionOnlyLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyString});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadWithPartialName
// Il2CppName: LoadWithPartialName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW)>(&System::Reflection::Assembly::LoadWithPartialName)> {
  static const MethodInfo* get() {
    static auto* partialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "LoadWithPartialName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partialName});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::load_with_partial_name
// Il2CppName: load_with_partial_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW, ::System::Security::Policy::Evidence*)>(&System::Reflection::Assembly::load_with_partial_name)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "load_with_partial_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, e});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadWithPartialName
// Il2CppName: LoadWithPartialName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW, ::System::Security::Policy::Evidence*)>(&System::Reflection::Assembly::LoadWithPartialName)> {
  static const MethodInfo* get() {
    static auto* partialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* securityEvidence = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "LoadWithPartialName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partialName, securityEvidence});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadWithPartialName
// Il2CppName: LoadWithPartialName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW, ::System::Security::Policy::Evidence*, bool)>(&System::Reflection::Assembly::LoadWithPartialName)> {
  static const MethodInfo* get() {
    static auto* partialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* securityEvidence = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    static auto* oldBehavior = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "LoadWithPartialName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partialName, securityEvidence, oldBehavior});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModules
// Il2CppName: GetModules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Module*> (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetModules)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetModules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModulesInternal
// Il2CppName: GetModulesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Module*> (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetModulesInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetModulesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetExecutingAssembly
// Il2CppName: GetExecutingAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)()>(&System::Reflection::Assembly::GetExecutingAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetExecutingAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCallingAssembly
// Il2CppName: GetCallingAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)()>(&System::Reflection::Assembly::GetCallingAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetCallingAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceNames
// Il2CppName: GetManifestResourceNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetManifestResourceNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetManifestResourceNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceInfo
// Il2CppName: GetManifestResourceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ManifestResourceInfo* (System::Reflection::Assembly::*)(::StringW)>(&System::Reflection::Assembly::GetManifestResourceInfo)> {
  static const MethodInfo* get() {
    static auto* resourceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetManifestResourceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resourceName});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_ReflectionOnly
// Il2CppName: get_ReflectionOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_ReflectionOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_ReflectionOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::CreateNIE
// Il2CppName: CreateNIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Reflection::Assembly::CreateNIE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "CreateNIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_IsFullyTrusted
// Il2CppName: get_IsFullyTrusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_IsFullyTrusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_IsFullyTrusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Reflection::Assembly::*)(::StringW, bool, bool)>(&System::Reflection::Assembly::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, throwOnError, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModule
// Il2CppName: GetModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Module* (System::Reflection::Assembly::*)(::StringW)>(&System::Reflection::Assembly::GetModule)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModules
// Il2CppName: GetModules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::Module*> (System::Reflection::Assembly::*)(bool)>(&System::Reflection::Assembly::GetModules)> {
  static const MethodInfo* get() {
    static auto* getResourceModules = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetModules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{getResourceModules});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::get_IsDynamic
// Il2CppName: get_IsDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::get_IsDynamic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "get_IsDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::Assembly::*)()>(&System::Reflection::Assembly::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Assembly::*)(::Il2CppObject*)>(&System::Reflection::Assembly::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Reflection::Assembly::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::Assembly::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
