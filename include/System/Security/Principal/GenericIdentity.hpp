// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Claims.ClaimsIdentity
#include "System/Security/Claims/ClaimsIdentity.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Security::Claims
namespace System::Security::Claims {
  // Forward declaring type: Claim
  class Claim;
}
// Completed forward declares
// Type namespace: System.Security.Principal
namespace System::Security::Principal {
  // Forward declaring type: GenericIdentity
  class GenericIdentity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Principal::GenericIdentity);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Principal::GenericIdentity*, "System.Security.Principal", "GenericIdentity");
// Type namespace: System.Security.Principal
namespace System::Security::Principal {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Principal.GenericIdentity
  // [TokenAttribute] Offset: FFFFFFFF
  class GenericIdentity : public ::System::Security::Claims::ClaimsIdentity {
    public:
    public:
    // private readonly System.String m_name
    // Size: 0x8
    // Offset: 0x78
    ::StringW m_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String m_type
    // Size: 0x8
    // Offset: 0x80
    ::StringW m_type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.String m_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_name();
    // Get instance field reference: private readonly System.String m_type
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_type();
    // public System.Void .ctor(System.String name, System.String type)
    // Offset: 0x451BB20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericIdentity* New_ctor(::StringW name, ::StringW type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Principal::GenericIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericIdentity*, creationType>(name, type)));
    }
    // protected System.Void .ctor(System.Security.Principal.GenericIdentity identity)
    // Offset: 0x451BCF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericIdentity* New_ctor(::System::Security::Principal::GenericIdentity* identity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Principal::GenericIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericIdentity*, creationType>(identity)));
    }
    // private System.Void AddNameClaim()
    // Offset: 0x451BC0C
    void AddNameClaim();
    // private System.Void .ctor()
    // Offset: 0x451BCDC
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.Void ClaimsIdentity::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericIdentity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Principal::GenericIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericIdentity*, creationType>()));
    }
    // public override System.Security.Claims.ClaimsIdentity Clone()
    // Offset: 0x451BFC0
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.Security.Claims.ClaimsIdentity ClaimsIdentity::Clone()
    ::System::Security::Claims::ClaimsIdentity* Clone();
    // public override System.Collections.Generic.IEnumerable`1<System.Security.Claims.Claim> get_Claims()
    // Offset: 0x451C018
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.Collections.Generic.IEnumerable`1<System.Security.Claims.Claim> ClaimsIdentity::get_Claims()
    ::System::Collections::Generic::IEnumerable_1<::System::Security::Claims::Claim*>* get_Claims();
    // public override System.String get_Name()
    // Offset: 0x451C098
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.String ClaimsIdentity::get_Name()
    ::StringW get_Name();
    // public override System.String get_AuthenticationType()
    // Offset: 0x451C0A0
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.String ClaimsIdentity::get_AuthenticationType()
    ::StringW get_AuthenticationType();
  }; // System.Security.Principal.GenericIdentity
  #pragma pack(pop)
  static check_size<sizeof(GenericIdentity), 128 + sizeof(::StringW)> __System_Security_Principal_GenericIdentitySizeCheck;
  static_assert(sizeof(GenericIdentity) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::AddNameClaim
// Il2CppName: AddNameClaim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Principal::GenericIdentity::*)()>(&System::Security::Principal::GenericIdentity::AddNameClaim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::GenericIdentity*), "AddNameClaim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Claims::ClaimsIdentity* (System::Security::Principal::GenericIdentity::*)()>(&System::Security::Principal::GenericIdentity::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::GenericIdentity*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::get_Claims
// Il2CppName: get_Claims
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Security::Claims::Claim*>* (System::Security::Principal::GenericIdentity::*)()>(&System::Security::Principal::GenericIdentity::get_Claims)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::GenericIdentity*), "get_Claims", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Principal::GenericIdentity::*)()>(&System::Security::Principal::GenericIdentity::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::GenericIdentity*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::GenericIdentity::get_AuthenticationType
// Il2CppName: get_AuthenticationType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Principal::GenericIdentity::*)()>(&System::Security::Principal::GenericIdentity::get_AuthenticationType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::GenericIdentity*), "get_AuthenticationType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
