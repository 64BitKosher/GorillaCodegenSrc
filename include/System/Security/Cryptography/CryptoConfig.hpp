// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: CryptoConfig
  class CryptoConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::CryptoConfig);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::CryptoConfig*, "System.Security.Cryptography", "CryptoConfig");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.CryptoConfig
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: FFFFFFFF
  class CryptoConfig : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Object lockObject
    static ::Il2CppObject* _get_lockObject();
    // Set static field: static private readonly System.Object lockObject
    static void _set_lockObject(::Il2CppObject* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Type> algorithms
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>* _get_algorithms();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Type> algorithms
    static void _set_algorithms(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>* value);
    // static public System.Void AddOID(System.String oid, params System.String[] names)
    // Offset: 0x450F9F4
    static void AddOID(::StringW oid, ::ArrayW<::StringW> names);
    // static public System.Object CreateFromName(System.String name)
    // Offset: 0x450296C
    static ::Il2CppObject* CreateFromName(::StringW name);
    // static public System.Object CreateFromName(System.String name, params System.Object[] args)
    // Offset: 0x450FA2C
    static ::Il2CppObject* CreateFromName(::StringW name, ::ArrayW<::Il2CppObject*> args);
    // static System.String MapNameToOID(System.String name, System.Object arg)
    // Offset: 0x45119E8
    static ::StringW MapNameToOID(::StringW name, ::Il2CppObject* arg);
    // static public System.String MapNameToOID(System.String name)
    // Offset: 0x4511A3C
    static ::StringW MapNameToOID(::StringW name);
    // static private System.Void Initialize()
    // Offset: 0x4512210
    static void Initialize();
    // static public System.Void AddAlgorithm(System.Type algorithm, params System.String[] names)
    // Offset: 0x4512314
    static void AddAlgorithm(::System::Type* algorithm, ::ArrayW<::StringW> names);
    // static public System.Byte[] EncodeOID(System.String str)
    // Offset: 0x45126A0
    static ::ArrayW<uint8_t> EncodeOID(::StringW str);
    // static private System.Byte[] EncodeLongNumber(System.Int64 x)
    // Offset: 0x4512AA0
    static ::ArrayW<uint8_t> EncodeLongNumber(int64_t x);
    // static public System.Boolean get_AllowOnlyFipsAlgorithms()
    // Offset: 0x4509200
    static bool get_AllowOnlyFipsAlgorithms();
    // static private System.Void .cctor()
    // Offset: 0x4512C10
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x4512C08
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CryptoConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::CryptoConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CryptoConfig*, creationType>()));
    }
  }; // System.Security.Cryptography.CryptoConfig
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::AddOID
// Il2CppName: AddOID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<::StringW>)>(&System::Security::Cryptography::CryptoConfig::AddOID)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "AddOID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid, names});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::CreateFromName
// Il2CppName: CreateFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW)>(&System::Security::Cryptography::CryptoConfig::CreateFromName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "CreateFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::CreateFromName
// Il2CppName: CreateFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&System::Security::Cryptography::CryptoConfig::CreateFromName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "CreateFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, args});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::MapNameToOID
// Il2CppName: MapNameToOID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppObject*)>(&System::Security::Cryptography::CryptoConfig::MapNameToOID)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "MapNameToOID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, arg});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::MapNameToOID
// Il2CppName: MapNameToOID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Security::Cryptography::CryptoConfig::MapNameToOID)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "MapNameToOID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::CryptoConfig::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::AddAlgorithm
// Il2CppName: AddAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ::ArrayW<::StringW>)>(&System::Security::Cryptography::CryptoConfig::AddAlgorithm)> {
  static const MethodInfo* get() {
    static auto* algorithm = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "AddAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{algorithm, names});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::EncodeOID
// Il2CppName: EncodeOID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&System::Security::Cryptography::CryptoConfig::EncodeOID)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "EncodeOID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::EncodeLongNumber
// Il2CppName: EncodeLongNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int64_t)>(&System::Security::Cryptography::CryptoConfig::EncodeLongNumber)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "EncodeLongNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::get_AllowOnlyFipsAlgorithms
// Il2CppName: get_AllowOnlyFipsAlgorithms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Security::Cryptography::CryptoConfig::get_AllowOnlyFipsAlgorithms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), "get_AllowOnlyFipsAlgorithms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::CryptoConfig::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::CryptoConfig*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::CryptoConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
