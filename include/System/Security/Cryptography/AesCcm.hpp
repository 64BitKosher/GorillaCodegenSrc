// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: KeySizes
  class KeySizes;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AesCcm
  class AesCcm;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::AesCcm);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::AesCcm*, "System.Security.Cryptography", "AesCcm");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.AesCcm
  // [TokenAttribute] Offset: FFFFFFFF
  class AesCcm : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public System.Void .ctor(System.Byte[] key)
    // Offset: 0x4519AE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AesCcm* New_ctor(::ArrayW<uint8_t> key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::AesCcm::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AesCcm*, creationType>(key)));
    }
    // public System.Void .ctor(System.ReadOnlySpan`1<System.Byte> key)
    // Offset: 0x4519B20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AesCcm* New_ctor(::System::ReadOnlySpan_1<uint8_t> key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::AesCcm::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AesCcm*, creationType>(key)));
    }
    // static public System.Security.Cryptography.KeySizes get_NonceByteSizes()
    // Offset: 0x4519B60
    static ::System::Security::Cryptography::KeySizes* get_NonceByteSizes();
    // static public System.Security.Cryptography.KeySizes get_TagByteSizes()
    // Offset: 0x4519B98
    static ::System::Security::Cryptography::KeySizes* get_TagByteSizes();
    // public System.Void Decrypt(System.Byte[] nonce, System.Byte[] ciphertext, System.Byte[] tag, System.Byte[] plaintext, System.Byte[] associatedData)
    // Offset: 0x4519BD0
    void Decrypt(::ArrayW<uint8_t> nonce, ::ArrayW<uint8_t> ciphertext, ::ArrayW<uint8_t> tag, ::ArrayW<uint8_t> plaintext, ::ArrayW<uint8_t> associatedData);
    // public System.Void Decrypt(System.ReadOnlySpan`1<System.Byte> nonce, System.ReadOnlySpan`1<System.Byte> ciphertext, System.ReadOnlySpan`1<System.Byte> tag, System.Span`1<System.Byte> plaintext, System.ReadOnlySpan`1<System.Byte> associatedData)
    // Offset: 0x4519C08
    void Decrypt(::System::ReadOnlySpan_1<uint8_t> nonce, ::System::ReadOnlySpan_1<uint8_t> ciphertext, ::System::ReadOnlySpan_1<uint8_t> tag, ::System::Span_1<uint8_t> plaintext, ::System::ReadOnlySpan_1<uint8_t> associatedData);
    // public System.Void Dispose()
    // Offset: 0x4519C40
    void Dispose();
    // public System.Void Encrypt(System.Byte[] nonce, System.Byte[] plaintext, System.Byte[] ciphertext, System.Byte[] tag, System.Byte[] associatedData)
    // Offset: 0x4519C44
    void Encrypt(::ArrayW<uint8_t> nonce, ::ArrayW<uint8_t> plaintext, ::ArrayW<uint8_t> ciphertext, ::ArrayW<uint8_t> tag, ::ArrayW<uint8_t> associatedData);
    // public System.Void Encrypt(System.ReadOnlySpan`1<System.Byte> nonce, System.ReadOnlySpan`1<System.Byte> plaintext, System.Span`1<System.Byte> ciphertext, System.Span`1<System.Byte> tag, System.ReadOnlySpan`1<System.Byte> associatedData)
    // Offset: 0x4519C7C
    void Encrypt(::System::ReadOnlySpan_1<uint8_t> nonce, ::System::ReadOnlySpan_1<uint8_t> plaintext, ::System::Span_1<uint8_t> ciphertext, ::System::Span_1<uint8_t> tag, ::System::ReadOnlySpan_1<uint8_t> associatedData);
  }; // System.Security.Cryptography.AesCcm
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::get_NonceByteSizes
// Il2CppName: get_NonceByteSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::KeySizes* (*)()>(&System::Security::Cryptography::AesCcm::get_NonceByteSizes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "get_NonceByteSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::get_TagByteSizes
// Il2CppName: get_TagByteSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::KeySizes* (*)()>(&System::Security::Cryptography::AesCcm::get_TagByteSizes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "get_TagByteSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AesCcm::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::AesCcm::Decrypt)> {
  static const MethodInfo* get() {
    static auto* nonce = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ciphertext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* tag = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* plaintext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* associatedData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, ciphertext, tag, plaintext, associatedData});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AesCcm::*)(::System::ReadOnlySpan_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>, ::System::Span_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>)>(&System::Security::Cryptography::AesCcm::Decrypt)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* ciphertext = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* tag = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* plaintext = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* associatedData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, ciphertext, tag, plaintext, associatedData});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AesCcm::*)()>(&System::Security::Cryptography::AesCcm::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AesCcm::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::AesCcm::Encrypt)> {
  static const MethodInfo* get() {
    static auto* nonce = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* plaintext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ciphertext = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* tag = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* associatedData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, plaintext, ciphertext, tag, associatedData});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AesCcm::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AesCcm::*)(::System::ReadOnlySpan_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>, ::System::Span_1<uint8_t>, ::System::Span_1<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>)>(&System::Security::Cryptography::AesCcm::Encrypt)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* plaintext = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* ciphertext = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* tag = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* associatedData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AesCcm*), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, plaintext, ciphertext, tag, associatedData});
  }
};
