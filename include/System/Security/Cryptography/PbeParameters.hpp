// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.PbeEncryptionAlgorithm
#include "System/Security/Cryptography/PbeEncryptionAlgorithm.hpp"
// Including type: System.Security.Cryptography.HashAlgorithmName
#include "System/Security/Cryptography/HashAlgorithmName.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: PbeParameters
  class PbeParameters;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::PbeParameters);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::PbeParameters*, "System.Security.Cryptography", "PbeParameters");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.PbeParameters
  // [TokenAttribute] Offset: FFFFFFFF
  class PbeParameters : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Security.Cryptography.PbeEncryptionAlgorithm <EncryptionAlgorithm>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Cryptography::PbeEncryptionAlgorithm EncryptionAlgorithm;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::PbeEncryptionAlgorithm) == 0x4);
    // Padding between fields: EncryptionAlgorithm and: HashAlgorithm
    char __padding0[0x4] = {};
    // private readonly System.Security.Cryptography.HashAlgorithmName <HashAlgorithm>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::HashAlgorithmName HashAlgorithm;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::HashAlgorithmName) == 0x8);
    // private readonly System.Int32 <IterationCount>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int IterationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Security.Cryptography.PbeEncryptionAlgorithm <EncryptionAlgorithm>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::PbeEncryptionAlgorithm& dyn_$EncryptionAlgorithm$k__BackingField();
    // Get instance field reference: private readonly System.Security.Cryptography.HashAlgorithmName <HashAlgorithm>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::HashAlgorithmName& dyn_$HashAlgorithm$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <IterationCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$IterationCount$k__BackingField();
    // public System.Security.Cryptography.PbeEncryptionAlgorithm get_EncryptionAlgorithm()
    // Offset: 0x4519F30
    ::System::Security::Cryptography::PbeEncryptionAlgorithm get_EncryptionAlgorithm();
    // public System.Security.Cryptography.HashAlgorithmName get_HashAlgorithm()
    // Offset: 0x4519F38
    ::System::Security::Cryptography::HashAlgorithmName get_HashAlgorithm();
    // public System.Int32 get_IterationCount()
    // Offset: 0x4519F40
    int get_IterationCount();
    // public System.Void .ctor(System.Security.Cryptography.PbeEncryptionAlgorithm encryptionAlgorithm, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Int32 iterationCount)
    // Offset: 0x4519F48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PbeParameters* New_ctor(::System::Security::Cryptography::PbeEncryptionAlgorithm encryptionAlgorithm, ::System::Security::Cryptography::HashAlgorithmName hashAlgorithm, int iterationCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::PbeParameters::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PbeParameters*, creationType>(encryptionAlgorithm, hashAlgorithm, iterationCount)));
    }
  }; // System.Security.Cryptography.PbeParameters
  #pragma pack(pop)
  static check_size<sizeof(PbeParameters), 32 + sizeof(int)> __System_Security_Cryptography_PbeParametersSizeCheck;
  static_assert(sizeof(PbeParameters) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::PbeParameters::get_EncryptionAlgorithm
// Il2CppName: get_EncryptionAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::PbeEncryptionAlgorithm (System::Security::Cryptography::PbeParameters::*)()>(&System::Security::Cryptography::PbeParameters::get_EncryptionAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PbeParameters*), "get_EncryptionAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::PbeParameters::get_HashAlgorithm
// Il2CppName: get_HashAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithmName (System::Security::Cryptography::PbeParameters::*)()>(&System::Security::Cryptography::PbeParameters::get_HashAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PbeParameters*), "get_HashAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::PbeParameters::get_IterationCount
// Il2CppName: get_IterationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::Cryptography::PbeParameters::*)()>(&System::Security::Cryptography::PbeParameters::get_IterationCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PbeParameters*), "get_IterationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::PbeParameters::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
