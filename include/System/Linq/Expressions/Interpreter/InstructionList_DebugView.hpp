// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.InstructionList
#include "System/Linq/Expressions/Interpreter/InstructionList.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: Instruction
  class Instruction;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::InstructionList::DebugView);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::InstructionList::DebugView*, "System.Linq.Expressions.Interpreter", "InstructionList/DebugView");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.InstructionList/DebugView
  // [TokenAttribute] Offset: FFFFFFFF
  class InstructionList::DebugView : public ::Il2CppObject {
    public:
    // Nested type: ::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView
    struct InstructionView;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Linq.Expressions.Interpreter.InstructionList/DebugView/InstructionView
    // [TokenAttribute] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct InstructionView/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly System.Int32 _index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly System.Int32 _stackDepth
      // Size: 0x4
      // Offset: 0x4
      int stackDepth;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly System.Int32 _continuationsDepth
      // Size: 0x4
      // Offset: 0x8
      int continuationsDepth;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: continuationsDepth and: name
      char __padding2[0x4] = {};
      // private readonly System.String _name
      // Size: 0x8
      // Offset: 0x10
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // private readonly System.Linq.Expressions.Interpreter.Instruction _instruction
      // Size: 0x8
      // Offset: 0x18
      ::System::Linq::Expressions::Interpreter::Instruction* instruction;
      // Field size check
      static_assert(sizeof(::System::Linq::Expressions::Interpreter::Instruction*) == 0x8);
      public:
      // Creating value type constructor for type: InstructionView
      constexpr InstructionView(int index_ = {}, int stackDepth_ = {}, int continuationsDepth_ = {}, ::StringW name_ = {}, ::System::Linq::Expressions::Interpreter::Instruction* instruction_ = {}) noexcept : index{index_}, stackDepth{stackDepth_}, continuationsDepth{continuationsDepth_}, name{name_}, instruction{instruction_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly System.Int32 _index
      [[deprecated("Use field access instead!")]] int& dyn__index();
      // Get instance field reference: private readonly System.Int32 _stackDepth
      [[deprecated("Use field access instead!")]] int& dyn__stackDepth();
      // Get instance field reference: private readonly System.Int32 _continuationsDepth
      [[deprecated("Use field access instead!")]] int& dyn__continuationsDepth();
      // Get instance field reference: private readonly System.String _name
      [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
      // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.Instruction _instruction
      [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::Instruction*& dyn__instruction();
      // System.String GetValue()
      // Offset: 0x4BB8938
      ::StringW GetValue();
      // public System.Void .ctor(System.Linq.Expressions.Interpreter.Instruction instruction, System.String name, System.Int32 index, System.Int32 stackDepth, System.Int32 continuationsDepth)
      // Offset: 0x4BB88E8
      InstructionView(::System::Linq::Expressions::Interpreter::Instruction* instruction, ::StringW name, int index, int stackDepth, int continuationsDepth);
    }; // System.Linq.Expressions.Interpreter.InstructionList/DebugView/InstructionView
    #pragma pack(pop)
    static check_size<sizeof(InstructionList::DebugView::InstructionView), 24 + sizeof(::System::Linq::Expressions::Interpreter::Instruction*)> __System_Linq_Expressions_Interpreter_InstructionList_DebugView_InstructionViewSizeCheck;
    static_assert(sizeof(InstructionList::DebugView::InstructionView) == 0x20);
    // static System.Linq.Expressions.Interpreter.InstructionList/DebugView/InstructionView[] GetInstructionViews(System.Collections.Generic.IReadOnlyList`1<System.Linq.Expressions.Interpreter.Instruction> instructions, System.Collections.Generic.IReadOnlyList`1<System.Object> objects, System.Func`2<System.Int32,System.Int32> labelIndexer, System.Collections.Generic.IReadOnlyList`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Object>> debugCookies)
    // Offset: 0x4BB27EC
    static ::ArrayW<::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView> GetInstructionViews(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::Interpreter::Instruction*>* instructions, ::System::Collections::Generic::IReadOnlyList_1<::Il2CppObject*>* objects, ::System::Func_2<int, int>* labelIndexer, ::System::Collections::Generic::IReadOnlyList_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>* debugCookies);
  }; // System.Linq.Expressions.Interpreter.InstructionList/DebugView
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView, "System.Linq.Expressions.Interpreter", "InstructionList/DebugView/InstructionView");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionList::DebugView::GetInstructionViews
// Il2CppName: GetInstructionViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView> (*)(::System::Collections::Generic::IReadOnlyList_1<::System::Linq::Expressions::Interpreter::Instruction*>*, ::System::Collections::Generic::IReadOnlyList_1<::Il2CppObject*>*, ::System::Func_2<int, int>*, ::System::Collections::Generic::IReadOnlyList_1<::System::Collections::Generic::KeyValuePair_2<int, ::Il2CppObject*>>*)>(&System::Linq::Expressions::Interpreter::InstructionList::DebugView::GetInstructionViews)> {
  static const MethodInfo* get() {
    static auto* instructions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Linq.Expressions.Interpreter", "Instruction")})->byval_arg;
    static auto* objects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* labelIndexer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* debugCookies = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "KeyValuePair`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Object")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionList::DebugView*), "GetInstructionViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instructions, objects, labelIndexer, debugCookies});
  }
};
