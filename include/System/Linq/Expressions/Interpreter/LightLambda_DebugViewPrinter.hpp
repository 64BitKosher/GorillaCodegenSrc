// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.LightLambda
#include "System/Linq/Expressions/Interpreter/LightLambda.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq::Expressions::Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Forward declaring type: Interpreter
  class Interpreter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*, "System.Linq.Expressions.Interpreter", "LightLambda/DebugViewPrinter");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.LightLambda/DebugViewPrinter
  // [TokenAttribute] Offset: FFFFFFFF
  class LightLambda::DebugViewPrinter : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Linq.Expressions.Interpreter.Interpreter _interpreter
    // Size: 0x8
    // Offset: 0x10
    ::System::Linq::Expressions::Interpreter::Interpreter* interpreter;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Interpreter::Interpreter*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _tryStart
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<int, int>* tryStart;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.String> _handlerEnter
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<int, ::StringW>* handlerEnter;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _handlerExit
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<int, int>* handlerExit;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.String _indent
    // Size: 0x8
    // Offset: 0x30
    ::StringW indent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.Interpreter _interpreter
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::Interpreter*& dyn__interpreter();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _tryStart
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn__tryStart();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.String> _handlerEnter
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::StringW>*& dyn__handlerEnter();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _handlerExit
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn__handlerExit();
    // Get instance field reference: private System.String _indent
    [[deprecated("Use field access instead!")]] ::StringW& dyn__indent();
    // public System.Void .ctor(System.Linq.Expressions.Interpreter.Interpreter interpreter)
    // Offset: 0x4BCBB18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightLambda::DebugViewPrinter* New_ctor(::System::Linq::Expressions::Interpreter::Interpreter* interpreter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightLambda::DebugViewPrinter*, creationType>(interpreter)));
    }
    // private System.Void Analyze()
    // Offset: 0x4BCD9C8
    void Analyze();
    // private System.Void AddTryStart(System.Int32 index)
    // Offset: 0x4BCDC54
    void AddTryStart(int index);
    // private System.Void AddHandlerExit(System.Int32 index)
    // Offset: 0x4BCDD28
    void AddHandlerExit(int index);
    // private System.Void Indent()
    // Offset: 0x4BCDDCC
    void Indent();
    // private System.Void Dedent()
    // Offset: 0x4BCDE0C
    void Dedent();
    // private System.Void EmitExits(System.Text.StringBuilder sb, System.Int32 index)
    // Offset: 0x4BCE328
    void EmitExits(::System::Text::StringBuilder* sb, int index);
    // public override System.String ToString()
    // Offset: 0x4BCDE4C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Linq.Expressions.Interpreter.LightLambda/DebugViewPrinter
  #pragma pack(pop)
  static check_size<sizeof(LightLambda::DebugViewPrinter), 48 + sizeof(::StringW)> __System_Linq_Expressions_Interpreter_LightLambda_DebugViewPrinterSizeCheck;
  static_assert(sizeof(LightLambda::DebugViewPrinter) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Analyze
// Il2CppName: Analyze
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)()>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Analyze)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "Analyze", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::AddTryStart
// Il2CppName: AddTryStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)(int)>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::AddTryStart)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "AddTryStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::AddHandlerExit
// Il2CppName: AddHandlerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)(int)>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::AddHandlerExit)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "AddHandlerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Indent
// Il2CppName: Indent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)()>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Indent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "Indent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Dedent
// Il2CppName: Dedent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)()>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::Dedent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "Dedent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::EmitExits
// Il2CppName: EmitExits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)(::System::Text::StringBuilder*, int)>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::EmitExits)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "EmitExits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, index});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::*)()>(&System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::LightLambda::DebugViewPrinter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
