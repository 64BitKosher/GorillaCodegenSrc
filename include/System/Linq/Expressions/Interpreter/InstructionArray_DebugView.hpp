// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Linq.Expressions.Interpreter.InstructionArray
#include "System/Linq/Expressions/Interpreter/InstructionArray.hpp"
// Including type: System.Linq.Expressions.Interpreter.InstructionList/DebugView/InstructionView
#include "System/Linq/Expressions/Interpreter/InstructionList_DebugView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Expressions::Interpreter::InstructionArray::DebugView);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Expressions::Interpreter::InstructionArray::DebugView*, "System.Linq.Expressions.Interpreter", "InstructionArray/DebugView");
// Type namespace: System.Linq.Expressions.Interpreter
namespace System::Linq::Expressions::Interpreter {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Expressions.Interpreter.InstructionArray/DebugView
  // [TokenAttribute] Offset: FFFFFFFF
  class InstructionArray::DebugView : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Linq.Expressions.Interpreter.InstructionArray _array
    // Size: 0x28
    // Offset: 0x10
    ::System::Linq::Expressions::Interpreter::InstructionArray array;
    // Field size check
    static_assert(sizeof(::System::Linq::Expressions::Interpreter::InstructionArray) == 0x28);
    public:
    // Creating conversion operator: operator ::System::Linq::Expressions::Interpreter::InstructionArray
    constexpr operator ::System::Linq::Expressions::Interpreter::InstructionArray() const noexcept {
      return array;
    }
    // Get instance field reference: private readonly System.Linq.Expressions.Interpreter.InstructionArray _array
    [[deprecated("Use field access instead!")]] ::System::Linq::Expressions::Interpreter::InstructionArray& dyn__array();
    // public System.Void .ctor(System.Linq.Expressions.Interpreter.InstructionArray array)
    // Offset: 0x4BB2694
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstructionArray::DebugView* New_ctor(::System::Linq::Expressions::Interpreter::InstructionArray array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Expressions::Interpreter::InstructionArray::DebugView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstructionArray::DebugView*, creationType>(array)));
    }
    // public System.Linq.Expressions.Interpreter.InstructionList/DebugView/InstructionView[] GetInstructionViews(System.Boolean includeDebugCookies)
    // Offset: 0x4BB274C
    ::ArrayW<::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView> GetInstructionViews(bool includeDebugCookies);
    // private System.Int32 <GetInstructionViews>b__4_0(System.Int32 index)
    // Offset: 0x4BB2DE0
    int $GetInstructionViews$b__4_0(int index);
  }; // System.Linq.Expressions.Interpreter.InstructionArray/DebugView
  #pragma pack(pop)
  static check_size<sizeof(InstructionArray::DebugView), 16 + sizeof(::System::Linq::Expressions::Interpreter::InstructionArray)> __System_Linq_Expressions_Interpreter_InstructionArray_DebugViewSizeCheck;
  static_assert(sizeof(InstructionArray::DebugView) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionArray::DebugView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionArray::DebugView::GetInstructionViews
// Il2CppName: GetInstructionViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Linq::Expressions::Interpreter::InstructionList::DebugView::InstructionView> (System::Linq::Expressions::Interpreter::InstructionArray::DebugView::*)(bool)>(&System::Linq::Expressions::Interpreter::InstructionArray::DebugView::GetInstructionViews)> {
  static const MethodInfo* get() {
    static auto* includeDebugCookies = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionArray::DebugView*), "GetInstructionViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includeDebugCookies});
  }
};
// Writing MetadataGetter for method: System::Linq::Expressions::Interpreter::InstructionArray::DebugView::$GetInstructionViews$b__4_0
// Il2CppName: <GetInstructionViews>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Linq::Expressions::Interpreter::InstructionArray::DebugView::*)(int)>(&System::Linq::Expressions::Interpreter::InstructionArray::DebugView::$GetInstructionViews$b__4_0)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Linq::Expressions::Interpreter::InstructionArray::DebugView*), "<GetInstructionViews>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
