// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Interop/Sys
#include "GlobalNamespace/Interop_Sys.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Skipping declaration: TZifType because it is already included!
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: TimeZoneInfoOptions
  struct TimeZoneInfoOptions;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: DaylightTimeStruct
  struct DaylightTimeStruct;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: TimeZoneInfo
  class TimeZoneInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::TimeZoneInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::TimeZoneInfo*, "System", "TimeZoneInfo");
// Type namespace: System
namespace System {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.TimeZoneInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [TypeForwardedFromAttribute] Offset: FFFFFFFF
  class TimeZoneInfo : public ::Il2CppObject/*, public ::System::IEquatable_1<::System::TimeZoneInfo*>, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::TimeZoneInfo::TZifType
    struct TZifType;
    // Nested type: ::System::TimeZoneInfo::TZifHead
    struct TZifHead;
    // Nested type: ::System::TimeZoneInfo::TZVersion
    struct TZVersion;
    // Nested type: ::System::TimeZoneInfo::AdjustmentRule
    class AdjustmentRule;
    // Nested type: ::System::TimeZoneInfo::TransitionTime
    struct TransitionTime;
    // Nested type: ::System::TimeZoneInfo::CachedData
    class CachedData;
    // Nested type: ::System::TimeZoneInfo::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    // Nested type: ::System::TimeZoneInfo::$$c
    class $$c;
    // Size: 0xA
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.TimeZoneInfo/TZifType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TZifType/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.TimeSpan UtcOffset
      // Size: 0x8
      // Offset: 0x0
      ::System::TimeSpan UtcOffset;
      // Field size check
      static_assert(sizeof(::System::TimeSpan) == 0x8);
      // public readonly System.Boolean IsDst
      // Size: 0x1
      // Offset: 0x8
      bool IsDst;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public readonly System.Byte AbbreviationIndex
      // Size: 0x1
      // Offset: 0x9
      uint8_t AbbreviationIndex;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: TZifType
      constexpr TZifType(::System::TimeSpan UtcOffset_ = {}, bool IsDst_ = {}, uint8_t AbbreviationIndex_ = {}) noexcept : UtcOffset{UtcOffset_}, IsDst{IsDst_}, AbbreviationIndex{AbbreviationIndex_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.TimeSpan UtcOffset
      [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_UtcOffset();
      // Get instance field reference: public readonly System.Boolean IsDst
      [[deprecated("Use field access instead!")]] bool& dyn_IsDst();
      // Get instance field reference: public readonly System.Byte AbbreviationIndex
      [[deprecated("Use field access instead!")]] uint8_t& dyn_AbbreviationIndex();
      // public System.Void .ctor(System.Byte[] data, System.Int32 index)
      // Offset: 0x45B1548
      TZifType(::ArrayW<uint8_t> data, int index);
    }; // System.TimeZoneInfo/TZifType
    #pragma pack(pop)
    static check_size<sizeof(TimeZoneInfo::TZifType), 9 + sizeof(uint8_t)> __System_TimeZoneInfo_TZifTypeSizeCheck;
    static_assert(sizeof(TimeZoneInfo::TZifType) == 0xA);
    public:
    // private readonly System.String _id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _displayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _standardDisplayName
    // Size: 0x8
    // Offset: 0x20
    ::StringW standardDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _daylightDisplayName
    // Size: 0x8
    // Offset: 0x28
    ::StringW daylightDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.TimeSpan _baseUtcOffset
    // Size: 0x8
    // Offset: 0x30
    ::System::TimeSpan baseUtcOffset;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private readonly System.Boolean _supportsDaylightSavingTime
    // Size: 0x1
    // Offset: 0x38
    bool supportsDaylightSavingTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportsDaylightSavingTime and: adjustmentRules
    char __padding5[0x7] = {};
    // private readonly System.TimeZoneInfo/AdjustmentRule[] _adjustmentRules
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::TimeZoneInfo*>
    operator ::System::IEquatable_1<::System::TimeZoneInfo*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::TimeZoneInfo*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Get static field: static private readonly System.TimeZoneInfo s_utcTimeZone
    static ::System::TimeZoneInfo* _get_s_utcTimeZone();
    // Set static field: static private readonly System.TimeZoneInfo s_utcTimeZone
    static void _set_s_utcTimeZone(::System::TimeZoneInfo* value);
    // Get static field: static private System.TimeZoneInfo/CachedData s_cachedData
    static ::System::TimeZoneInfo::CachedData* _get_s_cachedData();
    // Set static field: static private System.TimeZoneInfo/CachedData s_cachedData
    static void _set_s_cachedData(::System::TimeZoneInfo::CachedData* value);
    // Get static field: static private readonly System.DateTime s_maxDateOnly
    static ::System::DateTime _get_s_maxDateOnly();
    // Set static field: static private readonly System.DateTime s_maxDateOnly
    static void _set_s_maxDateOnly(::System::DateTime value);
    // Get static field: static private readonly System.DateTime s_minDateOnly
    static ::System::DateTime _get_s_minDateOnly();
    // Set static field: static private readonly System.DateTime s_minDateOnly
    static void _set_s_minDateOnly(::System::DateTime value);
    // Get static field: static private readonly System.TimeSpan MaxOffset
    static ::System::TimeSpan _get_MaxOffset();
    // Set static field: static private readonly System.TimeSpan MaxOffset
    static void _set_MaxOffset(::System::TimeSpan value);
    // Get static field: static private readonly System.TimeSpan MinOffset
    static ::System::TimeSpan _get_MinOffset();
    // Set static field: static private readonly System.TimeSpan MinOffset
    static void _set_MinOffset(::System::TimeSpan value);
    // Get instance field reference: private readonly System.String _id
    [[deprecated("Use field access instead!")]] ::StringW& dyn__id();
    // Get instance field reference: private readonly System.String _displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__displayName();
    // Get instance field reference: private readonly System.String _standardDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__standardDisplayName();
    // Get instance field reference: private readonly System.String _daylightDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__daylightDisplayName();
    // Get instance field reference: private readonly System.TimeSpan _baseUtcOffset
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn__baseUtcOffset();
    // Get instance field reference: private readonly System.Boolean _supportsDaylightSavingTime
    [[deprecated("Use field access instead!")]] bool& dyn__supportsDaylightSavingTime();
    // Get instance field reference: private readonly System.TimeZoneInfo/AdjustmentRule[] _adjustmentRules
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>& dyn__adjustmentRules();
    // private System.Void .ctor(System.Byte[] data, System.String id, System.Boolean dstDisabled)
    // Offset: 0x45ABE10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor(::ArrayW<uint8_t> data, ::StringW id, bool dstDisabled) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>(data, id, dstDisabled)));
    }
    // static private System.TimeZoneInfo GetLocalTimeZone(System.TimeZoneInfo/CachedData cachedData)
    // Offset: 0x45ACD50
    static ::System::TimeZoneInfo* GetLocalTimeZone(::System::TimeZoneInfo::CachedData* cachedData);
    // static private System.Boolean TryGetLocalTzFile(out System.Byte[] rawData, out System.String id)
    // Offset: 0x45ACF00
    static bool TryGetLocalTzFile(ByRef<::ArrayW<uint8_t>> rawData, ByRef<::StringW> id);
    // static private System.String GetTzEnvironmentVariable()
    // Offset: 0x45AD0DC
    static ::StringW GetTzEnvironmentVariable();
    // static private System.Boolean TryLoadTzFile(System.String tzFilePath, ref System.Byte[] rawData, ref System.String id)
    // Offset: 0x45AD174
    static bool TryLoadTzFile(::StringW tzFilePath, ByRef<::ArrayW<uint8_t>> rawData, ByRef<::StringW> id);
    // static private System.String FindTimeZoneIdUsingReadLink(System.String tzFilePath)
    // Offset: 0x45AD478
    static ::StringW FindTimeZoneIdUsingReadLink(::StringW tzFilePath);
    // static private System.String GetDirectoryEntryFullPath(ref Interop/Sys/DirectoryEntry dirent, System.String currentPath)
    // Offset: 0x45AD844
    static ::StringW GetDirectoryEntryFullPath(ByRef<::GlobalNamespace::Interop::Sys::DirectoryEntry> dirent, ::StringW currentPath);
    // static private System.Void EnumerateFilesRecursively(System.String path, System.Predicate`1<System.String> condition)
    // Offset: 0x45AD9B0
    static void EnumerateFilesRecursively(::StringW path, ::System::Predicate_1<::StringW>* condition);
    // static private System.String FindTimeZoneId(System.Byte[] rawData)
    // Offset: 0x45AD584
    static ::StringW FindTimeZoneId(::ArrayW<uint8_t> rawData);
    // static private System.Boolean CompareTimeZoneFile(System.String filePath, System.Byte[] buffer, System.Byte[] rawData)
    // Offset: 0x45ADF78
    static bool CompareTimeZoneFile(::StringW filePath, ::ArrayW<uint8_t> buffer, ::ArrayW<uint8_t> rawData);
    // static private System.TimeZoneInfo GetLocalTimeZoneFromTzFile()
    // Offset: 0x45ACD9C
    static ::System::TimeZoneInfo* GetLocalTimeZoneFromTzFile();
    // static private System.TimeZoneInfo GetTimeZoneFromTzData(System.Byte[] rawData, System.String id)
    // Offset: 0x45AE328
    static ::System::TimeZoneInfo* GetTimeZoneFromTzData(::ArrayW<uint8_t> rawData, ::StringW id);
    // static private System.String GetTimeZoneDirectory()
    // Offset: 0x45AD32C
    static ::StringW GetTimeZoneDirectory();
    // static System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, out System.Boolean isAmbiguousLocalDst)
    // Offset: 0x45AE9C0
    static ::System::TimeSpan GetDateTimeNowUtcOffsetFromUtc(::System::DateTime time, ByRef<bool> isAmbiguousLocalDst);
    // static private System.Void TZif_GenerateAdjustmentRules(out System.TimeZoneInfo/AdjustmentRule[] rules, System.TimeSpan baseUtcOffset, System.DateTime[] dts, System.Byte[] typeOfLocalTime, System.TimeZoneInfo/TZifType[] transitionType, System.Boolean[] StandardTime, System.Boolean[] GmtTime, System.String futureTransitionsPosixFormat)
    // Offset: 0x45AC8BC
    static void TZif_GenerateAdjustmentRules(ByRef<::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>> rules, ::System::TimeSpan baseUtcOffset, ::ArrayW<::System::DateTime> dts, ::ArrayW<uint8_t> typeOfLocalTime, ::ArrayW<::System::TimeZoneInfo::TZifType> transitionType, ::ArrayW<bool> StandardTime, ::ArrayW<bool> GmtTime, ::StringW futureTransitionsPosixFormat);
    // static private System.Void TZif_GenerateAdjustmentRule(ref System.Int32 index, System.TimeSpan timeZoneBaseUtcOffset, System.Collections.Generic.List`1<System.TimeZoneInfo/AdjustmentRule> rulesList, System.DateTime[] dts, System.Byte[] typeOfLocalTime, System.TimeZoneInfo/TZifType[] transitionTypes, System.Boolean[] StandardTime, System.Boolean[] GmtTime, System.String futureTransitionsPosixFormat)
    // Offset: 0x45AED88
    static void TZif_GenerateAdjustmentRule(ByRef<int> index, ::System::TimeSpan timeZoneBaseUtcOffset, ::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* rulesList, ::ArrayW<::System::DateTime> dts, ::ArrayW<uint8_t> typeOfLocalTime, ::ArrayW<::System::TimeZoneInfo::TZifType> transitionTypes, ::ArrayW<bool> StandardTime, ::ArrayW<bool> GmtTime, ::StringW futureTransitionsPosixFormat);
    // static private System.TimeSpan TZif_CalculateTransitionOffsetFromBase(System.TimeSpan transitionOffset, System.TimeSpan timeZoneBaseUtcOffset)
    // Offset: 0x45AF564
    static ::System::TimeSpan TZif_CalculateTransitionOffsetFromBase(::System::TimeSpan transitionOffset, ::System::TimeSpan timeZoneBaseUtcOffset);
    // static private System.TimeZoneInfo/TZifType TZif_GetEarlyDateTransitionType(System.TimeZoneInfo/TZifType[] transitionTypes)
    // Offset: 0x45AF4B4
    static ::System::TimeZoneInfo::TZifType TZif_GetEarlyDateTransitionType(::ArrayW<::System::TimeZoneInfo::TZifType> transitionTypes);
    // static private System.TimeZoneInfo/AdjustmentRule TZif_CreateAdjustmentRuleForPosixFormat(System.String posixFormat, System.DateTime startTransitionDate, System.TimeSpan timeZoneBaseUtcOffset)
    // Offset: 0x45AFA2C
    static ::System::TimeZoneInfo::AdjustmentRule* TZif_CreateAdjustmentRuleForPosixFormat(::StringW posixFormat, ::System::DateTime startTransitionDate, ::System::TimeSpan timeZoneBaseUtcOffset);
    // static private System.Nullable`1<System.TimeSpan> TZif_ParseOffsetString(System.String offset)
    // Offset: 0x45AFFE4
    static ::System::Nullable_1<::System::TimeSpan> TZif_ParseOffsetString(::StringW offset);
    // static private System.DateTime ParseTimeOfDay(System.String time)
    // Offset: 0x45B0434
    static ::System::DateTime ParseTimeOfDay(::StringW time);
    // static private System.TimeZoneInfo/TransitionTime TZif_CreateTransitionTimeFromPosixRule(System.String date, System.String time)
    // Offset: 0x45B01DC
    static ::System::TimeZoneInfo::TransitionTime TZif_CreateTransitionTimeFromPosixRule(::StringW date, ::StringW time);
    // static private System.Void TZif_ParseJulianDay(System.String date, out System.Int32 month, out System.Int32 day)
    // Offset: 0x45B08CC
    static void TZif_ParseJulianDay(::StringW date, ByRef<int> month, ByRef<int> day);
    // static private System.Boolean TZif_ParseMDateRule(System.String dateRule, out System.Int32 month, out System.Int32 week, out System.DayOfWeek dayOfWeek)
    // Offset: 0x45B0668
    static bool TZif_ParseMDateRule(::StringW dateRule, ByRef<int> month, ByRef<int> week, ByRef<::System::DayOfWeek> dayOfWeek);
    // static private System.Boolean TZif_ParsePosixFormat(System.String posixFormat, out System.String standardName, out System.String standardOffset, out System.String daylightSavingsName, out System.String daylightSavingsOffset, out System.String start, out System.String startTime, out System.String end, out System.String endTime)
    // Offset: 0x45AFD54
    static bool TZif_ParsePosixFormat(::StringW posixFormat, ByRef<::StringW> standardName, ByRef<::StringW> standardOffset, ByRef<::StringW> daylightSavingsName, ByRef<::StringW> daylightSavingsOffset, ByRef<::StringW> start, ByRef<::StringW> startTime, ByRef<::StringW> end, ByRef<::StringW> endTime);
    // static private System.String TZif_ParsePosixName(System.String posixFormat, ref System.Int32 index)
    // Offset: 0x45B0A94
    static ::StringW TZif_ParsePosixName(::StringW posixFormat, ByRef<int> index);
    // static private System.String TZif_ParsePosixOffset(System.String posixFormat, ref System.Int32 index)
    // Offset: 0x45B0CD8
    static ::StringW TZif_ParsePosixOffset(::StringW posixFormat, ByRef<int> index);
    // static private System.Void TZif_ParsePosixDateTime(System.String posixFormat, ref System.Int32 index, out System.String date, out System.String time)
    // Offset: 0x45B0DEC
    static void TZif_ParsePosixDateTime(::StringW posixFormat, ByRef<int> index, ByRef<::StringW> date, ByRef<::StringW> time);
    // static private System.String TZif_ParsePosixDate(System.String posixFormat, ref System.Int32 index)
    // Offset: 0x45B0F94
    static ::StringW TZif_ParsePosixDate(::StringW posixFormat, ByRef<int> index);
    // static private System.String TZif_ParsePosixTime(System.String posixFormat, ref System.Int32 index)
    // Offset: 0x45B10A8
    static ::StringW TZif_ParsePosixTime(::StringW posixFormat, ByRef<int> index);
    // static private System.String TZif_ParsePosixString(System.String posixFormat, ref System.Int32 index, System.Func`2<System.Char,System.Boolean> breakCondition)
    // Offset: 0x45B0EFC
    static ::StringW TZif_ParsePosixString(::StringW posixFormat, ByRef<int> index, ::System::Func_2<::Il2CppChar, bool>* breakCondition);
    // static private System.String TZif_GetZoneAbbreviation(System.String zoneAbbreviations, System.Int32 index)
    // Offset: 0x45AC858
    static ::StringW TZif_GetZoneAbbreviation(::StringW zoneAbbreviations, int index);
    // static private System.Int32 TZif_ToInt32(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x45B11BC
    static int TZif_ToInt32(::ArrayW<uint8_t> value, int startIndex);
    // static private System.Int64 TZif_ToInt64(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x45B11EC
    static int64_t TZif_ToInt64(::ArrayW<uint8_t> value, int startIndex);
    // static private System.Int64 TZif_ToUnixTime(System.Byte[] value, System.Int32 startIndex, System.TimeZoneInfo/TZVersion version)
    // Offset: 0x45B121C
    static int64_t TZif_ToUnixTime(::ArrayW<uint8_t> value, int startIndex, ::System::TimeZoneInfo::TZVersion version);
    // static private System.DateTime TZif_UnixTimeToDateTime(System.Int64 unixTime)
    // Offset: 0x45B12A4
    static ::System::DateTime TZif_UnixTimeToDateTime(int64_t unixTime);
    // static private System.Void TZif_ParseRaw(System.Byte[] data, out System.TimeZoneInfo/TZifHead t, out System.DateTime[] dts, out System.Byte[] typeOfLocalTime, out System.TimeZoneInfo/TZifType[] transitionType, out System.String zoneAbbreviations, out System.Boolean[] StandardTime, out System.Boolean[] GmtTime, out System.String futureTransitionsPosixFormat)
    // Offset: 0x45AC28C
    static void TZif_ParseRaw(::ArrayW<uint8_t> data, ByRef<::System::TimeZoneInfo::TZifHead> t, ByRef<::ArrayW<::System::DateTime>> dts, ByRef<::ArrayW<uint8_t>> typeOfLocalTime, ByRef<::ArrayW<::System::TimeZoneInfo::TZifType>> transitionType, ByRef<::StringW> zoneAbbreviations, ByRef<::ArrayW<bool>> StandardTime, ByRef<::ArrayW<bool>> GmtTime, ByRef<::StringW> futureTransitionsPosixFormat);
    // public System.String get_DisplayName()
    // Offset: 0x45B1684
    ::StringW get_DisplayName();
    // public System.String get_StandardName()
    // Offset: 0x45B16D8
    ::StringW get_StandardName();
    // public System.String get_DaylightName()
    // Offset: 0x45B172C
    ::StringW get_DaylightName();
    // public System.TimeSpan get_BaseUtcOffset()
    // Offset: 0x45B1780
    ::System::TimeSpan get_BaseUtcOffset();
    // private System.TimeZoneInfo/AdjustmentRule GetPreviousAdjustmentRule(System.TimeZoneInfo/AdjustmentRule rule, System.Nullable`1<System.Int32> ruleIndex)
    // Offset: 0x45B1788
    ::System::TimeZoneInfo::AdjustmentRule* GetPreviousAdjustmentRule(::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Nullable_1<int> ruleIndex);
    // public System.TimeSpan GetUtcOffset(System.DateTime dateTime)
    // Offset: 0x45B18AC
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime);
    // static System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B1A84
    static ::System::TimeSpan GetLocalUtcOffset(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B1B58
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // private System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo/CachedData cachedData)
    // Offset: 0x45B1920
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags, ::System::TimeZoneInfo::CachedData* cachedData);
    // System.Boolean IsDaylightSavingTime(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B1EE0
    bool IsDaylightSavingTime(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // private System.Boolean IsDaylightSavingTime(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo/CachedData cachedData)
    // Offset: 0x45B1F58
    bool IsDaylightSavingTime(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags, ::System::TimeZoneInfo::CachedData* cachedData);
    // static System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B1C5C
    static ::System::DateTime ConvertTime(::System::DateTime dateTime, ::System::TimeZoneInfo* sourceTimeZone, ::System::TimeZoneInfo* destinationTimeZone, ::System::TimeZoneInfoOptions flags);
    // static private System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags, System.TimeZoneInfo/CachedData cachedData)
    // Offset: 0x45B2148
    static ::System::DateTime ConvertTime(::System::DateTime dateTime, ::System::TimeZoneInfo* sourceTimeZone, ::System::TimeZoneInfo* destinationTimeZone, ::System::TimeZoneInfoOptions flags, ::System::TimeZoneInfo::CachedData* cachedData);
    // static System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B3238
    static ::System::DateTime ConvertTimeToUtc(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // public System.Boolean Equals(System.TimeZoneInfo other)
    // Offset: 0x45B3308
    bool Equals(::System::TimeZoneInfo* other);
    // public System.Boolean HasSameRules(System.TimeZoneInfo other)
    // Offset: 0x45B3358
    bool HasSameRules(::System::TimeZoneInfo* other);
    // static public System.TimeZoneInfo get_Local()
    // Offset: 0x45AEA38
    static ::System::TimeZoneInfo* get_Local();
    // static public System.TimeZoneInfo get_Utc()
    // Offset: 0x45B3778
    static ::System::TimeZoneInfo* get_Utc();
    // private System.Void .ctor(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName, System.String daylightDisplayName, System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, System.Boolean disableDaylightSavingTime)
    // Offset: 0x45B37D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName, ::StringW daylightDisplayName, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules, bool disableDaylightSavingTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>(id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)));
    }
    // static public System.TimeZoneInfo CreateCustomTimeZone(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName)
    // Offset: 0x45B38EC
    static ::System::TimeZoneInfo* CreateCustomTimeZone(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName);
    // static public System.TimeZoneInfo CreateCustomTimeZone(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName, System.String daylightDisplayName, System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, System.Boolean disableDaylightSavingTime)
    // Offset: 0x45B3980
    static ::System::TimeZoneInfo* CreateCustomTimeZone(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName, ::StringW daylightDisplayName, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules, bool disableDaylightSavingTime);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x45B3A84
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x45B3C58
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x45B3E30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>(info, context)));
    }
    // private System.TimeZoneInfo/AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, out System.Nullable`1<System.Int32> ruleIndex)
    // Offset: 0x45B25A8
    ::System::TimeZoneInfo::AdjustmentRule* GetAdjustmentRuleForTime(::System::DateTime dateTime, ByRef<::System::Nullable_1<int>> ruleIndex);
    // private System.TimeZoneInfo/AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, System.Boolean dateTimeisUtc, out System.Nullable`1<System.Int32> ruleIndex)
    // Offset: 0x45B42BC
    ::System::TimeZoneInfo::AdjustmentRule* GetAdjustmentRuleForTime(::System::DateTime dateTime, bool dateTimeisUtc, ByRef<::System::Nullable_1<int>> ruleIndex);
    // private System.Int32 CompareAdjustmentRuleToDateTime(System.TimeZoneInfo/AdjustmentRule rule, System.TimeZoneInfo/AdjustmentRule previousRule, System.DateTime dateTime, System.DateTime dateOnly, System.Boolean dateTimeisUtc)
    // Offset: 0x45B4460
    int CompareAdjustmentRuleToDateTime(::System::TimeZoneInfo::AdjustmentRule* rule, ::System::TimeZoneInfo::AdjustmentRule* previousRule, ::System::DateTime dateTime, ::System::DateTime dateOnly, bool dateTimeisUtc);
    // private System.DateTime ConvertToUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta)
    // Offset: 0x45B4604
    ::System::DateTime ConvertToUtc(::System::DateTime dateTime, ::System::TimeSpan daylightDelta, ::System::TimeSpan baseUtcOffsetDelta);
    // private System.DateTime ConvertFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta)
    // Offset: 0x45B478C
    ::System::DateTime ConvertFromUtc(::System::DateTime dateTime, ::System::TimeSpan daylightDelta, ::System::TimeSpan baseUtcOffsetDelta);
    // private System.DateTime ConvertToFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta, System.Boolean convertToUtc)
    // Offset: 0x45B460C
    ::System::DateTime ConvertToFromUtc(::System::DateTime dateTime, ::System::TimeSpan daylightDelta, ::System::TimeSpan baseUtcOffsetDelta, bool convertToUtc);
    // static private System.DateTime ConvertUtcToTimeZone(System.Int64 ticks, System.TimeZoneInfo destinationTimeZone, out System.Boolean isAmbiguousLocalDst)
    // Offset: 0x45B3054
    static ::System::DateTime ConvertUtcToTimeZone(int64_t ticks, ::System::TimeZoneInfo* destinationTimeZone, ByRef<bool> isAmbiguousLocalDst);
    // private System.Globalization.DaylightTimeStruct GetDaylightTime(System.Int32 year, System.TimeZoneInfo/AdjustmentRule rule, System.Nullable`1<System.Int32> ruleIndex)
    // Offset: 0x45B271C
    ::System::Globalization::DaylightTimeStruct GetDaylightTime(int year, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Nullable_1<int> ruleIndex);
    // static private System.Boolean GetIsDaylightSavings(System.DateTime time, System.TimeZoneInfo/AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B2858
    static bool GetIsDaylightSavings(::System::DateTime time, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Globalization::DaylightTimeStruct daylightTime, ::System::TimeZoneInfoOptions flags);
    // private System.TimeSpan GetDaylightSavingsStartOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo/AdjustmentRule rule, System.Nullable`1<System.Int32> ruleIndex)
    // Offset: 0x45B5114
    ::System::TimeSpan GetDaylightSavingsStartOffsetFromUtc(::System::TimeSpan baseUtcOffset, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Nullable_1<int> ruleIndex);
    // private System.TimeSpan GetDaylightSavingsEndOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo/AdjustmentRule rule)
    // Offset: 0x45B51DC
    ::System::TimeSpan GetDaylightSavingsEndOffsetFromUtc(::System::TimeSpan baseUtcOffset, ::System::TimeZoneInfo::AdjustmentRule* rule);
    // static private System.Boolean GetIsDaylightSavingsFromUtc(System.DateTime time, System.Int32 year, System.TimeSpan utc, System.TimeZoneInfo/AdjustmentRule rule, System.Nullable`1<System.Int32> ruleIndex, out System.Boolean isAmbiguousLocalDst, System.TimeZoneInfo zone)
    // Offset: 0x45B5254
    static bool GetIsDaylightSavingsFromUtc(::System::DateTime time, int year, ::System::TimeSpan utc, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Nullable_1<int> ruleIndex, ByRef<bool> isAmbiguousLocalDst, ::System::TimeZoneInfo* zone);
    // static private System.Boolean CheckIsDst(System.DateTime startTime, System.DateTime time, System.DateTime endTime, System.Boolean ignoreYearAdjustment, System.TimeZoneInfo/AdjustmentRule rule)
    // Offset: 0x45B4B78
    static bool CheckIsDst(::System::DateTime startTime, ::System::DateTime time, ::System::DateTime endTime, bool ignoreYearAdjustment, ::System::TimeZoneInfo::AdjustmentRule* rule);
    // static private System.Boolean GetIsAmbiguousTime(System.DateTime time, System.TimeZoneInfo/AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime)
    // Offset: 0x45B4D58
    static bool GetIsAmbiguousTime(::System::DateTime time, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Globalization::DaylightTimeStruct daylightTime);
    // static private System.Boolean GetIsInvalidTime(System.DateTime time, System.TimeZoneInfo/AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime)
    // Offset: 0x45B2C98
    static bool GetIsInvalidTime(::System::DateTime time, ::System::TimeZoneInfo::AdjustmentRule* rule, ::System::Globalization::DaylightTimeStruct daylightTime);
    // static private System.TimeSpan GetUtcOffset(System.DateTime time, System.TimeZoneInfo zone, System.TimeZoneInfoOptions flags)
    // Offset: 0x45B1D54
    static ::System::TimeSpan GetUtcOffset(::System::DateTime time, ::System::TimeZoneInfo* zone, ::System::TimeZoneInfoOptions flags);
    // static private System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone)
    // Offset: 0x45B1CE4
    static ::System::TimeSpan GetUtcOffsetFromUtc(::System::DateTime time, ::System::TimeZoneInfo* zone);
    // static private System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, out System.Boolean isDaylightSavings)
    // Offset: 0x45B2528
    static ::System::TimeSpan GetUtcOffsetFromUtc(::System::DateTime time, ::System::TimeZoneInfo* zone, ByRef<bool> isDaylightSavings);
    // static System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, out System.Boolean isDaylightSavings, out System.Boolean isAmbiguousLocalDst)
    // Offset: 0x45AEAB8
    static ::System::TimeSpan GetUtcOffsetFromUtc(::System::DateTime time, ::System::TimeZoneInfo* zone, ByRef<bool> isDaylightSavings, ByRef<bool> isAmbiguousLocalDst);
    // static System.DateTime TransitionTimeToDateTime(System.Int32 year, System.TimeZoneInfo/TransitionTime transitionTime)
    // Offset: 0x45B4794
    static ::System::DateTime TransitionTimeToDateTime(int year, ::System::TimeZoneInfo::TransitionTime transitionTime);
    // static private System.Void ValidateTimeZoneInfo(System.String id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, out System.Boolean adjustmentRulesSupportDst)
    // Offset: 0x45ACA2C
    static void ValidateTimeZoneInfo(::StringW id, ::System::TimeSpan baseUtcOffset, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules, ByRef<bool> adjustmentRulesSupportDst);
    // static System.Boolean UtcOffsetOutOfRange(System.TimeSpan offset)
    // Offset: 0x45B5A00
    static bool UtcOffsetOutOfRange(::System::TimeSpan offset);
    // static private System.TimeSpan GetUtcOffset(System.TimeSpan baseUtcOffset, System.TimeZoneInfo/AdjustmentRule adjustmentRule)
    // Offset: 0x45B5B34
    static ::System::TimeSpan GetUtcOffset(::System::TimeSpan baseUtcOffset, ::System::TimeZoneInfo::AdjustmentRule* adjustmentRule);
    // static private System.Boolean IsValidAdjustmentRuleOffest(System.TimeSpan baseUtcOffset, System.TimeZoneInfo/AdjustmentRule adjustmentRule)
    // Offset: 0x45AF70C
    static bool IsValidAdjustmentRuleOffest(::System::TimeSpan baseUtcOffset, ::System::TimeZoneInfo::AdjustmentRule* adjustmentRule);
    // static private System.Void NormalizeAdjustmentRuleOffset(System.TimeSpan baseUtcOffset, ref System.TimeZoneInfo/AdjustmentRule adjustmentRule)
    // Offset: 0x45AF780
    static void NormalizeAdjustmentRuleOffset(::System::TimeSpan baseUtcOffset, ByRef<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRule);
    // static private System.String GetTimeZoneDirectoryUnity()
    // Offset: 0x45B5BFC
    static ::StringW GetTimeZoneDirectoryUnity();
    // static private System.Collections.Generic.List`1<System.TimeZoneInfo/AdjustmentRule> CreateAdjustmentRule(System.Int32 year, out System.Int64[] data, out System.String[] names)
    // Offset: 0x45B5C44
    static ::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* CreateAdjustmentRule(int year, ByRef<::ArrayW<int64_t>> data, ByRef<::ArrayW<::StringW>> names);
    // static private System.TimeZoneInfo CreateLocalUnity()
    // Offset: 0x45AE4D0
    static ::System::TimeZoneInfo* CreateLocalUnity();
    // static private System.Void .cctor()
    // Offset: 0x45B64AC
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x45B34BC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x45B3520
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x45B3724
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // System.Void .ctor()
    // Offset: 0x45B6638
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>()));
    }
  }; // System.TimeZoneInfo
  #pragma pack(pop)
  static check_size<sizeof(TimeZoneInfo), 64 + sizeof(::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>)> __System_TimeZoneInfoSizeCheck;
  static_assert(sizeof(TimeZoneInfo) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::TimeZoneInfo::TZifType, "System", "TimeZoneInfo/TZifType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalTimeZone
// Il2CppName: GetLocalTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::System::TimeZoneInfo::CachedData*)>(&System::TimeZoneInfo::GetLocalTimeZone)> {
  static const MethodInfo* get() {
    static auto* cachedData = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/CachedData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachedData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryGetLocalTzFile
// Il2CppName: TryGetLocalTzFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::ArrayW<uint8_t>>, ByRef<::StringW>)>(&System::TimeZoneInfo::TryGetLocalTzFile)> {
  static const MethodInfo* get() {
    static auto* rawData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryGetLocalTzFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawData, id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetTzEnvironmentVariable
// Il2CppName: GetTzEnvironmentVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::TimeZoneInfo::GetTzEnvironmentVariable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetTzEnvironmentVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryLoadTzFile
// Il2CppName: TryLoadTzFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::ArrayW<uint8_t>>, ByRef<::StringW>)>(&System::TimeZoneInfo::TryLoadTzFile)> {
  static const MethodInfo* get() {
    static auto* tzFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rawData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryLoadTzFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tzFilePath, rawData, id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindTimeZoneIdUsingReadLink
// Il2CppName: FindTimeZoneIdUsingReadLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::TimeZoneInfo::FindTimeZoneIdUsingReadLink)> {
  static const MethodInfo* get() {
    static auto* tzFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindTimeZoneIdUsingReadLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tzFilePath});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDirectoryEntryFullPath
// Il2CppName: GetDirectoryEntryFullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::GlobalNamespace::Interop::Sys::DirectoryEntry>, ::StringW)>(&System::TimeZoneInfo::GetDirectoryEntryFullPath)> {
  static const MethodInfo* get() {
    static auto* dirent = &::il2cpp_utils::GetClassFromName("", "Interop/Sys/DirectoryEntry")->this_arg;
    static auto* currentPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDirectoryEntryFullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dirent, currentPath});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::EnumerateFilesRecursively
// Il2CppName: EnumerateFilesRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Predicate_1<::StringW>*)>(&System::TimeZoneInfo::EnumerateFilesRecursively)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* condition = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Predicate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "EnumerateFilesRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, condition});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindTimeZoneId
// Il2CppName: FindTimeZoneId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&System::TimeZoneInfo::FindTimeZoneId)> {
  static const MethodInfo* get() {
    static auto* rawData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindTimeZoneId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CompareTimeZoneFile
// Il2CppName: CompareTimeZoneFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::TimeZoneInfo::CompareTimeZoneFile)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* rawData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CompareTimeZoneFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, buffer, rawData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalTimeZoneFromTzFile
// Il2CppName: GetLocalTimeZoneFromTzFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::GetLocalTimeZoneFromTzFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalTimeZoneFromTzFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetTimeZoneFromTzData
// Il2CppName: GetTimeZoneFromTzData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::ArrayW<uint8_t>, ::StringW)>(&System::TimeZoneInfo::GetTimeZoneFromTzData)> {
  static const MethodInfo* get() {
    static auto* rawData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetTimeZoneFromTzData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawData, id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetTimeZoneDirectory
// Il2CppName: GetTimeZoneDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::TimeZoneInfo::GetTimeZoneDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetTimeZoneDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDateTimeNowUtcOffsetFromUtc
// Il2CppName: GetDateTimeNowUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ByRef<bool>)>(&System::TimeZoneInfo::GetDateTimeNowUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDateTimeNowUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, isAmbiguousLocalDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_GenerateAdjustmentRules
// Il2CppName: TZif_GenerateAdjustmentRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>>, ::System::TimeSpan, ::ArrayW<::System::DateTime>, ::ArrayW<uint8_t>, ::ArrayW<::System::TimeZoneInfo::TZifType>, ::ArrayW<bool>, ::ArrayW<bool>, ::StringW)>(&System::TimeZoneInfo::TZif_GenerateAdjustmentRules)> {
  static const MethodInfo* get() {
    static auto* rules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->this_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* dts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "DateTime"), 1)->byval_arg;
    static auto* typeOfLocalTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* transitionType = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZifType"), 1)->byval_arg;
    static auto* StandardTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* GmtTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* futureTransitionsPosixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_GenerateAdjustmentRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rules, baseUtcOffset, dts, typeOfLocalTime, transitionType, StandardTime, GmtTime, futureTransitionsPosixFormat});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_GenerateAdjustmentRule
// Il2CppName: TZif_GenerateAdjustmentRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ::System::TimeSpan, ::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>*, ::ArrayW<::System::DateTime>, ::ArrayW<uint8_t>, ::ArrayW<::System::TimeZoneInfo::TZifType>, ::ArrayW<bool>, ::ArrayW<bool>, ::StringW)>(&System::TimeZoneInfo::TZif_GenerateAdjustmentRule)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* timeZoneBaseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* rulesList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")})->byval_arg;
    static auto* dts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "DateTime"), 1)->byval_arg;
    static auto* typeOfLocalTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* transitionTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZifType"), 1)->byval_arg;
    static auto* StandardTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* GmtTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* futureTransitionsPosixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_GenerateAdjustmentRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, timeZoneBaseUtcOffset, rulesList, dts, typeOfLocalTime, transitionTypes, StandardTime, GmtTime, futureTransitionsPosixFormat});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_CalculateTransitionOffsetFromBase
// Il2CppName: TZif_CalculateTransitionOffsetFromBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::TimeSpan, ::System::TimeSpan)>(&System::TimeZoneInfo::TZif_CalculateTransitionOffsetFromBase)> {
  static const MethodInfo* get() {
    static auto* transitionOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* timeZoneBaseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_CalculateTransitionOffsetFromBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transitionOffset, timeZoneBaseUtcOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_GetEarlyDateTransitionType
// Il2CppName: TZif_GetEarlyDateTransitionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::TZifType (*)(::ArrayW<::System::TimeZoneInfo::TZifType>)>(&System::TimeZoneInfo::TZif_GetEarlyDateTransitionType)> {
  static const MethodInfo* get() {
    static auto* transitionTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZifType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_GetEarlyDateTransitionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transitionTypes});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_CreateAdjustmentRuleForPosixFormat
// Il2CppName: TZif_CreateAdjustmentRuleForPosixFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (*)(::StringW, ::System::DateTime, ::System::TimeSpan)>(&System::TimeZoneInfo::TZif_CreateAdjustmentRuleForPosixFormat)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startTransitionDate = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* timeZoneBaseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_CreateAdjustmentRuleForPosixFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, startTransitionDate, timeZoneBaseUtcOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParseOffsetString
// Il2CppName: TZif_ParseOffsetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::TimeSpan> (*)(::StringW)>(&System::TimeZoneInfo::TZif_ParseOffsetString)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParseOffsetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseTimeOfDay
// Il2CppName: ParseTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::TimeZoneInfo::ParseTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_CreateTransitionTimeFromPosixRule
// Il2CppName: TZif_CreateTransitionTimeFromPosixRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::TransitionTime (*)(::StringW, ::StringW)>(&System::TimeZoneInfo::TZif_CreateTransitionTimeFromPosixRule)> {
  static const MethodInfo* get() {
    static auto* date = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_CreateTransitionTimeFromPosixRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{date, time});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParseJulianDay
// Il2CppName: TZif_ParseJulianDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<int>, ByRef<int>)>(&System::TimeZoneInfo::TZif_ParseJulianDay)> {
  static const MethodInfo* get() {
    static auto* date = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParseJulianDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{date, month, day});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParseMDateRule
// Il2CppName: TZif_ParseMDateRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<int>, ByRef<int>, ByRef<::System::DayOfWeek>)>(&System::TimeZoneInfo::TZif_ParseMDateRule)> {
  static const MethodInfo* get() {
    static auto* dateRule = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* week = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* dayOfWeek = &::il2cpp_utils::GetClassFromName("System", "DayOfWeek")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParseMDateRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateRule, month, week, dayOfWeek});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixFormat
// Il2CppName: TZif_ParsePosixFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>)>(&System::TimeZoneInfo::TZif_ParsePosixFormat)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* standardOffset = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* daylightSavingsName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* daylightSavingsOffset = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* endTime = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, standardName, standardOffset, daylightSavingsName, daylightSavingsOffset, start, startTime, end, endTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixName
// Il2CppName: TZif_ParsePosixName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&System::TimeZoneInfo::TZif_ParsePosixName)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixOffset
// Il2CppName: TZif_ParsePosixOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&System::TimeZoneInfo::TZif_ParsePosixOffset)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixDateTime
// Il2CppName: TZif_ParsePosixDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<int>, ByRef<::StringW>, ByRef<::StringW>)>(&System::TimeZoneInfo::TZif_ParsePosixDateTime)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* date = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index, date, time});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixDate
// Il2CppName: TZif_ParsePosixDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&System::TimeZoneInfo::TZif_ParsePosixDate)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixTime
// Il2CppName: TZif_ParsePosixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&System::TimeZoneInfo::TZif_ParsePosixTime)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParsePosixString
// Il2CppName: TZif_ParsePosixString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>, ::System::Func_2<::Il2CppChar, bool>*)>(&System::TimeZoneInfo::TZif_ParsePosixString)> {
  static const MethodInfo* get() {
    static auto* posixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* breakCondition = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParsePosixString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posixFormat, index, breakCondition});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_GetZoneAbbreviation
// Il2CppName: TZif_GetZoneAbbreviation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int)>(&System::TimeZoneInfo::TZif_GetZoneAbbreviation)> {
  static const MethodInfo* get() {
    static auto* zoneAbbreviations = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_GetZoneAbbreviation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneAbbreviations, index});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ToInt32
// Il2CppName: TZif_ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::TZif_ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ToInt64
// Il2CppName: TZif_ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::TZif_ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ToUnixTime
// Il2CppName: TZif_ToUnixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::ArrayW<uint8_t>, int, ::System::TimeZoneInfo::TZVersion)>(&System::TimeZoneInfo::TZif_ToUnixTime)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ToUnixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, version});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_UnixTimeToDateTime
// Il2CppName: TZif_UnixTimeToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int64_t)>(&System::TimeZoneInfo::TZif_UnixTimeToDateTime)> {
  static const MethodInfo* get() {
    static auto* unixTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_UnixTimeToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unixTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TZif_ParseRaw
// Il2CppName: TZif_ParseRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, ByRef<::System::TimeZoneInfo::TZifHead>, ByRef<::ArrayW<::System::DateTime>>, ByRef<::ArrayW<uint8_t>>, ByRef<::ArrayW<::System::TimeZoneInfo::TZifType>>, ByRef<::StringW>, ByRef<::ArrayW<bool>>, ByRef<::ArrayW<bool>>, ByRef<::StringW>)>(&System::TimeZoneInfo::TZif_ParseRaw)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZifHead")->this_arg;
    static auto* dts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "DateTime"), 1)->this_arg;
    static auto* typeOfLocalTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* transitionType = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TZifType"), 1)->this_arg;
    static auto* zoneAbbreviations = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* StandardTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->this_arg;
    static auto* GmtTime = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->this_arg;
    static auto* futureTransitionsPosixFormat = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TZif_ParseRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, t, dts, typeOfLocalTime, transitionType, zoneAbbreviations, StandardTime, GmtTime, futureTransitionsPosixFormat});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_StandardName
// Il2CppName: get_StandardName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_StandardName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_StandardName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_DaylightName
// Il2CppName: get_DaylightName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_DaylightName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_DaylightName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_BaseUtcOffset
// Il2CppName: get_BaseUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_BaseUtcOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_BaseUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetPreviousAdjustmentRule
// Il2CppName: GetPreviousAdjustmentRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (System::TimeZoneInfo::*)(::System::TimeZoneInfo::AdjustmentRule*, ::System::Nullable_1<int>)>(&System::TimeZoneInfo::GetPreviousAdjustmentRule)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetPreviousAdjustmentRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule, ruleIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalUtcOffset
// Il2CppName: GetLocalUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetLocalUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeZoneInfoOptions, ::System::TimeZoneInfo::CachedData*)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    static auto* cachedData = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/CachedData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags, cachedData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsDaylightSavingTime
// Il2CppName: IsDaylightSavingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::IsDaylightSavingTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsDaylightSavingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsDaylightSavingTime
// Il2CppName: IsDaylightSavingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeZoneInfoOptions, ::System::TimeZoneInfo::CachedData*)>(&System::TimeZoneInfo::IsDaylightSavingTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    static auto* cachedData = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/CachedData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsDaylightSavingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags, cachedData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTime
// Il2CppName: ConvertTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*, ::System::TimeZoneInfo*, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::ConvertTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* sourceTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* destinationTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, sourceTimeZone, destinationTimeZone, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTime
// Il2CppName: ConvertTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*, ::System::TimeZoneInfo*, ::System::TimeZoneInfoOptions, ::System::TimeZoneInfo::CachedData*)>(&System::TimeZoneInfo::ConvertTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* sourceTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* destinationTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    static auto* cachedData = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/CachedData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, sourceTimeZone, destinationTimeZone, flags, cachedData});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeToUtc
// Il2CppName: ConvertTimeToUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::ConvertTimeToUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeToUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo*)>(&System::TimeZoneInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::HasSameRules
// Il2CppName: HasSameRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo*)>(&System::TimeZoneInfo::HasSameRules)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "HasSameRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_Local
// Il2CppName: get_Local
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::get_Local)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_Local", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_Utc
// Il2CppName: get_Utc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::get_Utc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_Utc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateCustomTimeZone
// Il2CppName: CreateCustomTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW)>(&System::TimeZoneInfo::CreateCustomTimeZone)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateCustomTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, displayName, standardDisplayName});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateCustomTimeZone
// Il2CppName: CreateCustomTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>, bool)>(&System::TimeZoneInfo::CreateCustomTimeZone)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* daylightDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* adjustmentRules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->byval_arg;
    static auto* disableDaylightSavingTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateCustomTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TimeZoneInfo::*)(::Il2CppObject*)>(&System::TimeZoneInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TimeZoneInfo::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::TimeZoneInfo::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::GetAdjustmentRuleForTime
// Il2CppName: GetAdjustmentRuleForTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (System::TimeZoneInfo::*)(::System::DateTime, ByRef<::System::Nullable_1<int>>)>(&System::TimeZoneInfo::GetAdjustmentRuleForTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetAdjustmentRuleForTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, ruleIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetAdjustmentRuleForTime
// Il2CppName: GetAdjustmentRuleForTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (System::TimeZoneInfo::*)(::System::DateTime, bool, ByRef<::System::Nullable_1<int>>)>(&System::TimeZoneInfo::GetAdjustmentRuleForTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* dateTimeisUtc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetAdjustmentRuleForTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, dateTimeisUtc, ruleIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CompareAdjustmentRuleToDateTime
// Il2CppName: CompareAdjustmentRuleToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TimeZoneInfo::*)(::System::TimeZoneInfo::AdjustmentRule*, ::System::TimeZoneInfo::AdjustmentRule*, ::System::DateTime, ::System::DateTime, bool)>(&System::TimeZoneInfo::CompareAdjustmentRuleToDateTime)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* previousRule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* dateOnly = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* dateTimeisUtc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CompareAdjustmentRuleToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule, previousRule, dateTime, dateOnly, dateTimeisUtc});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertToUtc
// Il2CppName: ConvertToUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeSpan, ::System::TimeSpan)>(&System::TimeZoneInfo::ConvertToUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* daylightDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* baseUtcOffsetDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertToUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, daylightDelta, baseUtcOffsetDelta});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertFromUtc
// Il2CppName: ConvertFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeSpan, ::System::TimeSpan)>(&System::TimeZoneInfo::ConvertFromUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* daylightDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* baseUtcOffsetDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, daylightDelta, baseUtcOffsetDelta});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertToFromUtc
// Il2CppName: ConvertToFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeSpan, ::System::TimeSpan, bool)>(&System::TimeZoneInfo::ConvertToFromUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* daylightDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* baseUtcOffsetDelta = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* convertToUtc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertToFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, daylightDelta, baseUtcOffsetDelta, convertToUtc});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertUtcToTimeZone
// Il2CppName: ConvertUtcToTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int64_t, ::System::TimeZoneInfo*, ByRef<bool>)>(&System::TimeZoneInfo::ConvertUtcToTimeZone)> {
  static const MethodInfo* get() {
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destinationTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertUtcToTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ticks, destinationTimeZone, isAmbiguousLocalDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDaylightTime
// Il2CppName: GetDaylightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::DaylightTimeStruct (System::TimeZoneInfo::*)(int, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Nullable_1<int>)>(&System::TimeZoneInfo::GetDaylightTime)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDaylightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, rule, ruleIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetIsDaylightSavings
// Il2CppName: GetIsDaylightSavings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Globalization::DaylightTimeStruct, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetIsDaylightSavings)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* daylightTime = &::il2cpp_utils::GetClassFromName("System.Globalization", "DaylightTimeStruct")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetIsDaylightSavings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, rule, daylightTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDaylightSavingsStartOffsetFromUtc
// Il2CppName: GetDaylightSavingsStartOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::TimeSpan, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Nullable_1<int>)>(&System::TimeZoneInfo::GetDaylightSavingsStartOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDaylightSavingsStartOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUtcOffset, rule, ruleIndex});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDaylightSavingsEndOffsetFromUtc
// Il2CppName: GetDaylightSavingsEndOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::TimeSpan, ::System::TimeZoneInfo::AdjustmentRule*)>(&System::TimeZoneInfo::GetDaylightSavingsEndOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDaylightSavingsEndOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUtcOffset, rule});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetIsDaylightSavingsFromUtc
// Il2CppName: GetIsDaylightSavingsFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, int, ::System::TimeSpan, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Nullable_1<int>, ByRef<bool>, ::System::TimeZoneInfo*)>(&System::TimeZoneInfo::GetIsDaylightSavingsFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* utc = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* ruleIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetIsDaylightSavingsFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, year, utc, rule, ruleIndex, isAmbiguousLocalDst, zone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CheckIsDst
// Il2CppName: CheckIsDst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::DateTime, ::System::DateTime, bool, ::System::TimeZoneInfo::AdjustmentRule*)>(&System::TimeZoneInfo::CheckIsDst)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* endTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* ignoreYearAdjustment = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CheckIsDst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime, time, endTime, ignoreYearAdjustment, rule});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetIsAmbiguousTime
// Il2CppName: GetIsAmbiguousTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Globalization::DaylightTimeStruct)>(&System::TimeZoneInfo::GetIsAmbiguousTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* daylightTime = &::il2cpp_utils::GetClassFromName("System.Globalization", "DaylightTimeStruct")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetIsAmbiguousTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, rule, daylightTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetIsInvalidTime
// Il2CppName: GetIsInvalidTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeZoneInfo::AdjustmentRule*, ::System::Globalization::DaylightTimeStruct)>(&System::TimeZoneInfo::GetIsInvalidTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* daylightTime = &::il2cpp_utils::GetClassFromName("System.Globalization", "DaylightTimeStruct")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetIsInvalidTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, rule, daylightTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, zone, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffsetFromUtc
// Il2CppName: GetUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*)>(&System::TimeZoneInfo::GetUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, zone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffsetFromUtc
// Il2CppName: GetUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*, ByRef<bool>)>(&System::TimeZoneInfo::GetUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* isDaylightSavings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, zone, isDaylightSavings});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffsetFromUtc
// Il2CppName: GetUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*, ByRef<bool>, ByRef<bool>)>(&System::TimeZoneInfo::GetUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* isDaylightSavings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, zone, isDaylightSavings, isAmbiguousLocalDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TransitionTimeToDateTime
// Il2CppName: TransitionTimeToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int, ::System::TimeZoneInfo::TransitionTime)>(&System::TimeZoneInfo::TransitionTimeToDateTime)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transitionTime = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TransitionTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TransitionTimeToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, transitionTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ValidateTimeZoneInfo
// Il2CppName: ValidateTimeZoneInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::TimeSpan, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>, ByRef<bool>)>(&System::TimeZoneInfo::ValidateTimeZoneInfo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* adjustmentRules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->byval_arg;
    static auto* adjustmentRulesSupportDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ValidateTimeZoneInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, adjustmentRules, adjustmentRulesSupportDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::UtcOffsetOutOfRange
// Il2CppName: UtcOffsetOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::TimeSpan)>(&System::TimeZoneInfo::UtcOffsetOutOfRange)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "UtcOffsetOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::TimeSpan, ::System::TimeZoneInfo::AdjustmentRule*)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* adjustmentRule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUtcOffset, adjustmentRule});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsValidAdjustmentRuleOffest
// Il2CppName: IsValidAdjustmentRuleOffest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::TimeSpan, ::System::TimeZoneInfo::AdjustmentRule*)>(&System::TimeZoneInfo::IsValidAdjustmentRuleOffest)> {
  static const MethodInfo* get() {
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* adjustmentRule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsValidAdjustmentRuleOffest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUtcOffset, adjustmentRule});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::NormalizeAdjustmentRuleOffset
// Il2CppName: NormalizeAdjustmentRuleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::TimeSpan, ByRef<::System::TimeZoneInfo::AdjustmentRule*>)>(&System::TimeZoneInfo::NormalizeAdjustmentRuleOffset)> {
  static const MethodInfo* get() {
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* adjustmentRule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "NormalizeAdjustmentRuleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUtcOffset, adjustmentRule});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetTimeZoneDirectoryUnity
// Il2CppName: GetTimeZoneDirectoryUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::TimeZoneInfo::GetTimeZoneDirectoryUnity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetTimeZoneDirectoryUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateAdjustmentRule
// Il2CppName: CreateAdjustmentRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* (*)(int, ByRef<::ArrayW<int64_t>>, ByRef<::ArrayW<::StringW>>)>(&System::TimeZoneInfo::CreateAdjustmentRule)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->this_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateAdjustmentRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, data, names});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateLocalUnity
// Il2CppName: CreateLocalUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::CreateLocalUnity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateLocalUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::TimeZoneInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::Il2CppObject*)>(&System::TimeZoneInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
