// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: MutableDecimal
  struct MutableDecimal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::MutableDecimal, "System", "MutableDecimal");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.MutableDecimal
  // [TokenAttribute] Offset: FFFFFFFF
  struct MutableDecimal/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 Flags
    // Size: 0x4
    // Offset: 0x0
    uint Flags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 High
    // Size: 0x4
    // Offset: 0x4
    uint High;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Low
    // Size: 0x4
    // Offset: 0x8
    uint Low;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Mid
    // Size: 0x4
    // Offset: 0xC
    uint Mid;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: MutableDecimal
    constexpr MutableDecimal(uint Flags_ = {}, uint High_ = {}, uint Low_ = {}, uint Mid_ = {}) noexcept : Flags{Flags_}, High{High_}, Low{Low_}, Mid{Mid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 Flags
    [[deprecated("Use field access instead!")]] uint& dyn_Flags();
    // Get instance field reference: public System.UInt32 High
    [[deprecated("Use field access instead!")]] uint& dyn_High();
    // Get instance field reference: public System.UInt32 Low
    [[deprecated("Use field access instead!")]] uint& dyn_Low();
    // Get instance field reference: public System.UInt32 Mid
    [[deprecated("Use field access instead!")]] uint& dyn_Mid();
    // public System.Boolean get_IsNegative()
    // Offset: 0x467C7B0
    bool get_IsNegative();
    // public System.Void set_IsNegative(System.Boolean value)
    // Offset: 0x467C7BC
    void set_IsNegative(bool value);
    // public System.Int32 get_Scale()
    // Offset: 0x467C7D8
    int get_Scale();
    // public System.Void set_Scale(System.Int32 value)
    // Offset: 0x467C7E0
    void set_Scale(int value);
  }; // System.MutableDecimal
  #pragma pack(pop)
  static check_size<sizeof(MutableDecimal), 12 + sizeof(uint)> __System_MutableDecimalSizeCheck;
  static_assert(sizeof(MutableDecimal) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::MutableDecimal::get_IsNegative
// Il2CppName: get_IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::MutableDecimal::*)()>(&System::MutableDecimal::get_IsNegative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::MutableDecimal), "get_IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::MutableDecimal::set_IsNegative
// Il2CppName: set_IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::MutableDecimal::*)(bool)>(&System::MutableDecimal::set_IsNegative)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MutableDecimal), "set_IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::MutableDecimal::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::MutableDecimal::*)()>(&System::MutableDecimal::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::MutableDecimal), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::MutableDecimal::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::MutableDecimal::*)(int)>(&System::MutableDecimal::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MutableDecimal), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
