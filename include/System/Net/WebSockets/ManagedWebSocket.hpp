// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebSockets.WebSocket
#include "System/Net/WebSockets/WebSocket.hpp"
// Including type: System.Memory`1
#include "System/Memory_1.hpp"
// Including type: System.Net.WebSockets.WebSocketState
#include "System/Net/WebSockets/WebSocketState.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Net.WebSockets.WebSocketCloseStatus
#include "System/Net/WebSockets/WebSocketCloseStatus.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.Tasks.ValueTask`1
#include "System/Threading/Tasks/ValueTask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::WebSockets
namespace System::Net::WebSockets {
  // Skipping declaration: MessageOpcode because it is already included!
  // Forward declaring type: WebSocketReceiveResult
  class WebSocketReceiveResult;
  // Forward declaring type: WebSocketMessageType
  struct WebSocketMessageType;
  // Skipping declaration: MessageHeader because it is already included!
  // Forward declaring type: WebSocketError
  struct WebSocketError;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Skipping declaration: Task because it is already included!
  // Skipping declaration: Task`1 because it is already included!
  // Forward declaring type: ValueTask
  struct ValueTask;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: SemaphoreSlim
  class SemaphoreSlim;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RandomNumberGenerator
  class RandomNumberGenerator;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: UTF8Encoding
  class UTF8Encoding;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ReadOnlyMemory`1 because it is already included!
  // Skipping declaration: ReadOnlySpan`1 because it is already included!
  // Forward declaring type: Exception
  class Exception;
  // Skipping declaration: Span`1 because it is already included!
  // Skipping declaration: ArraySegment`1 because it is already included!
}
// Completed forward declares
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: ManagedWebSocket
  class ManagedWebSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebSockets::ManagedWebSocket);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::ManagedWebSocket*, "System.Net.WebSockets", "ManagedWebSocket");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Net.WebSockets.ManagedWebSocket
  // [TokenAttribute] Offset: FFFFFFFF
  class ManagedWebSocket : public ::System::Net::WebSockets::WebSocket {
    public:
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState
    class Utf8MessageState;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode
    struct MessageOpcode;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::MessageHeader
    struct MessageHeader;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::IWebSocketReceiveResultGetter_1<TResult>
    template<typename TResult>
    class IWebSocketReceiveResultGetter_1;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::WebSocketReceiveResultGetter
    struct WebSocketReceiveResultGetter;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$$c
    class $$c;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$WaitForWriteTaskAsync$d__55
    struct $WaitForWriteTaskAsync$d__55;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$SendFrameFallbackAsync$d__56
    struct $SendFrameFallbackAsync$d__56;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$$c__61_2<TWebSocketReceiveResultGetter, TWebSocketReceiveResult>
    template<typename TWebSocketReceiveResultGetter, typename TWebSocketReceiveResult>
    class $$c__61_2;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$ReceiveAsyncPrivate$d__61_2<TWebSocketReceiveResultGetter, TWebSocketReceiveResult>
    template<typename TWebSocketReceiveResultGetter, typename TWebSocketReceiveResult>
    struct $ReceiveAsyncPrivate$d__61_2;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$HandleReceivedCloseAsync$d__62
    struct $HandleReceivedCloseAsync$d__62;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$WaitForServerToCloseConnectionAsync$d__63
    struct $WaitForServerToCloseConnectionAsync$d__63;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$HandleReceivedPingPongAsync$d__64
    struct $HandleReceivedPingPongAsync$d__64;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$CloseWithReceiveErrorAndThrowAsync$d__66
    struct $CloseWithReceiveErrorAndThrowAsync$d__66;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$SendCloseFrameAsync$d__69
    struct $SendCloseFrameAsync$d__69;
    // Nested type: ::System::Net::WebSockets::ManagedWebSocket::$EnsureBufferContainsAsync$d__71
    struct $EnsureBufferContainsAsync$d__71;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.WebSockets.ManagedWebSocket/MessageOpcode
    // [TokenAttribute] Offset: FFFFFFFF
    struct MessageOpcode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: MessageOpcode
      constexpr MessageOpcode(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Continuation
      static constexpr const uint8_t Continuation = 0u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Continuation
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Continuation();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Continuation
      static void _set_Continuation(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Text
      static constexpr const uint8_t Text = 1u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Text
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Text();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Text
      static void _set_Text(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Binary
      static constexpr const uint8_t Binary = 2u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Binary
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Binary();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Binary
      static void _set_Binary(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Close
      static constexpr const uint8_t Close = 8u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Close
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Close();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Close
      static void _set_Close(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Ping
      static constexpr const uint8_t Ping = 9u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Ping
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Ping();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Ping
      static void _set_Ping(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // static field const value: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Pong
      static constexpr const uint8_t Pong = 10u;
      // Get static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Pong
      static ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode _get_Pong();
      // Set static field: static public System.Net.WebSockets.ManagedWebSocket/MessageOpcode Pong
      static void _set_Pong(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode value);
      // Get instance field reference: public System.Byte value__
      [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
    }; // System.Net.WebSockets.ManagedWebSocket/MessageOpcode
    #pragma pack(pop)
    static check_size<sizeof(ManagedWebSocket::MessageOpcode), 0 + sizeof(uint8_t)> __System_Net_WebSockets_ManagedWebSocket_MessageOpcodeSizeCheck;
    static_assert(sizeof(ManagedWebSocket::MessageOpcode) == 0x1);
    // Size: 0x14
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.WebSockets.ManagedWebSocket/MessageHeader
    // [TokenAttribute] Offset: FFFFFFFF
    struct MessageHeader/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Net.WebSockets.ManagedWebSocket/MessageOpcode Opcode
      // Size: 0x1
      // Offset: 0x0
      ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode Opcode;
      // Field size check
      static_assert(sizeof(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode) == 0x1);
      // System.Boolean Fin
      // Size: 0x1
      // Offset: 0x1
      bool Fin;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: Fin and: PayloadLength
      char __padding1[0x6] = {};
      // System.Int64 PayloadLength
      // Size: 0x8
      // Offset: 0x8
      int64_t PayloadLength;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // System.Int32 Mask
      // Size: 0x4
      // Offset: 0x10
      int Mask;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MessageHeader
      constexpr MessageHeader(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode Opcode_ = {}, bool Fin_ = {}, int64_t PayloadLength_ = {}, int Mask_ = {}) noexcept : Opcode{Opcode_}, Fin{Fin_}, PayloadLength{PayloadLength_}, Mask{Mask_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Net.WebSockets.ManagedWebSocket/MessageOpcode Opcode
      [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::ManagedWebSocket::MessageOpcode& dyn_Opcode();
      // Get instance field reference: System.Boolean Fin
      [[deprecated("Use field access instead!")]] bool& dyn_Fin();
      // Get instance field reference: System.Int64 PayloadLength
      [[deprecated("Use field access instead!")]] int64_t& dyn_PayloadLength();
      // Get instance field reference: System.Int32 Mask
      [[deprecated("Use field access instead!")]] int& dyn_Mask();
    }; // System.Net.WebSockets.ManagedWebSocket/MessageHeader
    #pragma pack(pop)
    static check_size<sizeof(ManagedWebSocket::MessageHeader), 16 + sizeof(int)> __System_Net_WebSockets_ManagedWebSocket_MessageHeaderSizeCheck;
    static_assert(sizeof(ManagedWebSocket::MessageHeader) == 0x14);
    public:
    // private readonly System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private readonly System.Boolean _isServer
    // Size: 0x1
    // Offset: 0x18
    bool isServer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.String _subprotocol
    // Size: 0x8
    // Offset: 0x20
    ::StringW subprotocol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Threading.Timer _keepAliveTimer
    // Size: 0x8
    // Offset: 0x28
    ::System::Threading::Timer* keepAliveTimer;
    // Field size check
    static_assert(sizeof(::System::Threading::Timer*) == 0x8);
    // private readonly System.Threading.CancellationTokenSource _abortSource
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::CancellationTokenSource* abortSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Memory`1<System.Byte> _receiveBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::System::Memory_1<uint8_t> receiveBuffer;
    // private readonly System.Net.WebSockets.ManagedWebSocket/Utf8MessageState _utf8TextState
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState* utf8TextState;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState*) == 0x8);
    // private readonly System.Threading.SemaphoreSlim _sendFrameAsyncLock
    // Size: 0x8
    // Offset: 0x50
    ::System::Threading::SemaphoreSlim* sendFrameAsyncLock;
    // Field size check
    static_assert(sizeof(::System::Threading::SemaphoreSlim*) == 0x8);
    // private System.Net.WebSockets.WebSocketState _state
    // Size: 0x4
    // Offset: 0x58
    ::System::Net::WebSockets::WebSocketState state;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::WebSocketState) == 0x4);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x5C
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sentCloseFrame
    // Size: 0x1
    // Offset: 0x5D
    bool sentCloseFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _receivedCloseFrame
    // Size: 0x1
    // Offset: 0x5E
    bool receivedCloseFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Net.WebSockets.WebSocketCloseStatus> _closeStatus
    // Size: 0xFFFFFFFF
    // Offset: 0x60
    ::System::Nullable_1<::System::Net::WebSockets::WebSocketCloseStatus> closeStatus;
    // private System.String _closeStatusDescription
    // Size: 0x8
    // Offset: 0x68
    ::StringW closeStatusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Net.WebSockets.ManagedWebSocket/MessageHeader _lastReceiveHeader
    // Size: 0x14
    // Offset: 0x70
    ::System::Net::WebSockets::ManagedWebSocket::MessageHeader lastReceiveHeader;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::ManagedWebSocket::MessageHeader) == 0x14);
    // private System.Int32 _receiveBufferOffset
    // Size: 0x4
    // Offset: 0x88
    int receiveBufferOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _receiveBufferCount
    // Size: 0x4
    // Offset: 0x8C
    int receiveBufferCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _receivedMaskOffsetOffset
    // Size: 0x4
    // Offset: 0x90
    int receivedMaskOffsetOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte[] _sendBuffer
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<uint8_t> sendBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Boolean _lastSendWasFragment
    // Size: 0x1
    // Offset: 0xA0
    bool lastSendWasFragment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Threading.Tasks.Task _lastReceiveAsync
    // Size: 0x8
    // Offset: 0xA8
    ::System::Threading::Tasks::Task* lastReceiveAsync;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    public:
    // Get static field: static private readonly System.Security.Cryptography.RandomNumberGenerator s_random
    static ::System::Security::Cryptography::RandomNumberGenerator* _get_s_random();
    // Set static field: static private readonly System.Security.Cryptography.RandomNumberGenerator s_random
    static void _set_s_random(::System::Security::Cryptography::RandomNumberGenerator* value);
    // Get static field: static private readonly System.Text.UTF8Encoding s_textEncoding
    static ::System::Text::UTF8Encoding* _get_s_textEncoding();
    // Set static field: static private readonly System.Text.UTF8Encoding s_textEncoding
    static void _set_s_textEncoding(::System::Text::UTF8Encoding* value);
    // Get static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validSendStates
    static ::ArrayW<::System::Net::WebSockets::WebSocketState> _get_s_validSendStates();
    // Set static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validSendStates
    static void _set_s_validSendStates(::ArrayW<::System::Net::WebSockets::WebSocketState> value);
    // Get static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validReceiveStates
    static ::ArrayW<::System::Net::WebSockets::WebSocketState> _get_s_validReceiveStates();
    // Set static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validReceiveStates
    static void _set_s_validReceiveStates(::ArrayW<::System::Net::WebSockets::WebSocketState> value);
    // Get static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validCloseOutputStates
    static ::ArrayW<::System::Net::WebSockets::WebSocketState> _get_s_validCloseOutputStates();
    // Set static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validCloseOutputStates
    static void _set_s_validCloseOutputStates(::ArrayW<::System::Net::WebSockets::WebSocketState> value);
    // Get static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validCloseStates
    static ::ArrayW<::System::Net::WebSockets::WebSocketState> _get_s_validCloseStates();
    // Set static field: static private readonly System.Net.WebSockets.WebSocketState[] s_validCloseStates
    static void _set_s_validCloseStates(::ArrayW<::System::Net::WebSockets::WebSocketState> value);
    // Get static field: static private readonly System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> s_cachedCloseTask
    static ::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* _get_s_cachedCloseTask();
    // Set static field: static private readonly System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> s_cachedCloseTask
    static void _set_s_cachedCloseTask(::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* value);
    // Get instance field reference: private readonly System.IO.Stream _stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private readonly System.Boolean _isServer
    [[deprecated("Use field access instead!")]] bool& dyn__isServer();
    // Get instance field reference: private readonly System.String _subprotocol
    [[deprecated("Use field access instead!")]] ::StringW& dyn__subprotocol();
    // Get instance field reference: private readonly System.Threading.Timer _keepAliveTimer
    [[deprecated("Use field access instead!")]] ::System::Threading::Timer*& dyn__keepAliveTimer();
    // Get instance field reference: private readonly System.Threading.CancellationTokenSource _abortSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__abortSource();
    // Get instance field reference: private System.Memory`1<System.Byte> _receiveBuffer
    [[deprecated("Use field access instead!")]] ::System::Memory_1<uint8_t>& dyn__receiveBuffer();
    // Get instance field reference: private readonly System.Net.WebSockets.ManagedWebSocket/Utf8MessageState _utf8TextState
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState*& dyn__utf8TextState();
    // Get instance field reference: private readonly System.Threading.SemaphoreSlim _sendFrameAsyncLock
    [[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim*& dyn__sendFrameAsyncLock();
    // Get instance field reference: private System.Net.WebSockets.WebSocketState _state
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::WebSocketState& dyn__state();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Boolean _sentCloseFrame
    [[deprecated("Use field access instead!")]] bool& dyn__sentCloseFrame();
    // Get instance field reference: private System.Boolean _receivedCloseFrame
    [[deprecated("Use field access instead!")]] bool& dyn__receivedCloseFrame();
    // Get instance field reference: private System.Nullable`1<System.Net.WebSockets.WebSocketCloseStatus> _closeStatus
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::Net::WebSockets::WebSocketCloseStatus>& dyn__closeStatus();
    // Get instance field reference: private System.String _closeStatusDescription
    [[deprecated("Use field access instead!")]] ::StringW& dyn__closeStatusDescription();
    // Get instance field reference: private System.Net.WebSockets.ManagedWebSocket/MessageHeader _lastReceiveHeader
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::ManagedWebSocket::MessageHeader& dyn__lastReceiveHeader();
    // Get instance field reference: private System.Int32 _receiveBufferOffset
    [[deprecated("Use field access instead!")]] int& dyn__receiveBufferOffset();
    // Get instance field reference: private System.Int32 _receiveBufferCount
    [[deprecated("Use field access instead!")]] int& dyn__receiveBufferCount();
    // Get instance field reference: private System.Int32 _receivedMaskOffsetOffset
    [[deprecated("Use field access instead!")]] int& dyn__receivedMaskOffsetOffset();
    // Get instance field reference: private System.Byte[] _sendBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__sendBuffer();
    // Get instance field reference: private System.Boolean _lastSendWasFragment
    [[deprecated("Use field access instead!")]] bool& dyn__lastSendWasFragment();
    // Get instance field reference: private System.Threading.Tasks.Task _lastReceiveAsync
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn__lastReceiveAsync();
    // static public System.Net.WebSockets.ManagedWebSocket CreateFromConnectedStream(System.IO.Stream stream, System.Boolean isServer, System.String subprotocol, System.TimeSpan keepAliveInterval)
    // Offset: 0x4EDF538
    static ::System::Net::WebSockets::ManagedWebSocket* CreateFromConnectedStream(::System::IO::Stream* stream, bool isServer, ::StringW subprotocol, ::System::TimeSpan keepAliveInterval);
    // private System.Object get_StateUpdateLock()
    // Offset: 0x4EDF9D8
    ::Il2CppObject* get_StateUpdateLock();
    // private System.Object get_ReceiveAsyncLock()
    // Offset: 0x4EDF9E0
    ::Il2CppObject* get_ReceiveAsyncLock();
    // private System.Void .ctor(System.IO.Stream stream, System.Boolean isServer, System.String subprotocol, System.TimeSpan keepAliveInterval)
    // Offset: 0x4EDF5B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManagedWebSocket* New_ctor(::System::IO::Stream* stream, bool isServer, ::StringW subprotocol, ::System::TimeSpan keepAliveInterval) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::ManagedWebSocket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManagedWebSocket*, creationType>(stream, isServer, subprotocol, keepAliveInterval)));
    }
    // private System.Void DisposeCore()
    // Offset: 0x4EDFAB4
    void DisposeCore();
    // private System.Threading.Tasks.ValueTask SendPrivateAsync(System.ReadOnlyMemory`1<System.Byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EDFEC8
    ::System::Threading::Tasks::ValueTask SendPrivateAsync(::System::ReadOnlyMemory_1<uint8_t> buffer, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.ValueTask SendFrameAsync(System.Net.WebSockets.ManagedWebSocket/MessageOpcode opcode, System.Boolean endOfMessage, System.ReadOnlyMemory`1<System.Byte> payloadBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE03BC
    ::System::Threading::Tasks::ValueTask SendFrameAsync(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode opcode, bool endOfMessage, ::System::ReadOnlyMemory_1<uint8_t> payloadBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.ValueTask SendFrameLockAcquiredNonCancelableAsync(System.Net.WebSockets.ManagedWebSocket/MessageOpcode opcode, System.Boolean endOfMessage, System.ReadOnlyMemory`1<System.Byte> payloadBuffer)
    // Offset: 0x4EE0C50
    ::System::Threading::Tasks::ValueTask SendFrameLockAcquiredNonCancelableAsync(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode opcode, bool endOfMessage, ::System::ReadOnlyMemory_1<uint8_t> payloadBuffer);
    // private System.Threading.Tasks.Task WaitForWriteTaskAsync(System.Threading.Tasks.ValueTask writeTask)
    // Offset: 0x4EE15AC
    ::System::Threading::Tasks::Task* WaitForWriteTaskAsync(::System::Threading::Tasks::ValueTask writeTask);
    // private System.Threading.Tasks.Task SendFrameFallbackAsync(System.Net.WebSockets.ManagedWebSocket/MessageOpcode opcode, System.Boolean endOfMessage, System.ReadOnlyMemory`1<System.Byte> payloadBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE1124
    ::System::Threading::Tasks::Task* SendFrameFallbackAsync(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode opcode, bool endOfMessage, ::System::ReadOnlyMemory_1<uint8_t> payloadBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Int32 WriteFrameToSendBuffer(System.Net.WebSockets.ManagedWebSocket/MessageOpcode opcode, System.Boolean endOfMessage, System.ReadOnlySpan`1<System.Byte> payloadBuffer)
    // Offset: 0x4EE1270
    int WriteFrameToSendBuffer(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode opcode, bool endOfMessage, ::System::ReadOnlySpan_1<uint8_t> payloadBuffer);
    // private System.Void SendKeepAliveFrameAsync()
    // Offset: 0x4EE19E0
    void SendKeepAliveFrameAsync();
    // static private System.Int32 WriteHeader(System.Net.WebSockets.ManagedWebSocket/MessageOpcode opcode, System.Byte[] sendBuffer, System.ReadOnlySpan`1<System.Byte> payload, System.Boolean endOfMessage, System.Boolean useMask)
    // Offset: 0x4EE17AC
    static int WriteHeader(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode opcode, ::ArrayW<uint8_t> sendBuffer, ::System::ReadOnlySpan_1<uint8_t> payload, bool endOfMessage, bool useMask);
    // static private System.Void WriteRandomMask(System.Byte[] buffer, System.Int32 offset)
    // Offset: 0x4EE1DC4
    static void WriteRandomMask(::ArrayW<uint8_t> buffer, int offset);
    // private System.Threading.Tasks.ValueTask`1<TWebSocketReceiveResult> ReceiveAsyncPrivate(System.Memory`1<System.Byte> payloadBuffer, System.Threading.CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TWebSocketReceiveResultGetter, class TWebSocketReceiveResult>
    ::System::Threading::Tasks::ValueTask_1<TWebSocketReceiveResult> ReceiveAsyncPrivate(::System::Memory_1<uint8_t> payloadBuffer, ::System::Threading::CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TWebSocketReceiveResultGetter>, ::System::Net::WebSockets::ManagedWebSocket::IWebSocketReceiveResultGetter_1<TWebSocketReceiveResult>> && std::is_convertible_v<TWebSocketReceiveResultGetter, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::ManagedWebSocket::ReceiveAsyncPrivate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveAsyncPrivate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TWebSocketReceiveResultGetter>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TWebSocketReceiveResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(payloadBuffer), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(resultGetter)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TWebSocketReceiveResultGetter>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TWebSocketReceiveResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::ValueTask_1<TWebSocketReceiveResult>, false>(this, ___generic__method, payloadBuffer, cancellationToken, resultGetter);
    }
    // private System.Threading.Tasks.Task HandleReceivedCloseAsync(System.Net.WebSockets.ManagedWebSocket/MessageHeader header, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE1E48
    ::System::Threading::Tasks::Task* HandleReceivedCloseAsync(::System::Net::WebSockets::ManagedWebSocket::MessageHeader header, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task WaitForServerToCloseConnectionAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE1F64
    ::System::Threading::Tasks::Task* WaitForServerToCloseConnectionAsync(::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task HandleReceivedPingPongAsync(System.Net.WebSockets.ManagedWebSocket/MessageHeader header, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE2060
    ::System::Threading::Tasks::Task* HandleReceivedPingPongAsync(::System::Net::WebSockets::ManagedWebSocket::MessageHeader header, ::System::Threading::CancellationToken cancellationToken);
    // static private System.Boolean IsValidCloseStatus(System.Net.WebSockets.WebSocketCloseStatus closeStatus)
    // Offset: 0x4EE2180
    static bool IsValidCloseStatus(::System::Net::WebSockets::WebSocketCloseStatus closeStatus);
    // private System.Threading.Tasks.Task CloseWithReceiveErrorAndThrowAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.Net.WebSockets.WebSocketError error, System.Exception innerException)
    // Offset: 0x4EE21B8
    ::System::Threading::Tasks::Task* CloseWithReceiveErrorAndThrowAsync(::System::Net::WebSockets::WebSocketCloseStatus closeStatus, ::System::Net::WebSockets::WebSocketError error, ::System::Exception* innerException);
    // private System.Boolean TryParseMessageHeaderFromReceiveBuffer(out System.Net.WebSockets.ManagedWebSocket/MessageHeader resultHeader)
    // Offset: 0x4EE22D4
    bool TryParseMessageHeaderFromReceiveBuffer(ByRef<::System::Net::WebSockets::ManagedWebSocket::MessageHeader> resultHeader);
    // private System.Threading.Tasks.Task SendCloseFrameAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.String closeStatusDescription, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE0AF0
    ::System::Threading::Tasks::Task* SendCloseFrameAsync(::System::Net::WebSockets::WebSocketCloseStatus closeStatus, ::StringW closeStatusDescription, ::System::Threading::CancellationToken cancellationToken);
    // private System.Void ConsumeFromBuffer(System.Int32 count)
    // Offset: 0x4EE2518
    void ConsumeFromBuffer(int count);
    // private System.Threading.Tasks.Task EnsureBufferContainsAsync(System.Int32 minimumRequiredBytes, System.Threading.CancellationToken cancellationToken, System.Boolean throwOnPrematureClosure)
    // Offset: 0x4EE25C8
    ::System::Threading::Tasks::Task* EnsureBufferContainsAsync(int minimumRequiredBytes, ::System::Threading::CancellationToken cancellationToken, bool throwOnPrematureClosure);
    // private System.Void ThrowIfEOFUnexpected(System.Boolean throwOnPrematureClosure)
    // Offset: 0x4EE26EC
    void ThrowIfEOFUnexpected(bool throwOnPrematureClosure);
    // private System.Void AllocateSendBuffer(System.Int32 minLength)
    // Offset: 0x4EE16B8
    void AllocateSendBuffer(int minLength);
    // private System.Void ReleaseSendBuffer()
    // Offset: 0x4EE27A4
    void ReleaseSendBuffer();
    // static private System.Int32 CombineMaskBytes(System.Span`1<System.Byte> buffer, System.Int32 maskOffset)
    // Offset: 0x4EE252C
    static int CombineMaskBytes(::System::Span_1<uint8_t> buffer, int maskOffset);
    // static private System.Int32 ApplyMask(System.Span`1<System.Byte> toMask, System.Byte[] mask, System.Int32 maskOffset, System.Int32 maskOffsetIndex)
    // Offset: 0x4EE1920
    static int ApplyMask(::System::Span_1<uint8_t> toMask, ::ArrayW<uint8_t> mask, int maskOffset, int maskOffsetIndex);
    // static private System.Int32 ApplyMask(System.Span`1<System.Byte> toMask, System.Int32 mask, System.Int32 maskIndex)
    // Offset: 0x4EE28B0
    static int ApplyMask(::System::Span_1<uint8_t> toMask, int mask, int maskIndex);
    // private System.Void ThrowIfOperationInProgress(System.Boolean operationCompleted, System.String methodName)
    // Offset: 0x4EE07E0
    void ThrowIfOperationInProgress(bool operationCompleted, ::StringW methodName);
    // private System.Void ThrowOperationInProgress(System.String methodName)
    // Offset: 0x4EE29B8
    void ThrowOperationInProgress(::StringW methodName);
    // static private System.Exception CreateOperationCanceledException(System.Exception innerException, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE1508
    static ::System::Exception* CreateOperationCanceledException(::System::Exception* innerException, ::System::Threading::CancellationToken cancellationToken);
    // static private System.Boolean TryValidateUtf8(System.Span`1<System.Byte> span, System.Boolean endOfMessage, System.Net.WebSockets.ManagedWebSocket/Utf8MessageState state)
    // Offset: 0x4EE2A18
    static bool TryValidateUtf8(::System::Span_1<uint8_t> span, bool endOfMessage, ::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState* state);
    // static private System.Void .cctor()
    // Offset: 0x4EE2C1C
    static void _cctor();
    // public override System.Void Dispose()
    // Offset: 0x4EDF9F8
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Void WebSocket::Dispose()
    void Dispose();
    // public override System.String get_CloseStatusDescription()
    // Offset: 0x4EDFB08
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.String WebSocket::get_CloseStatusDescription()
    ::StringW get_CloseStatusDescription();
    // public override System.Net.WebSockets.WebSocketState get_State()
    // Offset: 0x4EDFB10
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Net.WebSockets.WebSocketState WebSocket::get_State()
    ::System::Net::WebSockets::WebSocketState get_State();
    // public override System.Threading.Tasks.Task SendAsync(System.ArraySegment`1<System.Byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EDFB18
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Threading.Tasks.Task WebSocket::SendAsync(System.ArraySegment`1<System.Byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* SendAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, ::System::Threading::CancellationToken cancellationToken);
    // public override System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync(System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE0498
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> WebSocket::ReceiveAsync(System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* ReceiveAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Threading::CancellationToken cancellationToken);
    // public override System.Threading.Tasks.Task CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.String statusDescription, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EE0804
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Threading.Tasks.Task WebSocket::CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.String statusDescription, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* CloseOutputAsync(::System::Net::WebSockets::WebSocketCloseStatus closeStatus, ::StringW statusDescription, ::System::Threading::CancellationToken cancellationToken);
    // public override System.Void Abort()
    // Offset: 0x4EE0C20
    // Implemented from: System.Net.WebSockets.WebSocket
    // Base method: System.Void WebSocket::Abort()
    void Abort();
  }; // System.Net.WebSockets.ManagedWebSocket
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::ManagedWebSocket::MessageHeader, "System.Net.WebSockets", "ManagedWebSocket/MessageHeader");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, "System.Net.WebSockets", "ManagedWebSocket/MessageOpcode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::CreateFromConnectedStream
// Il2CppName: CreateFromConnectedStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::ManagedWebSocket* (*)(::System::IO::Stream*, bool, ::StringW, ::System::TimeSpan)>(&System::Net::WebSockets::ManagedWebSocket::CreateFromConnectedStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* isServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* subprotocol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keepAliveInterval = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "CreateFromConnectedStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, isServer, subprotocol, keepAliveInterval});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::get_StateUpdateLock
// Il2CppName: get_StateUpdateLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::get_StateUpdateLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "get_StateUpdateLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::get_ReceiveAsyncLock
// Il2CppName: get_ReceiveAsyncLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::get_ReceiveAsyncLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "get_ReceiveAsyncLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::DisposeCore
// Il2CppName: DisposeCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::DisposeCore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "DisposeCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendPrivateAsync
// Il2CppName: SendPrivateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::ValueTask (System::Net::WebSockets::ManagedWebSocket::*)(::System::ReadOnlyMemory_1<uint8_t>, ::System::Net::WebSockets::WebSocketMessageType, bool, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::SendPrivateAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketMessageType")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendPrivateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, messageType, endOfMessage, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendFrameAsync
// Il2CppName: SendFrameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::ValueTask (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, bool, ::System::ReadOnlyMemory_1<uint8_t>, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::SendFrameAsync)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageOpcode")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* payloadBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendFrameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, endOfMessage, payloadBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendFrameLockAcquiredNonCancelableAsync
// Il2CppName: SendFrameLockAcquiredNonCancelableAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::ValueTask (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, bool, ::System::ReadOnlyMemory_1<uint8_t>)>(&System::Net::WebSockets::ManagedWebSocket::SendFrameLockAcquiredNonCancelableAsync)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageOpcode")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* payloadBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendFrameLockAcquiredNonCancelableAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, endOfMessage, payloadBuffer});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::WaitForWriteTaskAsync
// Il2CppName: WaitForWriteTaskAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Threading::Tasks::ValueTask)>(&System::Net::WebSockets::ManagedWebSocket::WaitForWriteTaskAsync)> {
  static const MethodInfo* get() {
    static auto* writeTask = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "ValueTask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "WaitForWriteTaskAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writeTask});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendFrameFallbackAsync
// Il2CppName: SendFrameFallbackAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, bool, ::System::ReadOnlyMemory_1<uint8_t>, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::SendFrameFallbackAsync)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageOpcode")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* payloadBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlyMemory`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendFrameFallbackAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, endOfMessage, payloadBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::WriteFrameToSendBuffer
// Il2CppName: WriteFrameToSendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, bool, ::System::ReadOnlySpan_1<uint8_t>)>(&System::Net::WebSockets::ManagedWebSocket::WriteFrameToSendBuffer)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageOpcode")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* payloadBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "WriteFrameToSendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, endOfMessage, payloadBuffer});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendKeepAliveFrameAsync
// Il2CppName: SendKeepAliveFrameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::SendKeepAliveFrameAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendKeepAliveFrameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::WebSockets::ManagedWebSocket::MessageOpcode, ::ArrayW<uint8_t>, ::System::ReadOnlySpan_1<uint8_t>, bool, bool)>(&System::Net::WebSockets::ManagedWebSocket::WriteHeader)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageOpcode")->byval_arg;
    static auto* sendBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* payload = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMask = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, sendBuffer, payload, endOfMessage, useMask});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::WriteRandomMask
// Il2CppName: WriteRandomMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int)>(&System::Net::WebSockets::ManagedWebSocket::WriteRandomMask)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "WriteRandomMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ReceiveAsyncPrivate
// Il2CppName: ReceiveAsyncPrivate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::HandleReceivedCloseAsync
// Il2CppName: HandleReceivedCloseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageHeader, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::HandleReceivedCloseAsync)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageHeader")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "HandleReceivedCloseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::WaitForServerToCloseConnectionAsync
// Il2CppName: WaitForServerToCloseConnectionAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::WaitForServerToCloseConnectionAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "WaitForServerToCloseConnectionAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::HandleReceivedPingPongAsync
// Il2CppName: HandleReceivedPingPongAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::ManagedWebSocket::MessageHeader, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::HandleReceivedPingPongAsync)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageHeader")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "HandleReceivedPingPongAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::IsValidCloseStatus
// Il2CppName: IsValidCloseStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::WebSockets::WebSocketCloseStatus)>(&System::Net::WebSockets::ManagedWebSocket::IsValidCloseStatus)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "IsValidCloseStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::CloseWithReceiveErrorAndThrowAsync
// Il2CppName: CloseWithReceiveErrorAndThrowAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::WebSocketCloseStatus, ::System::Net::WebSockets::WebSocketError, ::System::Exception*)>(&System::Net::WebSockets::ManagedWebSocket::CloseWithReceiveErrorAndThrowAsync)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketError")->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "CloseWithReceiveErrorAndThrowAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus, error, innerException});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::TryParseMessageHeaderFromReceiveBuffer
// Il2CppName: TryParseMessageHeaderFromReceiveBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebSockets::ManagedWebSocket::*)(ByRef<::System::Net::WebSockets::ManagedWebSocket::MessageHeader>)>(&System::Net::WebSockets::ManagedWebSocket::TryParseMessageHeaderFromReceiveBuffer)> {
  static const MethodInfo* get() {
    static auto* resultHeader = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/MessageHeader")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "TryParseMessageHeaderFromReceiveBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultHeader});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendCloseFrameAsync
// Il2CppName: SendCloseFrameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::WebSocketCloseStatus, ::StringW, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::SendCloseFrameAsync)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    static auto* closeStatusDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendCloseFrameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus, closeStatusDescription, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ConsumeFromBuffer
// Il2CppName: ConsumeFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)(int)>(&System::Net::WebSockets::ManagedWebSocket::ConsumeFromBuffer)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ConsumeFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::EnsureBufferContainsAsync
// Il2CppName: EnsureBufferContainsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(int, ::System::Threading::CancellationToken, bool)>(&System::Net::WebSockets::ManagedWebSocket::EnsureBufferContainsAsync)> {
  static const MethodInfo* get() {
    static auto* minimumRequiredBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    static auto* throwOnPrematureClosure = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "EnsureBufferContainsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minimumRequiredBytes, cancellationToken, throwOnPrematureClosure});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ThrowIfEOFUnexpected
// Il2CppName: ThrowIfEOFUnexpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)(bool)>(&System::Net::WebSockets::ManagedWebSocket::ThrowIfEOFUnexpected)> {
  static const MethodInfo* get() {
    static auto* throwOnPrematureClosure = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ThrowIfEOFUnexpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwOnPrematureClosure});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::AllocateSendBuffer
// Il2CppName: AllocateSendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)(int)>(&System::Net::WebSockets::ManagedWebSocket::AllocateSendBuffer)> {
  static const MethodInfo* get() {
    static auto* minLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "AllocateSendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minLength});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ReleaseSendBuffer
// Il2CppName: ReleaseSendBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::ReleaseSendBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ReleaseSendBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::CombineMaskBytes
// Il2CppName: CombineMaskBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Span_1<uint8_t>, int)>(&System::Net::WebSockets::ManagedWebSocket::CombineMaskBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* maskOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "CombineMaskBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, maskOffset});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ApplyMask
// Il2CppName: ApplyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Span_1<uint8_t>, ::ArrayW<uint8_t>, int, int)>(&System::Net::WebSockets::ManagedWebSocket::ApplyMask)> {
  static const MethodInfo* get() {
    static auto* toMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* mask = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* maskOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maskOffsetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ApplyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toMask, mask, maskOffset, maskOffsetIndex});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ApplyMask
// Il2CppName: ApplyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Span_1<uint8_t>, int, int)>(&System::Net::WebSockets::ManagedWebSocket::ApplyMask)> {
  static const MethodInfo* get() {
    static auto* toMask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maskIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ApplyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toMask, mask, maskIndex});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ThrowIfOperationInProgress
// Il2CppName: ThrowIfOperationInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)(bool, ::StringW)>(&System::Net::WebSockets::ManagedWebSocket::ThrowIfOperationInProgress)> {
  static const MethodInfo* get() {
    static auto* operationCompleted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ThrowIfOperationInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationCompleted, methodName});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ThrowOperationInProgress
// Il2CppName: ThrowOperationInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)(::StringW)>(&System::Net::WebSockets::ManagedWebSocket::ThrowOperationInProgress)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ThrowOperationInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::CreateOperationCanceledException
// Il2CppName: CreateOperationCanceledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::CreateOperationCanceledException)> {
  static const MethodInfo* get() {
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "CreateOperationCanceledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerException, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::TryValidateUtf8
// Il2CppName: TryValidateUtf8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Span_1<uint8_t>, bool, ::System::Net::WebSockets::ManagedWebSocket::Utf8MessageState*)>(&System::Net::WebSockets::ManagedWebSocket::TryValidateUtf8)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ManagedWebSocket/Utf8MessageState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "TryValidateUtf8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, endOfMessage, state});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::WebSockets::ManagedWebSocket::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::get_CloseStatusDescription
// Il2CppName: get_CloseStatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::get_CloseStatusDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "get_CloseStatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::WebSocketState (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::SendAsync
// Il2CppName: SendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::ArraySegment_1<uint8_t>, ::System::Net::WebSockets::WebSocketMessageType, bool, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::SendAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketMessageType")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "SendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, messageType, endOfMessage, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::ReceiveAsync
// Il2CppName: ReceiveAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* (System::Net::WebSockets::ManagedWebSocket::*)(::System::ArraySegment_1<uint8_t>, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::ReceiveAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "ReceiveAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::CloseOutputAsync
// Il2CppName: CloseOutputAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::ManagedWebSocket::*)(::System::Net::WebSockets::WebSocketCloseStatus, ::StringW, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::ManagedWebSocket::CloseOutputAsync)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    static auto* statusDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "CloseOutputAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus, statusDescription, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ManagedWebSocket::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ManagedWebSocket::*)()>(&System::Net::WebSockets::ManagedWebSocket::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ManagedWebSocket*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
