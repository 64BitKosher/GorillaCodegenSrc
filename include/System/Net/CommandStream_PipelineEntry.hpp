// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.CommandStream
#include "System/Net/CommandStream.hpp"
// Including type: System.Net.CommandStream/PipelineEntryFlags
#include "System/Net/CommandStream_PipelineEntryFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::CommandStream::PipelineEntry);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::CommandStream::PipelineEntry*, "System.Net", "CommandStream/PipelineEntry");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.CommandStream/PipelineEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class CommandStream::PipelineEntry : public ::Il2CppObject {
    public:
    public:
    // System.String Command
    // Size: 0x8
    // Offset: 0x10
    ::StringW Command;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Net.CommandStream/PipelineEntryFlags Flags
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::CommandStream::PipelineEntryFlags Flags;
    // Field size check
    static_assert(sizeof(::System::Net::CommandStream::PipelineEntryFlags) == 0x4);
    public:
    // Get instance field reference: System.String Command
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Command();
    // Get instance field reference: System.Net.CommandStream/PipelineEntryFlags Flags
    [[deprecated("Use field access instead!")]] ::System::Net::CommandStream::PipelineEntryFlags& dyn_Flags();
    // System.Void .ctor(System.String command)
    // Offset: 0x4FB1CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CommandStream::PipelineEntry* New_ctor(::StringW command) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CommandStream::PipelineEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CommandStream::PipelineEntry*, creationType>(command)));
    }
    // System.Void .ctor(System.String command, System.Net.CommandStream/PipelineEntryFlags flags)
    // Offset: 0x4FB1CF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CommandStream::PipelineEntry* New_ctor(::StringW command, ::System::Net::CommandStream::PipelineEntryFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CommandStream::PipelineEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CommandStream::PipelineEntry*, creationType>(command, flags)));
    }
    // System.Boolean HasFlag(System.Net.CommandStream/PipelineEntryFlags flags)
    // Offset: 0x4FB08EC
    bool HasFlag(::System::Net::CommandStream::PipelineEntryFlags flags);
  }; // System.Net.CommandStream/PipelineEntry
  #pragma pack(pop)
  static check_size<sizeof(CommandStream::PipelineEntry), 24 + sizeof(::System::Net::CommandStream::PipelineEntryFlags)> __System_Net_CommandStream_PipelineEntrySizeCheck;
  static_assert(sizeof(CommandStream::PipelineEntry) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::CommandStream::PipelineEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CommandStream::PipelineEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CommandStream::PipelineEntry::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::CommandStream::PipelineEntry::*)(::System::Net::CommandStream::PipelineEntryFlags)>(&System::Net::CommandStream::PipelineEntry::HasFlag)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net", "CommandStream/PipelineEntryFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CommandStream::PipelineEntry*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
