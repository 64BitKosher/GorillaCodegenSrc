// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Sockets.Socket
#include "System/Net/Sockets/Socket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketAsyncResult
  class SocketAsyncResult;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Sockets::Socket::$$c__DisplayClass240_0);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Sockets::Socket::$$c__DisplayClass240_0*, "System.Net.Sockets", "Socket/<>c__DisplayClass240_0");
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Sockets.Socket/<>c__DisplayClass240_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class Socket::$$c__DisplayClass240_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Net.Sockets.SocketAsyncResult sockares
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Sockets::SocketAsyncResult* sockares;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketAsyncResult*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Net::Sockets::SocketAsyncResult*
    constexpr operator ::System::Net::Sockets::SocketAsyncResult*() const noexcept {
      return sockares;
    }
    // Get instance field reference: public System.Net.Sockets.SocketAsyncResult sockares
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketAsyncResult*& dyn_sockares();
    // public System.Void .ctor()
    // Offset: 0x4EDC6FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Socket::$$c__DisplayClass240_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Sockets::Socket::$$c__DisplayClass240_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Socket::$$c__DisplayClass240_0*, creationType>()));
    }
    // System.Void <BeginConnect>b__0(System.Threading.Tasks.Task`1<System.Net.IPAddress[]> t)
    // Offset: 0x4EDC704
    void $BeginConnect$b__0(::System::Threading::Tasks::Task_1<::ArrayW<::System::Net::IPAddress*>>* t);
  }; // System.Net.Sockets.Socket/<>c__DisplayClass240_0
  #pragma pack(pop)
  static check_size<sizeof(Socket::$$c__DisplayClass240_0), 16 + sizeof(::System::Net::Sockets::SocketAsyncResult*)> __System_Net_Sockets_Socket_$$c__DisplayClass240_0SizeCheck;
  static_assert(sizeof(Socket::$$c__DisplayClass240_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Sockets::Socket::$$c__DisplayClass240_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Sockets::Socket::$$c__DisplayClass240_0::$BeginConnect$b__0
// Il2CppName: <BeginConnect>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::$$c__DisplayClass240_0::*)(::System::Threading::Tasks::Task_1<::ArrayW<::System::Net::IPAddress*>>*)>(&System::Net::Sockets::Socket::$$c__DisplayClass240_0::$BeginConnect$b__0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Net", "IPAddress"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket::$$c__DisplayClass240_0*), "<BeginConnect>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
