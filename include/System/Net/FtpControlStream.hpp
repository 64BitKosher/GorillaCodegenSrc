// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.CommandStream
#include "System/Net/CommandStream.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Net.FtpLoginState
#include "System/Net/FtpLoginState.hpp"
// Including type: System.Net.FtpStatusCode
#include "System/Net/FtpStatusCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: TlsStream
  class TlsStream;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: ResponseDescription
  class ResponseDescription;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: FtpWebRequest
  class FtpWebRequest;
  // Forward declaring type: TriState
  struct TriState;
  // Forward declaring type: WebRequest
  class WebRequest;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
  // Forward declaring type: TcpClient
  class TcpClient;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: WeakReference
  class WeakReference;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: FtpControlStream
  class FtpControlStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::FtpControlStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpControlStream*, "System.Net", "FtpControlStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpControlStream
  // [TokenAttribute] Offset: FFFFFFFF
  class FtpControlStream : public ::System::Net::CommandStream {
    public:
    // Nested type: ::System::Net::FtpControlStream::GetPathOption
    struct GetPathOption;
    // Nested type: ::System::Net::FtpControlStream::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    public:
    // private System.Net.Sockets.Socket _dataSocket
    // Size: 0x8
    // Offset: 0x88
    ::System::Net::Sockets::Socket* dataSocket;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private System.Net.IPEndPoint _passiveEndPoint
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::IPEndPoint* passiveEndPoint;
    // Field size check
    static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
    // private System.Net.TlsStream _tlsStream
    // Size: 0x8
    // Offset: 0x98
    ::System::Net::TlsStream* tlsStream;
    // Field size check
    static_assert(sizeof(::System::Net::TlsStream*) == 0x8);
    // private System.Text.StringBuilder _bannerMessage
    // Size: 0x8
    // Offset: 0xA0
    ::System::Text::StringBuilder* bannerMessage;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Text.StringBuilder _welcomeMessage
    // Size: 0x8
    // Offset: 0xA8
    ::System::Text::StringBuilder* welcomeMessage;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Text.StringBuilder _exitMessage
    // Size: 0x8
    // Offset: 0xB0
    ::System::Text::StringBuilder* exitMessage;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.WeakReference _credentials
    // Size: 0x8
    // Offset: 0xB8
    ::System::WeakReference* credentials;
    // Field size check
    static_assert(sizeof(::System::WeakReference*) == 0x8);
    // private System.String _currentTypeSetting
    // Size: 0x8
    // Offset: 0xC0
    ::StringW currentTypeSetting;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int64 _contentLength
    // Size: 0x8
    // Offset: 0xC8
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.DateTime _lastModified
    // Size: 0x8
    // Offset: 0xD0
    ::System::DateTime lastModified;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean _dataHandshakeStarted
    // Size: 0x1
    // Offset: 0xD8
    bool dataHandshakeStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dataHandshakeStarted and: loginDirectory
    char __padding10[0x7] = {};
    // private System.String _loginDirectory
    // Size: 0x8
    // Offset: 0xE0
    ::StringW loginDirectory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _establishedServerDirectory
    // Size: 0x8
    // Offset: 0xE8
    ::StringW establishedServerDirectory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _requestedServerDirectory
    // Size: 0x8
    // Offset: 0xF0
    ::StringW requestedServerDirectory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Uri _responseUri
    // Size: 0x8
    // Offset: 0xF8
    ::System::Uri* responseUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Net.FtpLoginState _loginState
    // Size: 0x1
    // Offset: 0x100
    ::System::Net::FtpLoginState loginState;
    // Field size check
    static_assert(sizeof(::System::Net::FtpLoginState) == 0x1);
    // Padding between fields: loginState and: StatusCode
    char __padding15[0x3] = {};
    // System.Net.FtpStatusCode StatusCode
    // Size: 0x4
    // Offset: 0x104
    ::System::Net::FtpStatusCode StatusCode;
    // Field size check
    static_assert(sizeof(::System::Net::FtpStatusCode) == 0x4);
    // System.String StatusLine
    // Size: 0x8
    // Offset: 0x108
    ::StringW StatusLine;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static private readonly System.AsyncCallback s_acceptCallbackDelegate
    static ::System::AsyncCallback* _get_s_acceptCallbackDelegate();
    // Set static field: static private readonly System.AsyncCallback s_acceptCallbackDelegate
    static void _set_s_acceptCallbackDelegate(::System::AsyncCallback* value);
    // Get static field: static private readonly System.AsyncCallback s_connectCallbackDelegate
    static ::System::AsyncCallback* _get_s_connectCallbackDelegate();
    // Set static field: static private readonly System.AsyncCallback s_connectCallbackDelegate
    static void _set_s_connectCallbackDelegate(::System::AsyncCallback* value);
    // Get static field: static private readonly System.AsyncCallback s_SSLHandshakeCallback
    static ::System::AsyncCallback* _get_s_SSLHandshakeCallback();
    // Set static field: static private readonly System.AsyncCallback s_SSLHandshakeCallback
    static void _set_s_SSLHandshakeCallback(::System::AsyncCallback* value);
    // Get instance field reference: private System.Net.Sockets.Socket _dataSocket
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn__dataSocket();
    // Get instance field reference: private System.Net.IPEndPoint _passiveEndPoint
    [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn__passiveEndPoint();
    // Get instance field reference: private System.Net.TlsStream _tlsStream
    [[deprecated("Use field access instead!")]] ::System::Net::TlsStream*& dyn__tlsStream();
    // Get instance field reference: private System.Text.StringBuilder _bannerMessage
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__bannerMessage();
    // Get instance field reference: private System.Text.StringBuilder _welcomeMessage
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__welcomeMessage();
    // Get instance field reference: private System.Text.StringBuilder _exitMessage
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__exitMessage();
    // Get instance field reference: private System.WeakReference _credentials
    [[deprecated("Use field access instead!")]] ::System::WeakReference*& dyn__credentials();
    // Get instance field reference: private System.String _currentTypeSetting
    [[deprecated("Use field access instead!")]] ::StringW& dyn__currentTypeSetting();
    // Get instance field reference: private System.Int64 _contentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn__contentLength();
    // Get instance field reference: private System.DateTime _lastModified
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__lastModified();
    // Get instance field reference: private System.Boolean _dataHandshakeStarted
    [[deprecated("Use field access instead!")]] bool& dyn__dataHandshakeStarted();
    // Get instance field reference: private System.String _loginDirectory
    [[deprecated("Use field access instead!")]] ::StringW& dyn__loginDirectory();
    // Get instance field reference: private System.String _establishedServerDirectory
    [[deprecated("Use field access instead!")]] ::StringW& dyn__establishedServerDirectory();
    // Get instance field reference: private System.String _requestedServerDirectory
    [[deprecated("Use field access instead!")]] ::StringW& dyn__requestedServerDirectory();
    // Get instance field reference: private System.Uri _responseUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__responseUri();
    // Get instance field reference: private System.Net.FtpLoginState _loginState
    [[deprecated("Use field access instead!")]] ::System::Net::FtpLoginState& dyn__loginState();
    // Get instance field reference: System.Net.FtpStatusCode StatusCode
    [[deprecated("Use field access instead!")]] ::System::Net::FtpStatusCode& dyn_StatusCode();
    // Get instance field reference: System.String StatusLine
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StatusLine();
    // System.Net.NetworkCredential get_Credentials()
    // Offset: 0x4FB1E08
    ::System::Net::NetworkCredential* get_Credentials();
    // System.Void set_Credentials(System.Net.NetworkCredential value)
    // Offset: 0x4FB1EB0
    void set_Credentials(::System::Net::NetworkCredential* value);
    // System.Void AbortConnect()
    // Offset: 0x4FB1FD8
    void AbortConnect();
    // static private System.Void AcceptCallback(System.IAsyncResult asyncResult)
    // Offset: 0x4FB2064
    static void AcceptCallback(::System::IAsyncResult* asyncResult);
    // static private System.Void ConnectCallback(System.IAsyncResult asyncResult)
    // Offset: 0x4FB23D4
    static void ConnectCallback(::System::IAsyncResult* asyncResult);
    // static private System.Void SSLHandshakeCallback(System.IAsyncResult asyncResult)
    // Offset: 0x4FB2588
    static void SSLHandshakeCallback(::System::IAsyncResult* asyncResult);
    // private System.Net.CommandStream/PipelineInstruction QueueOrCreateFtpDataStream(ref System.IO.Stream stream)
    // Offset: 0x4FB2750
    ::System::Net::CommandStream::PipelineInstruction QueueOrCreateFtpDataStream(ByRef<::System::IO::Stream*> stream);
    // private System.Net.CommandStream/PipelineInstruction QueueOrCreateDataConection(System.Net.CommandStream/PipelineEntry entry, System.Net.ResponseDescription response, System.Boolean timeout, ref System.IO.Stream stream, out System.Boolean isSocketReady)
    // Offset: 0x4FB3448
    ::System::Net::CommandStream::PipelineInstruction QueueOrCreateDataConection(::System::Net::CommandStream::PipelineEntry* entry, ::System::Net::ResponseDescription* response, bool timeout, ByRef<::System::IO::Stream*> stream, ByRef<bool> isSocketReady);
    // static private System.Void GetPathInfo(System.Net.FtpControlStream/GetPathOption pathOption, System.Uri uri, out System.String path, out System.String directory, out System.String filename)
    // Offset: 0x4FB5538
    static void GetPathInfo(::System::Net::FtpControlStream::GetPathOption pathOption, ::System::Uri* uri, ByRef<::StringW> path, ByRef<::StringW> directory, ByRef<::StringW> filename);
    // private System.String FormatAddress(System.Net.IPAddress address, System.Int32 Port)
    // Offset: 0x4FB5EBC
    ::StringW FormatAddress(::System::Net::IPAddress* address, int Port);
    // private System.String FormatAddressV6(System.Net.IPAddress address, System.Int32 port)
    // Offset: 0x4FB5FE4
    ::StringW FormatAddressV6(::System::Net::IPAddress* address, int port);
    // System.Int64 get_ContentLength()
    // Offset: 0x4FB60F4
    int64_t get_ContentLength();
    // System.DateTime get_LastModified()
    // Offset: 0x4FB60FC
    ::System::DateTime get_LastModified();
    // System.Uri get_ResponseUri()
    // Offset: 0x4FB6104
    ::System::Uri* get_ResponseUri();
    // System.String get_BannerMessage()
    // Offset: 0x4FB610C
    ::StringW get_BannerMessage();
    // System.String get_WelcomeMessage()
    // Offset: 0x4FB6124
    ::StringW get_WelcomeMessage();
    // System.String get_ExitMessage()
    // Offset: 0x4FB613C
    ::StringW get_ExitMessage();
    // private System.Int64 GetContentLengthFrom213Response(System.String responseString)
    // Offset: 0x4FB3F44
    int64_t GetContentLengthFrom213Response(::StringW responseString);
    // private System.DateTime GetLastModifiedFrom213Response(System.String str)
    // Offset: 0x4FB407C
    ::System::DateTime GetLastModifiedFrom213Response(::StringW str);
    // private System.Void TryUpdateResponseUri(System.String str, System.Net.FtpWebRequest request)
    // Offset: 0x4FB3BF0
    void TryUpdateResponseUri(::StringW str, ::System::Net::FtpWebRequest* request);
    // private System.Void TryUpdateContentLength(System.String str)
    // Offset: 0x4FB3B04
    void TryUpdateContentLength(::StringW str);
    // private System.String GetLoginDirectory(System.String str)
    // Offset: 0x4FB43D8
    ::StringW GetLoginDirectory(::StringW str);
    // private System.Int32 GetPortV4(System.String responseString)
    // Offset: 0x4FB5AA0
    int GetPortV4(::StringW responseString);
    // private System.Int32 GetPortV6(System.String responseString)
    // Offset: 0x4FB5C88
    int GetPortV6(::StringW responseString);
    // private System.Void CreateFtpListenerSocket(System.Net.FtpWebRequest request)
    // Offset: 0x4FB5728
    void CreateFtpListenerSocket(::System::Net::FtpWebRequest* request);
    // private System.String GetPortCommandLine(System.Net.FtpWebRequest request)
    // Offset: 0x4FB58B0
    ::StringW GetPortCommandLine(::System::Net::FtpWebRequest* request);
    // private System.String FormatFtpCommand(System.String command, System.String parameter)
    // Offset: 0x4FB5440
    ::StringW FormatFtpCommand(::StringW command, ::StringW parameter);
    // protected System.Net.Sockets.Socket CreateFtpDataSocket(System.Net.FtpWebRequest request, System.Net.Sockets.Socket templateSocket)
    // Offset: 0x4FB5E40
    ::System::Net::Sockets::Socket* CreateFtpDataSocket(::System::Net::FtpWebRequest* request, ::System::Net::Sockets::Socket* templateSocket);
    // private System.Net.TriState IsFtpDataStreamWriteable()
    // Offset: 0x4FB2A30
    ::System::Net::TriState IsFtpDataStreamWriteable();
    // System.Void .ctor(System.Net.Sockets.TcpClient client)
    // Offset: 0x4FB1F3C
    // Implemented from: System.Net.CommandStream
    // Base method: System.Void CommandStream::.ctor(System.Net.Sockets.TcpClient client)
    // Base method: System.Void NetworkStreamWrapper::.ctor(System.Net.Sockets.TcpClient client)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpControlStream* New_ctor(::System::Net::Sockets::TcpClient* client) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::FtpControlStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpControlStream*, creationType>(client)));
    }
    // protected override System.Void ClearState()
    // Offset: 0x4FB2AC8
    // Implemented from: System.Net.CommandStream
    // Base method: System.Void CommandStream::ClearState()
    void ClearState();
    // protected override System.Net.CommandStream/PipelineInstruction PipelineCallback(System.Net.CommandStream/PipelineEntry entry, System.Net.ResponseDescription response, System.Boolean timeout, ref System.IO.Stream stream)
    // Offset: 0x4FB2B98
    // Implemented from: System.Net.CommandStream
    // Base method: System.Net.CommandStream/PipelineInstruction CommandStream::PipelineCallback(System.Net.CommandStream/PipelineEntry entry, System.Net.ResponseDescription response, System.Boolean timeout, ref System.IO.Stream stream)
    ::System::Net::CommandStream::PipelineInstruction PipelineCallback(::System::Net::CommandStream::PipelineEntry* entry, ::System::Net::ResponseDescription* response, bool timeout, ByRef<::System::IO::Stream*> stream);
    // protected override System.Net.CommandStream/PipelineEntry[] BuildCommandsList(System.Net.WebRequest req)
    // Offset: 0x4FB4488
    // Implemented from: System.Net.CommandStream
    // Base method: System.Net.CommandStream/PipelineEntry[] CommandStream::BuildCommandsList(System.Net.WebRequest req)
    ::ArrayW<::System::Net::CommandStream::PipelineEntry*> BuildCommandsList(::System::Net::WebRequest* req);
    // protected override System.Boolean CheckValid(System.Net.ResponseDescription response, ref System.Int32 validThrough, ref System.Int32 completeLength)
    // Offset: 0x4FB6154
    // Implemented from: System.Net.CommandStream
    // Base method: System.Boolean CommandStream::CheckValid(System.Net.ResponseDescription response, ref System.Int32 validThrough, ref System.Int32 completeLength)
    bool CheckValid(::System::Net::ResponseDescription* response, ByRef<int> validThrough, ByRef<int> completeLength);
    // static private System.Void .cctor()
    // Offset: 0x4FB652C
    // Implemented from: System.Net.CommandStream
    // Base method: System.Void CommandStream::.cctor()
    static void _cctor();
  }; // System.Net.FtpControlStream
  #pragma pack(pop)
  static check_size<sizeof(FtpControlStream), 264 + sizeof(::StringW)> __System_Net_FtpControlStreamSizeCheck;
  static_assert(sizeof(FtpControlStream) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::NetworkCredential* (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)(::System::Net::NetworkCredential*)>(&System::Net::FtpControlStream::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "NetworkCredential")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::AbortConnect
// Il2CppName: AbortConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::AbortConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "AbortConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::AcceptCallback
// Il2CppName: AcceptCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::FtpControlStream::AcceptCallback)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "AcceptCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::ConnectCallback
// Il2CppName: ConnectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::FtpControlStream::ConnectCallback)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "ConnectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::SSLHandshakeCallback
// Il2CppName: SSLHandshakeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::FtpControlStream::SSLHandshakeCallback)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "SSLHandshakeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::QueueOrCreateFtpDataStream
// Il2CppName: QueueOrCreateFtpDataStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CommandStream::PipelineInstruction (System::Net::FtpControlStream::*)(ByRef<::System::IO::Stream*>)>(&System::Net::FtpControlStream::QueueOrCreateFtpDataStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "QueueOrCreateFtpDataStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::QueueOrCreateDataConection
// Il2CppName: QueueOrCreateDataConection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CommandStream::PipelineInstruction (System::Net::FtpControlStream::*)(::System::Net::CommandStream::PipelineEntry*, ::System::Net::ResponseDescription*, bool, ByRef<::System::IO::Stream*>, ByRef<bool>)>(&System::Net::FtpControlStream::QueueOrCreateDataConection)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("System.Net", "CommandStream/PipelineEntry")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "ResponseDescription")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    static auto* isSocketReady = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "QueueOrCreateDataConection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, response, timeout, stream, isSocketReady});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetPathInfo
// Il2CppName: GetPathInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::FtpControlStream::GetPathOption, ::System::Uri*, ByRef<::StringW>, ByRef<::StringW>, ByRef<::StringW>)>(&System::Net::FtpControlStream::GetPathInfo)> {
  static const MethodInfo* get() {
    static auto* pathOption = &::il2cpp_utils::GetClassFromName("System.Net", "FtpControlStream/GetPathOption")->byval_arg;
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* directory = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetPathInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathOption, uri, path, directory, filename});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::FormatAddress
// Il2CppName: FormatAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)(::System::Net::IPAddress*, int)>(&System::Net::FtpControlStream::FormatAddress)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* Port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "FormatAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, Port});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::FormatAddressV6
// Il2CppName: FormatAddressV6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)(::System::Net::IPAddress*, int)>(&System::Net::FtpControlStream::FormatAddressV6)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "FormatAddressV6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, port});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_LastModified
// Il2CppName: get_LastModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_LastModified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_LastModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_ResponseUri
// Il2CppName: get_ResponseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_ResponseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_ResponseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_BannerMessage
// Il2CppName: get_BannerMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_BannerMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_BannerMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_WelcomeMessage
// Il2CppName: get_WelcomeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_WelcomeMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_WelcomeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::get_ExitMessage
// Il2CppName: get_ExitMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::get_ExitMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "get_ExitMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetContentLengthFrom213Response
// Il2CppName: GetContentLengthFrom213Response
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::GetContentLengthFrom213Response)> {
  static const MethodInfo* get() {
    static auto* responseString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetContentLengthFrom213Response", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseString});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetLastModifiedFrom213Response
// Il2CppName: GetLastModifiedFrom213Response
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::GetLastModifiedFrom213Response)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetLastModifiedFrom213Response", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::TryUpdateResponseUri
// Il2CppName: TryUpdateResponseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)(::StringW, ::System::Net::FtpWebRequest*)>(&System::Net::FtpControlStream::TryUpdateResponseUri)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "TryUpdateResponseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, request});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::TryUpdateContentLength
// Il2CppName: TryUpdateContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::TryUpdateContentLength)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "TryUpdateContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetLoginDirectory
// Il2CppName: GetLoginDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::GetLoginDirectory)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetLoginDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetPortV4
// Il2CppName: GetPortV4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::GetPortV4)> {
  static const MethodInfo* get() {
    static auto* responseString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetPortV4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseString});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetPortV6
// Il2CppName: GetPortV6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpControlStream::*)(::StringW)>(&System::Net::FtpControlStream::GetPortV6)> {
  static const MethodInfo* get() {
    static auto* responseString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetPortV6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseString});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::CreateFtpListenerSocket
// Il2CppName: CreateFtpListenerSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)(::System::Net::FtpWebRequest*)>(&System::Net::FtpControlStream::CreateFtpListenerSocket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "CreateFtpListenerSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::GetPortCommandLine
// Il2CppName: GetPortCommandLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)(::System::Net::FtpWebRequest*)>(&System::Net::FtpControlStream::GetPortCommandLine)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "GetPortCommandLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::FormatFtpCommand
// Il2CppName: FormatFtpCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpControlStream::*)(::StringW, ::StringW)>(&System::Net::FtpControlStream::FormatFtpCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "FormatFtpCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, parameter});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::CreateFtpDataSocket
// Il2CppName: CreateFtpDataSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::FtpControlStream::*)(::System::Net::FtpWebRequest*, ::System::Net::Sockets::Socket*)>(&System::Net::FtpControlStream::CreateFtpDataSocket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest")->byval_arg;
    static auto* templateSocket = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "CreateFtpDataSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, templateSocket});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::IsFtpDataStreamWriteable
// Il2CppName: IsFtpDataStreamWriteable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::TriState (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::IsFtpDataStreamWriteable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "IsFtpDataStreamWriteable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::FtpControlStream::ClearState
// Il2CppName: ClearState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpControlStream::*)()>(&System::Net::FtpControlStream::ClearState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "ClearState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::PipelineCallback
// Il2CppName: PipelineCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CommandStream::PipelineInstruction (System::Net::FtpControlStream::*)(::System::Net::CommandStream::PipelineEntry*, ::System::Net::ResponseDescription*, bool, ByRef<::System::IO::Stream*>)>(&System::Net::FtpControlStream::PipelineCallback)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("System.Net", "CommandStream/PipelineEntry")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "ResponseDescription")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "PipelineCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, response, timeout, stream});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::BuildCommandsList
// Il2CppName: BuildCommandsList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Net::CommandStream::PipelineEntry*> (System::Net::FtpControlStream::*)(::System::Net::WebRequest*)>(&System::Net::FtpControlStream::BuildCommandsList)> {
  static const MethodInfo* get() {
    static auto* req = &::il2cpp_utils::GetClassFromName("System.Net", "WebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "BuildCommandsList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{req});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::CheckValid
// Il2CppName: CheckValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpControlStream::*)(::System::Net::ResponseDescription*, ByRef<int>, ByRef<int>)>(&System::Net::FtpControlStream::CheckValid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "ResponseDescription")->byval_arg;
    static auto* validThrough = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* completeLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), "CheckValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, validThrough, completeLength});
  }
};
// Writing MetadataGetter for method: System::Net::FtpControlStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::FtpControlStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpControlStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
