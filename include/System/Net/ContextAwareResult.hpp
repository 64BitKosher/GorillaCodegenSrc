// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.LazyAsyncResult
#include "System/Net/LazyAsyncResult.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: CallbackClosure
  class CallbackClosure;
  // Forward declaring type: EndPoint
  class EndPoint;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ContextAwareResult
  class ContextAwareResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ContextAwareResult);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ContextAwareResult*, "System.Net", "ContextAwareResult");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ContextAwareResult
  // [TokenAttribute] Offset: FFFFFFFF
  class ContextAwareResult : public ::System::Net::LazyAsyncResult {
    public:
    // Nested type: ::System::Net::ContextAwareResult::StateFlags
    struct StateFlags;
    // Nested type: ::System::Net::ContextAwareResult::$$c
    class $$c;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.ContextAwareResult/StateFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct StateFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: StateFlags
      constexpr StateFlags(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.ContextAwareResult/StateFlags None
      static constexpr const uint8_t None = 0u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags None
      static ::System::Net::ContextAwareResult::StateFlags _get_None();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags None
      static void _set_None(::System::Net::ContextAwareResult::StateFlags value);
      // static field const value: static public System.Net.ContextAwareResult/StateFlags CaptureIdentity
      static constexpr const uint8_t CaptureIdentity = 1u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags CaptureIdentity
      static ::System::Net::ContextAwareResult::StateFlags _get_CaptureIdentity();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags CaptureIdentity
      static void _set_CaptureIdentity(::System::Net::ContextAwareResult::StateFlags value);
      // static field const value: static public System.Net.ContextAwareResult/StateFlags CaptureContext
      static constexpr const uint8_t CaptureContext = 2u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags CaptureContext
      static ::System::Net::ContextAwareResult::StateFlags _get_CaptureContext();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags CaptureContext
      static void _set_CaptureContext(::System::Net::ContextAwareResult::StateFlags value);
      // static field const value: static public System.Net.ContextAwareResult/StateFlags ThreadSafeContextCopy
      static constexpr const uint8_t ThreadSafeContextCopy = 4u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags ThreadSafeContextCopy
      static ::System::Net::ContextAwareResult::StateFlags _get_ThreadSafeContextCopy();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags ThreadSafeContextCopy
      static void _set_ThreadSafeContextCopy(::System::Net::ContextAwareResult::StateFlags value);
      // static field const value: static public System.Net.ContextAwareResult/StateFlags PostBlockStarted
      static constexpr const uint8_t PostBlockStarted = 8u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags PostBlockStarted
      static ::System::Net::ContextAwareResult::StateFlags _get_PostBlockStarted();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags PostBlockStarted
      static void _set_PostBlockStarted(::System::Net::ContextAwareResult::StateFlags value);
      // static field const value: static public System.Net.ContextAwareResult/StateFlags PostBlockFinished
      static constexpr const uint8_t PostBlockFinished = 16u;
      // Get static field: static public System.Net.ContextAwareResult/StateFlags PostBlockFinished
      static ::System::Net::ContextAwareResult::StateFlags _get_PostBlockFinished();
      // Set static field: static public System.Net.ContextAwareResult/StateFlags PostBlockFinished
      static void _set_PostBlockFinished(::System::Net::ContextAwareResult::StateFlags value);
      // Get instance field reference: public System.Byte value__
      [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
    }; // System.Net.ContextAwareResult/StateFlags
    #pragma pack(pop)
    static check_size<sizeof(ContextAwareResult::StateFlags), 0 + sizeof(uint8_t)> __System_Net_ContextAwareResult_StateFlagsSizeCheck;
    static_assert(sizeof(ContextAwareResult::StateFlags) == 0x1);
    public:
    // private System.Threading.ExecutionContext _context
    // Size: 0x8
    // Offset: 0x48
    ::System::Threading::ExecutionContext* context;
    // Field size check
    static_assert(sizeof(::System::Threading::ExecutionContext*) == 0x8);
    // private System.Object _lock
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.ContextAwareResult/StateFlags _flags
    // Size: 0x1
    // Offset: 0x58
    ::System::Net::ContextAwareResult::StateFlags flags;
    // Field size check
    static_assert(sizeof(::System::Net::ContextAwareResult::StateFlags) == 0x1);
    public:
    // Get instance field reference: private System.Threading.ExecutionContext _context
    [[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& dyn__context();
    // Get instance field reference: private System.Object _lock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lock();
    // Get instance field reference: private System.Net.ContextAwareResult/StateFlags _flags
    [[deprecated("Use field access instead!")]] ::System::Net::ContextAwareResult::StateFlags& dyn__flags();
    // private System.Void SafeCaptureIdentity()
    // Offset: 0x4FA33D8
    void SafeCaptureIdentity();
    // private System.Void CleanupInternal()
    // Offset: 0x4FA33DC
    void CleanupInternal();
    // System.Void .ctor(System.Boolean captureIdentity, System.Boolean forceCaptureContext, System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)
    // Offset: 0x4FA33E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContextAwareResult* New_ctor(bool captureIdentity, bool forceCaptureContext, ::Il2CppObject* myObject, ::Il2CppObject* myState, ::System::AsyncCallback* myCallBack) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ContextAwareResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContextAwareResult*, creationType>(captureIdentity, forceCaptureContext, myObject, myState, myCallBack)));
    }
    // System.Void .ctor(System.Boolean captureIdentity, System.Boolean forceCaptureContext, System.Boolean threadSafeContextCopy, System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)
    // Offset: 0x4FA3438
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContextAwareResult* New_ctor(bool captureIdentity, bool forceCaptureContext, bool threadSafeContextCopy, ::Il2CppObject* myObject, ::Il2CppObject* myState, ::System::AsyncCallback* myCallBack) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ContextAwareResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContextAwareResult*, creationType>(captureIdentity, forceCaptureContext, threadSafeContextCopy, myObject, myState, myCallBack)));
    }
    // System.Threading.ExecutionContext get_ContextCopy()
    // Offset: 0x4FA34B0
    ::System::Threading::ExecutionContext* get_ContextCopy();
    // System.Object StartPostingAsyncOp()
    // Offset: 0x4FA3804
    ::Il2CppObject* StartPostingAsyncOp();
    // System.Object StartPostingAsyncOp(System.Boolean lockCapture)
    // Offset: 0x4FA380C
    ::Il2CppObject* StartPostingAsyncOp(bool lockCapture);
    // System.Boolean FinishPostingAsyncOp()
    // Offset: 0x4FA3904
    bool FinishPostingAsyncOp();
    // System.Boolean FinishPostingAsyncOp(ref System.Net.CallbackClosure closure)
    // Offset: 0x4FA3D48
    bool FinishPostingAsyncOp(ByRef<::System::Net::CallbackClosure*> closure);
    // private System.Boolean CaptureOrComplete(ref System.Threading.ExecutionContext cachedContext, System.Boolean returnContext)
    // Offset: 0x4FA3944
    bool CaptureOrComplete(ByRef<::System::Threading::ExecutionContext*> cachedContext, bool returnContext);
    // private System.Void CompleteCallback()
    // Offset: 0x4FA44C4
    void CompleteCallback();
    // System.Net.EndPoint get_RemoteEndPoint()
    // Offset: 0x4FA4570
    ::System::Net::EndPoint* get_RemoteEndPoint();
    // System.Void .ctor(System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)
    // Offset: 0x4FA33E0
    // Implemented from: System.Net.LazyAsyncResult
    // Base method: System.Void LazyAsyncResult::.ctor(System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContextAwareResult* New_ctor(::Il2CppObject* myObject, ::Il2CppObject* myState, ::System::AsyncCallback* myCallBack) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ContextAwareResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContextAwareResult*, creationType>(myObject, myState, myCallBack)));
    }
    // protected override System.Void Cleanup()
    // Offset: 0x4FA3F04
    // Implemented from: System.Net.LazyAsyncResult
    // Base method: System.Void LazyAsyncResult::Cleanup()
    void Cleanup();
    // protected override System.Void Complete(System.IntPtr userToken)
    // Offset: 0x4FA41C8
    // Implemented from: System.Net.LazyAsyncResult
    // Base method: System.Void LazyAsyncResult::Complete(System.IntPtr userToken)
    void Complete(::System::IntPtr userToken);
  }; // System.Net.ContextAwareResult
  #pragma pack(pop)
  static check_size<sizeof(ContextAwareResult), 88 + sizeof(::System::Net::ContextAwareResult::StateFlags)> __System_Net_ContextAwareResultSizeCheck;
  static_assert(sizeof(ContextAwareResult) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ContextAwareResult::StateFlags, "System.Net", "ContextAwareResult/StateFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ContextAwareResult::SafeCaptureIdentity
// Il2CppName: SafeCaptureIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::SafeCaptureIdentity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "SafeCaptureIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::CleanupInternal
// Il2CppName: CleanupInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::CleanupInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "CleanupInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ContextAwareResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ContextAwareResult::get_ContextCopy
// Il2CppName: get_ContextCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::get_ContextCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "get_ContextCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::StartPostingAsyncOp
// Il2CppName: StartPostingAsyncOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::StartPostingAsyncOp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "StartPostingAsyncOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::StartPostingAsyncOp
// Il2CppName: StartPostingAsyncOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::ContextAwareResult::*)(bool)>(&System::Net::ContextAwareResult::StartPostingAsyncOp)> {
  static const MethodInfo* get() {
    static auto* lockCapture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "StartPostingAsyncOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lockCapture});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::FinishPostingAsyncOp
// Il2CppName: FinishPostingAsyncOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::FinishPostingAsyncOp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "FinishPostingAsyncOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::FinishPostingAsyncOp
// Il2CppName: FinishPostingAsyncOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ContextAwareResult::*)(ByRef<::System::Net::CallbackClosure*>)>(&System::Net::ContextAwareResult::FinishPostingAsyncOp)> {
  static const MethodInfo* get() {
    static auto* closure = &::il2cpp_utils::GetClassFromName("System.Net", "CallbackClosure")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "FinishPostingAsyncOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closure});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::CaptureOrComplete
// Il2CppName: CaptureOrComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ContextAwareResult::*)(ByRef<::System::Threading::ExecutionContext*>, bool)>(&System::Net::ContextAwareResult::CaptureOrComplete)> {
  static const MethodInfo* get() {
    static auto* cachedContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->this_arg;
    static auto* returnContext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "CaptureOrComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachedContext, returnContext});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::CompleteCallback
// Il2CppName: CompleteCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::CompleteCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "CompleteCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::get_RemoteEndPoint
// Il2CppName: get_RemoteEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::EndPoint* (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::get_RemoteEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "get_RemoteEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ContextAwareResult::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ContextAwareResult::*)()>(&System::Net::ContextAwareResult::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ContextAwareResult::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ContextAwareResult::*)(::System::IntPtr)>(&System::Net::ContextAwareResult::Complete)> {
  static const MethodInfo* get() {
    static auto* userToken = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextAwareResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userToken});
  }
};
