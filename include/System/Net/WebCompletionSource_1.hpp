// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
#include "System/Runtime/CompilerServices/AsyncTaskMethodBuilder_1.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Skipping declaration: Status because it is already included!
  // Skipping declaration: Result because it is already included!
  // Skipping declaration: <WaitForCompletion>d__15 because it is already included!
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: OperationCanceledException
  class OperationCanceledException;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: WebCompletionSource`1<T>
  template<typename T>
  class WebCompletionSource_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Net::WebCompletionSource_1, "System.Net", "WebCompletionSource`1");
// Type namespace: System.Net
namespace System::Net {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Net.WebCompletionSource`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class WebCompletionSource_1 : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::WebCompletionSource_1::Status<T>
    struct Status;
    // Nested type: ::System::Net::WebCompletionSource_1::Result<T>
    class Result;
    // Nested type: ::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15<T>
    struct $WaitForCompletion$d__15;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Net.WebCompletionSource`1/Status
    // [TokenAttribute] Offset: FFFFFFFF
    struct Status : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = WebCompletionSource_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Status";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Status
      constexpr Status(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public System.Net.WebCompletionSource`1/Status<T> Running
      static typename ::System::Net::WebCompletionSource_1<T>::Status _get_Running() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_get_Running");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Net::WebCompletionSource_1<T>::Status>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Running"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Net.WebCompletionSource`1/Status<T> Running
      static void _set_Running(typename ::System::Net::WebCompletionSource_1<T>::Status value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_set_Running");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Running", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Net.WebCompletionSource`1/Status<T> Completed
      static typename ::System::Net::WebCompletionSource_1<T>::Status _get_Completed() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_get_Completed");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Net::WebCompletionSource_1<T>::Status>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Completed"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Net.WebCompletionSource`1/Status<T> Completed
      static void _set_Completed(typename ::System::Net::WebCompletionSource_1<T>::Status value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_set_Completed");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Completed", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Net.WebCompletionSource`1/Status<T> Canceled
      static typename ::System::Net::WebCompletionSource_1<T>::Status _get_Canceled() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_get_Canceled");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Net::WebCompletionSource_1<T>::Status>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Canceled"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Net.WebCompletionSource`1/Status<T> Canceled
      static void _set_Canceled(typename ::System::Net::WebCompletionSource_1<T>::Status value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_set_Canceled");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Canceled", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Net.WebCompletionSource`1/Status<T> Faulted
      static typename ::System::Net::WebCompletionSource_1<T>::Status _get_Faulted() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_get_Faulted");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Net::WebCompletionSource_1<T>::Status>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Faulted"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Net.WebCompletionSource`1/Status<T> Faulted
      static void _set_Faulted(typename ::System::Net::WebCompletionSource_1<T>::Status value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::_set_Faulted");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename WebCompletionSource_1<T>::Status>::get(), "Faulted", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Status::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Net.WebCompletionSource`1/Status
    // Could not write size check! Type: System.Net.WebCompletionSource`1/Status is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Net.WebCompletionSource`1/Result
    // [TokenAttribute] Offset: FFFFFFFF
    class Result : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = WebCompletionSource_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Result";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private readonly System.Net.WebCompletionSource`1/Status<T> <Status>k__BackingField
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Net::WebCompletionSource_1<T>::Status Status;
      // private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* Error;
      // Field size check
      static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
      // private readonly T <Argument>k__BackingField
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T Argument;
      public:
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Net.WebCompletionSource`1/Status<T> <Status>k__BackingField
      [[deprecated("Use field access instead!")]] typename ::System::Net::WebCompletionSource_1<T>::Status& dyn_$Status$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::dyn_$Status$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Status>k__BackingField"))->offset;
        return *reinterpret_cast<typename ::System::Net::WebCompletionSource_1<T>::Status*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Runtime.ExceptionServices.ExceptionDispatchInfo <Error>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_$Error$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::dyn_$Error$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Error>k__BackingField"))->offset;
        return *reinterpret_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly T <Argument>k__BackingField
      [[deprecated("Use field access instead!")]] T& dyn_$Argument$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::dyn_$Argument$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Argument>k__BackingField"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Net.WebCompletionSource`1/Status<T> get_Status()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Net::WebCompletionSource_1<T>::Status get_Status() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::get_Status");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Net::WebCompletionSource_1<T>::Status, false>(this, ___internal__method);
      }
      // public System.Boolean get_Success()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_Success() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::get_Success");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Success", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Runtime.ExceptionServices.ExceptionDispatchInfo get_Error()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* get_Error() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::get_Error");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
      }
      // public T get_Argument()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Argument() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::get_Argument");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Argument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // public System.Void .ctor(T argument)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename WebCompletionSource_1<T>::Result* New_ctor(T argument) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename WebCompletionSource_1<T>::Result*, creationType>(argument)));
      }
      // public System.Void .ctor(System.Net.WebCompletionSource`1/Status<T> state, System.Runtime.ExceptionServices.ExceptionDispatchInfo error)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename WebCompletionSource_1<T>::Result* New_ctor(typename ::System::Net::WebCompletionSource_1<T>::Status state, ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* error) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::Result::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename WebCompletionSource_1<T>::Result*, creationType>(state, error)));
      }
    }; // System.Net.WebCompletionSource`1/Result
    // Could not write size check! Type: System.Net.WebCompletionSource`1/Result is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Net.WebCompletionSource`1/<WaitForCompletion>d__15
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $WaitForCompletion$d__15 : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
      public:
      using declaring_type = WebCompletionSource_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<WaitForCompletion>d__15";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<T> <>t__builder
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<T> $$t__builder;
      // public System.Net.WebCompletionSource`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::WebCompletionSource_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::System::Net::WebCompletionSource_1<T>*) == 0x8);
      // private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter<System.Net.WebCompletionSource`1/Result<T>> <>u__1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>::ConfiguredTaskAwaiter $$u__1;
      public:
      // Creating value type constructor for type: $WaitForCompletion$d__15
      constexpr $WaitForCompletion$d__15(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<T> $$t__builder_ = {}, ::System::Net::WebCompletionSource_1<T>* $$4__this_ = {}, typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>::ConfiguredTaskAwaiter $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, $$4__this{$$4__this_}, $$u__1{$$u__1_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
      operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
        return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::dyn_$$1__state");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<T> <>t__builder
      [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<T>& dyn_$$t__builder() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::dyn_$$t__builder");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
        return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Net.WebCompletionSource`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::dyn_$$4__this");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::System::Net::WebCompletionSource_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter<System.Net.WebCompletionSource`1/Result<T>> <>u__1
      [[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>::ConfiguredTaskAwaiter& dyn_$$u__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::dyn_$$u__1");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
        return *reinterpret_cast<typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>::ConfiguredTaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private System.Void MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Net::WebCompletionSource_1<T>::$WaitForCompletion$d__15), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::$WaitForCompletion$d__15::SetStateMachine");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Net::WebCompletionSource_1<T>::$WaitForCompletion$d__15), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
      }
    }; // System.Net.WebCompletionSource`1/<WaitForCompletion>d__15
    // Could not write size check! Type: System.Net.WebCompletionSource`1/<WaitForCompletion>d__15 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Threading.Tasks.TaskCompletionSource`1<System.Net.WebCompletionSource`1/Result<T>> completion
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::TaskCompletionSource_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>* completion;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>*) == 0x8);
    // private System.Net.WebCompletionSource`1/Result<T> currentResult
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Net::WebCompletionSource_1<T>::Result* currentResult;
    // Field size check
    static_assert(sizeof(typename ::System::Net::WebCompletionSource_1<T>::Result*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.Tasks.TaskCompletionSource`1<System.Net.WebCompletionSource`1/Result<T>> completion
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>*& dyn_completion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::dyn_completion");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "completion"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::TaskCompletionSource_1<typename ::System::Net::WebCompletionSource_1<T>::Result*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Net.WebCompletionSource`1/Result<T> currentResult
    [[deprecated("Use field access instead!")]] typename ::System::Net::WebCompletionSource_1<T>::Result*& dyn_currentResult() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::dyn_currentResult");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentResult"))->offset;
      return *reinterpret_cast<typename ::System::Net::WebCompletionSource_1<T>::Result**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Boolean runAsync)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebCompletionSource_1<T>* New_ctor(bool runAsync) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebCompletionSource_1<T>*, creationType>(runAsync)));
    }
    // System.Net.WebCompletionSource`1/Result<T> get_CurrentResult()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Net::WebCompletionSource_1<T>::Result* get_CurrentResult() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::get_CurrentResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Net::WebCompletionSource_1<T>::Result*, false>(this, ___internal__method);
    }
    // System.Net.WebCompletionSource`1/Status<T> get_CurrentStatus()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Net::WebCompletionSource_1<T>::Status get_CurrentStatus() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::get_CurrentStatus");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Net::WebCompletionSource_1<T>::Status, false>(this, ___internal__method);
    }
    // System.Threading.Tasks.Task get_Task()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* get_Task() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::get_Task");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Task", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
    }
    // public System.Boolean TrySetCompleted(T argument)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TrySetCompleted(T argument) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::TrySetCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argument)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, argument);
    }
    // public System.Boolean TrySetCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TrySetCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::TrySetCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean TrySetCanceled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TrySetCanceled() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::TrySetCanceled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean TrySetCanceled(System.OperationCanceledException error)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TrySetCanceled(::System::OperationCanceledException* error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::TrySetCanceled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, error);
    }
    // public System.Boolean TrySetException(System.Exception error)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TrySetException(::System::Exception* error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::TrySetException");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, error);
    }
    // public System.Void ThrowOnError()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ThrowOnError() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::ThrowOnError");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowOnError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Threading.Tasks.Task`1<T> WaitForCompletion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<T>* WaitForCompletion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebCompletionSource_1::WaitForCompletion");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___internal__method);
    }
  }; // System.Net.WebCompletionSource`1
  // Could not write size check! Type: System.Net.WebCompletionSource`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
