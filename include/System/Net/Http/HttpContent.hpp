// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Forward declaring type: HttpContent
  class HttpContent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Http::HttpContent);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Http::HttpContent*, "System.Net.Http", "HttpContent");
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpContent
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpContent : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Net::Http::HttpContent::FixedMemoryStream
    class FixedMemoryStream;
    public:
    // private System.Net.Http.HttpContent/FixedMemoryStream buffer
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Http::HttpContent::FixedMemoryStream* buffer;
    // Field size check
    static_assert(sizeof(::System::Net::Http::HttpContent::FixedMemoryStream*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x18
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Net.Http.HttpContent/FixedMemoryStream buffer
    [[deprecated("Use field access instead!")]] ::System::Net::Http::HttpContent::FixedMemoryStream*& dyn_buffer();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // public System.Void Dispose()
    // Offset: 0x4CF8ED4
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x4CF8EE4
    void Dispose(bool disposing);
    // protected System.Void .ctor()
    // Offset: 0x4CF8ECC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpContent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Http::HttpContent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpContent*, creationType>()));
    }
  }; // System.Net.Http.HttpContent
  #pragma pack(pop)
  static check_size<sizeof(HttpContent), 24 + sizeof(bool)> __System_Net_Http_HttpContentSizeCheck;
  static_assert(sizeof(HttpContent) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Http::HttpContent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)(bool)>(&System::Net::Http::HttpContent::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
