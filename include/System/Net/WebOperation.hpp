// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: WebConnection
  class WebConnection;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
  // Forward declaring type: WebCompletionSource`1<T>
  template<typename T>
  class WebCompletionSource_1;
  // Forward declaring type: WebRequestStream
  class WebRequestStream;
  // Forward declaring type: WebResponseStream
  class WebResponseStream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: WebOperation
  class WebOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebOperation);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebOperation*, "System.Net", "WebOperation");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class WebOperation : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::WebOperation::$GetRequestStream$d__50
    struct $GetRequestStream$d__50;
    // Nested type: ::System::Net::WebOperation::$Run$d__58
    struct $Run$d__58;
    public:
    // private readonly System.Net.HttpWebRequest <Request>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::HttpWebRequest* Request;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // private System.Net.WebConnection <Connection>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::WebConnection* Connection;
    // Field size check
    static_assert(sizeof(::System::Net::WebConnection*) == 0x8);
    // private System.Net.ServicePoint <ServicePoint>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::ServicePoint* ServicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private readonly System.Net.BufferOffsetSize <WriteBuffer>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Net::BufferOffsetSize* WriteBuffer;
    // Field size check
    static_assert(sizeof(::System::Net::BufferOffsetSize*) == 0x8);
    // private readonly System.Boolean <IsNtlmChallenge>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool IsNtlmChallenge;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsNtlmChallenge and: _ID
    char __padding4[0x3] = {};
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x34
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.CancellationTokenSource cts
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::CancellationTokenSource* cts;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Net.WebCompletionSource`1<System.Net.WebRequestStream> requestTask
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>* requestTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>*) == 0x8);
    // private System.Net.WebCompletionSource`1<System.Net.WebRequestStream> requestWrittenTask
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>* requestWrittenTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>*) == 0x8);
    // private System.Net.WebCompletionSource`1<System.Net.WebResponseStream> responseTask
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::WebCompletionSource_1<::System::Net::WebResponseStream*>* responseTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource_1<::System::Net::WebResponseStream*>*) == 0x8);
    // private System.Net.WebCompletionSource`1<System.ValueTuple`2<System.Boolean,System.Net.WebOperation>> finishedTask
    // Size: 0x8
    // Offset: 0x58
    ::System::Net::WebCompletionSource_1<::System::ValueTuple_2<bool, ::System::Net::WebOperation*>>* finishedTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource_1<::System::ValueTuple_2<bool, ::System::Net::WebOperation*>>*) == 0x8);
    // private System.Net.WebRequestStream writeStream
    // Size: 0x8
    // Offset: 0x60
    ::System::Net::WebRequestStream* writeStream;
    // Field size check
    static_assert(sizeof(::System::Net::WebRequestStream*) == 0x8);
    // private System.Net.WebResponseStream responseStream
    // Size: 0x8
    // Offset: 0x68
    ::System::Net::WebResponseStream* responseStream;
    // Field size check
    static_assert(sizeof(::System::Net::WebResponseStream*) == 0x8);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo disposedInfo
    // Size: 0x8
    // Offset: 0x70
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* disposedInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo closedInfo
    // Size: 0x8
    // Offset: 0x78
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* closedInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    // private System.Net.WebOperation priorityRequest
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::WebOperation* priorityRequest;
    // Field size check
    static_assert(sizeof(::System::Net::WebOperation*) == 0x8);
    // private System.Int32 requestSent
    // Size: 0x4
    // Offset: 0x88
    int requestSent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 finished
    // Size: 0x4
    // Offset: 0x8C
    int finished;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Net.HttpWebRequest <Request>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_$Request$k__BackingField();
    // Get instance field reference: private System.Net.WebConnection <Connection>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::WebConnection*& dyn_$Connection$k__BackingField();
    // Get instance field reference: private System.Net.ServicePoint <ServicePoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_$ServicePoint$k__BackingField();
    // Get instance field reference: private readonly System.Net.BufferOffsetSize <WriteBuffer>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::BufferOffsetSize*& dyn_$WriteBuffer$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <IsNtlmChallenge>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsNtlmChallenge$k__BackingField();
    // Get instance field reference: readonly System.Int32 ID
    [[deprecated("Use field access instead!")]] int& dyn_ID();
    // Get instance field reference: private System.Threading.CancellationTokenSource cts
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn_cts();
    // Get instance field reference: private System.Net.WebCompletionSource`1<System.Net.WebRequestStream> requestTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>*& dyn_requestTask();
    // Get instance field reference: private System.Net.WebCompletionSource`1<System.Net.WebRequestStream> requestWrittenTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource_1<::System::Net::WebRequestStream*>*& dyn_requestWrittenTask();
    // Get instance field reference: private System.Net.WebCompletionSource`1<System.Net.WebResponseStream> responseTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource_1<::System::Net::WebResponseStream*>*& dyn_responseTask();
    // Get instance field reference: private System.Net.WebCompletionSource`1<System.ValueTuple`2<System.Boolean,System.Net.WebOperation>> finishedTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource_1<::System::ValueTuple_2<bool, ::System::Net::WebOperation*>>*& dyn_finishedTask();
    // Get instance field reference: private System.Net.WebRequestStream writeStream
    [[deprecated("Use field access instead!")]] ::System::Net::WebRequestStream*& dyn_writeStream();
    // Get instance field reference: private System.Net.WebResponseStream responseStream
    [[deprecated("Use field access instead!")]] ::System::Net::WebResponseStream*& dyn_responseStream();
    // Get instance field reference: private System.Runtime.ExceptionServices.ExceptionDispatchInfo disposedInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_disposedInfo();
    // Get instance field reference: private System.Runtime.ExceptionServices.ExceptionDispatchInfo closedInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_closedInfo();
    // Get instance field reference: private System.Net.WebOperation priorityRequest
    [[deprecated("Use field access instead!")]] ::System::Net::WebOperation*& dyn_priorityRequest();
    // Get instance field reference: private System.Int32 requestSent
    [[deprecated("Use field access instead!")]] int& dyn_requestSent();
    // Get instance field reference: private System.Int32 finished
    [[deprecated("Use field access instead!")]] int& dyn_finished();
    // public System.Net.HttpWebRequest get_Request()
    // Offset: 0x4EBC6BC
    ::System::Net::HttpWebRequest* get_Request();
    // public System.Net.WebConnection get_Connection()
    // Offset: 0x4EBC6C4
    ::System::Net::WebConnection* get_Connection();
    // private System.Void set_Connection(System.Net.WebConnection value)
    // Offset: 0x4EBC6CC
    void set_Connection(::System::Net::WebConnection* value);
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x4EBC6D4
    ::System::Net::ServicePoint* get_ServicePoint();
    // private System.Void set_ServicePoint(System.Net.ServicePoint value)
    // Offset: 0x4EBC6DC
    void set_ServicePoint(::System::Net::ServicePoint* value);
    // public System.Net.BufferOffsetSize get_WriteBuffer()
    // Offset: 0x4EBC6E4
    ::System::Net::BufferOffsetSize* get_WriteBuffer();
    // public System.Boolean get_IsNtlmChallenge()
    // Offset: 0x4EBC6EC
    bool get_IsNtlmChallenge();
    // System.String get_ME()
    // Offset: 0x4EBC6F4
    ::StringW get_ME();
    // public System.Void .ctor(System.Net.HttpWebRequest request, System.Net.BufferOffsetSize writeBuffer, System.Boolean isNtlmChallenge, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EBC6FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebOperation* New_ctor(::System::Net::HttpWebRequest* request, ::System::Net::BufferOffsetSize* writeBuffer, bool isNtlmChallenge, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebOperation*, creationType>(request, writeBuffer, isNtlmChallenge, cancellationToken)));
    }
    // public System.Boolean get_Aborted()
    // Offset: 0x4EBC8E4
    bool get_Aborted();
    // public System.Boolean get_Closed()
    // Offset: 0x4EBC934
    bool get_Closed();
    // public System.Void Abort()
    // Offset: 0x4EBC960
    void Abort();
    // public System.Void Close()
    // Offset: 0x4EBCB50
    void Close();
    // private System.Void SetCanceled()
    // Offset: 0x4EBCA88
    void SetCanceled();
    // private System.Void SetError(System.Exception error)
    // Offset: 0x4EBCE38
    void SetError(::System::Exception* error);
    // private System.ValueTuple`2<System.Runtime.ExceptionServices.ExceptionDispatchInfo,System.Boolean> SetDisposed(ref System.Runtime.ExceptionServices.ExceptionDispatchInfo field)
    // Offset: 0x4EBC9A0
    ::System::ValueTuple_2<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, bool> SetDisposed(ByRef<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*> field);
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo CheckDisposed(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EBCEDC
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* CheckDisposed(::System::Threading::CancellationToken cancellationToken);
    // System.Void ThrowIfDisposed()
    // Offset: 0x4EBCF80
    void ThrowIfDisposed();
    // System.Void ThrowIfDisposed(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EBCFE0
    void ThrowIfDisposed(::System::Threading::CancellationToken cancellationToken);
    // System.Void ThrowIfClosedOrDisposed()
    // Offset: 0x4EBD024
    void ThrowIfClosedOrDisposed();
    // System.Void ThrowIfClosedOrDisposed(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EBD084
    void ThrowIfClosedOrDisposed(::System::Threading::CancellationToken cancellationToken);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo CheckThrowDisposed(System.Boolean throwIt, ref System.Runtime.ExceptionServices.ExceptionDispatchInfo field)
    // Offset: 0x4EBCF28
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* CheckThrowDisposed(bool throwIt, ByRef<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*> field);
    // System.Void RegisterRequest(System.Net.ServicePoint servicePoint, System.Net.WebConnection connection)
    // Offset: 0x4EBD0D0
    void RegisterRequest(::System::Net::ServicePoint* servicePoint, ::System::Net::WebConnection* connection);
    // public System.Void SetPriorityRequest(System.Net.WebOperation operation)
    // Offset: 0x4EBD330
    void SetPriorityRequest(::System::Net::WebOperation* operation);
    // public System.Threading.Tasks.Task`1<System.IO.Stream> GetRequestStream()
    // Offset: 0x4EBD4AC
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* GetRequestStream();
    // System.Threading.Tasks.Task`1<System.Net.WebRequestStream> GetRequestStreamInternal()
    // Offset: 0x4EBD5C4
    ::System::Threading::Tasks::Task_1<::System::Net::WebRequestStream*>* GetRequestStreamInternal();
    // public System.Threading.Tasks.Task WaitUntilRequestWritten()
    // Offset: 0x4EBD614
    ::System::Threading::Tasks::Task* WaitUntilRequestWritten();
    // public System.Net.WebRequestStream get_WriteStream()
    // Offset: 0x4EBD664
    ::System::Net::WebRequestStream* get_WriteStream();
    // public System.Threading.Tasks.Task`1<System.Net.WebResponseStream> GetResponseStream()
    // Offset: 0x4EBD67C
    ::System::Threading::Tasks::Task_1<::System::Net::WebResponseStream*>* GetResponseStream();
    // System.Net.WebCompletionSource`1<System.ValueTuple`2<System.Boolean,System.Net.WebOperation>> get_Finished()
    // Offset: 0x4EBD6CC
    ::System::Net::WebCompletionSource_1<::System::ValueTuple_2<bool, ::System::Net::WebOperation*>>* get_Finished();
    // System.Void Run()
    // Offset: 0x4EBD6D4
    void Run();
    // System.Void CompleteRequestWritten(System.Net.WebRequestStream stream, System.Exception error)
    // Offset: 0x4EBD780
    void CompleteRequestWritten(::System::Net::WebRequestStream* stream, ::System::Exception* error);
    // System.Void Finish(System.Boolean ok, System.Exception error)
    // Offset: 0x4EBCBFC
    void Finish(bool ok, ::System::Exception* error);
    // private System.Void <RegisterRequest>b__48_0()
    // Offset: 0x4EBD800
    void $RegisterRequest$b__48_0();
  }; // System.Net.WebOperation
  #pragma pack(pop)
  static check_size<sizeof(WebOperation), 140 + sizeof(int)> __System_Net_WebOperationSizeCheck;
  static_assert(sizeof(WebOperation) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebOperation::get_Request
// Il2CppName: get_Request
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpWebRequest* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_Request)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_Request", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_Connection
// Il2CppName: get_Connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebConnection* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_Connection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_Connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::set_Connection
// Il2CppName: set_Connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Net::WebConnection*)>(&System::Net::WebOperation::set_Connection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "set_Connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::set_ServicePoint
// Il2CppName: set_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Net::ServicePoint*)>(&System::Net::WebOperation::set_ServicePoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ServicePoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "set_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_WriteBuffer
// Il2CppName: get_WriteBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::BufferOffsetSize* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_WriteBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_WriteBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_IsNtlmChallenge
// Il2CppName: get_IsNtlmChallenge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_IsNtlmChallenge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_IsNtlmChallenge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_ME
// Il2CppName: get_ME
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_ME)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_ME", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebOperation::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_Closed
// Il2CppName: get_Closed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_Closed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_Closed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::SetCanceled
// Il2CppName: SetCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::SetCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "SetCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::SetError
// Il2CppName: SetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Exception*)>(&System::Net::WebOperation::SetError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "SetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::SetDisposed
// Il2CppName: SetDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, bool> (System::Net::WebOperation::*)(ByRef<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>)>(&System::Net::WebOperation::SetDisposed)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Runtime.ExceptionServices", "ExceptionDispatchInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "SetDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::CheckDisposed
// Il2CppName: CheckDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo* (System::Net::WebOperation::*)(::System::Threading::CancellationToken)>(&System::Net::WebOperation::CheckDisposed)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "CheckDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::ThrowIfDisposed
// Il2CppName: ThrowIfDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::ThrowIfDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "ThrowIfDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::ThrowIfDisposed
// Il2CppName: ThrowIfDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Threading::CancellationToken)>(&System::Net::WebOperation::ThrowIfDisposed)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "ThrowIfDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::ThrowIfClosedOrDisposed
// Il2CppName: ThrowIfClosedOrDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::ThrowIfClosedOrDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "ThrowIfClosedOrDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::ThrowIfClosedOrDisposed
// Il2CppName: ThrowIfClosedOrDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Threading::CancellationToken)>(&System::Net::WebOperation::ThrowIfClosedOrDisposed)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "ThrowIfClosedOrDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::CheckThrowDisposed
// Il2CppName: CheckThrowDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo* (System::Net::WebOperation::*)(bool, ByRef<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>)>(&System::Net::WebOperation::CheckThrowDisposed)> {
  static const MethodInfo* get() {
    static auto* throwIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Runtime.ExceptionServices", "ExceptionDispatchInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "CheckThrowDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{throwIt, field});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::RegisterRequest
// Il2CppName: RegisterRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Net::ServicePoint*, ::System::Net::WebConnection*)>(&System::Net::WebOperation::RegisterRequest)> {
  static const MethodInfo* get() {
    static auto* servicePoint = &::il2cpp_utils::GetClassFromName("System.Net", "ServicePoint")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "RegisterRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{servicePoint, connection});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::SetPriorityRequest
// Il2CppName: SetPriorityRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Net::WebOperation*)>(&System::Net::WebOperation::SetPriorityRequest)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("System.Net", "WebOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "SetPriorityRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::GetRequestStream
// Il2CppName: GetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::GetRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "GetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::GetRequestStreamInternal
// Il2CppName: GetRequestStreamInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebRequestStream*>* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::GetRequestStreamInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "GetRequestStreamInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::WaitUntilRequestWritten
// Il2CppName: WaitUntilRequestWritten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::WaitUntilRequestWritten)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "WaitUntilRequestWritten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_WriteStream
// Il2CppName: get_WriteStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebRequestStream* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_WriteStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_WriteStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::GetResponseStream
// Il2CppName: GetResponseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebResponseStream*>* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::GetResponseStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "GetResponseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::get_Finished
// Il2CppName: get_Finished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebCompletionSource_1<::System::ValueTuple_2<bool, ::System::Net::WebOperation*>>* (System::Net::WebOperation::*)()>(&System::Net::WebOperation::get_Finished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "get_Finished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::Run)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::CompleteRequestWritten
// Il2CppName: CompleteRequestWritten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(::System::Net::WebRequestStream*, ::System::Exception*)>(&System::Net::WebOperation::CompleteRequestWritten)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebRequestStream")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "CompleteRequestWritten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, error});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)(bool, ::System::Exception*)>(&System::Net::WebOperation::Finish)> {
  static const MethodInfo* get() {
    static auto* ok = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ok, error});
  }
};
// Writing MetadataGetter for method: System::Net::WebOperation::$RegisterRequest$b__48_0
// Il2CppName: <RegisterRequest>b__48_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebOperation::*)()>(&System::Net::WebOperation::$RegisterRequest$b__48_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebOperation*), "<RegisterRequest>b__48_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
