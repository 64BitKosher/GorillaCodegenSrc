// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509RevocationMode
#include "System/Security/Cryptography/X509Certificates/X509RevocationMode.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: System.Net.Security.EncryptionPolicy
#include "System/Net/Security/EncryptionPolicy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Forward declaring type: SslServerAuthenticationOptions
  class SslServerAuthenticationOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Security::SslServerAuthenticationOptions);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Security::SslServerAuthenticationOptions*, "System.Net.Security", "SslServerAuthenticationOptions");
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Security.SslServerAuthenticationOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class SslServerAuthenticationOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Security.Cryptography.X509Certificates.X509RevocationMode _checkCertificateRevocation
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Cryptography::X509Certificates::X509RevocationMode checkCertificateRevocation;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509RevocationMode) == 0x4);
    // private System.Security.Authentication.SslProtocols _enabledSslProtocols
    // Size: 0x4
    // Offset: 0x14
    ::System::Security::Authentication::SslProtocols enabledSslProtocols;
    // Field size check
    static_assert(sizeof(::System::Security::Authentication::SslProtocols) == 0x4);
    // private System.Net.Security.EncryptionPolicy _encryptionPolicy
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::Security::EncryptionPolicy encryptionPolicy;
    // Field size check
    static_assert(sizeof(::System::Net::Security::EncryptionPolicy) == 0x4);
    // private System.Boolean _allowRenegotiation
    // Size: 0x1
    // Offset: 0x1C
    bool allowRenegotiation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ClientCertificateRequired>k__BackingField
    // Size: 0x1
    // Offset: 0x1D
    bool ClientCertificateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ClientCertificateRequired and: ServerCertificate
    char __padding4[0x2] = {};
    // private System.Security.Cryptography.X509Certificates.X509Certificate <ServerCertificate>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::X509Certificates::X509Certificate* ServerCertificate;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*) == 0x8);
    public:
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509RevocationMode _checkCertificateRevocation
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509RevocationMode& dyn__checkCertificateRevocation();
    // Get instance field reference: private System.Security.Authentication.SslProtocols _enabledSslProtocols
    [[deprecated("Use field access instead!")]] ::System::Security::Authentication::SslProtocols& dyn__enabledSslProtocols();
    // Get instance field reference: private System.Net.Security.EncryptionPolicy _encryptionPolicy
    [[deprecated("Use field access instead!")]] ::System::Net::Security::EncryptionPolicy& dyn__encryptionPolicy();
    // Get instance field reference: private System.Boolean _allowRenegotiation
    [[deprecated("Use field access instead!")]] bool& dyn__allowRenegotiation();
    // Get instance field reference: private System.Boolean <ClientCertificateRequired>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ClientCertificateRequired$k__BackingField();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate <ServerCertificate>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate*& dyn_$ServerCertificate$k__BackingField();
    // public System.Boolean get_ClientCertificateRequired()
    // Offset: 0x4EEDD30
    bool get_ClientCertificateRequired();
    // public System.Void set_ClientCertificateRequired(System.Boolean value)
    // Offset: 0x4EEDD38
    void set_ClientCertificateRequired(bool value);
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_ServerCertificate()
    // Offset: 0x4EEDD44
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_ServerCertificate();
    // public System.Void set_ServerCertificate(System.Security.Cryptography.X509Certificates.X509Certificate value)
    // Offset: 0x4EEDD4C
    void set_ServerCertificate(::System::Security::Cryptography::X509Certificates::X509Certificate* value);
    // public System.Security.Authentication.SslProtocols get_EnabledSslProtocols()
    // Offset: 0x4EEDD54
    ::System::Security::Authentication::SslProtocols get_EnabledSslProtocols();
    // public System.Void set_EnabledSslProtocols(System.Security.Authentication.SslProtocols value)
    // Offset: 0x4EEDD5C
    void set_EnabledSslProtocols(::System::Security::Authentication::SslProtocols value);
    // public System.Void set_CertificateRevocationCheckMode(System.Security.Cryptography.X509Certificates.X509RevocationMode value)
    // Offset: 0x4EEDD64
    void set_CertificateRevocationCheckMode(::System::Security::Cryptography::X509Certificates::X509RevocationMode value);
    // public System.Void set_EncryptionPolicy(System.Net.Security.EncryptionPolicy value)
    // Offset: 0x4EEDE00
    void set_EncryptionPolicy(::System::Net::Security::EncryptionPolicy value);
    // public System.Void .ctor()
    // Offset: 0x4EEDE9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslServerAuthenticationOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Security::SslServerAuthenticationOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslServerAuthenticationOptions*, creationType>()));
    }
  }; // System.Net.Security.SslServerAuthenticationOptions
  #pragma pack(pop)
  static check_size<sizeof(SslServerAuthenticationOptions), 32 + sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*)> __System_Net_Security_SslServerAuthenticationOptionsSizeCheck;
  static_assert(sizeof(SslServerAuthenticationOptions) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::get_ClientCertificateRequired
// Il2CppName: get_ClientCertificateRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SslServerAuthenticationOptions::*)()>(&System::Net::Security::SslServerAuthenticationOptions::get_ClientCertificateRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "get_ClientCertificateRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::set_ClientCertificateRequired
// Il2CppName: set_ClientCertificateRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslServerAuthenticationOptions::*)(bool)>(&System::Net::Security::SslServerAuthenticationOptions::set_ClientCertificateRequired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "set_ClientCertificateRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::get_ServerCertificate
// Il2CppName: get_ServerCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (System::Net::Security::SslServerAuthenticationOptions::*)()>(&System::Net::Security::SslServerAuthenticationOptions::get_ServerCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "get_ServerCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::set_ServerCertificate
// Il2CppName: set_ServerCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslServerAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*)>(&System::Net::Security::SslServerAuthenticationOptions::set_ServerCertificate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "set_ServerCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::get_EnabledSslProtocols
// Il2CppName: get_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Authentication::SslProtocols (System::Net::Security::SslServerAuthenticationOptions::*)()>(&System::Net::Security::SslServerAuthenticationOptions::get_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "get_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::set_EnabledSslProtocols
// Il2CppName: set_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslServerAuthenticationOptions::*)(::System::Security::Authentication::SslProtocols)>(&System::Net::Security::SslServerAuthenticationOptions::set_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Authentication", "SslProtocols")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "set_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::set_CertificateRevocationCheckMode
// Il2CppName: set_CertificateRevocationCheckMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslServerAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509RevocationMode)>(&System::Net::Security::SslServerAuthenticationOptions::set_CertificateRevocationCheckMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509RevocationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "set_CertificateRevocationCheckMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::set_EncryptionPolicy
// Il2CppName: set_EncryptionPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslServerAuthenticationOptions::*)(::System::Net::Security::EncryptionPolicy)>(&System::Net::Security::SslServerAuthenticationOptions::set_EncryptionPolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "EncryptionPolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslServerAuthenticationOptions*), "set_EncryptionPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslServerAuthenticationOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
