// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Security.SafeFreeCredentials
#include "System/Net/Security/SafeFreeCredentials.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeGssCredHandle
  class SafeGssCredHandle;
}
// Completed forward declares
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Forward declaring type: SafeFreeNegoCredentials
  class SafeFreeNegoCredentials;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Security::SafeFreeNegoCredentials);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Security::SafeFreeNegoCredentials*, "System.Net.Security", "SafeFreeNegoCredentials");
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Security.SafeFreeNegoCredentials
  // [TokenAttribute] Offset: FFFFFFFF
  class SafeFreeNegoCredentials : public ::System::Net::Security::SafeFreeCredentials {
    public:
    // Writing base type padding for base size: 0x1E to desired offset: 0x20
    char ___base_padding[0x2] = {};
    public:
    // private Microsoft.Win32.SafeHandles.SafeGssCredHandle _credential
    // Size: 0x8
    // Offset: 0x20
    ::Microsoft::Win32::SafeHandles::SafeGssCredHandle* credential;
    // Field size check
    static_assert(sizeof(::Microsoft::Win32::SafeHandles::SafeGssCredHandle*) == 0x8);
    // private readonly System.Boolean _isNtlmOnly
    // Size: 0x1
    // Offset: 0x28
    bool isNtlmOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNtlmOnly and: userName
    char __padding1[0x7] = {};
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x30
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Boolean _isDefault
    // Size: 0x1
    // Offset: 0x38
    bool isDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Microsoft.Win32.SafeHandles.SafeGssCredHandle _credential
    [[deprecated("Use field access instead!")]] ::Microsoft::Win32::SafeHandles::SafeGssCredHandle*& dyn__credential();
    // Get instance field reference: private readonly System.Boolean _isNtlmOnly
    [[deprecated("Use field access instead!")]] bool& dyn__isNtlmOnly();
    // Get instance field reference: private readonly System.String _userName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userName();
    // Get instance field reference: private readonly System.Boolean _isDefault
    [[deprecated("Use field access instead!")]] bool& dyn__isDefault();
    // public Microsoft.Win32.SafeHandles.SafeGssCredHandle get_GssCredential()
    // Offset: 0x4EEDB50
    ::Microsoft::Win32::SafeHandles::SafeGssCredHandle* get_GssCredential();
    // public System.Boolean get_IsNtlmOnly()
    // Offset: 0x4EEDB58
    bool get_IsNtlmOnly();
    // public System.String get_UserName()
    // Offset: 0x4EEDB60
    ::StringW get_UserName();
    // public System.Boolean get_IsDefault()
    // Offset: 0x4EEDB68
    bool get_IsDefault();
    // public System.Void .ctor(System.Boolean isNtlmOnly, System.String username, System.String password, System.String domain)
    // Offset: 0x4EECF58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SafeFreeNegoCredentials* New_ctor(bool isNtlmOnly, ::StringW username, ::StringW password, ::StringW domain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Security::SafeFreeNegoCredentials::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SafeFreeNegoCredentials*, creationType>(isNtlmOnly, username, password, domain)));
    }
    // public override System.Boolean get_IsInvalid()
    // Offset: 0x4EEDB70
    // Implemented from: System.Runtime.InteropServices.SafeHandle
    // Base method: System.Boolean SafeHandle::get_IsInvalid()
    bool get_IsInvalid();
    // protected override System.Boolean ReleaseHandle()
    // Offset: 0x4EEDB80
    // Implemented from: System.Runtime.InteropServices.SafeHandle
    // Base method: System.Boolean SafeHandle::ReleaseHandle()
    bool ReleaseHandle();
  }; // System.Net.Security.SafeFreeNegoCredentials
  #pragma pack(pop)
  static check_size<sizeof(SafeFreeNegoCredentials), 56 + sizeof(bool)> __System_Net_Security_SafeFreeNegoCredentialsSizeCheck;
  static_assert(sizeof(SafeFreeNegoCredentials) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::get_GssCredential
// Il2CppName: get_GssCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::SafeHandles::SafeGssCredHandle* (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::get_GssCredential)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "get_GssCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::get_IsNtlmOnly
// Il2CppName: get_IsNtlmOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::get_IsNtlmOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "get_IsNtlmOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::get_UserName
// Il2CppName: get_UserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::get_UserName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "get_UserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::get_IsInvalid
// Il2CppName: get_IsInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::get_IsInvalid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "get_IsInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeFreeNegoCredentials::ReleaseHandle
// Il2CppName: ReleaseHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SafeFreeNegoCredentials::*)()>(&System::Net::Security::SafeFreeNegoCredentials::ReleaseHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeFreeNegoCredentials*), "ReleaseHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
