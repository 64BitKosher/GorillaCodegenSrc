// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Security.EncryptionPolicy
#include "System/Net/Security/EncryptionPolicy.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509RevocationMode
#include "System/Security/Cryptography/X509Certificates/X509RevocationMode.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Completed forward declares
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Forward declaring type: SslClientAuthenticationOptions
  class SslClientAuthenticationOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Security::SslClientAuthenticationOptions);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Security::SslClientAuthenticationOptions*, "System.Net.Security", "SslClientAuthenticationOptions");
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Security.SslClientAuthenticationOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class SslClientAuthenticationOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Net.Security.EncryptionPolicy _encryptionPolicy
    // Size: 0x4
    // Offset: 0x10
    ::System::Net::Security::EncryptionPolicy encryptionPolicy;
    // Field size check
    static_assert(sizeof(::System::Net::Security::EncryptionPolicy) == 0x4);
    // private System.Security.Cryptography.X509Certificates.X509RevocationMode _checkCertificateRevocation
    // Size: 0x4
    // Offset: 0x14
    ::System::Security::Cryptography::X509Certificates::X509RevocationMode checkCertificateRevocation;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509RevocationMode) == 0x4);
    // private System.Security.Authentication.SslProtocols _enabledSslProtocols
    // Size: 0x4
    // Offset: 0x18
    ::System::Security::Authentication::SslProtocols enabledSslProtocols;
    // Field size check
    static_assert(sizeof(::System::Security::Authentication::SslProtocols) == 0x4);
    // private System.Boolean _allowRenegotiation
    // Size: 0x1
    // Offset: 0x1C
    bool allowRenegotiation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowRenegotiation and: TargetHost
    char __padding3[0x3] = {};
    // private System.String <TargetHost>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW TargetHost;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection <ClientCertificates>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* ClientCertificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    public:
    // Get instance field reference: private System.Net.Security.EncryptionPolicy _encryptionPolicy
    [[deprecated("Use field access instead!")]] ::System::Net::Security::EncryptionPolicy& dyn__encryptionPolicy();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509RevocationMode _checkCertificateRevocation
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509RevocationMode& dyn__checkCertificateRevocation();
    // Get instance field reference: private System.Security.Authentication.SslProtocols _enabledSslProtocols
    [[deprecated("Use field access instead!")]] ::System::Security::Authentication::SslProtocols& dyn__enabledSslProtocols();
    // Get instance field reference: private System.Boolean _allowRenegotiation
    [[deprecated("Use field access instead!")]] bool& dyn__allowRenegotiation();
    // Get instance field reference: private System.String <TargetHost>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$TargetHost$k__BackingField();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection <ClientCertificates>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn_$ClientCertificates$k__BackingField();
    // public System.String get_TargetHost()
    // Offset: 0x4EEDBB8
    ::StringW get_TargetHost();
    // public System.Void set_TargetHost(System.String value)
    // Offset: 0x4EEDBC0
    void set_TargetHost(::StringW value);
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x4EEDBC8
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
    // Offset: 0x4EEDBD0
    void set_ClientCertificates(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* value);
    // public System.Void set_CertificateRevocationCheckMode(System.Security.Cryptography.X509Certificates.X509RevocationMode value)
    // Offset: 0x4EEDBD8
    void set_CertificateRevocationCheckMode(::System::Security::Cryptography::X509Certificates::X509RevocationMode value);
    // public System.Void set_EncryptionPolicy(System.Net.Security.EncryptionPolicy value)
    // Offset: 0x4EEDC74
    void set_EncryptionPolicy(::System::Net::Security::EncryptionPolicy value);
    // public System.Security.Authentication.SslProtocols get_EnabledSslProtocols()
    // Offset: 0x4EEDD10
    ::System::Security::Authentication::SslProtocols get_EnabledSslProtocols();
    // public System.Void set_EnabledSslProtocols(System.Security.Authentication.SslProtocols value)
    // Offset: 0x4EEDD18
    void set_EnabledSslProtocols(::System::Security::Authentication::SslProtocols value);
    // public System.Void .ctor()
    // Offset: 0x4EEDD20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslClientAuthenticationOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Security::SslClientAuthenticationOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslClientAuthenticationOptions*, creationType>()));
    }
  }; // System.Net.Security.SslClientAuthenticationOptions
  #pragma pack(pop)
  static check_size<sizeof(SslClientAuthenticationOptions), 40 + sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)> __System_Net_Security_SslClientAuthenticationOptionsSizeCheck;
  static_assert(sizeof(SslClientAuthenticationOptions) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::get_TargetHost
// Il2CppName: get_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Security::SslClientAuthenticationOptions::*)()>(&System::Net::Security::SslClientAuthenticationOptions::get_TargetHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "get_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::set_TargetHost
// Il2CppName: set_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslClientAuthenticationOptions::*)(::StringW)>(&System::Net::Security::SslClientAuthenticationOptions::set_TargetHost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "set_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::Security::SslClientAuthenticationOptions::*)()>(&System::Net::Security::SslClientAuthenticationOptions::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::set_ClientCertificates
// Il2CppName: set_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslClientAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&System::Net::Security::SslClientAuthenticationOptions::set_ClientCertificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "set_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::set_CertificateRevocationCheckMode
// Il2CppName: set_CertificateRevocationCheckMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslClientAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509RevocationMode)>(&System::Net::Security::SslClientAuthenticationOptions::set_CertificateRevocationCheckMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509RevocationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "set_CertificateRevocationCheckMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::set_EncryptionPolicy
// Il2CppName: set_EncryptionPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslClientAuthenticationOptions::*)(::System::Net::Security::EncryptionPolicy)>(&System::Net::Security::SslClientAuthenticationOptions::set_EncryptionPolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "EncryptionPolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "set_EncryptionPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::get_EnabledSslProtocols
// Il2CppName: get_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Authentication::SslProtocols (System::Net::Security::SslClientAuthenticationOptions::*)()>(&System::Net::Security::SslClientAuthenticationOptions::get_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "get_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::set_EnabledSslProtocols
// Il2CppName: set_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Security::SslClientAuthenticationOptions::*)(::System::Security::Authentication::SslProtocols)>(&System::Net::Security::SslClientAuthenticationOptions::set_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Authentication", "SslProtocols")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SslClientAuthenticationOptions*), "set_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SslClientAuthenticationOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
