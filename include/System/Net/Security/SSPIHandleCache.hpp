// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SafeCredentialReference
  class SafeCredentialReference;
  // Forward declaring type: SafeFreeCredentials
  class SafeFreeCredentials;
}
// Completed forward declares
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Forward declaring type: SSPIHandleCache
  class SSPIHandleCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Security::SSPIHandleCache);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Security::SSPIHandleCache*, "System.Net.Security", "SSPIHandleCache");
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Security.SSPIHandleCache
  // [TokenAttribute] Offset: FFFFFFFF
  class SSPIHandleCache : public ::Il2CppObject {
    public:
    // Get static field: static private System.Net.Security.SafeCredentialReference[] s_cacheSlots
    static ::ArrayW<::System::Net::Security::SafeCredentialReference*> _get_s_cacheSlots();
    // Set static field: static private System.Net.Security.SafeCredentialReference[] s_cacheSlots
    static void _set_s_cacheSlots(::ArrayW<::System::Net::Security::SafeCredentialReference*> value);
    // Get static field: static private System.Int32 s_current
    static int _get_s_current();
    // Set static field: static private System.Int32 s_current
    static void _set_s_current(int value);
    // static System.Void CacheCredential(System.Net.Security.SafeFreeCredentials newHandle)
    // Offset: 0x4EED474
    static void CacheCredential(::System::Net::Security::SafeFreeCredentials* newHandle);
    // static private System.Void .cctor()
    // Offset: 0x4EED684
    static void _cctor();
  }; // System.Net.Security.SSPIHandleCache
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Security::SSPIHandleCache::CacheCredential
// Il2CppName: CacheCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Security::SafeFreeCredentials*)>(&System::Net::Security::SSPIHandleCache::CacheCredential)> {
  static const MethodInfo* get() {
    static auto* newHandle = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SafeFreeCredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SSPIHandleCache*), "CacheCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newHandle});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SSPIHandleCache::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::Security::SSPIHandleCache::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SSPIHandleCache*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
