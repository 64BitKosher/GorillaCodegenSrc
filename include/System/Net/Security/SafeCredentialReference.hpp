// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
#include "Microsoft/Win32/SafeHandles/CriticalHandleMinusOneIsInvalid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SafeFreeCredentials
  class SafeFreeCredentials;
}
// Completed forward declares
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Forward declaring type: SafeCredentialReference
  class SafeCredentialReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Security::SafeCredentialReference);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Security::SafeCredentialReference*, "System.Net.Security", "SafeCredentialReference");
// Type namespace: System.Net.Security
namespace System::Net::Security {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Security.SafeCredentialReference
  // [TokenAttribute] Offset: FFFFFFFF
  class SafeCredentialReference : public ::Microsoft::Win32::SafeHandles::CriticalHandleMinusOneIsInvalid {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    public:
    // System.Net.Security.SafeFreeCredentials Target
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::Security::SafeFreeCredentials* Target;
    // Field size check
    static_assert(sizeof(::System::Net::Security::SafeFreeCredentials*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Net::Security::SafeFreeCredentials*
    constexpr operator ::System::Net::Security::SafeFreeCredentials*() const noexcept {
      return Target;
    }
    // Get instance field reference: System.Net.Security.SafeFreeCredentials Target
    [[deprecated("Use field access instead!")]] ::System::Net::Security::SafeFreeCredentials*& dyn_Target();
    // static System.Net.Security.SafeCredentialReference CreateReference(System.Net.Security.SafeFreeCredentials target)
    // Offset: 0x4EED610
    static ::System::Net::Security::SafeCredentialReference* CreateReference(::System::Net::Security::SafeFreeCredentials* target);
    // private System.Void .ctor(System.Net.Security.SafeFreeCredentials target)
    // Offset: 0x4EEDAAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SafeCredentialReference* New_ctor(::System::Net::Security::SafeFreeCredentials* target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Security::SafeCredentialReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SafeCredentialReference*, creationType>(target)));
    }
    // protected override System.Boolean ReleaseHandle()
    // Offset: 0x4EEDB1C
    // Implemented from: System.Runtime.InteropServices.CriticalHandle
    // Base method: System.Boolean CriticalHandle::ReleaseHandle()
    bool ReleaseHandle();
  }; // System.Net.Security.SafeCredentialReference
  #pragma pack(pop)
  static check_size<sizeof(SafeCredentialReference), 32 + sizeof(::System::Net::Security::SafeFreeCredentials*)> __System_Net_Security_SafeCredentialReferenceSizeCheck;
  static_assert(sizeof(SafeCredentialReference) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Security::SafeCredentialReference::CreateReference
// Il2CppName: CreateReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::SafeCredentialReference* (*)(::System::Net::Security::SafeFreeCredentials*)>(&System::Net::Security::SafeCredentialReference::CreateReference)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SafeFreeCredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeCredentialReference*), "CreateReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Net::Security::SafeCredentialReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Security::SafeCredentialReference::ReleaseHandle
// Il2CppName: ReleaseHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Security::SafeCredentialReference::*)()>(&System::Net::Security::SafeCredentialReference::ReleaseHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Security::SafeCredentialReference*), "ReleaseHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
