// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Sockets.NetworkStream
#include "System/Net/Sockets/NetworkStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: TlsStream
  class TlsStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::TlsStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::TlsStream*, "System.Net", "TlsStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.TlsStream
  // [TokenAttribute] Offset: FFFFFFFF
  class TlsStream : public ::System::Net::Sockets::NetworkStream {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // private System.Net.Security.SslStream _sslStream
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::Security::SslStream* sslStream;
    // Field size check
    static_assert(sizeof(::System::Net::Security::SslStream*) == 0x8);
    // private System.String _host
    // Size: 0x8
    // Offset: 0x50
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    // Size: 0x8
    // Offset: 0x58
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    public:
    // Get instance field reference: private System.Net.Security.SslStream _sslStream
    [[deprecated("Use field access instead!")]] ::System::Net::Security::SslStream*& dyn__sslStream();
    // Get instance field reference: private System.String _host
    [[deprecated("Use field access instead!")]] ::StringW& dyn__host();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn__clientCertificates();
    // public System.Void .ctor(System.Net.Sockets.NetworkStream stream, System.Net.Sockets.Socket socket, System.String host, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates)
    // Offset: 0x4FA96A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TlsStream* New_ctor(::System::Net::Sockets::NetworkStream* stream, ::System::Net::Sockets::Socket* socket, ::StringW host, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::TlsStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TlsStream*, creationType>(stream, socket, host, clientCertificates)));
    }
    // public System.Void AuthenticateAsClient()
    // Offset: 0x4FA9794
    void AuthenticateAsClient();
    // public System.IAsyncResult BeginAuthenticateAsClient(System.AsyncCallback asyncCallback, System.Object state)
    // Offset: 0x4FA9894
    ::System::IAsyncResult* BeginAuthenticateAsClient(::System::AsyncCallback* asyncCallback, ::Il2CppObject* state);
    // public System.Void EndAuthenticateAsClient(System.IAsyncResult asyncResult)
    // Offset: 0x4FA99AC
    void EndAuthenticateAsClient(::System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0x4FA99D0
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.IAsyncResult NetworkStream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginWrite(::ArrayW<uint8_t> buffer, int offset, int size, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Void EndWrite(System.IAsyncResult result)
    // Offset: 0x4FA99F4
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.Void NetworkStream::EndWrite(System.IAsyncResult result)
    void EndWrite(::System::IAsyncResult* result);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x4FA9A18
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.Void NetworkStream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    void Write(::ArrayW<uint8_t> buffer, int offset, int size);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x4FA9A3C
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.Int32 NetworkStream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    int Read(::ArrayW<uint8_t> buffer, int offset, int size);
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x4FA9A60
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.IAsyncResult NetworkStream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginRead(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x4FA9A84
    // Implemented from: System.Net.Sockets.NetworkStream
    // Base method: System.Int32 NetworkStream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(::System::IAsyncResult* asyncResult);
    // public override System.Void Close()
    // Offset: 0x4FA9AA8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Close()
    void Close();
  }; // System.Net.TlsStream
  #pragma pack(pop)
  static check_size<sizeof(TlsStream), 88 + sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)> __System_Net_TlsStreamSizeCheck;
  static_assert(sizeof(TlsStream) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::TlsStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::TlsStream::AuthenticateAsClient
// Il2CppName: AuthenticateAsClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::TlsStream::*)()>(&System::Net::TlsStream::AuthenticateAsClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "AuthenticateAsClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::BeginAuthenticateAsClient
// Il2CppName: BeginAuthenticateAsClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::TlsStream::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::TlsStream::BeginAuthenticateAsClient)> {
  static const MethodInfo* get() {
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "BeginAuthenticateAsClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncCallback, state});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::EndAuthenticateAsClient
// Il2CppName: EndAuthenticateAsClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::TlsStream::*)(::System::IAsyncResult*)>(&System::Net::TlsStream::EndAuthenticateAsClient)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "EndAuthenticateAsClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::TlsStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::TlsStream::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::TlsStream::*)(::System::IAsyncResult*)>(&System::Net::TlsStream::EndWrite)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::TlsStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::TlsStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::TlsStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::TlsStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::TlsStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::TlsStream::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::TlsStream::*)(::System::IAsyncResult*)>(&System::Net::TlsStream::EndRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::TlsStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::TlsStream::*)()>(&System::Net::TlsStream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::TlsStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
