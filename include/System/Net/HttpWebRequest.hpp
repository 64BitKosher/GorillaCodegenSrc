// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
// Including type: System.Net.DecompressionMethods
#include "System/Net/DecompressionMethods.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.ValueTuple`5
#include "System/ValueTuple_5.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Skipping declaration: NtlmAuthState because it is already included!
  // Forward declaring type: HttpContinueDelegate
  class HttpContinueDelegate;
  // Forward declaring type: CookieContainer
  class CookieContainer;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: WebRequestStream
  class WebRequestStream;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
  // Forward declaring type: WebCompletionSource
  class WebCompletionSource;
  // Forward declaring type: WebOperation
  class WebOperation;
  // Forward declaring type: ServerCertValidationCallback
  class ServerCertValidationCallback;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
  // Forward declaring type: TransportContext
  class TransportContext;
  // Forward declaring type: WebResponseStream
  class WebResponseStream;
  // Forward declaring type: WebException
  class WebException;
  // Forward declaring type: HttpStatusCode
  struct HttpStatusCode;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: ValueTuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  struct ValueTuple_4;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileTlsProvider
  class MobileTlsProvider;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Net::Cache
namespace System::Net::Cache {
  // Forward declaring type: RequestCachePolicy
  class RequestCachePolicy;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: RemoteCertificateValidationCallback
  class RemoteCertificateValidationCallback;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HttpWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest*, "System.Net", "HttpWebRequest");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x197
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpWebRequest : public ::System::Net::WebRequest {
    public:
    // Nested type: ::System::Net::HttpWebRequest::NtlmAuthState
    struct NtlmAuthState;
    // Nested type: ::System::Net::HttpWebRequest::AuthorizationState
    struct AuthorizationState;
    // Nested type: ::System::Net::HttpWebRequest::$$c__241_1<T>
    template<typename T>
    class $$c__241_1;
    // Nested type: ::System::Net::HttpWebRequest::$RunWithTimeoutWorker$d__241_1<T>
    template<typename T>
    struct $RunWithTimeoutWorker$d__241_1;
    // Nested type: ::System::Net::HttpWebRequest::$MyGetResponseAsync$d__243
    struct $MyGetResponseAsync$d__243;
    // Nested type: ::System::Net::HttpWebRequest::$GetResponseFromData$d__244
    struct $GetResponseFromData$d__244;
    // Nested type: ::System::Net::HttpWebRequest::$$GetRewriteHandler$b__271_0$d
    struct $$GetRewriteHandler$b__271_0$d;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.HttpWebRequest/NtlmAuthState
    // [TokenAttribute] Offset: FFFFFFFF
    struct NtlmAuthState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NtlmAuthState
      constexpr NtlmAuthState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpWebRequest/NtlmAuthState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.HttpWebRequest/NtlmAuthState None
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_None();
      // Set static field: static public System.Net.HttpWebRequest/NtlmAuthState None
      static void _set_None(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/NtlmAuthState Challenge
      static constexpr const int Challenge = 1;
      // Get static field: static public System.Net.HttpWebRequest/NtlmAuthState Challenge
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Challenge();
      // Set static field: static public System.Net.HttpWebRequest/NtlmAuthState Challenge
      static void _set_Challenge(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/NtlmAuthState Response
      static constexpr const int Response = 2;
      // Get static field: static public System.Net.HttpWebRequest/NtlmAuthState Response
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Response();
      // Set static field: static public System.Net.HttpWebRequest/NtlmAuthState Response
      static void _set_Response(::System::Net::HttpWebRequest::NtlmAuthState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.HttpWebRequest/NtlmAuthState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::NtlmAuthState), 0 + sizeof(int)> __System_Net_HttpWebRequest_NtlmAuthStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::NtlmAuthState) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Net.HttpWebRequest/AuthorizationState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AuthorizationState/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly System.Net.HttpWebRequest request
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::HttpWebRequest* request;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
      // private readonly System.Boolean isProxy
      // Size: 0x1
      // Offset: 0x8
      bool isProxy;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Boolean isCompleted
      // Size: 0x1
      // Offset: 0x9
      bool isCompleted;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isCompleted and: ntlm_auth_state
      char __padding2[0x2] = {};
      // private System.Net.HttpWebRequest/NtlmAuthState ntlm_auth_state
      // Size: 0x4
      // Offset: 0xC
      ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest::NtlmAuthState) == 0x4);
      public:
      // Creating value type constructor for type: AuthorizationState
      constexpr AuthorizationState(::System::Net::HttpWebRequest* request_ = {}, bool isProxy_ = {}, bool isCompleted_ = {}, ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state_ = {}) noexcept : request{request_}, isProxy{isProxy_}, isCompleted{isCompleted_}, ntlm_auth_state{ntlm_auth_state_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly System.Net.HttpWebRequest request
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_request();
      // Get instance field reference: private readonly System.Boolean isProxy
      [[deprecated("Use field access instead!")]] bool& dyn_isProxy();
      // Get instance field reference: private System.Boolean isCompleted
      [[deprecated("Use field access instead!")]] bool& dyn_isCompleted();
      // Get instance field reference: private System.Net.HttpWebRequest/NtlmAuthState ntlm_auth_state
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::NtlmAuthState& dyn_ntlm_auth_state();
      // public System.Boolean get_IsCompleted()
      // Offset: 0x4EA5258
      bool get_IsCompleted();
      // public System.Net.HttpWebRequest/NtlmAuthState get_NtlmAuthState()
      // Offset: 0x4EA5260
      ::System::Net::HttpWebRequest::NtlmAuthState get_NtlmAuthState();
      // public System.Boolean get_IsNtlmAuthenticated()
      // Offset: 0x4EA5268
      bool get_IsNtlmAuthenticated();
      // public System.Void .ctor(System.Net.HttpWebRequest request, System.Boolean isProxy)
      // Offset: 0x4EA5288
      AuthorizationState(::System::Net::HttpWebRequest* request, bool isProxy);
      // public System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
      // Offset: 0x4EA52B8
      bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
      // public System.Void Reset()
      // Offset: 0x4EA55D4
      void Reset();
      // public override System.String ToString()
      // Offset: 0x4EA5658
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // System.Net.HttpWebRequest/AuthorizationState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::AuthorizationState), 12 + sizeof(::System::Net::HttpWebRequest::NtlmAuthState)> __System_Net_HttpWebRequest_AuthorizationStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::AuthorizationState) == 0x10);
    public:
    // private System.Uri requestUri
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* requestUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Uri actualUri
    // Size: 0x8
    // Offset: 0x40
    ::System::Uri* actualUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean hostChanged
    // Size: 0x1
    // Offset: 0x48
    bool hostChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowAutoRedirect
    // Size: 0x1
    // Offset: 0x49
    bool allowAutoRedirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowBuffering
    // Size: 0x1
    // Offset: 0x4A
    bool allowBuffering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowReadStreamBuffering
    // Size: 0x1
    // Offset: 0x4B
    bool allowReadStreamBuffering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowReadStreamBuffering and: certificates
    char __padding5[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x50
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.String connectionGroup
    // Size: 0x8
    // Offset: 0x58
    ::StringW connectionGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean haveContentLength
    // Size: 0x1
    // Offset: 0x60
    bool haveContentLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: haveContentLength and: contentLength
    char __padding8[0x7] = {};
    // private System.Int64 contentLength
    // Size: 0x8
    // Offset: 0x68
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Net.HttpContinueDelegate continueDelegate
    // Size: 0x8
    // Offset: 0x70
    ::System::Net::HttpContinueDelegate* continueDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::HttpContinueDelegate*) == 0x8);
    // private System.Net.CookieContainer cookieContainer
    // Size: 0x8
    // Offset: 0x78
    ::System::Net::CookieContainer* cookieContainer;
    // Field size check
    static_assert(sizeof(::System::Net::CookieContainer*) == 0x8);
    // private System.Net.ICredentials credentials
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::ICredentials* credentials;
    // Field size check
    static_assert(sizeof(::System::Net::ICredentials*) == 0x8);
    // private System.Boolean haveResponse
    // Size: 0x1
    // Offset: 0x88
    bool haveResponse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean requestSent
    // Size: 0x1
    // Offset: 0x89
    bool requestSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requestSent and: webHeaders
    char __padding14[0x6] = {};
    // private System.Net.WebHeaderCollection webHeaders
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::WebHeaderCollection* webHeaders;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0x98
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: maxAutoRedirect
    char __padding16[0x3] = {};
    // private System.Int32 maxAutoRedirect
    // Size: 0x4
    // Offset: 0x9C
    int maxAutoRedirect;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String mediaType
    // Size: 0x8
    // Offset: 0xA0
    ::StringW mediaType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String method
    // Size: 0x8
    // Offset: 0xA8
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String initialMethod
    // Size: 0x8
    // Offset: 0xB0
    ::StringW initialMethod;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean pipelined
    // Size: 0x1
    // Offset: 0xB8
    bool pipelined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean preAuthenticate
    // Size: 0x1
    // Offset: 0xB9
    bool preAuthenticate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usedPreAuth
    // Size: 0x1
    // Offset: 0xBA
    bool usedPreAuth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usedPreAuth and: version
    char __padding23[0x5] = {};
    // private System.Version version
    // Size: 0x8
    // Offset: 0xC0
    ::System::Version* version;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Boolean force_version
    // Size: 0x1
    // Offset: 0xC8
    bool force_version;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: force_version and: actualVersion
    char __padding25[0x7] = {};
    // private System.Version actualVersion
    // Size: 0x8
    // Offset: 0xD0
    ::System::Version* actualVersion;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0xD8
    ::System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(::System::Net::IWebProxy*) == 0x8);
    // private System.Boolean sendChunked
    // Size: 0x1
    // Offset: 0xE0
    bool sendChunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendChunked and: servicePoint
    char __padding28[0x7] = {};
    // private System.Net.ServicePoint servicePoint
    // Size: 0x8
    // Offset: 0xE8
    ::System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0xF0
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 continueTimeout
    // Size: 0x4
    // Offset: 0xF4
    int continueTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.WebRequestStream writeStream
    // Size: 0x8
    // Offset: 0xF8
    ::System::Net::WebRequestStream* writeStream;
    // Field size check
    static_assert(sizeof(::System::Net::WebRequestStream*) == 0x8);
    // private System.Net.HttpWebResponse webResponse
    // Size: 0x8
    // Offset: 0x100
    ::System::Net::HttpWebResponse* webResponse;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebResponse*) == 0x8);
    // private System.Net.WebCompletionSource responseTask
    // Size: 0x8
    // Offset: 0x108
    ::System::Net::WebCompletionSource* responseTask;
    // Field size check
    static_assert(sizeof(::System::Net::WebCompletionSource*) == 0x8);
    // private System.Net.WebOperation currentOperation
    // Size: 0x8
    // Offset: 0x110
    ::System::Net::WebOperation* currentOperation;
    // Field size check
    static_assert(sizeof(::System::Net::WebOperation*) == 0x8);
    // private System.Int32 aborted
    // Size: 0x4
    // Offset: 0x118
    int aborted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean gotRequestStream
    // Size: 0x1
    // Offset: 0x11C
    bool gotRequestStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gotRequestStream and: redirects
    char __padding37[0x3] = {};
    // private System.Int32 redirects
    // Size: 0x4
    // Offset: 0x120
    int redirects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean expectContinue
    // Size: 0x1
    // Offset: 0x124
    bool expectContinue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean getResponseCalled
    // Size: 0x1
    // Offset: 0x125
    bool getResponseCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: getResponseCalled and: locker
    char __padding40[0x2] = {};
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x128
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean finished_reading
    // Size: 0x1
    // Offset: 0x130
    bool finished_reading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: finished_reading and: auto_decomp
    char __padding42[0x3] = {};
    // private System.Net.DecompressionMethods auto_decomp
    // Size: 0x4
    // Offset: 0x134
    ::System::Net::DecompressionMethods auto_decomp;
    // Field size check
    static_assert(sizeof(::System::Net::DecompressionMethods) == 0x4);
    // private System.Int32 maxResponseHeadersLength
    // Size: 0x4
    // Offset: 0x138
    int maxResponseHeadersLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 readWriteTimeout
    // Size: 0x4
    // Offset: 0x13C
    int readWriteTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Mono.Net.Security.MobileTlsProvider tlsProvider
    // Size: 0x8
    // Offset: 0x140
    ::Mono::Net::Security::MobileTlsProvider* tlsProvider;
    // Field size check
    static_assert(sizeof(::Mono::Net::Security::MobileTlsProvider*) == 0x8);
    // private Mono.Security.Interface.MonoTlsSettings tlsSettings
    // Size: 0x8
    // Offset: 0x148
    ::Mono::Security::Interface::MonoTlsSettings* tlsSettings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    // private System.Net.ServerCertValidationCallback certValidationCallback
    // Size: 0x8
    // Offset: 0x150
    ::System::Net::ServerCertValidationCallback* certValidationCallback;
    // Field size check
    static_assert(sizeof(::System::Net::ServerCertValidationCallback*) == 0x8);
    // private System.Boolean hostHasPort
    // Size: 0x1
    // Offset: 0x158
    bool hostHasPort;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hostHasPort and: hostUri
    char __padding49[0x7] = {};
    // private System.Uri hostUri
    // Size: 0x8
    // Offset: 0x160
    ::System::Uri* hostUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Net.HttpWebRequest/AuthorizationState auth_state
    // Size: 0x10
    // Offset: 0x168
    ::System::Net::HttpWebRequest::AuthorizationState auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // private System.Net.HttpWebRequest/AuthorizationState proxy_auth_state
    // Size: 0x10
    // Offset: 0x178
    ::System::Net::HttpWebRequest::AuthorizationState proxy_auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // System.Func`2<System.IO.Stream,System.Threading.Tasks.Task> ResendContentFactory
    // Size: 0x8
    // Offset: 0x188
    ::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>* ResendContentFactory;
    // Field size check
    static_assert(sizeof(::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>*) == 0x8);
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x190
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ThrowOnError>k__BackingField
    // Size: 0x1
    // Offset: 0x194
    bool ThrowOnError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean unsafe_auth_blah
    // Size: 0x1
    // Offset: 0x195
    bool unsafe_auth_blah;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReuseConnection>k__BackingField
    // Size: 0x1
    // Offset: 0x196
    bool ReuseConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Int32 defaultMaxResponseHeadersLength
    static int _get_defaultMaxResponseHeadersLength();
    // Set static field: static private System.Int32 defaultMaxResponseHeadersLength
    static void _set_defaultMaxResponseHeadersLength(int value);
    // Get static field: static private System.Int32 defaultMaximumErrorResponseLength
    static int _get_defaultMaximumErrorResponseLength();
    // Set static field: static private System.Int32 defaultMaximumErrorResponseLength
    static void _set_defaultMaximumErrorResponseLength(int value);
    // Get static field: static private System.Net.Cache.RequestCachePolicy defaultCachePolicy
    static ::System::Net::Cache::RequestCachePolicy* _get_defaultCachePolicy();
    // Set static field: static private System.Net.Cache.RequestCachePolicy defaultCachePolicy
    static void _set_defaultCachePolicy(::System::Net::Cache::RequestCachePolicy* value);
    // Get instance field reference: private System.Uri requestUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_requestUri();
    // Get instance field reference: private System.Uri actualUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_actualUri();
    // Get instance field reference: private System.Boolean hostChanged
    [[deprecated("Use field access instead!")]] bool& dyn_hostChanged();
    // Get instance field reference: private System.Boolean allowAutoRedirect
    [[deprecated("Use field access instead!")]] bool& dyn_allowAutoRedirect();
    // Get instance field reference: private System.Boolean allowBuffering
    [[deprecated("Use field access instead!")]] bool& dyn_allowBuffering();
    // Get instance field reference: private System.Boolean allowReadStreamBuffering
    [[deprecated("Use field access instead!")]] bool& dyn_allowReadStreamBuffering();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn_certificates();
    // Get instance field reference: private System.String connectionGroup
    [[deprecated("Use field access instead!")]] ::StringW& dyn_connectionGroup();
    // Get instance field reference: private System.Boolean haveContentLength
    [[deprecated("Use field access instead!")]] bool& dyn_haveContentLength();
    // Get instance field reference: private System.Int64 contentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn_contentLength();
    // Get instance field reference: private System.Net.HttpContinueDelegate continueDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::HttpContinueDelegate*& dyn_continueDelegate();
    // Get instance field reference: private System.Net.CookieContainer cookieContainer
    [[deprecated("Use field access instead!")]] ::System::Net::CookieContainer*& dyn_cookieContainer();
    // Get instance field reference: private System.Net.ICredentials credentials
    [[deprecated("Use field access instead!")]] ::System::Net::ICredentials*& dyn_credentials();
    // Get instance field reference: private System.Boolean haveResponse
    [[deprecated("Use field access instead!")]] bool& dyn_haveResponse();
    // Get instance field reference: private System.Boolean requestSent
    [[deprecated("Use field access instead!")]] bool& dyn_requestSent();
    // Get instance field reference: private System.Net.WebHeaderCollection webHeaders
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn_webHeaders();
    // Get instance field reference: private System.Boolean keepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_keepAlive();
    // Get instance field reference: private System.Int32 maxAutoRedirect
    [[deprecated("Use field access instead!")]] int& dyn_maxAutoRedirect();
    // Get instance field reference: private System.String mediaType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mediaType();
    // Get instance field reference: private System.String method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_method();
    // Get instance field reference: private System.String initialMethod
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialMethod();
    // Get instance field reference: private System.Boolean pipelined
    [[deprecated("Use field access instead!")]] bool& dyn_pipelined();
    // Get instance field reference: private System.Boolean preAuthenticate
    [[deprecated("Use field access instead!")]] bool& dyn_preAuthenticate();
    // Get instance field reference: private System.Boolean usedPreAuth
    [[deprecated("Use field access instead!")]] bool& dyn_usedPreAuth();
    // Get instance field reference: private System.Version version
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_version();
    // Get instance field reference: private System.Boolean force_version
    [[deprecated("Use field access instead!")]] bool& dyn_force_version();
    // Get instance field reference: private System.Version actualVersion
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_actualVersion();
    // Get instance field reference: private System.Net.IWebProxy proxy
    [[deprecated("Use field access instead!")]] ::System::Net::IWebProxy*& dyn_proxy();
    // Get instance field reference: private System.Boolean sendChunked
    [[deprecated("Use field access instead!")]] bool& dyn_sendChunked();
    // Get instance field reference: private System.Net.ServicePoint servicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_servicePoint();
    // Get instance field reference: private System.Int32 timeout
    [[deprecated("Use field access instead!")]] int& dyn_timeout();
    // Get instance field reference: private System.Int32 continueTimeout
    [[deprecated("Use field access instead!")]] int& dyn_continueTimeout();
    // Get instance field reference: private System.Net.WebRequestStream writeStream
    [[deprecated("Use field access instead!")]] ::System::Net::WebRequestStream*& dyn_writeStream();
    // Get instance field reference: private System.Net.HttpWebResponse webResponse
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebResponse*& dyn_webResponse();
    // Get instance field reference: private System.Net.WebCompletionSource responseTask
    [[deprecated("Use field access instead!")]] ::System::Net::WebCompletionSource*& dyn_responseTask();
    // Get instance field reference: private System.Net.WebOperation currentOperation
    [[deprecated("Use field access instead!")]] ::System::Net::WebOperation*& dyn_currentOperation();
    // Get instance field reference: private System.Int32 aborted
    [[deprecated("Use field access instead!")]] int& dyn_aborted();
    // Get instance field reference: private System.Boolean gotRequestStream
    [[deprecated("Use field access instead!")]] bool& dyn_gotRequestStream();
    // Get instance field reference: private System.Int32 redirects
    [[deprecated("Use field access instead!")]] int& dyn_redirects();
    // Get instance field reference: private System.Boolean expectContinue
    [[deprecated("Use field access instead!")]] bool& dyn_expectContinue();
    // Get instance field reference: private System.Boolean getResponseCalled
    [[deprecated("Use field access instead!")]] bool& dyn_getResponseCalled();
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Boolean finished_reading
    [[deprecated("Use field access instead!")]] bool& dyn_finished_reading();
    // Get instance field reference: private System.Net.DecompressionMethods auto_decomp
    [[deprecated("Use field access instead!")]] ::System::Net::DecompressionMethods& dyn_auto_decomp();
    // Get instance field reference: private System.Int32 maxResponseHeadersLength
    [[deprecated("Use field access instead!")]] int& dyn_maxResponseHeadersLength();
    // Get instance field reference: private System.Int32 readWriteTimeout
    [[deprecated("Use field access instead!")]] int& dyn_readWriteTimeout();
    // Get instance field reference: private Mono.Net.Security.MobileTlsProvider tlsProvider
    [[deprecated("Use field access instead!")]] ::Mono::Net::Security::MobileTlsProvider*& dyn_tlsProvider();
    // Get instance field reference: private Mono.Security.Interface.MonoTlsSettings tlsSettings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsSettings*& dyn_tlsSettings();
    // Get instance field reference: private System.Net.ServerCertValidationCallback certValidationCallback
    [[deprecated("Use field access instead!")]] ::System::Net::ServerCertValidationCallback*& dyn_certValidationCallback();
    // Get instance field reference: private System.Boolean hostHasPort
    [[deprecated("Use field access instead!")]] bool& dyn_hostHasPort();
    // Get instance field reference: private System.Uri hostUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_hostUri();
    // Get instance field reference: private System.Net.HttpWebRequest/AuthorizationState auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_auth_state();
    // Get instance field reference: private System.Net.HttpWebRequest/AuthorizationState proxy_auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_proxy_auth_state();
    // Get instance field reference: System.Func`2<System.IO.Stream,System.Threading.Tasks.Task> ResendContentFactory
    [[deprecated("Use field access instead!")]] ::System::Func_2<::System::IO::Stream*, ::System::Threading::Tasks::Task*>*& dyn_ResendContentFactory();
    // Get instance field reference: readonly System.Int32 ID
    [[deprecated("Use field access instead!")]] int& dyn_ID();
    // Get instance field reference: private System.Boolean <ThrowOnError>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ThrowOnError$k__BackingField();
    // Get instance field reference: private System.Boolean unsafe_auth_blah
    [[deprecated("Use field access instead!")]] bool& dyn_unsafe_auth_blah();
    // Get instance field reference: private System.Boolean <ReuseConnection>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReuseConnection$k__BackingField();
    // public System.Void .ctor(System.Uri uri)
    // Offset: 0x501C580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(uri)));
    }
    // System.Void .ctor(System.Uri uri, Mono.Net.Security.MobileTlsProvider tlsProvider, Mono.Security.Interface.MonoTlsSettings settings)
    // Offset: 0x501CAA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Uri* uri, ::Mono::Net::Security::MobileTlsProvider* tlsProvider, ::Mono::Security::Interface::MonoTlsSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(uri, tlsProvider, settings)));
    }
    // private System.Void ResetAuthorization()
    // Offset: 0x501CA34
    void ResetAuthorization();
    // private System.Void SetSpecialHeaders(System.String HeaderName, System.String value)
    // Offset: 0x501CC4C
    void SetSpecialHeaders(::StringW HeaderName, ::StringW value);
    // public System.String get_Accept()
    // Offset: 0x501CD0C
    ::StringW get_Accept();
    // public System.Void set_Accept(System.String value)
    // Offset: 0x501CD60
    void set_Accept(::StringW value);
    // public System.Uri get_Address()
    // Offset: 0x501CE1C
    ::System::Uri* get_Address();
    // System.Void set_Address(System.Uri value)
    // Offset: 0x501CE24
    void set_Address(::System::Uri* value);
    // public System.Boolean get_AllowAutoRedirect()
    // Offset: 0x501CE2C
    bool get_AllowAutoRedirect();
    // public System.Void set_AllowAutoRedirect(System.Boolean value)
    // Offset: 0x501CE34
    void set_AllowAutoRedirect(bool value);
    // public System.Boolean get_AllowWriteStreamBuffering()
    // Offset: 0x501CE40
    bool get_AllowWriteStreamBuffering();
    // public System.Void set_AllowWriteStreamBuffering(System.Boolean value)
    // Offset: 0x501CE48
    void set_AllowWriteStreamBuffering(bool value);
    // public System.Boolean get_AllowReadStreamBuffering()
    // Offset: 0x501CE54
    bool get_AllowReadStreamBuffering();
    // public System.Void set_AllowReadStreamBuffering(System.Boolean value)
    // Offset: 0x501CE5C
    void set_AllowReadStreamBuffering(bool value);
    // static private System.Exception GetMustImplement()
    // Offset: 0x501CE68
    static ::System::Exception* GetMustImplement();
    // public System.Net.DecompressionMethods get_AutomaticDecompression()
    // Offset: 0x501CEBC
    ::System::Net::DecompressionMethods get_AutomaticDecompression();
    // public System.Void set_AutomaticDecompression(System.Net.DecompressionMethods value)
    // Offset: 0x501CEC4
    void set_AutomaticDecompression(::System::Net::DecompressionMethods value);
    // System.Boolean get_InternalAllowBuffering()
    // Offset: 0x501CEE8
    bool get_InternalAllowBuffering();
    // private System.Boolean get_MethodWithBuffer()
    // Offset: 0x501CEFC
    bool get_MethodWithBuffer();
    // Mono.Net.Security.MobileTlsProvider get_TlsProvider()
    // Offset: 0x501CFF8
    ::Mono::Net::Security::MobileTlsProvider* get_TlsProvider();
    // Mono.Security.Interface.MonoTlsSettings get_TlsSettings()
    // Offset: 0x501D000
    ::Mono::Security::Interface::MonoTlsSettings* get_TlsSettings();
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x501D008
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
    // Offset: 0x501D078
    void set_ClientCertificates(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* value);
    // public System.String get_Connection()
    // Offset: 0x501D0D4
    ::StringW get_Connection();
    // public System.Void set_Connection(System.String value)
    // Offset: 0x501D128
    void set_Connection(::StringW value);
    // System.Void set_InternalContentLength(System.Int64 value)
    // Offset: 0x501D358
    void set_InternalContentLength(int64_t value);
    // System.Boolean get_ThrowOnError()
    // Offset: 0x501D360
    bool get_ThrowOnError();
    // System.Void set_ThrowOnError(System.Boolean value)
    // Offset: 0x501D368
    void set_ThrowOnError(bool value);
    // public System.Net.HttpContinueDelegate get_ContinueDelegate()
    // Offset: 0x501D420
    ::System::Net::HttpContinueDelegate* get_ContinueDelegate();
    // public System.Void set_ContinueDelegate(System.Net.HttpContinueDelegate value)
    // Offset: 0x501D428
    void set_ContinueDelegate(::System::Net::HttpContinueDelegate* value);
    // public System.Net.CookieContainer get_CookieContainer()
    // Offset: 0x501D430
    ::System::Net::CookieContainer* get_CookieContainer();
    // public System.Void set_CookieContainer(System.Net.CookieContainer value)
    // Offset: 0x501D438
    void set_CookieContainer(::System::Net::CookieContainer* value);
    // public System.DateTime get_Date()
    // Offset: 0x501D450
    ::System::DateTime get_Date();
    // public System.Void set_Date(System.DateTime value)
    // Offset: 0x501D568
    void set_Date(::System::DateTime value);
    // private System.Void SetDateHeaderHelper(System.String headerName, System.DateTime dateTime)
    // Offset: 0x501D5C0
    void SetDateHeaderHelper(::StringW headerName, ::System::DateTime dateTime);
    // static public System.Int32 get_DefaultMaximumErrorResponseLength()
    // Offset: 0x501D658
    static int get_DefaultMaximumErrorResponseLength();
    // static public System.Void set_DefaultMaximumErrorResponseLength(System.Int32 value)
    // Offset: 0x501D6B0
    static void set_DefaultMaximumErrorResponseLength(int value);
    // public System.String get_Expect()
    // Offset: 0x501D70C
    ::StringW get_Expect();
    // public System.Void set_Expect(System.String value)
    // Offset: 0x501D760
    void set_Expect(::StringW value);
    // public System.Boolean get_HaveResponse()
    // Offset: 0x501D888
    bool get_HaveResponse();
    // public System.String get_Host()
    // Offset: 0x501D9A4
    ::StringW get_Host();
    // public System.Void set_Host(System.String value)
    // Offset: 0x501DAAC
    void set_Host(::StringW value);
    // private System.Boolean TryGetHostUri(System.String hostName, out System.Uri hostUri)
    // Offset: 0x501DC20
    bool TryGetHostUri(::StringW hostName, ByRef<::System::Uri*> hostUri);
    // public System.DateTime get_IfModifiedSince()
    // Offset: 0x501DCF0
    ::System::DateTime get_IfModifiedSince();
    // public System.Void set_IfModifiedSince(System.DateTime value)
    // Offset: 0x501DE34
    void set_IfModifiedSince(::System::DateTime value);
    // public System.Boolean get_KeepAlive()
    // Offset: 0x501DEE4
    bool get_KeepAlive();
    // public System.Void set_KeepAlive(System.Boolean value)
    // Offset: 0x501DEEC
    void set_KeepAlive(bool value);
    // public System.Int32 get_MaximumAutomaticRedirections()
    // Offset: 0x501DEF8
    int get_MaximumAutomaticRedirections();
    // public System.Void set_MaximumAutomaticRedirections(System.Int32 value)
    // Offset: 0x501DF00
    void set_MaximumAutomaticRedirections(int value);
    // public System.Int32 get_MaximumResponseHeadersLength()
    // Offset: 0x501DF7C
    int get_MaximumResponseHeadersLength();
    // public System.Void set_MaximumResponseHeadersLength(System.Int32 value)
    // Offset: 0x501DF84
    void set_MaximumResponseHeadersLength(int value);
    // static public System.Int32 get_DefaultMaximumResponseHeadersLength()
    // Offset: 0x501E00C
    static int get_DefaultMaximumResponseHeadersLength();
    // static public System.Void set_DefaultMaximumResponseHeadersLength(System.Int32 value)
    // Offset: 0x501E064
    static void set_DefaultMaximumResponseHeadersLength(int value);
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0x501E0C0
    int get_ReadWriteTimeout();
    // public System.Void set_ReadWriteTimeout(System.Int32 value)
    // Offset: 0x501E0C8
    void set_ReadWriteTimeout(int value);
    // public System.Int32 get_ContinueTimeout()
    // Offset: 0x501E158
    int get_ContinueTimeout();
    // public System.Void set_ContinueTimeout(System.Int32 value)
    // Offset: 0x501E160
    void set_ContinueTimeout(int value);
    // public System.String get_MediaType()
    // Offset: 0x501E1E8
    ::StringW get_MediaType();
    // public System.Void set_MediaType(System.String value)
    // Offset: 0x501E1F0
    void set_MediaType(::StringW value);
    // public System.Boolean get_Pipelined()
    // Offset: 0x501E44C
    bool get_Pipelined();
    // public System.Void set_Pipelined(System.Boolean value)
    // Offset: 0x501E454
    void set_Pipelined(bool value);
    // public System.Version get_ProtocolVersion()
    // Offset: 0x501E474
    ::System::Version* get_ProtocolVersion();
    // public System.Void set_ProtocolVersion(System.Version value)
    // Offset: 0x501E47C
    void set_ProtocolVersion(::System::Version* value);
    // public System.String get_Referer()
    // Offset: 0x501E718
    ::StringW get_Referer();
    // public System.Void set_Referer(System.String value)
    // Offset: 0x501E76C
    void set_Referer(::StringW value);
    // public System.Boolean get_SendChunked()
    // Offset: 0x501E810
    bool get_SendChunked();
    // public System.Void set_SendChunked(System.Boolean value)
    // Offset: 0x501E818
    void set_SendChunked(bool value);
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x501E83C
    ::System::Net::ServicePoint* get_ServicePoint();
    // System.Net.ServicePoint get_ServicePointNoLock()
    // Offset: 0x501E840
    ::System::Net::ServicePoint* get_ServicePointNoLock();
    // public System.Boolean get_SupportsCookieContainer()
    // Offset: 0x501E848
    bool get_SupportsCookieContainer();
    // public System.String get_TransferEncoding()
    // Offset: 0x501E8B8
    ::StringW get_TransferEncoding();
    // public System.Void set_TransferEncoding(System.String value)
    // Offset: 0x501E90C
    void set_TransferEncoding(::StringW value);
    // public System.String get_UserAgent()
    // Offset: 0x501EBA0
    ::StringW get_UserAgent();
    // public System.Void set_UserAgent(System.String value)
    // Offset: 0x501EBF4
    void set_UserAgent(::StringW value);
    // public System.Boolean get_UnsafeAuthenticatedConnectionSharing()
    // Offset: 0x501EC50
    bool get_UnsafeAuthenticatedConnectionSharing();
    // public System.Void set_UnsafeAuthenticatedConnectionSharing(System.Boolean value)
    // Offset: 0x501EC58
    void set_UnsafeAuthenticatedConnectionSharing(bool value);
    // System.Boolean get_GotRequestStream()
    // Offset: 0x501EC64
    bool get_GotRequestStream();
    // System.Boolean get_ExpectContinue()
    // Offset: 0x501EC6C
    bool get_ExpectContinue();
    // System.Void set_ExpectContinue(System.Boolean value)
    // Offset: 0x501EC74
    void set_ExpectContinue(bool value);
    // System.Uri get_AuthUri()
    // Offset: 0x501EC80
    ::System::Uri* get_AuthUri();
    // System.Boolean get_ProxyQuery()
    // Offset: 0x501EC88
    bool get_ProxyQuery();
    // System.Net.ServerCertValidationCallback get_ServerCertValidationCallback()
    // Offset: 0x501ECBC
    ::System::Net::ServerCertValidationCallback* get_ServerCertValidationCallback();
    // public System.Net.Security.RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
    // Offset: 0x501ECC4
    ::System::Net::Security::RemoteCertificateValidationCallback* get_ServerCertificateValidationCallback();
    // public System.Void set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback value)
    // Offset: 0x501ECDC
    void set_ServerCertificateValidationCallback(::System::Net::Security::RemoteCertificateValidationCallback* value);
    // System.Net.ServicePoint GetServicePoint()
    // Offset: 0x501E5DC
    ::System::Net::ServicePoint* GetServicePoint();
    // public System.Void AddRange(System.Int32 range)
    // Offset: 0x501ED54
    void AddRange(int range);
    // public System.Void AddRange(System.Int32 from, System.Int32 to)
    // Offset: 0x501F040
    void AddRange(int from, int to);
    // public System.Void AddRange(System.String rangeSpecifier, System.Int32 range)
    // Offset: 0x501F318
    void AddRange(::StringW rangeSpecifier, int range);
    // public System.Void AddRange(System.String rangeSpecifier, System.Int32 from, System.Int32 to)
    // Offset: 0x501F320
    void AddRange(::StringW rangeSpecifier, int from, int to);
    // public System.Void AddRange(System.Int64 range)
    // Offset: 0x501F32C
    void AddRange(int64_t range);
    // public System.Void AddRange(System.Int64 from, System.Int64 to)
    // Offset: 0x501F384
    void AddRange(int64_t from, int64_t to);
    // public System.Void AddRange(System.String rangeSpecifier, System.Int64 range)
    // Offset: 0x501EDAC
    void AddRange(::StringW rangeSpecifier, int64_t range);
    // public System.Void AddRange(System.String rangeSpecifier, System.Int64 from, System.Int64 to)
    // Offset: 0x501F0A0
    void AddRange(::StringW rangeSpecifier, int64_t from, int64_t to);
    // private System.Net.WebOperation SendRequest(System.Boolean redirecting, System.Net.BufferOffsetSize writeBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x501F3E4
    ::System::Net::WebOperation* SendRequest(bool redirecting, ::System::Net::BufferOffsetSize* writeBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.IO.Stream> MyGetRequestStreamAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x501F618
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* MyGetRequestStreamAsync(::System::Threading::CancellationToken cancellationToken);
    // public System.IO.Stream GetRequestStream(out System.Net.TransportContext context)
    // Offset: 0x501FDC4
    ::System::IO::Stream* GetRequestStream(ByRef<::System::Net::TransportContext*> context);
    // static System.Threading.Tasks.Task`1<T> RunWithTimeout(System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> func, System.Int32 timeout, System.Action abort, System.Func`1<System.Boolean> aborted, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Threading::Tasks::Task_1<T>* RunWithTimeout(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* func, int timeout, ::System::Action* abort, ::System::Func_1<bool>* aborted, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::RunWithTimeout");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net", "HttpWebRequest", "RunWithTimeout", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(abort), ::il2cpp_utils::ExtractType(aborted), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, func, timeout, abort, aborted, cancellationToken);
    }
    // static private System.Threading.Tasks.Task`1<T> RunWithTimeoutWorker(System.Threading.Tasks.Task`1<T> workerTask, System.Int32 timeout, System.Action abort, System.Func`1<System.Boolean> aborted, System.Threading.CancellationTokenSource cts)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Threading::Tasks::Task_1<T>* RunWithTimeoutWorker(::System::Threading::Tasks::Task_1<T>* workerTask, int timeout, ::System::Action* abort, ::System::Func_1<bool>* aborted, ::System::Threading::CancellationTokenSource* cts) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::RunWithTimeoutWorker");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net", "HttpWebRequest", "RunWithTimeoutWorker", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workerTask), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(abort), ::il2cpp_utils::ExtractType(aborted), ::il2cpp_utils::ExtractType(cts)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, workerTask, timeout, abort, aborted, cts);
    }
    // private System.Threading.Tasks.Task`1<T> RunWithTimeout(System.Func`2<System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> func)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* RunWithTimeout(::System::Func_2<::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* func) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::RunWithTimeout");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunWithTimeout", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, func);
    }
    // private System.Threading.Tasks.Task`1<System.Net.HttpWebResponse> MyGetResponseAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x501FE94
    ::System::Threading::Tasks::Task_1<::System::Net::HttpWebResponse*>* MyGetResponseAsync(::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.ValueTuple`5<System.Net.HttpWebResponse,System.Boolean,System.Boolean,System.Net.BufferOffsetSize,System.Net.WebOperation>> GetResponseFromData(System.Net.WebResponseStream stream, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x501FFC8
    ::System::Threading::Tasks::Task_1<::System::ValueTuple_5<::System::Net::HttpWebResponse*, bool, bool, ::System::Net::BufferOffsetSize*, ::System::Net::WebOperation*>>* GetResponseFromData(::System::Net::WebResponseStream* stream, ::System::Threading::CancellationToken cancellationToken);
    // static System.Exception FlattenException(System.Exception e)
    // Offset: 0x5020118
    static ::System::Exception* FlattenException(::System::Exception* e);
    // private System.Net.WebException GetWebException(System.Exception e)
    // Offset: 0x501FC40
    ::System::Net::WebException* GetWebException(::System::Exception* e);
    // static private System.Net.WebException GetWebException(System.Exception e, System.Boolean aborted)
    // Offset: 0x50201D4
    static ::System::Net::WebException* GetWebException(::System::Exception* e, bool aborted);
    // static System.Net.WebException CreateRequestAbortedException()
    // Offset: 0x501F9AC
    static ::System::Net::WebException* CreateRequestAbortedException();
    // public System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult, out System.Net.TransportContext context)
    // Offset: 0x5020608
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult, ByRef<::System::Net::TransportContext*> context);
    // System.Boolean get_FinishedReading()
    // Offset: 0x5020794
    bool get_FinishedReading();
    // System.Void set_FinishedReading(System.Boolean value)
    // Offset: 0x502079C
    void set_FinishedReading(bool value);
    // System.Boolean get_Aborted()
    // Offset: 0x501F984
    bool get_Aborted();
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x50208C4
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // private System.Void CheckRequestStarted()
    // Offset: 0x501CDC0
    void CheckRequestStarted();
    // System.Void DoContinueDelegate(System.Int32 statusCode, System.Net.WebHeaderCollection headers)
    // Offset: 0x5020934
    void DoContinueDelegate(int statusCode, ::System::Net::WebHeaderCollection* headers);
    // private System.Void RewriteRedirectToGet()
    // Offset: 0x5020950
    void RewriteRedirectToGet();
    // private System.Boolean Redirect(System.Net.HttpStatusCode code, System.Net.WebResponse response)
    // Offset: 0x50209D4
    bool Redirect(::System::Net::HttpStatusCode code, ::System::Net::WebResponse* response);
    // private System.String GetHeaders()
    // Offset: 0x5020EAC
    ::StringW GetHeaders();
    // private System.Void DoPreAuthenticate()
    // Offset: 0x5021504
    void DoPreAuthenticate();
    // System.Byte[] GetRequestHeaders()
    // Offset: 0x5021700
    ::ArrayW<uint8_t> GetRequestHeaders();
    // private System.ValueTuple`2<System.Net.WebOperation,System.Boolean> HandleNtlmAuth(System.Net.WebResponseStream stream, System.Net.HttpWebResponse response, System.Net.BufferOffsetSize writeBuffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x5021A48
    ::System::ValueTuple_2<::System::Net::WebOperation*, bool> HandleNtlmAuth(::System::Net::WebResponseStream* stream, ::System::Net::HttpWebResponse* response, ::System::Net::BufferOffsetSize* writeBuffer, ::System::Threading::CancellationToken cancellationToken);
    // private System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
    // Offset: 0x5021CE0
    bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
    // private System.ValueTuple`2<System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize>,System.Net.WebException> GetRewriteHandler(System.Net.HttpWebResponse response, System.Boolean redirect)
    // Offset: 0x5021D00
    ::System::ValueTuple_2<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> GetRewriteHandler(::System::Net::HttpWebResponse* response, bool redirect);
    // private System.ValueTuple`4<System.Boolean,System.Boolean,System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize>,System.Net.WebException> CheckFinalStatus(System.Net.HttpWebResponse response)
    // Offset: 0x5021F00
    ::System::ValueTuple_4<bool, bool, ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> CheckFinalStatus(::System::Net::HttpWebResponse* response);
    // System.Boolean get_ReuseConnection()
    // Offset: 0x50223C4
    bool get_ReuseConnection();
    // System.Void set_ReuseConnection(System.Boolean value)
    // Offset: 0x50223CC
    void set_ReuseConnection(bool value);
    // static System.Text.StringBuilder GenerateConnectionGroup(System.String connectionGroupName, System.Boolean unsafeConnectionGroup, System.Boolean isInternalGroup)
    // Offset: 0x50223D8
    static ::System::Text::StringBuilder* GenerateConnectionGroup(::StringW connectionGroupName, bool unsafeConnectionGroup, bool isInternalGroup);
    // private System.Boolean <RunWithTimeout>b__242_0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool $RunWithTimeout$b__242_0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::<RunWithTimeout>b__242_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunWithTimeout>b__242_0", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method);
    }
    // private System.Threading.Tasks.Task`1<System.Net.BufferOffsetSize> <GetRewriteHandler>b__271_0()
    // Offset: 0x50224B4
    ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>* $GetRewriteHandler$b__271_0();
    // static private System.Void .cctor()
    // Offset: 0x501C9AC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x501CAE4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(serializationInfo, streamingContext)));
    }
    // public override System.String get_ConnectionGroupName()
    // Offset: 0x501D2B4
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_ConnectionGroupName()
    ::StringW get_ConnectionGroupName();
    // public override System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x501D2BC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ConnectionGroupName(System.String value)
    void set_ConnectionGroupName(::StringW value);
    // public override System.Int64 get_ContentLength()
    // Offset: 0x501D2C4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x501D2CC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.String get_ContentType()
    // Offset: 0x501D374
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_ContentType()
    ::StringW get_ContentType();
    // public override System.Void set_ContentType(System.String value)
    // Offset: 0x501D3C8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentType(System.String value)
    void set_ContentType(::StringW value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0x501D440
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    ::System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x501D448
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(::System::Net::ICredentials* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x501D890
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    ::System::Net::WebHeaderCollection* get_Headers();
    // public override System.Void set_Headers(System.Net.WebHeaderCollection value)
    // Offset: 0x501D898
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Headers(System.Net.WebHeaderCollection value)
    void set_Headers(::System::Net::WebHeaderCollection* value);
    // public override System.String get_Method()
    // Offset: 0x501E1F8
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::StringW get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0x501E200
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::StringW value);
    // public override System.Boolean get_PreAuthenticate()
    // Offset: 0x501E460
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_PreAuthenticate()
    bool get_PreAuthenticate();
    // public override System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x501E468
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_PreAuthenticate(System.Boolean value)
    void set_PreAuthenticate(bool value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0x501E590
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    ::System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x501E598
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(::System::Net::IWebProxy* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0x501E808
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    ::System::Uri* get_RequestUri();
    // public override System.Int32 get_Timeout()
    // Offset: 0x501E850
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // public override System.Void set_Timeout(System.Int32 value)
    // Offset: 0x501E858
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Timeout(System.Int32 value)
    void set_Timeout(int value);
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0x501EAA8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // public override System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x501EB20
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_UseDefaultCredentials(System.Boolean value)
    void set_UseDefaultCredentials(bool value);
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x501FA68
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetRequestStream(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x501FB20
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult);
    // public override System.IO.Stream GetRequestStream()
    // Offset: 0x501FCC4
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::GetRequestStream()
    ::System::IO::Stream* GetRequestStream();
    // public override System.Threading.Tasks.Task`1<System.IO.Stream> GetRequestStreamAsync()
    // Offset: 0x501FDFC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Threading.Tasks.Task`1<System.IO.Stream> WebRequest::GetRequestStreamAsync()
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* GetRequestStreamAsync();
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x5020378
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetResponse(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x50204E8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    ::System::Net::WebResponse* EndGetResponse(::System::IAsyncResult* asyncResult);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0x5020694
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    ::System::Net::WebResponse* GetResponse();
    // public override System.Void Abort()
    // Offset: 0x50207A8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // protected override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x50208FC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // public System.Void .ctor()
    // Offset: 0x50225C8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>()));
    }
  }; // System.Net.HttpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(HttpWebRequest), 406 + sizeof(bool)> __System_Net_HttpWebRequestSizeCheck;
  static_assert(sizeof(HttpWebRequest) == 0x197);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::AuthorizationState, "System.Net", "HttpWebRequest/AuthorizationState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::NtlmAuthState, "System.Net", "HttpWebRequest/NtlmAuthState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::ResetAuthorization
// Il2CppName: ResetAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::ResetAuthorization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "ResetAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetSpecialHeaders
// Il2CppName: SetSpecialHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, ::StringW)>(&System::Net::HttpWebRequest::SetSpecialHeaders)> {
  static const MethodInfo* get() {
    static auto* HeaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetSpecialHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HeaderName, value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Accept
// Il2CppName: get_Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Accept)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Accept
// Il2CppName: set_Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Accept)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Address
// Il2CppName: set_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Uri*)>(&System::Net::HttpWebRequest::set_Address)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AllowAutoRedirect
// Il2CppName: get_AllowAutoRedirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AllowAutoRedirect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AllowAutoRedirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AllowAutoRedirect
// Il2CppName: set_AllowAutoRedirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_AllowAutoRedirect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AllowAutoRedirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AllowWriteStreamBuffering
// Il2CppName: get_AllowWriteStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AllowWriteStreamBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AllowWriteStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AllowWriteStreamBuffering
// Il2CppName: set_AllowWriteStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_AllowWriteStreamBuffering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AllowWriteStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AllowReadStreamBuffering
// Il2CppName: get_AllowReadStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AllowReadStreamBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AllowReadStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AllowReadStreamBuffering
// Il2CppName: set_AllowReadStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_AllowReadStreamBuffering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AllowReadStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetMustImplement
// Il2CppName: GetMustImplement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Net::HttpWebRequest::GetMustImplement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetMustImplement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AutomaticDecompression
// Il2CppName: get_AutomaticDecompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::DecompressionMethods (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AutomaticDecompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AutomaticDecompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AutomaticDecompression
// Il2CppName: set_AutomaticDecompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::DecompressionMethods)>(&System::Net::HttpWebRequest::set_AutomaticDecompression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "DecompressionMethods")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AutomaticDecompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_InternalAllowBuffering
// Il2CppName: get_InternalAllowBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_InternalAllowBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_InternalAllowBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MethodWithBuffer
// Il2CppName: get_MethodWithBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MethodWithBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MethodWithBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsProvider
// Il2CppName: get_TlsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Net::Security::MobileTlsProvider* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsSettings
// Il2CppName: get_TlsSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::MonoTlsSettings* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ClientCertificates
// Il2CppName: set_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&System::Net::HttpWebRequest::set_ClientCertificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Connection
// Il2CppName: get_Connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Connection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Connection
// Il2CppName: set_Connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Connection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_InternalContentLength
// Il2CppName: set_InternalContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_InternalContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_InternalContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ThrowOnError
// Il2CppName: get_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ThrowOnError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ThrowOnError
// Il2CppName: set_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ThrowOnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContinueDelegate
// Il2CppName: get_ContinueDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpContinueDelegate* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContinueDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContinueDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContinueDelegate
// Il2CppName: set_ContinueDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::HttpContinueDelegate*)>(&System::Net::HttpWebRequest::set_ContinueDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "HttpContinueDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContinueDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_CookieContainer
// Il2CppName: get_CookieContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CookieContainer* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_CookieContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_CookieContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_CookieContainer
// Il2CppName: set_CookieContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::CookieContainer*)>(&System::Net::HttpWebRequest::set_CookieContainer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "CookieContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_CookieContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Date
// Il2CppName: get_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Date)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Date
// Il2CppName: set_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::DateTime)>(&System::Net::HttpWebRequest::set_Date)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetDateHeaderHelper
// Il2CppName: SetDateHeaderHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, ::System::DateTime)>(&System::Net::HttpWebRequest::SetDateHeaderHelper)> {
  static const MethodInfo* get() {
    static auto* headerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetDateHeaderHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headerName, dateTime});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_DefaultMaximumErrorResponseLength
// Il2CppName: get_DefaultMaximumErrorResponseLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::HttpWebRequest::get_DefaultMaximumErrorResponseLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_DefaultMaximumErrorResponseLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_DefaultMaximumErrorResponseLength
// Il2CppName: set_DefaultMaximumErrorResponseLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::HttpWebRequest::set_DefaultMaximumErrorResponseLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_DefaultMaximumErrorResponseLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Expect
// Il2CppName: get_Expect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Expect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Expect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Expect
// Il2CppName: set_Expect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Expect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Expect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_HaveResponse
// Il2CppName: get_HaveResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_HaveResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_HaveResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Host
// Il2CppName: set_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Host)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::TryGetHostUri
// Il2CppName: TryGetHostUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::StringW, ByRef<::System::Uri*>)>(&System::Net::HttpWebRequest::TryGetHostUri)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hostUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "TryGetHostUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName, hostUri});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_IfModifiedSince
// Il2CppName: get_IfModifiedSince
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_IfModifiedSince)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_IfModifiedSince", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_IfModifiedSince
// Il2CppName: set_IfModifiedSince
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::DateTime)>(&System::Net::HttpWebRequest::set_IfModifiedSince)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_IfModifiedSince", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_KeepAlive
// Il2CppName: get_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_KeepAlive
// Il2CppName: set_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_KeepAlive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MaximumAutomaticRedirections
// Il2CppName: get_MaximumAutomaticRedirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MaximumAutomaticRedirections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MaximumAutomaticRedirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_MaximumAutomaticRedirections
// Il2CppName: set_MaximumAutomaticRedirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_MaximumAutomaticRedirections)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_MaximumAutomaticRedirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MaximumResponseHeadersLength
// Il2CppName: get_MaximumResponseHeadersLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MaximumResponseHeadersLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MaximumResponseHeadersLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_MaximumResponseHeadersLength
// Il2CppName: set_MaximumResponseHeadersLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_MaximumResponseHeadersLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_MaximumResponseHeadersLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_DefaultMaximumResponseHeadersLength
// Il2CppName: get_DefaultMaximumResponseHeadersLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::HttpWebRequest::get_DefaultMaximumResponseHeadersLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_DefaultMaximumResponseHeadersLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_DefaultMaximumResponseHeadersLength
// Il2CppName: set_DefaultMaximumResponseHeadersLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::HttpWebRequest::set_DefaultMaximumResponseHeadersLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_DefaultMaximumResponseHeadersLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ReadWriteTimeout
// Il2CppName: get_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ReadWriteTimeout
// Il2CppName: set_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContinueTimeout
// Il2CppName: get_ContinueTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContinueTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContinueTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContinueTimeout
// Il2CppName: set_ContinueTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_ContinueTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContinueTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MediaType
// Il2CppName: get_MediaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MediaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MediaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_MediaType
// Il2CppName: set_MediaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_MediaType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_MediaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Pipelined
// Il2CppName: get_Pipelined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Pipelined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Pipelined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Pipelined
// Il2CppName: set_Pipelined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_Pipelined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Pipelined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProtocolVersion
// Il2CppName: get_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProtocolVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ProtocolVersion
// Il2CppName: set_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Version*)>(&System::Net::HttpWebRequest::set_ProtocolVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Version")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Referer
// Il2CppName: get_Referer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Referer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Referer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Referer
// Il2CppName: set_Referer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Referer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Referer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_SendChunked
// Il2CppName: get_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_SendChunked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_SendChunked
// Il2CppName: set_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_SendChunked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePointNoLock
// Il2CppName: get_ServicePointNoLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePointNoLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePointNoLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_SupportsCookieContainer
// Il2CppName: get_SupportsCookieContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_SupportsCookieContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_SupportsCookieContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TransferEncoding
// Il2CppName: get_TransferEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TransferEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TransferEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_TransferEncoding
// Il2CppName: set_TransferEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_TransferEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_TransferEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UserAgent
// Il2CppName: get_UserAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UserAgent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UserAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_UserAgent
// Il2CppName: set_UserAgent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_UserAgent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_UserAgent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing
// Il2CppName: get_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_UnsafeAuthenticatedConnectionSharing
// Il2CppName: set_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_GotRequestStream
// Il2CppName: get_GotRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_GotRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_GotRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ExpectContinue
// Il2CppName: get_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ExpectContinue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ExpectContinue
// Il2CppName: set_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ExpectContinue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AuthUri
// Il2CppName: get_AuthUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AuthUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AuthUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProxyQuery
// Il2CppName: get_ProxyQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProxyQuery)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProxyQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServerCertValidationCallback
// Il2CppName: get_ServerCertValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServerCertValidationCallback* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServerCertValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServerCertValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServerCertificateValidationCallback
// Il2CppName: get_ServerCertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::RemoteCertificateValidationCallback* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServerCertificateValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServerCertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ServerCertificateValidationCallback
// Il2CppName: set_ServerCertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::Security::RemoteCertificateValidationCallback*)>(&System::Net::HttpWebRequest::set_ServerCertificateValidationCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "RemoteCertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ServerCertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetServicePoint
// Il2CppName: GetServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{range});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int, int)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, int)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* rangeSpecifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeSpecifier, range});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, int, int)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* rangeSpecifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeSpecifier, from, to});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{range});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t, int64_t)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, int64_t)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* rangeSpecifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeSpecifier, range});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW, int64_t, int64_t)>(&System::Net::HttpWebRequest::AddRange)> {
  static const MethodInfo* get() {
    static auto* rangeSpecifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rangeSpecifier, from, to});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SendRequest
// Il2CppName: SendRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebOperation* (System::Net::HttpWebRequest::*)(bool, ::System::Net::BufferOffsetSize*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::SendRequest)> {
  static const MethodInfo* get() {
    static auto* redirecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* writeBuffer = &::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SendRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{redirecting, writeBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::MyGetRequestStreamAsync
// Il2CppName: MyGetRequestStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Net::HttpWebRequest::*)(::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::MyGetRequestStreamAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "MyGetRequestStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestStream
// Il2CppName: GetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)(ByRef<::System::Net::TransportContext*>)>(&System::Net::HttpWebRequest::GetRequestStream)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Net", "TransportContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RunWithTimeout
// Il2CppName: RunWithTimeout
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RunWithTimeoutWorker
// Il2CppName: RunWithTimeoutWorker
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RunWithTimeout
// Il2CppName: RunWithTimeout
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::MyGetResponseAsync
// Il2CppName: MyGetResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::HttpWebResponse*>* (System::Net::HttpWebRequest::*)(::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::MyGetResponseAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "MyGetResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetResponseFromData
// Il2CppName: GetResponseFromData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::ValueTuple_5<::System::Net::HttpWebResponse*, bool, bool, ::System::Net::BufferOffsetSize*, ::System::Net::WebOperation*>>* (System::Net::HttpWebRequest::*)(::System::Net::WebResponseStream*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::GetResponseFromData)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponseStream")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetResponseFromData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::FlattenException
// Il2CppName: FlattenException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Net::HttpWebRequest::FlattenException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "FlattenException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetWebException
// Il2CppName: GetWebException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (System::Net::HttpWebRequest::*)(::System::Exception*)>(&System::Net::HttpWebRequest::GetWebException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetWebException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetWebException
// Il2CppName: GetWebException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (*)(::System::Exception*, bool)>(&System::Net::HttpWebRequest::GetWebException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* aborted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetWebException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, aborted});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CreateRequestAbortedException
// Il2CppName: CreateRequestAbortedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebException* (*)()>(&System::Net::HttpWebRequest::CreateRequestAbortedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CreateRequestAbortedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*, ByRef<::System::Net::TransportContext*>)>(&System::Net::HttpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Net", "TransportContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult, context});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_FinishedReading
// Il2CppName: get_FinishedReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_FinishedReading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_FinishedReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_FinishedReading
// Il2CppName: set_FinishedReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_FinishedReading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_FinishedReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckRequestStarted
// Il2CppName: CheckRequestStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::CheckRequestStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckRequestStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoContinueDelegate
// Il2CppName: DoContinueDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int, ::System::Net::WebHeaderCollection*)>(&System::Net::HttpWebRequest::DoContinueDelegate)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Net", "WebHeaderCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoContinueDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode, headers});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RewriteRedirectToGet
// Il2CppName: RewriteRedirectToGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::RewriteRedirectToGet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "RewriteRedirectToGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Redirect
// Il2CppName: Redirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::HttpStatusCode, ::System::Net::WebResponse*)>(&System::Net::HttpWebRequest::Redirect)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Redirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, response});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoPreAuthenticate
// Il2CppName: DoPreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::DoPreAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoPreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestHeaders
// Il2CppName: GetRequestHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetRequestHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::HandleNtlmAuth
// Il2CppName: HandleNtlmAuth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Net::WebOperation*, bool> (System::Net::HttpWebRequest::*)(::System::Net::WebResponseStream*, ::System::Net::HttpWebResponse*, ::System::Net::BufferOffsetSize*, ::System::Threading::CancellationToken)>(&System::Net::HttpWebRequest::HandleNtlmAuth)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponseStream")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    static auto* writeBuffer = &::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "HandleNtlmAuth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, response, writeBuffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckAuthorization
// Il2CppName: CheckAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebResponse*, ::System::Net::HttpStatusCode)>(&System::Net::HttpWebRequest::CheckAuthorization)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, code});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRewriteHandler
// Il2CppName: GetRewriteHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> (System::Net::HttpWebRequest::*)(::System::Net::HttpWebResponse*, bool)>(&System::Net::HttpWebRequest::GetRewriteHandler)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    static auto* redirect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRewriteHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, redirect});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckFinalStatus
// Il2CppName: CheckFinalStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_4<bool, bool, ::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>*, ::System::Net::WebException*> (System::Net::HttpWebRequest::*)(::System::Net::HttpWebResponse*)>(&System::Net::HttpWebRequest::CheckFinalStatus)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckFinalStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ReuseConnection
// Il2CppName: get_ReuseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ReuseConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ReuseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ReuseConnection
// Il2CppName: set_ReuseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ReuseConnection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ReuseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GenerateConnectionGroup
// Il2CppName: GenerateConnectionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)(::StringW, bool, bool)>(&System::Net::HttpWebRequest::GenerateConnectionGroup)> {
  static const MethodInfo* get() {
    static auto* connectionGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* unsafeConnectionGroup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isInternalGroup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GenerateConnectionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionGroupName, unsafeConnectionGroup, isInternalGroup});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$RunWithTimeout$b__242_0
// Il2CppName: <RunWithTimeout>b__242_0
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$GetRewriteHandler$b__271_0
// Il2CppName: <GetRewriteHandler>b__271_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::BufferOffsetSize*>* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::$GetRewriteHandler$b__271_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "<GetRewriteHandler>b__271_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::HttpWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ConnectionGroupName
// Il2CppName: get_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ConnectionGroupName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ConnectionGroupName
// Il2CppName: set_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_ConnectionGroupName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContentLength
// Il2CppName: set_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_ContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContentType
// Il2CppName: set_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_ContentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICredentials* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::ICredentials*)>(&System::Net::HttpWebRequest::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Headers
// Il2CppName: set_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebHeaderCollection*)>(&System::Net::HttpWebRequest::set_Headers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "WebHeaderCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Method
// Il2CppName: set_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_PreAuthenticate
// Il2CppName: get_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_PreAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_PreAuthenticate
// Il2CppName: set_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_PreAuthenticate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Proxy
// Il2CppName: set_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::IWebProxy*)>(&System::Net::HttpWebRequest::set_Proxy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_RequestUri
// Il2CppName: get_RequestUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_RequestUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_RequestUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Timeout
// Il2CppName: set_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_Timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UseDefaultCredentials
// Il2CppName: get_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_UseDefaultCredentials
// Il2CppName: set_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetRequestStream
// Il2CppName: BeginGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestStream
// Il2CppName: GetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestStreamAsync
// Il2CppName: GetRequestStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetRequestStreamAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetResponse
// Il2CppName: BeginGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetResponse)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetResponse
// Il2CppName: EndGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
