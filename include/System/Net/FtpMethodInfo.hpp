// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.FtpOperation
#include "System/Net/FtpOperation.hpp"
// Including type: System.Net.FtpMethodFlags
#include "System/Net/FtpMethodFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: FtpMethodInfo
  class FtpMethodInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::FtpMethodInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpMethodInfo*, "System.Net", "FtpMethodInfo");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpMethodInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class FtpMethodInfo : public ::Il2CppObject {
    public:
    public:
    // System.String Method
    // Size: 0x8
    // Offset: 0x10
    ::StringW Method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Net.FtpOperation Operation
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::FtpOperation Operation;
    // Field size check
    static_assert(sizeof(::System::Net::FtpOperation) == 0x4);
    // System.Net.FtpMethodFlags Flags
    // Size: 0x4
    // Offset: 0x1C
    ::System::Net::FtpMethodFlags Flags;
    // Field size check
    static_assert(sizeof(::System::Net::FtpMethodFlags) == 0x4);
    // System.String HttpCommand
    // Size: 0x8
    // Offset: 0x20
    ::StringW HttpCommand;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static private readonly System.Net.FtpMethodInfo[] s_knownMethodInfo
    static ::ArrayW<::System::Net::FtpMethodInfo*> _get_s_knownMethodInfo();
    // Set static field: static private readonly System.Net.FtpMethodInfo[] s_knownMethodInfo
    static void _set_s_knownMethodInfo(::ArrayW<::System::Net::FtpMethodInfo*> value);
    // Get instance field reference: System.String Method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Method();
    // Get instance field reference: System.Net.FtpOperation Operation
    [[deprecated("Use field access instead!")]] ::System::Net::FtpOperation& dyn_Operation();
    // Get instance field reference: System.Net.FtpMethodFlags Flags
    [[deprecated("Use field access instead!")]] ::System::Net::FtpMethodFlags& dyn_Flags();
    // Get instance field reference: System.String HttpCommand
    [[deprecated("Use field access instead!")]] ::StringW& dyn_HttpCommand();
    // System.Void .ctor(System.String method, System.Net.FtpOperation operation, System.Net.FtpMethodFlags flags, System.String httpCommand)
    // Offset: 0x4FB7A74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpMethodInfo* New_ctor(::StringW method, ::System::Net::FtpOperation operation, ::System::Net::FtpMethodFlags flags, ::StringW httpCommand) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::FtpMethodInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpMethodInfo*, creationType>(method, operation, flags, httpCommand)));
    }
    // System.Boolean HasFlag(System.Net.FtpMethodFlags flags)
    // Offset: 0x4FB7ACC
    bool HasFlag(::System::Net::FtpMethodFlags flags);
    // System.Boolean get_IsCommandOnly()
    // Offset: 0x4FB7ADC
    bool get_IsCommandOnly();
    // System.Boolean get_IsUpload()
    // Offset: 0x4FB7AEC
    bool get_IsUpload();
    // System.Boolean get_IsDownload()
    // Offset: 0x4FB7AF8
    bool get_IsDownload();
    // System.Boolean get_ShouldParseForResponseUri()
    // Offset: 0x4FB7B04
    bool get_ShouldParseForResponseUri();
    // static System.Net.FtpMethodInfo GetMethodInfo(System.String method)
    // Offset: 0x4FB7B10
    static ::System::Net::FtpMethodInfo* GetMethodInfo(::StringW method);
    // static private System.Void .cctor()
    // Offset: 0x4FB7C70
    static void _cctor();
  }; // System.Net.FtpMethodInfo
  #pragma pack(pop)
  static check_size<sizeof(FtpMethodInfo), 32 + sizeof(::StringW)> __System_Net_FtpMethodInfoSizeCheck;
  static_assert(sizeof(FtpMethodInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpMethodInfo::*)(::System::Net::FtpMethodFlags)>(&System::Net::FtpMethodInfo::HasFlag)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net", "FtpMethodFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::get_IsCommandOnly
// Il2CppName: get_IsCommandOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpMethodInfo::*)()>(&System::Net::FtpMethodInfo::get_IsCommandOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "get_IsCommandOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::get_IsUpload
// Il2CppName: get_IsUpload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpMethodInfo::*)()>(&System::Net::FtpMethodInfo::get_IsUpload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "get_IsUpload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::get_IsDownload
// Il2CppName: get_IsDownload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpMethodInfo::*)()>(&System::Net::FtpMethodInfo::get_IsDownload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "get_IsDownload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::get_ShouldParseForResponseUri
// Il2CppName: get_ShouldParseForResponseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpMethodInfo::*)()>(&System::Net::FtpMethodInfo::get_ShouldParseForResponseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "get_ShouldParseForResponseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::GetMethodInfo
// Il2CppName: GetMethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpMethodInfo* (*)(::StringW)>(&System::Net::FtpMethodInfo::GetMethodInfo)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), "GetMethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: System::Net::FtpMethodInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::FtpMethodInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpMethodInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
