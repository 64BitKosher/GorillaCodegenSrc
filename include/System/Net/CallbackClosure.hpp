// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: CallbackClosure
  class CallbackClosure;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::CallbackClosure);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::CallbackClosure*, "System.Net", "CallbackClosure");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.CallbackClosure
  // [TokenAttribute] Offset: FFFFFFFF
  class CallbackClosure : public ::Il2CppObject {
    public:
    public:
    // private System.AsyncCallback _savedCallback
    // Size: 0x8
    // Offset: 0x10
    ::System::AsyncCallback* savedCallback;
    // Field size check
    static_assert(sizeof(::System::AsyncCallback*) == 0x8);
    // private System.Threading.ExecutionContext _savedContext
    // Size: 0x8
    // Offset: 0x18
    ::System::Threading::ExecutionContext* savedContext;
    // Field size check
    static_assert(sizeof(::System::Threading::ExecutionContext*) == 0x8);
    public:
    // Get instance field reference: private System.AsyncCallback _savedCallback
    [[deprecated("Use field access instead!")]] ::System::AsyncCallback*& dyn__savedCallback();
    // Get instance field reference: private System.Threading.ExecutionContext _savedContext
    [[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& dyn__savedContext();
    // System.Void .ctor(System.Threading.ExecutionContext context, System.AsyncCallback callback)
    // Offset: 0x4FA3EB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallbackClosure* New_ctor(::System::Threading::ExecutionContext* context, ::System::AsyncCallback* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CallbackClosure::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallbackClosure*, creationType>(context, callback)));
    }
    // System.Boolean IsCompatible(System.AsyncCallback callback)
    // Offset: 0x4FA3E94
    bool IsCompatible(::System::AsyncCallback* callback);
    // System.AsyncCallback get_AsyncCallback()
    // Offset: 0x4FA4668
    ::System::AsyncCallback* get_AsyncCallback();
    // System.Threading.ExecutionContext get_Context()
    // Offset: 0x4FA4670
    ::System::Threading::ExecutionContext* get_Context();
  }; // System.Net.CallbackClosure
  #pragma pack(pop)
  static check_size<sizeof(CallbackClosure), 24 + sizeof(::System::Threading::ExecutionContext*)> __System_Net_CallbackClosureSizeCheck;
  static_assert(sizeof(CallbackClosure) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::CallbackClosure::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CallbackClosure::IsCompatible
// Il2CppName: IsCompatible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::CallbackClosure::*)(::System::AsyncCallback*)>(&System::Net::CallbackClosure::IsCompatible)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CallbackClosure*), "IsCompatible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: System::Net::CallbackClosure::get_AsyncCallback
// Il2CppName: get_AsyncCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::AsyncCallback* (System::Net::CallbackClosure::*)()>(&System::Net::CallbackClosure::get_AsyncCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CallbackClosure*), "get_AsyncCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CallbackClosure::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (System::Net::CallbackClosure::*)()>(&System::Net::CallbackClosure::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CallbackClosure*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
