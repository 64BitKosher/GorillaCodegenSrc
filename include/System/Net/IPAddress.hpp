// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: AddressFamily
  struct AddressFamily;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::IPAddress);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::IPAddress*, "System.Net", "IPAddress");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.IPAddress
  // [TokenAttribute] Offset: FFFFFFFF
  class IPAddress : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::IPAddress::ReadOnlyIPAddress
    class ReadOnlyIPAddress;
    public:
    // private System.UInt32 _addressOrScopeId
    // Size: 0x4
    // Offset: 0x10
    uint addressOrScopeId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: addressOrScopeId and: numbers
    char __padding0[0x4] = {};
    // private readonly System.UInt16[] _numbers
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint16_t> numbers;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // private System.String _toString
    // Size: 0x8
    // Offset: 0x20
    ::StringW toString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _hashCode
    // Size: 0x4
    // Offset: 0x28
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public readonly System.Net.IPAddress Any
    static ::System::Net::IPAddress* _get_Any();
    // Set static field: static public readonly System.Net.IPAddress Any
    static void _set_Any(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress Loopback
    static ::System::Net::IPAddress* _get_Loopback();
    // Set static field: static public readonly System.Net.IPAddress Loopback
    static void _set_Loopback(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress Broadcast
    static ::System::Net::IPAddress* _get_Broadcast();
    // Set static field: static public readonly System.Net.IPAddress Broadcast
    static void _set_Broadcast(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress None
    static ::System::Net::IPAddress* _get_None();
    // Set static field: static public readonly System.Net.IPAddress None
    static void _set_None(::System::Net::IPAddress* value);
    // static field const value: static System.Int64 LoopbackMask
    static constexpr const int64_t LoopbackMask = 255;
    // Get static field: static System.Int64 LoopbackMask
    static int64_t _get_LoopbackMask();
    // Set static field: static System.Int64 LoopbackMask
    static void _set_LoopbackMask(int64_t value);
    // Get static field: static public readonly System.Net.IPAddress IPv6Any
    static ::System::Net::IPAddress* _get_IPv6Any();
    // Set static field: static public readonly System.Net.IPAddress IPv6Any
    static void _set_IPv6Any(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress IPv6Loopback
    static ::System::Net::IPAddress* _get_IPv6Loopback();
    // Set static field: static public readonly System.Net.IPAddress IPv6Loopback
    static void _set_IPv6Loopback(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress IPv6None
    static ::System::Net::IPAddress* _get_IPv6None();
    // Set static field: static public readonly System.Net.IPAddress IPv6None
    static void _set_IPv6None(::System::Net::IPAddress* value);
    // static field const value: static System.Int32 NumberOfLabels
    static constexpr const int NumberOfLabels = 8;
    // Get static field: static System.Int32 NumberOfLabels
    static int _get_NumberOfLabels();
    // Set static field: static System.Int32 NumberOfLabels
    static void _set_NumberOfLabels(int value);
    // Get instance field reference: private System.UInt32 _addressOrScopeId
    [[deprecated("Use field access instead!")]] uint& dyn__addressOrScopeId();
    // Get instance field reference: private readonly System.UInt16[] _numbers
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn__numbers();
    // Get instance field reference: private System.String _toString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__toString();
    // Get instance field reference: private System.Int32 _hashCode
    [[deprecated("Use field access instead!")]] int& dyn__hashCode();
    // private System.Boolean get_IsIPv4()
    // Offset: 0x4FAD084
    bool get_IsIPv4();
    // private System.Boolean get_IsIPv6()
    // Offset: 0x4FAD094
    bool get_IsIPv6();
    // private System.UInt32 get_PrivateAddress()
    // Offset: 0x4FAD0A4
    uint get_PrivateAddress();
    // private System.Void set_PrivateAddress(System.UInt32 value)
    // Offset: 0x4FAD0AC
    void set_PrivateAddress(uint value);
    // private System.UInt32 get_PrivateScopeId()
    // Offset: 0x4FAD0E0
    uint get_PrivateScopeId();
    // private System.Void set_PrivateScopeId(System.UInt32 value)
    // Offset: 0x4FAD0E8
    void set_PrivateScopeId(uint value);
    // public System.Void .ctor(System.Int64 newAddress)
    // Offset: 0x4FAD11C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(int64_t newAddress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(newAddress)));
    }
    // public System.Void .ctor(System.Byte[] address, System.Int64 scopeid)
    // Offset: 0x4FAD1A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint8_t> address, int64_t scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address, scopeid)));
    }
    // public System.Void .ctor(System.ReadOnlySpan`1<System.Byte> address, System.Int64 scopeid)
    // Offset: 0x4FAD270
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::System::ReadOnlySpan_1<uint8_t> address, int64_t scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address, scopeid)));
    }
    // System.Void .ctor(System.UInt16* numbers, System.Int32 numbersLength, System.UInt32 scopeid)
    // Offset: 0x4FAD40C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(uint16_t* numbers, int numbersLength, uint scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(numbers, numbersLength, scopeid)));
    }
    // private System.Void .ctor(System.UInt16[] numbers, System.UInt32 scopeid)
    // Offset: 0x4FAD4E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint16_t> numbers, uint scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(numbers, scopeid)));
    }
    // public System.Void .ctor(System.Byte[] address)
    // Offset: 0x4FAD530
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint8_t> address) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address)));
    }
    // public System.Void .ctor(System.ReadOnlySpan`1<System.Byte> address)
    // Offset: 0x4FAD59C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::System::ReadOnlySpan_1<uint8_t> address) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address)));
    }
    // System.Void .ctor(System.Int32 newAddress)
    // Offset: 0x4FAD704
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(int newAddress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(newAddress)));
    }
    // static public System.Boolean TryParse(System.String ipString, out System.Net.IPAddress address)
    // Offset: 0x4FAD740
    static bool TryParse(::StringW ipString, ByRef<::System::Net::IPAddress*> address);
    // static public System.Boolean TryParse(System.ReadOnlySpan`1<System.Char> ipSpan, out System.Net.IPAddress address)
    // Offset: 0x4FAD990
    static bool TryParse(::System::ReadOnlySpan_1<::Il2CppChar> ipSpan, ByRef<::System::Net::IPAddress*> address);
    // static public System.Net.IPAddress Parse(System.String ipString)
    // Offset: 0x4FAD9C4
    static ::System::Net::IPAddress* Parse(::StringW ipString);
    // static public System.Net.IPAddress Parse(System.ReadOnlySpan`1<System.Char> ipSpan)
    // Offset: 0x4FADA5C
    static ::System::Net::IPAddress* Parse(::System::ReadOnlySpan_1<::Il2CppChar> ipSpan);
    // public System.Boolean TryWriteBytes(System.Span`1<System.Byte> destination, out System.Int32 bytesWritten)
    // Offset: 0x4FADA64
    bool TryWriteBytes(::System::Span_1<uint8_t> destination, ByRef<int> bytesWritten);
    // private System.Void WriteIPv6Bytes(System.Span`1<System.Byte> destination)
    // Offset: 0x4FADB70
    void WriteIPv6Bytes(::System::Span_1<uint8_t> destination);
    // private System.Void WriteIPv4Bytes(System.Span`1<System.Byte> destination)
    // Offset: 0x4FADBFC
    void WriteIPv4Bytes(::System::Span_1<uint8_t> destination);
    // public System.Byte[] GetAddressBytes()
    // Offset: 0x4FADC48
    ::ArrayW<uint8_t> GetAddressBytes();
    // public System.Net.Sockets.AddressFamily get_AddressFamily()
    // Offset: 0x4FADD90
    ::System::Net::Sockets::AddressFamily get_AddressFamily();
    // public System.Int64 get_ScopeId()
    // Offset: 0x4FADDA8
    int64_t get_ScopeId();
    // public System.Void set_ScopeId(System.Int64 value)
    // Offset: 0x4FADDF8
    void set_ScopeId(int64_t value);
    // public System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4FADFCC
    bool TryFormat(::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.Int64 HostToNetworkOrder(System.Int64 host)
    // Offset: 0x4FAE180
    static int64_t HostToNetworkOrder(int64_t host);
    // static public System.Int32 HostToNetworkOrder(System.Int32 host)
    // Offset: 0x4FAE188
    static int HostToNetworkOrder(int host);
    // static public System.Int16 HostToNetworkOrder(System.Int16 host)
    // Offset: 0x4FAE190
    static int16_t HostToNetworkOrder(int16_t host);
    // static public System.Int64 NetworkToHostOrder(System.Int64 network)
    // Offset: 0x4FAE19C
    static int64_t NetworkToHostOrder(int64_t network);
    // static public System.Int32 NetworkToHostOrder(System.Int32 network)
    // Offset: 0x4FAE1F0
    static int NetworkToHostOrder(int network);
    // static public System.Int16 NetworkToHostOrder(System.Int16 network)
    // Offset: 0x4FAE244
    static int16_t NetworkToHostOrder(int16_t network);
    // static public System.Boolean IsLoopback(System.Net.IPAddress address)
    // Offset: 0x4FAE29C
    static bool IsLoopback(::System::Net::IPAddress* address);
    // public System.Boolean get_IsIPv6Multicast()
    // Offset: 0x4FAE364
    bool get_IsIPv6Multicast();
    // public System.Boolean get_IsIPv6LinkLocal()
    // Offset: 0x4FAE398
    bool get_IsIPv6LinkLocal();
    // public System.Boolean get_IsIPv6SiteLocal()
    // Offset: 0x4FAE3D4
    bool get_IsIPv6SiteLocal();
    // public System.Boolean get_IsIPv6Teredo()
    // Offset: 0x4FAE410
    bool get_IsIPv6Teredo();
    // public System.Boolean get_IsIPv4MappedToIPv6()
    // Offset: 0x4FAE45C
    bool get_IsIPv4MappedToIPv6();
    // public System.Int64 get_Address()
    // Offset: 0x4FAE4B8
    int64_t get_Address();
    // public System.Void set_Address(System.Int64 value)
    // Offset: 0x4FAE508
    void set_Address(int64_t value);
    // System.Boolean Equals(System.Object comparandObj, System.Boolean compareScopeId)
    // Offset: 0x4FAE5C0
    bool Equals(::Il2CppObject* comparandObj, bool compareScopeId);
    // public System.Net.IPAddress MapToIPv6()
    // Offset: 0x4FAEAEC
    ::System::Net::IPAddress* MapToIPv6();
    // public System.Net.IPAddress MapToIPv4()
    // Offset: 0x4FAEBC8
    ::System::Net::IPAddress* MapToIPv4();
    // static private System.Byte[] ThrowAddressNullException()
    // Offset: 0x4FAD224
    static ::ArrayW<uint8_t> ThrowAddressNullException();
    // static private System.Void .cctor()
    // Offset: 0x4FAEC54
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x4FADEA8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0x4FAE6F4
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4FAE6FC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.Net.IPAddress
  #pragma pack(pop)
  static check_size<sizeof(IPAddress), 40 + sizeof(int)> __System_Net_IPAddressSizeCheck;
  static_assert(sizeof(IPAddress) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv4
// Il2CppName: get_IsIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6
// Il2CppName: get_IsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_PrivateAddress
// Il2CppName: get_PrivateAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_PrivateAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_PrivateAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_PrivateAddress
// Il2CppName: set_PrivateAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(uint)>(&System::Net::IPAddress::set_PrivateAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_PrivateAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_PrivateScopeId
// Il2CppName: get_PrivateScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_PrivateScopeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_PrivateScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_PrivateScopeId
// Il2CppName: set_PrivateScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(uint)>(&System::Net::IPAddress::set_PrivateScopeId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_PrivateScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::Net::IPAddress*>)>(&System::Net::IPAddress::TryParse)> {
  static const MethodInfo* get() {
    static auto* ipString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipString, address});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<::System::Net::IPAddress*>)>(&System::Net::IPAddress::TryParse)> {
  static const MethodInfo* get() {
    static auto* ipSpan = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipSpan, address});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (*)(::StringW)>(&System::Net::IPAddress::Parse)> {
  static const MethodInfo* get() {
    static auto* ipString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipString});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::Net::IPAddress::Parse)> {
  static const MethodInfo* get() {
    static auto* ipSpan = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipSpan});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::TryWriteBytes
// Il2CppName: TryWriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::System::Span_1<uint8_t>, ByRef<int>)>(&System::Net::IPAddress::TryWriteBytes)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "TryWriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, bytesWritten});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::WriteIPv6Bytes
// Il2CppName: WriteIPv6Bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(::System::Span_1<uint8_t>)>(&System::Net::IPAddress::WriteIPv6Bytes)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "WriteIPv6Bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::WriteIPv4Bytes
// Il2CppName: WriteIPv4Bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(::System::Span_1<uint8_t>)>(&System::Net::IPAddress::WriteIPv4Bytes)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "WriteIPv4Bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::GetAddressBytes
// Il2CppName: GetAddressBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::IPAddress::*)()>(&System::Net::IPAddress::GetAddressBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "GetAddressBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_AddressFamily
// Il2CppName: get_AddressFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::AddressFamily (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_AddressFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_AddressFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_ScopeId
// Il2CppName: get_ScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_ScopeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_ScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_ScopeId
// Il2CppName: set_ScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(int64_t)>(&System::Net::IPAddress::set_ScopeId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_ScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Net::IPAddress::TryFormat)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(int16_t)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(int16_t)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::IsLoopback
// Il2CppName: IsLoopback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::IPAddress*)>(&System::Net::IPAddress::IsLoopback)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "IsLoopback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6Multicast
// Il2CppName: get_IsIPv6Multicast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6Multicast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6Multicast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6LinkLocal
// Il2CppName: get_IsIPv6LinkLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6LinkLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6LinkLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6SiteLocal
// Il2CppName: get_IsIPv6SiteLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6SiteLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6SiteLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6Teredo
// Il2CppName: get_IsIPv6Teredo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6Teredo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6Teredo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv4MappedToIPv6
// Il2CppName: get_IsIPv4MappedToIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv4MappedToIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv4MappedToIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_Address
// Il2CppName: set_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(int64_t)>(&System::Net::IPAddress::set_Address)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::Il2CppObject*, bool)>(&System::Net::IPAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* comparandObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* compareScopeId = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparandObj, compareScopeId});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::MapToIPv6
// Il2CppName: MapToIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::IPAddress::*)()>(&System::Net::IPAddress::MapToIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "MapToIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::MapToIPv4
// Il2CppName: MapToIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::IPAddress::*)()>(&System::Net::IPAddress::MapToIPv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "MapToIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::ThrowAddressNullException
// Il2CppName: ThrowAddressNullException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)()>(&System::Net::IPAddress::ThrowAddressNullException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "ThrowAddressNullException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::IPAddress::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::IPAddress::*)()>(&System::Net::IPAddress::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::Il2CppObject*)>(&System::Net::IPAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* comparand = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparand});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::IPAddress::*)()>(&System::Net::IPAddress::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
