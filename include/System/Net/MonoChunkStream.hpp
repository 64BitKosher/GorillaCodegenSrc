// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebReadStream
#include "System/Net/WebReadStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: MonoChunkParser
  class MonoChunkParser;
  // Forward declaring type: WebOperation
  class WebOperation;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: MonoChunkStream
  class MonoChunkStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::MonoChunkStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::MonoChunkStream*, "System.Net", "MonoChunkStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.MonoChunkStream
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoChunkStream : public ::System::Net::WebReadStream {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    // Nested type: ::System::Net::MonoChunkStream::$ProcessReadAsync$d__7
    struct $ProcessReadAsync$d__7;
    // Nested type: ::System::Net::MonoChunkStream::$FinishReading$d__8
    struct $FinishReading$d__8;
    public:
    // private readonly System.Net.WebHeaderCollection <Headers>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::WebHeaderCollection* Headers;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private readonly System.Net.MonoChunkParser <Decoder>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::MonoChunkParser* Decoder;
    // Field size check
    static_assert(sizeof(::System::Net::MonoChunkParser*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Net.WebHeaderCollection <Headers>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn_$Headers$k__BackingField();
    // Get instance field reference: private readonly System.Net.MonoChunkParser <Decoder>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::MonoChunkParser*& dyn_$Decoder$k__BackingField();
    // protected System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x4EAB168
    ::System::Net::WebHeaderCollection* get_Headers();
    // protected System.Net.MonoChunkParser get_Decoder()
    // Offset: 0x4EAB170
    ::System::Net::MonoChunkParser* get_Decoder();
    // public System.Void .ctor(System.Net.WebOperation operation, System.IO.Stream innerStream, System.Net.WebHeaderCollection headers)
    // Offset: 0x4EAB178
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoChunkStream* New_ctor(::System::Net::WebOperation* operation, ::System::IO::Stream* innerStream, ::System::Net::WebHeaderCollection* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::MonoChunkStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoChunkStream*, creationType>(operation, innerStream, headers)));
    }
    // static private System.Void ThrowExpectingChunkTrailer()
    // Offset: 0x4EAB480
    static void ThrowExpectingChunkTrailer();
    // private System.Threading.Tasks.Task <>n__0(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EAB4D8
    ::System::Threading::Tasks::Task* $$n__0(::System::Threading::CancellationToken cancellationToken);
    // protected override System.Threading.Tasks.Task`1<System.Int32> ProcessReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EAB218
    // Implemented from: System.Net.WebReadStream
    // Base method: System.Threading.Tasks.Task`1<System.Int32> WebReadStream::ProcessReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task_1<int>* ProcessReadAsync(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Threading::CancellationToken cancellationToken);
    // override System.Threading.Tasks.Task FinishReading(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4EAB380
    // Implemented from: System.Net.WebReadStream
    // Base method: System.Threading.Tasks.Task WebReadStream::FinishReading(System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* FinishReading(::System::Threading::CancellationToken cancellationToken);
  }; // System.Net.MonoChunkStream
  #pragma pack(pop)
  static check_size<sizeof(MonoChunkStream), 72 + sizeof(::System::Net::MonoChunkParser*)> __System_Net_MonoChunkStreamSizeCheck;
  static_assert(sizeof(MonoChunkStream) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::MonoChunkStream::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::get_Decoder
// Il2CppName: get_Decoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::MonoChunkParser* (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::get_Decoder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "get_Decoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ThrowExpectingChunkTrailer
// Il2CppName: ThrowExpectingChunkTrailer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::MonoChunkStream::ThrowExpectingChunkTrailer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ThrowExpectingChunkTrailer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::$$n__0
// Il2CppName: <>n__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::MonoChunkStream::*)(::System::Threading::CancellationToken)>(&System::Net::MonoChunkStream::$$n__0)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "<>n__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ProcessReadAsync
// Il2CppName: ProcessReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int>* (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::Net::MonoChunkStream::ProcessReadAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ProcessReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::FinishReading
// Il2CppName: FinishReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::MonoChunkStream::*)(::System::Threading::CancellationToken)>(&System::Net::MonoChunkStream::FinishReading)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "FinishReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
