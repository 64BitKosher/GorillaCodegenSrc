// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::IPAddress::ReadOnlyIPAddress);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::IPAddress::ReadOnlyIPAddress*, "System.Net", "IPAddress/ReadOnlyIPAddress");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.IPAddress/ReadOnlyIPAddress
  // [TokenAttribute] Offset: FFFFFFFF
  class IPAddress::ReadOnlyIPAddress : public ::System::Net::IPAddress {
    public:
    // public System.Void .ctor(System.Int64 newAddress)
    // Offset: 0x4FAEE30
    // Implemented from: System.Net.IPAddress
    // Base method: System.Void IPAddress::.ctor(System.Int64 newAddress)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress::ReadOnlyIPAddress* New_ctor(int64_t newAddress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::ReadOnlyIPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress::ReadOnlyIPAddress*, creationType>(newAddress)));
    }
  }; // System.Net.IPAddress/ReadOnlyIPAddress
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::IPAddress::ReadOnlyIPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
