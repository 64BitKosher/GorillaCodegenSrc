// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ResponseDescription
  class ResponseDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ResponseDescription);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ResponseDescription*, "System.Net", "ResponseDescription");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ResponseDescription
  // [TokenAttribute] Offset: FFFFFFFF
  class ResponseDescription : public ::Il2CppObject {
    public:
    public:
    // System.Boolean Multiline
    // Size: 0x1
    // Offset: 0x10
    bool Multiline;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Multiline and: Status
    char __padding0[0x3] = {};
    // System.Int32 Status
    // Size: 0x4
    // Offset: 0x14
    int Status;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.String StatusDescription
    // Size: 0x8
    // Offset: 0x18
    ::StringW StatusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Text.StringBuilder StatusBuffer
    // Size: 0x8
    // Offset: 0x20
    ::System::Text::StringBuilder* StatusBuffer;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // System.String StatusCodeString
    // Size: 0x8
    // Offset: 0x28
    ::StringW StatusCodeString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // static field const value: static System.Int32 NoStatus
    static constexpr const int NoStatus = -1;
    // Get static field: static System.Int32 NoStatus
    static int _get_NoStatus();
    // Set static field: static System.Int32 NoStatus
    static void _set_NoStatus(int value);
    // Get instance field reference: System.Boolean Multiline
    [[deprecated("Use field access instead!")]] bool& dyn_Multiline();
    // Get instance field reference: System.Int32 Status
    [[deprecated("Use field access instead!")]] int& dyn_Status();
    // Get instance field reference: System.String StatusDescription
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StatusDescription();
    // Get instance field reference: System.Text.StringBuilder StatusBuffer
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_StatusBuffer();
    // Get instance field reference: System.String StatusCodeString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StatusCodeString();
    // System.Boolean get_PositiveIntermediate()
    // Offset: 0x4FB1D30
    bool get_PositiveIntermediate();
    // System.Boolean get_PositiveCompletion()
    // Offset: 0x4FB1D44
    bool get_PositiveCompletion();
    // System.Boolean get_TransientFailure()
    // Offset: 0x4FB1D58
    bool get_TransientFailure();
    // System.Boolean get_PermanentFailure()
    // Offset: 0x4FB1D6C
    bool get_PermanentFailure();
    // System.Boolean get_InvalidStatusCode()
    // Offset: 0x4FB1D80
    bool get_InvalidStatusCode();
    // public System.Void .ctor()
    // Offset: 0x4FB1D94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResponseDescription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ResponseDescription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResponseDescription*, creationType>()));
    }
  }; // System.Net.ResponseDescription
  #pragma pack(pop)
  static check_size<sizeof(ResponseDescription), 40 + sizeof(::StringW)> __System_Net_ResponseDescriptionSizeCheck;
  static_assert(sizeof(ResponseDescription) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ResponseDescription::get_PositiveIntermediate
// Il2CppName: get_PositiveIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ResponseDescription::*)()>(&System::Net::ResponseDescription::get_PositiveIntermediate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ResponseDescription*), "get_PositiveIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ResponseDescription::get_PositiveCompletion
// Il2CppName: get_PositiveCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ResponseDescription::*)()>(&System::Net::ResponseDescription::get_PositiveCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ResponseDescription*), "get_PositiveCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ResponseDescription::get_TransientFailure
// Il2CppName: get_TransientFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ResponseDescription::*)()>(&System::Net::ResponseDescription::get_TransientFailure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ResponseDescription*), "get_TransientFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ResponseDescription::get_PermanentFailure
// Il2CppName: get_PermanentFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ResponseDescription::*)()>(&System::Net::ResponseDescription::get_PermanentFailure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ResponseDescription*), "get_PermanentFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ResponseDescription::get_InvalidStatusCode
// Il2CppName: get_InvalidStatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ResponseDescription::*)()>(&System::Net::ResponseDescription::get_InvalidStatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ResponseDescription*), "get_InvalidStatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ResponseDescription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
