// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: FtpMethodInfo
  class FtpMethodInfo;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: FtpControlStream
  class FtpControlStream;
  // Forward declaring type: FtpWebResponse
  class FtpWebResponse;
  // Forward declaring type: ContextAwareResult
  class ContextAwareResult;
  // Forward declaring type: LazyAsyncResult
  class LazyAsyncResult;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Skipping declaration: RequestStage because it is already included!
  // Forward declaring type: CloseExState
  struct CloseExState;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Net::Cache
namespace System::Net::Cache {
  // Forward declaring type: RequestCachePolicy
  class RequestCachePolicy;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: FtpWebRequest
  class FtpWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::FtpWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpWebRequest*, "System.Net", "FtpWebRequest");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class FtpWebRequest : public ::System::Net::WebRequest {
    public:
    // Nested type: ::System::Net::FtpWebRequest::RequestStage
    struct RequestStage;
    // Nested type: ::System::Net::FtpWebRequest::$CreateConnectionAsync$d__86
    struct $CreateConnectionAsync$d__86;
    // Nested type: ::System::Net::FtpWebRequest::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.FtpWebRequest/RequestStage
    // [TokenAttribute] Offset: FFFFFFFF
    struct RequestStage/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RequestStage
      constexpr RequestStage(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.FtpWebRequest/RequestStage CheckForError
      static constexpr const int CheckForError = 0;
      // Get static field: static public System.Net.FtpWebRequest/RequestStage CheckForError
      static ::System::Net::FtpWebRequest::RequestStage _get_CheckForError();
      // Set static field: static public System.Net.FtpWebRequest/RequestStage CheckForError
      static void _set_CheckForError(::System::Net::FtpWebRequest::RequestStage value);
      // static field const value: static public System.Net.FtpWebRequest/RequestStage RequestStarted
      static constexpr const int RequestStarted = 1;
      // Get static field: static public System.Net.FtpWebRequest/RequestStage RequestStarted
      static ::System::Net::FtpWebRequest::RequestStage _get_RequestStarted();
      // Set static field: static public System.Net.FtpWebRequest/RequestStage RequestStarted
      static void _set_RequestStarted(::System::Net::FtpWebRequest::RequestStage value);
      // static field const value: static public System.Net.FtpWebRequest/RequestStage WriteReady
      static constexpr const int WriteReady = 2;
      // Get static field: static public System.Net.FtpWebRequest/RequestStage WriteReady
      static ::System::Net::FtpWebRequest::RequestStage _get_WriteReady();
      // Set static field: static public System.Net.FtpWebRequest/RequestStage WriteReady
      static void _set_WriteReady(::System::Net::FtpWebRequest::RequestStage value);
      // static field const value: static public System.Net.FtpWebRequest/RequestStage ReadReady
      static constexpr const int ReadReady = 3;
      // Get static field: static public System.Net.FtpWebRequest/RequestStage ReadReady
      static ::System::Net::FtpWebRequest::RequestStage _get_ReadReady();
      // Set static field: static public System.Net.FtpWebRequest/RequestStage ReadReady
      static void _set_ReadReady(::System::Net::FtpWebRequest::RequestStage value);
      // static field const value: static public System.Net.FtpWebRequest/RequestStage ReleaseConnection
      static constexpr const int ReleaseConnection = 4;
      // Get static field: static public System.Net.FtpWebRequest/RequestStage ReleaseConnection
      static ::System::Net::FtpWebRequest::RequestStage _get_ReleaseConnection();
      // Set static field: static public System.Net.FtpWebRequest/RequestStage ReleaseConnection
      static void _set_ReleaseConnection(::System::Net::FtpWebRequest::RequestStage value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.FtpWebRequest/RequestStage
    #pragma pack(pop)
    static check_size<sizeof(FtpWebRequest::RequestStage), 0 + sizeof(int)> __System_Net_FtpWebRequest_RequestStageSizeCheck;
    static_assert(sizeof(FtpWebRequest::RequestStage) == 0x4);
    public:
    // private System.Object _syncObject
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* syncObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.ICredentials _authInfo
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::ICredentials* authInfo;
    // Field size check
    static_assert(sizeof(::System::Net::ICredentials*) == 0x8);
    // private readonly System.Uri _uri
    // Size: 0x8
    // Offset: 0x48
    ::System::Uri* uri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Net.FtpMethodInfo _methodInfo
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::FtpMethodInfo* methodInfo;
    // Field size check
    static_assert(sizeof(::System::Net::FtpMethodInfo*) == 0x8);
    // private System.String _renameTo
    // Size: 0x8
    // Offset: 0x58
    ::StringW renameTo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _getRequestStreamStarted
    // Size: 0x1
    // Offset: 0x60
    bool getRequestStreamStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _getResponseStarted
    // Size: 0x1
    // Offset: 0x61
    bool getResponseStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: getResponseStarted and: startTime
    char __padding6[0x6] = {};
    // private System.DateTime _startTime
    // Size: 0x8
    // Offset: 0x68
    ::System::DateTime startTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Int32 _timeout
    // Size: 0x4
    // Offset: 0x70
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _remainingTimeout
    // Size: 0x4
    // Offset: 0x74
    int remainingTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 _contentLength
    // Size: 0x8
    // Offset: 0x78
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _contentOffset
    // Size: 0x8
    // Offset: 0x80
    int64_t contentOffset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    // Size: 0x8
    // Offset: 0x88
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.Boolean _passive
    // Size: 0x1
    // Offset: 0x90
    bool passive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _binary
    // Size: 0x1
    // Offset: 0x91
    bool binary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: binary and: connectionGroupName
    char __padding14[0x6] = {};
    // private System.String _connectionGroupName
    // Size: 0x8
    // Offset: 0x98
    ::StringW connectionGroupName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Net.ServicePoint _servicePoint
    // Size: 0x8
    // Offset: 0xA0
    ::System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.Boolean _async
    // Size: 0x1
    // Offset: 0xA8
    bool async;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _aborted
    // Size: 0x1
    // Offset: 0xA9
    bool aborted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _timedOut
    // Size: 0x1
    // Offset: 0xAA
    bool timedOut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: timedOut and: exception
    char __padding19[0x5] = {};
    // private System.Exception _exception
    // Size: 0x8
    // Offset: 0xB0
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Net.TimerThread/Queue _timerQueue
    // Size: 0x8
    // Offset: 0xB8
    ::System::Net::TimerThread::Queue* timerQueue;
    // Field size check
    static_assert(sizeof(::System::Net::TimerThread::Queue*) == 0x8);
    // private System.Net.TimerThread/Callback _timerCallback
    // Size: 0x8
    // Offset: 0xC0
    ::System::Net::TimerThread::Callback* timerCallback;
    // Field size check
    static_assert(sizeof(::System::Net::TimerThread::Callback*) == 0x8);
    // private System.Boolean _enableSsl
    // Size: 0x1
    // Offset: 0xC8
    bool enableSsl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableSsl and: connection
    char __padding23[0x7] = {};
    // private System.Net.FtpControlStream _connection
    // Size: 0x8
    // Offset: 0xD0
    ::System::Net::FtpControlStream* connection;
    // Field size check
    static_assert(sizeof(::System::Net::FtpControlStream*) == 0x8);
    // private System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0xD8
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Net.FtpWebRequest/RequestStage _requestStage
    // Size: 0x4
    // Offset: 0xE0
    ::System::Net::FtpWebRequest::RequestStage requestStage;
    // Field size check
    static_assert(sizeof(::System::Net::FtpWebRequest::RequestStage) == 0x4);
    // private System.Boolean _onceFailed
    // Size: 0x1
    // Offset: 0xE4
    bool onceFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: onceFailed and: ftpRequestHeaders
    char __padding27[0x3] = {};
    // private System.Net.WebHeaderCollection _ftpRequestHeaders
    // Size: 0x8
    // Offset: 0xE8
    ::System::Net::WebHeaderCollection* ftpRequestHeaders;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.Net.FtpWebResponse _ftpWebResponse
    // Size: 0x8
    // Offset: 0xF0
    ::System::Net::FtpWebResponse* ftpWebResponse;
    // Field size check
    static_assert(sizeof(::System::Net::FtpWebResponse*) == 0x8);
    // private System.Int32 _readWriteTimeout
    // Size: 0x4
    // Offset: 0xF8
    int readWriteTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: readWriteTimeout and: writeAsyncResult
    char __padding30[0x4] = {};
    // private System.Net.ContextAwareResult _writeAsyncResult
    // Size: 0x8
    // Offset: 0x100
    ::System::Net::ContextAwareResult* writeAsyncResult;
    // Field size check
    static_assert(sizeof(::System::Net::ContextAwareResult*) == 0x8);
    // private System.Net.LazyAsyncResult _readAsyncResult
    // Size: 0x8
    // Offset: 0x108
    ::System::Net::LazyAsyncResult* readAsyncResult;
    // Field size check
    static_assert(sizeof(::System::Net::LazyAsyncResult*) == 0x8);
    // private System.Net.LazyAsyncResult _requestCompleteAsyncResult
    // Size: 0x8
    // Offset: 0x110
    ::System::Net::LazyAsyncResult* requestCompleteAsyncResult;
    // Field size check
    static_assert(sizeof(::System::Net::LazyAsyncResult*) == 0x8);
    public:
    // Get static field: static private readonly System.Net.NetworkCredential s_defaultFtpNetworkCredential
    static ::System::Net::NetworkCredential* _get_s_defaultFtpNetworkCredential();
    // Set static field: static private readonly System.Net.NetworkCredential s_defaultFtpNetworkCredential
    static void _set_s_defaultFtpNetworkCredential(::System::Net::NetworkCredential* value);
    // static field const value: static private System.Int32 s_DefaultTimeout
    static constexpr const int s_DefaultTimeout = 100000;
    // Get static field: static private System.Int32 s_DefaultTimeout
    static int _get_s_DefaultTimeout();
    // Set static field: static private System.Int32 s_DefaultTimeout
    static void _set_s_DefaultTimeout(int value);
    // Get static field: static private readonly System.Net.TimerThread/Queue s_DefaultTimerQueue
    static ::System::Net::TimerThread::Queue* _get_s_DefaultTimerQueue();
    // Set static field: static private readonly System.Net.TimerThread/Queue s_DefaultTimerQueue
    static void _set_s_DefaultTimerQueue(::System::Net::TimerThread::Queue* value);
    // Get instance field reference: private System.Object _syncObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncObject();
    // Get instance field reference: private System.Net.ICredentials _authInfo
    [[deprecated("Use field access instead!")]] ::System::Net::ICredentials*& dyn__authInfo();
    // Get instance field reference: private readonly System.Uri _uri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__uri();
    // Get instance field reference: private System.Net.FtpMethodInfo _methodInfo
    [[deprecated("Use field access instead!")]] ::System::Net::FtpMethodInfo*& dyn__methodInfo();
    // Get instance field reference: private System.String _renameTo
    [[deprecated("Use field access instead!")]] ::StringW& dyn__renameTo();
    // Get instance field reference: private System.Boolean _getRequestStreamStarted
    [[deprecated("Use field access instead!")]] bool& dyn__getRequestStreamStarted();
    // Get instance field reference: private System.Boolean _getResponseStarted
    [[deprecated("Use field access instead!")]] bool& dyn__getResponseStarted();
    // Get instance field reference: private System.DateTime _startTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__startTime();
    // Get instance field reference: private System.Int32 _timeout
    [[deprecated("Use field access instead!")]] int& dyn__timeout();
    // Get instance field reference: private System.Int32 _remainingTimeout
    [[deprecated("Use field access instead!")]] int& dyn__remainingTimeout();
    // Get instance field reference: private System.Int64 _contentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn__contentLength();
    // Get instance field reference: private System.Int64 _contentOffset
    [[deprecated("Use field access instead!")]] int64_t& dyn__contentOffset();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn__clientCertificates();
    // Get instance field reference: private System.Boolean _passive
    [[deprecated("Use field access instead!")]] bool& dyn__passive();
    // Get instance field reference: private System.Boolean _binary
    [[deprecated("Use field access instead!")]] bool& dyn__binary();
    // Get instance field reference: private System.String _connectionGroupName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__connectionGroupName();
    // Get instance field reference: private System.Net.ServicePoint _servicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn__servicePoint();
    // Get instance field reference: private System.Boolean _async
    [[deprecated("Use field access instead!")]] bool& dyn__async();
    // Get instance field reference: private System.Boolean _aborted
    [[deprecated("Use field access instead!")]] bool& dyn__aborted();
    // Get instance field reference: private System.Boolean _timedOut
    [[deprecated("Use field access instead!")]] bool& dyn__timedOut();
    // Get instance field reference: private System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception();
    // Get instance field reference: private System.Net.TimerThread/Queue _timerQueue
    [[deprecated("Use field access instead!")]] ::System::Net::TimerThread::Queue*& dyn__timerQueue();
    // Get instance field reference: private System.Net.TimerThread/Callback _timerCallback
    [[deprecated("Use field access instead!")]] ::System::Net::TimerThread::Callback*& dyn__timerCallback();
    // Get instance field reference: private System.Boolean _enableSsl
    [[deprecated("Use field access instead!")]] bool& dyn__enableSsl();
    // Get instance field reference: private System.Net.FtpControlStream _connection
    [[deprecated("Use field access instead!")]] ::System::Net::FtpControlStream*& dyn__connection();
    // Get instance field reference: private System.IO.Stream _stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private System.Net.FtpWebRequest/RequestStage _requestStage
    [[deprecated("Use field access instead!")]] ::System::Net::FtpWebRequest::RequestStage& dyn__requestStage();
    // Get instance field reference: private System.Boolean _onceFailed
    [[deprecated("Use field access instead!")]] bool& dyn__onceFailed();
    // Get instance field reference: private System.Net.WebHeaderCollection _ftpRequestHeaders
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn__ftpRequestHeaders();
    // Get instance field reference: private System.Net.FtpWebResponse _ftpWebResponse
    [[deprecated("Use field access instead!")]] ::System::Net::FtpWebResponse*& dyn__ftpWebResponse();
    // Get instance field reference: private System.Int32 _readWriteTimeout
    [[deprecated("Use field access instead!")]] int& dyn__readWriteTimeout();
    // Get instance field reference: private System.Net.ContextAwareResult _writeAsyncResult
    [[deprecated("Use field access instead!")]] ::System::Net::ContextAwareResult*& dyn__writeAsyncResult();
    // Get instance field reference: private System.Net.LazyAsyncResult _readAsyncResult
    [[deprecated("Use field access instead!")]] ::System::Net::LazyAsyncResult*& dyn__readAsyncResult();
    // Get instance field reference: private System.Net.LazyAsyncResult _requestCompleteAsyncResult
    [[deprecated("Use field access instead!")]] ::System::Net::LazyAsyncResult*& dyn__requestCompleteAsyncResult();
    // System.Net.FtpMethodInfo get_MethodInfo()
    // Offset: 0x4FB8264
    ::System::Net::FtpMethodInfo* get_MethodInfo();
    // public System.String get_RenameTo()
    // Offset: 0x4FB84A0
    ::StringW get_RenameTo();
    // public System.Void set_RenameTo(System.String value)
    // Offset: 0x4FB84A8
    void set_RenameTo(::StringW value);
    // System.Int32 get_RemainingTimeout()
    // Offset: 0x4FB87C4
    int get_RemainingTimeout();
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0x4FB87CC
    int get_ReadWriteTimeout();
    // public System.Void set_ReadWriteTimeout(System.Int32 value)
    // Offset: 0x4FB87D4
    void set_ReadWriteTimeout(int value);
    // public System.Int64 get_ContentOffset()
    // Offset: 0x4FB8894
    int64_t get_ContentOffset();
    // public System.Void set_ContentOffset(System.Int64 value)
    // Offset: 0x4FB889C
    void set_ContentOffset(int64_t value);
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x4FB8A28
    ::System::Net::ServicePoint* get_ServicePoint();
    // System.Boolean get_Aborted()
    // Offset: 0x4FB8AA8
    bool get_Aborted();
    // System.Void .ctor(System.Uri uri)
    // Offset: 0x4FB8AB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpWebRequest* New_ctor(::System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::FtpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpWebRequest*, creationType>(uri)));
    }
    // private System.Void SubmitRequest(System.Boolean isAsync)
    // Offset: 0x4FB9AB4
    void SubmitRequest(bool isAsync);
    // private System.Exception TranslateConnectException(System.Exception e)
    // Offset: 0x4FBCC70
    ::System::Exception* TranslateConnectException(::System::Exception* e);
    // private System.Void CreateConnectionAsync()
    // Offset: 0x4FBC33C
    void CreateConnectionAsync();
    // private System.Net.FtpControlStream CreateConnection()
    // Offset: 0x4FBC3E8
    ::System::Net::FtpControlStream* CreateConnection();
    // private System.IO.Stream TimedSubmitRequestHelper(System.Boolean isAsync)
    // Offset: 0x4FBC5A0
    ::System::IO::Stream* TimedSubmitRequestHelper(bool isAsync);
    // private System.Void TimerCallback(System.Net.TimerThread/Timer timer, System.Int32 timeNoticed, System.Object context)
    // Offset: 0x4FBCDE8
    void TimerCallback(::System::Net::TimerThread::Timer* timer, int timeNoticed, ::Il2CppObject* context);
    // private System.Net.TimerThread/Queue get_TimerQueue()
    // Offset: 0x4FBCD68
    ::System::Net::TimerThread::Queue* get_TimerQueue();
    // private System.Boolean AttemptedRecovery(System.Exception e)
    // Offset: 0x4FBC9D8
    bool AttemptedRecovery(::System::Exception* e);
    // private System.Void SetException(System.Exception exception)
    // Offset: 0x4FBA4A0
    void SetException(::System::Exception* exception);
    // private System.Void CheckError()
    // Offset: 0x4FB9654
    void CheckError();
    // System.Void RequestCallback(System.Object obj)
    // Offset: 0x4FBCF30
    void RequestCallback(::Il2CppObject* obj);
    // private System.Void SyncRequestCallback(System.Object obj)
    // Offset: 0x4FBDA10
    void SyncRequestCallback(::Il2CppObject* obj);
    // private System.Void AsyncRequestCallback(System.Object obj)
    // Offset: 0x4FBCF40
    void AsyncRequestCallback(::Il2CppObject* obj);
    // private System.Net.FtpWebRequest/RequestStage FinishRequestStage(System.Net.FtpWebRequest/RequestStage stage)
    // Offset: 0x4FB9668
    ::System::Net::FtpWebRequest::RequestStage FinishRequestStage(::System::Net::FtpWebRequest::RequestStage stage);
    // public System.Boolean get_KeepAlive()
    // Offset: 0x4FBE2D4
    bool get_KeepAlive();
    // public System.Void set_KeepAlive(System.Boolean value)
    // Offset: 0x4FBE2DC
    void set_KeepAlive(bool value);
    // public System.Boolean get_UseBinary()
    // Offset: 0x4FBE3F0
    bool get_UseBinary();
    // public System.Void set_UseBinary(System.Boolean value)
    // Offset: 0x4FBE3F8
    void set_UseBinary(bool value);
    // public System.Boolean get_UsePassive()
    // Offset: 0x4FBE464
    bool get_UsePassive();
    // public System.Void set_UsePassive(System.Boolean value)
    // Offset: 0x4FBE46C
    void set_UsePassive(bool value);
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x4FBE4D8
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
    // Offset: 0x4FBE5D4
    void set_ClientCertificates(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* value);
    // public System.Boolean get_EnableSsl()
    // Offset: 0x4FBE630
    bool get_EnableSsl();
    // public System.Void set_EnableSsl(System.Boolean value)
    // Offset: 0x4FBE638
    void set_EnableSsl(bool value);
    // private System.Boolean get_InUse()
    // Offset: 0x4FB8488
    bool get_InUse();
    // private System.Void EnsureFtpWebResponse(System.Exception exception)
    // Offset: 0x4FB9FB4
    void EnsureFtpWebResponse(::System::Exception* exception);
    // System.Void DataStreamClosed(System.Net.CloseExState closeState)
    // Offset: 0x4FBEA2C
    void DataStreamClosed(::System::Net::CloseExState closeState);
    // static public System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
    // Offset: 0x4FB826C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.Cache.RequestCachePolicy WebRequest::get_DefaultCachePolicy()
    static ::System::Net::Cache::RequestCachePolicy* get_DefaultCachePolicy();
    // static public System.Void set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy value)
    // Offset: 0x4FB82BC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy value)
    static void set_DefaultCachePolicy(::System::Net::Cache::RequestCachePolicy* value);
    // public override System.String get_Method()
    // Offset: 0x4FB82C0
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::StringW get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0x4FB82DC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::StringW value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0x4FB8580
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    ::System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x4FB8588
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(::System::Net::ICredentials* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0x4FB86D4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    ::System::Uri* get_RequestUri();
    // public override System.Int32 get_Timeout()
    // Offset: 0x4FB86DC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // public override System.Void set_Timeout(System.Int32 value)
    // Offset: 0x4FB86E4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Timeout(System.Int32 value)
    void set_Timeout(int value);
    // public override System.Int64 get_ContentLength()
    // Offset: 0x4FB893C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x4FB8944
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0x4FB894C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    ::System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x4FB8954
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(::System::Net::IWebProxy* value);
    // public override System.String get_ConnectionGroupName()
    // Offset: 0x4FB89B8
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_ConnectionGroupName()
    ::StringW get_ConnectionGroupName();
    // public override System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x4FB89C0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ConnectionGroupName(System.String value)
    void set_ConnectionGroupName(::StringW value);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0x4FB8EB8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    ::System::Net::WebResponse* GetResponse();
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x4FBA854
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetResponse(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x4FBAF68
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    ::System::Net::WebResponse* EndGetResponse(::System::IAsyncResult* asyncResult);
    // public override System.IO.Stream GetRequestStream()
    // Offset: 0x4FBB384
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::GetRequestStream()
    ::System::IO::Stream* GetRequestStream();
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x4FBB94C
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetRequestStream(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x4FBBEBC
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult);
    // public override System.Void Abort()
    // Offset: 0x4FBDE0C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // public override System.Net.Cache.RequestCachePolicy get_CachePolicy()
    // Offset: 0x4FBE340
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.Cache.RequestCachePolicy WebRequest::get_CachePolicy()
    ::System::Net::Cache::RequestCachePolicy* get_CachePolicy();
    // public override System.Void set_CachePolicy(System.Net.Cache.RequestCachePolicy value)
    // Offset: 0x4FBE38C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_CachePolicy(System.Net.Cache.RequestCachePolicy value)
    void set_CachePolicy(::System::Net::Cache::RequestCachePolicy* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x4FBE6A4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    ::System::Net::WebHeaderCollection* get_Headers();
    // public override System.Void set_Headers(System.Net.WebHeaderCollection value)
    // Offset: 0x4FBE714
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Headers(System.Net.WebHeaderCollection value)
    void set_Headers(::System::Net::WebHeaderCollection* value);
    // public override System.String get_ContentType()
    // Offset: 0x4FBE71C
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_ContentType()
    ::StringW get_ContentType();
    // public override System.Void set_ContentType(System.String value)
    // Offset: 0x4FBE744
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentType(System.String value)
    void set_ContentType(::StringW value);
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0x4FBE76C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // public override System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x4FBE794
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_UseDefaultCredentials(System.Boolean value)
    void set_UseDefaultCredentials(bool value);
    // public override System.Boolean get_PreAuthenticate()
    // Offset: 0x4FBE7BC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_PreAuthenticate()
    bool get_PreAuthenticate();
    // public override System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x4FBE7E4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_PreAuthenticate(System.Boolean value)
    void set_PreAuthenticate(bool value);
    // static private System.Void .cctor()
    // Offset: 0x4FBEAB0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x4FBEBDC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::FtpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpWebRequest*, creationType>()));
    }
  }; // System.Net.FtpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(FtpWebRequest), 272 + sizeof(::System::Net::LazyAsyncResult*)> __System_Net_FtpWebRequestSizeCheck;
  static_assert(sizeof(FtpWebRequest) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpWebRequest::RequestStage, "System.Net", "FtpWebRequest/RequestStage");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_MethodInfo
// Il2CppName: get_MethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpMethodInfo* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_MethodInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_MethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_RenameTo
// Il2CppName: get_RenameTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_RenameTo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_RenameTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_RenameTo
// Il2CppName: set_RenameTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_RenameTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_RenameTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_RemainingTimeout
// Il2CppName: get_RemainingTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_RemainingTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_RemainingTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ReadWriteTimeout
// Il2CppName: get_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ReadWriteTimeout
// Il2CppName: set_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(int)>(&System::Net::FtpWebRequest::set_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ContentOffset
// Il2CppName: get_ContentOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ContentOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ContentOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ContentOffset
// Il2CppName: set_ContentOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(int64_t)>(&System::Net::FtpWebRequest::set_ContentOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ContentOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SubmitRequest
// Il2CppName: SubmitRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::SubmitRequest)> {
  static const MethodInfo* get() {
    static auto* isAsync = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SubmitRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isAsync});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::TranslateConnectException
// Il2CppName: TranslateConnectException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Net::FtpWebRequest::*)(::System::Exception*)>(&System::Net::FtpWebRequest::TranslateConnectException)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "TranslateConnectException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CreateConnectionAsync
// Il2CppName: CreateConnectionAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CreateConnectionAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CreateConnectionAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CreateConnection
// Il2CppName: CreateConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpControlStream* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CreateConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CreateConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::TimedSubmitRequestHelper
// Il2CppName: TimedSubmitRequestHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::TimedSubmitRequestHelper)> {
  static const MethodInfo* get() {
    static auto* isAsync = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "TimedSubmitRequestHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isAsync});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::TimerCallback
// Il2CppName: TimerCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::TimerThread::Timer*, int, ::Il2CppObject*)>(&System::Net::FtpWebRequest::TimerCallback)> {
  static const MethodInfo* get() {
    static auto* timer = &::il2cpp_utils::GetClassFromName("System.Net", "TimerThread/Timer")->byval_arg;
    static auto* timeNoticed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "TimerCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timer, timeNoticed, context});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_TimerQueue
// Il2CppName: get_TimerQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::TimerThread::Queue* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_TimerQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_TimerQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::AttemptedRecovery
// Il2CppName: AttemptedRecovery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)(::System::Exception*)>(&System::Net::FtpWebRequest::AttemptedRecovery)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "AttemptedRecovery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SetException
// Il2CppName: SetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Exception*)>(&System::Net::FtpWebRequest::SetException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CheckError
// Il2CppName: CheckError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CheckError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CheckError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::RequestCallback
// Il2CppName: RequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::Il2CppObject*)>(&System::Net::FtpWebRequest::RequestCallback)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "RequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SyncRequestCallback
// Il2CppName: SyncRequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::Il2CppObject*)>(&System::Net::FtpWebRequest::SyncRequestCallback)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SyncRequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::AsyncRequestCallback
// Il2CppName: AsyncRequestCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::Il2CppObject*)>(&System::Net::FtpWebRequest::AsyncRequestCallback)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "AsyncRequestCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::FinishRequestStage
// Il2CppName: FinishRequestStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpWebRequest::RequestStage (System::Net::FtpWebRequest::*)(::System::Net::FtpWebRequest::RequestStage)>(&System::Net::FtpWebRequest::FinishRequestStage)> {
  static const MethodInfo* get() {
    static auto* stage = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest/RequestStage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "FinishRequestStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stage});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_KeepAlive
// Il2CppName: get_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_KeepAlive
// Il2CppName: set_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_KeepAlive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_UseBinary
// Il2CppName: get_UseBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_UseBinary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_UseBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_UseBinary
// Il2CppName: set_UseBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_UseBinary)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_UseBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_UsePassive
// Il2CppName: get_UsePassive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_UsePassive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_UsePassive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_UsePassive
// Il2CppName: set_UsePassive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_UsePassive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_UsePassive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ClientCertificates
// Il2CppName: set_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&System::Net::FtpWebRequest::set_ClientCertificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_EnableSsl
// Il2CppName: get_EnableSsl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_EnableSsl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_EnableSsl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_EnableSsl
// Il2CppName: set_EnableSsl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_EnableSsl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_EnableSsl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_InUse
// Il2CppName: get_InUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_InUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_InUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::EnsureFtpWebResponse
// Il2CppName: EnsureFtpWebResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Exception*)>(&System::Net::FtpWebRequest::EnsureFtpWebResponse)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "EnsureFtpWebResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::DataStreamClosed
// Il2CppName: DataStreamClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::CloseExState)>(&System::Net::FtpWebRequest::DataStreamClosed)> {
  static const MethodInfo* get() {
    static auto* closeState = &::il2cpp_utils::GetClassFromName("System.Net", "CloseExState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "DataStreamClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeState});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_DefaultCachePolicy
// Il2CppName: get_DefaultCachePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cache::RequestCachePolicy* (*)()>(&System::Net::FtpWebRequest::get_DefaultCachePolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_DefaultCachePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_DefaultCachePolicy
// Il2CppName: set_DefaultCachePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Cache::RequestCachePolicy*)>(&System::Net::FtpWebRequest::set_DefaultCachePolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_DefaultCachePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Method
// Il2CppName: set_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_Method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICredentials* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::ICredentials*)>(&System::Net::FtpWebRequest::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_RequestUri
// Il2CppName: get_RequestUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_RequestUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_RequestUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Timeout
// Il2CppName: set_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(int)>(&System::Net::FtpWebRequest::set_Timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ContentLength
// Il2CppName: set_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(int64_t)>(&System::Net::FtpWebRequest::set_ContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Proxy
// Il2CppName: set_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::IWebProxy*)>(&System::Net::FtpWebRequest::set_Proxy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ConnectionGroupName
// Il2CppName: get_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ConnectionGroupName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ConnectionGroupName
// Il2CppName: set_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_ConnectionGroupName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::GetResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::BeginGetResponse
// Il2CppName: BeginGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::FtpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::FtpWebRequest::BeginGetResponse)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "BeginGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::EndGetResponse
// Il2CppName: EndGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::FtpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::FtpWebRequest::EndGetResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "EndGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetRequestStream
// Il2CppName: GetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::GetRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::BeginGetRequestStream
// Il2CppName: BeginGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::FtpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::FtpWebRequest::BeginGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "BeginGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::FtpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::FtpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_CachePolicy
// Il2CppName: get_CachePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cache::RequestCachePolicy* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_CachePolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_CachePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_CachePolicy
// Il2CppName: set_CachePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::Cache::RequestCachePolicy*)>(&System::Net::FtpWebRequest::set_CachePolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_CachePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Headers
// Il2CppName: set_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::WebHeaderCollection*)>(&System::Net::FtpWebRequest::set_Headers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "WebHeaderCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ContentType
// Il2CppName: get_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ContentType
// Il2CppName: set_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_ContentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_UseDefaultCredentials
// Il2CppName: get_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_UseDefaultCredentials
// Il2CppName: set_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_PreAuthenticate
// Il2CppName: get_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_PreAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_PreAuthenticate
// Il2CppName: set_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_PreAuthenticate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::FtpWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
