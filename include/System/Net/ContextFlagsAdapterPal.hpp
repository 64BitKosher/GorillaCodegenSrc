// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Interop/NetSecurityNative
#include "GlobalNamespace/Interop__NetSecurityNative.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Interop/NetSecurityNative/GssFlags
#include "GlobalNamespace/Interop__NetSecurityNative_GssFlags.hpp"
// Including type: System.Net.ContextFlagsPal
#include "System/Net/ContextFlagsPal.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ContextFlagsAdapterPal
  class ContextFlagsAdapterPal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ContextFlagsAdapterPal);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ContextFlagsAdapterPal*, "System.Net", "ContextFlagsAdapterPal");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ContextFlagsAdapterPal
  // [TokenAttribute] Offset: FFFFFFFF
  class ContextFlagsAdapterPal : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::ContextFlagsAdapterPal::ContextFlagMapping
    struct ContextFlagMapping;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Net.ContextFlagsAdapterPal/ContextFlagMapping
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct ContextFlagMapping/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly Interop/NetSecurityNative/GssFlags GssFlags
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::Interop_::NetSecurityNative::GssFlags GssFlags;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::Interop_::NetSecurityNative::GssFlags) == 0x4);
      // public readonly System.Net.ContextFlagsPal ContextFlag
      // Size: 0x4
      // Offset: 0x4
      ::System::Net::ContextFlagsPal ContextFlag;
      // Field size check
      static_assert(sizeof(::System::Net::ContextFlagsPal) == 0x4);
      public:
      // Creating value type constructor for type: ContextFlagMapping
      constexpr ContextFlagMapping(::GlobalNamespace::Interop_::NetSecurityNative::GssFlags GssFlags_ = {}, ::System::Net::ContextFlagsPal ContextFlag_ = {}) noexcept : GssFlags{GssFlags_}, ContextFlag{ContextFlag_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly Interop/NetSecurityNative/GssFlags GssFlags
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::Interop_::NetSecurityNative::GssFlags& dyn_GssFlags();
      // Get instance field reference: public readonly System.Net.ContextFlagsPal ContextFlag
      [[deprecated("Use field access instead!")]] ::System::Net::ContextFlagsPal& dyn_ContextFlag();
      // public System.Void .ctor(Interop/NetSecurityNative/GssFlags gssFlag, System.Net.ContextFlagsPal contextFlag)
      // Offset: 0x4FA48E8
      // ABORTED: conflicts with another method.  ContextFlagMapping(::GlobalNamespace::Interop_::NetSecurityNative::GssFlags gssFlag, ::System::Net::ContextFlagsPal contextFlag);
    }; // System.Net.ContextFlagsAdapterPal/ContextFlagMapping
    #pragma pack(pop)
    static check_size<sizeof(ContextFlagsAdapterPal::ContextFlagMapping), 4 + sizeof(::System::Net::ContextFlagsPal)> __System_Net_ContextFlagsAdapterPal_ContextFlagMappingSizeCheck;
    static_assert(sizeof(ContextFlagsAdapterPal::ContextFlagMapping) == 0x8);
    // Get static field: static private readonly System.Net.ContextFlagsAdapterPal/ContextFlagMapping[] s_contextFlagMapping
    static ::ArrayW<::System::Net::ContextFlagsAdapterPal::ContextFlagMapping> _get_s_contextFlagMapping();
    // Set static field: static private readonly System.Net.ContextFlagsAdapterPal/ContextFlagMapping[] s_contextFlagMapping
    static void _set_s_contextFlagMapping(::ArrayW<::System::Net::ContextFlagsAdapterPal::ContextFlagMapping> value);
    // static System.Net.ContextFlagsPal GetContextFlagsPalFromInterop(Interop/NetSecurityNative/GssFlags gssFlags, System.Boolean isServer)
    // Offset: 0x4FA4678
    static ::System::Net::ContextFlagsPal GetContextFlagsPalFromInterop(::GlobalNamespace::Interop_::NetSecurityNative::GssFlags gssFlags, bool isServer);
    // static Interop/NetSecurityNative/GssFlags GetInteropFromContextFlagsPal(System.Net.ContextFlagsPal flags, System.Boolean isServer)
    // Offset: 0x4FA4740
    static ::GlobalNamespace::Interop_::NetSecurityNative::GssFlags GetInteropFromContextFlagsPal(::System::Net::ContextFlagsPal flags, bool isServer);
    // static private System.Void .cctor()
    // Offset: 0x4FA4804
    static void _cctor();
  }; // System.Net.ContextFlagsAdapterPal
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ContextFlagsAdapterPal::ContextFlagMapping, "System.Net", "ContextFlagsAdapterPal/ContextFlagMapping");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ContextFlagsAdapterPal::GetContextFlagsPalFromInterop
// Il2CppName: GetContextFlagsPalFromInterop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ContextFlagsPal (*)(::GlobalNamespace::Interop_::NetSecurityNative::GssFlags, bool)>(&System::Net::ContextFlagsAdapterPal::GetContextFlagsPalFromInterop)> {
  static const MethodInfo* get() {
    static auto* gssFlags = &::il2cpp_utils::GetClassFromName("", "Interop/NetSecurityNative/GssFlags")->byval_arg;
    static auto* isServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextFlagsAdapterPal*), "GetContextFlagsPalFromInterop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gssFlags, isServer});
  }
};
// Writing MetadataGetter for method: System::Net::ContextFlagsAdapterPal::GetInteropFromContextFlagsPal
// Il2CppName: GetInteropFromContextFlagsPal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Interop_::NetSecurityNative::GssFlags (*)(::System::Net::ContextFlagsPal, bool)>(&System::Net::ContextFlagsAdapterPal::GetInteropFromContextFlagsPal)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net", "ContextFlagsPal")->byval_arg;
    static auto* isServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextFlagsAdapterPal*), "GetInteropFromContextFlagsPal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, isServer});
  }
};
// Writing MetadataGetter for method: System::Net::ContextFlagsAdapterPal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::ContextFlagsAdapterPal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ContextFlagsAdapterPal*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
