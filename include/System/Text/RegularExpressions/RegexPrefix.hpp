// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexPrefix
  struct RegexPrefix;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexPrefix, "System.Text.RegularExpressions", "RegexPrefix");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Text.RegularExpressions.RegexPrefix
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct RegexPrefix/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Boolean <CaseInsensitive>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool CaseInsensitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CaseInsensitive and: Prefix
    char __padding0[0x7] = {};
    // private readonly System.String <Prefix>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::StringW Prefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: RegexPrefix
    constexpr RegexPrefix(bool CaseInsensitive_ = {}, ::StringW Prefix_ = {}) noexcept : CaseInsensitive{CaseInsensitive_}, Prefix{Prefix_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly System.Text.RegularExpressions.RegexPrefix <Empty>k__BackingField
    static ::System::Text::RegularExpressions::RegexPrefix _get_$Empty$k__BackingField();
    // Set static field: static private readonly System.Text.RegularExpressions.RegexPrefix <Empty>k__BackingField
    static void _set_$Empty$k__BackingField(::System::Text::RegularExpressions::RegexPrefix value);
    // Get instance field reference: private readonly System.Boolean <CaseInsensitive>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CaseInsensitive$k__BackingField();
    // Get instance field reference: private readonly System.String <Prefix>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Prefix$k__BackingField();
    // System.Void .ctor(System.String prefix, System.Boolean ci)
    // Offset: 0x4F78630
    RegexPrefix(::StringW prefix, bool ci);
    // System.Boolean get_CaseInsensitive()
    // Offset: 0x4F82EA8
    bool get_CaseInsensitive();
    // static System.Text.RegularExpressions.RegexPrefix get_Empty()
    // Offset: 0x4F82EB0
    static ::System::Text::RegularExpressions::RegexPrefix get_Empty();
    // System.String get_Prefix()
    // Offset: 0x4F82F08
    ::StringW get_Prefix();
    // static private System.Void .cctor()
    // Offset: 0x4F82F10
    static void _cctor();
  }; // System.Text.RegularExpressions.RegexPrefix
  #pragma pack(pop)
  static check_size<sizeof(RegexPrefix), 8 + sizeof(::StringW)> __System_Text_RegularExpressions_RegexPrefixSizeCheck;
  static_assert(sizeof(RegexPrefix) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexPrefix::RegexPrefix
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexPrefix::get_CaseInsensitive
// Il2CppName: get_CaseInsensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexPrefix::*)()>(&System::Text::RegularExpressions::RegexPrefix::get_CaseInsensitive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexPrefix), "get_CaseInsensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexPrefix::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexPrefix (*)()>(&System::Text::RegularExpressions::RegexPrefix::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexPrefix), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexPrefix::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::RegexPrefix::*)()>(&System::Text::RegularExpressions::RegexPrefix::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexPrefix), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexPrefix::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Text::RegularExpressions::RegexPrefix::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexPrefix), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
