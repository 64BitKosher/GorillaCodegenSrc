// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.ValueListBuilder`1
#include "System/Collections/Generic/ValueListBuilder_1_.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Span`1 because it is already included!
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexCode
  class RegexCode;
  // Forward declaring type: RegexTree
  class RegexTree;
  // Forward declaring type: RegexNode
  class RegexNode;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexWriter
  struct RegexWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexWriter, "System.Text.RegularExpressions", "RegexWriter");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Text.RegularExpressions.RegexWriter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct RegexWriter/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Collections.Generic.ValueListBuilder`1<System.Int32> _emitted
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::Collections::Generic::ValueListBuilder_1_<int> emitted;
    // private System.Collections.Generic.ValueListBuilder`1<System.Int32> _intStack
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::System::Collections::Generic::ValueListBuilder_1_<int> intStack;
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32> _stringHash
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* stringHash;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.String> _stringTable
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* stringTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Hashtable _caps
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Hashtable* caps;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Int32 _trackCount
    // Size: 0x4
    // Offset: 0x58
    int trackCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RegexWriter
    constexpr RegexWriter(::System::Collections::Generic::ValueListBuilder_1_<int> emitted_ = {}, ::System::Collections::Generic::ValueListBuilder_1_<int> intStack_ = {}, ::System::Collections::Generic::Dictionary_2<::StringW, int>* stringHash_ = {}, ::System::Collections::Generic::List_1<::StringW>* stringTable_ = {}, ::System::Collections::Hashtable* caps_ = {}, int trackCount_ = {}) noexcept : emitted{emitted_}, intStack{intStack_}, stringHash{stringHash_}, stringTable{stringTable_}, caps{caps_}, trackCount{trackCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.ValueListBuilder`1<System.Int32> _emitted
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ValueListBuilder_1_<int>& dyn__emitted();
    // Get instance field reference: private System.Collections.Generic.ValueListBuilder`1<System.Int32> _intStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ValueListBuilder_1_<int>& dyn__intStack();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32> _stringHash
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn__stringHash();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> _stringTable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__stringTable();
    // Get instance field reference: private System.Collections.Hashtable _caps
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__caps();
    // Get instance field reference: private System.Int32 _trackCount
    [[deprecated("Use field access instead!")]] int& dyn__trackCount();
    // private System.Void .ctor(System.Span`1<System.Int32> emittedSpan, System.Span`1<System.Int32> intStackSpan)
    // Offset: 0x4F84174
    RegexWriter(::System::Span_1<int> emittedSpan, ::System::Span_1<int> intStackSpan);
    // static public System.Text.RegularExpressions.RegexCode Write(System.Text.RegularExpressions.RegexTree tree)
    // Offset: 0x4F842B8
    static ::System::Text::RegularExpressions::RegexCode* Write(::System::Text::RegularExpressions::RegexTree* tree);
    // public System.Void Dispose()
    // Offset: 0x4F847F0
    void Dispose();
    // public System.Text.RegularExpressions.RegexCode RegexCodeFromRegexTree(System.Text.RegularExpressions.RegexTree tree)
    // Offset: 0x4F8439C
    ::System::Text::RegularExpressions::RegexCode* RegexCodeFromRegexTree(::System::Text::RegularExpressions::RegexTree* tree);
    // private System.Void PatchJump(System.Int32 offset, System.Int32 jumpDest)
    // Offset: 0x4F853AC
    void PatchJump(int offset, int jumpDest);
    // private System.Void Emit(System.Int32 op)
    // Offset: 0x4F85410
    void Emit(int op);
    // private System.Void Emit(System.Int32 op, System.Int32 opd1)
    // Offset: 0x4F84844
    void Emit(int op, int opd1);
    // private System.Void Emit(System.Int32 op, System.Int32 opd1, System.Int32 opd2)
    // Offset: 0x4F854D8
    void Emit(int op, int opd1, int opd2);
    // private System.Int32 StringCode(System.String str)
    // Offset: 0x4F85668
    int StringCode(::StringW str);
    // private System.Int32 MapCapnum(System.Int32 capnum)
    // Offset: 0x4F857BC
    int MapCapnum(int capnum);
    // private System.Void EmitFragment(System.Int32 nodetype, System.Text.RegularExpressions.RegexNode node, System.Int32 curIndex)
    // Offset: 0x4F84974
    void EmitFragment(int nodetype, ::System::Text::RegularExpressions::RegexNode* node, int curIndex);
  }; // System.Text.RegularExpressions.RegexWriter
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::RegexWriter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexCode* (*)(::System::Text::RegularExpressions::RegexTree*)>(&System::Text::RegularExpressions::RegexWriter::Write)> {
  static const MethodInfo* get() {
    static auto* tree = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)()>(&System::Text::RegularExpressions::RegexWriter::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::RegexCodeFromRegexTree
// Il2CppName: RegexCodeFromRegexTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexCode* (System::Text::RegularExpressions::RegexWriter::*)(::System::Text::RegularExpressions::RegexTree*)>(&System::Text::RegularExpressions::RegexWriter::RegexCodeFromRegexTree)> {
  static const MethodInfo* get() {
    static auto* tree = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "RegexCodeFromRegexTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::PatchJump
// Il2CppName: PatchJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)(int, int)>(&System::Text::RegularExpressions::RegexWriter::PatchJump)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* jumpDest = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "PatchJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, jumpDest});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)(int)>(&System::Text::RegularExpressions::RegexWriter::Emit)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)(int, int)>(&System::Text::RegularExpressions::RegexWriter::Emit)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* opd1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op, opd1});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)(int, int, int)>(&System::Text::RegularExpressions::RegexWriter::Emit)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* opd1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* opd2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op, opd1, opd2});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::StringCode
// Il2CppName: StringCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexWriter::*)(::StringW)>(&System::Text::RegularExpressions::RegexWriter::StringCode)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "StringCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::MapCapnum
// Il2CppName: MapCapnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexWriter::*)(int)>(&System::Text::RegularExpressions::RegexWriter::MapCapnum)> {
  static const MethodInfo* get() {
    static auto* capnum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "MapCapnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capnum});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexWriter::EmitFragment
// Il2CppName: EmitFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexWriter::*)(int, ::System::Text::RegularExpressions::RegexNode*, int)>(&System::Text::RegularExpressions::RegexWriter::EmitFragment)> {
  static const MethodInfo* get() {
    static auto* nodetype = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexNode")->byval_arg;
    static auto* curIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexWriter), "EmitFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodetype, node, curIndex});
  }
};
