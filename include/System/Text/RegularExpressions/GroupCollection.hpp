// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Group
  class Group;
  // Forward declaring type: Match
  class Match;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: GroupCollection
  class GroupCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::GroupCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::GroupCollection*, "System.Text.RegularExpressions", "GroupCollection");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.GroupCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  class GroupCollection : public ::Il2CppObject/*, public ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Group*>, public ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Group*>, public ::System::Collections::IList*/ {
    public:
    // Nested type: ::System::Text::RegularExpressions::GroupCollection::Enumerator
    class Enumerator;
    public:
    // private readonly System.Text.RegularExpressions.Match _match
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::RegularExpressions::Match* match;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Match*) == 0x8);
    // private readonly System.Collections.Hashtable _captureMap
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Hashtable* captureMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Text.RegularExpressions.Group[] _groups
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Text::RegularExpressions::Group*> groups;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Text::RegularExpressions::Group*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Group*>
    operator ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Group*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Group*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Group*>
    operator ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Group*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Group*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IList
    operator ::System::Collections::IList() noexcept {
      return *reinterpret_cast<::System::Collections::IList*>(this);
    }
    // Get instance field reference: private readonly System.Text.RegularExpressions.Match _match
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Match*& dyn__match();
    // Get instance field reference: private readonly System.Collections.Hashtable _captureMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__captureMap();
    // Get instance field reference: private System.Text.RegularExpressions.Group[] _groups
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Text::RegularExpressions::Group*>& dyn__groups();
    // System.Void .ctor(System.Text.RegularExpressions.Match match, System.Collections.Hashtable caps)
    // Offset: 0x4F68CF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupCollection* New_ctor(::System::Text::RegularExpressions::Match* match, ::System::Collections::Hashtable* caps) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::GroupCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupCollection*, creationType>(match, caps)));
    }
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x4F68D3C
    bool get_IsReadOnly();
    // public System.Int32 get_Count()
    // Offset: 0x4F68D44
    int get_Count();
    // public System.Text.RegularExpressions.Group get_Item(System.Int32 groupnum)
    // Offset: 0x4F68D68
    ::System::Text::RegularExpressions::Group* get_Item(int groupnum);
    // public System.Text.RegularExpressions.Group get_Item(System.String groupname)
    // Offset: 0x4F68E70
    ::System::Text::RegularExpressions::Group* get_Item(::StringW groupname);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x4F69040
    ::System::Collections::IEnumerator* GetEnumerator();
    // private System.Collections.Generic.IEnumerator`1<System.Text.RegularExpressions.Group> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator()
    // Offset: 0x4F690EC
    ::System::Collections::Generic::IEnumerator_1<::System::Text::RegularExpressions::Group*>* System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Group$_GetEnumerator();
    // private System.Text.RegularExpressions.Group GetGroup(System.Int32 groupnum)
    // Offset: 0x4F68D6C
    ::System::Text::RegularExpressions::Group* GetGroup(int groupnum);
    // private System.Text.RegularExpressions.Group GetGroupImpl(System.Int32 groupnum)
    // Offset: 0x4F6915C
    ::System::Text::RegularExpressions::Group* GetGroupImpl(int groupnum);
    // public System.Boolean get_IsSynchronized()
    // Offset: 0x4F6948C
    bool get_IsSynchronized();
    // public System.Object get_SyncRoot()
    // Offset: 0x4F69494
    ::Il2CppObject* get_SyncRoot();
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x4F6949C
    void CopyTo(::System::Array* array, int arrayIndex);
    // public System.Void CopyTo(System.Text.RegularExpressions.Group[] array, System.Int32 arrayIndex)
    // Offset: 0x4F69558
    void CopyTo(::ArrayW<::System::Text::RegularExpressions::Group*> array, int arrayIndex);
    // private System.Int32 System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf(System.Text.RegularExpressions.Group item)
    // Offset: 0x4F696D8
    int System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_IndexOf(::System::Text::RegularExpressions::Group* item);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert(System.Int32 index, System.Text.RegularExpressions.Group item)
    // Offset: 0x4F69790
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_Insert(int index, ::System::Text::RegularExpressions::Group* item);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt(System.Int32 index)
    // Offset: 0x4F697DC
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_RemoveAt(int index);
    // private System.Text.RegularExpressions.Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.get_Item(System.Int32 index)
    // Offset: 0x4F69828
    ::System::Text::RegularExpressions::Group* System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_get_Item(int index);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.set_Item(System.Int32 index, System.Text.RegularExpressions.Group value)
    // Offset: 0x4F6982C
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_set_Item(int index, ::System::Text::RegularExpressions::Group* value);
    // private System.Void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add(System.Text.RegularExpressions.Group item)
    // Offset: 0x4F69878
    void System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Add(::System::Text::RegularExpressions::Group* item);
    // private System.Void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear()
    // Offset: 0x4F698C4
    void System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Clear();
    // private System.Boolean System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains(System.Text.RegularExpressions.Group item)
    // Offset: 0x4F69910
    bool System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Contains(::System::Text::RegularExpressions::Group* item);
    // private System.Boolean System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove(System.Text.RegularExpressions.Group item)
    // Offset: 0x4F699C4
    bool System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Remove(::System::Text::RegularExpressions::Group* item);
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x4F69A10
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x4F69A5C
    void System_Collections_IList_Clear();
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x4F69AA8
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x4F69B9C
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x4F69C90
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.get_IsFixedSize()
    // Offset: 0x4F69CDC
    bool System_Collections_IList_get_IsFixedSize();
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x4F69CE4
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x4F69D30
    void System_Collections_IList_RemoveAt(int index);
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x4F69D7C
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x4F69D80
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // System.Void .ctor()
    // Offset: 0x4F69DCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::GroupCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupCollection*, creationType>()));
    }
  }; // System.Text.RegularExpressions.GroupCollection
  #pragma pack(pop)
  static check_size<sizeof(GroupCollection), 32 + sizeof(::ArrayW<::System::Text::RegularExpressions::Group*>)> __System_Text_RegularExpressions_GroupCollectionSizeCheck;
  static_assert(sizeof(GroupCollection) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Group* (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* groupnum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupnum});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Group* (System::Text::RegularExpressions::GroupCollection::*)(::StringW)>(&System::Text::RegularExpressions::GroupCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* groupname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupname});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Group$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::System::Text::RegularExpressions::Group*>* (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Group$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::GetGroup
// Il2CppName: GetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Group* (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::GetGroup)> {
  static const MethodInfo* get() {
    static auto* groupnum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "GetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupnum});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::GetGroupImpl
// Il2CppName: GetGroupImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Group* (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::GetGroupImpl)> {
  static const MethodInfo* get() {
    static auto* groupnum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "GetGroupImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupnum});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_IsSynchronized
// Il2CppName: get_IsSynchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::get_IsSynchronized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_IsSynchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(::System::Array*, int)>(&System::Text::RegularExpressions::GroupCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(::ArrayW<::System::Text::RegularExpressions::Group*>, int)>(&System::Text::RegularExpressions::GroupCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group"), 1)->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_IndexOf
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::GroupCollection::*)(::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_IndexOf)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_Insert
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int, ::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_RemoveAt
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_get_Item
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Group* (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_set_Item
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int, ::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Group$_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Add
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Add)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Clear
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Contains
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)(::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Contains)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Remove
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)(::System::Text::RegularExpressions::Group*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Group$_Remove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Group")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Add
// Il2CppName: System.Collections.IList.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::GroupCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Clear
// Il2CppName: System.Collections.IList.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Contains
// Il2CppName: System.Collections.IList.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_IndexOf
// Il2CppName: System.Collections.IList.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::GroupCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Insert
// Il2CppName: System.Collections.IList.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int, ::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_get_IsFixedSize
// Il2CppName: System.Collections.IList.get_IsFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::GroupCollection::*)()>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_get_IsFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.get_IsFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Remove
// Il2CppName: System.Collections.IList.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_RemoveAt
// Il2CppName: System.Collections.IList.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_get_Item
// Il2CppName: System.Collections.IList.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Text::RegularExpressions::GroupCollection::*)(int)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::System_Collections_IList_set_Item
// Il2CppName: System.Collections.IList.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::GroupCollection::*)(int, ::Il2CppObject*)>(&System::Text::RegularExpressions::GroupCollection::System_Collections_IList_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::GroupCollection*), "System.Collections.IList.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::GroupCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
