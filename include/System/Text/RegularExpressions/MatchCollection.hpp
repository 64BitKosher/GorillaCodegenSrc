// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Match
  class Match;
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: MatchCollection
  class MatchCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::MatchCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::MatchCollection*, "System.Text.RegularExpressions", "MatchCollection");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.MatchCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  class MatchCollection : public ::Il2CppObject/*, public ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Match*>, public ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Match*>, public ::System::Collections::IList*/ {
    public:
    // Nested type: ::System::Text::RegularExpressions::MatchCollection::Enumerator
    class Enumerator;
    public:
    // private readonly System.Text.RegularExpressions.Regex _regex
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::RegularExpressions::Regex* regex;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Text.RegularExpressions.Match> _matches
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::Match*>* matches;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Text::RegularExpressions::Match*>*) == 0x8);
    // private System.Boolean _done
    // Size: 0x1
    // Offset: 0x20
    bool done;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: done and: input
    char __padding2[0x7] = {};
    // private readonly System.String _input
    // Size: 0x8
    // Offset: 0x28
    ::StringW input;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Int32 _beginning
    // Size: 0x4
    // Offset: 0x30
    int beginning;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _length
    // Size: 0x4
    // Offset: 0x34
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _startat
    // Size: 0x4
    // Offset: 0x38
    int startat;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevlen
    // Size: 0x4
    // Offset: 0x3C
    int prevlen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Match*>
    operator ::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Match*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IList_1<::System::Text::RegularExpressions::Match*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Match*>
    operator ::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Match*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::System::Text::RegularExpressions::Match*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IList
    operator ::System::Collections::IList() noexcept {
      return *reinterpret_cast<::System::Collections::IList*>(this);
    }
    // Get instance field reference: private readonly System.Text.RegularExpressions.Regex _regex
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& dyn__regex();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Text.RegularExpressions.Match> _matches
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::Match*>*& dyn__matches();
    // Get instance field reference: private System.Boolean _done
    [[deprecated("Use field access instead!")]] bool& dyn__done();
    // Get instance field reference: private readonly System.String _input
    [[deprecated("Use field access instead!")]] ::StringW& dyn__input();
    // Get instance field reference: private readonly System.Int32 _beginning
    [[deprecated("Use field access instead!")]] int& dyn__beginning();
    // Get instance field reference: private readonly System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length();
    // Get instance field reference: private System.Int32 _startat
    [[deprecated("Use field access instead!")]] int& dyn__startat();
    // Get instance field reference: private System.Int32 _prevlen
    [[deprecated("Use field access instead!")]] int& dyn__prevlen();
    // System.Void .ctor(System.Text.RegularExpressions.Regex regex, System.String input, System.Int32 beginning, System.Int32 length, System.Int32 startat)
    // Offset: 0x4F6AE6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchCollection* New_ctor(::System::Text::RegularExpressions::Regex* regex, ::StringW input, int beginning, int length, int startat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::MatchCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchCollection*, creationType>(regex, input, beginning, length, startat)));
    }
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x4F6AFC0
    bool get_IsReadOnly();
    // public System.Int32 get_Count()
    // Offset: 0x4F6AFC8
    int get_Count();
    // public System.Text.RegularExpressions.Match get_Item(System.Int32 i)
    // Offset: 0x4F6B038
    ::System::Text::RegularExpressions::Match* get_Item(int i);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x4F6B20C
    ::System::Collections::IEnumerator* GetEnumerator();
    // private System.Collections.Generic.IEnumerator`1<System.Text.RegularExpressions.Match> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator()
    // Offset: 0x4F6B2B8
    ::System::Collections::Generic::IEnumerator_1<::System::Text::RegularExpressions::Match*>* System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Match$_GetEnumerator();
    // private System.Text.RegularExpressions.Match GetMatch(System.Int32 i)
    // Offset: 0x4F6B098
    ::System::Text::RegularExpressions::Match* GetMatch(int i);
    // private System.Void EnsureInitialized()
    // Offset: 0x4F6B024
    void EnsureInitialized();
    // public System.Boolean get_IsSynchronized()
    // Offset: 0x4F6B328
    bool get_IsSynchronized();
    // public System.Object get_SyncRoot()
    // Offset: 0x4F6B330
    ::Il2CppObject* get_SyncRoot();
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x4F6B334
    void CopyTo(::System::Array* array, int arrayIndex);
    // public System.Void CopyTo(System.Text.RegularExpressions.Match[] array, System.Int32 arrayIndex)
    // Offset: 0x4F6B400
    void CopyTo(::ArrayW<::System::Text::RegularExpressions::Match*> array, int arrayIndex);
    // private System.Int32 System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf(System.Text.RegularExpressions.Match item)
    // Offset: 0x4F6B47C
    int System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_IndexOf(::System::Text::RegularExpressions::Match* item);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert(System.Int32 index, System.Text.RegularExpressions.Match item)
    // Offset: 0x4F6B4E8
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_Insert(int index, ::System::Text::RegularExpressions::Match* item);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt(System.Int32 index)
    // Offset: 0x4F6B534
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_RemoveAt(int index);
    // private System.Text.RegularExpressions.Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.get_Item(System.Int32 index)
    // Offset: 0x4F6B580
    ::System::Text::RegularExpressions::Match* System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_get_Item(int index);
    // private System.Void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.set_Item(System.Int32 index, System.Text.RegularExpressions.Match value)
    // Offset: 0x4F6B590
    void System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_set_Item(int index, ::System::Text::RegularExpressions::Match* value);
    // private System.Void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add(System.Text.RegularExpressions.Match item)
    // Offset: 0x4F6B5DC
    void System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Add(::System::Text::RegularExpressions::Match* item);
    // private System.Void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear()
    // Offset: 0x4F6B628
    void System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Clear();
    // private System.Boolean System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains(System.Text.RegularExpressions.Match item)
    // Offset: 0x4F6B674
    bool System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Contains(::System::Text::RegularExpressions::Match* item);
    // private System.Boolean System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove(System.Text.RegularExpressions.Match item)
    // Offset: 0x4F6B6E0
    bool System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Remove(::System::Text::RegularExpressions::Match* item);
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x4F6B72C
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x4F6B778
    void System_Collections_IList_Clear();
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x4F6B7C4
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x4F6B8B8
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x4F6B9AC
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.get_IsFixedSize()
    // Offset: 0x4F6B9F8
    bool System_Collections_IList_get_IsFixedSize();
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x4F6BA00
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x4F6BA4C
    void System_Collections_IList_RemoveAt(int index);
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x4F6BA98
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x4F6BAA8
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // System.Void .ctor()
    // Offset: 0x4F6BAF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::MatchCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchCollection*, creationType>()));
    }
  }; // System.Text.RegularExpressions.MatchCollection
  #pragma pack(pop)
  static check_size<sizeof(MatchCollection), 60 + sizeof(int)> __System_Text_RegularExpressions_MatchCollectionSizeCheck;
  static_assert(sizeof(MatchCollection) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Match* (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Match$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::System::Text::RegularExpressions::Match*>* (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IEnumerable$System_Text_RegularExpressions_Match$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::GetMatch
// Il2CppName: GetMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Match* (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::GetMatch)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "GetMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::EnsureInitialized
// Il2CppName: EnsureInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::EnsureInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "EnsureInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::get_IsSynchronized
// Il2CppName: get_IsSynchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::get_IsSynchronized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "get_IsSynchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(::System::Array*, int)>(&System::Text::RegularExpressions::MatchCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(::ArrayW<::System::Text::RegularExpressions::Match*>, int)>(&System::Text::RegularExpressions::MatchCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match"), 1)->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_IndexOf
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::MatchCollection::*)(::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_IndexOf)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_Insert
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int, ::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_RemoveAt
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_get_Item
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Match* (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_set_Item
// Il2CppName: System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int, ::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_IList$System_Text_RegularExpressions_Match$_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Add
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Add)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Clear
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Contains
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)(::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Contains)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Remove
// Il2CppName: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)(::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_Generic_ICollection$System_Text_RegularExpressions_Match$_Remove)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Add
// Il2CppName: System.Collections.IList.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::MatchCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Clear
// Il2CppName: System.Collections.IList.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Contains
// Il2CppName: System.Collections.IList.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_IndexOf
// Il2CppName: System.Collections.IList.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::MatchCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Insert
// Il2CppName: System.Collections.IList.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int, ::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_get_IsFixedSize
// Il2CppName: System.Collections.IList.get_IsFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::MatchCollection::*)()>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_get_IsFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.get_IsFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Remove
// Il2CppName: System.Collections.IList.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_RemoveAt
// Il2CppName: System.Collections.IList.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_get_Item
// Il2CppName: System.Collections.IList.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Text::RegularExpressions::MatchCollection::*)(int)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::System_Collections_IList_set_Item
// Il2CppName: System.Collections.IList.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::MatchCollection::*)(int, ::Il2CppObject*)>(&System::Text::RegularExpressions::MatchCollection::System_Collections_IList_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::MatchCollection*), "System.Collections.IList.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::MatchCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
