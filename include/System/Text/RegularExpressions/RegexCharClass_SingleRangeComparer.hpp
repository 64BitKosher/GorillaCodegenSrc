// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Text.RegularExpressions.RegexCharClass
#include "System/Text/RegularExpressions/RegexCharClass.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer*, "System.Text.RegularExpressions", "RegexCharClass/SingleRangeComparer");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.RegexCharClass/SingleRangeComparer
  // [TokenAttribute] Offset: FFFFFFFF
  class RegexCharClass::SingleRangeComparer : public ::Il2CppObject/*, public ::System::Collections::Generic::IComparer_1<::System::Text::RegularExpressions::RegexCharClass::SingleRange>*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::System::Text::RegularExpressions::RegexCharClass::SingleRange>
    operator ::System::Collections::Generic::IComparer_1<::System::Text::RegularExpressions::RegexCharClass::SingleRange>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::System::Text::RegularExpressions::RegexCharClass::SingleRange>*>(this);
    }
    // Get static field: static public readonly System.Text.RegularExpressions.RegexCharClass/SingleRangeComparer Instance
    static ::System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer* _get_Instance();
    // Set static field: static public readonly System.Text.RegularExpressions.RegexCharClass/SingleRangeComparer Instance
    static void _set_Instance(::System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer* value);
    // private System.Void .ctor()
    // Offset: 0x4F78000
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexCharClass::SingleRangeComparer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexCharClass::SingleRangeComparer*, creationType>()));
    }
    // public System.Int32 Compare(System.Text.RegularExpressions.RegexCharClass/SingleRange x, System.Text.RegularExpressions.RegexCharClass/SingleRange y)
    // Offset: 0x4F78008
    int Compare(::System::Text::RegularExpressions::RegexCharClass::SingleRange x, ::System::Text::RegularExpressions::RegexCharClass::SingleRange y);
    // static private System.Void .cctor()
    // Offset: 0x4F78028
    static void _cctor();
  }; // System.Text.RegularExpressions.RegexCharClass/SingleRangeComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::*)(::System::Text::RegularExpressions::RegexCharClass::SingleRange, ::System::Text::RegularExpressions::RegexCharClass::SingleRange)>(&System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexCharClass/SingleRange")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexCharClass/SingleRange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
