// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Capture
  class Capture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::Capture);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::Capture*, "System.Text.RegularExpressions", "Capture");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.Capture
  // [TokenAttribute] Offset: FFFFFFFF
  class Capture : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <Index>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Length>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String <Text>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <Index>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Index$k__BackingField();
    // Get instance field reference: private System.Int32 <Length>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField();
    // Get instance field reference: private System.String <Text>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Text$k__BackingField();
    // System.Void .ctor(System.String text, System.Int32 index, System.Int32 length)
    // Offset: 0x4F6892C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Capture* New_ctor(::StringW text, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::Capture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Capture*, creationType>(text, index, length)));
    }
    // public System.Int32 get_Index()
    // Offset: 0x4F68974
    int get_Index();
    // System.Void set_Index(System.Int32 value)
    // Offset: 0x4F6897C
    void set_Index(int value);
    // public System.Int32 get_Length()
    // Offset: 0x4F68984
    int get_Length();
    // System.Void set_Length(System.Int32 value)
    // Offset: 0x4F6898C
    void set_Length(int value);
    // System.String get_Text()
    // Offset: 0x4F68994
    ::StringW get_Text();
    // System.Void set_Text(System.String value)
    // Offset: 0x4F6899C
    void set_Text(::StringW value);
    // public System.String get_Value()
    // Offset: 0x4F689A4
    ::StringW get_Value();
    // System.ReadOnlySpan`1<System.Char> GetLeftSubstring()
    // Offset: 0x4F689CC
    ::System::ReadOnlySpan_1<::Il2CppChar> GetLeftSubstring();
    // System.ReadOnlySpan`1<System.Char> GetRightSubstring()
    // Offset: 0x4F68A54
    ::System::ReadOnlySpan_1<::Il2CppChar> GetRightSubstring();
    // public override System.String ToString()
    // Offset: 0x4F689C8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Text.RegularExpressions.Capture
  #pragma pack(pop)
  static check_size<sizeof(Capture), 24 + sizeof(::StringW)> __System_Text_RegularExpressions_CaptureSizeCheck;
  static_assert(sizeof(Capture) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::get_Index
// Il2CppName: get_Index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::get_Index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "get_Index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::set_Index
// Il2CppName: set_Index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Capture::*)(int)>(&System::Text::RegularExpressions::Capture::set_Index)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "set_Index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Capture::*)(int)>(&System::Text::RegularExpressions::Capture::set_Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::get_Text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::set_Text
// Il2CppName: set_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Capture::*)(::StringW)>(&System::Text::RegularExpressions::Capture::set_Text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "set_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::GetLeftSubstring
// Il2CppName: GetLeftSubstring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::GetLeftSubstring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "GetLeftSubstring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::GetRightSubstring
// Il2CppName: GetRightSubstring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::GetRightSubstring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "GetRightSubstring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Capture::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::Capture::*)()>(&System::Text::RegularExpressions::Capture::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Capture*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
