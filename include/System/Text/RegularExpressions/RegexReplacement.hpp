// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexNode
  class RegexNode;
  // Forward declaring type: RegexOptions
  struct RegexOptions;
  // Forward declaring type: Match
  class Match;
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: WeakReference`1<T>
  template<typename T>
  class WeakReference_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexReplacement
  class RegexReplacement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::RegexReplacement);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexReplacement*, "System.Text.RegularExpressions", "RegexReplacement");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.RegexReplacement
  // [TokenAttribute] Offset: FFFFFFFF
  class RegexReplacement : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<System.String> _strings
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* strings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Int32> _rules
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<int>* rules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private readonly System.String <Pattern>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Pattern;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // static field const value: static private System.Int32 Specials
    static constexpr const int Specials = 4;
    // Get static field: static private System.Int32 Specials
    static int _get_Specials();
    // Set static field: static private System.Int32 Specials
    static void _set_Specials(int value);
    // static field const value: static public System.Int32 LeftPortion
    static constexpr const int LeftPortion = -1;
    // Get static field: static public System.Int32 LeftPortion
    static int _get_LeftPortion();
    // Set static field: static public System.Int32 LeftPortion
    static void _set_LeftPortion(int value);
    // static field const value: static public System.Int32 RightPortion
    static constexpr const int RightPortion = -2;
    // Get static field: static public System.Int32 RightPortion
    static int _get_RightPortion();
    // Set static field: static public System.Int32 RightPortion
    static void _set_RightPortion(int value);
    // static field const value: static public System.Int32 LastGroup
    static constexpr const int LastGroup = -3;
    // Get static field: static public System.Int32 LastGroup
    static int _get_LastGroup();
    // Set static field: static public System.Int32 LastGroup
    static void _set_LastGroup(int value);
    // static field const value: static public System.Int32 WholeString
    static constexpr const int WholeString = -4;
    // Get static field: static public System.Int32 WholeString
    static int _get_WholeString();
    // Set static field: static public System.Int32 WholeString
    static void _set_WholeString(int value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> _strings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__strings();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Int32> _rules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__rules();
    // Get instance field reference: private readonly System.String <Pattern>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Pattern$k__BackingField();
    // public System.Void .ctor(System.String rep, System.Text.RegularExpressions.RegexNode concat, System.Collections.Hashtable _caps)
    // Offset: 0x4F7DEEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexReplacement* New_ctor(::StringW rep, ::System::Text::RegularExpressions::RegexNode* concat, ::System::Collections::Hashtable* _caps) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexReplacement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexReplacement*, creationType>(rep, concat, _caps)));
    }
    // static public System.Text.RegularExpressions.RegexReplacement GetOrCreate(System.WeakReference`1<System.Text.RegularExpressions.RegexReplacement> replRef, System.String replacement, System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames, System.Text.RegularExpressions.RegexOptions roptions)
    // Offset: 0x4F82FAC
    static ::System::Text::RegularExpressions::RegexReplacement* GetOrCreate(::System::WeakReference_1<::System::Text::RegularExpressions::RegexReplacement*>* replRef, ::StringW replacement, ::System::Collections::Hashtable* caps, int capsize, ::System::Collections::Hashtable* capnames, ::System::Text::RegularExpressions::RegexOptions roptions);
    // public System.String get_Pattern()
    // Offset: 0x4F830C0
    ::StringW get_Pattern();
    // private System.Void ReplacementImpl(System.Text.StringBuilder sb, System.Text.RegularExpressions.Match match)
    // Offset: 0x4F830C8
    void ReplacementImpl(::System::Text::StringBuilder* sb, ::System::Text::RegularExpressions::Match* match);
    // private System.Void ReplacementImplRTL(System.Collections.Generic.List`1<System.String> al, System.Text.RegularExpressions.Match match)
    // Offset: 0x4F8326C
    void ReplacementImplRTL(::System::Collections::Generic::List_1<::StringW>* al, ::System::Text::RegularExpressions::Match* match);
    // public System.String Replace(System.Text.RegularExpressions.Regex regex, System.String input, System.Int32 count, System.Int32 startat)
    // Offset: 0x4F8349C
    ::StringW Replace(::System::Text::RegularExpressions::Regex* regex, ::StringW input, int count, int startat);
  }; // System.Text.RegularExpressions.RegexReplacement
  #pragma pack(pop)
  static check_size<sizeof(RegexReplacement), 32 + sizeof(::StringW)> __System_Text_RegularExpressions_RegexReplacementSizeCheck;
  static_assert(sizeof(RegexReplacement) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::GetOrCreate
// Il2CppName: GetOrCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexReplacement* (*)(::System::WeakReference_1<::System::Text::RegularExpressions::RegexReplacement*>*, ::StringW, ::System::Collections::Hashtable*, int, ::System::Collections::Hashtable*, ::System::Text::RegularExpressions::RegexOptions)>(&System::Text::RegularExpressions::RegexReplacement::GetOrCreate)> {
  static const MethodInfo* get() {
    static auto* replRef = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "WeakReference`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexReplacement")})->byval_arg;
    static auto* replacement = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* caps = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* capsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* capnames = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* roptions = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexReplacement*), "GetOrCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replRef, replacement, caps, capsize, capnames, roptions});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::get_Pattern
// Il2CppName: get_Pattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::RegexReplacement::*)()>(&System::Text::RegularExpressions::RegexReplacement::get_Pattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexReplacement*), "get_Pattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::ReplacementImpl
// Il2CppName: ReplacementImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexReplacement::*)(::System::Text::StringBuilder*, ::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::RegexReplacement::ReplacementImpl)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* match = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexReplacement*), "ReplacementImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, match});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::ReplacementImplRTL
// Il2CppName: ReplacementImplRTL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexReplacement::*)(::System::Collections::Generic::List_1<::StringW>*, ::System::Text::RegularExpressions::Match*)>(&System::Text::RegularExpressions::RegexReplacement::ReplacementImplRTL)> {
  static const MethodInfo* get() {
    static auto* al = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* match = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexReplacement*), "ReplacementImplRTL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{al, match});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexReplacement::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::RegexReplacement::*)(::System::Text::RegularExpressions::Regex*, ::StringW, int, int)>(&System::Text::RegularExpressions::RegexReplacement::Replace)> {
  static const MethodInfo* get() {
    static auto* regex = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Regex")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexReplacement*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regex, input, count, startat});
  }
};
