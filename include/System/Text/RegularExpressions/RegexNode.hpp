// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Text.RegularExpressions.RegexOptions
#include "System/Text/RegularExpressions/RegexOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexNode
  class RegexNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::RegexNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexNode*, "System.Text.RegularExpressions", "RegexNode");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.RegexNode
  // [TokenAttribute] Offset: FFFFFFFF
  class RegexNode : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 NType
    // Size: 0x4
    // Offset: 0x10
    int NType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: NType and: Children
    char __padding0[0x4] = {};
    // public System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexNode> Children
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexNode*>* Children;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexNode*>*) == 0x8);
    // public System.String Str
    // Size: 0x8
    // Offset: 0x20
    ::StringW Str;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Char Ch
    // Size: 0x2
    // Offset: 0x28
    ::Il2CppChar Ch;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: Ch and: M
    char __padding3[0x2] = {};
    // public System.Int32 M
    // Size: 0x4
    // Offset: 0x2C
    int M;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 N
    // Size: 0x4
    // Offset: 0x30
    int N;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Text.RegularExpressions.RegexOptions Options
    // Size: 0x4
    // Offset: 0x34
    ::System::Text::RegularExpressions::RegexOptions Options;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexOptions) == 0x4);
    // public System.Text.RegularExpressions.RegexNode Next
    // Size: 0x8
    // Offset: 0x38
    ::System::Text::RegularExpressions::RegexNode* Next;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 NType
    [[deprecated("Use field access instead!")]] int& dyn_NType();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexNode> Children
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexNode*>*& dyn_Children();
    // Get instance field reference: public System.String Str
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Str();
    // Get instance field reference: public System.Char Ch
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_Ch();
    // Get instance field reference: public System.Int32 M
    [[deprecated("Use field access instead!")]] int& dyn_M();
    // Get instance field reference: public System.Int32 N
    [[deprecated("Use field access instead!")]] int& dyn_N();
    // Get instance field reference: public readonly System.Text.RegularExpressions.RegexOptions Options
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexOptions& dyn_Options();
    // Get instance field reference: public System.Text.RegularExpressions.RegexNode Next
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn_Next();
    // public System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options)
    // Offset: 0x4F7BE18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexNode* New_ctor(int type, ::System::Text::RegularExpressions::RegexOptions options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexNode*, creationType>(type, options)));
    }
    // public System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Char ch)
    // Offset: 0x4F7BE48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexNode* New_ctor(int type, ::System::Text::RegularExpressions::RegexOptions options, ::Il2CppChar ch) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexNode*, creationType>(type, options, ch)));
    }
    // public System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.String str)
    // Offset: 0x4F7BE88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexNode* New_ctor(int type, ::System::Text::RegularExpressions::RegexOptions options, ::StringW str) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexNode*, creationType>(type, options, str)));
    }
    // public System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Int32 m)
    // Offset: 0x4F7BED0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexNode* New_ctor(int type, ::System::Text::RegularExpressions::RegexOptions options, int m) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexNode*, creationType>(type, options, m)));
    }
    // public System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Int32 m, System.Int32 n)
    // Offset: 0x4F7BF10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexNode* New_ctor(int type, ::System::Text::RegularExpressions::RegexOptions options, int m, int n) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexNode*, creationType>(type, options, m, n)));
    }
    // public System.Boolean UseOptionR()
    // Offset: 0x4F7BF54
    bool UseOptionR();
    // public System.Text.RegularExpressions.RegexNode ReverseLeft()
    // Offset: 0x4F7BF60
    ::System::Text::RegularExpressions::RegexNode* ReverseLeft();
    // private System.Void MakeRep(System.Int32 type, System.Int32 min, System.Int32 max)
    // Offset: 0x4F7BFDC
    void MakeRep(int type, int min, int max);
    // private System.Text.RegularExpressions.RegexNode Reduce()
    // Offset: 0x4F7BFF4
    ::System::Text::RegularExpressions::RegexNode* Reduce();
    // private System.Text.RegularExpressions.RegexNode StripEnation(System.Int32 emptyType)
    // Offset: 0x4F7CABC
    ::System::Text::RegularExpressions::RegexNode* StripEnation(int emptyType);
    // private System.Text.RegularExpressions.RegexNode ReduceGroup()
    // Offset: 0x4F7C94C
    ::System::Text::RegularExpressions::RegexNode* ReduceGroup();
    // private System.Text.RegularExpressions.RegexNode ReduceRep()
    // Offset: 0x4F7C7C4
    ::System::Text::RegularExpressions::RegexNode* ReduceRep();
    // private System.Text.RegularExpressions.RegexNode ReduceSet()
    // Offset: 0x4F7C978
    ::System::Text::RegularExpressions::RegexNode* ReduceSet();
    // private System.Text.RegularExpressions.RegexNode ReduceAlternation()
    // Offset: 0x4F7C05C
    ::System::Text::RegularExpressions::RegexNode* ReduceAlternation();
    // private System.Text.RegularExpressions.RegexNode ReduceConcatenation()
    // Offset: 0x4F7C444
    ::System::Text::RegularExpressions::RegexNode* ReduceConcatenation();
    // public System.Text.RegularExpressions.RegexNode MakeQuantifier(System.Boolean lazy, System.Int32 min, System.Int32 max)
    // Offset: 0x4F7CB70
    ::System::Text::RegularExpressions::RegexNode* MakeQuantifier(bool lazy, int min, int max);
    // public System.Void AddChild(System.Text.RegularExpressions.RegexNode newChild)
    // Offset: 0x4F7CC88
    void AddChild(::System::Text::RegularExpressions::RegexNode* newChild);
    // public System.Text.RegularExpressions.RegexNode Child(System.Int32 i)
    // Offset: 0x4F788C8
    ::System::Text::RegularExpressions::RegexNode* Child(int i);
    // public System.Int32 ChildCount()
    // Offset: 0x4F7887C
    int ChildCount();
    // public System.Int32 Type()
    // Offset: 0x4F7CDB8
    int Type();
  }; // System.Text.RegularExpressions.RegexNode
  #pragma pack(pop)
  static check_size<sizeof(RegexNode), 56 + sizeof(::System::Text::RegularExpressions::RegexNode*)> __System_Text_RegularExpressions_RegexNodeSizeCheck;
  static_assert(sizeof(RegexNode) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::UseOptionR
// Il2CppName: UseOptionR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::UseOptionR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "UseOptionR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReverseLeft
// Il2CppName: ReverseLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReverseLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReverseLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::MakeRep
// Il2CppName: MakeRep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexNode::*)(int, int, int)>(&System::Text::RegularExpressions::RegexNode::MakeRep)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "MakeRep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, min, max});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::Reduce
// Il2CppName: Reduce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::Reduce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "Reduce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::StripEnation
// Il2CppName: StripEnation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)(int)>(&System::Text::RegularExpressions::RegexNode::StripEnation)> {
  static const MethodInfo* get() {
    static auto* emptyType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "StripEnation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{emptyType});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReduceGroup
// Il2CppName: ReduceGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReduceGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReduceGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReduceRep
// Il2CppName: ReduceRep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReduceRep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReduceRep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReduceSet
// Il2CppName: ReduceSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReduceSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReduceSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReduceAlternation
// Il2CppName: ReduceAlternation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReduceAlternation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReduceAlternation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ReduceConcatenation
// Il2CppName: ReduceConcatenation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ReduceConcatenation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ReduceConcatenation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::MakeQuantifier
// Il2CppName: MakeQuantifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)(bool, int, int)>(&System::Text::RegularExpressions::RegexNode::MakeQuantifier)> {
  static const MethodInfo* get() {
    static auto* lazy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "MakeQuantifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lazy, min, max});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::AddChild
// Il2CppName: AddChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexNode::*)(::System::Text::RegularExpressions::RegexNode*)>(&System::Text::RegularExpressions::RegexNode::AddChild)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "AddChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::Child
// Il2CppName: Child
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexNode::*)(int)>(&System::Text::RegularExpressions::RegexNode::Child)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "Child", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::ChildCount
// Il2CppName: ChildCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::ChildCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "ChildCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexNode::Type
// Il2CppName: Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexNode::*)()>(&System::Text::RegularExpressions::RegexNode::Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexNode*), "Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
