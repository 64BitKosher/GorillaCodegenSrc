// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Text.UTF8Encoding
#include "System/Text/UTF8Encoding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::UTF8Encoding::UTF8EncodingSealed);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::UTF8Encoding::UTF8EncodingSealed*, "System.Text", "UTF8Encoding/UTF8EncodingSealed");
// Type namespace: System.Text
namespace System::Text {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.UTF8Encoding/UTF8EncodingSealed
  // [TokenAttribute] Offset: FFFFFFFF
  class UTF8Encoding::UTF8EncodingSealed : public ::System::Text::UTF8Encoding {
    public:
    // public System.Void .ctor(System.Boolean encoderShouldEmitUTF8Identifier)
    // Offset: 0x44DA2D0
    // Implemented from: System.Text.UTF8Encoding
    // Base method: System.Void UTF8Encoding::.ctor(System.Boolean encoderShouldEmitUTF8Identifier)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UTF8Encoding::UTF8EncodingSealed* New_ctor(bool encoderShouldEmitUTF8Identifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8EncodingSealed::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UTF8Encoding::UTF8EncodingSealed*, creationType>(encoderShouldEmitUTF8Identifier)));
    }
    // public override System.ReadOnlySpan`1<System.Byte> get_Preamble()
    // Offset: 0x44DA338
    // Implemented from: System.Text.UTF8Encoding
    // Base method: System.ReadOnlySpan`1<System.Byte> UTF8Encoding::get_Preamble()
    ::System::ReadOnlySpan_1<uint8_t> get_Preamble();
  }; // System.Text.UTF8Encoding/UTF8EncodingSealed
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::UTF8Encoding::UTF8EncodingSealed::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::UTF8Encoding::UTF8EncodingSealed::get_Preamble
// Il2CppName: get_Preamble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<uint8_t> (System::Text::UTF8Encoding::UTF8EncodingSealed::*)()>(&System::Text::UTF8Encoding::UTF8EncodingSealed::get_Preamble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::UTF8Encoding::UTF8EncodingSealed*), "get_Preamble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
