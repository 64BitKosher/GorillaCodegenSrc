// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Numerics
namespace System::Numerics {
  // Forward declaring type: Vector`1<T>
  template<typename T>
  struct Vector_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IEquatable`1<T>
  template<typename T>
  class IEquatable_1;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CompareInfo
  class CompareInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: SpanHelpers
  class SpanHelpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::SpanHelpers);
DEFINE_IL2CPP_ARG_TYPE(::System::SpanHelpers*, "System", "SpanHelpers");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.SpanHelpers
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class SpanHelpers : public ::Il2CppObject {
    public:
    // static public System.Int32 IndexOfAny(ref System.Byte searchSpace, System.Int32 searchSpaceLength, ref System.Byte value, System.Int32 valueLength)
    // Offset: 0x466F518
    static int IndexOfAny(ByRef<uint8_t> searchSpace, int searchSpaceLength, ByRef<uint8_t> value, int valueLength);
    // static public System.Int32 IndexOf(ref System.Byte searchSpace, System.Byte value, System.Int32 length)
    // Offset: 0x466F598
    static int IndexOf(ByRef<uint8_t> searchSpace, uint8_t value, int length);
    // static public System.Boolean SequenceEqual(ref System.Byte first, ref System.Byte second, System.UInt64 length)
    // Offset: 0x466F840
    static bool SequenceEqual(ByRef<uint8_t> first, ByRef<uint8_t> second, uint64_t length);
    // static public System.Int32 SequenceCompareTo(ref System.Char first, System.Int32 firstLength, ref System.Char second, System.Int32 secondLength)
    // Offset: 0x466F9B0
    static int SequenceCompareTo(ByRef<::Il2CppChar> first, int firstLength, ByRef<::Il2CppChar> second, int secondLength);
    // static public System.Int32 IndexOf(ref System.Char searchSpace, System.Char value, System.Int32 length)
    // Offset: 0x466FDE4
    static int IndexOf(ByRef<::Il2CppChar> searchSpace, ::Il2CppChar value, int length);
    // static public System.Int32 LastIndexOf(ref System.Char searchSpace, System.Char value, System.Int32 length)
    // Offset: 0x46703D4
    static int LastIndexOf(ByRef<::Il2CppChar> searchSpace, ::Il2CppChar value, int length);
    // static private System.Int32 LocateFirstFoundChar(System.Numerics.Vector`1<System.UInt16> match)
    // Offset: 0x4670978
    static int LocateFirstFoundChar(::System::Numerics::Vector_1<uint16_t> match);
    // static private System.Int32 LocateFirstFoundChar(System.UInt64 match)
    // Offset: 0x4670B44
    static int LocateFirstFoundChar(uint64_t match);
    // static private System.Int32 LocateLastFoundChar(System.Numerics.Vector`1<System.UInt16> match)
    // Offset: 0x4670B64
    static int LocateLastFoundChar(::System::Numerics::Vector_1<uint16_t> match);
    // static private System.Int32 LocateLastFoundChar(System.UInt64 match)
    // Offset: 0x4670D30
    static int LocateLastFoundChar(uint64_t match);
    // static public System.Int32 IndexOf(ref T searchSpace, T value, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(ByRef<T> searchSpace, T value, int length) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::SpanHelpers::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "SpanHelpers", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchSpace), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(searchSpace), value, length);
    }
    // static public System.Int32 IndexOfAny(ref T searchSpace, System.Int32 searchSpaceLength, ref T value, System.Int32 valueLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOfAny(ByRef<T> searchSpace, int searchSpaceLength, ByRef<T> value, int valueLength) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::SpanHelpers::IndexOfAny");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "SpanHelpers", "IndexOfAny", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchSpace), ::il2cpp_utils::ExtractType(searchSpaceLength), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(valueLength)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(searchSpace), searchSpaceLength, byref(value), valueLength);
    }
    // static public System.Boolean SequenceEqual(ref T first, ref T second, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool SequenceEqual(ByRef<T> first, ByRef<T> second, int length) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IEquatable_1<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::System::SpanHelpers::SequenceEqual");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "SpanHelpers", "SequenceEqual", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(first), byref(second), length);
    }
    // static public System.Int32 IndexOfCultureHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x4670D5C
    static int IndexOfCultureHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Int32 IndexOfCultureIgnoreCaseHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x4670E80
    static int IndexOfCultureIgnoreCaseHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Int32 IndexOfOrdinalHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Boolean ignoreCase)
    // Offset: 0x4670FA4
    static int IndexOfOrdinalHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, bool ignoreCase);
    // static public System.Boolean StartsWithCultureHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x46710D8
    static bool StartsWithCultureHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Boolean StartsWithCultureIgnoreCaseHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x4671210
    static bool StartsWithCultureIgnoreCaseHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Boolean StartsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x4671330
    static bool StartsWithOrdinalIgnoreCaseHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value);
    // static public System.Boolean EndsWithCultureHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x4671404
    static bool EndsWithCultureHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Boolean EndsWithCultureIgnoreCaseHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value, System.Globalization.CompareInfo compareInfo)
    // Offset: 0x467153C
    static bool EndsWithCultureIgnoreCaseHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::CompareInfo* compareInfo);
    // static public System.Boolean EndsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan`1<System.Char> span, System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x467165C
    static bool EndsWithOrdinalIgnoreCaseHelper(::System::ReadOnlySpan_1<::Il2CppChar> span, ::System::ReadOnlySpan_1<::Il2CppChar> value);
    // static public System.Void ClearWithoutReferences(ref System.Byte b, System.UInt64 byteLength)
    // Offset: 0x4671740
    static void ClearWithoutReferences(ByRef<uint8_t> b, uint64_t byteLength);
    // static public System.Void ClearWithReferences(ref System.IntPtr ip, System.UInt64 pointerSizeLength)
    // Offset: 0x4671928
    static void ClearWithReferences(ByRef<::System::IntPtr> ip, uint64_t pointerSizeLength);
  }; // System.SpanHelpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::SpanHelpers::IndexOfAny
// Il2CppName: IndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<uint8_t>, int, ByRef<uint8_t>, int)>(&System::SpanHelpers::IndexOfAny)> {
  static const MethodInfo* get() {
    static auto* searchSpace = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* searchSpaceLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* valueLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchSpace, searchSpaceLength, value, valueLength});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<uint8_t>, uint8_t, int)>(&System::SpanHelpers::IndexOf)> {
  static const MethodInfo* get() {
    static auto* searchSpace = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchSpace, value, length});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::SequenceEqual
// Il2CppName: SequenceEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<uint8_t>, ByRef<uint8_t>, uint64_t)>(&System::SpanHelpers::SequenceEqual)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "SequenceEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first, second, length});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::SequenceCompareTo
// Il2CppName: SequenceCompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::Il2CppChar>, int, ByRef<::Il2CppChar>, int)>(&System::SpanHelpers::SequenceCompareTo)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    static auto* firstLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* second = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    static auto* secondLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "SequenceCompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first, firstLength, second, secondLength});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::Il2CppChar>, ::Il2CppChar, int)>(&System::SpanHelpers::IndexOf)> {
  static const MethodInfo* get() {
    static auto* searchSpace = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchSpace, value, length});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::Il2CppChar>, ::Il2CppChar, int)>(&System::SpanHelpers::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* searchSpace = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchSpace, value, length});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::LocateFirstFoundChar
// Il2CppName: LocateFirstFoundChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Numerics::Vector_1<uint16_t>)>(&System::SpanHelpers::LocateFirstFoundChar)> {
  static const MethodInfo* get() {
    static auto* match = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Numerics", "Vector`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "LocateFirstFoundChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{match});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::LocateFirstFoundChar
// Il2CppName: LocateFirstFoundChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&System::SpanHelpers::LocateFirstFoundChar)> {
  static const MethodInfo* get() {
    static auto* match = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "LocateFirstFoundChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{match});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::LocateLastFoundChar
// Il2CppName: LocateLastFoundChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Numerics::Vector_1<uint16_t>)>(&System::SpanHelpers::LocateLastFoundChar)> {
  static const MethodInfo* get() {
    static auto* match = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Numerics", "Vector`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "LocateLastFoundChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{match});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::LocateLastFoundChar
// Il2CppName: LocateLastFoundChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&System::SpanHelpers::LocateLastFoundChar)> {
  static const MethodInfo* get() {
    static auto* match = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "LocateLastFoundChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{match});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::SpanHelpers::IndexOfAny
// Il2CppName: IndexOfAny
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::SpanHelpers::SequenceEqual
// Il2CppName: SequenceEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::SpanHelpers::IndexOfCultureHelper
// Il2CppName: IndexOfCultureHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::IndexOfCultureHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOfCultureHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::IndexOfCultureIgnoreCaseHelper
// Il2CppName: IndexOfCultureIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::IndexOfCultureIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOfCultureIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::IndexOfOrdinalHelper
// Il2CppName: IndexOfOrdinalHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&System::SpanHelpers::IndexOfOrdinalHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "IndexOfOrdinalHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::StartsWithCultureHelper
// Il2CppName: StartsWithCultureHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::StartsWithCultureHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "StartsWithCultureHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::StartsWithCultureIgnoreCaseHelper
// Il2CppName: StartsWithCultureIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::StartsWithCultureIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "StartsWithCultureIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::StartsWithOrdinalIgnoreCaseHelper
// Il2CppName: StartsWithOrdinalIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::SpanHelpers::StartsWithOrdinalIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "StartsWithOrdinalIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::EndsWithCultureHelper
// Il2CppName: EndsWithCultureHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::EndsWithCultureHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "EndsWithCultureHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::EndsWithCultureIgnoreCaseHelper
// Il2CppName: EndsWithCultureIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::CompareInfo*)>(&System::SpanHelpers::EndsWithCultureIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* compareInfo = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "EndsWithCultureIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value, compareInfo});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::EndsWithOrdinalIgnoreCaseHelper
// Il2CppName: EndsWithOrdinalIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::SpanHelpers::EndsWithOrdinalIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* span = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "EndsWithOrdinalIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{span, value});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::ClearWithoutReferences
// Il2CppName: ClearWithoutReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint8_t>, uint64_t)>(&System::SpanHelpers::ClearWithoutReferences)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* byteLength = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "ClearWithoutReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, byteLength});
  }
};
// Writing MetadataGetter for method: System::SpanHelpers::ClearWithReferences
// Il2CppName: ClearWithReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::IntPtr>, uint64_t)>(&System::SpanHelpers::ClearWithReferences)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* pointerSizeLength = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::SpanHelpers*), "ClearWithReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip, pointerSizeLength});
  }
};
