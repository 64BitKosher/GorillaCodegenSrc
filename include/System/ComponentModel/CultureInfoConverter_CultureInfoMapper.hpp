// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.CultureInfoConverter
#include "System/ComponentModel/CultureInfoConverter.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::CultureInfoConverter::CultureInfoMapper);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::CultureInfoConverter::CultureInfoMapper*, "System.ComponentModel", "CultureInfoConverter/CultureInfoMapper");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.CultureInfoConverter/CultureInfoMapper
  // [TokenAttribute] Offset: FFFFFFFF
  class CultureInfoConverter::CultureInfoMapper : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_cultureInfoNameMap
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* _get_s_cultureInfoNameMap();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> s_cultureInfoNameMap
    static void _set_s_cultureInfoNameMap(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // static private System.Collections.Generic.Dictionary`2<System.String,System.String> CreateMap()
    // Offset: 0x4EF9E8C
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* CreateMap();
    // static public System.String GetCultureInfoName(System.String cultureInfoDisplayName)
    // Offset: 0x4EF959C
    static ::StringW GetCultureInfoName(::StringW cultureInfoDisplayName);
    // static private System.Void .cctor()
    // Offset: 0x4EFDF6C
    static void _cctor();
  }; // System.ComponentModel.CultureInfoConverter/CultureInfoMapper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::CultureInfoConverter::CultureInfoMapper::CreateMap
// Il2CppName: CreateMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (*)()>(&System::ComponentModel::CultureInfoConverter::CultureInfoMapper::CreateMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::CultureInfoConverter::CultureInfoMapper*), "CreateMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::CultureInfoConverter::CultureInfoMapper::GetCultureInfoName
// Il2CppName: GetCultureInfoName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::ComponentModel::CultureInfoConverter::CultureInfoMapper::GetCultureInfoName)> {
  static const MethodInfo* get() {
    static auto* cultureInfoDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::CultureInfoConverter::CultureInfoMapper*), "GetCultureInfoName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cultureInfoDisplayName});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::CultureInfoConverter::CultureInfoMapper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::CultureInfoConverter::CultureInfoMapper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::CultureInfoConverter::CultureInfoMapper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
