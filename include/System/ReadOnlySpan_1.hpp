// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ByReference`1
#include "System/ByReference_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::ReadOnlySpan_1, "System", "ReadOnlySpan`1");
// Type namespace: System
namespace System {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.ReadOnlySpan`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: FFFFFFFF
  // [NonVersionableAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct ReadOnlySpan_1/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly System.ByReference`1<T> _pointer
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ByReference_1<T> pointer;
    // private readonly System.Int32 _length
    // Size: 0x4
    // Offset: 0x0
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ReadOnlySpan_1
    constexpr ReadOnlySpan_1(::System::ByReference_1<T> pointer_ = {}, int length_ = {}) noexcept : pointer{pointer_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: readonly System.ByReference`1<T> _pointer
    [[deprecated("Use field access instead!")]] ::System::ByReference_1<T>& dyn__pointer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::dyn__pointer");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointer"))->offset;
      return *reinterpret_cast<::System::ByReference_1<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::dyn__length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySpan_1(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // public System.Void .ctor(T[] array, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySpan_1(::ArrayW<T> array, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, start, length);
    }
    // public System.Void .ctor(System.Void* pointer, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySpan_1(void* pointer, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointer), ::il2cpp_utils::ExtractType(length)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointer, length);
    }
    // System.Void .ctor(ref T ptr, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySpan_1(ByRef<T> ptr, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr), ::il2cpp_utils::ExtractType(length)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(ptr), length);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public T GetPinnableReference()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetPinnableReference() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::GetPinnableReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPinnableReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void CopyTo(System.Span`1<T> destination)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::System::Span_1<T> destination) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination);
    }
    // public System.Boolean TryCopyTo(System.Span`1<T> destination)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryCopyTo(::System::Span_1<T> destination) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::TryCopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryCopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, destination);
    }
    // public System.ReadOnlySpan`1<T> Slice(System.Int32 start)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlySpan_1<T> Slice(int start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::Slice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Slice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(this, ___internal__method, start);
    }
    // public System.ReadOnlySpan`1<T> Slice(System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ReadOnlySpan_1<T> Slice(int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::Slice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Slice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(this, ___internal__method, start, length);
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> ToArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::ToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_IsEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // static public System.ReadOnlySpan`1<T> get_Empty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::ReadOnlySpan_1<T> get_Empty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_Empty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlySpan_1<T>>::get(), "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
  }; // System.ReadOnlySpan`1
  // Could not write size check! Type: System.ReadOnlySpan`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
