// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Number
#include "System/Number_.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Number_::BigInteger, "System", "Number/BigInteger");
// Type namespace: System
namespace System {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Number/BigInteger
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  struct Number_::BigInteger/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::Number_::BigInteger::$_blocks$e__FixedBuffer
    struct $_blocks$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Number/BigInteger/<_blocks>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    struct $_blocks$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      uint FixedElementField;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: $_blocks$e__FixedBuffer
      constexpr $_blocks$e__FixedBuffer(uint FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint
      constexpr operator uint() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.UInt32 FixedElementField
      [[deprecated("Use field access instead!")]] uint& dyn_FixedElementField();
    }; // System.Number/BigInteger/<_blocks>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(Number_::BigInteger::$_blocks$e__FixedBuffer), 0 + sizeof(uint)> __System_Number__BigInteger_$_blocks$e__FixedBufferSizeCheck;
    static_assert(sizeof(Number_::BigInteger::$_blocks$e__FixedBuffer) == 0x4);
    public:
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x0
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Number/BigInteger/<_blocks>e__FixedBuffer _blocks
    // Size: 0x4
    // Offset: 0x4
    ::System::Number_::BigInteger::$_blocks$e__FixedBuffer blocks;
    // Field size check
    static_assert(sizeof(::System::Number_::BigInteger::$_blocks$e__FixedBuffer) == 0x4);
    public:
    // Creating value type constructor for type: BigInteger
    constexpr BigInteger(int length_ = {}, ::System::Number_::BigInteger::$_blocks$e__FixedBuffer blocks_ = {}) noexcept : length{length_}, blocks{blocks_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Int32 BitsForLongestBinaryMantissa
    static constexpr const int BitsForLongestBinaryMantissa = 1074;
    // Get static field: static private System.Int32 BitsForLongestBinaryMantissa
    static int _get_BitsForLongestBinaryMantissa();
    // Set static field: static private System.Int32 BitsForLongestBinaryMantissa
    static void _set_BitsForLongestBinaryMantissa(int value);
    // static field const value: static private System.Int32 BitsForLongestDigitSequence
    static constexpr const int BitsForLongestDigitSequence = 2552;
    // Get static field: static private System.Int32 BitsForLongestDigitSequence
    static int _get_BitsForLongestDigitSequence();
    // Set static field: static private System.Int32 BitsForLongestDigitSequence
    static void _set_BitsForLongestDigitSequence(int value);
    // static field const value: static private System.Int32 MaxBits
    static constexpr const int MaxBits = 3658;
    // Get static field: static private System.Int32 MaxBits
    static int _get_MaxBits();
    // Set static field: static private System.Int32 MaxBits
    static void _set_MaxBits(int value);
    // static field const value: static private System.Int32 BitsPerBlock
    static constexpr const int BitsPerBlock = 32;
    // Get static field: static private System.Int32 BitsPerBlock
    static int _get_BitsPerBlock();
    // Set static field: static private System.Int32 BitsPerBlock
    static void _set_BitsPerBlock(int value);
    // static field const value: static private System.Int32 MaxBlockCount
    static constexpr const int MaxBlockCount = 115;
    // Get static field: static private System.Int32 MaxBlockCount
    static int _get_MaxBlockCount();
    // Set static field: static private System.Int32 MaxBlockCount
    static void _set_MaxBlockCount(int value);
    // Get static field: static private readonly System.UInt32[] s_Pow10UInt32Table
    static ::ArrayW<uint> _get_s_Pow10UInt32Table();
    // Set static field: static private readonly System.UInt32[] s_Pow10UInt32Table
    static void _set_s_Pow10UInt32Table(::ArrayW<uint> value);
    // Get static field: static private readonly System.Int32[] s_Pow10BigNumTableIndices
    static ::ArrayW<int> _get_s_Pow10BigNumTableIndices();
    // Set static field: static private readonly System.Int32[] s_Pow10BigNumTableIndices
    static void _set_s_Pow10BigNumTableIndices(::ArrayW<int> value);
    // Get static field: static private readonly System.UInt32[] s_Pow10BigNumTable
    static ::ArrayW<uint> _get_s_Pow10BigNumTable();
    // Set static field: static private readonly System.UInt32[] s_Pow10BigNumTable
    static void _set_s_Pow10BigNumTable(::ArrayW<uint> value);
    // Get instance field reference: private System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length();
    // Get instance field reference: private System.Number/BigInteger/<_blocks>e__FixedBuffer _blocks
    [[deprecated("Use field access instead!")]] ::System::Number_::BigInteger::$_blocks$e__FixedBuffer& dyn__blocks();
    // static public System.Void Add(ref System.Number/BigInteger lhs, ref System.Number/BigInteger rhs, out System.Number/BigInteger result)
    // Offset: 0x574D3BC
    static void Add(ByRef<::System::Number_::BigInteger> lhs, ByRef<::System::Number_::BigInteger> rhs, ByRef<::System::Number_::BigInteger> result);
    // static public System.Int32 Compare(ref System.Number/BigInteger lhs, ref System.Number/BigInteger rhs)
    // Offset: 0x574D478
    static int Compare(ByRef<::System::Number_::BigInteger> lhs, ByRef<::System::Number_::BigInteger> rhs);
    // static public System.UInt32 CountSignificantBits(System.UInt32 value)
    // Offset: 0x575BDB4
    static uint CountSignificantBits(uint value);
    // static public System.UInt32 CountSignificantBits(System.UInt64 value)
    // Offset: 0x57553AC
    static uint CountSignificantBits(uint64_t value);
    // static public System.UInt32 CountSignificantBits(ref System.Number/BigInteger value)
    // Offset: 0x5755CC4
    static uint CountSignificantBits(ByRef<::System::Number_::BigInteger> value);
    // static public System.Void DivRem(ref System.Number/BigInteger lhs, ref System.Number/BigInteger rhs, out System.Number/BigInteger quo, out System.Number/BigInteger rem)
    // Offset: 0x5755D54
    static void DivRem(ByRef<::System::Number_::BigInteger> lhs, ByRef<::System::Number_::BigInteger> rhs, ByRef<::System::Number_::BigInteger> quo, ByRef<::System::Number_::BigInteger> rem);
    // static public System.UInt32 HeuristicDivide(ref System.Number/BigInteger dividend, ref System.Number/BigInteger divisor)
    // Offset: 0x574D52C
    static uint HeuristicDivide(ByRef<::System::Number_::BigInteger> dividend, ByRef<::System::Number_::BigInteger> divisor);
    // static public System.Void Multiply(ref System.Number/BigInteger lhs, System.UInt32 value, out System.Number/BigInteger result)
    // Offset: 0x574D2A4
    static void Multiply(ByRef<::System::Number_::BigInteger> lhs, uint value, ByRef<::System::Number_::BigInteger> result);
    // static public System.Void Multiply(ref System.Number/BigInteger lhs, ref System.Number/BigInteger rhs, out System.Number/BigInteger result)
    // Offset: 0x575BEF0
    static void Multiply(ByRef<::System::Number_::BigInteger> lhs, ByRef<::System::Number_::BigInteger> rhs, ByRef<::System::Number_::BigInteger> result);
    // static public System.Void Pow2(System.UInt32 exponent, out System.Number/BigInteger result)
    // Offset: 0x574CE8C
    static void Pow2(uint exponent, ByRef<::System::Number_::BigInteger> result);
    // static public System.Void Pow10(System.UInt32 exponent, out System.Number/BigInteger result)
    // Offset: 0x574D004
    static void Pow10(uint exponent, ByRef<::System::Number_::BigInteger> result);
    // static private System.UInt32 AddDivisor(ref System.Number/BigInteger lhs, System.Int32 lhsStartIndex, ref System.Number/BigInteger rhs)
    // Offset: 0x575BEA4
    static uint AddDivisor(ByRef<::System::Number_::BigInteger> lhs, int lhsStartIndex, ByRef<::System::Number_::BigInteger> rhs);
    // static private System.Boolean DivideGuessTooBig(System.UInt64 q, System.UInt64 valHi, System.UInt32 valLo, System.UInt32 divHi, System.UInt32 divLo)
    // Offset: 0x575BE04
    static bool DivideGuessTooBig(uint64_t q, uint64_t valHi, uint valLo, uint divHi, uint divLo);
    // static private System.UInt32 SubtractDivisor(ref System.Number/BigInteger lhs, System.Int32 lhsStartIndex, ref System.Number/BigInteger rhs, System.UInt64 q)
    // Offset: 0x575BE50
    static uint SubtractDivisor(ByRef<::System::Number_::BigInteger> lhs, int lhsStartIndex, ByRef<::System::Number_::BigInteger> rhs, uint64_t q);
    // public System.Void Add(System.UInt32 value)
    // Offset: 0x575514C
    void Add(uint value);
    // public System.UInt32 GetBlock(System.UInt32 index)
    // Offset: 0x574D520
    uint GetBlock(uint index);
    // public System.Int32 GetLength()
    // Offset: 0x575C10C
    int GetLength();
    // public System.Boolean IsOne()
    // Offset: 0x575C0D0
    bool IsOne();
    // public System.Boolean IsZero()
    // Offset: 0x574D6C4
    bool IsZero();
    // public System.Void Multiply(System.UInt32 value)
    // Offset: 0x575C114
    void Multiply(uint value);
    // public System.Void Multiply(ref System.Number/BigInteger value)
    // Offset: 0x574D1C4
    void Multiply(ByRef<::System::Number_::BigInteger> value);
    // public System.Void Multiply10()
    // Offset: 0x574D4D0
    void Multiply10();
    // public System.Void MultiplyPow10(System.UInt32 exponent)
    // Offset: 0x574CF34
    void MultiplyPow10(uint exponent);
    // static public System.Void SetUInt32(out System.Number/BigInteger result, System.UInt32 value)
    // Offset: 0x574CE20
    static void SetUInt32(ByRef<::System::Number_::BigInteger> result, uint value);
    // static public System.Void SetUInt64(out System.Number/BigInteger result, System.UInt64 value)
    // Offset: 0x574CC24
    static void SetUInt64(ByRef<::System::Number_::BigInteger> result, uint64_t value);
    // static public System.Void SetValue(out System.Number/BigInteger result, ref System.Number/BigInteger value)
    // Offset: 0x575BDD0
    static void SetValue(ByRef<::System::Number_::BigInteger> result, ByRef<::System::Number_::BigInteger> value);
    // static public System.Void SetZero(out System.Number/BigInteger result)
    // Offset: 0x5755108
    static void SetZero(ByRef<::System::Number_::BigInteger> result);
    // public System.Void ShiftLeft(System.UInt32 shift)
    // Offset: 0x574CCA0
    void ShiftLeft(uint shift);
    // public System.UInt64 ToUInt64()
    // Offset: 0x5755620
    uint64_t ToUInt64();
    // private System.UInt32* GetBlocksPointer()
    // Offset: 0x575C0F4
    uint* GetBlocksPointer();
    // static private System.UInt32 DivRem32(System.UInt32 value, out System.UInt32 remainder)
    // Offset: 0x575C0FC
    static uint DivRem32(uint value, ByRef<uint> remainder);
    // static private System.Void .cctor()
    // Offset: 0x575C17C
    static void _cctor();
  }; // System.Number/BigInteger
  #pragma pack(pop)
  static check_size<sizeof(Number_::BigInteger), 4 + sizeof(::System::Number_::BigInteger::$_blocks$e__FixedBuffer)> __System_Number__BigIntegerSizeCheck;
  static_assert(sizeof(Number_::BigInteger) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Number_::BigInteger::$_blocks$e__FixedBuffer, "System", "Number/BigInteger/<_blocks>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number_::BigInteger::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Add)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs, result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Compare)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::CountSignificantBits
// Il2CppName: CountSignificantBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::Number_::BigInteger::CountSignificantBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "CountSignificantBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::CountSignificantBits
// Il2CppName: CountSignificantBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Number_::BigInteger::CountSignificantBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "CountSignificantBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::CountSignificantBits
// Il2CppName: CountSignificantBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::CountSignificantBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "CountSignificantBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::DivRem
// Il2CppName: DivRem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::DivRem)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* quo = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* rem = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "DivRem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs, quo, rem});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::HeuristicDivide
// Il2CppName: HeuristicDivide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::HeuristicDivide)> {
  static const MethodInfo* get() {
    static auto* dividend = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* divisor = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "HeuristicDivide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dividend, divisor});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, uint, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Multiply)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, value, result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Multiply)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs, result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Pow2
// Il2CppName: Pow2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Pow2)> {
  static const MethodInfo* get() {
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Pow2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exponent, result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Pow10
// Il2CppName: Pow10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Pow10)> {
  static const MethodInfo* get() {
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Pow10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exponent, result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::AddDivisor
// Il2CppName: AddDivisor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Number_::BigInteger>, int, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::AddDivisor)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* lhsStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "AddDivisor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, lhsStartIndex, rhs});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::DivideGuessTooBig
// Il2CppName: DivideGuessTooBig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint64_t, uint, uint, uint)>(&System::Number_::BigInteger::DivideGuessTooBig)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* valHi = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* valLo = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* divHi = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* divLo = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "DivideGuessTooBig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q, valHi, valLo, divHi, divLo});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::SubtractDivisor
// Il2CppName: SubtractDivisor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Number_::BigInteger>, int, ByRef<::System::Number_::BigInteger>, uint64_t)>(&System::Number_::BigInteger::SubtractDivisor)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* lhsStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* q = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "SubtractDivisor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, lhsStartIndex, rhs, q});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)(uint)>(&System::Number_::BigInteger::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::GetBlock
// Il2CppName: GetBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Number_::BigInteger::*)(uint)>(&System::Number_::BigInteger::GetBlock)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "GetBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::GetLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::IsOne
// Il2CppName: IsOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::IsOne)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "IsOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::IsZero
// Il2CppName: IsZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::IsZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "IsZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)(uint)>(&System::Number_::BigInteger::Multiply)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)(ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::Multiply)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::Multiply10
// Il2CppName: Multiply10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::Multiply10)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "Multiply10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::MultiplyPow10
// Il2CppName: MultiplyPow10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)(uint)>(&System::Number_::BigInteger::MultiplyPow10)> {
  static const MethodInfo* get() {
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "MultiplyPow10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exponent});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::SetUInt32
// Il2CppName: SetUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, uint)>(&System::Number_::BigInteger::SetUInt32)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "SetUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::SetUInt64
// Il2CppName: SetUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, uint64_t)>(&System::Number_::BigInteger::SetUInt64)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "SetUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>, ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::SetValue)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, value});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::SetZero
// Il2CppName: SetZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number_::BigInteger>)>(&System::Number_::BigInteger::SetZero)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Number/BigInteger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "SetZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::ShiftLeft
// Il2CppName: ShiftLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Number_::BigInteger::*)(uint)>(&System::Number_::BigInteger::ShiftLeft)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "ShiftLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::ToUInt64
// Il2CppName: ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::ToUInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::GetBlocksPointer
// Il2CppName: GetBlocksPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint* (System::Number_::BigInteger::*)()>(&System::Number_::BigInteger::GetBlocksPointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "GetBlocksPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::DivRem32
// Il2CppName: DivRem32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, ByRef<uint>)>(&System::Number_::BigInteger::DivRem32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remainder = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), "DivRem32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, remainder});
  }
};
// Writing MetadataGetter for method: System::Number_::BigInteger::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Number_::BigInteger::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::BigInteger), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
