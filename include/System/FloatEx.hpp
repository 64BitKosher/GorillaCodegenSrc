// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: FloatEx
  class FloatEx;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::FloatEx);
DEFINE_IL2CPP_ARG_TYPE(::System::FloatEx*, "System", "FloatEx");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.FloatEx
  // [TokenAttribute] Offset: FFFFFFFF
  class FloatEx : public ::Il2CppObject {
    public:
    // static public System.Boolean IsFinite(System.Double d)
    // Offset: 0x574AEF0
    static bool IsFinite(double d);
    // static public System.Boolean IsNegative(System.Double d)
    // Offset: 0x574AF04
    static bool IsNegative(double d);
    // static public System.Boolean IsFinite(System.Single f)
    // Offset: 0x574AF10
    static bool IsFinite(float f);
    // static public System.Boolean IsNegative(System.Single f)
    // Offset: 0x574AF24
    static bool IsNegative(float f);
    // static public System.Int32 SingleToInt32Bits(System.Single value)
    // Offset: 0x574AF30
    static int SingleToInt32Bits(float value);
  }; // System.FloatEx
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::FloatEx::IsFinite
// Il2CppName: IsFinite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&System::FloatEx::IsFinite)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::FloatEx*), "IsFinite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::FloatEx::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&System::FloatEx::IsNegative)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::FloatEx*), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::FloatEx::IsFinite
// Il2CppName: IsFinite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&System::FloatEx::IsFinite)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::FloatEx*), "IsFinite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: System::FloatEx::IsNegative
// Il2CppName: IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&System::FloatEx::IsNegative)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::FloatEx*), "IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: System::FloatEx::SingleToInt32Bits
// Il2CppName: SingleToInt32Bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&System::FloatEx::SingleToInt32Bits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::FloatEx*), "SingleToInt32Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
