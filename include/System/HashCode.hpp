// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: HashCode
  struct HashCode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::HashCode, "System", "HashCode");
// Type namespace: System
namespace System {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.HashCode
  // [TokenAttribute] Offset: FFFFFFFF
  struct HashCode/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 _v1
    // Size: 0x4
    // Offset: 0x0
    uint v1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _v2
    // Size: 0x4
    // Offset: 0x4
    uint v2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _v3
    // Size: 0x4
    // Offset: 0x8
    uint v3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _v4
    // Size: 0x4
    // Offset: 0xC
    uint v4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _queue1
    // Size: 0x4
    // Offset: 0x10
    uint queue1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _queue2
    // Size: 0x4
    // Offset: 0x14
    uint queue2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _queue3
    // Size: 0x4
    // Offset: 0x18
    uint queue3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _length
    // Size: 0x4
    // Offset: 0x1C
    uint length;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: HashCode
    constexpr HashCode(uint v1_ = {}, uint v2_ = {}, uint v3_ = {}, uint v4_ = {}, uint queue1_ = {}, uint queue2_ = {}, uint queue3_ = {}, uint length_ = {}) noexcept : v1{v1_}, v2{v2_}, v3{v3_}, v4{v4_}, queue1{queue1_}, queue2{queue2_}, queue3{queue3_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly System.UInt32 s_seed
    static uint _get_s_seed();
    // Set static field: static private readonly System.UInt32 s_seed
    static void _set_s_seed(uint value);
    // Get instance field reference: private System.UInt32 _v1
    [[deprecated("Use field access instead!")]] uint& dyn__v1();
    // Get instance field reference: private System.UInt32 _v2
    [[deprecated("Use field access instead!")]] uint& dyn__v2();
    // Get instance field reference: private System.UInt32 _v3
    [[deprecated("Use field access instead!")]] uint& dyn__v3();
    // Get instance field reference: private System.UInt32 _v4
    [[deprecated("Use field access instead!")]] uint& dyn__v4();
    // Get instance field reference: private System.UInt32 _queue1
    [[deprecated("Use field access instead!")]] uint& dyn__queue1();
    // Get instance field reference: private System.UInt32 _queue2
    [[deprecated("Use field access instead!")]] uint& dyn__queue2();
    // Get instance field reference: private System.UInt32 _queue3
    [[deprecated("Use field access instead!")]] uint& dyn__queue3();
    // Get instance field reference: private System.UInt32 _length
    [[deprecated("Use field access instead!")]] uint& dyn__length();
    // static private System.UInt32 GenerateGlobalSeed()
    // Offset: 0x46563C4
    static uint GenerateGlobalSeed();
    // static public System.Int32 Combine(T1 value1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    static int Combine(T1 value1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static int Combine(T1 value1, T2 value2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static int Combine(T1 value1, T2 value2, T3 value3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3, T4 value4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    static int Combine(T1 value1, T2 value2, T3 value3, T4 value4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3), ::il2cpp_utils::ExtractType(value4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3, value4);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5>
    static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3), ::il2cpp_utils::ExtractType(value4), ::il2cpp_utils::ExtractType(value5)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3, value4, value5);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3), ::il2cpp_utils::ExtractType(value4), ::il2cpp_utils::ExtractType(value5), ::il2cpp_utils::ExtractType(value6)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3, value4, value5, value6);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7>
    static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3), ::il2cpp_utils::ExtractType(value4), ::il2cpp_utils::ExtractType(value5), ::il2cpp_utils::ExtractType(value6), ::il2cpp_utils::ExtractType(value7)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3, value4, value5, value6, value7);
    }
    // static public System.Int32 Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
    static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Combine");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "HashCode", "Combine", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3), ::il2cpp_utils::ExtractType(value4), ::il2cpp_utils::ExtractType(value5), ::il2cpp_utils::ExtractType(value6), ::il2cpp_utils::ExtractType(value7), ::il2cpp_utils::ExtractType(value8)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T5>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T6>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T7>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T8>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value1, value2, value3, value4, value5, value6, value7, value8);
    }
    // static private System.UInt32 Rol(System.UInt32 value, System.Int32 count)
    // Offset: 0x46563E8
    static uint Rol(uint value, int count);
    // static private System.Void Initialize(out System.UInt32 v1, out System.UInt32 v2, out System.UInt32 v3, out System.UInt32 v4)
    // Offset: 0x46563F4
    static void Initialize(ByRef<uint> v1, ByRef<uint> v2, ByRef<uint> v3, ByRef<uint> v4);
    // static private System.UInt32 Round(System.UInt32 hash, System.UInt32 input)
    // Offset: 0x46564AC
    static uint Round(uint hash, uint input);
    // static private System.UInt32 QueueRound(System.UInt32 hash, System.UInt32 queuedValue)
    // Offset: 0x4656524
    static uint QueueRound(uint hash, uint queuedValue);
    // static private System.UInt32 MixState(System.UInt32 v1, System.UInt32 v2, System.UInt32 v3, System.UInt32 v4)
    // Offset: 0x465659C
    static uint MixState(uint v1, uint v2, uint v3, uint v4);
    // static private System.UInt32 MixEmptyState()
    // Offset: 0x4656640
    static uint MixEmptyState();
    // static private System.UInt32 MixFinal(System.UInt32 hash)
    // Offset: 0x46566A4
    static uint MixFinal(uint hash);
    // public System.Void Add(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Add(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::HashCode::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, value);
    }
    // private System.Void Add(System.Int32 value)
    // Offset: 0x46566CC
    void Add(int value);
    // public System.Int32 ToHashCode()
    // Offset: 0x4656964
    int ToHashCode();
    // static private System.Void .cctor()
    // Offset: 0x4656C50
    static void _cctor();
    // public override System.Int32 GetHashCode()
    // Offset: 0x4656B9C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x4656C08
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // System.HashCode
  #pragma pack(pop)
  static check_size<sizeof(HashCode), 28 + sizeof(uint)> __System_HashCodeSizeCheck;
  static_assert(sizeof(HashCode) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::HashCode::GenerateGlobalSeed
// Il2CppName: GenerateGlobalSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&System::HashCode::GenerateGlobalSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "GenerateGlobalSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Combine
// Il2CppName: Combine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Rol
// Il2CppName: Rol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int)>(&System::HashCode::Rol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "Rol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, count});
  }
};
// Writing MetadataGetter for method: System::HashCode::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint>, ByRef<uint>, ByRef<uint>, ByRef<uint>)>(&System::HashCode::Initialize)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* v4 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2, v3, v4});
  }
};
// Writing MetadataGetter for method: System::HashCode::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&System::HashCode::Round)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, input});
  }
};
// Writing MetadataGetter for method: System::HashCode::QueueRound
// Il2CppName: QueueRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint)>(&System::HashCode::QueueRound)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* queuedValue = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "QueueRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, queuedValue});
  }
};
// Writing MetadataGetter for method: System::HashCode::MixState
// Il2CppName: MixState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, uint, uint)>(&System::HashCode::MixState)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* v4 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "MixState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2, v3, v4});
  }
};
// Writing MetadataGetter for method: System::HashCode::MixEmptyState
// Il2CppName: MixEmptyState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&System::HashCode::MixEmptyState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "MixEmptyState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::HashCode::MixFinal
// Il2CppName: MixFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::HashCode::MixFinal)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "MixFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: System::HashCode::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::HashCode::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::HashCode::*)(int)>(&System::HashCode::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::HashCode::ToHashCode
// Il2CppName: ToHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::HashCode::*)()>(&System::HashCode::ToHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "ToHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::HashCode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::HashCode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::HashCode::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::HashCode::*)()>(&System::HashCode::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::HashCode::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::HashCode::*)(::Il2CppObject*)>(&System::HashCode::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::HashCode), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
