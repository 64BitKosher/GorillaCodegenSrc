// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: DateTimeFormatInfo
  class DateTimeFormatInfo;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: DateTimeFormat
  class DateTimeFormat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::DateTimeFormat);
DEFINE_IL2CPP_ARG_TYPE(::System::DateTimeFormat*, "System", "DateTimeFormat");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.DateTimeFormat
  // [TokenAttribute] Offset: FFFFFFFF
  class DateTimeFormat : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.TimeSpan NullOffset
    static ::System::TimeSpan _get_NullOffset();
    // Set static field: static readonly System.TimeSpan NullOffset
    static void _set_NullOffset(::System::TimeSpan value);
    // Get static field: static System.Char[] allStandardFormats
    static ::ArrayW<::Il2CppChar> _get_allStandardFormats();
    // Set static field: static System.Char[] allStandardFormats
    static void _set_allStandardFormats(::ArrayW<::Il2CppChar> value);
    // Get static field: static readonly System.Globalization.DateTimeFormatInfo InvariantFormatInfo
    static ::System::Globalization::DateTimeFormatInfo* _get_InvariantFormatInfo();
    // Set static field: static readonly System.Globalization.DateTimeFormatInfo InvariantFormatInfo
    static void _set_InvariantFormatInfo(::System::Globalization::DateTimeFormatInfo* value);
    // Get static field: static readonly System.String[] InvariantAbbreviatedMonthNames
    static ::ArrayW<::StringW> _get_InvariantAbbreviatedMonthNames();
    // Set static field: static readonly System.String[] InvariantAbbreviatedMonthNames
    static void _set_InvariantAbbreviatedMonthNames(::ArrayW<::StringW> value);
    // Get static field: static readonly System.String[] InvariantAbbreviatedDayNames
    static ::ArrayW<::StringW> _get_InvariantAbbreviatedDayNames();
    // Set static field: static readonly System.String[] InvariantAbbreviatedDayNames
    static void _set_InvariantAbbreviatedDayNames(::ArrayW<::StringW> value);
    // Get static field: static System.String[] fixedNumberFormats
    static ::ArrayW<::StringW> _get_fixedNumberFormats();
    // Set static field: static System.String[] fixedNumberFormats
    static void _set_fixedNumberFormats(::ArrayW<::StringW> value);
    // static System.Void FormatDigits(System.Text.StringBuilder outputBuffer, System.Int32 value, System.Int32 len)
    // Offset: 0x46454F8
    static void FormatDigits(::System::Text::StringBuilder* outputBuffer, int value, int len);
    // static System.Void FormatDigits(System.Text.StringBuilder outputBuffer, System.Int32 value, System.Int32 len, System.Boolean overrideLengthLimit)
    // Offset: 0x4645568
    static void FormatDigits(::System::Text::StringBuilder* outputBuffer, int value, int len, bool overrideLengthLimit);
    // static private System.Void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, System.Int32 digits)
    // Offset: 0x4645660
    static void HebrewFormatDigits(::System::Text::StringBuilder* outputBuffer, int digits);
    // static System.Int32 ParseRepeatPattern(System.ReadOnlySpan`1<System.Char> format, System.Int32 pos, System.Char patternChar)
    // Offset: 0x46456DC
    static int ParseRepeatPattern(::System::ReadOnlySpan_1<::Il2CppChar> format, int pos, ::Il2CppChar patternChar);
    // static private System.String FormatDayOfWeek(System.Int32 dayOfWeek, System.Int32 repeat, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0x4645764
    static ::StringW FormatDayOfWeek(int dayOfWeek, int repeat, ::System::Globalization::DateTimeFormatInfo* dtfi);
    // static private System.String FormatMonth(System.Int32 month, System.Int32 repeatCount, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0x4645798
    static ::StringW FormatMonth(int month, int repeatCount, ::System::Globalization::DateTimeFormatInfo* dtfi);
    // static private System.String FormatHebrewMonthName(System.DateTime time, System.Int32 month, System.Int32 repeatCount, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0x46457CC
    static ::StringW FormatHebrewMonthName(::System::DateTime time, int month, int repeatCount, ::System::Globalization::DateTimeFormatInfo* dtfi);
    // static System.Int32 ParseQuoteString(System.ReadOnlySpan`1<System.Char> format, System.Int32 pos, System.Text.StringBuilder result)
    // Offset: 0x464588C
    static int ParseQuoteString(::System::ReadOnlySpan_1<::Il2CppChar> format, int pos, ::System::Text::StringBuilder* result);
    // static System.Int32 ParseNextChar(System.ReadOnlySpan`1<System.Char> format, System.Int32 pos)
    // Offset: 0x4645A34
    static int ParseNextChar(::System::ReadOnlySpan_1<::Il2CppChar> format, int pos);
    // static private System.Boolean IsUseGenitiveForm(System.ReadOnlySpan`1<System.Char> format, System.Int32 index, System.Int32 tokenLen, System.Char patternToMatch)
    // Offset: 0x4645AA4
    static bool IsUseGenitiveForm(::System::ReadOnlySpan_1<::Il2CppChar> format, int index, int tokenLen, ::Il2CppChar patternToMatch);
    // static private System.Text.StringBuilder FormatCustomized(System.DateTime dateTime, System.ReadOnlySpan`1<System.Char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset, System.Text.StringBuilder result)
    // Offset: 0x4645BFC
    static ::System::Text::StringBuilder* FormatCustomized(::System::DateTime dateTime, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::DateTimeFormatInfo* dtfi, ::System::TimeSpan offset, ::System::Text::StringBuilder* result);
    // static private System.Void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.ReadOnlySpan`1<System.Char> format, System.Int32 tokenLen, System.Boolean timeOnly, System.Text.StringBuilder result)
    // Offset: 0x4646C94
    static void FormatCustomizedTimeZone(::System::DateTime dateTime, ::System::TimeSpan offset, ::System::ReadOnlySpan_1<::Il2CppChar> format, int tokenLen, bool timeOnly, ::System::Text::StringBuilder* result);
    // static private System.Void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result)
    // Offset: 0x4646FE4
    static void FormatCustomizedRoundripTimeZone(::System::DateTime dateTime, ::System::TimeSpan offset, ::System::Text::StringBuilder* result);
    // static private System.Void Append2DigitNumber(System.Text.StringBuilder result, System.Int32 val)
    // Offset: 0x46471E0
    static void Append2DigitNumber(::System::Text::StringBuilder* result, int val);
    // static System.String GetRealFormat(System.ReadOnlySpan`1<System.Char> format, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0x464723C
    static ::StringW GetRealFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::DateTimeFormatInfo* dtfi);
    // static private System.String ExpandPredefinedFormat(System.ReadOnlySpan`1<System.Char> format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset)
    // Offset: 0x46474E0
    static ::StringW ExpandPredefinedFormat(::System::ReadOnlySpan_1<::Il2CppChar> format, ByRef<::System::DateTime> dateTime, ByRef<::System::Globalization::DateTimeFormatInfo*> dtfi, ByRef<::System::TimeSpan> offset);
    // static System.String Format(System.DateTime dateTime, System.String format, System.IFormatProvider provider)
    // Offset: 0x463EF2C
    static ::StringW Format(::System::DateTime dateTime, ::StringW format, ::System::IFormatProvider* provider);
    // static System.String Format(System.DateTime dateTime, System.String format, System.IFormatProvider provider, System.TimeSpan offset)
    // Offset: 0x464272C
    static ::StringW Format(::System::DateTime dateTime, ::StringW format, ::System::IFormatProvider* provider, ::System::TimeSpan offset);
    // static System.Boolean TryFormat(System.DateTime dateTime, System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x463F260
    static bool TryFormat(::System::DateTime dateTime, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static System.Boolean TryFormat(System.DateTime dateTime, System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.TimeSpan offset)
    // Offset: 0x4642C98
    static bool TryFormat(::System::DateTime dateTime, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::TimeSpan offset);
    // static private System.Text.StringBuilder FormatStringBuilder(System.DateTime dateTime, System.ReadOnlySpan`1<System.Char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset)
    // Offset: 0x46481A0
    static ::System::Text::StringBuilder* FormatStringBuilder(::System::DateTime dateTime, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::DateTimeFormatInfo* dtfi, ::System::TimeSpan offset);
    // static private System.Boolean TryFormatO(System.DateTime dateTime, System.TimeSpan offset, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x464787C
    static bool TryFormatO(::System::DateTime dateTime, ::System::TimeSpan offset, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Boolean TryFormatR(System.DateTime dateTime, System.TimeSpan offset, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4647D90
    static bool TryFormatR(::System::DateTime dateTime, ::System::TimeSpan offset, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void WriteTwoDecimalDigits(System.UInt32 value, System.Span`1<System.Char> destination, System.Int32 offset)
    // Offset: 0x46484B4
    static void WriteTwoDecimalDigits(uint value, ::System::Span_1<::Il2CppChar> destination, int offset);
    // static private System.Void WriteFourDecimalDigits(System.UInt32 value, System.Span`1<System.Char> buffer, System.Int32 startingIndex)
    // Offset: 0x4648500
    static void WriteFourDecimalDigits(uint value, ::System::Span_1<::Il2CppChar> buffer, int startingIndex);
    // static private System.Void WriteDigits(System.UInt64 value, System.Span`1<System.Char> buffer)
    // Offset: 0x46485A0
    static void WriteDigits(uint64_t value, ::System::Span_1<::Il2CppChar> buffer);
    // static System.Void InvalidFormatForLocal(System.ReadOnlySpan`1<System.Char> format, System.DateTime dateTime)
    // Offset: 0x4647878
    static void InvalidFormatForLocal(::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::DateTime dateTime);
    // static private System.Void .cctor()
    // Offset: 0x464864C
    static void _cctor();
  }; // System.DateTimeFormat
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::DateTimeFormat::FormatDigits
// Il2CppName: FormatDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int, int)>(&System::DateTimeFormat::FormatDigits)> {
  static const MethodInfo* get() {
    static auto* outputBuffer = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBuffer, value, len});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatDigits
// Il2CppName: FormatDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int, int, bool)>(&System::DateTimeFormat::FormatDigits)> {
  static const MethodInfo* get() {
    static auto* outputBuffer = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideLengthLimit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBuffer, value, len, overrideLengthLimit});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::HebrewFormatDigits
// Il2CppName: HebrewFormatDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int)>(&System::DateTimeFormat::HebrewFormatDigits)> {
  static const MethodInfo* get() {
    static auto* outputBuffer = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "HebrewFormatDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBuffer, digits});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::ParseRepeatPattern
// Il2CppName: ParseRepeatPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int, ::Il2CppChar)>(&System::DateTimeFormat::ParseRepeatPattern)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patternChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "ParseRepeatPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, pos, patternChar});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatDayOfWeek
// Il2CppName: FormatDayOfWeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int, ::System::Globalization::DateTimeFormatInfo*)>(&System::DateTimeFormat::FormatDayOfWeek)> {
  static const MethodInfo* get() {
    static auto* dayOfWeek = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* repeat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatDayOfWeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dayOfWeek, repeat, dtfi});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatMonth
// Il2CppName: FormatMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int, ::System::Globalization::DateTimeFormatInfo*)>(&System::DateTimeFormat::FormatMonth)> {
  static const MethodInfo* get() {
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* repeatCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{month, repeatCount, dtfi});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatHebrewMonthName
// Il2CppName: FormatHebrewMonthName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime, int, int, ::System::Globalization::DateTimeFormatInfo*)>(&System::DateTimeFormat::FormatHebrewMonthName)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* repeatCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatHebrewMonthName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, month, repeatCount, dtfi});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::ParseQuoteString
// Il2CppName: ParseQuoteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int, ::System::Text::StringBuilder*)>(&System::DateTimeFormat::ParseQuoteString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "ParseQuoteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, pos, result});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::ParseNextChar
// Il2CppName: ParseNextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&System::DateTimeFormat::ParseNextChar)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "ParseNextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, pos});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::IsUseGenitiveForm
// Il2CppName: IsUseGenitiveForm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int, int, ::Il2CppChar)>(&System::DateTimeFormat::IsUseGenitiveForm)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tokenLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* patternToMatch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "IsUseGenitiveForm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, index, tokenLen, patternToMatch});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatCustomized
// Il2CppName: FormatCustomized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)(::System::DateTime, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::DateTimeFormatInfo*, ::System::TimeSpan, ::System::Text::StringBuilder*)>(&System::DateTimeFormat::FormatCustomized)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatCustomized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, format, dtfi, offset, result});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatCustomizedTimeZone
// Il2CppName: FormatCustomizedTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::DateTime, ::System::TimeSpan, ::System::ReadOnlySpan_1<::Il2CppChar>, int, bool, ::System::Text::StringBuilder*)>(&System::DateTimeFormat::FormatCustomizedTimeZone)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* tokenLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* timeOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatCustomizedTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset, format, tokenLen, timeOnly, result});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatCustomizedRoundripTimeZone
// Il2CppName: FormatCustomizedRoundripTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::DateTime, ::System::TimeSpan, ::System::Text::StringBuilder*)>(&System::DateTimeFormat::FormatCustomizedRoundripTimeZone)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatCustomizedRoundripTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset, result});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::Append2DigitNumber
// Il2CppName: Append2DigitNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int)>(&System::DateTimeFormat::Append2DigitNumber)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "Append2DigitNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, val});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::GetRealFormat
// Il2CppName: GetRealFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::DateTimeFormatInfo*)>(&System::DateTimeFormat::GetRealFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "GetRealFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, dtfi});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::ExpandPredefinedFormat
// Il2CppName: ExpandPredefinedFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<::System::DateTime>, ByRef<::System::Globalization::DateTimeFormatInfo*>, ByRef<::System::TimeSpan>)>(&System::DateTimeFormat::ExpandPredefinedFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->this_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "ExpandPredefinedFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, dateTime, dtfi, offset});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime, ::StringW, ::System::IFormatProvider*)>(&System::DateTimeFormat::Format)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, format, provider});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime, ::StringW, ::System::IFormatProvider*, ::System::TimeSpan)>(&System::DateTimeFormat::Format)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, format, provider, offset});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::Span_1<::Il2CppChar>, ByRef<int>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::DateTimeFormat::TryFormat)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, destination, charsWritten, format, provider});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::Span_1<::Il2CppChar>, ByRef<int>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::TimeSpan)>(&System::DateTimeFormat::TryFormat)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, destination, charsWritten, format, provider, offset});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::FormatStringBuilder
// Il2CppName: FormatStringBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (*)(::System::DateTime, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::DateTimeFormatInfo*, ::System::TimeSpan)>(&System::DateTimeFormat::FormatStringBuilder)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* dtfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "FormatStringBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, format, dtfi, offset});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::TryFormatO
// Il2CppName: TryFormatO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeSpan, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::DateTimeFormat::TryFormatO)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "TryFormatO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::TryFormatR
// Il2CppName: TryFormatR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, ::System::TimeSpan, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::DateTimeFormat::TryFormatR)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "TryFormatR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::WriteTwoDecimalDigits
// Il2CppName: WriteTwoDecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ::System::Span_1<::Il2CppChar>, int)>(&System::DateTimeFormat::WriteTwoDecimalDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "WriteTwoDecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destination, offset});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::WriteFourDecimalDigits
// Il2CppName: WriteFourDecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ::System::Span_1<::Il2CppChar>, int)>(&System::DateTimeFormat::WriteFourDecimalDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* startingIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "WriteFourDecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, startingIndex});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::WriteDigits
// Il2CppName: WriteDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ::System::Span_1<::Il2CppChar>)>(&System::DateTimeFormat::WriteDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "WriteDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::InvalidFormatForLocal
// Il2CppName: InvalidFormatForLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::DateTime)>(&System::DateTimeFormat::InvalidFormatForLocal)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), "InvalidFormatForLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, dateTime});
  }
};
// Writing MetadataGetter for method: System::DateTimeFormat::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::DateTimeFormat::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeFormat*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
