// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: NumberStyles
  struct NumberStyles;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: ValueStringBuilder
  struct ValueStringBuilder;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Number
  class Number;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Number);
DEFINE_IL2CPP_ARG_TYPE(::System::Number*, "System", "Number");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Number
  // [TokenAttribute] Offset: FFFFFFFF
  class Number : public ::Il2CppObject {
    public:
    // Nested type: ::System::Number::NumberBuffer
    struct NumberBuffer;
    // Get static field: static private readonly System.String[] s_posCurrencyFormats
    static ::ArrayW<::StringW> _get_s_posCurrencyFormats();
    // Set static field: static private readonly System.String[] s_posCurrencyFormats
    static void _set_s_posCurrencyFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negCurrencyFormats
    static ::ArrayW<::StringW> _get_s_negCurrencyFormats();
    // Set static field: static private readonly System.String[] s_negCurrencyFormats
    static void _set_s_negCurrencyFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_posPercentFormats
    static ::ArrayW<::StringW> _get_s_posPercentFormats();
    // Set static field: static private readonly System.String[] s_posPercentFormats
    static void _set_s_posPercentFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negPercentFormats
    static ::ArrayW<::StringW> _get_s_negPercentFormats();
    // Set static field: static private readonly System.String[] s_negPercentFormats
    static void _set_s_negPercentFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.String[] s_negNumberFormats
    static ::ArrayW<::StringW> _get_s_negNumberFormats();
    // Set static field: static private readonly System.String[] s_negNumberFormats
    static void _set_s_negNumberFormats(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.Int32[] s_charToHexLookup
    static ::ArrayW<int> _get_s_charToHexLookup();
    // Set static field: static private readonly System.Int32[] s_charToHexLookup
    static void _set_s_charToHexLookup(::ArrayW<int> value);
    // Get static field: static private readonly System.UInt64[] s_rgval64Power10
    static ::ArrayW<uint64_t> _get_s_rgval64Power10();
    // Set static field: static private readonly System.UInt64[] s_rgval64Power10
    static void _set_s_rgval64Power10(::ArrayW<uint64_t> value);
    // Get static field: static private readonly System.SByte[] s_rgexp64Power10
    static ::ArrayW<int8_t> _get_s_rgexp64Power10();
    // Set static field: static private readonly System.SByte[] s_rgexp64Power10
    static void _set_s_rgexp64Power10(::ArrayW<int8_t> value);
    // Get static field: static private readonly System.UInt64[] s_rgval64Power10By16
    static ::ArrayW<uint64_t> _get_s_rgval64Power10By16();
    // Set static field: static private readonly System.UInt64[] s_rgval64Power10By16
    static void _set_s_rgval64Power10By16(::ArrayW<uint64_t> value);
    // Get static field: static private readonly System.Int16[] s_rgexp64Power10By16
    static ::ArrayW<int16_t> _get_s_rgexp64Power10By16();
    // Set static field: static private readonly System.Int16[] s_rgexp64Power10By16
    static void _set_s_rgexp64Power10By16(::ArrayW<int16_t> value);
    // static public System.String FormatDecimal(System.Decimal value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x465E59C
    static ::StringW FormatDecimal(::System::Decimal value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatDecimal(System.Decimal value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4660170
    static bool TryFormatDecimal(::System::Decimal value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void DecimalToNumber(System.Decimal value, ref System.Number/NumberBuffer number)
    // Offset: 0x465E890
    static void DecimalToNumber(::System::Decimal value, ByRef<::System::Number::NumberBuffer> number);
    // static public System.String FormatDouble(System.Double value, System.String format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4660380
    static ::StringW FormatDouble(double value, ::StringW format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatDouble(System.Double value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x46607AC
    static bool TryFormatDouble(double value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String FormatDouble(ref System.Text.ValueStringBuilder sb, System.Double value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46604C0
    static ::StringW FormatDouble(ByRef<::System::Text::ValueStringBuilder> sb, double value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.String FormatSingle(System.Single value, System.String format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x466129C
    static ::StringW FormatSingle(float value, ::StringW format, ::System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryFormatSingle(System.Single value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x46616D4
    static bool TryFormatSingle(float value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String FormatSingle(ref System.Text.ValueStringBuilder sb, System.Single value, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46613DC
    static ::StringW FormatSingle(ByRef<::System::Text::ValueStringBuilder> sb, float value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean TryCopyTo(System.String source, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4660908
    static bool TryCopyTo(::StringW source, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatInt32(System.Int32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x4657240
    static ::StringW FormatInt32(int value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatInt32(System.Int32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4657D00
    static bool TryFormatInt32(int value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatUInt32(System.UInt32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x46576E8
    static ::StringW FormatUInt32(uint value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatUInt32(System.UInt32 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4657A60
    static bool TryFormatUInt32(uint value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatInt64(System.Int64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x465A024
    static ::StringW FormatInt64(int64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatInt64(System.Int64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x465A558
    static bool TryFormatInt64(int64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static public System.String FormatUInt64(System.UInt64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider)
    // Offset: 0x46631A8
    static ::StringW FormatUInt64(uint64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider);
    // static public System.Boolean TryFormatUInt64(System.UInt64 value, System.ReadOnlySpan`1<System.Char> format, System.IFormatProvider provider, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x466359C
    static bool TryFormatUInt64(uint64_t value, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::IFormatProvider* provider, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void Int32ToNumber(System.Int32 value, ref System.Number/NumberBuffer number)
    // Offset: 0x4663838
    static void Int32ToNumber(int value, ByRef<::System::Number::NumberBuffer> number);
    // static private System.String NegativeInt32ToDecStr(System.Int32 value, System.Int32 digits, System.String sNegative)
    // Offset: 0x46619C0
    static ::StringW NegativeInt32ToDecStr(int value, int digits, ::StringW sNegative);
    // static private System.Boolean TryNegativeInt32ToDecStr(System.Int32 value, System.Int32 digits, System.String sNegative, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4661E68
    static bool TryNegativeInt32ToDecStr(int value, int digits, ::StringW sNegative, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String Int32ToHexStr(System.Int32 value, System.Char hexBase, System.Int32 digits)
    // Offset: 0x4661B6C
    static ::StringW Int32ToHexStr(int value, ::Il2CppChar hexBase, int digits);
    // static private System.Boolean TryInt32ToHexStr(System.Int32 value, System.Char hexBase, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4662050
    static bool TryInt32ToHexStr(int value, ::Il2CppChar hexBase, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Char* Int32ToHexChars(System.Char* buffer, System.UInt32 value, System.Int32 hexBase, System.Int32 digits)
    // Offset: 0x4663964
    static ::Il2CppChar* Int32ToHexChars(::Il2CppChar* buffer, uint value, int hexBase, int digits);
    // static private System.Void UInt32ToNumber(System.UInt32 value, ref System.Number/NumberBuffer number)
    // Offset: 0x46639A4
    static void UInt32ToNumber(uint value, ByRef<::System::Number::NumberBuffer> number);
    // static System.Char* UInt32ToDecChars(System.Char* bufferEnd, System.UInt32 value, System.Int32 digits)
    // Offset: 0x4660334
    static ::Il2CppChar* UInt32ToDecChars(::Il2CppChar* bufferEnd, uint value, int digits);
    // static private System.String UInt32ToDecStr(System.UInt32 value, System.Int32 digits)
    // Offset: 0x4661830
    static ::StringW UInt32ToDecStr(uint value, int digits);
    // static private System.Boolean TryUInt32ToDecStr(System.UInt32 value, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4661CA4
    static bool TryUInt32ToDecStr(uint value, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void Int64ToNumber(System.Int64 input, ref System.Number/NumberBuffer number)
    // Offset: 0x46628AC
    static void Int64ToNumber(int64_t input, ByRef<::System::Number::NumberBuffer> number);
    // static private System.String NegativeInt64ToDecStr(System.Int64 input, System.Int32 digits, System.String sNegative)
    // Offset: 0x466241C
    static ::StringW NegativeInt64ToDecStr(int64_t input, int digits, ::StringW sNegative);
    // static private System.Boolean TryNegativeInt64ToDecStr(System.Int64 input, System.Int32 digits, System.String sNegative, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4662CD8
    static bool TryNegativeInt64ToDecStr(int64_t input, int digits, ::StringW sNegative, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.String Int64ToHexStr(System.Int64 value, System.Char hexBase, System.Int32 digits)
    // Offset: 0x46626BC
    static ::StringW Int64ToHexStr(int64_t value, ::Il2CppChar hexBase, int digits);
    // static private System.Boolean TryInt64ToHexStr(System.Int64 value, System.Char hexBase, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4662FA4
    static bool TryInt64ToHexStr(int64_t value, ::Il2CppChar hexBase, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static private System.Void UInt64ToNumber(System.UInt64 value, ref System.Number/NumberBuffer number)
    // Offset: 0x4663408
    static void UInt64ToNumber(uint64_t value, ByRef<::System::Number::NumberBuffer> number);
    // static private System.String UInt64ToDecStr(System.UInt64 value, System.Int32 digits)
    // Offset: 0x46621C4
    static ::StringW UInt64ToDecStr(uint64_t value, int digits);
    // static private System.Boolean TryUInt64ToDecStr(System.UInt64 value, System.Int32 digits, System.Span`1<System.Char> destination, out System.Int32 charsWritten)
    // Offset: 0x4662A54
    static bool TryUInt64ToDecStr(uint64_t value, int digits, ::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten);
    // static System.Char ParseFormatSpecifier(System.ReadOnlySpan`1<System.Char> format, out System.Int32 digits)
    // Offset: 0x465E74C
    static ::Il2CppChar ParseFormatSpecifier(::System::ReadOnlySpan_1<::Il2CppChar> format, ByRef<int> digits);
    // static System.Void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Boolean isDecimal)
    // Offset: 0x465EAA8
    static void NumberToString(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, ::Il2CppChar format, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, bool isDecimal);
    // static System.Void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.ReadOnlySpan`1<System.Char> format, System.Globalization.NumberFormatInfo info)
    // Offset: 0x465F038
    static void NumberToStringFormat(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, ::System::ReadOnlySpan_1<::Il2CppChar> format, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4663BFC
    static void FormatCurrency(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Int32[] groupDigits, System.String sDecimal, System.String sGroup)
    // Offset: 0x4663E64
    static void FormatFixed(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, ::ArrayW<int> groupDigits, ::StringW sDecimal, ::StringW sGroup);
    // static private System.Void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4664394
    static void FormatNumber(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Char expChar)
    // Offset: 0x46645E8
    static void FormatScientific(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, ::Il2CppChar expChar);
    // static private System.Void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, System.Int32 value, System.Char expChar, System.Int32 minDigits, System.Boolean positiveSign)
    // Offset: 0x4664FAC
    static void FormatExponent(ByRef<::System::Text::ValueStringBuilder> sb, ::System::Globalization::NumberFormatInfo* info, int value, ::Il2CppChar expChar, int minDigits, bool positiveSign);
    // static private System.Void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info, System.Char expChar, System.Boolean bSuppressScientific)
    // Offset: 0x4664840
    static void FormatGeneral(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info, ::Il2CppChar expChar, bool bSuppressScientific);
    // static private System.Void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number/NumberBuffer number, System.Int32 nMinDigits, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4664BF8
    static void FormatPercent(ByRef<::System::Text::ValueStringBuilder> sb, ByRef<::System::Number::NumberBuffer> number, int nMinDigits, int nMaxDigits, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Void RoundNumber(ref System.Number/NumberBuffer number, System.Int32 pos)
    // Offset: 0x4663B00
    static void RoundNumber(ByRef<::System::Number::NumberBuffer> number, int pos);
    // static private System.Int32 FindSection(System.ReadOnlySpan`1<System.Char> format, System.Int32 section)
    // Offset: 0x4664E60
    static int FindSection(::System::ReadOnlySpan_1<::Il2CppChar> format, int section);
    // static private System.UInt32 Low32(System.UInt64 value)
    // Offset: 0x4663AFC
    static uint Low32(uint64_t value);
    // static private System.UInt32 High32(System.UInt64 value)
    // Offset: 0x4663AF4
    static uint High32(uint64_t value);
    // static private System.UInt32 Int64DivMod1E9(ref System.UInt64 value)
    // Offset: 0x4663ABC
    static uint Int64DivMod1E9(ByRef<uint64_t> value);
    // static private System.Boolean NumberToInt32(ref System.Number/NumberBuffer number, ref System.Int32 value)
    // Offset: 0x4665254
    static bool NumberToInt32(ByRef<::System::Number::NumberBuffer> number, ByRef<int> value);
    // static private System.Boolean NumberToInt64(ref System.Number/NumberBuffer number, ref System.Int64 value)
    // Offset: 0x4665310
    static bool NumberToInt64(ByRef<::System::Number::NumberBuffer> number, ByRef<int64_t> value);
    // static private System.Boolean NumberToUInt32(ref System.Number/NumberBuffer number, ref System.UInt32 value)
    // Offset: 0x46653C8
    static bool NumberToUInt32(ByRef<::System::Number::NumberBuffer> number, ByRef<uint> value);
    // static private System.Boolean NumberToUInt64(ref System.Number/NumberBuffer number, ref System.UInt64 value)
    // Offset: 0x4665478
    static bool NumberToUInt64(ByRef<::System::Number::NumberBuffer> number, ByRef<uint64_t> value);
    // static System.Int32 ParseInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46582AC
    static int ParseInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Int64 ParseInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x465A8F4
    static int64_t ParseInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.UInt32 ParseUInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4666954
    static uint ParseUInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.UInt64 ParseUInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46670D8
    static uint64_t ParseUInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean ParseNumber(ref System.Char* str, System.Char* strEnd, System.Globalization.NumberStyles styles, ref System.Number/NumberBuffer number, System.Globalization.NumberFormatInfo info, System.Boolean parseDecimal)
    // Offset: 0x4667888
    static bool ParseNumber(ByRef<::Il2CppChar*> str, ::Il2CppChar* strEnd, ::System::Globalization::NumberStyles styles, ByRef<::System::Number::NumberBuffer> number, ::System::Globalization::NumberFormatInfo* info, bool parseDecimal);
    // static System.Boolean TryParseInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int32 result)
    // Offset: 0x46585DC
    static bool TryParseInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int> result);
    // static private System.Boolean TryParseInt32IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int32 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4665528
    static bool TryParseInt32IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int> result, ByRef<bool> failureIsOverflow);
    // static private System.Boolean TryParseInt64IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int64 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4666018
    static bool TryParseInt64IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int64_t> result, ByRef<bool> failureIsOverflow);
    // static System.Boolean TryParseInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Int64 result)
    // Offset: 0x465AD3C
    static bool TryParseInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<int64_t> result);
    // static System.Boolean TryParseUInt32(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result)
    // Offset: 0x46681F4
    static bool TryParseUInt32(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result);
    // static private System.Boolean TryParseUInt32IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4666B04
    static bool TryParseUInt32IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result, ByRef<bool> failureIsOverflow);
    // static private System.Boolean TryParseUInt32HexNumberStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt32 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4665B90
    static bool TryParseUInt32HexNumberStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint> result, ByRef<bool> failureIsOverflow);
    // static System.Boolean TryParseUInt64(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result)
    // Offset: 0x4668378
    static bool TryParseUInt64(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result);
    // static private System.Boolean TryParseUInt64IntegerStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4667288
    static bool TryParseUInt64IntegerStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result, ByRef<bool> failureIsOverflow);
    // static private System.Boolean TryParseUInt64HexNumberStyle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.UInt64 result, ref System.Boolean failureIsOverflow)
    // Offset: 0x4666604
    static bool TryParseUInt64HexNumberStyle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<uint64_t> result, ByRef<bool> failureIsOverflow);
    // static System.Decimal ParseDecimal(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46684FC
    static ::System::Decimal ParseDecimal(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static private System.Boolean NumberBufferToDecimal(ref System.Number/NumberBuffer number, ref System.Decimal value)
    // Offset: 0x4668604
    static bool NumberBufferToDecimal(ByRef<::System::Number::NumberBuffer> number, ByRef<::System::Decimal> value);
    // static System.Double ParseDouble(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x46688FC
    static double ParseDouble(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Single ParseSingle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info)
    // Offset: 0x4668CD8
    static float ParseSingle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info);
    // static System.Boolean TryParseDecimal(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Decimal result)
    // Offset: 0x466903C
    static bool TryParseDecimal(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<::System::Decimal> result);
    // static System.Boolean TryParseDouble(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Double result)
    // Offset: 0x4669140
    static bool TryParseDouble(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<double> result);
    // static System.Boolean TryParseSingle(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, out System.Single result)
    // Offset: 0x4669244
    static bool TryParseSingle(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ::System::Globalization::NumberFormatInfo* info, ByRef<float> result);
    // static private System.Void StringToNumber(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, ref System.Number/NumberBuffer number, System.Globalization.NumberFormatInfo info, System.Boolean parseDecimal)
    // Offset: 0x4665EE0
    static void StringToNumber(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ByRef<::System::Number::NumberBuffer> number, ::System::Globalization::NumberFormatInfo* info, bool parseDecimal);
    // static System.Boolean TryStringToNumber(System.ReadOnlySpan`1<System.Char> value, System.Globalization.NumberStyles styles, ref System.Number/NumberBuffer number, System.Globalization.NumberFormatInfo info, System.Boolean parseDecimal)
    // Offset: 0x4668034
    static bool TryStringToNumber(::System::ReadOnlySpan_1<::Il2CppChar> value, ::System::Globalization::NumberStyles styles, ByRef<::System::Number::NumberBuffer> number, ::System::Globalization::NumberFormatInfo* info, bool parseDecimal);
    // static private System.Boolean TrailingZeros(System.ReadOnlySpan`1<System.Char> value, System.Int32 index)
    // Offset: 0x4668164
    static bool TrailingZeros(::System::ReadOnlySpan_1<::Il2CppChar> value, int index);
    // static private System.Char* MatchChars(System.Char* p, System.Char* pEnd, System.String value)
    // Offset: 0x4667FA0
    static ::Il2CppChar* MatchChars(::Il2CppChar* p, ::Il2CppChar* pEnd, ::StringW value);
    // static private System.Boolean IsWhite(System.Int32 ch)
    // Offset: 0x4667F84
    static bool IsWhite(int ch);
    // static private System.Boolean IsDigit(System.Int32 ch)
    // Offset: 0x4668024
    static bool IsDigit(int ch);
    // static private System.Void ThrowOverflowOrFormatException(System.Boolean overflow, System.String overflowResourceKey)
    // Offset: 0x4665B08
    static void ThrowOverflowOrFormatException(bool overflow, ::StringW overflowResourceKey);
    // static private System.Boolean NumberBufferToDouble(ref System.Number/NumberBuffer number, ref System.Double value)
    // Offset: 0x4668C4C
    static bool NumberBufferToDouble(ByRef<::System::Number::NumberBuffer> number, ByRef<double> value);
    // static private System.UInt32 DigitsToInt(System.Char* p, System.Int32 count)
    // Offset: 0x4669378
    static uint DigitsToInt(::Il2CppChar* p, int count);
    // static private System.UInt64 Mul32x32To64(System.UInt32 a, System.UInt32 b)
    // Offset: 0x46693AC
    static uint64_t Mul32x32To64(uint a, uint b);
    // static private System.UInt64 Mul64Lossy(System.UInt64 a, System.UInt64 b, ref System.Int32 pexp)
    // Offset: 0x46693B4
    static uint64_t Mul64Lossy(uint64_t a, uint64_t b, ByRef<int> pexp);
    // static private System.Int32 abs(System.Int32 value)
    // Offset: 0x466944C
    static int abs(int value);
    // static private System.Double NumberToDouble(ref System.Number/NumberBuffer number)
    // Offset: 0x4660DBC
    static double NumberToDouble(ByRef<::System::Number::NumberBuffer> number);
    // static private System.Void DoubleToNumber(System.Double value, System.Int32 precision, ref System.Number/NumberBuffer number)
    // Offset: 0x46609DC
    static void DoubleToNumber(double value, int precision, ByRef<::System::Number::NumberBuffer> number);
    // static private System.Void .cctor()
    // Offset: 0x4669458
    static void _cctor();
  }; // System.Number
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number::FormatDecimal
// Il2CppName: FormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Decimal, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatDecimal
// Il2CppName: TryFormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Decimal, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::DecimalToNumber
// Il2CppName: DecimalToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Decimal, ByRef<::System::Number::NumberBuffer>)>(&System::Number::DecimalToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "DecimalToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number::FormatDouble
// Il2CppName: FormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(double, ::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatDouble
// Il2CppName: TryFormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatDouble
// Il2CppName: FormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::System::Text::ValueStringBuilder>, double, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatDouble)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::FormatSingle
// Il2CppName: FormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float, ::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatSingle
// Il2CppName: TryFormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, info, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatSingle
// Il2CppName: FormatSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::System::Text::ValueStringBuilder>, float, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatSingle)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::TryCopyTo
// Il2CppName: TryCopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryCopyTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryCopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatInt32
// Il2CppName: FormatInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number::FormatInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatInt32
// Il2CppName: TryFormatInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatUInt32
// Il2CppName: FormatUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number::FormatUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatUInt32
// Il2CppName: TryFormatUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatInt64
// Il2CppName: FormatInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number::FormatInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatInt64
// Il2CppName: TryFormatInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::FormatUInt64
// Il2CppName: FormatUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*)>(&System::Number::FormatUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider});
  }
};
// Writing MetadataGetter for method: System::Number::TryFormatUInt64
// Il2CppName: TryFormatUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::IFormatProvider*, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryFormatUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryFormatUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format, provider, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::Int32ToNumber
// Il2CppName: Int32ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<::System::Number::NumberBuffer>)>(&System::Number::Int32ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int32ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number::NegativeInt32ToDecStr
// Il2CppName: NegativeInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int, ::StringW)>(&System::Number::NegativeInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NegativeInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, sNegative});
  }
};
// Writing MetadataGetter for method: System::Number::TryNegativeInt32ToDecStr
// Il2CppName: TryNegativeInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, ::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryNegativeInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryNegativeInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, sNegative, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::Int32ToHexStr
// Il2CppName: Int32ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::Il2CppChar, int)>(&System::Number::Int32ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int32ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number::TryInt32ToHexStr
// Il2CppName: TryInt32ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppChar, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryInt32ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryInt32ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::Int32ToHexChars
// Il2CppName: Int32ToHexChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, uint, int, int)>(&System::Number::Int32ToHexChars)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int32ToHexChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number::UInt32ToNumber
// Il2CppName: UInt32ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::System::Number::NumberBuffer>)>(&System::Number::UInt32ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "UInt32ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number::UInt32ToDecChars
// Il2CppName: UInt32ToDecChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, uint, int)>(&System::Number::UInt32ToDecChars)> {
  static const MethodInfo* get() {
    static auto* bufferEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "UInt32ToDecChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferEnd, value, digits});
  }
};
// Writing MetadataGetter for method: System::Number::UInt32ToDecStr
// Il2CppName: UInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint, int)>(&System::Number::UInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "UInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits});
  }
};
// Writing MetadataGetter for method: System::Number::TryUInt32ToDecStr
// Il2CppName: TryUInt32ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryUInt32ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryUInt32ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::Int64ToNumber
// Il2CppName: Int64ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<::System::Number::NumberBuffer>)>(&System::Number::Int64ToNumber)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int64ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, number});
  }
};
// Writing MetadataGetter for method: System::Number::NegativeInt64ToDecStr
// Il2CppName: NegativeInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, int, ::StringW)>(&System::Number::NegativeInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NegativeInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, digits, sNegative});
  }
};
// Writing MetadataGetter for method: System::Number::TryNegativeInt64ToDecStr
// Il2CppName: TryNegativeInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, int, ::StringW, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryNegativeInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sNegative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryNegativeInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, digits, sNegative, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::Int64ToHexStr
// Il2CppName: Int64ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int64_t, ::Il2CppChar, int)>(&System::Number::Int64ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int64ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits});
  }
};
// Writing MetadataGetter for method: System::Number::TryInt64ToHexStr
// Il2CppName: TryInt64ToHexStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t, ::Il2CppChar, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryInt64ToHexStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* hexBase = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryInt64ToHexStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, hexBase, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::UInt64ToNumber
// Il2CppName: UInt64ToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<::System::Number::NumberBuffer>)>(&System::Number::UInt64ToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "UInt64ToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, number});
  }
};
// Writing MetadataGetter for method: System::Number::UInt64ToDecStr
// Il2CppName: UInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint64_t, int)>(&System::Number::UInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "UInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits});
  }
};
// Writing MetadataGetter for method: System::Number::TryUInt64ToDecStr
// Il2CppName: TryUInt64ToDecStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, int, ::System::Span_1<::Il2CppChar>, ByRef<int>)>(&System::Number::TryUInt64ToDecStr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryUInt64ToDecStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, digits, destination, charsWritten});
  }
};
// Writing MetadataGetter for method: System::Number::ParseFormatSpecifier
// Il2CppName: ParseFormatSpecifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ByRef<int>)>(&System::Number::ParseFormatSpecifier)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseFormatSpecifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, digits});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, ::Il2CppChar, int, ::System::Globalization::NumberFormatInfo*, bool)>(&System::Number::NumberToString)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* isDecimal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, format, nMaxDigits, info, isDecimal});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToStringFormat
// Il2CppName: NumberToStringFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberFormatInfo*)>(&System::Number::NumberToStringFormat)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToStringFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, format, info});
  }
};
// Writing MetadataGetter for method: System::Number::FormatCurrency
// Il2CppName: FormatCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatCurrency)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number::FormatFixed
// Il2CppName: FormatFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*, ::ArrayW<int>, ::StringW, ::StringW)>(&System::Number::FormatFixed)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* groupDigits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* sDecimal = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sGroup = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info, groupDigits, sDecimal, sGroup});
  }
};
// Writing MetadataGetter for method: System::Number::FormatNumber
// Il2CppName: FormatNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatNumber)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number::FormatScientific
// Il2CppName: FormatScientific
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*, ::Il2CppChar)>(&System::Number::FormatScientific)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatScientific", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info, expChar});
  }
};
// Writing MetadataGetter for method: System::Number::FormatExponent
// Il2CppName: FormatExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ::System::Globalization::NumberFormatInfo*, int, ::Il2CppChar, int, bool)>(&System::Number::FormatExponent)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* minDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* positiveSign = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, info, value, expChar, minDigits, positiveSign});
  }
};
// Writing MetadataGetter for method: System::Number::FormatGeneral
// Il2CppName: FormatGeneral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*, ::Il2CppChar, bool)>(&System::Number::FormatGeneral)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* expChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* bSuppressScientific = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatGeneral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info, expChar, bSuppressScientific});
  }
};
// Writing MetadataGetter for method: System::Number::FormatPercent
// Il2CppName: FormatPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Text::ValueStringBuilder>, ByRef<::System::Number::NumberBuffer>, int, int, ::System::Globalization::NumberFormatInfo*)>(&System::Number::FormatPercent)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "ValueStringBuilder")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* nMinDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nMaxDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FormatPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, number, nMinDigits, nMaxDigits, info});
  }
};
// Writing MetadataGetter for method: System::Number::RoundNumber
// Il2CppName: RoundNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Number::NumberBuffer>, int)>(&System::Number::RoundNumber)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "RoundNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, pos});
  }
};
// Writing MetadataGetter for method: System::Number::FindSection
// Il2CppName: FindSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&System::Number::FindSection)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* section = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "FindSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, section});
  }
};
// Writing MetadataGetter for method: System::Number::Low32
// Il2CppName: Low32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Number::Low32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Low32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number::High32
// Il2CppName: High32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Number::High32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "High32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number::Int64DivMod1E9
// Il2CppName: Int64DivMod1E9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<uint64_t>)>(&System::Number::Int64DivMod1E9)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Int64DivMod1E9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToInt32
// Il2CppName: NumberToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<int>)>(&System::Number::NumberToInt32)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToInt64
// Il2CppName: NumberToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<int64_t>)>(&System::Number::NumberToInt64)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToUInt32
// Il2CppName: NumberToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<uint>)>(&System::Number::NumberToUInt32)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToUInt64
// Il2CppName: NumberToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<uint64_t>)>(&System::Number::NumberToUInt64)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::ParseInt32
// Il2CppName: ParseInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::ParseInt64
// Il2CppName: ParseInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::ParseUInt32
// Il2CppName: ParseUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::ParseUInt64
// Il2CppName: ParseUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::ParseNumber
// Il2CppName: ParseNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Il2CppChar*>, ::Il2CppChar*, ::System::Globalization::NumberStyles, ByRef<::System::Number::NumberBuffer>, ::System::Globalization::NumberFormatInfo*, bool)>(&System::Number::ParseNumber)> {
  static const MethodInfo* get() {
    static auto* str = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->this_arg;
    static auto* strEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* parseDecimal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, strEnd, styles, number, info, parseDecimal});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseInt32
// Il2CppName: TryParseInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int>)>(&System::Number::TryParseInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseInt32IntegerStyle
// Il2CppName: TryParseInt32IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int>, ByRef<bool>)>(&System::Number::TryParseInt32IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseInt32IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseInt64IntegerStyle
// Il2CppName: TryParseInt64IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int64_t>, ByRef<bool>)>(&System::Number::TryParseInt64IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseInt64IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseInt64
// Il2CppName: TryParseInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<int64_t>)>(&System::Number::TryParseInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt32
// Il2CppName: TryParseUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>)>(&System::Number::TryParseUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt32IntegerStyle
// Il2CppName: TryParseUInt32IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>, ByRef<bool>)>(&System::Number::TryParseUInt32IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt32IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt32HexNumberStyle
// Il2CppName: TryParseUInt32HexNumberStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint>, ByRef<bool>)>(&System::Number::TryParseUInt32HexNumberStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt32HexNumberStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt64
// Il2CppName: TryParseUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>)>(&System::Number::TryParseUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt64IntegerStyle
// Il2CppName: TryParseUInt64IntegerStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>, ByRef<bool>)>(&System::Number::TryParseUInt64IntegerStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt64IntegerStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseUInt64HexNumberStyle
// Il2CppName: TryParseUInt64HexNumberStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<uint64_t>, ByRef<bool>)>(&System::Number::TryParseUInt64HexNumberStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* failureIsOverflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseUInt64HexNumberStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result, failureIsOverflow});
  }
};
// Writing MetadataGetter for method: System::Number::ParseDecimal
// Il2CppName: ParseDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::NumberBufferToDecimal
// Il2CppName: NumberBufferToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<::System::Decimal>)>(&System::Number::NumberBufferToDecimal)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberBufferToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::ParseDouble
// Il2CppName: ParseDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::ParseSingle
// Il2CppName: ParseSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*)>(&System::Number::ParseSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ParseSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseDecimal
// Il2CppName: TryParseDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<::System::Decimal>)>(&System::Number::TryParseDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseDouble
// Il2CppName: TryParseDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<double>)>(&System::Number::TryParseDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::TryParseSingle
// Il2CppName: TryParseSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ::System::Globalization::NumberFormatInfo*, ByRef<float>)>(&System::Number::TryParseSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryParseSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, info, result});
  }
};
// Writing MetadataGetter for method: System::Number::StringToNumber
// Il2CppName: StringToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ByRef<::System::Number::NumberBuffer>, ::System::Globalization::NumberFormatInfo*, bool)>(&System::Number::StringToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* parseDecimal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "StringToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, number, info, parseDecimal});
  }
};
// Writing MetadataGetter for method: System::Number::TryStringToNumber
// Il2CppName: TryStringToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Globalization::NumberStyles, ByRef<::System::Number::NumberBuffer>, ::System::Globalization::NumberFormatInfo*, bool)>(&System::Number::TryStringToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* styles = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* parseDecimal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TryStringToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, styles, number, info, parseDecimal});
  }
};
// Writing MetadataGetter for method: System::Number::TrailingZeros
// Il2CppName: TrailingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::ReadOnlySpan_1<::Il2CppChar>, int)>(&System::Number::TrailingZeros)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "TrailingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index});
  }
};
// Writing MetadataGetter for method: System::Number::MatchChars
// Il2CppName: MatchChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, ::Il2CppChar*, ::StringW)>(&System::Number::MatchChars)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* pEnd = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "MatchChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, pEnd, value});
  }
};
// Writing MetadataGetter for method: System::Number::IsWhite
// Il2CppName: IsWhite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&System::Number::IsWhite)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "IsWhite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Number::IsDigit
// Il2CppName: IsDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&System::Number::IsDigit)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "IsDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Number::ThrowOverflowOrFormatException
// Il2CppName: ThrowOverflowOrFormatException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW)>(&System::Number::ThrowOverflowOrFormatException)> {
  static const MethodInfo* get() {
    static auto* overflow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overflowResourceKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "ThrowOverflowOrFormatException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overflow, overflowResourceKey});
  }
};
// Writing MetadataGetter for method: System::Number::NumberBufferToDouble
// Il2CppName: NumberBufferToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Number::NumberBuffer>, ByRef<double>)>(&System::Number::NumberBufferToDouble)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberBufferToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, value});
  }
};
// Writing MetadataGetter for method: System::Number::DigitsToInt
// Il2CppName: DigitsToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Il2CppChar*, int)>(&System::Number::DigitsToInt)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "DigitsToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, count});
  }
};
// Writing MetadataGetter for method: System::Number::Mul32x32To64
// Il2CppName: Mul32x32To64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint, uint)>(&System::Number::Mul32x32To64)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Mul32x32To64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Number::Mul64Lossy
// Il2CppName: Mul64Lossy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, uint64_t, ByRef<int>)>(&System::Number::Mul64Lossy)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pexp = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "Mul64Lossy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, pexp});
  }
};
// Writing MetadataGetter for method: System::Number::abs
// Il2CppName: abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Number::abs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Number::NumberToDouble
// Il2CppName: NumberToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(ByRef<::System::Number::NumberBuffer>)>(&System::Number::NumberToDouble)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "NumberToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: System::Number::DoubleToNumber
// Il2CppName: DoubleToNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(double, int, ByRef<::System::Number::NumberBuffer>)>(&System::Number::DoubleToNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Number/NumberBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Number*), "DoubleToNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, precision, number});
  }
};
// Writing MetadataGetter for method: System::Number::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Number::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
