// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.FileAttributes
#include "System/IO/FileAttributes.hpp"
// Including type: System.IO.MatchType
#include "System/IO/MatchType.hpp"
// Including type: System.IO.MatchCasing
#include "System/IO/MatchCasing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SearchOption
  struct SearchOption;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Forward declaring type: EnumerationOptions
  class EnumerationOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::EnumerationOptions);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::EnumerationOptions*, "System.IO", "EnumerationOptions");
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.EnumerationOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class EnumerationOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <RecurseSubdirectories>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool RecurseSubdirectories;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IgnoreInaccessible>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool IgnoreInaccessible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IgnoreInaccessible and: AttributesToSkip
    char __padding1[0x2] = {};
    // private System.IO.FileAttributes <AttributesToSkip>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::System::IO::FileAttributes AttributesToSkip;
    // Field size check
    static_assert(sizeof(::System::IO::FileAttributes) == 0x4);
    // private System.IO.MatchType <MatchType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::System::IO::MatchType MatchType;
    // Field size check
    static_assert(sizeof(::System::IO::MatchType) == 0x4);
    // private System.IO.MatchCasing <MatchCasing>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::System::IO::MatchCasing MatchCasing;
    // Field size check
    static_assert(sizeof(::System::IO::MatchCasing) == 0x4);
    // private System.Boolean <ReturnSpecialDirectories>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool ReturnSpecialDirectories;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.IO.EnumerationOptions <Compatible>k__BackingField
    static ::System::IO::EnumerationOptions* _get_$Compatible$k__BackingField();
    // Set static field: static private readonly System.IO.EnumerationOptions <Compatible>k__BackingField
    static void _set_$Compatible$k__BackingField(::System::IO::EnumerationOptions* value);
    // Get static field: static private readonly System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField
    static ::System::IO::EnumerationOptions* _get_$CompatibleRecursive$k__BackingField();
    // Set static field: static private readonly System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField
    static void _set_$CompatibleRecursive$k__BackingField(::System::IO::EnumerationOptions* value);
    // Get static field: static private readonly System.IO.EnumerationOptions <Default>k__BackingField
    static ::System::IO::EnumerationOptions* _get_$Default$k__BackingField();
    // Set static field: static private readonly System.IO.EnumerationOptions <Default>k__BackingField
    static void _set_$Default$k__BackingField(::System::IO::EnumerationOptions* value);
    // Get instance field reference: private System.Boolean <RecurseSubdirectories>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$RecurseSubdirectories$k__BackingField();
    // Get instance field reference: private System.Boolean <IgnoreInaccessible>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IgnoreInaccessible$k__BackingField();
    // Get instance field reference: private System.IO.FileAttributes <AttributesToSkip>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::IO::FileAttributes& dyn_$AttributesToSkip$k__BackingField();
    // Get instance field reference: private System.IO.MatchType <MatchType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::IO::MatchType& dyn_$MatchType$k__BackingField();
    // Get instance field reference: private System.IO.MatchCasing <MatchCasing>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::IO::MatchCasing& dyn_$MatchCasing$k__BackingField();
    // Get instance field reference: private System.Boolean <ReturnSpecialDirectories>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReturnSpecialDirectories$k__BackingField();
    // static System.IO.EnumerationOptions get_Compatible()
    // Offset: 0x45CB2DC
    static ::System::IO::EnumerationOptions* get_Compatible();
    // static private System.IO.EnumerationOptions get_CompatibleRecursive()
    // Offset: 0x45CB334
    static ::System::IO::EnumerationOptions* get_CompatibleRecursive();
    // static System.IO.EnumerationOptions get_Default()
    // Offset: 0x45CB38C
    static ::System::IO::EnumerationOptions* get_Default();
    // static System.IO.EnumerationOptions FromSearchOption(System.IO.SearchOption searchOption)
    // Offset: 0x45CA024
    static ::System::IO::EnumerationOptions* FromSearchOption(::System::IO::SearchOption searchOption);
    // public System.Boolean get_RecurseSubdirectories()
    // Offset: 0x45CB40C
    bool get_RecurseSubdirectories();
    // public System.Void set_RecurseSubdirectories(System.Boolean value)
    // Offset: 0x45CB414
    void set_RecurseSubdirectories(bool value);
    // public System.Boolean get_IgnoreInaccessible()
    // Offset: 0x45CB420
    bool get_IgnoreInaccessible();
    // public System.Void set_IgnoreInaccessible(System.Boolean value)
    // Offset: 0x45CB428
    void set_IgnoreInaccessible(bool value);
    // public System.IO.FileAttributes get_AttributesToSkip()
    // Offset: 0x45CB434
    ::System::IO::FileAttributes get_AttributesToSkip();
    // public System.Void set_AttributesToSkip(System.IO.FileAttributes value)
    // Offset: 0x45CB43C
    void set_AttributesToSkip(::System::IO::FileAttributes value);
    // public System.IO.MatchType get_MatchType()
    // Offset: 0x45CB444
    ::System::IO::MatchType get_MatchType();
    // public System.Void set_MatchType(System.IO.MatchType value)
    // Offset: 0x45CB44C
    void set_MatchType(::System::IO::MatchType value);
    // public System.IO.MatchCasing get_MatchCasing()
    // Offset: 0x45CB454
    ::System::IO::MatchCasing get_MatchCasing();
    // public System.Boolean get_ReturnSpecialDirectories()
    // Offset: 0x45CB45C
    bool get_ReturnSpecialDirectories();
    // static private System.Void .cctor()
    // Offset: 0x45CB464
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x45CB3E4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumerationOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::EnumerationOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumerationOptions*, creationType>()));
    }
  }; // System.IO.EnumerationOptions
  #pragma pack(pop)
  static check_size<sizeof(EnumerationOptions), 32 + sizeof(bool)> __System_IO_EnumerationOptionsSizeCheck;
  static_assert(sizeof(EnumerationOptions) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_Compatible
// Il2CppName: get_Compatible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::EnumerationOptions* (*)()>(&System::IO::EnumerationOptions::get_Compatible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_Compatible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_CompatibleRecursive
// Il2CppName: get_CompatibleRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::EnumerationOptions* (*)()>(&System::IO::EnumerationOptions::get_CompatibleRecursive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_CompatibleRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_Default
// Il2CppName: get_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::EnumerationOptions* (*)()>(&System::IO::EnumerationOptions::get_Default)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::FromSearchOption
// Il2CppName: FromSearchOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::EnumerationOptions* (*)(::System::IO::SearchOption)>(&System::IO::EnumerationOptions::FromSearchOption)> {
  static const MethodInfo* get() {
    static auto* searchOption = &::il2cpp_utils::GetClassFromName("System.IO", "SearchOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "FromSearchOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchOption});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_RecurseSubdirectories
// Il2CppName: get_RecurseSubdirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_RecurseSubdirectories)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_RecurseSubdirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::set_RecurseSubdirectories
// Il2CppName: set_RecurseSubdirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::EnumerationOptions::*)(bool)>(&System::IO::EnumerationOptions::set_RecurseSubdirectories)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "set_RecurseSubdirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_IgnoreInaccessible
// Il2CppName: get_IgnoreInaccessible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_IgnoreInaccessible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_IgnoreInaccessible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::set_IgnoreInaccessible
// Il2CppName: set_IgnoreInaccessible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::EnumerationOptions::*)(bool)>(&System::IO::EnumerationOptions::set_IgnoreInaccessible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "set_IgnoreInaccessible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_AttributesToSkip
// Il2CppName: get_AttributesToSkip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_AttributesToSkip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_AttributesToSkip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::set_AttributesToSkip
// Il2CppName: set_AttributesToSkip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::EnumerationOptions::*)(::System::IO::FileAttributes)>(&System::IO::EnumerationOptions::set_AttributesToSkip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.IO", "FileAttributes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "set_AttributesToSkip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_MatchType
// Il2CppName: get_MatchType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MatchType (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_MatchType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_MatchType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::set_MatchType
// Il2CppName: set_MatchType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::EnumerationOptions::*)(::System::IO::MatchType)>(&System::IO::EnumerationOptions::set_MatchType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.IO", "MatchType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "set_MatchType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_MatchCasing
// Il2CppName: get_MatchCasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MatchCasing (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_MatchCasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_MatchCasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::get_ReturnSpecialDirectories
// Il2CppName: get_ReturnSpecialDirectories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::EnumerationOptions::*)()>(&System::IO::EnumerationOptions::get_ReturnSpecialDirectories)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), "get_ReturnSpecialDirectories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::EnumerationOptions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::EnumerationOptions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::EnumerationOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
