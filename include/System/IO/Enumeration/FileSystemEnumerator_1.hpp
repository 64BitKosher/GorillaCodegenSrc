// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
#include "System/Runtime/ConstrainedExecution/CriticalFinalizerObject.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Interop/Sys/DirectoryEntry
#include "GlobalNamespace/Interop_Sys_DirectoryEntry.hpp"
// Including type: Interop/ErrorInfo
#include "GlobalNamespace/Interop.hpp"
// Including type: System.IO.Enumeration.FileSystemEntry
#include "System/IO/Enumeration/FileSystemEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: EnumerationOptions
  class EnumerationOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: System.IO.Enumeration
namespace System::IO::Enumeration {
  // Forward declaring type: FileSystemEnumerator`1<TResult>
  template<typename TResult>
  class FileSystemEnumerator_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::IO::Enumeration::FileSystemEnumerator_1, "System.IO.Enumeration", "FileSystemEnumerator`1");
// Type namespace: System.IO.Enumeration
namespace System::IO::Enumeration {
  // WARNING Size may be invalid!
  // Autogenerated type: System.IO.Enumeration.FileSystemEnumerator`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TResult>
  class FileSystemEnumerator_1 : public ::System::Runtime::ConstrainedExecution::CriticalFinalizerObject/*, public ::System::Collections::Generic::IEnumerator_1<TResult>*/ {
    public:
    public:
    // private readonly System.String _originalRootDirectory
    // Size: 0x8
    // Offset: 0x0
    ::StringW originalRootDirectory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _rootDirectory
    // Size: 0x8
    // Offset: 0x0
    ::StringW rootDirectory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.IO.EnumerationOptions _options
    // Size: 0x8
    // Offset: 0x0
    ::System::IO::EnumerationOptions* options;
    // Field size check
    static_assert(sizeof(::System::IO::EnumerationOptions*) == 0x8);
    // private readonly System.Object _lock
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.String _currentPath
    // Size: 0x8
    // Offset: 0x0
    ::StringW currentPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.IntPtr _directoryHandle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr directoryHandle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Boolean _lastEntryFound
    // Size: 0x1
    // Offset: 0x0
    bool lastEntryFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Queue`1<System.String> _pending
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<::StringW>* pending;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::StringW>*) == 0x8);
    // private Interop/Sys/DirectoryEntry _entry
    // Size: 0x10
    // Offset: 0x0
    ::GlobalNamespace::Interop::Sys::DirectoryEntry entry;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Interop::Sys::DirectoryEntry) == 0x10);
    // private TResult _current
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TResult current;
    // private System.Char[] _pathBuffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::Il2CppChar> pathBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Byte[] _entryBuffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> entryBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<TResult>
    operator ::System::Collections::Generic::IEnumerator_1<TResult>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<TResult>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String _originalRootDirectory
    [[deprecated("Use field access instead!")]] ::StringW& dyn__originalRootDirectory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__originalRootDirectory");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_originalRootDirectory"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String _rootDirectory
    [[deprecated("Use field access instead!")]] ::StringW& dyn__rootDirectory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__rootDirectory");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rootDirectory"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.IO.EnumerationOptions _options
    [[deprecated("Use field access instead!")]] ::System::IO::EnumerationOptions*& dyn__options() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__options");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_options"))->offset;
      return *reinterpret_cast<::System::IO::EnumerationOptions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Object _lock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lock() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__lock");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lock"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String _currentPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__currentPath() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__currentPath");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPath"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.IntPtr _directoryHandle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__directoryHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__directoryHandle");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directoryHandle"))->offset;
      return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _lastEntryFound
    [[deprecated("Use field access instead!")]] bool& dyn__lastEntryFound() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__lastEntryFound");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastEntryFound"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<System.String> _pending
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::StringW>*& dyn__pending() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__pending");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pending"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Interop/Sys/DirectoryEntry _entry
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Interop::Sys::DirectoryEntry& dyn__entry() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__entry");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entry"))->offset;
      return *reinterpret_cast<::GlobalNamespace::Interop::Sys::DirectoryEntry*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private TResult _current
    [[deprecated("Use field access instead!")]] TResult& dyn__current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__current");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
      return *reinterpret_cast<TResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Char[] _pathBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__pathBuffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__pathBuffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pathBuffer"))->offset;
      return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Byte[] _entryBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__entryBuffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::dyn__entryBuffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entryBuffer"))->offset;
      return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.String directory, System.IO.EnumerationOptions options)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FileSystemEnumerator_1<TResult>* New_ctor(::StringW directory, ::System::IO::EnumerationOptions* options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FileSystemEnumerator_1<TResult>*, creationType>(directory, options)));
    }
    // private System.Boolean InternalContinueOnError(Interop/ErrorInfo info, System.Boolean ignoreNotFound)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool InternalContinueOnError(::GlobalNamespace::Interop::ErrorInfo info, bool ignoreNotFound) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::InternalContinueOnError");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalContinueOnError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(ignoreNotFound)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, info, ignoreNotFound);
    }
    // static private System.Boolean IsDirectoryNotFound(Interop/ErrorInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsDirectoryNotFound(::GlobalNamespace::Interop::ErrorInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::IsDirectoryNotFound");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<FileSystemEnumerator_1<TResult>*>::get(), "IsDirectoryNotFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, info);
    }
    // static private System.Boolean IsAccessError(Interop/ErrorInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsAccessError(::GlobalNamespace::Interop::ErrorInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::IsAccessError");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<FileSystemEnumerator_1<TResult>*>::get(), "IsAccessError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, info);
    }
    // private System.IntPtr CreateDirectoryHandle(System.String path, System.Boolean ignoreNotFound)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::IntPtr CreateDirectoryHandle(::StringW path, bool ignoreNotFound) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::CreateDirectoryHandle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDirectoryHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(ignoreNotFound)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, path, ignoreNotFound);
    }
    // private System.Void CloseDirectoryHandle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CloseDirectoryHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::CloseDirectoryHandle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseDirectoryHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean MoveNext()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveNext() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::MoveNext");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void FindNextEntry()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FindNextEntry() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::FindNextEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindNextEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void FindNextEntry(System.Byte* entryBufferPtr, System.Int32 bufferLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FindNextEntry(uint8_t* entryBufferPtr, int bufferLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::FindNextEntry");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindNextEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entryBufferPtr), ::il2cpp_utils::ExtractType(bufferLength)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entryBufferPtr, bufferLength);
    }
    // private System.Boolean DequeueNextDirectory()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool DequeueNextDirectory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::DequeueNextDirectory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DequeueNextDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void InternalDispose(System.Boolean disposing)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InternalDispose(bool disposing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::InternalDispose");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
    }
    // protected System.Boolean ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldIncludeEntry(ByRef<::System::IO::Enumeration::FileSystemEntry> entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::ShouldIncludeEntry");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(entry));
    }
    // protected System.Boolean ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldRecurseIntoEntry(ByRef<::System::IO::Enumeration::FileSystemEntry> entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::ShouldRecurseIntoEntry");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(entry));
    }
    // protected TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult TransformEntry(ByRef<::System::IO::Enumeration::FileSystemEntry> entry) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::TransformEntry");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method, byref(entry));
    }
    // protected System.Void OnDirectoryFinished(System.ReadOnlySpan`1<System.Char> directory)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDirectoryFinished(::System::ReadOnlySpan_1<::Il2CppChar> directory) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::OnDirectoryFinished");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, directory);
    }
    // protected System.Boolean ContinueOnError(System.Int32 error)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContinueOnError(int error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::ContinueOnError");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, error);
    }
    // public TResult get_Current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult get_Current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::get_Current");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::System.Collections.IEnumerator.get_Current");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // private System.Void DirectoryFinished()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DirectoryFinished() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::DirectoryFinished");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DirectoryFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::Reset");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose(bool disposing) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Enumeration::FileSystemEnumerator_1<TResult>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
    }
    // protected override System.Void Finalize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::Finalize()
    void Finalize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Enumeration::FileSystemEnumerator_1::Finalize");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Runtime::ConstrainedExecution::CriticalFinalizerObject*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // System.IO.Enumeration.FileSystemEnumerator`1
  // Could not write size check! Type: System.IO.Enumeration.FileSystemEnumerator`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
