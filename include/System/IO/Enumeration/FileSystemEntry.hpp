// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Interop/Sys/DirectoryEntry
#include "GlobalNamespace/Interop_Sys_DirectoryEntry.hpp"
// Including type: System.IO.FileStatus
#include "System/IO/FileStatus.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.IO.FileAttributes
#include "System/IO/FileAttributes.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileSystemInfo
  class FileSystemInfo;
}
// Completed forward declares
// Type namespace: System.IO.Enumeration
namespace System::IO::Enumeration {
  // Forward declaring type: FileSystemEntry
  struct FileSystemEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Enumeration::FileSystemEntry, "System.IO.Enumeration", "FileSystemEntry");
// Type namespace: System.IO.Enumeration
namespace System::IO::Enumeration {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Enumeration.FileSystemEntry
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsByRefLikeAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: FFFFFFFF
  struct FileSystemEntry/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer
    struct $_fileNameBuffer$e__FixedBuffer;
    // Size: 0x2
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.IO.Enumeration.FileSystemEntry/<_fileNameBuffer>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $_fileNameBuffer$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Char FixedElementField
      // Size: 0x2
      // Offset: 0x0
      ::Il2CppChar FixedElementField;
      // Field size check
      static_assert(sizeof(::Il2CppChar) == 0x2);
      public:
      // Creating value type constructor for type: $_fileNameBuffer$e__FixedBuffer
      constexpr $_fileNameBuffer$e__FixedBuffer(::Il2CppChar FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::Il2CppChar
      constexpr operator ::Il2CppChar() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Char FixedElementField
      [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_FixedElementField();
    }; // System.IO.Enumeration.FileSystemEntry/<_fileNameBuffer>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(FileSystemEntry::$_fileNameBuffer$e__FixedBuffer), 0 + sizeof(::Il2CppChar)> __System_IO_Enumeration_FileSystemEntry_$_fileNameBuffer$e__FixedBufferSizeCheck;
    static_assert(sizeof(FileSystemEntry::$_fileNameBuffer$e__FixedBuffer) == 0x2);
    public:
    // Interop/Sys/DirectoryEntry _directoryEntry
    // Size: 0x10
    // Offset: 0x0
    ::GlobalNamespace::Interop::Sys::DirectoryEntry directoryEntry;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Interop::Sys::DirectoryEntry) == 0x10);
    // private System.IO.FileStatus _status
    // Size: 0x77
    // Offset: 0x10
    ::System::IO::FileStatus status;
    // Field size check
    static_assert(sizeof(::System::IO::FileStatus) == 0x77);
    // private System.Span`1<System.Char> _pathBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::System::Span_1<::Il2CppChar> pathBuffer;
    // private System.ReadOnlySpan`1<System.Char> _fullPath
    // Size: 0xFFFFFFFF
    // Offset: 0x98
    ::System::ReadOnlySpan_1<::Il2CppChar> fullPath;
    // private System.ReadOnlySpan`1<System.Char> _fileName
    // Size: 0xFFFFFFFF
    // Offset: 0xA8
    ::System::ReadOnlySpan_1<::Il2CppChar> fileName;
    // private System.IO.Enumeration.FileSystemEntry/<_fileNameBuffer>e__FixedBuffer _fileNameBuffer
    // Size: 0x2
    // Offset: 0xB8
    ::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer fileNameBuffer;
    // Field size check
    static_assert(sizeof(::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer) == 0x2);
    // private System.IO.FileAttributes _initialAttributes
    // Size: 0x4
    // Offset: 0x2B8
    ::System::IO::FileAttributes initialAttributes;
    // Field size check
    static_assert(sizeof(::System::IO::FileAttributes) == 0x4);
    // private System.ReadOnlySpan`1<System.Char> <Directory>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x2C0
    ::System::ReadOnlySpan_1<::Il2CppChar> Directory;
    // private System.ReadOnlySpan`1<System.Char> <RootDirectory>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x2D0
    ::System::ReadOnlySpan_1<::Il2CppChar> RootDirectory;
    // private System.ReadOnlySpan`1<System.Char> <OriginalRootDirectory>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x2E0
    ::System::ReadOnlySpan_1<::Il2CppChar> OriginalRootDirectory;
    public:
    // Creating value type constructor for type: FileSystemEntry
    constexpr FileSystemEntry(::GlobalNamespace::Interop::Sys::DirectoryEntry directoryEntry_ = {}, ::System::IO::FileStatus status_ = {}, ::System::Span_1<::Il2CppChar> pathBuffer_ = {}, ::System::ReadOnlySpan_1<::Il2CppChar> fullPath_ = {}, ::System::ReadOnlySpan_1<::Il2CppChar> fileName_ = {}, ::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer fileNameBuffer_ = {}, ::System::IO::FileAttributes initialAttributes_ = {}, ::System::ReadOnlySpan_1<::Il2CppChar> Directory_ = {}, ::System::ReadOnlySpan_1<::Il2CppChar> RootDirectory_ = {}, ::System::ReadOnlySpan_1<::Il2CppChar> OriginalRootDirectory_ = {}) noexcept : directoryEntry{directoryEntry_}, status{status_}, pathBuffer{pathBuffer_}, fullPath{fullPath_}, fileName{fileName_}, fileNameBuffer{fileNameBuffer_}, initialAttributes{initialAttributes_}, Directory{Directory_}, RootDirectory{RootDirectory_}, OriginalRootDirectory{OriginalRootDirectory_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Interop/Sys/DirectoryEntry _directoryEntry
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Interop::Sys::DirectoryEntry& dyn__directoryEntry();
    // Get instance field reference: private System.IO.FileStatus _status
    [[deprecated("Use field access instead!")]] ::System::IO::FileStatus& dyn__status();
    // Get instance field reference: private System.Span`1<System.Char> _pathBuffer
    [[deprecated("Use field access instead!")]] ::System::Span_1<::Il2CppChar>& dyn__pathBuffer();
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> _fullPath
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn__fullPath();
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> _fileName
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn__fileName();
    // Get instance field reference: private System.IO.Enumeration.FileSystemEntry/<_fileNameBuffer>e__FixedBuffer _fileNameBuffer
    [[deprecated("Use field access instead!")]] ::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer& dyn__fileNameBuffer();
    // Get instance field reference: private System.IO.FileAttributes _initialAttributes
    [[deprecated("Use field access instead!")]] ::System::IO::FileAttributes& dyn__initialAttributes();
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> <Directory>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn_$Directory$k__BackingField();
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> <RootDirectory>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn_$RootDirectory$k__BackingField();
    // Get instance field reference: private System.ReadOnlySpan`1<System.Char> <OriginalRootDirectory>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::ReadOnlySpan_1<::Il2CppChar>& dyn_$OriginalRootDirectory$k__BackingField();
    // static System.IO.FileAttributes Initialize(ref System.IO.Enumeration.FileSystemEntry entry, Interop/Sys/DirectoryEntry directoryEntry, System.ReadOnlySpan`1<System.Char> directory, System.ReadOnlySpan`1<System.Char> rootDirectory, System.ReadOnlySpan`1<System.Char> originalRootDirectory, System.Span`1<System.Char> pathBuffer)
    // Offset: 0x45E193C
    static ::System::IO::FileAttributes Initialize(ByRef<::System::IO::Enumeration::FileSystemEntry> entry, ::GlobalNamespace::Interop::Sys::DirectoryEntry directoryEntry, ::System::ReadOnlySpan_1<::Il2CppChar> directory, ::System::ReadOnlySpan_1<::Il2CppChar> rootDirectory, ::System::ReadOnlySpan_1<::Il2CppChar> originalRootDirectory, ::System::Span_1<::Il2CppChar> pathBuffer);
    // private System.ReadOnlySpan`1<System.Char> get_FullPath()
    // Offset: 0x45E1BB4
    ::System::ReadOnlySpan_1<::Il2CppChar> get_FullPath();
    // public System.ReadOnlySpan`1<System.Char> get_FileName()
    // Offset: 0x45E1CE4
    ::System::ReadOnlySpan_1<::Il2CppChar> get_FileName();
    // public System.ReadOnlySpan`1<System.Char> get_Directory()
    // Offset: 0x45E1D54
    ::System::ReadOnlySpan_1<::Il2CppChar> get_Directory();
    // private System.Void set_Directory(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x45E1D64
    void set_Directory(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.ReadOnlySpan`1<System.Char> get_RootDirectory()
    // Offset: 0x45E1D70
    ::System::ReadOnlySpan_1<::Il2CppChar> get_RootDirectory();
    // private System.Void set_RootDirectory(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x45E1D80
    void set_RootDirectory(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.ReadOnlySpan`1<System.Char> get_OriginalRootDirectory()
    // Offset: 0x45E1D8C
    ::System::ReadOnlySpan_1<::Il2CppChar> get_OriginalRootDirectory();
    // private System.Void set_OriginalRootDirectory(System.ReadOnlySpan`1<System.Char> value)
    // Offset: 0x45E1D9C
    void set_OriginalRootDirectory(::System::ReadOnlySpan_1<::Il2CppChar> value);
    // public System.IO.FileAttributes get_Attributes()
    // Offset: 0x45E1DA8
    ::System::IO::FileAttributes get_Attributes();
    // public System.Boolean get_IsDirectory()
    // Offset: 0x45E1DEC
    bool get_IsDirectory();
    // public System.IO.FileSystemInfo ToFileSystemInfo()
    // Offset: 0x45E1DF4
    ::System::IO::FileSystemInfo* ToFileSystemInfo();
    // public System.String ToFullPath()
    // Offset: 0x45E1E60
    ::StringW ToFullPath();
    // public System.String ToSpecifiedFullPath()
    // Offset: 0x45E1E88
    ::StringW ToSpecifiedFullPath();
  }; // System.IO.Enumeration.FileSystemEntry
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Enumeration::FileSystemEntry::$_fileNameBuffer$e__FixedBuffer, "System.IO.Enumeration", "FileSystemEntry/<_fileNameBuffer>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (*)(ByRef<::System::IO::Enumeration::FileSystemEntry>, ::GlobalNamespace::Interop::Sys::DirectoryEntry, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>, ::System::Span_1<::Il2CppChar>)>(&System::IO::Enumeration::FileSystemEntry::Initialize)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("System.IO.Enumeration", "FileSystemEntry")->this_arg;
    static auto* directoryEntry = &::il2cpp_utils::GetClassFromName("", "Interop/Sys/DirectoryEntry")->byval_arg;
    static auto* directory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* rootDirectory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* originalRootDirectory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* pathBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, directoryEntry, directory, rootDirectory, originalRootDirectory, pathBuffer});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_FullPath
// Il2CppName: get_FullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_FullPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_FullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_FileName
// Il2CppName: get_FileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_FileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_FileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_Directory
// Il2CppName: get_Directory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_Directory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_Directory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::set_Directory
// Il2CppName: set_Directory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Enumeration::FileSystemEntry::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::Enumeration::FileSystemEntry::set_Directory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "set_Directory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_RootDirectory
// Il2CppName: get_RootDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_RootDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_RootDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::set_RootDirectory
// Il2CppName: set_RootDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Enumeration::FileSystemEntry::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::Enumeration::FileSystemEntry::set_RootDirectory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "set_RootDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_OriginalRootDirectory
// Il2CppName: get_OriginalRootDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ReadOnlySpan_1<::Il2CppChar> (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_OriginalRootDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_OriginalRootDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::set_OriginalRootDirectory
// Il2CppName: set_OriginalRootDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Enumeration::FileSystemEntry::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::Enumeration::FileSystemEntry::set_OriginalRootDirectory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "set_OriginalRootDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::get_IsDirectory
// Il2CppName: get_IsDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::get_IsDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "get_IsDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::ToFileSystemInfo
// Il2CppName: ToFileSystemInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileSystemInfo* (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::ToFileSystemInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "ToFileSystemInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::ToFullPath
// Il2CppName: ToFullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::ToFullPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "ToFullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Enumeration::FileSystemEntry::ToSpecifiedFullPath
// Il2CppName: ToSpecifiedFullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Enumeration::FileSystemEntry::*)()>(&System::IO::Enumeration::FileSystemEntry::ToSpecifiedFullPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Enumeration::FileSystemEntry), "ToSpecifiedFullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
