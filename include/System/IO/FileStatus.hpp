// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Interop/Sys/FileStatus
#include "GlobalNamespace/Interop_Sys_FileStatus.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileAttributes
  struct FileAttributes;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Forward declaring type: FileStatus
  struct FileStatus;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::FileStatus, "System.IO", "FileStatus");
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x77
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.FileStatus
  // [TokenAttribute] Offset: FFFFFFFF
  struct FileStatus/*, public ::System::ValueType*/ {
    public:
    public:
    // private Interop/Sys/FileStatus _fileStatus
    // Size: 0x6C
    // Offset: 0x0
    ::GlobalNamespace::Interop::Sys::FileStatus fileStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Interop::Sys::FileStatus) == 0x6C);
    // Padding between fields: fileStatus and: fileStatusInitialized
    char __padding0[0x4] = {};
    // private System.Int32 _fileStatusInitialized
    // Size: 0x4
    // Offset: 0x70
    int fileStatusInitialized;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <InitiallyDirectory>k__BackingField
    // Size: 0x1
    // Offset: 0x74
    bool InitiallyDirectory;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean _isDirectory
    // Size: 0x1
    // Offset: 0x75
    bool isDirectory;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _exists
    // Size: 0x1
    // Offset: 0x76
    bool exists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: FileStatus
    constexpr FileStatus(::GlobalNamespace::Interop::Sys::FileStatus fileStatus_ = {}, int fileStatusInitialized_ = {}, bool InitiallyDirectory_ = {}, bool isDirectory_ = {}, bool exists_ = {}) noexcept : fileStatus{fileStatus_}, fileStatusInitialized{fileStatusInitialized_}, InitiallyDirectory{InitiallyDirectory_}, isDirectory{isDirectory_}, exists{exists_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Interop/Sys/FileStatus _fileStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Interop::Sys::FileStatus& dyn__fileStatus();
    // Get instance field reference: private System.Int32 _fileStatusInitialized
    [[deprecated("Use field access instead!")]] int& dyn__fileStatusInitialized();
    // Get instance field reference: private System.Boolean <InitiallyDirectory>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$InitiallyDirectory$k__BackingField();
    // Get instance field reference: System.Boolean _isDirectory
    [[deprecated("Use field access instead!")]] bool& dyn__isDirectory();
    // Get instance field reference: private System.Boolean _exists
    [[deprecated("Use field access instead!")]] bool& dyn__exists();
    // System.Boolean get_InitiallyDirectory()
    // Offset: 0x45CED5C
    bool get_InitiallyDirectory();
    // private System.Void set_InitiallyDirectory(System.Boolean value)
    // Offset: 0x45CED64
    void set_InitiallyDirectory(bool value);
    // static System.Void Initialize(ref System.IO.FileStatus status, System.Boolean isDirectory)
    // Offset: 0x45CED70
    static void Initialize(ByRef<::System::IO::FileStatus> status, bool isDirectory);
    // System.Boolean IsReadOnly(System.ReadOnlySpan`1<System.Char> path, System.Boolean continueOnError)
    // Offset: 0x45CED84
    bool IsReadOnly(::System::ReadOnlySpan_1<::Il2CppChar> path, bool continueOnError);
    // public System.IO.FileAttributes GetAttributes(System.ReadOnlySpan`1<System.Char> path, System.ReadOnlySpan`1<System.Char> fileName)
    // Offset: 0x45CEF34
    ::System::IO::FileAttributes GetAttributes(::System::ReadOnlySpan_1<::Il2CppChar> path, ::System::ReadOnlySpan_1<::Il2CppChar> fileName);
    // public System.Void SetAttributes(System.String path, System.IO.FileAttributes attributes)
    // Offset: 0x45CF01C
    void SetAttributes(::StringW path, ::System::IO::FileAttributes attributes);
    // System.Boolean GetExists(System.ReadOnlySpan`1<System.Char> path)
    // Offset: 0x45CF2A8
    bool GetExists(::System::ReadOnlySpan_1<::Il2CppChar> path);
    // System.DateTimeOffset GetCreationTime(System.ReadOnlySpan`1<System.Char> path, System.Boolean continueOnError)
    // Offset: 0x45CF484
    ::System::DateTimeOffset GetCreationTime(::System::ReadOnlySpan_1<::Il2CppChar> path, bool continueOnError);
    // private System.DateTimeOffset UnixTimeToDateTimeOffset(System.Int64 seconds, System.Int64 nanoseconds)
    // Offset: 0x45CF568
    ::System::DateTimeOffset UnixTimeToDateTimeOffset(int64_t seconds, int64_t nanoseconds);
    // System.Int64 GetLength(System.ReadOnlySpan`1<System.Char> path, System.Boolean continueOnError)
    // Offset: 0x45CF618
    int64_t GetLength(::System::ReadOnlySpan_1<::Il2CppChar> path, bool continueOnError);
    // public System.Void Refresh(System.ReadOnlySpan`1<System.Char> path)
    // Offset: 0x45CF2EC
    void Refresh(::System::ReadOnlySpan_1<::Il2CppChar> path);
    // System.Void EnsureStatInitialized(System.ReadOnlySpan`1<System.Char> path, System.Boolean continueOnError)
    // Offset: 0x45CEE74
    void EnsureStatInitialized(::System::ReadOnlySpan_1<::Il2CppChar> path, bool continueOnError);
  }; // System.IO.FileStatus
  #pragma pack(pop)
  static check_size<sizeof(FileStatus), 118 + sizeof(bool)> __System_IO_FileStatusSizeCheck;
  static_assert(sizeof(FileStatus) == 0x77);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::FileStatus::get_InitiallyDirectory
// Il2CppName: get_InitiallyDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::FileStatus::*)()>(&System::IO::FileStatus::get_InitiallyDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "get_InitiallyDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::set_InitiallyDirectory
// Il2CppName: set_InitiallyDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::FileStatus::*)(bool)>(&System::IO::FileStatus::set_InitiallyDirectory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "set_InitiallyDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::IO::FileStatus>, bool)>(&System::IO::FileStatus::Initialize)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.IO", "FileStatus")->this_arg;
    static auto* isDirectory = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, isDirectory});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::IsReadOnly
// Il2CppName: IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&System::IO::FileStatus::IsReadOnly)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* continueOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, continueOnError});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::FileStatus::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* fileName = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, fileName});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::SetAttributes
// Il2CppName: SetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::FileStatus::*)(::StringW, ::System::IO::FileAttributes)>(&System::IO::FileStatus::SetAttributes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.IO", "FileAttributes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "SetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, attributes});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::GetExists
// Il2CppName: GetExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::FileStatus::GetExists)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "GetExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::GetCreationTime
// Il2CppName: GetCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&System::IO::FileStatus::GetCreationTime)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* continueOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "GetCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, continueOnError});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::UnixTimeToDateTimeOffset
// Il2CppName: UnixTimeToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::IO::FileStatus::*)(int64_t, int64_t)>(&System::IO::FileStatus::UnixTimeToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* nanoseconds = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "UnixTimeToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds, nanoseconds});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&System::IO::FileStatus::GetLength)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* continueOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, continueOnError});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::IO::FileStatus::Refresh)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::FileStatus::EnsureStatInitialized
// Il2CppName: EnsureStatInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::FileStatus::*)(::System::ReadOnlySpan_1<::Il2CppChar>, bool)>(&System::IO::FileStatus::EnsureStatInitialized)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* continueOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::FileStatus), "EnsureStatInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, continueOnError});
  }
};
