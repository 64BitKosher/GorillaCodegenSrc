// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Marvin
  class Marvin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Marvin);
DEFINE_IL2CPP_ARG_TYPE(::System::Marvin*, "System", "Marvin");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Marvin
  // [TokenAttribute] Offset: FFFFFFFF
  class Marvin : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.UInt64 <DefaultSeed>k__BackingField
    static uint64_t _get_$DefaultSeed$k__BackingField();
    // Set static field: static private readonly System.UInt64 <DefaultSeed>k__BackingField
    static void _set_$DefaultSeed$k__BackingField(uint64_t value);
    // static public System.Int32 ComputeHash32(System.ReadOnlySpan`1<System.Byte> data, System.UInt64 seed)
    // Offset: 0x465BC28
    static int ComputeHash32(::System::ReadOnlySpan_1<uint8_t> data, uint64_t seed);
    // static public System.Int32 ComputeHash32(ref System.Byte data, System.Int32 count, System.UInt64 seed)
    // Offset: 0x465BCD4
    static int ComputeHash32(ByRef<uint8_t> data, int count, uint64_t seed);
    // static private System.Void Block(ref System.UInt32 rp0, ref System.UInt32 rp1)
    // Offset: 0x465C0C4
    static void Block(ByRef<uint> rp0, ByRef<uint> rp1);
    // static private System.UInt32 _rotl(System.UInt32 value, System.Int32 shift)
    // Offset: 0x465C14C
    static uint _rotl(uint value, int shift);
    // static public System.UInt64 get_DefaultSeed()
    // Offset: 0x465C158
    static uint64_t get_DefaultSeed();
    // static private System.UInt64 GenerateSeed()
    // Offset: 0x465C1B0
    static uint64_t GenerateSeed();
    // static private System.Void .cctor()
    // Offset: 0x465C1BC
    static void _cctor();
  }; // System.Marvin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Marvin::ComputeHash32
// Il2CppName: ComputeHash32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::ReadOnlySpan_1<uint8_t>, uint64_t)>(&System::Marvin::ComputeHash32)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "ComputeHash32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, seed});
  }
};
// Writing MetadataGetter for method: System::Marvin::ComputeHash32
// Il2CppName: ComputeHash32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<uint8_t>, int, uint64_t)>(&System::Marvin::ComputeHash32)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "ComputeHash32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, count, seed});
  }
};
// Writing MetadataGetter for method: System::Marvin::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint>, ByRef<uint>)>(&System::Marvin::Block)> {
  static const MethodInfo* get() {
    static auto* rp0 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* rp1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rp0, rp1});
  }
};
// Writing MetadataGetter for method: System::Marvin::_rotl
// Il2CppName: _rotl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int)>(&System::Marvin::_rotl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "_rotl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, shift});
  }
};
// Writing MetadataGetter for method: System::Marvin::get_DefaultSeed
// Il2CppName: get_DefaultSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&System::Marvin::get_DefaultSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "get_DefaultSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Marvin::GenerateSeed
// Il2CppName: GenerateSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&System::Marvin::GenerateSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), "GenerateSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Marvin::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Marvin::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Marvin*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
