// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: MathF
  class MathF;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::MathF);
DEFINE_IL2CPP_ARG_TYPE(::System::MathF*, "System", "MathF");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.MathF
  // [TokenAttribute] Offset: FFFFFFFF
  class MathF : public ::Il2CppObject {
    public:
    // Get static field: static private System.Single[] roundPower10Single
    static ::ArrayW<float> _get_roundPower10Single();
    // Set static field: static private System.Single[] roundPower10Single
    static void _set_roundPower10Single(::ArrayW<float> value);
    // Get static field: static private System.Single singleRoundLimit
    static float _get_singleRoundLimit();
    // Set static field: static private System.Single singleRoundLimit
    static void _set_singleRoundLimit(float value);
    // static public System.Single Abs(System.Single x)
    // Offset: 0x465CFC4
    static float Abs(float x);
    // static public System.Single Sin(System.Single x)
    // Offset: 0x465D020
    static float Sin(float x);
    // static private System.Void .cctor()
    // Offset: 0x465D024
    static void _cctor();
  }; // System.MathF
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::MathF::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&System::MathF::Abs)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MathF*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: System::MathF::Sin
// Il2CppName: Sin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&System::MathF::Sin)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::MathF*), "Sin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: System::MathF::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::MathF::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::MathF*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
