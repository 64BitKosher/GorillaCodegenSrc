// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Number
#include "System/Number_.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Number_::FloatingPointInfo, "System", "Number/FloatingPointInfo");
// Type namespace: System
namespace System {
  // Size: 0x36
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Number/FloatingPointInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct Number_::FloatingPointInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.UInt64 <ZeroBits>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t ZeroBits;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.UInt64 <InfinityBits>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    uint64_t InfinityBits;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.UInt64 <NormalMantissaMask>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    uint64_t NormalMantissaMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.UInt64 <DenormalMantissaMask>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    uint64_t DenormalMantissaMask;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.Int32 <MinBinaryExponent>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int MinBinaryExponent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <MaxBinaryExponent>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int MaxBinaryExponent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <ExponentBias>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int ExponentBias;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <OverflowDecimalExponent>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    int OverflowDecimalExponent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.UInt16 <NormalMantissaBits>k__BackingField
    // Size: 0x2
    // Offset: 0x30
    uint16_t NormalMantissaBits;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private readonly System.UInt16 <DenormalMantissaBits>k__BackingField
    // Size: 0x2
    // Offset: 0x32
    uint16_t DenormalMantissaBits;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private readonly System.UInt16 <ExponentBits>k__BackingField
    // Size: 0x2
    // Offset: 0x34
    uint16_t ExponentBits;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: FloatingPointInfo
    constexpr FloatingPointInfo(uint64_t ZeroBits_ = {}, uint64_t InfinityBits_ = {}, uint64_t NormalMantissaMask_ = {}, uint64_t DenormalMantissaMask_ = {}, int MinBinaryExponent_ = {}, int MaxBinaryExponent_ = {}, int ExponentBias_ = {}, int OverflowDecimalExponent_ = {}, uint16_t NormalMantissaBits_ = {}, uint16_t DenormalMantissaBits_ = {}, uint16_t ExponentBits_ = {}) noexcept : ZeroBits{ZeroBits_}, InfinityBits{InfinityBits_}, NormalMantissaMask{NormalMantissaMask_}, DenormalMantissaMask{DenormalMantissaMask_}, MinBinaryExponent{MinBinaryExponent_}, MaxBinaryExponent{MaxBinaryExponent_}, ExponentBias{ExponentBias_}, OverflowDecimalExponent{OverflowDecimalExponent_}, NormalMantissaBits{NormalMantissaBits_}, DenormalMantissaBits{DenormalMantissaBits_}, ExponentBits{ExponentBits_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Number/FloatingPointInfo Double
    static ::System::Number_::FloatingPointInfo _get_Double();
    // Set static field: static public readonly System.Number/FloatingPointInfo Double
    static void _set_Double(::System::Number_::FloatingPointInfo value);
    // Get static field: static public readonly System.Number/FloatingPointInfo Single
    static ::System::Number_::FloatingPointInfo _get_Single();
    // Set static field: static public readonly System.Number/FloatingPointInfo Single
    static void _set_Single(::System::Number_::FloatingPointInfo value);
    // Get instance field reference: private readonly System.UInt64 <ZeroBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$ZeroBits$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <InfinityBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$InfinityBits$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <NormalMantissaMask>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$NormalMantissaMask$k__BackingField();
    // Get instance field reference: private readonly System.UInt64 <DenormalMantissaMask>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$DenormalMantissaMask$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <MinBinaryExponent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MinBinaryExponent$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <MaxBinaryExponent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxBinaryExponent$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <ExponentBias>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ExponentBias$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <OverflowDecimalExponent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$OverflowDecimalExponent$k__BackingField();
    // Get instance field reference: private readonly System.UInt16 <NormalMantissaBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint16_t& dyn_$NormalMantissaBits$k__BackingField();
    // Get instance field reference: private readonly System.UInt16 <DenormalMantissaBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint16_t& dyn_$DenormalMantissaBits$k__BackingField();
    // Get instance field reference: private readonly System.UInt16 <ExponentBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint16_t& dyn_$ExponentBits$k__BackingField();
    // public System.UInt64 get_ZeroBits()
    // Offset: 0x575DA50
    uint64_t get_ZeroBits();
    // public System.UInt64 get_InfinityBits()
    // Offset: 0x575DA58
    uint64_t get_InfinityBits();
    // public System.UInt64 get_NormalMantissaMask()
    // Offset: 0x575DA60
    uint64_t get_NormalMantissaMask();
    // public System.UInt64 get_DenormalMantissaMask()
    // Offset: 0x575DA68
    uint64_t get_DenormalMantissaMask();
    // public System.Int32 get_MinBinaryExponent()
    // Offset: 0x575DA70
    int get_MinBinaryExponent();
    // public System.Int32 get_MaxBinaryExponent()
    // Offset: 0x575DA78
    int get_MaxBinaryExponent();
    // public System.Int32 get_ExponentBias()
    // Offset: 0x575DA80
    int get_ExponentBias();
    // public System.Int32 get_OverflowDecimalExponent()
    // Offset: 0x575DA88
    int get_OverflowDecimalExponent();
    // public System.UInt16 get_NormalMantissaBits()
    // Offset: 0x575DA90
    uint16_t get_NormalMantissaBits();
    // public System.UInt16 get_DenormalMantissaBits()
    // Offset: 0x575DA98
    uint16_t get_DenormalMantissaBits();
    // public System.UInt16 get_ExponentBits()
    // Offset: 0x575DAA0
    uint16_t get_ExponentBits();
    // public System.Void .ctor(System.UInt16 denormalMantissaBits, System.UInt16 exponentBits, System.Int32 maxBinaryExponent, System.Int32 exponentBias, System.UInt64 infinityBits)
    // Offset: 0x575DAA8
    FloatingPointInfo(uint16_t denormalMantissaBits, uint16_t exponentBits, int maxBinaryExponent, int exponentBias, uint64_t infinityBits);
    // static private System.Void .cctor()
    // Offset: 0x575DB04
    static void _cctor();
  }; // System.Number/FloatingPointInfo
  #pragma pack(pop)
  static check_size<sizeof(Number_::FloatingPointInfo), 52 + sizeof(uint16_t)> __System_Number__FloatingPointInfoSizeCheck;
  static_assert(sizeof(Number_::FloatingPointInfo) == 0x36);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_ZeroBits
// Il2CppName: get_ZeroBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_ZeroBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_ZeroBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_InfinityBits
// Il2CppName: get_InfinityBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_InfinityBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_InfinityBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_NormalMantissaMask
// Il2CppName: get_NormalMantissaMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_NormalMantissaMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_NormalMantissaMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_DenormalMantissaMask
// Il2CppName: get_DenormalMantissaMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_DenormalMantissaMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_DenormalMantissaMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_MinBinaryExponent
// Il2CppName: get_MinBinaryExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_MinBinaryExponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_MinBinaryExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_MaxBinaryExponent
// Il2CppName: get_MaxBinaryExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_MaxBinaryExponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_MaxBinaryExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_ExponentBias
// Il2CppName: get_ExponentBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_ExponentBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_ExponentBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_OverflowDecimalExponent
// Il2CppName: get_OverflowDecimalExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_OverflowDecimalExponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_OverflowDecimalExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_NormalMantissaBits
// Il2CppName: get_NormalMantissaBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_NormalMantissaBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_NormalMantissaBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_DenormalMantissaBits
// Il2CppName: get_DenormalMantissaBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_DenormalMantissaBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_DenormalMantissaBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::get_ExponentBits
// Il2CppName: get_ExponentBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Number_::FloatingPointInfo::*)()>(&System::Number_::FloatingPointInfo::get_ExponentBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), "get_ExponentBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::FloatingPointInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Number_::FloatingPointInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Number_::FloatingPointInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Number_::FloatingPointInfo), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
