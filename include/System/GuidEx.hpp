// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Span`1<T>
  template<typename T>
  struct Span_1;
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: GuidEx
  struct GuidEx;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::GuidEx, "System", "GuidEx");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.GuidEx
  // [TokenAttribute] Offset: FFFFFFFF
  struct GuidEx/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _a
    // Size: 0x4
    // Offset: 0x0
    int a;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int16 _b
    // Size: 0x2
    // Offset: 0x4
    int16_t b;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _c
    // Size: 0x2
    // Offset: 0x6
    int16_t c;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Byte _d
    // Size: 0x1
    // Offset: 0x8
    uint8_t d;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _e
    // Size: 0x1
    // Offset: 0x9
    uint8_t e;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _f
    // Size: 0x1
    // Offset: 0xA
    uint8_t f;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _g
    // Size: 0x1
    // Offset: 0xB
    uint8_t g;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _h
    // Size: 0x1
    // Offset: 0xC
    uint8_t h;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _i
    // Size: 0x1
    // Offset: 0xD
    uint8_t i;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _j
    // Size: 0x1
    // Offset: 0xE
    uint8_t j;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte _k
    // Size: 0x1
    // Offset: 0xF
    uint8_t k;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: GuidEx
    constexpr GuidEx(int a_ = {}, int16_t b_ = {}, int16_t c_ = {}, uint8_t d_ = {}, uint8_t e_ = {}, uint8_t f_ = {}, uint8_t g_ = {}, uint8_t h_ = {}, uint8_t i_ = {}, uint8_t j_ = {}, uint8_t k_ = {}) noexcept : a{a_}, b{b_}, c{c_}, d{d_}, e{e_}, f{f_}, g{g_}, h{h_}, i{i_}, j{j_}, k{k_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 _a
    [[deprecated("Use field access instead!")]] int& dyn__a();
    // Get instance field reference: private System.Int16 _b
    [[deprecated("Use field access instead!")]] int16_t& dyn__b();
    // Get instance field reference: private System.Int16 _c
    [[deprecated("Use field access instead!")]] int16_t& dyn__c();
    // Get instance field reference: private System.Byte _d
    [[deprecated("Use field access instead!")]] uint8_t& dyn__d();
    // Get instance field reference: private System.Byte _e
    [[deprecated("Use field access instead!")]] uint8_t& dyn__e();
    // Get instance field reference: private System.Byte _f
    [[deprecated("Use field access instead!")]] uint8_t& dyn__f();
    // Get instance field reference: private System.Byte _g
    [[deprecated("Use field access instead!")]] uint8_t& dyn__g();
    // Get instance field reference: private System.Byte _h
    [[deprecated("Use field access instead!")]] uint8_t& dyn__h();
    // Get instance field reference: private System.Byte _i
    [[deprecated("Use field access instead!")]] uint8_t& dyn__i();
    // Get instance field reference: private System.Byte _j
    [[deprecated("Use field access instead!")]] uint8_t& dyn__j();
    // Get instance field reference: private System.Byte _k
    [[deprecated("Use field access instead!")]] uint8_t& dyn__k();
    // static private System.Int32 HexsToChars(System.Char* guidChars, System.Int32 a, System.Int32 b)
    // Offset: 0x574AF38
    static int HexsToChars(::Il2CppChar* guidChars, int a, int b);
    // static private System.Int32 HexsToCharsHexOutput(System.Char* guidChars, System.Int32 a, System.Int32 b)
    // Offset: 0x574AFB4
    static int HexsToCharsHexOutput(::Il2CppChar* guidChars, int a, int b);
    // public System.Boolean TryFormat(System.Span`1<System.Char> destination, out System.Int32 charsWritten, System.ReadOnlySpan`1<System.Char> format)
    // Offset: 0x574B050
    bool TryFormat(::System::Span_1<::Il2CppChar> destination, ByRef<int> charsWritten, ::System::ReadOnlySpan_1<::Il2CppChar> format);
  }; // System.GuidEx
  #pragma pack(pop)
  static check_size<sizeof(GuidEx), 15 + sizeof(uint8_t)> __System_GuidExSizeCheck;
  static_assert(sizeof(GuidEx) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::GuidEx::HexsToChars
// Il2CppName: HexsToChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar*, int, int)>(&System::GuidEx::HexsToChars)> {
  static const MethodInfo* get() {
    static auto* guidChars = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::GuidEx), "HexsToChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guidChars, a, b});
  }
};
// Writing MetadataGetter for method: System::GuidEx::HexsToCharsHexOutput
// Il2CppName: HexsToCharsHexOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar*, int, int)>(&System::GuidEx::HexsToCharsHexOutput)> {
  static const MethodInfo* get() {
    static auto* guidChars = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::GuidEx), "HexsToCharsHexOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guidChars, a, b});
  }
};
// Writing MetadataGetter for method: System::GuidEx::TryFormat
// Il2CppName: TryFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::GuidEx::*)(::System::Span_1<::Il2CppChar>, ByRef<int>, ::System::ReadOnlySpan_1<::Il2CppChar>)>(&System::GuidEx::TryFormat)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Span`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* charsWritten = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* format = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ReadOnlySpan`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::GuidEx), "TryFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, charsWritten, format});
  }
};
