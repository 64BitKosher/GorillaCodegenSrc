// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Decimal::DecCalc, "System", "Decimal/DecCalc");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: System.Decimal/DecCalc
  // [TokenAttribute] Offset: FFFFFFFF
  struct Decimal::DecCalc/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::Decimal::DecCalc::RoundingMode
    struct RoundingMode;
    // Nested type: ::System::Decimal::DecCalc::PowerOvfl
    struct PowerOvfl;
    // Nested type: ::System::Decimal::DecCalc::Buf12
    struct Buf12;
    // Nested type: ::System::Decimal::DecCalc::Buf16
    struct Buf16;
    // Nested type: ::System::Decimal::DecCalc::Buf24
    struct Buf24;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Decimal/DecCalc/PowerOvfl
    // [TokenAttribute] Offset: FFFFFFFF
    struct PowerOvfl/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.UInt32 Hi
      // Size: 0x4
      // Offset: 0x0
      uint Hi;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: Hi and: MidLo
      char __padding0[0x4] = {};
      // public readonly System.UInt64 MidLo
      // Size: 0x8
      // Offset: 0x8
      uint64_t MidLo;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      public:
      // Creating value type constructor for type: PowerOvfl
      constexpr PowerOvfl(uint Hi_ = {}, uint64_t MidLo_ = {}) noexcept : Hi{Hi_}, MidLo{MidLo_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.UInt32 Hi
      [[deprecated("Use field access instead!")]] uint& dyn_Hi();
      // Get instance field reference: public readonly System.UInt64 MidLo
      [[deprecated("Use field access instead!")]] uint64_t& dyn_MidLo();
      // public System.Void .ctor(System.UInt32 hi, System.UInt32 mid, System.UInt32 lo)
      // Offset: 0x46BFE00
      PowerOvfl(uint hi, uint mid, uint lo);
    }; // System.Decimal/DecCalc/PowerOvfl
    #pragma pack(pop)
    static check_size<sizeof(Decimal::DecCalc::PowerOvfl), 8 + sizeof(uint64_t)> __System_Decimal_DecCalc_PowerOvflSizeCheck;
    static_assert(sizeof(Decimal::DecCalc::PowerOvfl) == 0x10);
    public:
    // private System.UInt32 uflags
    // Size: 0x4
    // Offset: 0x0
    uint uflags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 uhi
    // Size: 0x4
    // Offset: 0x4
    uint uhi;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 ulo
    // Size: 0x4
    // Offset: 0x8
    uint ulo;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 umid
    // Size: 0x4
    // Offset: 0xC
    uint umid;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // WARNING Could not write padding for field: umid! Ignoring it instead (and assuming correct layout regardless)...
    // private System.UInt64 ulomidLE
    // Size: 0x8
    // Offset: 0x8
    uint64_t ulomidLE;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: DecCalc
    constexpr DecCalc(uint uflags_ = {}, uint uhi_ = {}, uint ulo_ = {}, uint umid_ = {}, uint64_t ulomidLE_ = {}) noexcept : uflags{uflags_}, uhi{uhi_}, ulo{ulo_}, umid{umid_}, ulomidLE{ulomidLE_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private readonly System.UInt32[] s_powers10
    static ::ArrayW<uint> _get_s_powers10();
    // Set static field: static private readonly System.UInt32[] s_powers10
    static void _set_s_powers10(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt64[] s_ulongPowers10
    static ::ArrayW<uint64_t> _get_s_ulongPowers10();
    // Set static field: static private readonly System.UInt64[] s_ulongPowers10
    static void _set_s_ulongPowers10(::ArrayW<uint64_t> value);
    // Get static field: static private readonly System.Double[] s_doublePowers10
    static ::ArrayW<double> _get_s_doublePowers10();
    // Set static field: static private readonly System.Double[] s_doublePowers10
    static void _set_s_doublePowers10(::ArrayW<double> value);
    // Get static field: static private readonly System.Decimal/DecCalc/PowerOvfl[] PowerOvflValues
    static ::ArrayW<::System::Decimal::DecCalc::PowerOvfl> _get_PowerOvflValues();
    // Set static field: static private readonly System.Decimal/DecCalc/PowerOvfl[] PowerOvflValues
    static void _set_PowerOvflValues(::ArrayW<::System::Decimal::DecCalc::PowerOvfl> value);
    // Get instance field reference: private System.UInt32 uflags
    [[deprecated("Use field access instead!")]] uint& dyn_uflags();
    // Get instance field reference: private System.UInt32 uhi
    [[deprecated("Use field access instead!")]] uint& dyn_uhi();
    // Get instance field reference: private System.UInt32 ulo
    [[deprecated("Use field access instead!")]] uint& dyn_ulo();
    // Get instance field reference: private System.UInt32 umid
    [[deprecated("Use field access instead!")]] uint& dyn_umid();
    // Get instance field reference: private System.UInt64 ulomidLE
    [[deprecated("Use field access instead!")]] uint64_t& dyn_ulomidLE();
    // private System.UInt32 get_High()
    // Offset: 0x46BE2CC
    uint get_High();
    // private System.Void set_High(System.UInt32 value)
    // Offset: 0x46BE2D4
    void set_High(uint value);
    // private System.UInt32 get_Low()
    // Offset: 0x46BE2DC
    uint get_Low();
    // private System.Void set_Low(System.UInt32 value)
    // Offset: 0x46BE2E4
    void set_Low(uint value);
    // private System.UInt32 get_Mid()
    // Offset: 0x46BE2EC
    uint get_Mid();
    // private System.Void set_Mid(System.UInt32 value)
    // Offset: 0x46BE2F4
    void set_Mid(uint value);
    // private System.Boolean get_IsNegative()
    // Offset: 0x46BE2FC
    bool get_IsNegative();
    // private System.UInt64 get_Low64()
    // Offset: 0x46BE308
    uint64_t get_Low64();
    // private System.Void set_Low64(System.UInt64 value)
    // Offset: 0x46BE310
    void set_Low64(uint64_t value);
    // static private System.UInt32 GetExponent(System.Single f)
    // Offset: 0x46BE318
    static uint GetExponent(float f);
    // static private System.UInt32 GetExponent(System.Double d)
    // Offset: 0x46BE324
    static uint GetExponent(double d);
    // static private System.UInt64 UInt32x32To64(System.UInt32 a, System.UInt32 b)
    // Offset: 0x46BE330
    static uint64_t UInt32x32To64(uint a, uint b);
    // static private System.Void UInt64x64To128(System.UInt64 a, System.UInt64 b, ref System.Decimal/DecCalc result)
    // Offset: 0x46BE338
    static void UInt64x64To128(uint64_t a, uint64_t b, ByRef<::System::Decimal::DecCalc> result);
    // static private System.UInt32 Div96By32(ref System.Decimal/DecCalc/Buf12 bufNum, System.UInt32 den)
    // Offset: 0x46BE444
    static uint Div96By32(ByRef<::System::Decimal::DecCalc::Buf12> bufNum, uint den);
    // static private System.Boolean Div96ByConst(ref System.UInt64 high64, ref System.UInt32 low, System.UInt32 pow)
    // Offset: 0x46BE4C0
    static bool Div96ByConst(ByRef<uint64_t> high64, ByRef<uint> low, uint pow);
    // static private System.Void Unscale(ref System.UInt32 low, ref System.UInt64 high64, ref System.Int32 scale)
    // Offset: 0x46BE500
    static void Unscale(ByRef<uint> low, ByRef<uint64_t> high64, ByRef<int> scale);
    // static private System.UInt32 Div96By64(ref System.Decimal/DecCalc/Buf12 bufNum, System.UInt64 den)
    // Offset: 0x46BE774
    static uint Div96By64(ByRef<::System::Decimal::DecCalc::Buf12> bufNum, uint64_t den);
    // static private System.UInt32 Div128By96(ref System.Decimal/DecCalc/Buf16 bufNum, ref System.Decimal/DecCalc/Buf12 bufDen)
    // Offset: 0x46BE868
    static uint Div128By96(ByRef<::System::Decimal::DecCalc::Buf16> bufNum, ByRef<::System::Decimal::DecCalc::Buf12> bufDen);
    // static private System.UInt32 IncreaseScale(ref System.Decimal/DecCalc/Buf12 bufNum, System.UInt32 power)
    // Offset: 0x46BE99C
    static uint IncreaseScale(ByRef<::System::Decimal::DecCalc::Buf12> bufNum, uint power);
    // static private System.Void IncreaseScale64(ref System.Decimal/DecCalc/Buf12 bufNum, System.UInt32 power)
    // Offset: 0x46BEA24
    static void IncreaseScale64(ByRef<::System::Decimal::DecCalc::Buf12> bufNum, uint power);
    // static private System.Int32 ScaleResult(System.Decimal/DecCalc/Buf24* bufRes, System.UInt32 hiRes, System.Int32 scale)
    // Offset: 0x46BEAA0
    static int ScaleResult(::System::Decimal::DecCalc::Buf24* bufRes, uint hiRes, int scale);
    // static private System.UInt32 DivByConst(System.UInt32* result, System.UInt32 hiRes, out System.UInt32 quotient, out System.UInt32 remainder, System.UInt32 power)
    // Offset: 0x46BF624
    static uint DivByConst(uint* result, uint hiRes, ByRef<uint> quotient, ByRef<uint> remainder, uint power);
    // static private System.Int32 LeadingZeroCount(System.UInt32 value)
    // Offset: 0x46BF678
    static int LeadingZeroCount(uint value);
    // static private System.Int32 OverflowUnscale(ref System.Decimal/DecCalc/Buf12 bufQuo, System.Int32 scale, System.Boolean sticky)
    // Offset: 0x46BF6DC
    static int OverflowUnscale(ByRef<::System::Decimal::DecCalc::Buf12> bufQuo, int scale, bool sticky);
    // static private System.Int32 SearchScale(ref System.Decimal/DecCalc/Buf12 bufQuo, System.Int32 scale)
    // Offset: 0x46BF834
    static int SearchScale(ByRef<::System::Decimal::DecCalc::Buf12> bufQuo, int scale);
    // static private System.Boolean Add32To96(ref System.Decimal/DecCalc/Buf12 bufNum, System.UInt32 value)
    // Offset: 0x46BF804
    static bool Add32To96(ByRef<::System::Decimal::DecCalc::Buf12> bufNum, uint value);
    // static System.Void DecAddSub(ref System.Decimal/DecCalc d1, ref System.Decimal/DecCalc d2, System.Boolean sign)
    // Offset: 0x46B9E10
    static void DecAddSub(ByRef<::System::Decimal::DecCalc> d1, ByRef<::System::Decimal::DecCalc> d2, bool sign);
    // static System.Int32 VarDecCmp(in System.Decimal d1, in System.Decimal d2)
    // Offset: 0x46BA4B4
    static int VarDecCmp(ByRef<::System::Decimal> d1, ByRef<::System::Decimal> d2);
    // static private System.Int32 VarDecCmpSub(in System.Decimal d1, in System.Decimal d2)
    // Offset: 0x46BFA3C
    static int VarDecCmpSub(ByRef<::System::Decimal> d1, ByRef<::System::Decimal> d2);
    // static System.Void VarDecMul(ref System.Decimal/DecCalc d1, ref System.Decimal/DecCalc d2)
    // Offset: 0x46BBA18
    static void VarDecMul(ByRef<::System::Decimal::DecCalc> d1, ByRef<::System::Decimal::DecCalc> d2);
    // static System.Void VarDecFromR4(System.Single input, out System.Decimal/DecCalc result)
    // Offset: 0x46B91FC
    static void VarDecFromR4(float input, ByRef<::System::Decimal::DecCalc> result);
    // static System.Void VarDecFromR8(System.Double input, out System.Decimal/DecCalc result)
    // Offset: 0x46B9688
    static void VarDecFromR8(double input, ByRef<::System::Decimal::DecCalc> result);
    // static System.Single VarR4FromDec(in System.Decimal value)
    // Offset: 0x46BD08C
    static float VarR4FromDec(ByRef<::System::Decimal> value);
    // static System.Double VarR8FromDec(in System.Decimal value)
    // Offset: 0x46BCB14
    static double VarR8FromDec(ByRef<::System::Decimal> value);
    // static System.Int32 GetHashCode(in System.Decimal d)
    // Offset: 0x46BB15C
    static int GetHashCode(ByRef<::System::Decimal> d);
    // static System.Void VarDecDiv(ref System.Decimal/DecCalc d1, ref System.Decimal/DecCalc d2)
    // Offset: 0x46BA7DC
    static void VarDecDiv(ByRef<::System::Decimal::DecCalc> d1, ByRef<::System::Decimal::DecCalc> d2);
    // static System.Void InternalRound(ref System.Decimal/DecCalc d, System.UInt32 scale, System.Decimal/DecCalc/RoundingMode mode)
    // Offset: 0x46BC0EC
    static void InternalRound(ByRef<::System::Decimal::DecCalc> d, uint scale, ::System::Decimal::DecCalc::RoundingMode mode);
    // static System.UInt32 DecDivMod1E9(ref System.Decimal/DecCalc value)
    // Offset: 0x46B90B4
    static uint DecDivMod1E9(ByRef<::System::Decimal::DecCalc> value);
    // static private System.Void .cctor()
    // Offset: 0x46BFBC0
    static void _cctor();
  }; // System.Decimal/DecCalc
  #pragma pack(pop)
  static check_size<sizeof(Decimal::DecCalc), 8 + sizeof(uint64_t)> __System_Decimal_DecCalcSizeCheck;
  static_assert(sizeof(Decimal::DecCalc) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Decimal::DecCalc::PowerOvfl, "System", "Decimal/DecCalc/PowerOvfl");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Decimal::DecCalc::get_High
// Il2CppName: get_High
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Decimal::DecCalc::*)()>(&System::Decimal::DecCalc::get_High)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "get_High", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::set_High
// Il2CppName: set_High
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::DecCalc::*)(uint)>(&System::Decimal::DecCalc::set_High)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "set_High", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::get_Low
// Il2CppName: get_Low
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Decimal::DecCalc::*)()>(&System::Decimal::DecCalc::get_Low)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "get_Low", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::set_Low
// Il2CppName: set_Low
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::DecCalc::*)(uint)>(&System::Decimal::DecCalc::set_Low)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "set_Low", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::get_Mid
// Il2CppName: get_Mid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Decimal::DecCalc::*)()>(&System::Decimal::DecCalc::get_Mid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "get_Mid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::set_Mid
// Il2CppName: set_Mid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::DecCalc::*)(uint)>(&System::Decimal::DecCalc::set_Mid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "set_Mid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::get_IsNegative
// Il2CppName: get_IsNegative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Decimal::DecCalc::*)()>(&System::Decimal::DecCalc::get_IsNegative)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "get_IsNegative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::get_Low64
// Il2CppName: get_Low64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Decimal::DecCalc::*)()>(&System::Decimal::DecCalc::get_Low64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "get_Low64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::set_Low64
// Il2CppName: set_Low64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::DecCalc::*)(uint64_t)>(&System::Decimal::DecCalc::set_Low64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "set_Low64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::GetExponent
// Il2CppName: GetExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(float)>(&System::Decimal::DecCalc::GetExponent)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "GetExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::GetExponent
// Il2CppName: GetExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(double)>(&System::Decimal::DecCalc::GetExponent)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "GetExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::UInt32x32To64
// Il2CppName: UInt32x32To64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint, uint)>(&System::Decimal::DecCalc::UInt32x32To64)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "UInt32x32To64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::UInt64x64To128
// Il2CppName: UInt64x64To128
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, uint64_t, ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::UInt64x64To128)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "UInt64x64To128", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, result});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Div96By32
// Il2CppName: Div96By32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal::DecCalc::Buf12>, uint)>(&System::Decimal::DecCalc::Div96By32)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* den = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Div96By32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, den});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Div96ByConst
// Il2CppName: Div96ByConst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<uint64_t>, ByRef<uint>, uint)>(&System::Decimal::DecCalc::Div96ByConst)> {
  static const MethodInfo* get() {
    static auto* high64 = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pow = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Div96ByConst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{high64, low, pow});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Unscale
// Il2CppName: Unscale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint>, ByRef<uint64_t>, ByRef<int>)>(&System::Decimal::DecCalc::Unscale)> {
  static const MethodInfo* get() {
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* high64 = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Unscale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{low, high64, scale});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Div96By64
// Il2CppName: Div96By64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal::DecCalc::Buf12>, uint64_t)>(&System::Decimal::DecCalc::Div96By64)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* den = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Div96By64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, den});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Div128By96
// Il2CppName: Div128By96
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal::DecCalc::Buf16>, ByRef<::System::Decimal::DecCalc::Buf12>)>(&System::Decimal::DecCalc::Div128By96)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf16")->this_arg;
    static auto* bufDen = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Div128By96", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, bufDen});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::IncreaseScale
// Il2CppName: IncreaseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal::DecCalc::Buf12>, uint)>(&System::Decimal::DecCalc::IncreaseScale)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "IncreaseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, power});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::IncreaseScale64
// Il2CppName: IncreaseScale64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal::DecCalc::Buf12>, uint)>(&System::Decimal::DecCalc::IncreaseScale64)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "IncreaseScale64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, power});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::ScaleResult
// Il2CppName: ScaleResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Decimal::DecCalc::Buf24*, uint, int)>(&System::Decimal::DecCalc::ScaleResult)> {
  static const MethodInfo* get() {
    static auto* bufRes = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf24"))->byval_arg;
    static auto* hiRes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "ScaleResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufRes, hiRes, scale});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::DivByConst
// Il2CppName: DivByConst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint*, uint, ByRef<uint>, ByRef<uint>, uint)>(&System::Decimal::DecCalc::DivByConst)> {
  static const MethodInfo* get() {
    static auto* result = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* hiRes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* quotient = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* remainder = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "DivByConst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, hiRes, quotient, remainder, power});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::LeadingZeroCount
// Il2CppName: LeadingZeroCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Decimal::DecCalc::LeadingZeroCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "LeadingZeroCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::OverflowUnscale
// Il2CppName: OverflowUnscale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal::DecCalc::Buf12>, int, bool)>(&System::Decimal::DecCalc::OverflowUnscale)> {
  static const MethodInfo* get() {
    static auto* bufQuo = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sticky = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "OverflowUnscale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufQuo, scale, sticky});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::SearchScale
// Il2CppName: SearchScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal::DecCalc::Buf12>, int)>(&System::Decimal::DecCalc::SearchScale)> {
  static const MethodInfo* get() {
    static auto* bufQuo = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "SearchScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufQuo, scale});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::Add32To96
// Il2CppName: Add32To96
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Decimal::DecCalc::Buf12>, uint)>(&System::Decimal::DecCalc::Add32To96)> {
  static const MethodInfo* get() {
    static auto* bufNum = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/Buf12")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "Add32To96", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufNum, value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::DecAddSub
// Il2CppName: DecAddSub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal::DecCalc>, ByRef<::System::Decimal::DecCalc>, bool)>(&System::Decimal::DecCalc::DecAddSub)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    static auto* sign = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "DecAddSub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2, sign});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecCmp
// Il2CppName: VarDecCmp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Decimal::DecCalc::VarDecCmp)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecCmp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecCmpSub
// Il2CppName: VarDecCmpSub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Decimal::DecCalc::VarDecCmpSub)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecCmpSub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecMul
// Il2CppName: VarDecMul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal::DecCalc>, ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::VarDecMul)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecMul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecFromR4
// Il2CppName: VarDecFromR4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::VarDecFromR4)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecFromR4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, result});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecFromR8
// Il2CppName: VarDecFromR8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(double, ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::VarDecFromR8)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecFromR8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, result});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarR4FromDec
// Il2CppName: VarR4FromDec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::System::Decimal>)>(&System::Decimal::DecCalc::VarR4FromDec)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarR4FromDec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarR8FromDec
// Il2CppName: VarR8FromDec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(ByRef<::System::Decimal>)>(&System::Decimal::DecCalc::VarR8FromDec)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarR8FromDec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal>)>(&System::Decimal::DecCalc::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::VarDecDiv
// Il2CppName: VarDecDiv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal::DecCalc>, ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::VarDecDiv)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "VarDecDiv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::InternalRound
// Il2CppName: InternalRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal::DecCalc>, uint, ::System::Decimal::DecCalc::RoundingMode)>(&System::Decimal::DecCalc::InternalRound)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc/RoundingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "InternalRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, scale, mode});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::DecDivMod1E9
// Il2CppName: DecDivMod1E9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::Decimal::DecCalc>)>(&System::Decimal::DecCalc::DecDivMod1E9)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal/DecCalc")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), "DecDivMod1E9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::DecCalc::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Decimal::DecCalc::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal::DecCalc), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
