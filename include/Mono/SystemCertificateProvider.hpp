// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.ISystemCertificateProvider
#include "Mono/ISystemCertificateProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: X509PalImpl
  class X509PalImpl;
  // Forward declaring type: CertificateImportFlags
  struct CertificateImportFlags;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateImpl
  class X509CertificateImpl;
  // Forward declaring type: X509KeyStorageFlags
  struct X509KeyStorageFlags;
  // Forward declaring type: X509Certificate2Impl
  class X509Certificate2Impl;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafePasswordHandle
  class SafePasswordHandle;
}
// Completed forward declares
// Type namespace: Mono
namespace Mono {
  // Forward declaring type: SystemCertificateProvider
  class SystemCertificateProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::SystemCertificateProvider);
DEFINE_IL2CPP_ARG_TYPE(::Mono::SystemCertificateProvider*, "Mono", "SystemCertificateProvider");
// Type namespace: Mono
namespace Mono {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.SystemCertificateProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class SystemCertificateProvider : public ::Il2CppObject/*, public ::Mono::ISystemCertificateProvider*/ {
    public:
    // Creating interface conversion operator: operator ::Mono::ISystemCertificateProvider
    operator ::Mono::ISystemCertificateProvider() noexcept {
      return *reinterpret_cast<::Mono::ISystemCertificateProvider*>(this);
    }
    // Get static field: static private System.Int32 initialized
    static int _get_initialized();
    // Set static field: static private System.Int32 initialized
    static void _set_initialized(int value);
    // Get static field: static private Mono.X509PalImpl x509pal
    static ::Mono::X509PalImpl* _get_x509pal();
    // Set static field: static private Mono.X509PalImpl x509pal
    static void _set_x509pal(::Mono::X509PalImpl* value);
    // Get static field: static private System.Object syncRoot
    static ::Il2CppObject* _get_syncRoot();
    // Set static field: static private System.Object syncRoot
    static void _set_syncRoot(::Il2CppObject* value);
    // static private Mono.X509PalImpl GetX509Pal()
    // Offset: 0x4BEF8C8
    static ::Mono::X509PalImpl* GetX509Pal();
    // static private System.Void EnsureInitialized()
    // Offset: 0x4BEF970
    static void EnsureInitialized();
    // public Mono.X509PalImpl get_X509Pal()
    // Offset: 0x4BEFAC0
    ::Mono::X509PalImpl* get_X509Pal();
    // public System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Byte[] data, Mono.CertificateImportFlags importFlags)
    // Offset: 0x4BEFB1C
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Import(::ArrayW<uint8_t> data, ::Mono::CertificateImportFlags importFlags);
    // private System.Security.Cryptography.X509Certificates.X509CertificateImpl Mono.ISystemCertificateProvider.Import(System.Byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags)
    // Offset: 0x4BEFD7C
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Mono_ISystemCertificateProvider_Import(::ArrayW<uint8_t> data, ::Microsoft::Win32::SafeHandles::SafePasswordHandle* password, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags, ::Mono::CertificateImportFlags importFlags);
    // public System.Security.Cryptography.X509Certificates.X509Certificate2Impl Import(System.Byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags)
    // Offset: 0x4BEFD80
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Impl* Import(::ArrayW<uint8_t> data, ::Microsoft::Win32::SafeHandles::SafePasswordHandle* password, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags, ::Mono::CertificateImportFlags importFlags);
    // private System.Security.Cryptography.X509Certificates.X509CertificateImpl Mono.ISystemCertificateProvider.Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags)
    // Offset: 0x4BEFE84
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Mono_ISystemCertificateProvider_Import(::System::Security::Cryptography::X509Certificates::X509Certificate* cert, ::Mono::CertificateImportFlags importFlags);
    // public System.Security.Cryptography.X509Certificates.X509Certificate2Impl Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags)
    // Offset: 0x4BEFE88
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Impl* Import(::System::Security::Cryptography::X509Certificates::X509Certificate* cert, ::Mono::CertificateImportFlags importFlags);
    // public System.Void .ctor()
    // Offset: 0x4BEFF9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SystemCertificateProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::SystemCertificateProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SystemCertificateProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4BEFFA4
    static void _cctor();
  }; // Mono.SystemCertificateProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::GetX509Pal
// Il2CppName: GetX509Pal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::X509PalImpl* (*)()>(&Mono::SystemCertificateProvider::GetX509Pal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "GetX509Pal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::EnsureInitialized
// Il2CppName: EnsureInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::SystemCertificateProvider::EnsureInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "EnsureInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::get_X509Pal
// Il2CppName: get_X509Pal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::X509PalImpl* (Mono::SystemCertificateProvider::*)()>(&Mono::SystemCertificateProvider::get_X509Pal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "get_X509Pal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::SystemCertificateProvider::*)(::ArrayW<uint8_t>, ::Mono::CertificateImportFlags)>(&Mono::SystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::Mono_ISystemCertificateProvider_Import
// Il2CppName: Mono.ISystemCertificateProvider.Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::SystemCertificateProvider::*)(::ArrayW<uint8_t>, ::Microsoft::Win32::SafeHandles::SafePasswordHandle*, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags, ::Mono::CertificateImportFlags)>(&Mono::SystemCertificateProvider::Mono_ISystemCertificateProvider_Import)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafePasswordHandle")->byval_arg;
    static auto* keyStorageFlags = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509KeyStorageFlags")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "Mono.ISystemCertificateProvider.Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, password, keyStorageFlags, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2Impl* (Mono::SystemCertificateProvider::*)(::ArrayW<uint8_t>, ::Microsoft::Win32::SafeHandles::SafePasswordHandle*, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags, ::Mono::CertificateImportFlags)>(&Mono::SystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafePasswordHandle")->byval_arg;
    static auto* keyStorageFlags = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509KeyStorageFlags")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, password, keyStorageFlags, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::Mono_ISystemCertificateProvider_Import
// Il2CppName: Mono.ISystemCertificateProvider.Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::SystemCertificateProvider::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::Mono::CertificateImportFlags)>(&Mono::SystemCertificateProvider::Mono_ISystemCertificateProvider_Import)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "Mono.ISystemCertificateProvider.Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2Impl* (Mono::SystemCertificateProvider::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::Mono::CertificateImportFlags)>(&Mono::SystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::SystemCertificateProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::SystemCertificateProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemCertificateProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
