// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateImpl
  class X509CertificateImpl;
  // Forward declaring type: X509KeyStorageFlags
  struct X509KeyStorageFlags;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: CertificateImportFlags
  struct CertificateImportFlags;
}
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafePasswordHandle
  class SafePasswordHandle;
}
// Completed forward declares
// Type namespace: Mono
namespace Mono {
  // Forward declaring type: ISystemCertificateProvider
  class ISystemCertificateProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::ISystemCertificateProvider);
DEFINE_IL2CPP_ARG_TYPE(::Mono::ISystemCertificateProvider*, "Mono", "ISystemCertificateProvider");
// Type namespace: Mono
namespace Mono {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Mono.ISystemCertificateProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class ISystemCertificateProvider {
    public:
    // public System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Byte[] data, Mono.CertificateImportFlags importFlags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Import(::ArrayW<uint8_t> data, ::Mono::CertificateImportFlags importFlags);
    // public System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Import(::ArrayW<uint8_t> data, ::Microsoft::Win32::SafeHandles::SafePasswordHandle* password, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags keyStorageFlags, ::Mono::CertificateImportFlags importFlags);
    // public System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Import(::System::Security::Cryptography::X509Certificates::X509Certificate* cert, ::Mono::CertificateImportFlags importFlags);
  }; // Mono.ISystemCertificateProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::ISystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::ISystemCertificateProvider::*)(::ArrayW<uint8_t>, ::Mono::CertificateImportFlags)>(&Mono::ISystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::ISystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::ISystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::ISystemCertificateProvider::*)(::ArrayW<uint8_t>, ::Microsoft::Win32::SafeHandles::SafePasswordHandle*, ::System::Security::Cryptography::X509Certificates::X509KeyStorageFlags, ::Mono::CertificateImportFlags)>(&Mono::ISystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafePasswordHandle")->byval_arg;
    static auto* keyStorageFlags = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509KeyStorageFlags")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::ISystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, password, keyStorageFlags, importFlags});
  }
};
// Writing MetadataGetter for method: Mono::ISystemCertificateProvider::Import
// Il2CppName: Import
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateImpl* (Mono::ISystemCertificateProvider::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*, ::Mono::CertificateImportFlags)>(&Mono::ISystemCertificateProvider::Import)> {
  static const MethodInfo* get() {
    static auto* cert = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* importFlags = &::il2cpp_utils::GetClassFromName("Mono", "CertificateImportFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::ISystemCertificateProvider*), "Import", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cert, importFlags});
  }
};
