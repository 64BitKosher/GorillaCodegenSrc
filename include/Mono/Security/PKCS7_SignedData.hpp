// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.PKCS7
#include "Mono/Security/PKCS7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::PKCS7::SignedData);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::PKCS7::SignedData*, "Mono.Security", "PKCS7/SignedData");
// Type namespace: Mono.Security
namespace Mono::Security {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.PKCS7/SignedData
  // [TokenAttribute] Offset: FFFFFFFF
  class PKCS7::SignedData : public ::Il2CppObject {
    public:
    public:
    // private System.Byte version
    // Size: 0x1
    // Offset: 0x10
    uint8_t version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: version and: hashAlgorithm
    char __padding0[0x7] = {};
    // private System.String hashAlgorithm
    // Size: 0x8
    // Offset: 0x18
    ::StringW hashAlgorithm;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Mono.Security.PKCS7/ContentInfo contentInfo
    // Size: 0x8
    // Offset: 0x20
    ::Mono::Security::PKCS7::ContentInfo* contentInfo;
    // Field size check
    static_assert(sizeof(::Mono::Security::PKCS7::ContentInfo*) == 0x8);
    // private Mono.Security.X509.X509CertificateCollection certs
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::X509::X509CertificateCollection* certs;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private System.Collections.ArrayList crls
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* crls;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private Mono.Security.PKCS7/SignerInfo signerInfo
    // Size: 0x8
    // Offset: 0x38
    ::Mono::Security::PKCS7::SignerInfo* signerInfo;
    // Field size check
    static_assert(sizeof(::Mono::Security::PKCS7::SignerInfo*) == 0x8);
    // private System.Boolean mda
    // Size: 0x1
    // Offset: 0x40
    bool mda;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Byte version
    [[deprecated("Use field access instead!")]] uint8_t& dyn_version();
    // Get instance field reference: private System.String hashAlgorithm
    [[deprecated("Use field access instead!")]] ::StringW& dyn_hashAlgorithm();
    // Get instance field reference: private Mono.Security.PKCS7/ContentInfo contentInfo
    [[deprecated("Use field access instead!")]] ::Mono::Security::PKCS7::ContentInfo*& dyn_contentInfo();
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection certs
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_certs();
    // Get instance field reference: private System.Collections.ArrayList crls
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_crls();
    // Get instance field reference: private Mono.Security.PKCS7/SignerInfo signerInfo
    [[deprecated("Use field access instead!")]] ::Mono::Security::PKCS7::SignerInfo*& dyn_signerInfo();
    // Get instance field reference: private System.Boolean mda
    [[deprecated("Use field access instead!")]] bool& dyn_mda();
    // public System.Void .ctor(Mono.Security.ASN1 asn1)
    // Offset: 0x446DB40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PKCS7::SignedData* New_ctor(::Mono::Security::ASN1* asn1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::PKCS7::SignedData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PKCS7::SignedData*, creationType>(asn1)));
    }
    // public Mono.Security.X509.X509CertificateCollection get_Certificates()
    // Offset: 0x446E810
    ::Mono::Security::X509::X509CertificateCollection* get_Certificates();
    // public Mono.Security.PKCS7/ContentInfo get_ContentInfo()
    // Offset: 0x446E818
    ::Mono::Security::PKCS7::ContentInfo* get_ContentInfo();
    // public System.Void set_HashName(System.String value)
    // Offset: 0x446E7D4
    void set_HashName(::StringW value);
    // public Mono.Security.PKCS7/SignerInfo get_SignerInfo()
    // Offset: 0x446E820
    ::Mono::Security::PKCS7::SignerInfo* get_SignerInfo();
    // System.String OidToName(System.String oid)
    // Offset: 0x446E620
    ::StringW OidToName(::StringW oid);
  }; // Mono.Security.PKCS7/SignedData
  #pragma pack(pop)
  static check_size<sizeof(PKCS7::SignedData), 64 + sizeof(bool)> __Mono_Security_PKCS7_SignedDataSizeCheck;
  static_assert(sizeof(PKCS7::SignedData) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::get_Certificates
// Il2CppName: get_Certificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection* (Mono::Security::PKCS7::SignedData::*)()>(&Mono::Security::PKCS7::SignedData::get_Certificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::PKCS7::SignedData*), "get_Certificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::get_ContentInfo
// Il2CppName: get_ContentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::PKCS7::ContentInfo* (Mono::Security::PKCS7::SignedData::*)()>(&Mono::Security::PKCS7::SignedData::get_ContentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::PKCS7::SignedData*), "get_ContentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::set_HashName
// Il2CppName: set_HashName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::PKCS7::SignedData::*)(::StringW)>(&Mono::Security::PKCS7::SignedData::set_HashName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::PKCS7::SignedData*), "set_HashName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::get_SignerInfo
// Il2CppName: get_SignerInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::PKCS7::SignerInfo* (Mono::Security::PKCS7::SignedData::*)()>(&Mono::Security::PKCS7::SignedData::get_SignerInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::PKCS7::SignedData*), "get_SignerInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::PKCS7::SignedData::OidToName
// Il2CppName: OidToName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::PKCS7::SignedData::*)(::StringW)>(&Mono::Security::PKCS7::SignedData::OidToName)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::PKCS7::SignedData*), "OidToName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid});
  }
};
