// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.Authenticode.AuthenticodeBase
#include "Mono/Security/Authenticode/AuthenticodeBase.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Mono.Security.PKCS7
#include "Mono/Security/PKCS7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Authenticode
namespace Mono::Security::Authenticode {
  // Forward declaring type: AuthenticodeDeformatter
  class AuthenticodeDeformatter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Authenticode::AuthenticodeDeformatter);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Authenticode::AuthenticodeDeformatter*, "Mono.Security.Authenticode", "AuthenticodeDeformatter");
// Type namespace: Mono.Security.Authenticode
namespace Mono::Security::Authenticode {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Authenticode.AuthenticodeDeformatter
  // [TokenAttribute] Offset: FFFFFFFF
  class AuthenticodeDeformatter : public ::Mono::Security::Authenticode::AuthenticodeBase {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    public:
    // private System.String filename
    // Size: 0x8
    // Offset: 0x40
    ::StringW filename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte[] rawdata
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> rawdata;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] hash
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> hash;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.X509.X509CertificateCollection coll
    // Size: 0x8
    // Offset: 0x58
    ::Mono::Security::X509::X509CertificateCollection* coll;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509CertificateCollection*) == 0x8);
    // private Mono.Security.ASN1 signedHash
    // Size: 0x8
    // Offset: 0x60
    ::Mono::Security::ASN1* signedHash;
    // Field size check
    static_assert(sizeof(::Mono::Security::ASN1*) == 0x8);
    // private System.DateTime timestamp
    // Size: 0x8
    // Offset: 0x68
    ::System::DateTime timestamp;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private Mono.Security.X509.X509Certificate signingCertificate
    // Size: 0x8
    // Offset: 0x70
    ::Mono::Security::X509::X509Certificate* signingCertificate;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509Certificate*) == 0x8);
    // private System.Int32 reason
    // Size: 0x4
    // Offset: 0x78
    int reason;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean trustedRoot
    // Size: 0x1
    // Offset: 0x7C
    bool trustedRoot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean trustedTimestampRoot
    // Size: 0x1
    // Offset: 0x7D
    bool trustedTimestampRoot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trustedTimestampRoot and: entry
    char __padding9[0x2] = {};
    // private System.Byte[] entry
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<uint8_t> entry;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.X509.X509Chain signerChain
    // Size: 0x8
    // Offset: 0x88
    ::Mono::Security::X509::X509Chain* signerChain;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509Chain*) == 0x8);
    // private Mono.Security.X509.X509Chain timestampChain
    // Size: 0x8
    // Offset: 0x90
    ::Mono::Security::X509::X509Chain* timestampChain;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509Chain*) == 0x8);
    public:
    // Get instance field reference: private System.String filename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_filename();
    // Get instance field reference: private System.Byte[] rawdata
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_rawdata();
    // Get instance field reference: private System.Byte[] hash
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_hash();
    // Get instance field reference: private Mono.Security.X509.X509CertificateCollection coll
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509CertificateCollection*& dyn_coll();
    // Get instance field reference: private Mono.Security.ASN1 signedHash
    [[deprecated("Use field access instead!")]] ::Mono::Security::ASN1*& dyn_signedHash();
    // Get instance field reference: private System.DateTime timestamp
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_timestamp();
    // Get instance field reference: private Mono.Security.X509.X509Certificate signingCertificate
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509Certificate*& dyn_signingCertificate();
    // Get instance field reference: private System.Int32 reason
    [[deprecated("Use field access instead!")]] int& dyn_reason();
    // Get instance field reference: private System.Boolean trustedRoot
    [[deprecated("Use field access instead!")]] bool& dyn_trustedRoot();
    // Get instance field reference: private System.Boolean trustedTimestampRoot
    [[deprecated("Use field access instead!")]] bool& dyn_trustedTimestampRoot();
    // Get instance field reference: private System.Byte[] entry
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_entry();
    // Get instance field reference: private Mono.Security.X509.X509Chain signerChain
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509Chain*& dyn_signerChain();
    // Get instance field reference: private Mono.Security.X509.X509Chain timestampChain
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509Chain*& dyn_timestampChain();
    // public System.Void .ctor(System.Byte[] rawData)
    // Offset: 0x4498744
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthenticodeDeformatter* New_ctor(::ArrayW<uint8_t> rawData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Authenticode::AuthenticodeDeformatter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthenticodeDeformatter*, creationType>(rawData)));
    }
    // public System.Void set_RawData(System.Byte[] value)
    // Offset: 0x449876C
    void set_RawData(::ArrayW<uint8_t> value);
    // public Mono.Security.X509.X509Certificate get_SigningCertificate()
    // Offset: 0x4498C3C
    ::Mono::Security::X509::X509Certificate* get_SigningCertificate();
    // private System.Boolean CheckSignature()
    // Offset: 0x449893C
    bool CheckSignature();
    // private System.Boolean CompareIssuerSerial(System.String issuer, System.Byte[] serial, Mono.Security.X509.X509Certificate x509)
    // Offset: 0x449969C
    bool CompareIssuerSerial(::StringW issuer, ::ArrayW<uint8_t> serial, ::Mono::Security::X509::X509Certificate* x509);
    // private System.Boolean VerifySignature(Mono.Security.PKCS7/SignedData sd, System.Byte[] calculatedMessageDigest, System.Security.Cryptography.HashAlgorithm ha)
    // Offset: 0x4498C44
    bool VerifySignature(::Mono::Security::PKCS7::SignedData* sd, ::ArrayW<uint8_t> calculatedMessageDigest, ::System::Security::Cryptography::HashAlgorithm* ha);
    // private System.Boolean VerifyCounterSignature(Mono.Security.PKCS7/SignerInfo cs, System.Byte[] signature)
    // Offset: 0x4499798
    bool VerifyCounterSignature(::Mono::Security::PKCS7::SignerInfo* cs, ::ArrayW<uint8_t> signature);
    // private System.Void Reset()
    // Offset: 0x4498848
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x44986AC
    // Implemented from: Mono.Security.Authenticode.AuthenticodeBase
    // Base method: System.Void AuthenticodeBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthenticodeDeformatter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Authenticode::AuthenticodeDeformatter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthenticodeDeformatter*, creationType>()));
    }
  }; // Mono.Security.Authenticode.AuthenticodeDeformatter
  #pragma pack(pop)
  static check_size<sizeof(AuthenticodeDeformatter), 144 + sizeof(::Mono::Security::X509::X509Chain*)> __Mono_Security_Authenticode_AuthenticodeDeformatterSizeCheck;
  static_assert(sizeof(AuthenticodeDeformatter) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::set_RawData
// Il2CppName: set_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeDeformatter::*)(::ArrayW<uint8_t>)>(&Mono::Security::Authenticode::AuthenticodeDeformatter::set_RawData)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "set_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::get_SigningCertificate
// Il2CppName: get_SigningCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::Authenticode::AuthenticodeDeformatter::*)()>(&Mono::Security::Authenticode::AuthenticodeDeformatter::get_SigningCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "get_SigningCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::CheckSignature
// Il2CppName: CheckSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Authenticode::AuthenticodeDeformatter::*)()>(&Mono::Security::Authenticode::AuthenticodeDeformatter::CheckSignature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "CheckSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::CompareIssuerSerial
// Il2CppName: CompareIssuerSerial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Authenticode::AuthenticodeDeformatter::*)(::StringW, ::ArrayW<uint8_t>, ::Mono::Security::X509::X509Certificate*)>(&Mono::Security::Authenticode::AuthenticodeDeformatter::CompareIssuerSerial)> {
  static const MethodInfo* get() {
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serial = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* x509 = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "CompareIssuerSerial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuer, serial, x509});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Authenticode::AuthenticodeDeformatter::*)(::Mono::Security::PKCS7::SignedData*, ::ArrayW<uint8_t>, ::System::Security::Cryptography::HashAlgorithm*)>(&Mono::Security::Authenticode::AuthenticodeDeformatter::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* sd = &::il2cpp_utils::GetClassFromName("Mono.Security", "PKCS7/SignedData")->byval_arg;
    static auto* calculatedMessageDigest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ha = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sd, calculatedMessageDigest, ha});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::VerifyCounterSignature
// Il2CppName: VerifyCounterSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::Authenticode::AuthenticodeDeformatter::*)(::Mono::Security::PKCS7::SignerInfo*, ::ArrayW<uint8_t>)>(&Mono::Security::Authenticode::AuthenticodeDeformatter::VerifyCounterSignature)> {
  static const MethodInfo* get() {
    static auto* cs = &::il2cpp_utils::GetClassFromName("Mono.Security", "PKCS7/SignerInfo")->byval_arg;
    static auto* signature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "VerifyCounterSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cs, signature});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeDeformatter::*)()>(&Mono::Security::Authenticode::AuthenticodeDeformatter::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeDeformatter*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeDeformatter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
