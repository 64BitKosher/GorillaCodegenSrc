// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Authenticode
namespace Mono::Security::Authenticode {
  // Forward declaring type: AuthenticodeBase
  class AuthenticodeBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::Authenticode::AuthenticodeBase);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::Authenticode::AuthenticodeBase*, "Mono.Security.Authenticode", "AuthenticodeBase");
// Type namespace: Mono.Security.Authenticode
namespace Mono::Security::Authenticode {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Authenticode.AuthenticodeBase
  // [TokenAttribute] Offset: FFFFFFFF
  class AuthenticodeBase : public ::Il2CppObject {
    public:
    public:
    // private System.Byte[] fileblock
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> fileblock;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.IO.Stream fs
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* fs;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Int32 blockNo
    // Size: 0x4
    // Offset: 0x20
    int blockNo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 blockLength
    // Size: 0x4
    // Offset: 0x24
    int blockLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 peOffset
    // Size: 0x4
    // Offset: 0x28
    int peOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 dirSecurityOffset
    // Size: 0x4
    // Offset: 0x2C
    int dirSecurityOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 dirSecuritySize
    // Size: 0x4
    // Offset: 0x30
    int dirSecuritySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 coffSymbolTableOffset
    // Size: 0x4
    // Offset: 0x34
    int coffSymbolTableOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean pe64
    // Size: 0x1
    // Offset: 0x38
    bool pe64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Byte[] fileblock
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_fileblock();
    // Get instance field reference: private System.IO.Stream fs
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_fs();
    // Get instance field reference: private System.Int32 blockNo
    [[deprecated("Use field access instead!")]] int& dyn_blockNo();
    // Get instance field reference: private System.Int32 blockLength
    [[deprecated("Use field access instead!")]] int& dyn_blockLength();
    // Get instance field reference: private System.Int32 peOffset
    [[deprecated("Use field access instead!")]] int& dyn_peOffset();
    // Get instance field reference: private System.Int32 dirSecurityOffset
    [[deprecated("Use field access instead!")]] int& dyn_dirSecurityOffset();
    // Get instance field reference: private System.Int32 dirSecuritySize
    [[deprecated("Use field access instead!")]] int& dyn_dirSecuritySize();
    // Get instance field reference: private System.Int32 coffSymbolTableOffset
    [[deprecated("Use field access instead!")]] int& dyn_coffSymbolTableOffset();
    // Get instance field reference: private System.Boolean pe64
    [[deprecated("Use field access instead!")]] bool& dyn_pe64();
    // public System.Void .ctor()
    // Offset: 0x4497C5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthenticodeBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::Authenticode::AuthenticodeBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthenticodeBase*, creationType>()));
    }
    // System.Int32 get_PEOffset()
    // Offset: 0x4497CC0
    int get_PEOffset();
    // System.Void Open(System.String filename)
    // Offset: 0x4497DB8
    void Open(::StringW filename);
    // System.Void Open(System.Byte[] rawdata)
    // Offset: 0x4497E8C
    void Open(::ArrayW<uint8_t> rawdata);
    // System.Void Close()
    // Offset: 0x4497E50
    void Close();
    // System.Void ReadFirstBlock()
    // Offset: 0x4497CE8
    void ReadFirstBlock();
    // System.Int32 ProcessFirstBlock()
    // Offset: 0x4497F1C
    int ProcessFirstBlock();
    // System.Byte[] GetSecurityEntry()
    // Offset: 0x4498154
    ::ArrayW<uint8_t> GetSecurityEntry();
    // System.Byte[] GetHash(System.Security.Cryptography.HashAlgorithm hash)
    // Offset: 0x4498224
    ::ArrayW<uint8_t> GetHash(::System::Security::Cryptography::HashAlgorithm* hash);
  }; // Mono.Security.Authenticode.AuthenticodeBase
  #pragma pack(pop)
  static check_size<sizeof(AuthenticodeBase), 56 + sizeof(bool)> __Mono_Security_Authenticode_AuthenticodeBaseSizeCheck;
  static_assert(sizeof(AuthenticodeBase) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::get_PEOffset
// Il2CppName: get_PEOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Authenticode::AuthenticodeBase::*)()>(&Mono::Security::Authenticode::AuthenticodeBase::get_PEOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "get_PEOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeBase::*)(::StringW)>(&Mono::Security::Authenticode::AuthenticodeBase::Open)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeBase::*)(::ArrayW<uint8_t>)>(&Mono::Security::Authenticode::AuthenticodeBase::Open)> {
  static const MethodInfo* get() {
    static auto* rawdata = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rawdata});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeBase::*)()>(&Mono::Security::Authenticode::AuthenticodeBase::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::ReadFirstBlock
// Il2CppName: ReadFirstBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::Authenticode::AuthenticodeBase::*)()>(&Mono::Security::Authenticode::AuthenticodeBase::ReadFirstBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "ReadFirstBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::ProcessFirstBlock
// Il2CppName: ProcessFirstBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::Authenticode::AuthenticodeBase::*)()>(&Mono::Security::Authenticode::AuthenticodeBase::ProcessFirstBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "ProcessFirstBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::GetSecurityEntry
// Il2CppName: GetSecurityEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Authenticode::AuthenticodeBase::*)()>(&Mono::Security::Authenticode::AuthenticodeBase::GetSecurityEntry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "GetSecurityEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::Authenticode::AuthenticodeBase::GetHash
// Il2CppName: GetHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::Authenticode::AuthenticodeBase::*)(::System::Security::Cryptography::HashAlgorithm*)>(&Mono::Security::Authenticode::AuthenticodeBase::GetHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::Authenticode::AuthenticodeBase*), "GetHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
