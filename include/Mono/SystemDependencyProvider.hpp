// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.ISystemDependencyProvider
#include "Mono/ISystemDependencyProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: SystemCertificateProvider
  class SystemCertificateProvider;
  // Forward declaring type: ISystemCertificateProvider
  class ISystemCertificateProvider;
  // Forward declaring type: X509PalImpl
  class X509PalImpl;
}
// Completed forward declares
// Type namespace: Mono
namespace Mono {
  // Forward declaring type: SystemDependencyProvider
  class SystemDependencyProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::SystemDependencyProvider);
DEFINE_IL2CPP_ARG_TYPE(::Mono::SystemDependencyProvider*, "Mono", "SystemDependencyProvider");
// Type namespace: Mono
namespace Mono {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.SystemDependencyProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class SystemDependencyProvider : public ::Il2CppObject/*, public ::Mono::ISystemDependencyProvider*/ {
    public:
    public:
    // private readonly Mono.SystemCertificateProvider <CertificateProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Mono::SystemCertificateProvider* CertificateProvider;
    // Field size check
    static_assert(sizeof(::Mono::SystemCertificateProvider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Mono::ISystemDependencyProvider
    operator ::Mono::ISystemDependencyProvider() noexcept {
      return *reinterpret_cast<::Mono::ISystemDependencyProvider*>(this);
    }
    // Creating conversion operator: operator ::Mono::SystemCertificateProvider*
    constexpr operator ::Mono::SystemCertificateProvider*() const noexcept {
      return CertificateProvider;
    }
    // Get static field: static private Mono.SystemDependencyProvider instance
    static ::Mono::SystemDependencyProvider* _get_instance();
    // Set static field: static private Mono.SystemDependencyProvider instance
    static void _set_instance(::Mono::SystemDependencyProvider* value);
    // Get static field: static private System.Object syncRoot
    static ::Il2CppObject* _get_syncRoot();
    // Set static field: static private System.Object syncRoot
    static void _set_syncRoot(::Il2CppObject* value);
    // Get instance field reference: private readonly Mono.SystemCertificateProvider <CertificateProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Mono::SystemCertificateProvider*& dyn_$CertificateProvider$k__BackingField();
    // static public Mono.SystemDependencyProvider get_Instance()
    // Offset: 0x4BF0018
    static ::Mono::SystemDependencyProvider* get_Instance();
    // static System.Void Initialize()
    // Offset: 0x4BF0074
    static void Initialize();
    // private Mono.ISystemCertificateProvider Mono.ISystemDependencyProvider.get_CertificateProvider()
    // Offset: 0x4BF0264
    ::Mono::ISystemCertificateProvider* Mono_ISystemDependencyProvider_get_CertificateProvider();
    // public Mono.SystemCertificateProvider get_CertificateProvider()
    // Offset: 0x4BF026C
    ::Mono::SystemCertificateProvider* get_CertificateProvider();
    // public Mono.X509PalImpl get_X509Pal()
    // Offset: 0x4BF0274
    ::Mono::X509PalImpl* get_X509Pal();
    // private System.Void .ctor()
    // Offset: 0x4BF01C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SystemDependencyProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::SystemDependencyProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SystemDependencyProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4BF028C
    static void _cctor();
  }; // Mono.SystemDependencyProvider
  #pragma pack(pop)
  static check_size<sizeof(SystemDependencyProvider), 16 + sizeof(::Mono::SystemCertificateProvider*)> __Mono_SystemDependencyProviderSizeCheck;
  static_assert(sizeof(SystemDependencyProvider) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::SystemDependencyProvider* (*)()>(&Mono::SystemDependencyProvider::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::SystemDependencyProvider::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::Mono_ISystemDependencyProvider_get_CertificateProvider
// Il2CppName: Mono.ISystemDependencyProvider.get_CertificateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::ISystemCertificateProvider* (Mono::SystemDependencyProvider::*)()>(&Mono::SystemDependencyProvider::Mono_ISystemDependencyProvider_get_CertificateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), "Mono.ISystemDependencyProvider.get_CertificateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::get_CertificateProvider
// Il2CppName: get_CertificateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::SystemCertificateProvider* (Mono::SystemDependencyProvider::*)()>(&Mono::SystemDependencyProvider::get_CertificateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), "get_CertificateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::get_X509Pal
// Il2CppName: get_X509Pal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::X509PalImpl* (Mono::SystemDependencyProvider::*)()>(&Mono::SystemDependencyProvider::get_X509Pal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), "get_X509Pal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::SystemDependencyProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::SystemDependencyProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::SystemDependencyProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
