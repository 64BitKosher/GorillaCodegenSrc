// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: ISystemDependencyProvider
  class ISystemDependencyProvider;
}
// Completed forward declares
// Type namespace: Mono
namespace Mono {
  // Forward declaring type: DependencyInjector
  class DependencyInjector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::DependencyInjector);
DEFINE_IL2CPP_ARG_TYPE(::Mono::DependencyInjector*, "Mono", "DependencyInjector");
// Type namespace: Mono
namespace Mono {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.DependencyInjector
  // [TokenAttribute] Offset: FFFFFFFF
  class DependencyInjector : public ::Il2CppObject {
    public:
    // Get static field: static private System.Object locker
    static ::Il2CppObject* _get_locker();
    // Set static field: static private System.Object locker
    static void _set_locker(::Il2CppObject* value);
    // Get static field: static private Mono.ISystemDependencyProvider systemDependency
    static ::Mono::ISystemDependencyProvider* _get_systemDependency();
    // Set static field: static private Mono.ISystemDependencyProvider systemDependency
    static void _set_systemDependency(::Mono::ISystemDependencyProvider* value);
    // static Mono.ISystemDependencyProvider get_SystemProvider()
    // Offset: 0x44A080C
    static ::Mono::ISystemDependencyProvider* get_SystemProvider();
    // static System.Void Register(Mono.ISystemDependencyProvider provider)
    // Offset: 0x44A0B60
    static void Register(::Mono::ISystemDependencyProvider* provider);
    // static private Mono.ISystemDependencyProvider ReflectionLoad()
    // Offset: 0x44A0A14
    static ::Mono::ISystemDependencyProvider* ReflectionLoad();
    // static private System.Void .cctor()
    // Offset: 0x44A0D00
    static void _cctor();
  }; // Mono.DependencyInjector
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::DependencyInjector::get_SystemProvider
// Il2CppName: get_SystemProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::ISystemDependencyProvider* (*)()>(&Mono::DependencyInjector::get_SystemProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::DependencyInjector*), "get_SystemProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::DependencyInjector::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Mono::ISystemDependencyProvider*)>(&Mono::DependencyInjector::Register)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("Mono", "ISystemDependencyProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::DependencyInjector*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: Mono::DependencyInjector::ReflectionLoad
// Il2CppName: ReflectionLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::ISystemDependencyProvider* (*)()>(&Mono::DependencyInjector::ReflectionLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::DependencyInjector*), "ReflectionLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::DependencyInjector::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::DependencyInjector::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::DependencyInjector*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
