// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImpl
#include "System/Security/Cryptography/X509Certificates/X509ChainImpl.hpp"
// Including type: Mono.Unity.UnityTls/unitytls_x509list_ref
#include "Mono/Unity/UnityTls_unitytls_x509list_ref.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainStatus
#include "System/Security/Cryptography/X509Certificates/X509ChainStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509ChainElementCollection
  class X509ChainElementCollection;
  // Forward declaring type: X509ChainPolicy
  class X509ChainPolicy;
  // Skipping declaration: X509ChainStatusFlags because it is already included!
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Mono.Unity
namespace Mono::Unity {
  // Forward declaring type: X509ChainImplUnityTls
  class X509ChainImplUnityTls;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Unity::X509ChainImplUnityTls);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Unity::X509ChainImplUnityTls*, "Mono.Unity", "X509ChainImplUnityTls");
// Type namespace: Mono.Unity
namespace Mono::Unity {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Unity.X509ChainImplUnityTls
  // [TokenAttribute] Offset: FFFFFFFF
  class X509ChainImplUnityTls : public ::System::Security::Cryptography::X509Certificates::X509ChainImpl {
    public:
    public:
    // private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    // Size: 0x8
    // Offset: 0x10
    ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* elements;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*) == 0x8);
    // private Mono.Unity.UnityTls/unitytls_x509list_ref nativeCertificateChain
    // Size: 0x8
    // Offset: 0x18
    ::Mono::Unity::UnityTls::unitytls_x509list_ref nativeCertificateChain;
    // Field size check
    static_assert(sizeof(::Mono::Unity::UnityTls::unitytls_x509list_ref) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::X509Certificates::X509ChainPolicy* policy;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*) == 0x8);
    // private System.Collections.Generic.List`1<System.Security.Cryptography.X509Certificates.X509ChainStatus> chainStatusList
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509ChainStatus>* chainStatusList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509ChainStatus>*) == 0x8);
    // private System.Boolean reverseOrder
    // Size: 0x1
    // Offset: 0x30
    bool reverseOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*& dyn_elements();
    // Get instance field reference: private Mono.Unity.UnityTls/unitytls_x509list_ref nativeCertificateChain
    [[deprecated("Use field access instead!")]] ::Mono::Unity::UnityTls::unitytls_x509list_ref& dyn_nativeCertificateChain();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainPolicy*& dyn_policy();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Security.Cryptography.X509Certificates.X509ChainStatus> chainStatusList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Security::Cryptography::X509Certificates::X509ChainStatus>*& dyn_chainStatusList();
    // Get instance field reference: private System.Boolean reverseOrder
    [[deprecated("Use field access instead!")]] bool& dyn_reverseOrder();
    // System.Void .ctor(Mono.Unity.UnityTls/unitytls_x509list_ref nativeCertificateChain, System.Boolean reverseOrder)
    // Offset: 0x4BF5394
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509ChainImplUnityTls* New_ctor(::Mono::Unity::UnityTls::unitytls_x509list_ref nativeCertificateChain, bool reverseOrder) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Unity::X509ChainImplUnityTls::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509ChainImplUnityTls*, creationType>(nativeCertificateChain, reverseOrder)));
    }
    // Mono.Unity.UnityTls/unitytls_x509list_ref get_NativeCertificateChain()
    // Offset: 0x4BF6A1C
    ::Mono::Unity::UnityTls::unitytls_x509list_ref get_NativeCertificateChain();
    // public override System.Boolean get_IsValid()
    // Offset: 0x4BF69F4
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Boolean X509ChainImpl::get_IsValid()
    bool get_IsValid();
    // public override System.Security.Cryptography.X509Certificates.X509ChainElementCollection get_ChainElements()
    // Offset: 0x4BF6A24
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection X509ChainImpl::get_ChainElements()
    ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* get_ChainElements();
    // public override System.Void AddStatus(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags error)
    // Offset: 0x4BF6D10
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::AddStatus(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags error)
    void AddStatus(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags error);
    // public override System.Security.Cryptography.X509Certificates.X509ChainPolicy get_ChainPolicy()
    // Offset: 0x4BF6E30
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Security.Cryptography.X509Certificates.X509ChainPolicy X509ChainImpl::get_ChainPolicy()
    ::System::Security::Cryptography::X509Certificates::X509ChainPolicy* get_ChainPolicy();
    // public override System.Boolean Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x4BF6E38
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Boolean X509ChainImpl::Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    bool Build(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // public override System.Void Reset()
    // Offset: 0x4BF6E40
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::Reset()
    void Reset();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x4BF6EA0
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // Mono.Unity.X509ChainImplUnityTls
  #pragma pack(pop)
  static check_size<sizeof(X509ChainImplUnityTls), 48 + sizeof(bool)> __Mono_Unity_X509ChainImplUnityTlsSizeCheck;
  static_assert(sizeof(X509ChainImplUnityTls) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::get_NativeCertificateChain
// Il2CppName: get_NativeCertificateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Unity::UnityTls::unitytls_x509list_ref (Mono::Unity::X509ChainImplUnityTls::*)()>(&Mono::Unity::X509ChainImplUnityTls::get_NativeCertificateChain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "get_NativeCertificateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Unity::X509ChainImplUnityTls::*)()>(&Mono::Unity::X509ChainImplUnityTls::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::get_ChainElements
// Il2CppName: get_ChainElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* (Mono::Unity::X509ChainImplUnityTls::*)()>(&Mono::Unity::X509ChainImplUnityTls::get_ChainElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "get_ChainElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::AddStatus
// Il2CppName: AddStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Unity::X509ChainImplUnityTls::*)(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&Mono::Unity::X509ChainImplUnityTls::AddStatus)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "AddStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::get_ChainPolicy
// Il2CppName: get_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainPolicy* (Mono::Unity::X509ChainImplUnityTls::*)()>(&Mono::Unity::X509ChainImplUnityTls::get_ChainPolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "get_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Unity::X509ChainImplUnityTls::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&Mono::Unity::X509ChainImplUnityTls::Build)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Unity::X509ChainImplUnityTls::*)()>(&Mono::Unity::X509ChainImplUnityTls::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Unity::X509ChainImplUnityTls::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Unity::X509ChainImplUnityTls::*)(bool)>(&Mono::Unity::X509ChainImplUnityTls::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Unity::X509ChainImplUnityTls*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
