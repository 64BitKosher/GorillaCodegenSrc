// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Net.WebExceptionStatus
#include "System/Net/WebExceptionStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileTlsProvider
  class MobileTlsProvider;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: NetworkStream
  class NetworkStream;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: WebConnectionTunnel
  class WebConnectionTunnel;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Forward declaring type: MonoTlsStream
  class MonoTlsStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Net::Security::MonoTlsStream);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Net::Security::MonoTlsStream*, "Mono.Net.Security", "MonoTlsStream");
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.MonoTlsStream
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoTlsStream : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Mono::Net::Security::MonoTlsStream::$CreateStream$d__18
    struct $CreateStream$d__18;
    public:
    // private readonly Mono.Net.Security.MobileTlsProvider provider
    // Size: 0x8
    // Offset: 0x10
    ::Mono::Net::Security::MobileTlsProvider* provider;
    // Field size check
    static_assert(sizeof(::Mono::Net::Security::MobileTlsProvider*) == 0x8);
    // private readonly System.Net.Sockets.NetworkStream networkStream
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::Sockets::NetworkStream* networkStream;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::NetworkStream*) == 0x8);
    // private readonly System.Net.HttpWebRequest request
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::HttpWebRequest* request;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // private readonly Mono.Security.Interface.MonoTlsSettings settings
    // Size: 0x8
    // Offset: 0x28
    ::Mono::Security::Interface::MonoTlsSettings* settings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    // private System.Net.Security.SslStream sslStream
    // Size: 0x8
    // Offset: 0x30
    ::System::Net::Security::SslStream* sslStream;
    // Field size check
    static_assert(sizeof(::System::Net::Security::SslStream*) == 0x8);
    // private readonly System.Object sslStreamLock
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* sslStreamLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.WebExceptionStatus status
    // Size: 0x4
    // Offset: 0x40
    ::System::Net::WebExceptionStatus status;
    // Field size check
    static_assert(sizeof(::System::Net::WebExceptionStatus) == 0x4);
    // private System.Boolean <CertificateValidationFailed>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool CertificateValidationFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private readonly Mono.Net.Security.MobileTlsProvider provider
    [[deprecated("Use field access instead!")]] ::Mono::Net::Security::MobileTlsProvider*& dyn_provider();
    // Get instance field reference: private readonly System.Net.Sockets.NetworkStream networkStream
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::NetworkStream*& dyn_networkStream();
    // Get instance field reference: private readonly System.Net.HttpWebRequest request
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_request();
    // Get instance field reference: private readonly Mono.Security.Interface.MonoTlsSettings settings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsSettings*& dyn_settings();
    // Get instance field reference: private System.Net.Security.SslStream sslStream
    [[deprecated("Use field access instead!")]] ::System::Net::Security::SslStream*& dyn_sslStream();
    // Get instance field reference: private readonly System.Object sslStreamLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_sslStreamLock();
    // Get instance field reference: private System.Net.WebExceptionStatus status
    [[deprecated("Use field access instead!")]] ::System::Net::WebExceptionStatus& dyn_status();
    // Get instance field reference: private System.Boolean <CertificateValidationFailed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CertificateValidationFailed$k__BackingField();
    // System.Net.HttpWebRequest get_Request()
    // Offset: 0x4BFE618
    ::System::Net::HttpWebRequest* get_Request();
    // System.Net.WebExceptionStatus get_ExceptionStatus()
    // Offset: 0x4BFE620
    ::System::Net::WebExceptionStatus get_ExceptionStatus();
    // System.Boolean get_CertificateValidationFailed()
    // Offset: 0x4BFE628
    bool get_CertificateValidationFailed();
    // System.Void set_CertificateValidationFailed(System.Boolean value)
    // Offset: 0x4BFE630
    void set_CertificateValidationFailed(bool value);
    // public System.Void .ctor(System.Net.HttpWebRequest request, System.Net.Sockets.NetworkStream networkStream)
    // Offset: 0x4BFE63C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoTlsStream* New_ctor(::System::Net::HttpWebRequest* request, ::System::Net::Sockets::NetworkStream* networkStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Net::Security::MonoTlsStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoTlsStream*, creationType>(request, networkStream)));
    }
    // System.Threading.Tasks.Task`1<System.IO.Stream> CreateStream(System.Net.WebConnectionTunnel tunnel, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x4BFE750
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* CreateStream(::System::Net::WebConnectionTunnel* tunnel, ::System::Threading::CancellationToken cancellationToken);
    // public System.Void Dispose()
    // Offset: 0x4BFE89C
    void Dispose();
    // private System.Void CloseSslStream()
    // Offset: 0x4BFE8A0
    void CloseSslStream();
  }; // Mono.Net.Security.MonoTlsStream
  #pragma pack(pop)
  static check_size<sizeof(MonoTlsStream), 68 + sizeof(bool)> __Mono_Net_Security_MonoTlsStreamSizeCheck;
  static_assert(sizeof(MonoTlsStream) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::get_Request
// Il2CppName: get_Request
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpWebRequest* (Mono::Net::Security::MonoTlsStream::*)()>(&Mono::Net::Security::MonoTlsStream::get_Request)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "get_Request", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::get_ExceptionStatus
// Il2CppName: get_ExceptionStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebExceptionStatus (Mono::Net::Security::MonoTlsStream::*)()>(&Mono::Net::Security::MonoTlsStream::get_ExceptionStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "get_ExceptionStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::get_CertificateValidationFailed
// Il2CppName: get_CertificateValidationFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Net::Security::MonoTlsStream::*)()>(&Mono::Net::Security::MonoTlsStream::get_CertificateValidationFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "get_CertificateValidationFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::set_CertificateValidationFailed
// Il2CppName: set_CertificateValidationFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoTlsStream::*)(bool)>(&Mono::Net::Security::MonoTlsStream::set_CertificateValidationFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "set_CertificateValidationFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::CreateStream
// Il2CppName: CreateStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (Mono::Net::Security::MonoTlsStream::*)(::System::Net::WebConnectionTunnel*, ::System::Threading::CancellationToken)>(&Mono::Net::Security::MonoTlsStream::CreateStream)> {
  static const MethodInfo* get() {
    static auto* tunnel = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnectionTunnel")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "CreateStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tunnel, cancellationToken});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoTlsStream::*)()>(&Mono::Net::Security::MonoTlsStream::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoTlsStream::CloseSslStream
// Il2CppName: CloseSslStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoTlsStream::*)()>(&Mono::Net::Security::MonoTlsStream::CloseSslStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoTlsStream*), "CloseSslStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
