// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Net.Security.ChainValidationHelper
#include "Mono/Net/Security/ChainValidationHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslPolicyErrors
  struct SslPolicyErrors;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0*, "Mono.Net.Security", "ChainValidationHelper/<>c__DisplayClass11_0");
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.ChainValidationHelper/<>c__DisplayClass11_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class ChainValidationHelper::$$c__DisplayClass11_0 : public ::Il2CppObject {
    public:
    public:
    // public Mono.Security.Interface.MonoTlsSettings settings
    // Size: 0x8
    // Offset: 0x10
    ::Mono::Security::Interface::MonoTlsSettings* settings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    public:
    // Creating conversion operator: operator ::Mono::Security::Interface::MonoTlsSettings*
    constexpr operator ::Mono::Security::Interface::MonoTlsSettings*() const noexcept {
      return settings;
    }
    // Get instance field reference: public Mono.Security.Interface.MonoTlsSettings settings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsSettings*& dyn_settings();
    // public System.Void .ctor()
    // Offset: 0x4BF98AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChainValidationHelper::$$c__DisplayClass11_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChainValidationHelper::$$c__DisplayClass11_0*, creationType>()));
    }
    // System.Boolean <GetValidationCallback>b__0(System.Object s, System.Security.Cryptography.X509Certificates.X509Certificate c, System.Security.Cryptography.X509Certificates.X509Chain ch, System.Net.Security.SslPolicyErrors e)
    // Offset: 0x4BF9FB4
    bool $GetValidationCallback$b__0(::Il2CppObject* s, ::System::Security::Cryptography::X509Certificates::X509Certificate* c, ::System::Security::Cryptography::X509Certificates::X509Chain* ch, ::System::Net::Security::SslPolicyErrors e);
  }; // Mono.Net.Security.ChainValidationHelper/<>c__DisplayClass11_0
  #pragma pack(pop)
  static check_size<sizeof(ChainValidationHelper::$$c__DisplayClass11_0), 16 + sizeof(::Mono::Security::Interface::MonoTlsSettings*)> __Mono_Net_Security_ChainValidationHelper_$$c__DisplayClass11_0SizeCheck;
  static_assert(sizeof(ChainValidationHelper::$$c__DisplayClass11_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0::$GetValidationCallback$b__0
// Il2CppName: <GetValidationCallback>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0::*)(::Il2CppObject*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::System::Security::Cryptography::X509Certificates::X509Chain*, ::System::Net::Security::SslPolicyErrors)>(&Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0::$GetValidationCallback$b__0)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Chain")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SslPolicyErrors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::ChainValidationHelper::$$c__DisplayClass11_0*), "<GetValidationCallback>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, c, ch, e});
  }
};
