// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: ServerCertSelectionCallback
  class ServerCertSelectionCallback;
  // Forward declaring type: EncryptionPolicy
  struct EncryptionPolicy;
}
// Forward declaring namespace: System::Security::Authentication
namespace System::Security::Authentication {
  // Forward declaring type: SslProtocols
  struct SslProtocols;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509RevocationMode
  struct X509RevocationMode;
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Forward declaring type: MonoSslAuthenticationOptions
  class MonoSslAuthenticationOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Net::Security::MonoSslAuthenticationOptions);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Net::Security::MonoSslAuthenticationOptions*, "Mono.Net.Security", "MonoSslAuthenticationOptions");
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.MonoSslAuthenticationOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoSslAuthenticationOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Net.Security.ServerCertSelectionCallback <ServerCertSelectionDelegate>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Security::ServerCertSelectionCallback* ServerCertSelectionDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::Security::ServerCertSelectionCallback*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Net::Security::ServerCertSelectionCallback*
    constexpr operator ::System::Net::Security::ServerCertSelectionCallback*() const noexcept {
      return ServerCertSelectionDelegate;
    }
    // Get instance field reference: private System.Net.Security.ServerCertSelectionCallback <ServerCertSelectionDelegate>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Security::ServerCertSelectionCallback*& dyn_$ServerCertSelectionDelegate$k__BackingField();
    // public System.Boolean get_ServerMode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ServerMode();
    // public System.Security.Authentication.SslProtocols get_EnabledSslProtocols()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Authentication::SslProtocols get_EnabledSslProtocols();
    // public System.Void set_EnabledSslProtocols(System.Security.Authentication.SslProtocols value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_EnabledSslProtocols(::System::Security::Authentication::SslProtocols value);
    // public System.Void set_EncryptionPolicy(System.Net.Security.EncryptionPolicy value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_EncryptionPolicy(::System::Net::Security::EncryptionPolicy value);
    // public System.Void set_CertificateRevocationCheckMode(System.Security.Cryptography.X509Certificates.X509RevocationMode value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CertificateRevocationCheckMode(::System::Security::Cryptography::X509Certificates::X509RevocationMode value);
    // public System.String get_TargetHost()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_TargetHost();
    // public System.Void set_TargetHost(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TargetHost(::StringW value);
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_ServerCertificate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509Certificate* get_ServerCertificate();
    // public System.Void set_ServerCertificate(System.Security.Cryptography.X509Certificates.X509Certificate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ServerCertificate(::System::Security::Cryptography::X509Certificates::X509Certificate* value);
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ClientCertificates(::System::Security::Cryptography::X509Certificates::X509CertificateCollection* value);
    // public System.Boolean get_ClientCertificateRequired()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ClientCertificateRequired();
    // public System.Void set_ClientCertificateRequired(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ClientCertificateRequired(bool value);
    // System.Net.Security.ServerCertSelectionCallback get_ServerCertSelectionDelegate()
    // Offset: 0x4BFD2B8
    ::System::Net::Security::ServerCertSelectionCallback* get_ServerCertSelectionDelegate();
    // protected System.Void .ctor()
    // Offset: 0x4BFD2C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoSslAuthenticationOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Net::Security::MonoSslAuthenticationOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoSslAuthenticationOptions*, creationType>()));
    }
  }; // Mono.Net.Security.MonoSslAuthenticationOptions
  #pragma pack(pop)
  static check_size<sizeof(MonoSslAuthenticationOptions), 16 + sizeof(::System::Net::Security::ServerCertSelectionCallback*)> __Mono_Net_Security_MonoSslAuthenticationOptionsSizeCheck;
  static_assert(sizeof(MonoSslAuthenticationOptions) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerMode
// Il2CppName: get_ServerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_ServerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_EnabledSslProtocols
// Il2CppName: get_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Authentication::SslProtocols (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_EnabledSslProtocols
// Il2CppName: set_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::System::Security::Authentication::SslProtocols)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Authentication", "SslProtocols")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_EncryptionPolicy
// Il2CppName: set_EncryptionPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::System::Net::Security::EncryptionPolicy)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_EncryptionPolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "EncryptionPolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_EncryptionPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_CertificateRevocationCheckMode
// Il2CppName: set_CertificateRevocationCheckMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509RevocationMode)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_CertificateRevocationCheckMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509RevocationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_CertificateRevocationCheckMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_TargetHost
// Il2CppName: get_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_TargetHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_TargetHost
// Il2CppName: set_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::StringW)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_TargetHost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerCertificate
// Il2CppName: get_ServerCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerCertificate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_ServerCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_ServerCertificate
// Il2CppName: set_ServerCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509Certificate*)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_ServerCertificate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_ServerCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_ClientCertificates
// Il2CppName: set_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_ClientCertificates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_ClientCertificateRequired
// Il2CppName: get_ClientCertificateRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_ClientCertificateRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_ClientCertificateRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::set_ClientCertificateRequired
// Il2CppName: set_ClientCertificateRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Net::Security::MonoSslAuthenticationOptions::*)(bool)>(&Mono::Net::Security::MonoSslAuthenticationOptions::set_ClientCertificateRequired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "set_ClientCertificateRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerCertSelectionDelegate
// Il2CppName: get_ServerCertSelectionDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::ServerCertSelectionCallback* (Mono::Net::Security::MonoSslAuthenticationOptions::*)()>(&Mono::Net::Security::MonoSslAuthenticationOptions::get_ServerCertSelectionDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Net::Security::MonoSslAuthenticationOptions*), "get_ServerCertSelectionDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Net::Security::MonoSslAuthenticationOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
