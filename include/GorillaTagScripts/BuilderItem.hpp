// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
  // Forward declaring type: DropZone
  class DropZone;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderItemReliableState
  class BuilderItemReliableState;
  // Forward declaring type: BuilderAttachGridPlane
  class BuilderAttachGridPlane;
  // Forward declaring type: BuilderAttachEdge
  class BuilderAttachEdge;
  // Forward declaring type: BuilderTable
  class BuilderTable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Behaviour because it is already included!
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderItem
  class BuilderItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderItem);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderItem*, "GorillaTagScripts", "BuilderItem");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTagScripts.BuilderItem
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderItem : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GorillaTagScripts::BuilderItem::BuilderItemState
    struct BuilderItemState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.BuilderItem/BuilderItemState
    // [TokenAttribute] Offset: FFFFFFFF
    struct BuilderItemState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BuilderItemState
      constexpr BuilderItemState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.BuilderItem/BuilderItemState isHeld
      static constexpr const int isHeld = 1;
      // Get static field: static public GorillaTagScripts.BuilderItem/BuilderItemState isHeld
      static ::GorillaTagScripts::BuilderItem::BuilderItemState _get_isHeld();
      // Set static field: static public GorillaTagScripts.BuilderItem/BuilderItemState isHeld
      static void _set_isHeld(::GorillaTagScripts::BuilderItem::BuilderItemState value);
      // static field const value: static public GorillaTagScripts.BuilderItem/BuilderItemState dropped
      static constexpr const int dropped = 2;
      // Get static field: static public GorillaTagScripts.BuilderItem/BuilderItemState dropped
      static ::GorillaTagScripts::BuilderItem::BuilderItemState _get_dropped();
      // Set static field: static public GorillaTagScripts.BuilderItem/BuilderItemState dropped
      static void _set_dropped(::GorillaTagScripts::BuilderItem::BuilderItemState value);
      // static field const value: static public GorillaTagScripts.BuilderItem/BuilderItemState placed
      static constexpr const int placed = 4;
      // Get static field: static public GorillaTagScripts.BuilderItem/BuilderItemState placed
      static ::GorillaTagScripts::BuilderItem::BuilderItemState _get_placed();
      // Set static field: static public GorillaTagScripts.BuilderItem/BuilderItemState placed
      static void _set_placed(::GorillaTagScripts::BuilderItem::BuilderItemState value);
      // static field const value: static public GorillaTagScripts.BuilderItem/BuilderItemState unused0
      static constexpr const int unused0 = 8;
      // Get static field: static public GorillaTagScripts.BuilderItem/BuilderItemState unused0
      static ::GorillaTagScripts::BuilderItem::BuilderItemState _get_unused0();
      // Set static field: static public GorillaTagScripts.BuilderItem/BuilderItemState unused0
      static void _set_unused0(::GorillaTagScripts::BuilderItem::BuilderItemState value);
      // static field const value: static public GorillaTagScripts.BuilderItem/BuilderItemState none
      static constexpr const int none = 16;
      // Get static field: static public GorillaTagScripts.BuilderItem/BuilderItemState none
      static ::GorillaTagScripts::BuilderItem::BuilderItemState _get_none();
      // Set static field: static public GorillaTagScripts.BuilderItem/BuilderItemState none
      static void _set_none(::GorillaTagScripts::BuilderItem::BuilderItemState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.BuilderItem/BuilderItemState
    #pragma pack(pop)
    static check_size<sizeof(BuilderItem::BuilderItemState), 0 + sizeof(int)> __GorillaTagScripts_BuilderItem_BuilderItemStateSizeCheck;
    static_assert(sizeof(BuilderItem::BuilderItemState) == 0x4);
    public:
    // public GorillaTagScripts.BuilderItemReliableState reliableState
    // Size: 0x8
    // Offset: 0x2D0
    ::GorillaTagScripts::BuilderItemReliableState* reliableState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderItemReliableState*) == 0x8);
    // public System.String builtItemPath
    // Size: 0x8
    // Offset: 0x2D8
    ::StringW builtItemPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject itemRoot
    // Size: 0x8
    // Offset: 0x2E0
    ::UnityEngine::GameObject* itemRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean enableCollidersWhenReady
    // Size: 0x1
    // Offset: 0x2E8
    bool enableCollidersWhenReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single handsFreeOfCollidersTime
    // Size: 0x4
    // Offset: 0x2EC
    float handsFreeOfCollidersTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public BuilderPiece attachedPiece
    // Size: 0x8
    // Offset: 0x2F0
    ::GlobalNamespace::BuilderPiece* attachedPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Behaviour> onlyWhenPlacedBehaviours
    // Size: 0x8
    // Offset: 0x2F8
    ::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>* onlyWhenPlacedBehaviours;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>*) == 0x8);
    // public GorillaTagScripts.BuilderItem parentItem
    // Size: 0x8
    // Offset: 0x300
    ::GorillaTagScripts::BuilderItem* parentItem;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderItem*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    // Size: 0x8
    // Offset: 0x308
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* gridPlanes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachEdge> edges
    // Size: 0x8
    // Offset: 0x310
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachEdge*>* edges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachEdge*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    // Size: 0x8
    // Offset: 0x318
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // private UnityEngine.Transform parent
    // Size: 0x8
    // Offset: 0x320
    ::UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 initialPosition
    // Size: 0xC
    // Offset: 0x328
    ::UnityEngine::Vector3 initialPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion initialRotation
    // Size: 0x10
    // Offset: 0x334
    ::UnityEngine::Quaternion initialRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 initialGrabInteractorScale
    // Size: 0xC
    // Offset: 0x344
    ::UnityEngine::Vector3 initialGrabInteractorScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private GorillaTagScripts.BuilderTable currTable
    // Size: 0x8
    // Offset: 0x350
    ::GorillaTagScripts::BuilderTable* currTable;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x358
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip snapAudio
    // Size: 0x8
    // Offset: 0x360
    ::UnityEngine::AudioClip* snapAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip placeAudio
    // Size: 0x8
    // Offset: 0x368
    ::UnityEngine::AudioClip* placeAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.GameObject placeVFX
    // Size: 0x8
    // Offset: 0x370
    ::UnityEngine::GameObject* placeVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private GorillaTagScripts.BuilderItem/BuilderItemState previousItemState
    // Size: 0x4
    // Offset: 0x378
    ::GorillaTagScripts::BuilderItem::BuilderItemState previousItemState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderItem::BuilderItemState) == 0x4);
    public:
    // Get instance field reference: public GorillaTagScripts.BuilderItemReliableState reliableState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderItemReliableState*& dyn_reliableState();
    // Get instance field reference: public System.String builtItemPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_builtItemPath();
    // Get instance field reference: public UnityEngine.GameObject itemRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_itemRoot();
    // Get instance field reference: private System.Boolean enableCollidersWhenReady
    [[deprecated("Use field access instead!")]] bool& dyn_enableCollidersWhenReady();
    // Get instance field reference: private System.Single handsFreeOfCollidersTime
    [[deprecated("Use field access instead!")]] float& dyn_handsFreeOfCollidersTime();
    // Get instance field reference: public BuilderPiece attachedPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_attachedPiece();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Behaviour> onlyWhenPlacedBehaviours
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Behaviour*>*& dyn_onlyWhenPlacedBehaviours();
    // Get instance field reference: public GorillaTagScripts.BuilderItem parentItem
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderItem*& dyn_parentItem();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*& dyn_gridPlanes();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachEdge> edges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachEdge*>*& dyn_edges();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_colliders();
    // Get instance field reference: private UnityEngine.Transform parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parent();
    // Get instance field reference: private UnityEngine.Vector3 initialPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initialPosition();
    // Get instance field reference: private UnityEngine.Quaternion initialRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialRotation();
    // Get instance field reference: private UnityEngine.Vector3 initialGrabInteractorScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initialGrabInteractorScale();
    // Get instance field reference: private GorillaTagScripts.BuilderTable currTable
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable*& dyn_currTable();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip snapAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_snapAudio();
    // Get instance field reference: public UnityEngine.AudioClip placeAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_placeAudio();
    // Get instance field reference: public UnityEngine.GameObject placeVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_placeVFX();
    // Get instance field reference: private GorillaTagScripts.BuilderItem/BuilderItemState previousItemState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderItem::BuilderItemState& dyn_previousItemState();
    // public System.Void AttachPiece(BuilderPiece piece)
    // Offset: 0x27F2768
    void AttachPiece(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void DetachPiece(BuilderPiece piece)
    // Offset: 0x27F2A58
    void DetachPiece(::GlobalNamespace::BuilderPiece* piece);
    // private System.Void OnStateChanged()
    // Offset: 0x27F2D84
    void OnStateChanged();
    // private System.Boolean IsOverlapping(System.Collections.Generic.List`1<InteractionPoint> interactionPoints)
    // Offset: 0x27F300C
    bool IsOverlapping(::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>* interactionPoints);
    // public System.Void OnHoverOverTableStart(GorillaTagScripts.BuilderTable table)
    // Offset: 0x27F335C
    void OnHoverOverTableStart(::GorillaTagScripts::BuilderTable* table);
    // public System.Void OnHoverOverTableEnd(GorillaTagScripts.BuilderTable table)
    // Offset: 0x27F336C
    void OnHoverOverTableEnd(::GorillaTagScripts::BuilderTable* table);
    // private System.Void PlayVFX(UnityEngine.GameObject vfx)
    // Offset: 0x27F34B0
    void PlayVFX(::UnityEngine::GameObject* vfx);
    // private System.Boolean Reparent(UnityEngine.Transform _transform)
    // Offset: 0x27F32AC
    bool Reparent(::UnityEngine::Transform* _transform);
    // private System.Boolean ShouldPlayFX()
    // Offset: 0x27F3534
    bool ShouldPlayFX();
    // static public UnityEngine.GameObject BuildEnvItem(System.Int32 prefabHash, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x27F3554
    static ::UnityEngine::GameObject* BuildEnvItem(int prefabHash, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Int32 GetPhotonViewId()
    // Offset: 0x27F3698
    int GetPhotonViewId();
    // public override System.Boolean ShouldBeKinematic()
    // Offset: 0x27F2644
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::ShouldBeKinematic()
    bool ShouldBeKinematic();
    // protected override System.Void Awake()
    // Offset: 0x27F2668
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Awake()
    void Awake();
    // public override System.Void OnEnable()
    // Offset: 0x27F2730
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x27F2738
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // protected override System.Void Start()
    // Offset: 0x27F2740
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // public override UnityEngine.Matrix4x4 GetDefaultTransformationMatrix()
    // Offset: 0x27F2E0C
    // Implemented from: TransferrableObject
    // Base method: UnityEngine.Matrix4x4 TransferrableObject::GetDefaultTransformationMatrix()
    ::UnityEngine::Matrix4x4 GetDefaultTransformationMatrix();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x27F2EAC
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x27F30F0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x27F30F8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x27F3190
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public override System.Void OnJoinedRoom()
    // Offset: 0x27F3380
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnLeftRoom()
    // Offset: 0x27F3388
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnLeftRoom()
    void OnLeftRoom();
    // protected override System.Void OnHandMatrixUpdate(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Boolean leftHand)
    // Offset: 0x27F362C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnHandMatrixUpdate(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Boolean leftHand)
    void OnHandMatrixUpdate(::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, bool leftHand);
    // public System.Void .ctor()
    // Offset: 0x27F3760
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderItem*, creationType>()));
    }
  }; // GorillaTagScripts.BuilderItem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderItem::BuilderItemState, "GorillaTagScripts", "BuilderItem/BuilderItemState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::AttachPiece
// Il2CppName: AttachPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderItem::AttachPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "AttachPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::DetachPiece
// Il2CppName: DetachPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderItem::DetachPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "DetachPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnStateChanged
// Il2CppName: OnStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::OnStateChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::IsOverlapping
// Il2CppName: IsOverlapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderItem::*)(::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*)>(&GorillaTagScripts::BuilderItem::IsOverlapping)> {
  static const MethodInfo* get() {
    static auto* interactionPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "InteractionPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "IsOverlapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionPoints});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnHoverOverTableStart
// Il2CppName: OnHoverOverTableStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::GorillaTagScripts::BuilderTable*)>(&GorillaTagScripts::BuilderItem::OnHoverOverTableStart)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnHoverOverTableStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnHoverOverTableEnd
// Il2CppName: OnHoverOverTableEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::GorillaTagScripts::BuilderTable*)>(&GorillaTagScripts::BuilderItem::OnHoverOverTableEnd)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnHoverOverTableEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::PlayVFX
// Il2CppName: PlayVFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::UnityEngine::GameObject*)>(&GorillaTagScripts::BuilderItem::PlayVFX)> {
  static const MethodInfo* get() {
    static auto* vfx = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "PlayVFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vfx});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::Reparent
// Il2CppName: Reparent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderItem::*)(::UnityEngine::Transform*)>(&GorillaTagScripts::BuilderItem::Reparent)> {
  static const MethodInfo* get() {
    static auto* _transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "Reparent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_transform});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::ShouldPlayFX
// Il2CppName: ShouldPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::ShouldPlayFX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "ShouldPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::BuildEnvItem
// Il2CppName: BuildEnvItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GorillaTagScripts::BuilderItem::BuildEnvItem)> {
  static const MethodInfo* get() {
    static auto* prefabHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "BuildEnvItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabHash, position, rotation});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::GetPhotonViewId
// Il2CppName: GetPhotonViewId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::GetPhotonViewId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "GetPhotonViewId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::ShouldBeKinematic
// Il2CppName: ShouldBeKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::ShouldBeKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "ShouldBeKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::GetDefaultTransformationMatrix
// Il2CppName: GetDefaultTransformationMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::GetDefaultTransformationMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "GetDefaultTransformationMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GorillaTagScripts::BuilderItem::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderItem::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GorillaTagScripts::BuilderItem::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)()>(&GorillaTagScripts::BuilderItem::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::OnHandMatrixUpdate
// Il2CppName: OnHandMatrixUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderItem::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool)>(&GorillaTagScripts::BuilderItem::OnHandMatrixUpdate)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderItem*), "OnHandMatrixUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation, leftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
