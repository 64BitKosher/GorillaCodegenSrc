// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: GameObjectManagerWithId
  class GameObjectManagerWithId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::GameObjectManagerWithId);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::GameObjectManagerWithId*, "GorillaTagScripts", "GameObjectManagerWithId");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.GameObjectManagerWithId
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectManagerWithId : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTagScripts::GameObjectManagerWithId::gameObjectData
    class gameObjectData;
    public:
    // public UnityEngine.GameObject objectsContainer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* objectsContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public GTZone zone
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::GTZone zone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    // Padding between fields: zone and: objectData
    char __padding1[0x4] = {};
    // private readonly System.Collections.Generic.List`1<GorillaTagScripts.GameObjectManagerWithId/gameObjectData> objectData
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GorillaTagScripts::GameObjectManagerWithId::gameObjectData*>* objectData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::GameObjectManagerWithId::gameObjectData*>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject objectsContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_objectsContainer();
    // Get instance field reference: public GTZone zone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zone();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaTagScripts.GameObjectManagerWithId/gameObjectData> objectData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::GameObjectManagerWithId::gameObjectData*>*& dyn_objectData();
    // private System.Void Awake()
    // Offset: 0x280C7A8
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x280C988
    void OnDestroy();
    // public System.Void ReceiveEvent(System.String id, UnityEngine.Transform _transform)
    // Offset: 0x280C9F8
    void ReceiveEvent(::StringW id, ::UnityEngine::Transform* _transform);
    // private System.Void Update()
    // Offset: 0x280CB74
    void Update();
    // public System.Void .ctor()
    // Offset: 0x280CD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectManagerWithId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::GameObjectManagerWithId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectManagerWithId*, creationType>()));
    }
  }; // GorillaTagScripts.GameObjectManagerWithId
  #pragma pack(pop)
  static check_size<sizeof(GameObjectManagerWithId), 48 + sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::GameObjectManagerWithId::gameObjectData*>*)> __GorillaTagScripts_GameObjectManagerWithIdSizeCheck;
  static_assert(sizeof(GameObjectManagerWithId) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::GameObjectManagerWithId::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::GameObjectManagerWithId::*)()>(&GorillaTagScripts::GameObjectManagerWithId::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::GameObjectManagerWithId*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::GameObjectManagerWithId::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::GameObjectManagerWithId::*)()>(&GorillaTagScripts::GameObjectManagerWithId::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::GameObjectManagerWithId*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::GameObjectManagerWithId::ReceiveEvent
// Il2CppName: ReceiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::GameObjectManagerWithId::*)(::StringW, ::UnityEngine::Transform*)>(&GorillaTagScripts::GameObjectManagerWithId::ReceiveEvent)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* _transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::GameObjectManagerWithId*), "ReceiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, _transform});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::GameObjectManagerWithId::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::GameObjectManagerWithId::*)()>(&GorillaTagScripts::GameObjectManagerWithId::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::GameObjectManagerWithId*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::GameObjectManagerWithId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
