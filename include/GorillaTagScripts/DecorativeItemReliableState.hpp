// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: DecorativeItemReliableState
  class DecorativeItemReliableState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::DecorativeItemReliableState);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::DecorativeItemReliableState*, "GorillaTagScripts", "DecorativeItemReliableState");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.DecorativeItemReliableState
  // [TokenAttribute] Offset: FFFFFFFF
  class DecorativeItemReliableState : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public System.Boolean isSnapped
    // Size: 0x1
    // Offset: 0x20
    bool isSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSnapped and: snapPosition
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 snapPosition
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 snapPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 respawnPosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 respawnPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion respawnRotation
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Quaternion respawnRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public System.Boolean isSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_isSnapped();
    // Get instance field reference: public UnityEngine.Vector3 snapPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_snapPosition();
    // Get instance field reference: public UnityEngine.Vector3 respawnPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_respawnPosition();
    // Get instance field reference: public UnityEngine.Quaternion respawnRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_respawnRotation();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28046F8
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x2804B50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecorativeItemReliableState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::DecorativeItemReliableState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecorativeItemReliableState*, creationType>()));
    }
  }; // GorillaTagScripts.DecorativeItemReliableState
  #pragma pack(pop)
  static check_size<sizeof(DecorativeItemReliableState), 60 + sizeof(::UnityEngine::Quaternion)> __GorillaTagScripts_DecorativeItemReliableStateSizeCheck;
  static_assert(sizeof(DecorativeItemReliableState) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItemReliableState::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItemReliableState::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::DecorativeItemReliableState::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItemReliableState*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItemReliableState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
