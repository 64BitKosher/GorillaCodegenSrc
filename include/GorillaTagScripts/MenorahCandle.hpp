// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: MenorahCandle
  class MenorahCandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::MenorahCandle);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::MenorahCandle*, "GorillaTagScripts", "MenorahCandle");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.MenorahCandle
  // [TokenAttribute] Offset: FFFFFFFF
  class MenorahCandle : public ::Photon::Pun::MonoBehaviourPun {
    public:
    public:
    // public System.Int32 day
    // Size: 0x4
    // Offset: 0x28
    int day;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 month
    // Size: 0x4
    // Offset: 0x2C
    int month;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 year
    // Size: 0x4
    // Offset: 0x30
    int year;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: year and: flame
    char __padding2[0x4] = {};
    // public UnityEngine.GameObject flame
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* flame;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject candle
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* candle;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.DateTime litDate
    // Size: 0x8
    // Offset: 0x48
    ::System::DateTime litDate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean activeTimeEventDay
    // Size: 0x1
    // Offset: 0x50
    bool activeTimeEventDay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: activeTimeEventDay and: currentDate
    char __padding6[0x7] = {};
    // private System.DateTime currentDate
    // Size: 0x8
    // Offset: 0x58
    ::System::DateTime currentDate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    public:
    // Get instance field reference: public System.Int32 day
    [[deprecated("Use field access instead!")]] int& dyn_day();
    // Get instance field reference: public System.Int32 month
    [[deprecated("Use field access instead!")]] int& dyn_month();
    // Get instance field reference: public System.Int32 year
    [[deprecated("Use field access instead!")]] int& dyn_year();
    // Get instance field reference: public UnityEngine.GameObject flame
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_flame();
    // Get instance field reference: public UnityEngine.GameObject candle
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_candle();
    // Get instance field reference: private System.DateTime litDate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_litDate();
    // Get instance field reference: private System.Boolean activeTimeEventDay
    [[deprecated("Use field access instead!")]] bool& dyn_activeTimeEventDay();
    // Get instance field reference: private System.DateTime currentDate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_currentDate();
    // private System.Void Awake()
    // Offset: 0x28108E0
    void Awake();
    // private System.Void Start()
    // Offset: 0x28108E4
    void Start();
    // private System.Void UpdateMenorah()
    // Offset: 0x2810B38
    void UpdateMenorah();
    // private System.Void OnTimeChanged()
    // Offset: 0x2810C1C
    void OnTimeChanged();
    // public System.Void OnTimeEventStart()
    // Offset: 0x2810C88
    void OnTimeEventStart();
    // public System.Void OnTimeEventEnd()
    // Offset: 0x2810C94
    void OnTimeEventEnd();
    // private System.Void EnableCandle(System.Boolean enable)
    // Offset: 0x2810A94
    void EnableCandle(bool enable);
    // private System.Boolean CandleShouldBeVisible()
    // Offset: 0x2810AD4
    bool CandleShouldBeVisible();
    // private System.Void EnableFlame(System.Boolean enable)
    // Offset: 0x2810AB4
    void EnableFlame(bool enable);
    // private System.Boolean ShouldLightCandle()
    // Offset: 0x2810BA8
    bool ShouldLightCandle();
    // private System.Boolean ShouldSnuffCandle()
    // Offset: 0x2810BEC
    bool ShouldSnuffCandle();
    // private System.Void OnDestroy()
    // Offset: 0x2810C9C
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x2810DE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MenorahCandle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::MenorahCandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MenorahCandle*, creationType>()));
    }
  }; // GorillaTagScripts.MenorahCandle
  #pragma pack(pop)
  static check_size<sizeof(MenorahCandle), 88 + sizeof(::System::DateTime)> __GorillaTagScripts_MenorahCandleSizeCheck;
  static_assert(sizeof(MenorahCandle) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::UpdateMenorah
// Il2CppName: UpdateMenorah
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::UpdateMenorah)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "UpdateMenorah", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::OnTimeChanged
// Il2CppName: OnTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::OnTimeChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "OnTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::OnTimeEventStart
// Il2CppName: OnTimeEventStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::OnTimeEventStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "OnTimeEventStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::OnTimeEventEnd
// Il2CppName: OnTimeEventEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::OnTimeEventEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "OnTimeEventEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::EnableCandle
// Il2CppName: EnableCandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)(bool)>(&GorillaTagScripts::MenorahCandle::EnableCandle)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "EnableCandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::CandleShouldBeVisible
// Il2CppName: CandleShouldBeVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::CandleShouldBeVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "CandleShouldBeVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::EnableFlame
// Il2CppName: EnableFlame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)(bool)>(&GorillaTagScripts::MenorahCandle::EnableFlame)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "EnableFlame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::ShouldLightCandle
// Il2CppName: ShouldLightCandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::ShouldLightCandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "ShouldLightCandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::ShouldSnuffCandle
// Il2CppName: ShouldSnuffCandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::ShouldSnuffCandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "ShouldSnuffCandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::MenorahCandle::*)()>(&GorillaTagScripts::MenorahCandle::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::MenorahCandle*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::MenorahCandle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
