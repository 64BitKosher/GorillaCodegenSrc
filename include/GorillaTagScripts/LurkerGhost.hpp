// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IOnPhotonViewOwnerChange
#include "Photon/Pun/IOnPhotonViewOwnerChange.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: ShaderHashId
#include "GlobalNamespace/ShaderHashId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Skipping declaration: ghostState because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ZoneBasedObject
  class ZoneBasedObject;
  // Forward declaring type: ThrowableSetDressing
  class ThrowableSetDressing;
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`1<T0>
  template<typename T0>
  class UnityAction_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: LurkerGhost
  class LurkerGhost;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::LurkerGhost);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::LurkerGhost*, "GorillaTagScripts", "LurkerGhost");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x1AA
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.LurkerGhost
  // [TokenAttribute] Offset: FFFFFFFF
  class LurkerGhost : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IOnPhotonViewOwnerChange*/ {
    public:
    // Nested type: ::GorillaTagScripts::LurkerGhost::ghostState
    struct ghostState;
    // Nested type: ::GorillaTagScripts::LurkerGhost::$$c__DisplayClass59_0
    class $$c__DisplayClass59_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.LurkerGhost/ghostState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ghostState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ghostState
      constexpr ghostState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.LurkerGhost/ghostState patrol
      static constexpr const int patrol = 0;
      // Get static field: static public GorillaTagScripts.LurkerGhost/ghostState patrol
      static ::GorillaTagScripts::LurkerGhost::ghostState _get_patrol();
      // Set static field: static public GorillaTagScripts.LurkerGhost/ghostState patrol
      static void _set_patrol(::GorillaTagScripts::LurkerGhost::ghostState value);
      // static field const value: static public GorillaTagScripts.LurkerGhost/ghostState seek
      static constexpr const int seek = 1;
      // Get static field: static public GorillaTagScripts.LurkerGhost/ghostState seek
      static ::GorillaTagScripts::LurkerGhost::ghostState _get_seek();
      // Set static field: static public GorillaTagScripts.LurkerGhost/ghostState seek
      static void _set_seek(::GorillaTagScripts::LurkerGhost::ghostState value);
      // static field const value: static public GorillaTagScripts.LurkerGhost/ghostState charge
      static constexpr const int charge = 2;
      // Get static field: static public GorillaTagScripts.LurkerGhost/ghostState charge
      static ::GorillaTagScripts::LurkerGhost::ghostState _get_charge();
      // Set static field: static public GorillaTagScripts.LurkerGhost/ghostState charge
      static void _set_charge(::GorillaTagScripts::LurkerGhost::ghostState value);
      // static field const value: static public GorillaTagScripts.LurkerGhost/ghostState possess
      static constexpr const int possess = 3;
      // Get static field: static public GorillaTagScripts.LurkerGhost/ghostState possess
      static ::GorillaTagScripts::LurkerGhost::ghostState _get_possess();
      // Set static field: static public GorillaTagScripts.LurkerGhost/ghostState possess
      static void _set_possess(::GorillaTagScripts::LurkerGhost::ghostState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.LurkerGhost/ghostState
    #pragma pack(pop)
    static check_size<sizeof(LurkerGhost::ghostState), 0 + sizeof(int)> __GorillaTagScripts_LurkerGhost_ghostStateSizeCheck;
    static_assert(sizeof(LurkerGhost::ghostState) == 0x4);
    public:
    // public System.Single patrolSpeed
    // Size: 0x4
    // Offset: 0x28
    float patrolSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single seekSpeed
    // Size: 0x4
    // Offset: 0x2C
    float seekSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chargeSpeed
    // Size: 0x4
    // Offset: 0x30
    float chargeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cooldownDuration
    // Size: 0x4
    // Offset: 0x34
    float cooldownDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxCooldownDuration
    // Size: 0x4
    // Offset: 0x38
    float maxCooldownDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single PossessionDuration
    // Size: 0x4
    // Offset: 0x3C
    float PossessionDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sphereColliderRadius
    // Size: 0x4
    // Offset: 0x40
    float sphereColliderRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxHuntDistance
    // Size: 0x4
    // Offset: 0x44
    float maxHuntDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minCatchDistance
    // Size: 0x4
    // Offset: 0x48
    float minCatchDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxRepeatHuntDistance
    // Size: 0x4
    // Offset: 0x4C
    float maxRepeatHuntDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxRepeatHuntTimes
    // Size: 0x4
    // Offset: 0x50
    int maxRepeatHuntTimes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single tagCoolDown
    // Size: 0x4
    // Offset: 0x54
    float tagCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 SpookyMagicNumbers
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 SpookyMagicNumbers;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector4 HauntedMagicNumbers
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Vector4 HauntedMagicNumbers;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.Single hapticStrength
    // Size: 0x4
    // Offset: 0x74
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hapticDuration
    // Size: 0x4
    // Offset: 0x78
    float hapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: hapticDuration and: waypointsContainer
    char __padding15[0x4] = {};
    // public UnityEngine.GameObject waypointsContainer
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* waypointsContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private ZoneBasedObject[] waypointRegions
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::GlobalNamespace::ZoneBasedObject*> waypointRegions;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneBasedObject*>) == 0x8);
    // private ZoneBasedObject lastWaypointRegion
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::ZoneBasedObject* lastWaypointRegion;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ZoneBasedObject*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Transform> waypoints
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* waypoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Transform currentWaypoint
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* currentWaypoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Material visibleMaterial
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Material* visibleMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material scryableMaterial
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Material* scryableMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material visibleMaterialBones
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Material* visibleMaterialBones;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material scryableMaterialBones
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Material* scryableMaterialBones;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer bonesMeshRenderer
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::MeshRenderer* bonesMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip patrolAudio
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::AudioClip* patrolAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip huntAudio
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::AudioClip* huntAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip possessedAudio
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::AudioClip* possessedAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public ThrowableSetDressing scryingGlass
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::ThrowableSetDressing* scryingGlass;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableSetDressing*) == 0x8);
    // public System.Single scryingAngerAngle
    // Size: 0x4
    // Offset: 0x100
    float scryingAngerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scryingAngerDelay
    // Size: 0x4
    // Offset: 0x104
    float scryingAngerDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single seekAheadDistance
    // Size: 0x4
    // Offset: 0x108
    float seekAheadDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single seekCloseEnoughDistance
    // Size: 0x4
    // Offset: 0x10C
    float seekCloseEnoughDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single scryingAngerAfterTimestamp
    // Size: 0x4
    // Offset: 0x110
    float scryingAngerAfterTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 currentRepeatHuntTimes
    // Size: 0x4
    // Offset: 0x114
    int currentRepeatHuntTimes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Events.UnityAction`1<UnityEngine.GameObject> TriggerHauntedObjects
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Events::UnityAction_1<::UnityEngine::GameObject*>* TriggerHauntedObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_1<::UnityEngine::GameObject*>*) == 0x8);
    // private readonly System.String handLayermask
    // Size: 0x8
    // Offset: 0x120
    ::StringW handLayermask;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String bodyLayerMask
    // Size: 0x8
    // Offset: 0x128
    ::StringW bodyLayerMask;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x130
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaTagScripts.LurkerGhost/ghostState currentState
    // Size: 0x4
    // Offset: 0x134
    ::GorillaTagScripts::LurkerGhost::ghostState currentState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::LurkerGhost::ghostState) == 0x4);
    // private System.Single cooldownTimeRemaining
    // Size: 0x4
    // Offset: 0x138
    float cooldownTimeRemaining;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cooldownTimeRemaining and: possibleTargets
    char __padding43[0x4] = {};
    // private System.Collections.Generic.List`1<Photon.Realtime.Player> possibleTargets
    // Size: 0x8
    // Offset: 0x140
    ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* possibleTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*) == 0x8);
    // private Photon.Realtime.Player targetPlayer
    // Size: 0x8
    // Offset: 0x148
    ::Photon::Realtime::Player* targetPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private UnityEngine.Transform targetTransform
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single huntedPassedTime
    // Size: 0x4
    // Offset: 0x158
    float huntedPassedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 targetPosition
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion targetRotation
    // Size: 0x10
    // Offset: 0x168
    ::UnityEngine::Quaternion targetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private VRRig targetVRRig
    // Size: 0x8
    // Offset: 0x178
    ::GlobalNamespace::VRRig* targetVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private ShaderHashId _BlackAndWhite
    // Size: 0xC
    // Offset: 0x180
    ::GlobalNamespace::ShaderHashId BlackAndWhite;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ShaderHashId) == 0xC);
    // Padding between fields: BlackAndWhite and: lastHauntedVRRig
    char __padding51[0x4] = {};
    // private VRRig lastHauntedVRRig
    // Size: 0x8
    // Offset: 0x190
    ::GlobalNamespace::VRRig* lastHauntedVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Single nextTagTime
    // Size: 0x4
    // Offset: 0x198
    float nextTagTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: nextTagTime and: passingPlayer
    char __padding53[0x4] = {};
    // private Photon.Realtime.Player passingPlayer
    // Size: 0x8
    // Offset: 0x1A0
    ::Photon::Realtime::Player* passingPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Boolean hauntNeighbors
    // Size: 0x1
    // Offset: 0x1A8
    bool hauntNeighbors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hauntOnTag
    // Size: 0x1
    // Offset: 0x1A9
    bool hauntOnTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IOnPhotonViewOwnerChange
    operator ::Photon::Pun::IOnPhotonViewOwnerChange() noexcept {
      return *reinterpret_cast<::Photon::Pun::IOnPhotonViewOwnerChange*>(this);
    }
    // Get instance field reference: public System.Single patrolSpeed
    [[deprecated("Use field access instead!")]] float& dyn_patrolSpeed();
    // Get instance field reference: public System.Single seekSpeed
    [[deprecated("Use field access instead!")]] float& dyn_seekSpeed();
    // Get instance field reference: public System.Single chargeSpeed
    [[deprecated("Use field access instead!")]] float& dyn_chargeSpeed();
    // Get instance field reference: public System.Single cooldownDuration
    [[deprecated("Use field access instead!")]] float& dyn_cooldownDuration();
    // Get instance field reference: public System.Single maxCooldownDuration
    [[deprecated("Use field access instead!")]] float& dyn_maxCooldownDuration();
    // Get instance field reference: public System.Single PossessionDuration
    [[deprecated("Use field access instead!")]] float& dyn_PossessionDuration();
    // Get instance field reference: public System.Single sphereColliderRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereColliderRadius();
    // Get instance field reference: public System.Single maxHuntDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxHuntDistance();
    // Get instance field reference: public System.Single minCatchDistance
    [[deprecated("Use field access instead!")]] float& dyn_minCatchDistance();
    // Get instance field reference: public System.Single maxRepeatHuntDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxRepeatHuntDistance();
    // Get instance field reference: public System.Int32 maxRepeatHuntTimes
    [[deprecated("Use field access instead!")]] int& dyn_maxRepeatHuntTimes();
    // Get instance field reference: public System.Single tagCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tagCoolDown();
    // Get instance field reference: public UnityEngine.Vector3 SpookyMagicNumbers
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_SpookyMagicNumbers();
    // Get instance field reference: public UnityEngine.Vector4 HauntedMagicNumbers
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_HauntedMagicNumbers();
    // Get instance field reference: public System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: public System.Single hapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_hapticDuration();
    // Get instance field reference: public UnityEngine.GameObject waypointsContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_waypointsContainer();
    // Get instance field reference: private ZoneBasedObject[] waypointRegions
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneBasedObject*>& dyn_waypointRegions();
    // Get instance field reference: private ZoneBasedObject lastWaypointRegion
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneBasedObject*& dyn_lastWaypointRegion();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> waypoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn_waypoints();
    // Get instance field reference: private UnityEngine.Transform currentWaypoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_currentWaypoint();
    // Get instance field reference: public UnityEngine.Material visibleMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_visibleMaterial();
    // Get instance field reference: public UnityEngine.Material scryableMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_scryableMaterial();
    // Get instance field reference: public UnityEngine.Material visibleMaterialBones
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_visibleMaterialBones();
    // Get instance field reference: public UnityEngine.Material scryableMaterialBones
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_scryableMaterialBones();
    // Get instance field reference: public UnityEngine.MeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_meshRenderer();
    // Get instance field reference: public UnityEngine.MeshRenderer bonesMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_bonesMeshRenderer();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip patrolAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_patrolAudio();
    // Get instance field reference: public UnityEngine.AudioClip huntAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_huntAudio();
    // Get instance field reference: public UnityEngine.AudioClip possessedAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_possessedAudio();
    // Get instance field reference: public ThrowableSetDressing scryingGlass
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableSetDressing*& dyn_scryingGlass();
    // Get instance field reference: public System.Single scryingAngerAngle
    [[deprecated("Use field access instead!")]] float& dyn_scryingAngerAngle();
    // Get instance field reference: public System.Single scryingAngerDelay
    [[deprecated("Use field access instead!")]] float& dyn_scryingAngerDelay();
    // Get instance field reference: public System.Single seekAheadDistance
    [[deprecated("Use field access instead!")]] float& dyn_seekAheadDistance();
    // Get instance field reference: public System.Single seekCloseEnoughDistance
    [[deprecated("Use field access instead!")]] float& dyn_seekCloseEnoughDistance();
    // Get instance field reference: private System.Single scryingAngerAfterTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_scryingAngerAfterTimestamp();
    // Get instance field reference: private System.Int32 currentRepeatHuntTimes
    [[deprecated("Use field access instead!")]] int& dyn_currentRepeatHuntTimes();
    // Get instance field reference: public UnityEngine.Events.UnityAction`1<UnityEngine.GameObject> TriggerHauntedObjects
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_1<::UnityEngine::GameObject*>*& dyn_TriggerHauntedObjects();
    // Get instance field reference: private readonly System.String handLayermask
    [[deprecated("Use field access instead!")]] ::StringW& dyn_handLayermask();
    // Get instance field reference: private readonly System.String bodyLayerMask
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bodyLayerMask();
    // Get instance field reference: private System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: private GorillaTagScripts.LurkerGhost/ghostState currentState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::LurkerGhost::ghostState& dyn_currentState();
    // Get instance field reference: private System.Single cooldownTimeRemaining
    [[deprecated("Use field access instead!")]] float& dyn_cooldownTimeRemaining();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Realtime.Player> possibleTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*& dyn_possibleTargets();
    // Get instance field reference: private Photon.Realtime.Player targetPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_targetPlayer();
    // Get instance field reference: private UnityEngine.Transform targetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetTransform();
    // Get instance field reference: private System.Single huntedPassedTime
    [[deprecated("Use field access instead!")]] float& dyn_huntedPassedTime();
    // Get instance field reference: private UnityEngine.Vector3 targetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetPosition();
    // Get instance field reference: private UnityEngine.Quaternion targetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_targetRotation();
    // Get instance field reference: private VRRig targetVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_targetVRRig();
    // Get instance field reference: private ShaderHashId _BlackAndWhite
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& dyn__BlackAndWhite();
    // Get instance field reference: private VRRig lastHauntedVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_lastHauntedVRRig();
    // Get instance field reference: private System.Single nextTagTime
    [[deprecated("Use field access instead!")]] float& dyn_nextTagTime();
    // Get instance field reference: private Photon.Realtime.Player passingPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_passingPlayer();
    // Get instance field reference: private System.Boolean hauntNeighbors
    [[deprecated("Use field access instead!")]] bool& dyn_hauntNeighbors();
    // Get instance field reference: private System.Boolean hauntOnTag
    [[deprecated("Use field access instead!")]] bool& dyn_hauntOnTag();
    // private System.Void Awake()
    // Offset: 0x280DEF4
    void Awake();
    // private System.Void Start()
    // Offset: 0x280DFA0
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x280E8B8
    void LateUpdate();
    // private System.Void PickNextWaypoint()
    // Offset: 0x280E014
    void PickNextWaypoint();
    // private System.Void Patrol()
    // Offset: 0x280F068
    void Patrol();
    // private System.Void PlaySound(UnityEngine.AudioClip clip, System.Boolean loop)
    // Offset: 0x280F310
    void PlaySound(::UnityEngine::AudioClip* clip, bool loop);
    // private System.Boolean PickPlayer(System.Single maxDistance)
    // Offset: 0x280F438
    bool PickPlayer(float maxDistance);
    // private System.Void PickPlayer(Photon.Realtime.Player player)
    // Offset: 0x280F85C
    void PickPlayer(::Photon::Realtime::Player* player);
    // private System.Void SeekPlayer()
    // Offset: 0x280FA88
    void SeekPlayer();
    // private System.Void ChargeAtPlayer()
    // Offset: 0x280FE4C
    void ChargeAtPlayer();
    // private System.Void UpdateGhostVisibility()
    // Offset: 0x280EF68
    void UpdateGhostVisibility();
    // private System.Void HauntObjects()
    // Offset: 0x28100E0
    void HauntObjects();
    // private System.Void ChangeState(GorillaTagScripts.LurkerGhost/ghostState newState)
    // Offset: 0x280E5B4
    void ChangeState(::GorillaTagScripts::LurkerGhost::ghostState newState);
    // private System.Void OnDestroy()
    // Offset: 0x2810270
    void OnDestroy();
    // private System.Void UpdateState()
    // Offset: 0x280E8D0
    void UpdateState();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2810280
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0x28106C8
    void Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
    // public System.Void .ctor()
    // Offset: 0x281074C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LurkerGhost* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::LurkerGhost::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LurkerGhost*, creationType>()));
    }
  }; // GorillaTagScripts.LurkerGhost
  #pragma pack(pop)
  static check_size<sizeof(LurkerGhost), 425 + sizeof(bool)> __GorillaTagScripts_LurkerGhostSizeCheck;
  static_assert(sizeof(LurkerGhost) == 0x1AA);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::LurkerGhost::ghostState, "GorillaTagScripts", "LurkerGhost/ghostState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::PickNextWaypoint
// Il2CppName: PickNextWaypoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::PickNextWaypoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "PickNextWaypoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::Patrol
// Il2CppName: Patrol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::Patrol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "Patrol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::PlaySound
// Il2CppName: PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)(::UnityEngine::AudioClip*, bool)>(&GorillaTagScripts::LurkerGhost::PlaySound)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, loop});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::PickPlayer
// Il2CppName: PickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::LurkerGhost::*)(float)>(&GorillaTagScripts::LurkerGhost::PickPlayer)> {
  static const MethodInfo* get() {
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "PickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxDistance});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::PickPlayer
// Il2CppName: PickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::LurkerGhost::PickPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "PickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::SeekPlayer
// Il2CppName: SeekPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::SeekPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "SeekPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::ChargeAtPlayer
// Il2CppName: ChargeAtPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::ChargeAtPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "ChargeAtPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::UpdateGhostVisibility
// Il2CppName: UpdateGhostVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::UpdateGhostVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "UpdateGhostVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::HauntObjects
// Il2CppName: HauntObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::HauntObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "HauntObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::ChangeState
// Il2CppName: ChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)(::GorillaTagScripts::LurkerGhost::ghostState)>(&GorillaTagScripts::LurkerGhost::ChangeState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "LurkerGhost/ghostState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "ChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)()>(&GorillaTagScripts::LurkerGhost::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::LurkerGhost::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange
// Il2CppName: Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::LurkerGhost::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GorillaTagScripts::LurkerGhost::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::LurkerGhost*), "Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::LurkerGhost::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
