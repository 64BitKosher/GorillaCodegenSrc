// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: SnapBounds
#include "GlobalNamespace/SnapBounds.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderPotentialPlacement
  struct BuilderPotentialPlacement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderPotentialPlacement, "GorillaTagScripts", "BuilderPotentialPlacement");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x68
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTagScripts.BuilderPotentialPlacement
  // [TokenAttribute] Offset: FFFFFFFF
  struct BuilderPotentialPlacement/*, public ::System::ValueType*/ {
    public:
    public:
    // public BuilderPiece attachPiece
    // Size: 0x8
    // Offset: 0x0
    ::GlobalNamespace::BuilderPiece* attachPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public BuilderPiece parentPiece
    // Size: 0x8
    // Offset: 0x8
    ::GlobalNamespace::BuilderPiece* parentPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // public System.Int32 attachIndex
    // Size: 0x4
    // Offset: 0x10
    int attachIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 parentAttachIndex
    // Size: 0x4
    // Offset: 0x14
    int parentAttachIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 localPosition
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion localRotation
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Quaternion localRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 attachPlaneNormal
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 attachPlaneNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single attachDistance
    // Size: 0x4
    // Offset: 0x40
    float attachDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single score
    // Size: 0x4
    // Offset: 0x44
    float score;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SnapBounds attachBounds
    // Size: 0x10
    // Offset: 0x48
    ::GlobalNamespace::SnapBounds attachBounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
    // public SnapBounds parentAttachBounds
    // Size: 0x10
    // Offset: 0x58
    ::GlobalNamespace::SnapBounds parentAttachBounds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
    public:
    // Creating value type constructor for type: BuilderPotentialPlacement
    constexpr BuilderPotentialPlacement(::GlobalNamespace::BuilderPiece* attachPiece_ = {}, ::GlobalNamespace::BuilderPiece* parentPiece_ = {}, int attachIndex_ = {}, int parentAttachIndex_ = {}, ::UnityEngine::Vector3 localPosition_ = {}, ::UnityEngine::Quaternion localRotation_ = {}, ::UnityEngine::Vector3 attachPlaneNormal_ = {}, float attachDistance_ = {}, float score_ = {}, ::GlobalNamespace::SnapBounds attachBounds_ = {}, ::GlobalNamespace::SnapBounds parentAttachBounds_ = {}) noexcept : attachPiece{attachPiece_}, parentPiece{parentPiece_}, attachIndex{attachIndex_}, parentAttachIndex{parentAttachIndex_}, localPosition{localPosition_}, localRotation{localRotation_}, attachPlaneNormal{attachPlaneNormal_}, attachDistance{attachDistance_}, score{score_}, attachBounds{attachBounds_}, parentAttachBounds{parentAttachBounds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public BuilderPiece attachPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_attachPiece();
    // Get instance field reference: public BuilderPiece parentPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_parentPiece();
    // Get instance field reference: public System.Int32 attachIndex
    [[deprecated("Use field access instead!")]] int& dyn_attachIndex();
    // Get instance field reference: public System.Int32 parentAttachIndex
    [[deprecated("Use field access instead!")]] int& dyn_parentAttachIndex();
    // Get instance field reference: public UnityEngine.Vector3 localPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localPosition();
    // Get instance field reference: public UnityEngine.Quaternion localRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_localRotation();
    // Get instance field reference: public UnityEngine.Vector3 attachPlaneNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_attachPlaneNormal();
    // Get instance field reference: public System.Single attachDistance
    [[deprecated("Use field access instead!")]] float& dyn_attachDistance();
    // Get instance field reference: public System.Single score
    [[deprecated("Use field access instead!")]] float& dyn_score();
    // Get instance field reference: public SnapBounds attachBounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_attachBounds();
    // Get instance field reference: public SnapBounds parentAttachBounds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_parentAttachBounds();
    // public System.Void Reset()
    // Offset: 0x27F523C
    void Reset();
  }; // GorillaTagScripts.BuilderPotentialPlacement
  #pragma pack(pop)
  static check_size<sizeof(BuilderPotentialPlacement), 88 + sizeof(::GlobalNamespace::SnapBounds)> __GorillaTagScripts_BuilderPotentialPlacementSizeCheck;
  static_assert(sizeof(BuilderPotentialPlacement) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPotentialPlacement::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPotentialPlacement::*)()>(&GorillaTagScripts::BuilderPotentialPlacement::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPotentialPlacement), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
