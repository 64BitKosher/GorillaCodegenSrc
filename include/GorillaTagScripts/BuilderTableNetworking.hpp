// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderTable
  class BuilderTable;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CallLimiter
  class CallLimiter;
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
  // Forward declaring type: SnapBounds
  struct SnapBounds;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderTableNetworking
  class BuilderTableNetworking;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderTableNetworking);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTableNetworking*, "GorillaTagScripts", "BuilderTableNetworking");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderTableNetworking
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTableNetworking : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState
    class PlayerTableInitState;
    // Nested type: ::GorillaTagScripts::BuilderTableNetworking::RPC
    struct RPC;
    public:
    // public Photon.Pun.PhotonView tablePhotonView
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Pun::PhotonView* tablePhotonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private GorillaTagScripts.BuilderTable currTable
    // Size: 0x8
    // Offset: 0x30
    ::GorillaTagScripts::BuilderTable* currTable;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState> masterClientTableInit
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*>* masterClientTableInit;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*>*) == 0x8);
    // private GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState localClientTableInit
    // Size: 0x8
    // Offset: 0x40
    ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* localClientTableInit;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*) == 0x8);
    // private CallLimiter[] callLimiters
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::CallLimiter*> callLimiters;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::CallLimiter*>) == 0x8);
    public:
    // Get static field: static public GorillaTagScripts.BuilderTableNetworking instance
    static ::GorillaTagScripts::BuilderTableNetworking* _get_instance();
    // Set static field: static public GorillaTagScripts.BuilderTableNetworking instance
    static void _set_instance(::GorillaTagScripts::BuilderTableNetworking* value);
    // static field const value: static private System.Int32 MAX_TABLE_BYTES
    static constexpr const int MAX_TABLE_BYTES = 1048576;
    // Get static field: static private System.Int32 MAX_TABLE_BYTES
    static int _get_MAX_TABLE_BYTES();
    // Set static field: static private System.Int32 MAX_TABLE_BYTES
    static void _set_MAX_TABLE_BYTES(int value);
    // static field const value: static private System.Int32 MAX_TABLE_CHUNK_BYTES
    static constexpr const int MAX_TABLE_CHUNK_BYTES = 1000;
    // Get static field: static private System.Int32 MAX_TABLE_CHUNK_BYTES
    static int _get_MAX_TABLE_CHUNK_BYTES();
    // Set static field: static private System.Int32 MAX_TABLE_CHUNK_BYTES
    static void _set_MAX_TABLE_CHUNK_BYTES(int value);
    // static field const value: static private System.Single DELAY_CLIENT_TABLE_CREATION_TIME
    static constexpr const float DELAY_CLIENT_TABLE_CREATION_TIME = 1;
    // Get static field: static private System.Single DELAY_CLIENT_TABLE_CREATION_TIME
    static float _get_DELAY_CLIENT_TABLE_CREATION_TIME();
    // Set static field: static private System.Single DELAY_CLIENT_TABLE_CREATION_TIME
    static void _set_DELAY_CLIENT_TABLE_CREATION_TIME(float value);
    // static field const value: static private System.Int32 PIECE_SYNC_BYTES
    static constexpr const int PIECE_SYNC_BYTES = 128;
    // Get static field: static private System.Int32 PIECE_SYNC_BYTES
    static int _get_PIECE_SYNC_BYTES();
    // Set static field: static private System.Int32 PIECE_SYNC_BYTES
    static void _set_PIECE_SYNC_BYTES(int value);
    // Get instance field reference: public Photon.Pun.PhotonView tablePhotonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_tablePhotonView();
    // Get instance field reference: private GorillaTagScripts.BuilderTable currTable
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable*& dyn_currTable();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState> masterClientTableInit
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*>*& dyn_masterClientTableInit();
    // Get instance field reference: private GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState localClientTableInit
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*& dyn_localClientTableInit();
    // Get instance field reference: private CallLimiter[] callLimiters
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CallLimiter*>& dyn_callLimiters();
    // private System.Void Awake()
    // Offset: 0x28004D4
    void Awake();
    // public System.Void SetTable(GorillaTagScripts.BuilderTable table)
    // Offset: 0x2800AA8
    void SetTable(::GorillaTagScripts::BuilderTable* table);
    // private GorillaTagScripts.BuilderTable GetTable()
    // Offset: 0x2800AB0
    ::GorillaTagScripts::BuilderTable* GetTable();
    // public GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState GetLocalTableInit()
    // Offset: 0x2800AB8
    ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* GetLocalTableInit();
    // private System.Void Update()
    // Offset: 0x2800E8C
    void Update();
    // public System.Void PlayerEnterBuilder()
    // Offset: 0x27F636C
    void PlayerEnterBuilder();
    // public System.Void PlayerEnterBuilderRPC(Photon.Realtime.Player player, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801044
    void PlayerEnterBuilderRPC(::Photon::Realtime::Player* player, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PlayerExitBuilder()
    // Offset: 0x27F6538
    void PlayerExitBuilder();
    // public System.Void PlayerExitBuilderRPC(Photon.Realtime.Player player, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801214
    void PlayerExitBuilderRPC(::Photon::Realtime::Player* player, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Boolean IsPrivateMasterClient()
    // Offset: 0x27F647C
    bool IsPrivateMasterClient();
    // private System.Void UpdateNewPlayerInit()
    // Offset: 0x2800EF8
    void UpdateNewPlayerInit();
    // private System.Void StartCreatingSerializedTable(Photon.Realtime.Player newPlayer)
    // Offset: 0x280132C
    void StartCreatingSerializedTable(::Photon::Realtime::Player* newPlayer);
    // public System.Void StartBuildTableRPC(System.Int32 totalBytes, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801528
    void StartBuildTableRPC(int totalBytes, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestTableDataRPC(Photon.Realtime.Player requestingPlayer, System.Int32 offset, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28017E0
    void RequestTableDataRPC(::Photon::Realtime::Player* requestingPlayer, int offset, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void SendTableDataRPC(System.Int32 numBytes, System.Byte[] bytes, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801A34
    void SendTableDataRPC(int numBytes, ::ArrayW<uint8_t> bytes, ::Photon::Pun::PhotonMessageInfo info);
    // private GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState CreatePlayerTableInit(Photon.Realtime.Player player)
    // Offset: 0x2801CE0
    ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* CreatePlayerTableInit(::Photon::Realtime::Player* player);
    // private System.Void CreateSerializedTableForNewPlayerInit(Photon.Realtime.Player newPlayer)
    // Offset: 0x28011F4
    void CreateSerializedTableForNewPlayerInit(::Photon::Realtime::Player* newPlayer);
    // private System.Void DestroyPlayerTableInit(Photon.Realtime.Player player)
    // Offset: 0x2800CB4
    void DestroyPlayerTableInit(::Photon::Realtime::Player* player);
    // private GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState GetPlayerTableInit(Photon.Realtime.Player player)
    // Offset: 0x2801464
    ::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* GetPlayerTableInit(::Photon::Realtime::Player* player);
    // private System.Boolean ValidateMasterClientIsReady()
    // Offset: 0x28019B8
    bool ValidateMasterClientIsReady();
    // private System.Boolean ValidateCallLimits(GorillaTagScripts.BuilderTableNetworking/RPC rpcCall, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801198
    bool ValidateCallLimits(::GorillaTagScripts::BuilderTableNetworking::RPC rpcCall, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestPlacePiece(BuilderPiece piece, BuilderPiece attachPiece, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, BuilderPiece parentPiece, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds)
    // Offset: 0x27FB528
    void RequestPlacePiece(::GlobalNamespace::BuilderPiece* piece, ::GlobalNamespace::BuilderPiece* attachPiece, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::GlobalNamespace::BuilderPiece* parentPiece, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds);
    // public System.Void RequestPlacePieceRPC(System.Int32 pieceId, System.Int32 attachPieceId, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Int32 parentPieceId, System.Int32 attachIndex, System.Int32 attachBoundsMinX, System.Int32 attachBoundsMinY, System.Int32 attachBoundsMaxX, System.Int32 attachBoundsMaxY, System.Int32 parentAttachIndex, System.Int32 parentAttachBoundsMinX, System.Int32 parentAttachBoundsMinY, System.Int32 parentAttachBoundsMaxX, System.Int32 parentAttachBoundsMaxY, Photon.Realtime.Player placedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2801E90
    void RequestPlacePieceRPC(int pieceId, int attachPieceId, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, int parentPieceId, int attachIndex, int attachBoundsMinX, int attachBoundsMinY, int attachBoundsMaxX, int attachBoundsMaxY, int parentAttachIndex, int parentAttachBoundsMinX, int parentAttachBoundsMinY, int parentAttachBoundsMaxX, int parentAttachBoundsMaxY, ::Photon::Realtime::Player* placedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PiecePlacedRPC(System.Int32 pieceId, System.Int32 attachPieceId, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Int32 parentPieceId, System.Int32 attachIndex, System.Int32 attachBoundsMinX, System.Int32 attachBoundsMinY, System.Int32 attachBoundsMaxX, System.Int32 attachBoundsMaxY, System.Int32 parentAttachIndex, System.Int32 parentAttachBoundsMinX, System.Int32 parentAttachBoundsMinY, System.Int32 parentAttachBoundsMaxX, System.Int32 parentAttachBoundsMaxY, Photon.Realtime.Player placedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2802618
    void PiecePlacedRPC(int pieceId, int attachPieceId, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, int parentPieceId, int attachIndex, int attachBoundsMinX, int attachBoundsMinY, int attachBoundsMaxX, int attachBoundsMaxY, int parentAttachIndex, int parentAttachBoundsMinX, int parentAttachBoundsMinY, int parentAttachBoundsMaxX, int parentAttachBoundsMaxY, ::Photon::Realtime::Player* placedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestGrabPiece(BuilderPiece piece, System.Boolean isLefHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation)
    // Offset: 0x27FC1E4
    void RequestGrabPiece(::GlobalNamespace::BuilderPiece* piece, bool isLefHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation);
    // public System.Void RequestGrabPieceRPC(System.Int32 pieceId, System.Boolean isLeftHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, Photon.Realtime.Player grabbedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2802800
    void RequestGrabPieceRPC(int pieceId, bool isLeftHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::Photon::Realtime::Player* grabbedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PieceGrabbedRPC(System.Int32 pieceId, System.Boolean isLeftHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, Photon.Realtime.Player grabbedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2802BE4
    void PieceGrabbedRPC(int pieceId, bool isLeftHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::Photon::Realtime::Player* grabbedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RequestDropPiece(BuilderPiece piece, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity)
    // Offset: 0x27FCC3C
    void RequestDropPiece(::GlobalNamespace::BuilderPiece* piece, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity);
    // public System.Void RequestDropPieceRPC(System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity, Photon.Realtime.Player droppedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2802D3C
    void RequestDropPieceRPC(int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity, ::Photon::Realtime::Player* droppedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void PieceDroppedRPC(System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity, Photon.Realtime.Player droppedByPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28031AC
    void PieceDroppedRPC(int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity, ::Photon::Realtime::Player* droppedByPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x2803314
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTableNetworking* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderTableNetworking::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTableNetworking*, creationType>()));
    }
    // public override System.Void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x2800AC0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player player)
    // Offset: 0x2800DA0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player player)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* player);
    // public override System.Void OnJoinedRoom()
    // Offset: 0x2800E40
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
    // public override System.Void OnLeftRoom()
    // Offset: 0x2800E68
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnLeftRoom()
    void OnLeftRoom();
  }; // GorillaTagScripts.BuilderTableNetworking
  #pragma pack(pop)
  static check_size<sizeof(BuilderTableNetworking), 72 + sizeof(::ArrayW<::GlobalNamespace::CallLimiter*>)> __GorillaTagScripts_BuilderTableNetworkingSizeCheck;
  static_assert(sizeof(BuilderTableNetworking) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::SetTable
// Il2CppName: SetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::GorillaTagScripts::BuilderTable*)>(&GorillaTagScripts::BuilderTableNetworking::SetTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "SetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::GetTable
// Il2CppName: GetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderTable* (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::GetTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "GetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::GetLocalTableInit
// Il2CppName: GetLocalTableInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::GetLocalTableInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "GetLocalTableInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerEnterBuilder
// Il2CppName: PlayerEnterBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::PlayerEnterBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PlayerEnterBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerEnterBuilderRPC
// Il2CppName: PlayerEnterBuilderRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::PlayerEnterBuilderRPC)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PlayerEnterBuilderRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerExitBuilder
// Il2CppName: PlayerExitBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::PlayerExitBuilder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PlayerExitBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerExitBuilderRPC
// Il2CppName: PlayerExitBuilderRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::PlayerExitBuilderRPC)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PlayerExitBuilderRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::IsPrivateMasterClient
// Il2CppName: IsPrivateMasterClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::IsPrivateMasterClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "IsPrivateMasterClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::UpdateNewPlayerInit
// Il2CppName: UpdateNewPlayerInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::UpdateNewPlayerInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "UpdateNewPlayerInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::StartCreatingSerializedTable
// Il2CppName: StartCreatingSerializedTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::StartCreatingSerializedTable)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "StartCreatingSerializedTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::StartBuildTableRPC
// Il2CppName: StartBuildTableRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::StartBuildTableRPC)> {
  static const MethodInfo* get() {
    static auto* totalBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "StartBuildTableRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalBytes, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestTableDataRPC
// Il2CppName: RequestTableDataRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*, int, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::RequestTableDataRPC)> {
  static const MethodInfo* get() {
    static auto* requestingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestTableDataRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestingPlayer, offset, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::SendTableDataRPC
// Il2CppName: SendTableDataRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, ::ArrayW<uint8_t>, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::SendTableDataRPC)> {
  static const MethodInfo* get() {
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "SendTableDataRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numBytes, bytes, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::CreatePlayerTableInit
// Il2CppName: CreatePlayerTableInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::CreatePlayerTableInit)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "CreatePlayerTableInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::CreateSerializedTableForNewPlayerInit
// Il2CppName: CreateSerializedTableForNewPlayerInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::CreateSerializedTableForNewPlayerInit)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "CreateSerializedTableForNewPlayerInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::DestroyPlayerTableInit
// Il2CppName: DestroyPlayerTableInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::DestroyPlayerTableInit)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "DestroyPlayerTableInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::GetPlayerTableInit
// Il2CppName: GetPlayerTableInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState* (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::GetPlayerTableInit)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "GetPlayerTableInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::ValidateMasterClientIsReady
// Il2CppName: ValidateMasterClientIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::ValidateMasterClientIsReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "ValidateMasterClientIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::ValidateCallLimits
// Il2CppName: ValidateCallLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTableNetworking::*)(::GorillaTagScripts::BuilderTableNetworking::RPC, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::ValidateCallLimits)> {
  static const MethodInfo* get() {
    static auto* rpcCall = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTableNetworking/RPC")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "ValidateCallLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rpcCall, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestPlacePiece
// Il2CppName: RequestPlacePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::GlobalNamespace::BuilderPiece*, int, ::GlobalNamespace::SnapBounds, int, ::GlobalNamespace::SnapBounds)>(&GorillaTagScripts::BuilderTableNetworking::RequestPlacePiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* attachPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestPlacePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, attachPiece, localPosition, localRotation, parentPiece, attachIndex, attachBounds, parentAttachIndex, parentAttachBounds});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestPlacePieceRPC
// Il2CppName: RequestPlacePieceRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, int, int, int, int, int, int, int, int, int, int, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::RequestPlacePieceRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* placedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestPlacePieceRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachPieceId, localPosition, localRotation, parentPieceId, attachIndex, attachBoundsMinX, attachBoundsMinY, attachBoundsMaxX, attachBoundsMaxY, parentAttachIndex, parentAttachBoundsMinX, parentAttachBoundsMinY, parentAttachBoundsMaxX, parentAttachBoundsMaxY, placedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PiecePlacedRPC
// Il2CppName: PiecePlacedRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, int, int, int, int, int, int, int, int, int, int, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::PiecePlacedRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* placedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PiecePlacedRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachPieceId, localPosition, localRotation, parentPieceId, attachIndex, attachBoundsMinX, attachBoundsMinY, attachBoundsMaxX, attachBoundsMaxY, parentAttachIndex, parentAttachBoundsMinX, parentAttachBoundsMinY, parentAttachBoundsMaxX, parentAttachBoundsMaxY, placedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestGrabPiece
// Il2CppName: RequestGrabPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::GlobalNamespace::BuilderPiece*, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GorillaTagScripts::BuilderTableNetworking::RequestGrabPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* isLefHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestGrabPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, isLefHand, localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestGrabPieceRPC
// Il2CppName: RequestGrabPieceRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::RequestGrabPieceRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* grabbedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestGrabPieceRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, isLeftHand, localPosition, localRotation, grabbedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PieceGrabbedRPC
// Il2CppName: PieceGrabbedRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::PieceGrabbedRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* grabbedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PieceGrabbedRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, isLeftHand, localPosition, localRotation, grabbedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestDropPiece
// Il2CppName: RequestDropPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaTagScripts::BuilderTableNetworking::RequestDropPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestDropPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, position, rotation, velocity, angVelocity});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::RequestDropPieceRPC
// Il2CppName: RequestDropPieceRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::RequestDropPieceRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* droppedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "RequestDropPieceRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, position, rotation, velocity, angVelocity, droppedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PieceDroppedRPC
// Il2CppName: PieceDroppedRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::BuilderTableNetworking::PieceDroppedRPC)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* droppedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "PieceDroppedRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, position, rotation, velocity, angVelocity, droppedByPlayer, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTableNetworking::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::*)()>(&GorillaTagScripts::BuilderTableNetworking::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
