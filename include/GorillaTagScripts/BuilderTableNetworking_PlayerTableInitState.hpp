// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTagScripts.BuilderTableNetworking
#include "GorillaTagScripts/BuilderTableNetworking.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*, "GorillaTagScripts", "BuilderTableNetworking/PlayerTableInitState");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTableNetworking::PlayerTableInitState : public ::Il2CppObject {
    public:
    public:
    // public Photon.Realtime.Player player
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* player;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Int32 numSerializedBytes
    // Size: 0x4
    // Offset: 0x18
    int numSerializedBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalSerializedBytes
    // Size: 0x4
    // Offset: 0x1C
    int totalSerializedBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Byte[] serializedTableState
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> serializedTableState;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Byte[] chunk
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> chunk;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Single waitForInitTimeRemaining
    // Size: 0x4
    // Offset: 0x30
    float waitForInitTimeRemaining;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Photon.Realtime.Player player
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_player();
    // Get instance field reference: public System.Int32 numSerializedBytes
    [[deprecated("Use field access instead!")]] int& dyn_numSerializedBytes();
    // Get instance field reference: public System.Int32 totalSerializedBytes
    [[deprecated("Use field access instead!")]] int& dyn_totalSerializedBytes();
    // Get instance field reference: public System.Byte[] serializedTableState
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_serializedTableState();
    // Get instance field reference: public System.Byte[] chunk
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_chunk();
    // Get instance field reference: public System.Single waitForInitTimeRemaining
    [[deprecated("Use field access instead!")]] float& dyn_waitForInitTimeRemaining();
    // public System.Void .ctor()
    // Offset: 0x2800A10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTableNetworking::PlayerTableInitState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTableNetworking::PlayerTableInitState*, creationType>()));
    }
    // public System.Void Reset()
    // Offset: 0x2800D7C
    void Reset();
  }; // GorillaTagScripts.BuilderTableNetworking/PlayerTableInitState
  #pragma pack(pop)
  static check_size<sizeof(BuilderTableNetworking::PlayerTableInitState), 48 + sizeof(float)> __GorillaTagScripts_BuilderTableNetworking_PlayerTableInitStateSizeCheck;
  static_assert(sizeof(BuilderTableNetworking::PlayerTableInitState) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState::*)()>(&GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableNetworking::PlayerTableInitState*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
