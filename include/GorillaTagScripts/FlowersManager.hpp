// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: Flower
  class Flower;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectileHitNotifier
  class SlingshotProjectileHitNotifier;
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: FlowersManager
  class FlowersManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::FlowersManager);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::FlowersManager*, "GorillaTagScripts", "FlowersManager");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.FlowersManager
  // [TokenAttribute] Offset: FFFFFFFF
  class FlowersManager : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    // Nested type: ::GorillaTagScripts::FlowersManager::FlowersInZone
    class FlowersInZone;
    public:
    // public System.Collections.Generic.List`1<GorillaTagScripts.FlowersManager/FlowersInZone> sections
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GorillaTagScripts::FlowersManager::FlowersInZone*>* sections;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::FlowersManager::FlowersInZone*>*) == 0x8);
    // public System.Int32 flowersToCheck
    // Size: 0x4
    // Offset: 0x30
    int flowersToCheck;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 flowerCheckIndex
    // Size: 0x4
    // Offset: 0x34
    int flowerCheckIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.List`1<GorillaTagScripts.Flower> allFlowers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>* allFlowers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>*) == 0x8);
    // private SlingshotProjectileHitNotifier[] hitNotifiers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::SlingshotProjectileHitNotifier*> hitNotifiers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SlingshotProjectileHitNotifier*>) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,System.Collections.Generic.List`1<GorillaTagScripts.Flower>> sectionToFlowersDict
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>*>* sectionToFlowersDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,GTZone> sectionToZonesDict
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GTZone>* sectionToZonesDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GTZone>*) == 0x8);
    // private System.Boolean hasBeenSerialized
    // Size: 0x1
    // Offset: 0x58
    bool hasBeenSerialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get static field: static private GorillaTagScripts.FlowersManager <Instance>k__BackingField
    static ::GorillaTagScripts::FlowersManager* _get_$Instance$k__BackingField();
    // Set static field: static private GorillaTagScripts.FlowersManager <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::GorillaTagScripts::FlowersManager* value);
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.FlowersManager/FlowersInZone> sections
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::FlowersManager::FlowersInZone*>*& dyn_sections();
    // Get instance field reference: public System.Int32 flowersToCheck
    [[deprecated("Use field access instead!")]] int& dyn_flowersToCheck();
    // Get instance field reference: public System.Int32 flowerCheckIndex
    [[deprecated("Use field access instead!")]] int& dyn_flowerCheckIndex();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaTagScripts.Flower> allFlowers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>*& dyn_allFlowers();
    // Get instance field reference: private SlingshotProjectileHitNotifier[] hitNotifiers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SlingshotProjectileHitNotifier*>& dyn_hitNotifiers();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,System.Collections.Generic.List`1<GorillaTagScripts.Flower>> sectionToFlowersDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::System::Collections::Generic::List_1<::GorillaTagScripts::Flower*>*>*& dyn_sectionToFlowersDict();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,GTZone> sectionToZonesDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GTZone>*& dyn_sectionToZonesDict();
    // Get instance field reference: private System.Boolean hasBeenSerialized
    [[deprecated("Use field access instead!")]] bool& dyn_hasBeenSerialized();
    // static public GorillaTagScripts.FlowersManager get_Instance()
    // Offset: 0x2806E58
    static ::GorillaTagScripts::FlowersManager* get_Instance();
    // static private System.Void set_Instance(GorillaTagScripts.FlowersManager value)
    // Offset: 0x2806EA0
    static void set_Instance(::GorillaTagScripts::FlowersManager* value);
    // private System.Void Awake()
    // Offset: 0x2806EF8
    void Awake();
    // private System.Void Start()
    // Offset: 0x280742C
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x280764C
    void OnDestroy();
    // private System.Void ProjectileHitReceiver(SlingshotProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x2807860
    void ProjectileHitReceiver(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider);
    // private System.Void WaterFlowers(UnityEngine.Collider collider)
    // Offset: 0x28078E4
    void WaterFlowers(::UnityEngine::Collider* collider);
    // private System.Void HandleOnZoneChanged()
    // Offset: 0x2807B08
    void HandleOnZoneChanged();
    // public System.Int32 GetHealthyFlowersInZoneCount(GTZone zone)
    // Offset: 0x2807E10
    int GetHealthyFlowersInZoneCount(::GlobalNamespace::GTZone zone);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28080F0
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void Update()
    // Offset: 0x28083D4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x280847C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlowersManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::FlowersManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlowersManager*, creationType>()));
    }
  }; // GorillaTagScripts.FlowersManager
  #pragma pack(pop)
  static check_size<sizeof(FlowersManager), 88 + sizeof(bool)> __GorillaTagScripts_FlowersManagerSizeCheck;
  static_assert(sizeof(FlowersManager) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::FlowersManager* (*)()>(&GorillaTagScripts::FlowersManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTagScripts::FlowersManager*)>(&GorillaTagScripts::FlowersManager::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "FlowersManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)()>(&GorillaTagScripts::FlowersManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)()>(&GorillaTagScripts::FlowersManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)()>(&GorillaTagScripts::FlowersManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::ProjectileHitReceiver
// Il2CppName: ProjectileHitReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GorillaTagScripts::FlowersManager::ProjectileHitReceiver)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "ProjectileHitReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::WaterFlowers
// Il2CppName: WaterFlowers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::FlowersManager::WaterFlowers)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "WaterFlowers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::HandleOnZoneChanged
// Il2CppName: HandleOnZoneChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)()>(&GorillaTagScripts::FlowersManager::HandleOnZoneChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "HandleOnZoneChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::GetHealthyFlowersInZoneCount
// Il2CppName: GetHealthyFlowersInZoneCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::FlowersManager::*)(::GlobalNamespace::GTZone)>(&GorillaTagScripts::FlowersManager::GetHealthyFlowersInZoneCount)> {
  static const MethodInfo* get() {
    static auto* zone = &::il2cpp_utils::GetClassFromName("", "GTZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "GetHealthyFlowersInZoneCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zone});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FlowersManager::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FlowersManager::*)()>(&GorillaTagScripts::FlowersManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FlowersManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FlowersManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
