// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderAttachPoint
  class BuilderAttachPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderAttachPoint);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderAttachPoint*, "GorillaTagScripts", "BuilderAttachPoint");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderAttachPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderAttachPoint : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform center
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_center();
    // private System.Void Awake()
    // Offset: 0x27F1CB4
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x27F1D50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderAttachPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderAttachPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderAttachPoint*, creationType>()));
    }
  }; // GorillaTagScripts.BuilderAttachPoint
  #pragma pack(pop)
  static check_size<sizeof(BuilderAttachPoint), 32 + sizeof(::UnityEngine::Transform*)> __GorillaTagScripts_BuilderAttachPointSizeCheck;
  static_assert(sizeof(BuilderAttachPoint) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderAttachPoint::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderAttachPoint::*)()>(&GorillaTagScripts::BuilderAttachPoint::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderAttachPoint*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderAttachPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
