// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderOptionButton
  class BuilderOptionButton;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderFactory
  class BuilderFactory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderFactory);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderFactory*, "GorillaTagScripts", "BuilderFactory");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderFactory
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderFactory : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform spawnLocation
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* spawnLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public TMPro.TextMeshPro itemLabel
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshPro* itemLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> pieceTypes
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<int>* pieceTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> itemList
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* itemList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPiece> pieceList
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* pieceList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton buildItemButton
    // Size: 0x8
    // Offset: 0x48
    ::GorillaTagScripts::BuilderOptionButton* buildItemButton;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton prevItemButton
    // Size: 0x8
    // Offset: 0x50
    ::GorillaTagScripts::BuilderOptionButton* prevItemButton;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton nextItemButton
    // Size: 0x8
    // Offset: 0x58
    ::GorillaTagScripts::BuilderOptionButton* nextItemButton;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip buildPieceSound
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioClip* buildPieceSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.Transform previewMarker
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* previewMarker;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private BuilderPiece previewPiece
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::BuilderPiece* previewPiece;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderPiece*) == 0x8);
    // private System.Int32 currPieceTypeIndex
    // Size: 0x4
    // Offset: 0x80
    int currPieceTypeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currPieceTypeIndex and: pieceTypeToIndex
    char __padding12[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pieceTypeToIndex
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Dictionary_2<int, int>* pieceTypeToIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x90
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Transform spawnLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_spawnLocation();
    // Get instance field reference: public TMPro.TextMeshPro itemLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn_itemLabel();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> pieceTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_pieceTypes();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> itemList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_itemList();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> pieceList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_pieceList();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton buildItemButton
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_buildItemButton();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton prevItemButton
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_prevItemButton();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton nextItemButton
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_nextItemButton();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip buildPieceSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_buildPieceSound();
    // Get instance field reference: public UnityEngine.Transform previewMarker
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_previewMarker();
    // Get instance field reference: private BuilderPiece previewPiece
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece*& dyn_previewPiece();
    // Get instance field reference: private System.Int32 currPieceTypeIndex
    [[deprecated("Use field access instead!")]] int& dyn_currPieceTypeIndex();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> pieceTypeToIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_pieceTypeToIndex();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // private System.Void Awake()
    // Offset: 0x27F1D58
    void Awake();
    // public System.Void InitIfNeeded()
    // Offset: 0x27F1D5C
    void InitIfNeeded();
    // public System.Void Setup()
    // Offset: 0x27F1EE4
    void Setup();
    // public BuilderPiece GetPiecePrefab(System.Int32 pieceType)
    // Offset: 0x27F230C
    ::GlobalNamespace::BuilderPiece* GetPiecePrefab(int pieceType);
    // public System.Void OnBuildItem(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27F2484
    void OnBuildItem(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void OnPrevItem(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27F24EC
    void OnPrevItem(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void OnNextItem(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27F2560
    void OnNextItem(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void RefreshUI()
    // Offset: 0x27F209C
    void RefreshUI();
    // public System.Void CreateRandomPiece()
    // Offset: 0x27F25D4
    void CreateRandomPiece();
    // public System.Void .ctor()
    // Offset: 0x27F263C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderFactory* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderFactory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderFactory*, creationType>()));
    }
  }; // GorillaTagScripts.BuilderFactory
  #pragma pack(pop)
  static check_size<sizeof(BuilderFactory), 144 + sizeof(bool)> __GorillaTagScripts_BuilderFactorySizeCheck;
  static_assert(sizeof(BuilderFactory) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)()>(&GorillaTagScripts::BuilderFactory::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)()>(&GorillaTagScripts::BuilderFactory::InitIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)()>(&GorillaTagScripts::BuilderFactory::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::GetPiecePrefab
// Il2CppName: GetPiecePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (GorillaTagScripts::BuilderFactory::*)(int)>(&GorillaTagScripts::BuilderFactory::GetPiecePrefab)> {
  static const MethodInfo* get() {
    static auto* pieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "GetPiecePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceType});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::OnBuildItem
// Il2CppName: OnBuildItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderFactory::OnBuildItem)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "OnBuildItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::OnPrevItem
// Il2CppName: OnPrevItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderFactory::OnPrevItem)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "OnPrevItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::OnNextItem
// Il2CppName: OnNextItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderFactory::OnNextItem)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "OnNextItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::RefreshUI
// Il2CppName: RefreshUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)()>(&GorillaTagScripts::BuilderFactory::RefreshUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "RefreshUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::CreateRandomPiece
// Il2CppName: CreateRandomPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderFactory::*)()>(&GorillaTagScripts::BuilderFactory::CreateRandomPiece)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderFactory*), "CreateRandomPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderFactory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
