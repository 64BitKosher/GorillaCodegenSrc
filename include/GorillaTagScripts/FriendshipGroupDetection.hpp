// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: GroupJoinZone
#include "GlobalNamespace/GroupJoinZone.hpp"
// Including type: GorillaTag.GTColor/HSVRanges
#include "GorillaTag/GTColor_HSVRanges.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: FriendshipGroupDetection
  class FriendshipGroupDetection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::FriendshipGroupDetection);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::FriendshipGroupDetection*, "GorillaTagScripts", "FriendshipGroupDetection");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x10C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.FriendshipGroupDetection
  // [TokenAttribute] Offset: FFFFFFFF
  class FriendshipGroupDetection : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GorillaTagScripts::FriendshipGroupDetection::PlayerFist
    struct PlayerFist;
    // Size: 0x11
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTagScripts.FriendshipGroupDetection/PlayerFist
    // [TokenAttribute] Offset: FFFFFFFF
    struct PlayerFist/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 actorNumber
      // Size: 0x4
      // Offset: 0x0
      int actorNumber;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x4
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Boolean isLeftHand
      // Size: 0x1
      // Offset: 0x10
      bool isLeftHand;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: PlayerFist
      constexpr PlayerFist(int actorNumber_ = {}, ::UnityEngine::Vector3 position_ = {}, bool isLeftHand_ = {}) noexcept : actorNumber{actorNumber_}, position{position_}, isLeftHand{isLeftHand_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 actorNumber
      [[deprecated("Use field access instead!")]] int& dyn_actorNumber();
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public System.Boolean isLeftHand
      [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    }; // GorillaTagScripts.FriendshipGroupDetection/PlayerFist
    #pragma pack(pop)
    static check_size<sizeof(FriendshipGroupDetection::PlayerFist), 16 + sizeof(bool)> __GorillaTagScripts_FriendshipGroupDetection_PlayerFistSizeCheck;
    static_assert(sizeof(FriendshipGroupDetection::PlayerFist) == 0x11);
    public:
    // private System.Single detectionRadius
    // Size: 0x4
    // Offset: 0x28
    float detectionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single groupTime
    // Size: 0x4
    // Offset: 0x2C
    float groupTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single cooldownAfterCreatingGroup
    // Size: 0x4
    // Offset: 0x30
    float cooldownAfterCreatingGroup;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single hapticStrength
    // Size: 0x4
    // Offset: 0x34
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single hapticDuration
    // Size: 0x4
    // Offset: 0x38
    float hapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean debug
    // Size: 0x1
    // Offset: 0x3C
    bool debug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debug and: offset
    char __padding5[0x3] = {};
    // public System.Double offset
    // Size: 0x8
    // Offset: 0x40
    double offset;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Collections.Generic.List`1<System.String> myPartyMemberIDs
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* myPartyMemberIDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> myPartyMembersHash
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::HashSet_1<::StringW>* myPartyMembersHash;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Color> <myBeadColors>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Color>* myBeadColors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Color>*) == 0x8);
    // private UnityEngine.Color <myBraceletColor>k__BackingField
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color myBraceletColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 <MyBraceletSelfIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    int MyBraceletSelfIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GroupJoinZone <partyZone>k__BackingField
    // Size: 0x4
    // Offset: 0x74
    ::GlobalNamespace::GroupJoinZone partyZone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GroupJoinZone) == 0x4);
    // private System.Collections.Generic.List`1<System.Action`1<GroupJoinZone>> groupZoneCallbacks
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::System::Action_1<::GlobalNamespace::GroupJoinZone>*>* groupZoneCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Action_1<::GlobalNamespace::GroupJoinZone>*>*) == 0x8);
    // private GorillaTag.GTColor/HSVRanges braceletRandomColorHSVRanges
    // Size: 0x18
    // Offset: 0x80
    ::GorillaTag::GTColor::HSVRanges braceletRandomColorHSVRanges;
    // Field size check
    static_assert(sizeof(::GorillaTag::GTColor::HSVRanges) == 0x18);
    // public UnityEngine.GameObject friendshipBubble
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* friendshipBubble;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioClip fistBumpInterruptedAudio
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::AudioClip* fistBumpInterruptedAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.ParticleSystem particleSystem
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Collections.Generic.Queue`1<GorillaTagScripts.FriendshipGroupDetection/PlayerFist> playersToPropagateFrom
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Queue_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>* playersToPropagateFrom;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> playersInProvisionalGroup
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<int>* playersInProvisionalGroup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> provisionalGroupUsingLeftHands
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<int>* provisionalGroupUsingLeftHands;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> tempIntList
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<int>* tempIntList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Boolean amFirstProvisionalPlayer
    // Size: 0x1
    // Offset: 0xD8
    bool amFirstProvisionalPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: amFirstProvisionalPlayer and: partyMergeIDs
    char __padding23[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32[]> partyMergeIDs
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<int>>* partyMergeIDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::ArrayW<int>>*) == 0x8);
    // private System.Single groupCreateAfterTimestamp
    // Size: 0x4
    // Offset: 0xE8
    float groupCreateAfterTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single suppressPartyCreationUntilTimestamp
    // Size: 0x4
    // Offset: 0xEC
    float suppressPartyCreationUntilTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <DidJoinLeftHanded>k__BackingField
    // Size: 0x1
    // Offset: 0xF0
    bool DidJoinLeftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean WillJoinLeftHanded
    // Size: 0x1
    // Offset: 0xF1
    bool WillJoinLeftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WillJoinLeftHanded and: playersMakingFists
    char __padding28[0x6] = {};
    // private System.Collections.Generic.List`1<GorillaTagScripts.FriendshipGroupDetection/PlayerFist> playersMakingFists
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>* playersMakingFists;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>*) == 0x8);
    // private System.Text.StringBuilder debugStr
    // Size: 0x8
    // Offset: 0x100
    ::System::Text::StringBuilder* debugStr;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Single aboutToGroupJoin_CooldownUntilTimestamp
    // Size: 0x4
    // Offset: 0x108
    float aboutToGroupJoin_CooldownUntilTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private GorillaTagScripts.FriendshipGroupDetection <Instance>k__BackingField
    static ::GorillaTagScripts::FriendshipGroupDetection* _get_$Instance$k__BackingField();
    // Set static field: static private GorillaTagScripts.FriendshipGroupDetection <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::GorillaTagScripts::FriendshipGroupDetection* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userIdLookup
    static ::System::Collections::Generic::Dictionary_2<int, ::StringW>* _get_userIdLookup();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userIdLookup
    static void _set_userIdLookup(::System::Collections::Generic::Dictionary_2<int, ::StringW>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Color> tempColorLookup
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Color>* _get_tempColorLookup();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Color> tempColorLookup
    static void _set_tempColorLookup(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Color>* value);
    // Get instance field reference: private System.Single detectionRadius
    [[deprecated("Use field access instead!")]] float& dyn_detectionRadius();
    // Get instance field reference: private System.Single groupTime
    [[deprecated("Use field access instead!")]] float& dyn_groupTime();
    // Get instance field reference: private System.Single cooldownAfterCreatingGroup
    [[deprecated("Use field access instead!")]] float& dyn_cooldownAfterCreatingGroup();
    // Get instance field reference: private System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: private System.Single hapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_hapticDuration();
    // Get instance field reference: public System.Boolean debug
    [[deprecated("Use field access instead!")]] bool& dyn_debug();
    // Get instance field reference: public System.Double offset
    [[deprecated("Use field access instead!")]] double& dyn_offset();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> myPartyMemberIDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_myPartyMemberIDs();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> myPartyMembersHash
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_myPartyMembersHash();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Color> <myBeadColors>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Color>*& dyn_$myBeadColors$k__BackingField();
    // Get instance field reference: private UnityEngine.Color <myBraceletColor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$myBraceletColor$k__BackingField();
    // Get instance field reference: private System.Int32 <MyBraceletSelfIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MyBraceletSelfIndex$k__BackingField();
    // Get instance field reference: private GroupJoinZone <partyZone>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& dyn_$partyZone$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Action`1<GroupJoinZone>> groupZoneCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action_1<::GlobalNamespace::GroupJoinZone>*>*& dyn_groupZoneCallbacks();
    // Get instance field reference: private GorillaTag.GTColor/HSVRanges braceletRandomColorHSVRanges
    [[deprecated("Use field access instead!")]] ::GorillaTag::GTColor::HSVRanges& dyn_braceletRandomColorHSVRanges();
    // Get instance field reference: public UnityEngine.GameObject friendshipBubble
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_friendshipBubble();
    // Get instance field reference: public UnityEngine.AudioClip fistBumpInterruptedAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_fistBumpInterruptedAudio();
    // Get instance field reference: private UnityEngine.ParticleSystem particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleSystem();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Collections.Generic.Queue`1<GorillaTagScripts.FriendshipGroupDetection/PlayerFist> playersToPropagateFrom
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>*& dyn_playersToPropagateFrom();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> playersInProvisionalGroup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_playersInProvisionalGroup();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> provisionalGroupUsingLeftHands
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_provisionalGroupUsingLeftHands();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> tempIntList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_tempIntList();
    // Get instance field reference: private System.Boolean amFirstProvisionalPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_amFirstProvisionalPlayer();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32[]> partyMergeIDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<int>>*& dyn_partyMergeIDs();
    // Get instance field reference: private System.Single groupCreateAfterTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_groupCreateAfterTimestamp();
    // Get instance field reference: private System.Single suppressPartyCreationUntilTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_suppressPartyCreationUntilTimestamp();
    // Get instance field reference: private System.Boolean <DidJoinLeftHanded>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$DidJoinLeftHanded$k__BackingField();
    // Get instance field reference: private System.Boolean WillJoinLeftHanded
    [[deprecated("Use field access instead!")]] bool& dyn_WillJoinLeftHanded();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTagScripts.FriendshipGroupDetection/PlayerFist> playersMakingFists
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::FriendshipGroupDetection::PlayerFist>*& dyn_playersMakingFists();
    // Get instance field reference: private System.Text.StringBuilder debugStr
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_debugStr();
    // Get instance field reference: private System.Single aboutToGroupJoin_CooldownUntilTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_aboutToGroupJoin_CooldownUntilTimestamp();
    // static public GorillaTagScripts.FriendshipGroupDetection get_Instance()
    // Offset: 0x28085BC
    static ::GorillaTagScripts::FriendshipGroupDetection* get_Instance();
    // static private System.Void set_Instance(GorillaTagScripts.FriendshipGroupDetection value)
    // Offset: 0x2808614
    static void set_Instance(::GorillaTagScripts::FriendshipGroupDetection* value);
    // public System.Collections.Generic.List`1<UnityEngine.Color> get_myBeadColors()
    // Offset: 0x280867C
    ::System::Collections::Generic::List_1<::UnityEngine::Color>* get_myBeadColors();
    // private System.Void set_myBeadColors(System.Collections.Generic.List`1<UnityEngine.Color> value)
    // Offset: 0x2808684
    void set_myBeadColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* value);
    // public UnityEngine.Color get_myBraceletColor()
    // Offset: 0x280868C
    ::UnityEngine::Color get_myBraceletColor();
    // private System.Void set_myBraceletColor(UnityEngine.Color value)
    // Offset: 0x2808698
    void set_myBraceletColor(::UnityEngine::Color value);
    // public System.Int32 get_MyBraceletSelfIndex()
    // Offset: 0x28086A4
    int get_MyBraceletSelfIndex();
    // private System.Void set_MyBraceletSelfIndex(System.Int32 value)
    // Offset: 0x28086AC
    void set_MyBraceletSelfIndex(int value);
    // public System.Collections.Generic.List`1<System.String> get_PartyMemberIDs()
    // Offset: 0x28086B4
    ::System::Collections::Generic::List_1<::StringW>* get_PartyMemberIDs();
    // public System.Boolean get_IsInParty()
    // Offset: 0x28086BC
    bool get_IsInParty();
    // public GroupJoinZone get_partyZone()
    // Offset: 0x28086CC
    ::GlobalNamespace::GroupJoinZone get_partyZone();
    // private System.Void set_partyZone(GroupJoinZone value)
    // Offset: 0x28086D4
    void set_partyZone(::GlobalNamespace::GroupJoinZone value);
    // private System.Void Awake()
    // Offset: 0x28086DC
    void Awake();
    // public System.Void AddGroupZoneCallback(System.Action`1<GroupJoinZone> callback)
    // Offset: 0x2808828
    void AddGroupZoneCallback(::System::Action_1<::GlobalNamespace::GroupJoinZone>* callback);
    // public System.Void RemoveGroupZoneCallback(System.Action`1<GroupJoinZone> callback)
    // Offset: 0x28088D4
    void RemoveGroupZoneCallback(::System::Action_1<::GlobalNamespace::GroupJoinZone>* callback);
    // public System.Boolean IsInMyGroup(System.String userID)
    // Offset: 0x280892C
    bool IsInMyGroup(::StringW userID);
    // public System.Boolean get_DidJoinLeftHanded()
    // Offset: 0x280898C
    bool get_DidJoinLeftHanded();
    // private System.Void set_DidJoinLeftHanded(System.Boolean value)
    // Offset: 0x2808994
    void set_DidJoinLeftHanded(bool value);
    // private System.Void Update()
    // Offset: 0x28089A0
    void Update();
    // private System.Void UpdateProvisionalGroup(out UnityEngine.Vector3 midpoint)
    // Offset: 0x280944C
    void UpdateProvisionalGroup(ByRef<::UnityEngine::Vector3> midpoint);
    // private System.Void UpdateWarningSigns()
    // Offset: 0x280A1D4
    void UpdateWarningSigns();
    // private System.Void NotifyNoPartyToMerge(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280A6C0
    void NotifyNoPartyToMerge(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void NotifyPartyMerging(System.Int32[] memberIDs, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280A720
    void NotifyPartyMerging(::ArrayW<int> memberIDs, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void SendAboutToGroupJoin()
    // Offset: 0x280A7B0
    void SendAboutToGroupJoin();
    // private System.Void PartyMemberIsAboutToGroupJoin(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280AA00
    void PartyMemberIsAboutToGroupJoin(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void SendPartyFormedRPC(System.Int16 braceletColor, System.Int32[] memberIDs)
    // Offset: 0x2809EB4
    void SendPartyFormedRPC(int16_t braceletColor, ::ArrayW<int> memberIDs);
    // private System.Void PartyFormedSuccessfully(System.Int16 braceletColor, System.Int32[] memberIDs, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280AB0C
    void PartyFormedSuccessfully(int16_t braceletColor, ::ArrayW<int> memberIDs, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void AddPartyMembers(System.Int16 braceletColor, System.Int32[] memberIDs, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280B398
    void AddPartyMembers(int16_t braceletColor, ::ArrayW<int> memberIDs, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void SetNewParty(System.Int16 braceletColor, System.Int32[] memberIDs)
    // Offset: 0x280AF10
    void SetNewParty(int16_t braceletColor, ::ArrayW<int> memberIDs);
    // public System.Void LeaveParty()
    // Offset: 0x280BB7C
    void LeaveParty();
    // private System.Void PlayerLeftParty(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280BE74
    void PlayerLeftParty(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void SendVerifyPartyMember(Photon.Realtime.Player player)
    // Offset: 0x280BFD8
    void SendVerifyPartyMember(::Photon::Realtime::Player* player);
    // private System.Void VerifyPartyMember(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x280C0B0
    void VerifyPartyMember(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void OnPartyMembershipChanged()
    // Offset: 0x280B4D8
    void OnPartyMembershipChanged();
    // public System.Boolean IsPartyWithinCollider(GorillaFriendCollider friendCollider)
    // Offset: 0x280C1C4
    bool IsPartyWithinCollider(::GlobalNamespace::GorillaFriendCollider* friendCollider);
    // static public System.Int16 PackColor(UnityEngine.Color col)
    // Offset: 0x2809C54
    static int16_t PackColor(::UnityEngine::Color col);
    // static public UnityEngine.Color UnpackColor(System.Int16 data)
    // Offset: 0x280B444
    static ::UnityEngine::Color UnpackColor(int16_t data);
    // public System.Void .ctor()
    // Offset: 0x280C3BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FriendshipGroupDetection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::FriendshipGroupDetection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FriendshipGroupDetection*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x280C6C0
    static void _cctor();
  }; // GorillaTagScripts.FriendshipGroupDetection
  #pragma pack(pop)
  static check_size<sizeof(FriendshipGroupDetection), 264 + sizeof(float)> __GorillaTagScripts_FriendshipGroupDetectionSizeCheck;
  static_assert(sizeof(FriendshipGroupDetection) == 0x10C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::FriendshipGroupDetection::PlayerFist, "GorillaTagScripts", "FriendshipGroupDetection/PlayerFist");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::FriendshipGroupDetection* (*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTagScripts::FriendshipGroupDetection*)>(&GorillaTagScripts::FriendshipGroupDetection::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "FriendshipGroupDetection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_myBeadColors
// Il2CppName: get_myBeadColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Color>* (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_myBeadColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_myBeadColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_myBeadColors
// Il2CppName: set_myBeadColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::System::Collections::Generic::List_1<::UnityEngine::Color>*)>(&GorillaTagScripts::FriendshipGroupDetection::set_myBeadColors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_myBeadColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_myBraceletColor
// Il2CppName: get_myBraceletColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_myBraceletColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_myBraceletColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_myBraceletColor
// Il2CppName: set_myBraceletColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::UnityEngine::Color)>(&GorillaTagScripts::FriendshipGroupDetection::set_myBraceletColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_myBraceletColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_MyBraceletSelfIndex
// Il2CppName: get_MyBraceletSelfIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_MyBraceletSelfIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_MyBraceletSelfIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_MyBraceletSelfIndex
// Il2CppName: set_MyBraceletSelfIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(int)>(&GorillaTagScripts::FriendshipGroupDetection::set_MyBraceletSelfIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_MyBraceletSelfIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_PartyMemberIDs
// Il2CppName: get_PartyMemberIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_PartyMemberIDs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_PartyMemberIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_IsInParty
// Il2CppName: get_IsInParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_IsInParty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_IsInParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_partyZone
// Il2CppName: get_partyZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GroupJoinZone (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_partyZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_partyZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_partyZone
// Il2CppName: set_partyZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::GlobalNamespace::GroupJoinZone)>(&GorillaTagScripts::FriendshipGroupDetection::set_partyZone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GroupJoinZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_partyZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::AddGroupZoneCallback
// Il2CppName: AddGroupZoneCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::System::Action_1<::GlobalNamespace::GroupJoinZone>*)>(&GorillaTagScripts::FriendshipGroupDetection::AddGroupZoneCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GroupJoinZone")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "AddGroupZoneCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::RemoveGroupZoneCallback
// Il2CppName: RemoveGroupZoneCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::System::Action_1<::GlobalNamespace::GroupJoinZone>*)>(&GorillaTagScripts::FriendshipGroupDetection::RemoveGroupZoneCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GroupJoinZone")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "RemoveGroupZoneCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::IsInMyGroup
// Il2CppName: IsInMyGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::FriendshipGroupDetection::*)(::StringW)>(&GorillaTagScripts::FriendshipGroupDetection::IsInMyGroup)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "IsInMyGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::get_DidJoinLeftHanded
// Il2CppName: get_DidJoinLeftHanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::get_DidJoinLeftHanded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "get_DidJoinLeftHanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::set_DidJoinLeftHanded
// Il2CppName: set_DidJoinLeftHanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(bool)>(&GorillaTagScripts::FriendshipGroupDetection::set_DidJoinLeftHanded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "set_DidJoinLeftHanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::UpdateProvisionalGroup
// Il2CppName: UpdateProvisionalGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(ByRef<::UnityEngine::Vector3>)>(&GorillaTagScripts::FriendshipGroupDetection::UpdateProvisionalGroup)> {
  static const MethodInfo* get() {
    static auto* midpoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "UpdateProvisionalGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{midpoint});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::UpdateWarningSigns
// Il2CppName: UpdateWarningSigns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::UpdateWarningSigns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "UpdateWarningSigns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::NotifyNoPartyToMerge
// Il2CppName: NotifyNoPartyToMerge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::NotifyNoPartyToMerge)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "NotifyNoPartyToMerge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::NotifyPartyMerging
// Il2CppName: NotifyPartyMerging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::ArrayW<int>, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::NotifyPartyMerging)> {
  static const MethodInfo* get() {
    static auto* memberIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "NotifyPartyMerging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberIDs, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::SendAboutToGroupJoin
// Il2CppName: SendAboutToGroupJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::SendAboutToGroupJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "SendAboutToGroupJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::PartyMemberIsAboutToGroupJoin
// Il2CppName: PartyMemberIsAboutToGroupJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::PartyMemberIsAboutToGroupJoin)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "PartyMemberIsAboutToGroupJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::SendPartyFormedRPC
// Il2CppName: SendPartyFormedRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(int16_t, ::ArrayW<int>)>(&GorillaTagScripts::FriendshipGroupDetection::SendPartyFormedRPC)> {
  static const MethodInfo* get() {
    static auto* braceletColor = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* memberIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "SendPartyFormedRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{braceletColor, memberIDs});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::PartyFormedSuccessfully
// Il2CppName: PartyFormedSuccessfully
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(int16_t, ::ArrayW<int>, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::PartyFormedSuccessfully)> {
  static const MethodInfo* get() {
    static auto* braceletColor = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* memberIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "PartyFormedSuccessfully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{braceletColor, memberIDs, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::AddPartyMembers
// Il2CppName: AddPartyMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(int16_t, ::ArrayW<int>, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::AddPartyMembers)> {
  static const MethodInfo* get() {
    static auto* braceletColor = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* memberIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "AddPartyMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{braceletColor, memberIDs, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::SetNewParty
// Il2CppName: SetNewParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(int16_t, ::ArrayW<int>)>(&GorillaTagScripts::FriendshipGroupDetection::SetNewParty)> {
  static const MethodInfo* get() {
    static auto* braceletColor = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* memberIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "SetNewParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{braceletColor, memberIDs});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::LeaveParty
// Il2CppName: LeaveParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::LeaveParty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "LeaveParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::PlayerLeftParty
// Il2CppName: PlayerLeftParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::PlayerLeftParty)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "PlayerLeftParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::SendVerifyPartyMember
// Il2CppName: SendVerifyPartyMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::Photon::Realtime::Player*)>(&GorillaTagScripts::FriendshipGroupDetection::SendVerifyPartyMember)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "SendVerifyPartyMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::VerifyPartyMember
// Il2CppName: VerifyPartyMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::FriendshipGroupDetection::VerifyPartyMember)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "VerifyPartyMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::OnPartyMembershipChanged
// Il2CppName: OnPartyMembershipChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::FriendshipGroupDetection::*)()>(&GorillaTagScripts::FriendshipGroupDetection::OnPartyMembershipChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "OnPartyMembershipChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::IsPartyWithinCollider
// Il2CppName: IsPartyWithinCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::FriendshipGroupDetection::*)(::GlobalNamespace::GorillaFriendCollider*)>(&GorillaTagScripts::FriendshipGroupDetection::IsPartyWithinCollider)> {
  static const MethodInfo* get() {
    static auto* friendCollider = &::il2cpp_utils::GetClassFromName("", "GorillaFriendCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "IsPartyWithinCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendCollider});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::PackColor
// Il2CppName: PackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(::UnityEngine::Color)>(&GorillaTagScripts::FriendshipGroupDetection::PackColor)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "PackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::UnpackColor
// Il2CppName: UnpackColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(int16_t)>(&GorillaTagScripts::FriendshipGroupDetection::UnpackColor)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), "UnpackColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::FriendshipGroupDetection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTagScripts::FriendshipGroupDetection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::FriendshipGroupDetection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
