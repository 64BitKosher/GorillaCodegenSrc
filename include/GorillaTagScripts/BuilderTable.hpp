// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: GorillaTagScripts.BuilderPlacementStyle
#include "GorillaTagScripts/BuilderPlacementStyle.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: SnapBounds
#include "GlobalNamespace/SnapBounds.hpp"
// Including type: BuilderPiece
#include "GlobalNamespace/BuilderPiece.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Skipping declaration: BuilderCommandType because it is already included!
  // Forward declaring type: BuilderFactory
  class BuilderFactory;
  // Forward declaring type: BuilderTableData
  class BuilderTableData;
  // Forward declaring type: BuilderTableNetworking
  class BuilderTableNetworking;
  // Forward declaring type: BuilderPool
  class BuilderPool;
  // Forward declaring type: BuilderOptionButton
  class BuilderOptionButton;
  // Forward declaring type: BuilderAttachGridPlane
  class BuilderAttachGridPlane;
  // Forward declaring type: BuilderItem
  class BuilderItem;
  // Skipping declaration: TableState because it is already included!
  // Skipping declaration: BuilderCommand because it is already included!
  // Forward declaring type: BuilderPotentialPlacement
  struct BuilderPotentialPlacement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector2Int because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderRenderer
  class BuilderRenderer;
  // Forward declaring type: SizeChanger
  class SizeChanger;
  // Forward declaring type: BuilderShelf
  class BuilderShelf;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryWriter
  class BinaryWriter;
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetUserDataResult
  class GetUserDataResult;
  // Forward declaring type: GetTitleDataResult
  class GetTitleDataResult;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderTable
  class BuilderTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderTable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable*, "GorillaTagScripts", "BuilderTable");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x1B8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderTable
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTagScripts::BuilderTable::BuildPieceSpawn
    class BuildPieceSpawn;
    // Nested type: ::GorillaTagScripts::BuilderTable::BuilderCommandType
    struct BuilderCommandType;
    // Nested type: ::GorillaTagScripts::BuilderTable::TableState
    struct TableState;
    // Nested type: ::GorillaTagScripts::BuilderTable::BuilderCommand
    struct BuilderCommand;
    // Nested type: ::GorillaTagScripts::BuilderTable::SnapParams
    struct SnapParams;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.BuilderTable/BuilderCommandType
    // [TokenAttribute] Offset: FFFFFFFF
    struct BuilderCommandType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BuilderCommandType
      constexpr BuilderCommandType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Create
      static constexpr const int Create = 0;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Create
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Create();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Create
      static void _set_Create(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Place
      static constexpr const int Place = 1;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Place
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Place();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Place
      static void _set_Place(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Grab
      static constexpr const int Grab = 2;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Grab
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Grab();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Grab
      static void _set_Grab(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Drop
      static constexpr const int Drop = 3;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Drop
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Drop();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Drop
      static void _set_Drop(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Remove
      static constexpr const int Remove = 4;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Remove
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Remove();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Remove
      static void _set_Remove(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // static field const value: static public GorillaTagScripts.BuilderTable/BuilderCommandType Sync
      static constexpr const int Sync = 5;
      // Get static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Sync
      static ::GorillaTagScripts::BuilderTable::BuilderCommandType _get_Sync();
      // Set static field: static public GorillaTagScripts.BuilderTable/BuilderCommandType Sync
      static void _set_Sync(::GorillaTagScripts::BuilderTable::BuilderCommandType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.BuilderTable/BuilderCommandType
    #pragma pack(pop)
    static check_size<sizeof(BuilderTable::BuilderCommandType), 0 + sizeof(int)> __GorillaTagScripts_BuilderTable_BuilderCommandTypeSizeCheck;
    static_assert(sizeof(BuilderTable::BuilderCommandType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.BuilderTable/TableState
    // [TokenAttribute] Offset: FFFFFFFF
    struct TableState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TableState
      constexpr TableState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState WaitingForZoneAndRoom
      static constexpr const int WaitingForZoneAndRoom = 0;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState WaitingForZoneAndRoom
      static ::GorillaTagScripts::BuilderTable::TableState _get_WaitingForZoneAndRoom();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState WaitingForZoneAndRoom
      static void _set_WaitingForZoneAndRoom(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState WaitingForInitalBuild
      static constexpr const int WaitingForInitalBuild = 1;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState WaitingForInitalBuild
      static ::GorillaTagScripts::BuilderTable::TableState _get_WaitingForInitalBuild();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState WaitingForInitalBuild
      static void _set_WaitingForInitalBuild(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState ReceivingInitialBuild
      static constexpr const int ReceivingInitialBuild = 2;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState ReceivingInitialBuild
      static ::GorillaTagScripts::BuilderTable::TableState _get_ReceivingInitialBuild();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState ReceivingInitialBuild
      static void _set_ReceivingInitialBuild(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState WaitForInitialBuildMaster
      static constexpr const int WaitForInitialBuildMaster = 3;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState WaitForInitialBuildMaster
      static ::GorillaTagScripts::BuilderTable::TableState _get_WaitForInitialBuildMaster();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState WaitForInitialBuildMaster
      static void _set_WaitForInitialBuildMaster(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState WaitForMasterResync
      static constexpr const int WaitForMasterResync = 4;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState WaitForMasterResync
      static ::GorillaTagScripts::BuilderTable::TableState _get_WaitForMasterResync();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState WaitForMasterResync
      static void _set_WaitForMasterResync(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState ReceivingMasterResync
      static constexpr const int ReceivingMasterResync = 5;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState ReceivingMasterResync
      static ::GorillaTagScripts::BuilderTable::TableState _get_ReceivingMasterResync();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState ReceivingMasterResync
      static void _set_ReceivingMasterResync(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState InitialBuild
      static constexpr const int InitialBuild = 6;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState InitialBuild
      static ::GorillaTagScripts::BuilderTable::TableState _get_InitialBuild();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState InitialBuild
      static void _set_InitialBuild(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState ExecuteQueuedCommands
      static constexpr const int ExecuteQueuedCommands = 7;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState ExecuteQueuedCommands
      static ::GorillaTagScripts::BuilderTable::TableState _get_ExecuteQueuedCommands();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState ExecuteQueuedCommands
      static void _set_ExecuteQueuedCommands(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState Ready
      static constexpr const int Ready = 8;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState Ready
      static ::GorillaTagScripts::BuilderTable::TableState _get_Ready();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState Ready
      static void _set_Ready(::GorillaTagScripts::BuilderTable::TableState value);
      // static field const value: static public GorillaTagScripts.BuilderTable/TableState BadData
      static constexpr const int BadData = 9;
      // Get static field: static public GorillaTagScripts.BuilderTable/TableState BadData
      static ::GorillaTagScripts::BuilderTable::TableState _get_BadData();
      // Set static field: static public GorillaTagScripts.BuilderTable/TableState BadData
      static void _set_BadData(::GorillaTagScripts::BuilderTable::TableState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.BuilderTable/TableState
    #pragma pack(pop)
    static check_size<sizeof(BuilderTable::TableState), 0 + sizeof(int)> __GorillaTagScripts_BuilderTable_TableStateSizeCheck;
    static_assert(sizeof(BuilderTable::TableState) == 0x4);
    // Size: 0x84
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTagScripts.BuilderTable/BuilderCommand
    // [TokenAttribute] Offset: FFFFFFFF
    struct BuilderCommand/*, public ::System::ValueType*/ {
      public:
      public:
      // public GorillaTagScripts.BuilderTable/BuilderCommandType type
      // Size: 0x4
      // Offset: 0x0
      ::GorillaTagScripts::BuilderTable::BuilderCommandType type;
      // Field size check
      static_assert(sizeof(::GorillaTagScripts::BuilderTable::BuilderCommandType) == 0x4);
      // public System.Int32 pieceType
      // Size: 0x4
      // Offset: 0x4
      int pieceType;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 pieceId
      // Size: 0x4
      // Offset: 0x8
      int pieceId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 attachPieceId
      // Size: 0x4
      // Offset: 0xC
      int attachPieceId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 parentPieceId
      // Size: 0x4
      // Offset: 0x10
      int parentPieceId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 parentAttachIndex
      // Size: 0x4
      // Offset: 0x14
      int parentAttachIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 attachIndex
      // Size: 0x4
      // Offset: 0x18
      int attachIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public SnapBounds attachBounds
      // Size: 0x10
      // Offset: 0x1C
      ::GlobalNamespace::SnapBounds attachBounds;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
      // public SnapBounds parentAttachBounds
      // Size: 0x10
      // Offset: 0x2C
      ::GlobalNamespace::SnapBounds parentAttachBounds;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::SnapBounds) == 0x10);
      // public UnityEngine.Vector3 localPosition
      // Size: 0xC
      // Offset: 0x3C
      ::UnityEngine::Vector3 localPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion localRotation
      // Size: 0x10
      // Offset: 0x48
      ::UnityEngine::Quaternion localRotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public UnityEngine.Vector3 velocity
      // Size: 0xC
      // Offset: 0x58
      ::UnityEngine::Vector3 velocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 angVelocity
      // Size: 0xC
      // Offset: 0x64
      ::UnityEngine::Vector3 angVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Boolean isLeft
      // Size: 0x1
      // Offset: 0x70
      bool isLeft;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isLeft and: materialType
      char __padding13[0x3] = {};
      // public System.Int32 materialType
      // Size: 0x4
      // Offset: 0x74
      int materialType;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public Photon.Realtime.Player player
      // Size: 0x8
      // Offset: 0x78
      ::Photon::Realtime::Player* player;
      // Field size check
      static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
      // public BuilderPiece/State state
      // Size: 0x4
      // Offset: 0x80
      ::GlobalNamespace::BuilderPiece::State state;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BuilderPiece::State) == 0x4);
      public:
      // Creating value type constructor for type: BuilderCommand
      constexpr BuilderCommand(::GorillaTagScripts::BuilderTable::BuilderCommandType type_ = {}, int pieceType_ = {}, int pieceId_ = {}, int attachPieceId_ = {}, int parentPieceId_ = {}, int parentAttachIndex_ = {}, int attachIndex_ = {}, ::GlobalNamespace::SnapBounds attachBounds_ = {}, ::GlobalNamespace::SnapBounds parentAttachBounds_ = {}, ::UnityEngine::Vector3 localPosition_ = {}, ::UnityEngine::Quaternion localRotation_ = {}, ::UnityEngine::Vector3 velocity_ = {}, ::UnityEngine::Vector3 angVelocity_ = {}, bool isLeft_ = {}, int materialType_ = {}, ::Photon::Realtime::Player* player_ = {}, ::GlobalNamespace::BuilderPiece::State state_ = {}) noexcept : type{type_}, pieceType{pieceType_}, pieceId{pieceId_}, attachPieceId{attachPieceId_}, parentPieceId{parentPieceId_}, parentAttachIndex{parentAttachIndex_}, attachIndex{attachIndex_}, attachBounds{attachBounds_}, parentAttachBounds{parentAttachBounds_}, localPosition{localPosition_}, localRotation{localRotation_}, velocity{velocity_}, angVelocity{angVelocity_}, isLeft{isLeft_}, materialType{materialType_}, player{player_}, state{state_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public GorillaTagScripts.BuilderTable/BuilderCommandType type
      [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::BuilderCommandType& dyn_type();
      // Get instance field reference: public System.Int32 pieceType
      [[deprecated("Use field access instead!")]] int& dyn_pieceType();
      // Get instance field reference: public System.Int32 pieceId
      [[deprecated("Use field access instead!")]] int& dyn_pieceId();
      // Get instance field reference: public System.Int32 attachPieceId
      [[deprecated("Use field access instead!")]] int& dyn_attachPieceId();
      // Get instance field reference: public System.Int32 parentPieceId
      [[deprecated("Use field access instead!")]] int& dyn_parentPieceId();
      // Get instance field reference: public System.Int32 parentAttachIndex
      [[deprecated("Use field access instead!")]] int& dyn_parentAttachIndex();
      // Get instance field reference: public System.Int32 attachIndex
      [[deprecated("Use field access instead!")]] int& dyn_attachIndex();
      // Get instance field reference: public SnapBounds attachBounds
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_attachBounds();
      // Get instance field reference: public SnapBounds parentAttachBounds
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapBounds& dyn_parentAttachBounds();
      // Get instance field reference: public UnityEngine.Vector3 localPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_localPosition();
      // Get instance field reference: public UnityEngine.Quaternion localRotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_localRotation();
      // Get instance field reference: public UnityEngine.Vector3 velocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
      // Get instance field reference: public UnityEngine.Vector3 angVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_angVelocity();
      // Get instance field reference: public System.Boolean isLeft
      [[deprecated("Use field access instead!")]] bool& dyn_isLeft();
      // Get instance field reference: public System.Int32 materialType
      [[deprecated("Use field access instead!")]] int& dyn_materialType();
      // Get instance field reference: public Photon.Realtime.Player player
      [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_player();
      // Get instance field reference: public BuilderPiece/State state
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPiece::State& dyn_state();
    }; // GorillaTagScripts.BuilderTable/BuilderCommand
    #pragma pack(pop)
    static check_size<sizeof(BuilderTable::BuilderCommand), 128 + sizeof(::GlobalNamespace::BuilderPiece::State)> __GorillaTagScripts_BuilderTable_BuilderCommandSizeCheck;
    static_assert(sizeof(BuilderTable::BuilderCommand) == 0x84);
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTagScripts.BuilderTable/SnapParams
    // [TokenAttribute] Offset: FFFFFFFF
    struct SnapParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single minOffsetY
      // Size: 0x4
      // Offset: 0x0
      float minOffsetY;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single maxOffsetY
      // Size: 0x4
      // Offset: 0x4
      float maxOffsetY;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single maxUpDotProduct
      // Size: 0x4
      // Offset: 0x8
      float maxUpDotProduct;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single maxTwistDotProduct
      // Size: 0x4
      // Offset: 0xC
      float maxTwistDotProduct;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single snapAttachDistance
      // Size: 0x4
      // Offset: 0x10
      float snapAttachDistance;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single snapDelayTime
      // Size: 0x4
      // Offset: 0x14
      float snapDelayTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single snapDelayOffsetDist
      // Size: 0x4
      // Offset: 0x18
      float snapDelayOffsetDist;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single unSnapDelayTime
      // Size: 0x4
      // Offset: 0x1C
      float unSnapDelayTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single unSnapDelayDist
      // Size: 0x4
      // Offset: 0x20
      float unSnapDelayDist;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: SnapParams
      constexpr SnapParams(float minOffsetY_ = {}, float maxOffsetY_ = {}, float maxUpDotProduct_ = {}, float maxTwistDotProduct_ = {}, float snapAttachDistance_ = {}, float snapDelayTime_ = {}, float snapDelayOffsetDist_ = {}, float unSnapDelayTime_ = {}, float unSnapDelayDist_ = {}) noexcept : minOffsetY{minOffsetY_}, maxOffsetY{maxOffsetY_}, maxUpDotProduct{maxUpDotProduct_}, maxTwistDotProduct{maxTwistDotProduct_}, snapAttachDistance{snapAttachDistance_}, snapDelayTime{snapDelayTime_}, snapDelayOffsetDist{snapDelayOffsetDist_}, unSnapDelayTime{unSnapDelayTime_}, unSnapDelayDist{unSnapDelayDist_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single minOffsetY
      [[deprecated("Use field access instead!")]] float& dyn_minOffsetY();
      // Get instance field reference: public System.Single maxOffsetY
      [[deprecated("Use field access instead!")]] float& dyn_maxOffsetY();
      // Get instance field reference: public System.Single maxUpDotProduct
      [[deprecated("Use field access instead!")]] float& dyn_maxUpDotProduct();
      // Get instance field reference: public System.Single maxTwistDotProduct
      [[deprecated("Use field access instead!")]] float& dyn_maxTwistDotProduct();
      // Get instance field reference: public System.Single snapAttachDistance
      [[deprecated("Use field access instead!")]] float& dyn_snapAttachDistance();
      // Get instance field reference: public System.Single snapDelayTime
      [[deprecated("Use field access instead!")]] float& dyn_snapDelayTime();
      // Get instance field reference: public System.Single snapDelayOffsetDist
      [[deprecated("Use field access instead!")]] float& dyn_snapDelayOffsetDist();
      // Get instance field reference: public System.Single unSnapDelayTime
      [[deprecated("Use field access instead!")]] float& dyn_unSnapDelayTime();
      // Get instance field reference: public System.Single unSnapDelayDist
      [[deprecated("Use field access instead!")]] float& dyn_unSnapDelayDist();
    }; // GorillaTagScripts.BuilderTable/SnapParams
    #pragma pack(pop)
    static check_size<sizeof(BuilderTable::SnapParams), 32 + sizeof(float)> __GorillaTagScripts_BuilderTable_SnapParamsSizeCheck;
    static_assert(sizeof(BuilderTable::SnapParams) == 0x24);
    public:
    // public System.Collections.Generic.List`1<BuilderPiece> builderPieces
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* builderPieces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // public GorillaTagScripts.BuilderTableNetworking builderNetworking
    // Size: 0x8
    // Offset: 0x28
    ::GorillaTagScripts::BuilderTableNetworking* builderNetworking;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTableNetworking*) == 0x8);
    // public BuilderRenderer builderRenderer
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::BuilderRenderer* builderRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderRenderer*) == 0x8);
    // public GorillaTagScripts.BuilderPool builderPool
    // Size: 0x8
    // Offset: 0x38
    ::GorillaTagScripts::BuilderPool* builderPool;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderPool*) == 0x8);
    // public SizeChanger sizeChanger
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SizeChanger* sizeChanger;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SizeChanger*) == 0x8);
    // public System.Single defaultTint
    // Size: 0x4
    // Offset: 0x48
    float defaultTint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single droppedTint
    // Size: 0x4
    // Offset: 0x4C
    float droppedTint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single grabbedTint
    // Size: 0x4
    // Offset: 0x50
    float grabbedTint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shelfTint
    // Size: 0x4
    // Offset: 0x54
    float shelfTint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform tableCenter
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* tableCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform worldCenter
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* worldCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single tableToWorldScale
    // Size: 0x4
    // Offset: 0x68
    float tableToWorldScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pieceScale
    // Size: 0x4
    // Offset: 0x6C
    float pieceScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single gridSize
    // Size: 0x4
    // Offset: 0x70
    float gridSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask allPiecesMask
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::LayerMask allPiecesMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean useSnapRotation
    // Size: 0x1
    // Offset: 0x78
    bool useSnapRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSnapRotation and: usePlacementStyle
    char __padding15[0x3] = {};
    // public GorillaTagScripts.BuilderPlacementStyle usePlacementStyle
    // Size: 0x4
    // Offset: 0x7C
    ::GorillaTagScripts::BuilderPlacementStyle usePlacementStyle;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderPlacementStyle) == 0x4);
    // public System.Boolean buildInPlace
    // Size: 0x1
    // Offset: 0x80
    bool buildInPlace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: buildInPlace and: buttonSnapRotation
    char __padding17[0x7] = {};
    // public GorillaTagScripts.BuilderOptionButton buttonSnapRotation
    // Size: 0x8
    // Offset: 0x88
    ::GorillaTagScripts::BuilderOptionButton* buttonSnapRotation;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton buttonSnapPosition
    // Size: 0x8
    // Offset: 0x90
    ::GorillaTagScripts::BuilderOptionButton* buttonSnapPosition;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton buttonSaveLayout
    // Size: 0x8
    // Offset: 0x98
    ::GorillaTagScripts::BuilderOptionButton* buttonSaveLayout;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public GorillaTagScripts.BuilderOptionButton buttonClearLayout
    // Size: 0x8
    // Offset: 0xA0
    ::GorillaTagScripts::BuilderOptionButton* buttonClearLayout;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderOptionButton*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> baseGridPlanes
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* baseGridPlanes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPiece> basePieces
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* basePieces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // private System.Int32 nextPieceId
    // Size: 0x4
    // Offset: 0xB8
    int nextPieceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nextPieceId and: shelvesRoot
    char __padding24[0x4] = {};
    // public UnityEngine.GameObject shelvesRoot
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* shelvesRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderTable/BuildPieceSpawn> buildPieceSpawns
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuildPieceSpawn*>* buildPieceSpawns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuildPieceSpawn*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderShelf> shelves
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf*>* shelves;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> buildItemRoots
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* buildItemRoots;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderItem> buildItems
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderItem*>* buildItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderItem*>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderPiece> pieces
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* pieces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> builderPiecesVisited
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::HashSet_1<int>* builderPiecesVisited;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private GorillaTagScripts.BuilderTable/TableState tableState
    // Size: 0x4
    // Offset: 0xF8
    ::GorillaTagScripts::BuilderTable::TableState tableState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable::TableState) == 0x4);
    // private System.Boolean inRoom
    // Size: 0x1
    // Offset: 0xFC
    bool inRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean inBuilderZone
    // Size: 0x1
    // Offset: 0xFD
    bool inBuilderZone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inBuilderZone and: queuedBuildCommands
    char __padding34[0x2] = {};
    // private System.Collections.Generic.List`1<GorillaTagScripts.BuilderTable/BuilderCommand> queuedBuildCommands
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuilderCommand>* queuedBuildCommands;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuilderCommand>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* gridPlanes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaTagScripts.BuilderFactory> factories
    // Size: 0x8
    // Offset: 0x110
    ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderFactory*>* factories;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderFactory*>*) == 0x8);
    // private System.Boolean isSetup
    // Size: 0x1
    // Offset: 0x118
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSetup and: releaseSnapParams
    char __padding38[0x3] = {};
    // public GorillaTagScripts.BuilderTable/SnapParams releaseSnapParams
    // Size: 0x24
    // Offset: 0x11C
    ::GorillaTagScripts::BuilderTable::SnapParams releaseSnapParams;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable::SnapParams) == 0x24);
    // public GorillaTagScripts.BuilderTable/SnapParams pushSnapParams
    // Size: 0x24
    // Offset: 0x140
    ::GorillaTagScripts::BuilderTable::SnapParams pushSnapParams;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable::SnapParams) == 0x24);
    // public GorillaTagScripts.BuilderTable/SnapParams pushAndEaseParams
    // Size: 0x24
    // Offset: 0x164
    ::GorillaTagScripts::BuilderTable::SnapParams pushAndEaseParams;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable::SnapParams) == 0x24);
    // private GorillaTagScripts.BuilderTable/SnapParams currSnapParams
    // Size: 0x24
    // Offset: 0x188
    ::GorillaTagScripts::BuilderTable::SnapParams currSnapParams;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTable::SnapParams) == 0x24);
    // public System.Int32 maxPlacementChildDepth
    // Size: 0x4
    // Offset: 0x1AC
    int maxPlacementChildDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaTagScripts.BuilderTableData tableData
    // Size: 0x8
    // Offset: 0x1B0
    ::GorillaTagScripts::BuilderTableData* tableData;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderTableData*) == 0x8);
    public:
    // static field const value: static private System.Int32 INITIAL_BUILTIN_PIECE_ID
    static constexpr const int INITIAL_BUILTIN_PIECE_ID = 60000;
    // Get static field: static private System.Int32 INITIAL_BUILTIN_PIECE_ID
    static int _get_INITIAL_BUILTIN_PIECE_ID();
    // Set static field: static private System.Int32 INITIAL_BUILTIN_PIECE_ID
    static void _set_INITIAL_BUILTIN_PIECE_ID(int value);
    // static field const value: static private System.Int32 INITIAL_CREATED_PIECE_ID
    static constexpr const int INITIAL_CREATED_PIECE_ID = 5;
    // Get static field: static private System.Int32 INITIAL_CREATED_PIECE_ID
    static int _get_INITIAL_CREATED_PIECE_ID();
    // Set static field: static private System.Int32 INITIAL_CREATED_PIECE_ID
    static void _set_INITIAL_CREATED_PIECE_ID(int value);
    // Get static field: static public System.Single MAX_DROP_VELOCITY
    static float _get_MAX_DROP_VELOCITY();
    // Set static field: static public System.Single MAX_DROP_VELOCITY
    static void _set_MAX_DROP_VELOCITY(float value);
    // Get static field: static public System.Single MAX_DROP_ANG_VELOCITY
    static float _get_MAX_DROP_ANG_VELOCITY();
    // Set static field: static public System.Single MAX_DROP_ANG_VELOCITY
    static void _set_MAX_DROP_ANG_VELOCITY(float value);
    // static field const value: static private System.Single MAX_DISTANCE_FROM_CENTER
    static constexpr const float MAX_DISTANCE_FROM_CENTER = 6.5;
    // Get static field: static private System.Single MAX_DISTANCE_FROM_CENTER
    static float _get_MAX_DISTANCE_FROM_CENTER();
    // Set static field: static private System.Single MAX_DISTANCE_FROM_CENTER
    static void _set_MAX_DISTANCE_FROM_CENTER(float value);
    // static field const value: static private System.Single MAX_LOCAL_MAGNITUDE
    static constexpr const float MAX_LOCAL_MAGNITUDE = 80;
    // Get static field: static private System.Single MAX_LOCAL_MAGNITUDE
    static float _get_MAX_LOCAL_MAGNITUDE();
    // Set static field: static private System.Single MAX_LOCAL_MAGNITUDE
    static void _set_MAX_LOCAL_MAGNITUDE(float value);
    // Get static field: static public System.Int32 placedLayer
    static int _get_placedLayer();
    // Set static field: static public System.Int32 placedLayer
    static void _set_placedLayer(int value);
    // Get static field: static public System.Int32 heldLayer
    static int _get_heldLayer();
    // Set static field: static public System.Int32 heldLayer
    static void _set_heldLayer(int value);
    // Get static field: static public System.Int32 heldLayerLocal
    static int _get_heldLayerLocal();
    // Set static field: static public System.Int32 heldLayerLocal
    static void _set_heldLayerLocal(int value);
    // Get static field: static public System.Int32 droppedLayer
    static int _get_droppedLayer();
    // Set static field: static public System.Int32 droppedLayer
    static void _set_droppedLayer(int value);
    // Get static field: static public GorillaTagScripts.BuilderTable instance
    static ::GorillaTagScripts::BuilderTable* _get_instance();
    // Set static field: static public GorillaTagScripts.BuilderTable instance
    static void _set_instance(::GorillaTagScripts::BuilderTable* value);
    // Get static field: static private System.Collections.Generic.List`1<BuilderPiece> tempDeletePieces
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* _get_tempDeletePieces();
    // Set static field: static private System.Collections.Generic.List`1<BuilderPiece> tempDeletePieces
    static void _set_tempDeletePieces(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempPeiceIds
    static ::System::Collections::Generic::List_1<int>* _get_tempPeiceIds();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempPeiceIds
    static void _set_tempPeiceIds(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempParentPeiceIds
    static ::System::Collections::Generic::List_1<int>* _get_tempParentPeiceIds();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempParentPeiceIds
    static void _set_tempParentPeiceIds(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempAttachIndexes
    static ::System::Collections::Generic::List_1<int>* _get_tempAttachIndexes();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempAttachIndexes
    static void _set_tempAttachIndexes(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempParentAttachIndexes
    static ::System::Collections::Generic::List_1<int>* _get_tempParentAttachIndexes();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempParentAttachIndexes
    static void _set_tempParentAttachIndexes(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<SnapBounds> tempAttachBounds
    static ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* _get_tempAttachBounds();
    // Set static field: static private System.Collections.Generic.List`1<SnapBounds> tempAttachBounds
    static void _set_tempAttachBounds(::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* value);
    // Get static field: static private System.Collections.Generic.List`1<SnapBounds> tempParentAttachBounds
    static ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* _get_tempParentAttachBounds();
    // Set static field: static private System.Collections.Generic.List`1<SnapBounds> tempParentAttachBounds
    static void _set_tempParentAttachBounds(::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempParentActorNumbers
    static ::System::Collections::Generic::List_1<int>* _get_tempParentActorNumbers();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempParentActorNumbers
    static void _set_tempParentActorNumbers(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Boolean> tempInLeftHand
    static ::System::Collections::Generic::List_1<bool>* _get_tempInLeftHand();
    // Set static field: static private System.Collections.Generic.List`1<System.Boolean> tempInLeftHand
    static void _set_tempInLeftHand(::System::Collections::Generic::List_1<bool>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> tempMaterialTypes
    static ::System::Collections::Generic::List_1<int>* _get_tempMaterialTypes();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> tempMaterialTypes
    static void _set_tempMaterialTypes(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> tempLocalGridPlanes
    static ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* _get_tempLocalGridPlanes();
    // Set static field: static private System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> tempLocalGridPlanes
    static void _set_tempLocalGridPlanes(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* value);
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> builderPieces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_builderPieces();
    // Get instance field reference: public GorillaTagScripts.BuilderTableNetworking builderNetworking
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTableNetworking*& dyn_builderNetworking();
    // Get instance field reference: public BuilderRenderer builderRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderRenderer*& dyn_builderRenderer();
    // Get instance field reference: public GorillaTagScripts.BuilderPool builderPool
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderPool*& dyn_builderPool();
    // Get instance field reference: public SizeChanger sizeChanger
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeChanger*& dyn_sizeChanger();
    // Get instance field reference: public System.Single defaultTint
    [[deprecated("Use field access instead!")]] float& dyn_defaultTint();
    // Get instance field reference: public System.Single droppedTint
    [[deprecated("Use field access instead!")]] float& dyn_droppedTint();
    // Get instance field reference: public System.Single grabbedTint
    [[deprecated("Use field access instead!")]] float& dyn_grabbedTint();
    // Get instance field reference: public System.Single shelfTint
    [[deprecated("Use field access instead!")]] float& dyn_shelfTint();
    // Get instance field reference: public UnityEngine.Transform tableCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tableCenter();
    // Get instance field reference: public UnityEngine.Transform worldCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_worldCenter();
    // Get instance field reference: public System.Single tableToWorldScale
    [[deprecated("Use field access instead!")]] float& dyn_tableToWorldScale();
    // Get instance field reference: public System.Single pieceScale
    [[deprecated("Use field access instead!")]] float& dyn_pieceScale();
    // Get instance field reference: public System.Single gridSize
    [[deprecated("Use field access instead!")]] float& dyn_gridSize();
    // Get instance field reference: public UnityEngine.LayerMask allPiecesMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_allPiecesMask();
    // Get instance field reference: public System.Boolean useSnapRotation
    [[deprecated("Use field access instead!")]] bool& dyn_useSnapRotation();
    // Get instance field reference: public GorillaTagScripts.BuilderPlacementStyle usePlacementStyle
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderPlacementStyle& dyn_usePlacementStyle();
    // Get instance field reference: public System.Boolean buildInPlace
    [[deprecated("Use field access instead!")]] bool& dyn_buildInPlace();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton buttonSnapRotation
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_buttonSnapRotation();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton buttonSnapPosition
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_buttonSnapPosition();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton buttonSaveLayout
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_buttonSaveLayout();
    // Get instance field reference: public GorillaTagScripts.BuilderOptionButton buttonClearLayout
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderOptionButton*& dyn_buttonClearLayout();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> baseGridPlanes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*& dyn_baseGridPlanes();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> basePieces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_basePieces();
    // Get instance field reference: private System.Int32 nextPieceId
    [[deprecated("Use field access instead!")]] int& dyn_nextPieceId();
    // Get instance field reference: public UnityEngine.GameObject shelvesRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_shelvesRoot();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderTable/BuildPieceSpawn> buildPieceSpawns
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuildPieceSpawn*>*& dyn_buildPieceSpawns();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderShelf> shelves
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf*>*& dyn_shelves();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> buildItemRoots
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_buildItemRoots();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderItem> buildItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderItem*>*& dyn_buildItems();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderPiece> pieces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*& dyn_pieces();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> builderPiecesVisited
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_builderPiecesVisited();
    // Get instance field reference: private GorillaTagScripts.BuilderTable/TableState tableState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::TableState& dyn_tableState();
    // Get instance field reference: private System.Boolean inRoom
    [[deprecated("Use field access instead!")]] bool& dyn_inRoom();
    // Get instance field reference: private System.Boolean inBuilderZone
    [[deprecated("Use field access instead!")]] bool& dyn_inBuilderZone();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTagScripts.BuilderTable/BuilderCommand> queuedBuildCommands
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderTable::BuilderCommand>*& dyn_queuedBuildCommands();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*& dyn_gridPlanes();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaTagScripts.BuilderFactory> factories
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderFactory*>*& dyn_factories();
    // Get instance field reference: private System.Boolean isSetup
    [[deprecated("Use field access instead!")]] bool& dyn_isSetup();
    // Get instance field reference: public GorillaTagScripts.BuilderTable/SnapParams releaseSnapParams
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::SnapParams& dyn_releaseSnapParams();
    // Get instance field reference: public GorillaTagScripts.BuilderTable/SnapParams pushSnapParams
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::SnapParams& dyn_pushSnapParams();
    // Get instance field reference: public GorillaTagScripts.BuilderTable/SnapParams pushAndEaseParams
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::SnapParams& dyn_pushAndEaseParams();
    // Get instance field reference: private GorillaTagScripts.BuilderTable/SnapParams currSnapParams
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTable::SnapParams& dyn_currSnapParams();
    // Get instance field reference: public System.Int32 maxPlacementChildDepth
    [[deprecated("Use field access instead!")]] int& dyn_maxPlacementChildDepth();
    // Get instance field reference: private GorillaTagScripts.BuilderTableData tableData
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderTableData*& dyn_tableData();
    // private System.Void Awake()
    // Offset: 0x27F535C
    void Awake();
    // private System.Void Start()
    // Offset: 0x27F57E4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x27F58D4
    void OnDestroy();
    // private System.Void HandleOnZoneChanged()
    // Offset: 0x27F59C4
    void HandleOnZoneChanged();
    // public System.Void InitIfNeeded()
    // Offset: 0x27F5B40
    void InitIfNeeded();
    // private System.Void Update()
    // Offset: 0x27F5D70
    void Update();
    // public GorillaTagScripts.BuilderTable/TableState GetTableState()
    // Offset: 0x27F5F80
    ::GorillaTagScripts::BuilderTable::TableState GetTableState();
    // public System.Void SetTableState(GorillaTagScripts.BuilderTable/TableState newState)
    // Offset: 0x27F5F88
    void SetTableState(::GorillaTagScripts::BuilderTable::TableState newState);
    // public System.Void SetInRoom(System.Boolean inRoom)
    // Offset: 0x27F62D4
    void SetInRoom(bool inRoom);
    // public System.Boolean IsInBuilderZone()
    // Offset: 0x27F6680
    bool IsInBuilderZone();
    // public System.Void SetInBuilderZone(System.Boolean inBuilderZone)
    // Offset: 0x27F5A2C
    void SetInBuilderZone(bool inBuilderZone);
    // private System.Void UpdateTableState()
    // Offset: 0x27F5D88
    void UpdateTableState();
    // private System.Void ExecuteBuildCommand(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F7248
    void ExecuteBuildCommand(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // public System.Void ClearTable()
    // Offset: 0x27F6688
    void ClearTable();
    // public System.Void ClearQueuedCommands()
    // Offset: 0x27F71DC
    void ClearQueuedCommands();
    // public System.Int32 GetNumQueuedCommands()
    // Offset: 0x27F8544
    int GetNumQueuedCommands();
    // private System.Void ClearTableInternal()
    // Offset: 0x27F81D8
    void ClearTableInternal();
    // public System.Int32 SerializeTableState(System.Byte[] bytes, System.Int32 maxBytes)
    // Offset: 0x27F85F8
    int SerializeTableState(::ArrayW<uint8_t> bytes, int maxBytes);
    // public System.Void DeserializeTableState(System.Byte[] bytes, System.Int32 numBytes)
    // Offset: 0x27F668C
    void DeserializeTableState(::ArrayW<uint8_t> bytes, int numBytes);
    // public System.Int32 SerializeSinglePieceState(System.Int32 pieceId, System.Byte[] bytes)
    // Offset: 0x27F95F0
    int SerializeSinglePieceState(int pieceId, ::ArrayW<uint8_t> bytes);
    // public System.Void DeserializeSinglePieceState(System.Byte[] bytes, System.Int32 numBytes)
    // Offset: 0x27F9878
    void DeserializeSinglePieceState(::ArrayW<uint8_t> bytes, int numBytes);
    // private System.Void WriteVector3(System.IO.BinaryWriter writer, UnityEngine.Vector3 data)
    // Offset: 0x27F88BC
    void WriteVector3(::System::IO::BinaryWriter* writer, ::UnityEngine::Vector3 data);
    // private System.Void WriteQuaternion(System.IO.BinaryWriter writer, UnityEngine.Quaternion data)
    // Offset: 0x27F8924
    void WriteQuaternion(::System::IO::BinaryWriter* writer, ::UnityEngine::Quaternion data);
    // private UnityEngine.Vector3 ReadVector3(System.IO.BinaryReader reader)
    // Offset: 0x27F89B0
    ::UnityEngine::Vector3 ReadVector3(::System::IO::BinaryReader* reader);
    // private UnityEngine.Quaternion ReadQuaternion(System.IO.BinaryReader reader)
    // Offset: 0x27F8A20
    ::UnityEngine::Quaternion ReadQuaternion(::System::IO::BinaryReader* reader);
    // public System.Void BuildPiecesOnShelves()
    // Offset: 0x27F5FE0
    void BuildPiecesOnShelves();
    // private System.Void BuildInitialTableForPlayer()
    // Offset: 0x27F60CC
    void BuildInitialTableForPlayer();
    // private System.Void OnGetUserDataInitialState(PlayFab.ClientModels.GetUserDataResult result)
    // Offset: 0x27F9B60
    void OnGetUserDataInitialState(::PlayFab::ClientModels::GetUserDataResult* result);
    // private System.Void OnGetTitleDataInitialState(PlayFab.ClientModels.GetTitleDataResult result)
    // Offset: 0x27FA190
    void OnGetTitleDataInitialState(::PlayFab::ClientModels::GetTitleDataResult* result);
    // private System.Void OnGetInitialStateFail(PlayFab.PlayFabError error)
    // Offset: 0x27FA284
    void OnGetInitialStateFail(::PlayFab::PlayFabError* error);
    // private System.String WriteTableToJson()
    // Offset: 0x27FA30C
    ::StringW WriteTableToJson();
    // private System.Boolean BuildTableFromJson(System.String tableJson)
    // Offset: 0x27F9C5C
    bool BuildTableFromJson(::StringW tableJson);
    // public System.Int32 CreatePieceId()
    // Offset: 0x27FA9FC
    int CreatePieceId();
    // public System.Void CreatePiece(System.Int32 pieceType, System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Int32 materialType)
    // Offset: 0x27FAA10
    void CreatePiece(int pieceType, int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, int materialType);
    // private System.Boolean ShouldExecuteCommand()
    // Offset: 0x27F9B1C
    bool ShouldExecuteCommand();
    // private System.Boolean ShouldQueueCommand()
    // Offset: 0x27F9B38
    bool ShouldQueueCommand();
    // private System.Boolean ShouldDiscardCommand()
    // Offset: 0x27FAE20
    bool ShouldDiscardCommand();
    // public System.Boolean DoesChainContainPiece(BuilderPiece targetPiece, BuilderPiece firstInChain, BuilderPiece nextInChain)
    // Offset: 0x27FAE3C
    bool DoesChainContainPiece(::GlobalNamespace::BuilderPiece* targetPiece, ::GlobalNamespace::BuilderPiece* firstInChain, ::GlobalNamespace::BuilderPiece* nextInChain);
    // public System.Boolean DoesChainContainChain(BuilderPiece chainARoot, BuilderPiece chainBAttachPiece)
    // Offset: 0x27FAF70
    bool DoesChainContainChain(::GlobalNamespace::BuilderPiece* chainARoot, ::GlobalNamespace::BuilderPiece* chainBAttachPiece);
    // public System.Boolean ValidatePlacePieceParams(System.Int32 pieceId, System.Int32 attachPieceId, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Int32 parentPieceId, System.Int32 attachIndex, System.Int32 attachBoundsMinX, System.Int32 attachBoundsMinY, System.Int32 attachBoundsMaxX, System.Int32 attachBoundsMaxY, System.Int32 parentAttachIndex, System.Int32 parentAttachBoundsMinX, System.Int32 parentAttachBoundsMinY, System.Int32 parentAttachBoundsMaxX, System.Int32 parentAttachBoundsMaxY, Photon.Realtime.Player placedByPlayer)
    // Offset: 0x27FB088
    bool ValidatePlacePieceParams(int pieceId, int attachPieceId, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, int parentPieceId, int attachIndex, int attachBoundsMinX, int attachBoundsMinY, int attachBoundsMaxX, int attachBoundsMaxY, int parentAttachIndex, int parentAttachBoundsMinX, int parentAttachBoundsMinY, int parentAttachBoundsMaxX, int parentAttachBoundsMaxY, ::Photon::Realtime::Player* placedByPlayer);
    // public System.Void ExecutePieceCreated(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F732C
    void ExecutePieceCreated(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // private System.Boolean ValidateCreatePieceParams(System.Int32 newPieceType, System.Int32 newPieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, BuilderPiece/State state, System.Int32 materialType)
    // Offset: 0x27F8AB4
    bool ValidateCreatePieceParams(int newPieceType, int newPieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::GlobalNamespace::BuilderPiece::State state, int materialType);
    // private BuilderPiece CreatePieceInternal(System.Int32 newPieceType, System.Int32 newPieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, BuilderPiece/State state, System.Int32 materialType)
    // Offset: 0x27F8CF0
    ::GlobalNamespace::BuilderPiece* CreatePieceInternal(int newPieceType, int newPieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::GlobalNamespace::BuilderPiece::State state, int materialType);
    // private System.Boolean ValidateAttachPieceParams(System.Int32 pieceId, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentId, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds)
    // Offset: 0x27F8EC0
    bool ValidateAttachPieceParams(int pieceId, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentId, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds);
    // private System.Void AttachPieceInternal(System.Int32 pieceId, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentId, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds)
    // Offset: 0x27F9094
    void AttachPieceInternal(int pieceId, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentId, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds);
    // private System.Void AttachPieceToActorInternal(System.Int32 pieceId, System.Int32 actorNumber, System.Boolean isLeftHand)
    // Offset: 0x27F92D8
    void AttachPieceToActorInternal(int pieceId, int actorNumber, bool isLeftHand);
    // public System.Void RequestPlacePiece(BuilderPiece piece, BuilderPiece attachPiece, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, BuilderPiece parentPiece, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds)
    // Offset: 0x27FB508
    void RequestPlacePiece(::GlobalNamespace::BuilderPiece* piece, ::GlobalNamespace::BuilderPiece* attachPiece, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::GlobalNamespace::BuilderPiece* parentPiece, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds);
    // public System.Void PlacePiece(System.Int32 pieceId, System.Int32 attachPieceId, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Int32 parentPieceId, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds, Photon.Realtime.Player placedByPlayer, System.Boolean force)
    // Offset: 0x27FBD2C
    void PlacePiece(int pieceId, int attachPieceId, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, int parentPieceId, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds, ::Photon::Realtime::Player* placedByPlayer, bool force);
    // public System.Void PiecePlacedInternal(System.Int32 pieceId, System.Int32 attachPieceId, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, System.Int32 parentPieceId, System.Int32 attachIndex, SnapBounds attachBounds, System.Int32 parentAttachIndex, SnapBounds parentAttachBounds, Photon.Realtime.Player placedByPlayer, System.Boolean force)
    // Offset: 0x27FBD4C
    void PiecePlacedInternal(int pieceId, int attachPieceId, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, int parentPieceId, int attachIndex, ::GlobalNamespace::SnapBounds attachBounds, int parentAttachIndex, ::GlobalNamespace::SnapBounds parentAttachBounds, ::Photon::Realtime::Player* placedByPlayer, bool force);
    // public System.Void ExecutePiecePlaced(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F7350
    void ExecutePiecePlaced(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // public System.Boolean ValidateGrabPieceParams(System.Int32 pieceId, System.Boolean isLeftHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, Photon.Realtime.Player grabbedByPlayer)
    // Offset: 0x27FBFEC
    bool ValidateGrabPieceParams(int pieceId, bool isLeftHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::Photon::Realtime::Player* grabbedByPlayer);
    // public System.Void RequestGrabPiece(BuilderPiece piece, System.Boolean isLefHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation)
    // Offset: 0x27FC1C8
    void RequestGrabPiece(::GlobalNamespace::BuilderPiece* piece, bool isLefHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation);
    // public System.Void GrabPiece(System.Int32 pieceId, System.Boolean isLeftHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, Photon.Realtime.Player grabbedByPlayer, System.Boolean force)
    // Offset: 0x27FC5E8
    void GrabPiece(int pieceId, bool isLeftHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::Photon::Realtime::Player* grabbedByPlayer, bool force);
    // public System.Void PieceGrabbedInternal(System.Int32 pieceId, System.Boolean isLeftHand, UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation, Photon.Realtime.Player grabbedByPlayer, System.Boolean force)
    // Offset: 0x27FC5F4
    void PieceGrabbedInternal(int pieceId, bool isLeftHand, ::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, ::Photon::Realtime::Player* grabbedByPlayer, bool force);
    // public System.Void ExecutePieceGrabbed(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F775C
    void ExecutePieceGrabbed(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // public System.Boolean ValidateDropPieceParams(System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity, Photon.Realtime.Player droppedByPlayer)
    // Offset: 0x27FC838
    bool ValidateDropPieceParams(int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity, ::Photon::Realtime::Player* droppedByPlayer);
    // public System.Void RequestDropPiece(BuilderPiece piece, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity)
    // Offset: 0x27FCC04
    void RequestDropPiece(::GlobalNamespace::BuilderPiece* piece, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity);
    // public System.Void DropPiece(System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity, Photon.Realtime.Player droppedByPlayer, System.Boolean force)
    // Offset: 0x27FD3A8
    void DropPiece(int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity, ::Photon::Realtime::Player* droppedByPlayer, bool force);
    // public System.Void PieceDroppedInternal(System.Int32 pieceId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity, Photon.Realtime.Player droppedByPlayer, System.Boolean force)
    // Offset: 0x27FD3D0
    void PieceDroppedInternal(int pieceId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity, ::Photon::Realtime::Player* droppedByPlayer, bool force);
    // public System.Void ExecutePieceDropped(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F7A1C
    void ExecutePieceDropped(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // public System.Void ExecuteSyncPiece(GorillaTagScripts.BuilderTable/BuilderCommand cmd)
    // Offset: 0x27F7D0C
    void ExecuteSyncPiece(::GorillaTagScripts::BuilderTable::BuilderCommand cmd);
    // public BuilderPiece GetPiece(System.Int32 pieceId)
    // Offset: 0x27F91C8
    ::GlobalNamespace::BuilderPiece* GetPiece(int pieceId);
    // public System.Void AddPiece(BuilderPiece piece)
    // Offset: 0x27FB450
    void AddPiece(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void RemovePiece(BuilderPiece piece)
    // Offset: 0x27F8590
    void RemovePiece(::GlobalNamespace::BuilderPiece* piece);
    // public GorillaTagScripts.BuilderItem GetBuildItemFromPhotonViewId(System.Int32 photonViewId)
    // Offset: 0x27FD87C
    ::GorillaTagScripts::BuilderItem* GetBuildItemFromPhotonViewId(int photonViewId);
    // private System.Void AddGridPlanes(System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> add)
    // Offset: 0x27FD65C
    void AddGridPlanes(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* add);
    // private System.Void RemoveGridPlanes(System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> remove)
    // Offset: 0x27FD7B8
    void RemoveGridPlanes(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* remove);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27FD9A0
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x27FDAA4
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void OnButtonFreeRotation(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27FDB98
    void OnButtonFreeRotation(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void OnButtonFreePosition(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27FDBC8
    void OnButtonFreePosition(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void OnButtonSaveLayout(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27FDC0C
    void OnButtonSaveLayout(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Void OnButtonClearLayout(GorillaTagScripts.BuilderOptionButton button, System.Boolean isLeftHand)
    // Offset: 0x27FDC74
    void OnButtonClearLayout(::GorillaTagScripts::BuilderOptionButton* button, bool isLeftHand);
    // public System.Boolean TryPlaceGridPlane(BuilderPiece piece, GorillaTagScripts.BuilderAttachGridPlane gridPlane, System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> checkGridPlanes, out GorillaTagScripts.BuilderPotentialPlacement potentialPlacement)
    // Offset: 0x27FDCDC
    bool TryPlaceGridPlane(::GlobalNamespace::BuilderPiece* piece, ::GorillaTagScripts::BuilderAttachGridPlane* gridPlane, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* checkGridPlanes, ByRef<::GorillaTagScripts::BuilderPotentialPlacement> potentialPlacement);
    // public System.Boolean TryPlaceGridPlaneOnGridPlane(BuilderPiece piece, GorillaTagScripts.BuilderAttachGridPlane gridPlane, UnityEngine.Vector3 gridPlanePos, UnityEngine.Quaternion gridPlaneRot, GorillaTagScripts.BuilderAttachGridPlane checkGridPlane, ref GorillaTagScripts.BuilderPotentialPlacement potentialPlacement, ref System.Boolean success)
    // Offset: 0x27FDE68
    bool TryPlaceGridPlaneOnGridPlane(::GlobalNamespace::BuilderPiece* piece, ::GorillaTagScripts::BuilderAttachGridPlane* gridPlane, ::UnityEngine::Vector3 gridPlanePos, ::UnityEngine::Quaternion gridPlaneRot, ::GorillaTagScripts::BuilderAttachGridPlane* checkGridPlane, ByRef<::GorillaTagScripts::BuilderPotentialPlacement> potentialPlacement, ByRef<bool> success);
    // private UnityEngine.Vector2Int Rotate90(UnityEngine.Vector2Int v, System.Int32 offsetX, System.Int32 offsetY)
    // Offset: 0x27FF1FC
    ::UnityEngine::Vector2Int Rotate90(::UnityEngine::Vector2Int v, int offsetX, int offsetY);
    // private UnityEngine.Vector2Int Rotate270(UnityEngine.Vector2Int v, System.Int32 offsetX, System.Int32 offsetY)
    // Offset: 0x27FF1F0
    ::UnityEngine::Vector2Int Rotate270(::UnityEngine::Vector2Int v, int offsetX, int offsetY);
    // private UnityEngine.Vector2Int Rotate180(UnityEngine.Vector2Int v, System.Int32 offsetX, System.Int32 offsetY)
    // Offset: 0x27FF1DC
    ::UnityEngine::Vector2Int Rotate180(::UnityEngine::Vector2Int v, int offsetX, int offsetY);
    // private System.Boolean ShareSameRoot(GorillaTagScripts.BuilderAttachGridPlane plane, GorillaTagScripts.BuilderAttachGridPlane otherPlane)
    // Offset: 0x27FEEA4
    bool ShareSameRoot(::GorillaTagScripts::BuilderAttachGridPlane* plane, ::GorillaTagScripts::BuilderAttachGridPlane* otherPlane);
    // private System.Boolean ShareSameRoot(BuilderPiece piece, BuilderPiece otherPiece)
    // Offset: 0x27FEF90
    bool ShareSameRoot(::GlobalNamespace::BuilderPiece* piece, ::GlobalNamespace::BuilderPiece* otherPiece);
    // public System.Void TryPlacePieceOnTable(System.Boolean leftHand, System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> checkGridPlanes, BuilderPiece testPiece)
    // Offset: 0x27FF20C
    void TryPlacePieceOnTable(bool leftHand, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* checkGridPlanes, ::GlobalNamespace::BuilderPiece* testPiece);
    // public System.Boolean TryPlacePieceOnTableNoDrop(System.Boolean leftHand, BuilderPiece testPiece, System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> gridPlanes, out GorillaTagScripts.BuilderPotentialPlacement potentialPlacement)
    // Offset: 0x27FF7FC
    bool TryPlacePieceOnTableNoDrop(bool leftHand, ::GlobalNamespace::BuilderPiece* testPiece, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* gridPlanes, ByRef<::GorillaTagScripts::BuilderPotentialPlacement> potentialPlacement);
    // public System.Void TryDropPiece(System.Boolean leftHand, BuilderPiece testPiece, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angVelocity)
    // Offset: 0x27FF9F0
    void TryDropPiece(bool leftHand, ::GlobalNamespace::BuilderPiece* testPiece, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 angVelocity);
    // public System.Boolean TryPlacePieceGridPlanesOnTableInternal(BuilderPiece testPiece, System.Int32 recurse, System.Collections.Generic.List`1<GorillaTagScripts.BuilderAttachGridPlane> checkGridPlanes, out GorillaTagScripts.BuilderPotentialPlacement potentialPlacement)
    // Offset: 0x27FF544
    bool TryPlacePieceGridPlanesOnTableInternal(::GlobalNamespace::BuilderPiece* testPiece, int recurse, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>* checkGridPlanes, ByRef<::GorillaTagScripts::BuilderPotentialPlacement> potentialPlacement);
    // public System.Void TryPlaceRandomlyOnTable(BuilderPiece piece)
    // Offset: 0x27FFB88
    void TryPlaceRandomlyOnTable(::GlobalNamespace::BuilderPiece* piece);
    // public System.Void .ctor()
    // Offset: 0x27FFFEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTable*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28001AC
    static void _cctor();
  }; // GorillaTagScripts.BuilderTable
  #pragma pack(pop)
  static check_size<sizeof(BuilderTable), 432 + sizeof(::GorillaTagScripts::BuilderTableData*)> __GorillaTagScripts_BuilderTableSizeCheck;
  static_assert(sizeof(BuilderTable) == 0x1B8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable::SnapParams, "GorillaTagScripts", "BuilderTable/SnapParams");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable::BuilderCommand, "GorillaTagScripts", "BuilderTable/BuilderCommand");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable::TableState, "GorillaTagScripts", "BuilderTable/TableState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable::BuilderCommandType, "GorillaTagScripts", "BuilderTable/BuilderCommandType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::HandleOnZoneChanged
// Il2CppName: HandleOnZoneChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::HandleOnZoneChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "HandleOnZoneChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::InitIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::GetTableState
// Il2CppName: GetTableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderTable::TableState (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::GetTableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "GetTableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::SetTableState
// Il2CppName: SetTableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::TableState)>(&GorillaTagScripts::BuilderTable::SetTableState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/TableState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "SetTableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::SetInRoom
// Il2CppName: SetInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(bool)>(&GorillaTagScripts::BuilderTable::SetInRoom)> {
  static const MethodInfo* get() {
    static auto* inRoom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "SetInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inRoom});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::IsInBuilderZone
// Il2CppName: IsInBuilderZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::IsInBuilderZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "IsInBuilderZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::SetInBuilderZone
// Il2CppName: SetInBuilderZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(bool)>(&GorillaTagScripts::BuilderTable::SetInBuilderZone)> {
  static const MethodInfo* get() {
    static auto* inBuilderZone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "SetInBuilderZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inBuilderZone});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::UpdateTableState
// Il2CppName: UpdateTableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::UpdateTableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "UpdateTableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecuteBuildCommand
// Il2CppName: ExecuteBuildCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecuteBuildCommand)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecuteBuildCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ClearTable
// Il2CppName: ClearTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ClearTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ClearTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ClearQueuedCommands
// Il2CppName: ClearQueuedCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ClearQueuedCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ClearQueuedCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::GetNumQueuedCommands
// Il2CppName: GetNumQueuedCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::GetNumQueuedCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "GetNumQueuedCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ClearTableInternal
// Il2CppName: ClearTableInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ClearTableInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ClearTableInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::SerializeTableState
// Il2CppName: SerializeTableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::BuilderTable::*)(::ArrayW<uint8_t>, int)>(&GorillaTagScripts::BuilderTable::SerializeTableState)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* maxBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "SerializeTableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, maxBytes});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::DeserializeTableState
// Il2CppName: DeserializeTableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::ArrayW<uint8_t>, int)>(&GorillaTagScripts::BuilderTable::DeserializeTableState)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "DeserializeTableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, numBytes});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::SerializeSinglePieceState
// Il2CppName: SerializeSinglePieceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::BuilderTable::*)(int, ::ArrayW<uint8_t>)>(&GorillaTagScripts::BuilderTable::SerializeSinglePieceState)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "SerializeSinglePieceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, bytes});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::DeserializeSinglePieceState
// Il2CppName: DeserializeSinglePieceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::ArrayW<uint8_t>, int)>(&GorillaTagScripts::BuilderTable::DeserializeSinglePieceState)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* numBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "DeserializeSinglePieceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, numBytes});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::WriteVector3
// Il2CppName: WriteVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::System::IO::BinaryWriter*, ::UnityEngine::Vector3)>(&GorillaTagScripts::BuilderTable::WriteVector3)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "WriteVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, data});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::WriteQuaternion
// Il2CppName: WriteQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::System::IO::BinaryWriter*, ::UnityEngine::Quaternion)>(&GorillaTagScripts::BuilderTable::WriteQuaternion)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "WriteQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, data});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ReadVector3
// Il2CppName: ReadVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTagScripts::BuilderTable::*)(::System::IO::BinaryReader*)>(&GorillaTagScripts::BuilderTable::ReadVector3)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ReadVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ReadQuaternion
// Il2CppName: ReadQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GorillaTagScripts::BuilderTable::*)(::System::IO::BinaryReader*)>(&GorillaTagScripts::BuilderTable::ReadQuaternion)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ReadQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::BuildPiecesOnShelves
// Il2CppName: BuildPiecesOnShelves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::BuildPiecesOnShelves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "BuildPiecesOnShelves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::BuildInitialTableForPlayer
// Il2CppName: BuildInitialTableForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::BuildInitialTableForPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "BuildInitialTableForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnGetUserDataInitialState
// Il2CppName: OnGetUserDataInitialState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::PlayFab::ClientModels::GetUserDataResult*)>(&GorillaTagScripts::BuilderTable::OnGetUserDataInitialState)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetUserDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnGetUserDataInitialState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnGetTitleDataInitialState
// Il2CppName: OnGetTitleDataInitialState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::PlayFab::ClientModels::GetTitleDataResult*)>(&GorillaTagScripts::BuilderTable::OnGetTitleDataInitialState)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetTitleDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnGetTitleDataInitialState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnGetInitialStateFail
// Il2CppName: OnGetInitialStateFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::PlayFab::PlayFabError*)>(&GorillaTagScripts::BuilderTable::OnGetInitialStateFail)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnGetInitialStateFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::WriteTableToJson
// Il2CppName: WriteTableToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::WriteTableToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "WriteTableToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::BuildTableFromJson
// Il2CppName: BuildTableFromJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::StringW)>(&GorillaTagScripts::BuilderTable::BuildTableFromJson)> {
  static const MethodInfo* get() {
    static auto* tableJson = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "BuildTableFromJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableJson});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::CreatePieceId
// Il2CppName: CreatePieceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::CreatePieceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "CreatePieceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::CreatePiece
// Il2CppName: CreatePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int)>(&GorillaTagScripts::BuilderTable::CreatePiece)> {
  static const MethodInfo* get() {
    static auto* pieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* materialType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "CreatePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceType, pieceId, position, rotation, materialType});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ShouldExecuteCommand
// Il2CppName: ShouldExecuteCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ShouldExecuteCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ShouldExecuteCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ShouldQueueCommand
// Il2CppName: ShouldQueueCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ShouldQueueCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ShouldQueueCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ShouldDiscardCommand
// Il2CppName: ShouldDiscardCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)()>(&GorillaTagScripts::BuilderTable::ShouldDiscardCommand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ShouldDiscardCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::DoesChainContainPiece
// Il2CppName: DoesChainContainPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::DoesChainContainPiece)> {
  static const MethodInfo* get() {
    static auto* targetPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* firstInChain = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* nextInChain = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "DoesChainContainPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPiece, firstInChain, nextInChain});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::DoesChainContainChain
// Il2CppName: DoesChainContainChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::DoesChainContainChain)> {
  static const MethodInfo* get() {
    static auto* chainARoot = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* chainBAttachPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "DoesChainContainChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chainARoot, chainBAttachPiece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ValidatePlacePieceParams
// Il2CppName: ValidatePlacePieceParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, int, int, int, int, int, int, int, int, int, int, ::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTable::ValidatePlacePieceParams)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMinY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBoundsMaxY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* placedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ValidatePlacePieceParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachPieceId, localPosition, localRotation, parentPieceId, attachIndex, attachBoundsMinX, attachBoundsMinY, attachBoundsMaxX, attachBoundsMaxY, parentAttachIndex, parentAttachBoundsMinX, parentAttachBoundsMinY, parentAttachBoundsMaxX, parentAttachBoundsMaxY, placedByPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecutePieceCreated
// Il2CppName: ExecutePieceCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecutePieceCreated)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecutePieceCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ValidateCreatePieceParams
// Il2CppName: ValidateCreatePieceParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::GlobalNamespace::BuilderPiece::State, int)>(&GorillaTagScripts::BuilderTable::ValidateCreatePieceParams)> {
  static const MethodInfo* get() {
    static auto* newPieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("", "BuilderPiece/State")->byval_arg;
    static auto* materialType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ValidateCreatePieceParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPieceType, newPieceId, position, rotation, state, materialType});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::CreatePieceInternal
// Il2CppName: CreatePieceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::GlobalNamespace::BuilderPiece::State, int)>(&GorillaTagScripts::BuilderTable::CreatePieceInternal)> {
  static const MethodInfo* get() {
    static auto* newPieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("", "BuilderPiece/State")->byval_arg;
    static auto* materialType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "CreatePieceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPieceType, newPieceId, position, rotation, state, materialType});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ValidateAttachPieceParams
// Il2CppName: ValidateAttachPieceParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(int, int, ::GlobalNamespace::SnapBounds, int, int, ::GlobalNamespace::SnapBounds)>(&GorillaTagScripts::BuilderTable::ValidateAttachPieceParams)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ValidateAttachPieceParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachIndex, attachBounds, parentId, parentAttachIndex, parentAttachBounds});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::AttachPieceInternal
// Il2CppName: AttachPieceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, int, ::GlobalNamespace::SnapBounds, int, int, ::GlobalNamespace::SnapBounds)>(&GorillaTagScripts::BuilderTable::AttachPieceInternal)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "AttachPieceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachIndex, attachBounds, parentId, parentAttachIndex, parentAttachBounds});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::AttachPieceToActorInternal
// Il2CppName: AttachPieceToActorInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, int, bool)>(&GorillaTagScripts::BuilderTable::AttachPieceToActorInternal)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* actorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "AttachPieceToActorInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, actorNumber, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::RequestPlacePiece
// Il2CppName: RequestPlacePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::GlobalNamespace::BuilderPiece*, int, ::GlobalNamespace::SnapBounds, int, ::GlobalNamespace::SnapBounds)>(&GorillaTagScripts::BuilderTable::RequestPlacePiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* attachPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "RequestPlacePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, attachPiece, localPosition, localRotation, parentPiece, attachIndex, attachBounds, parentAttachIndex, parentAttachBounds});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::PlacePiece
// Il2CppName: PlacePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, int, ::GlobalNamespace::SnapBounds, int, ::GlobalNamespace::SnapBounds, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::PlacePiece)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* placedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "PlacePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachPieceId, localPosition, localRotation, parentPieceId, attachIndex, attachBounds, parentAttachIndex, parentAttachBounds, placedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::PiecePlacedInternal
// Il2CppName: PiecePlacedInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, int, int, ::GlobalNamespace::SnapBounds, int, ::GlobalNamespace::SnapBounds, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::PiecePlacedInternal)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* parentPieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* parentAttachIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parentAttachBounds = &::il2cpp_utils::GetClassFromName("", "SnapBounds")->byval_arg;
    static auto* placedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "PiecePlacedInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, attachPieceId, localPosition, localRotation, parentPieceId, attachIndex, attachBounds, parentAttachIndex, parentAttachBounds, placedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecutePiecePlaced
// Il2CppName: ExecutePiecePlaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecutePiecePlaced)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecutePiecePlaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ValidateGrabPieceParams
// Il2CppName: ValidateGrabPieceParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(int, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTable::ValidateGrabPieceParams)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* grabbedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ValidateGrabPieceParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, isLeftHand, localPosition, localRotation, grabbedByPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::RequestGrabPiece
// Il2CppName: RequestGrabPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GorillaTagScripts::BuilderTable::RequestGrabPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* isLefHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "RequestGrabPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, isLefHand, localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::GrabPiece
// Il2CppName: GrabPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::GrabPiece)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* grabbedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "GrabPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, isLeftHand, localPosition, localRotation, grabbedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::PieceGrabbedInternal
// Il2CppName: PieceGrabbedInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, bool, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::PieceGrabbedInternal)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* grabbedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "PieceGrabbedInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, isLeftHand, localPosition, localRotation, grabbedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecutePieceGrabbed
// Il2CppName: ExecutePieceGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecutePieceGrabbed)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecutePieceGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ValidateDropPieceParams
// Il2CppName: ValidateDropPieceParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*)>(&GorillaTagScripts::BuilderTable::ValidateDropPieceParams)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* droppedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ValidateDropPieceParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, position, rotation, velocity, angVelocity, droppedByPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::RequestDropPiece
// Il2CppName: RequestDropPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaTagScripts::BuilderTable::RequestDropPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "RequestDropPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, position, rotation, velocity, angVelocity});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::DropPiece
// Il2CppName: DropPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::DropPiece)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* droppedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "DropPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, position, rotation, velocity, angVelocity, droppedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::PieceDroppedInternal
// Il2CppName: PieceDroppedInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Photon::Realtime::Player*, bool)>(&GorillaTagScripts::BuilderTable::PieceDroppedInternal)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* droppedByPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "PieceDroppedInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId, position, rotation, velocity, angVelocity, droppedByPlayer, force});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecutePieceDropped
// Il2CppName: ExecutePieceDropped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecutePieceDropped)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecutePieceDropped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ExecuteSyncPiece
// Il2CppName: ExecuteSyncPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderTable::BuilderCommand)>(&GorillaTagScripts::BuilderTable::ExecuteSyncPiece)> {
  static const MethodInfo* get() {
    static auto* cmd = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderTable/BuilderCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ExecuteSyncPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cmd});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::GetPiece
// Il2CppName: GetPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (GorillaTagScripts::BuilderTable::*)(int)>(&GorillaTagScripts::BuilderTable::GetPiece)> {
  static const MethodInfo* get() {
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "GetPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceId});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::AddPiece
// Il2CppName: AddPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::AddPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "AddPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::RemovePiece
// Il2CppName: RemovePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::RemovePiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "RemovePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::GetBuildItemFromPhotonViewId
// Il2CppName: GetBuildItemFromPhotonViewId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::BuilderItem* (GorillaTagScripts::BuilderTable::*)(int)>(&GorillaTagScripts::BuilderTable::GetBuildItemFromPhotonViewId)> {
  static const MethodInfo* get() {
    static auto* photonViewId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "GetBuildItemFromPhotonViewId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{photonViewId});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::AddGridPlanes
// Il2CppName: AddGridPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*)>(&GorillaTagScripts::BuilderTable::AddGridPlanes)> {
  static const MethodInfo* get() {
    static auto* add = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "AddGridPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{add});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::RemoveGridPlanes
// Il2CppName: RemoveGridPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*)>(&GorillaTagScripts::BuilderTable::RemoveGridPlanes)> {
  static const MethodInfo* get() {
    static auto* remove = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "RemoveGridPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remove});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::BuilderTable::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::BuilderTable::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnButtonFreeRotation
// Il2CppName: OnButtonFreeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderTable::OnButtonFreeRotation)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnButtonFreeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnButtonFreePosition
// Il2CppName: OnButtonFreePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderTable::OnButtonFreePosition)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnButtonFreePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnButtonSaveLayout
// Il2CppName: OnButtonSaveLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderTable::OnButtonSaveLayout)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnButtonSaveLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::OnButtonClearLayout
// Il2CppName: OnButtonClearLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderOptionButton*, bool)>(&GorillaTagScripts::BuilderTable::OnButtonClearLayout)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderOptionButton")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "OnButtonClearLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, isLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlaceGridPlane
// Il2CppName: TryPlaceGridPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GorillaTagScripts::BuilderAttachGridPlane*, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*, ByRef<::GorillaTagScripts::BuilderPotentialPlacement>)>(&GorillaTagScripts::BuilderTable::TryPlaceGridPlane)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* gridPlane = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")->byval_arg;
    static auto* checkGridPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    static auto* potentialPlacement = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderPotentialPlacement")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlaceGridPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, gridPlane, checkGridPlanes, potentialPlacement});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlaceGridPlaneOnGridPlane
// Il2CppName: TryPlaceGridPlaneOnGridPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GorillaTagScripts::BuilderAttachGridPlane*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::GorillaTagScripts::BuilderAttachGridPlane*, ByRef<::GorillaTagScripts::BuilderPotentialPlacement>, ByRef<bool>)>(&GorillaTagScripts::BuilderTable::TryPlaceGridPlaneOnGridPlane)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* gridPlane = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")->byval_arg;
    static auto* gridPlanePos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* gridPlaneRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* checkGridPlane = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")->byval_arg;
    static auto* potentialPlacement = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderPotentialPlacement")->this_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlaceGridPlaneOnGridPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, gridPlane, gridPlanePos, gridPlaneRot, checkGridPlane, potentialPlacement, success});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Rotate90
// Il2CppName: Rotate90
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (GorillaTagScripts::BuilderTable::*)(::UnityEngine::Vector2Int, int, int)>(&GorillaTagScripts::BuilderTable::Rotate90)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    static auto* offsetX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Rotate90", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, offsetX, offsetY});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Rotate270
// Il2CppName: Rotate270
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (GorillaTagScripts::BuilderTable::*)(::UnityEngine::Vector2Int, int, int)>(&GorillaTagScripts::BuilderTable::Rotate270)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    static auto* offsetX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Rotate270", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, offsetX, offsetY});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::Rotate180
// Il2CppName: Rotate180
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (GorillaTagScripts::BuilderTable::*)(::UnityEngine::Vector2Int, int, int)>(&GorillaTagScripts::BuilderTable::Rotate180)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2Int")->byval_arg;
    static auto* offsetX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "Rotate180", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, offsetX, offsetY});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ShareSameRoot
// Il2CppName: ShareSameRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GorillaTagScripts::BuilderAttachGridPlane*, ::GorillaTagScripts::BuilderAttachGridPlane*)>(&GorillaTagScripts::BuilderTable::ShareSameRoot)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")->byval_arg;
    static auto* otherPlane = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ShareSameRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane, otherPlane});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::ShareSameRoot
// Il2CppName: ShareSameRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, ::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::ShareSameRoot)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* otherPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "ShareSameRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, otherPiece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlacePieceOnTable
// Il2CppName: TryPlacePieceOnTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(bool, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*, ::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::TryPlacePieceOnTable)> {
  static const MethodInfo* get() {
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* checkGridPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    static auto* testPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlacePieceOnTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHand, checkGridPlanes, testPiece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlacePieceOnTableNoDrop
// Il2CppName: TryPlacePieceOnTableNoDrop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(bool, ::GlobalNamespace::BuilderPiece*, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*, ByRef<::GorillaTagScripts::BuilderPotentialPlacement>)>(&GorillaTagScripts::BuilderTable::TryPlacePieceOnTableNoDrop)> {
  static const MethodInfo* get() {
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* testPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* gridPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    static auto* potentialPlacement = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderPotentialPlacement")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlacePieceOnTableNoDrop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHand, testPiece, gridPlanes, potentialPlacement});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryDropPiece
// Il2CppName: TryDropPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(bool, ::GlobalNamespace::BuilderPiece*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaTagScripts::BuilderTable::TryDropPiece)> {
  static const MethodInfo* get() {
    static auto* leftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* testPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryDropPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHand, testPiece, velocity, angVelocity});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlacePieceGridPlanesOnTableInternal
// Il2CppName: TryPlacePieceGridPlanesOnTableInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*, int, ::System::Collections::Generic::List_1<::GorillaTagScripts::BuilderAttachGridPlane*>*, ByRef<::GorillaTagScripts::BuilderPotentialPlacement>)>(&GorillaTagScripts::BuilderTable::TryPlacePieceGridPlanesOnTableInternal)> {
  static const MethodInfo* get() {
    static auto* testPiece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    static auto* recurse = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* checkGridPlanes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderAttachGridPlane")})->byval_arg;
    static auto* potentialPlacement = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderPotentialPlacement")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlacePieceGridPlanesOnTableInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testPiece, recurse, checkGridPlanes, potentialPlacement});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::TryPlaceRandomlyOnTable
// Il2CppName: TryPlaceRandomlyOnTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTable::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderTable::TryPlaceRandomlyOnTable)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), "TryPlaceRandomlyOnTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTagScripts::BuilderTable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
