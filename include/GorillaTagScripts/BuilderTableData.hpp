// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SnapBounds
#include "GlobalNamespace/SnapBounds.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderTableData
  class BuilderTableData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderTableData);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTableData*, "GorillaTagScripts", "BuilderTableData");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderTableData
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTableData : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 version
    // Size: 0x4
    // Offset: 0x10
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numEdits
    // Size: 0x4
    // Offset: 0x14
    int numEdits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numPieces
    // Size: 0x4
    // Offset: 0x18
    int numPieces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numPieces and: pieceType
    char __padding2[0x4] = {};
    // public System.Collections.Generic.List`1<System.Int32> pieceType
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<int>* pieceType;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> pieceId
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* pieceId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> parentId
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<int>* parentId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> attachIndex
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<int>* attachIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> parentAttachIndex
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<int>* parentAttachIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<SnapBounds> attachBounds
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* attachBounds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>*) == 0x8);
    // public System.Collections.Generic.List`1<SnapBounds> parentAttachBounds
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>* parentAttachBounds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> position
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* position;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Quaternion> rotation
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>* rotation;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> materialType
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<int>* materialType;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // static field const value: static private System.Int32 BUILDER_TABLE_DATA_VERSION
    static constexpr const int BUILDER_TABLE_DATA_VERSION = 0;
    // Get static field: static private System.Int32 BUILDER_TABLE_DATA_VERSION
    static int _get_BUILDER_TABLE_DATA_VERSION();
    // Set static field: static private System.Int32 BUILDER_TABLE_DATA_VERSION
    static void _set_BUILDER_TABLE_DATA_VERSION(int value);
    // Get instance field reference: public System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // Get instance field reference: public System.Int32 numEdits
    [[deprecated("Use field access instead!")]] int& dyn_numEdits();
    // Get instance field reference: public System.Int32 numPieces
    [[deprecated("Use field access instead!")]] int& dyn_numPieces();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> pieceType
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_pieceType();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> pieceId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_pieceId();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> parentId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_parentId();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> attachIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_attachIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> parentAttachIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_parentAttachIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<SnapBounds> attachBounds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>*& dyn_attachBounds();
    // Get instance field reference: public System.Collections.Generic.List`1<SnapBounds> parentAttachBounds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SnapBounds>*& dyn_parentAttachBounds();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> position
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_position();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Quaternion> rotation
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*& dyn_rotation();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> materialType
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_materialType();
    // public System.Void .ctor()
    // Offset: 0x27F4E84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTableData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderTableData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTableData*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x27F5110
    void Clear();
  }; // GorillaTagScripts.BuilderTableData
  #pragma pack(pop)
  static check_size<sizeof(BuilderTableData), 104 + sizeof(::System::Collections::Generic::List_1<int>*)> __GorillaTagScripts_BuilderTableDataSizeCheck;
  static_assert(sizeof(BuilderTableData) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTableData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderTableData::*)()>(&GorillaTagScripts::BuilderTableData::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderTableData*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
