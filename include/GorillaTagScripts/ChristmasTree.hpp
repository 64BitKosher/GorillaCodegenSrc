// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: AttachPoint
  class AttachPoint;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: ChristmasTree
  class ChristmasTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::ChristmasTree);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::ChristmasTree*, "GorillaTagScripts", "ChristmasTree");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.ChristmasTree
  // [TokenAttribute] Offset: FFFFFFFF
  class ChristmasTree : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public UnityEngine.GameObject hangers
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* hangers;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject lights
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* lights;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject topOrnament
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* topOrnament;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single spinSpeed
    // Size: 0x4
    // Offset: 0x40
    float spinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: spinSpeed and: attachPointsList
    char __padding3[0x4] = {};
    // private readonly System.Collections.Generic.List`1<GorillaTagScripts.AttachPoint> attachPointsList
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::GorillaTagScripts::AttachPoint*>* attachPointsList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTagScripts::AttachPoint*>*) == 0x8);
    // private UnityEngine.MeshRenderer[] lightRenderers
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::MeshRenderer*> lightRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // private System.Boolean wasActive
    // Size: 0x1
    // Offset: 0x58
    bool wasActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isActive
    // Size: 0x1
    // Offset: 0x59
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean spinTheTop
    // Size: 0x1
    // Offset: 0x5A
    bool spinTheTop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: spinTheTop and: lightsOffMaterial
    char __padding8[0x5] = {};
    // private UnityEngine.Material lightsOffMaterial
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* lightsOffMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material[] lightsOnMaterials
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Material*> lightsOnMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public UnityEngine.GameObject hangers
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_hangers();
    // Get instance field reference: public UnityEngine.GameObject lights
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_lights();
    // Get instance field reference: public UnityEngine.GameObject topOrnament
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_topOrnament();
    // Get instance field reference: public System.Single spinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeed();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaTagScripts.AttachPoint> attachPointsList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::AttachPoint*>*& dyn_attachPointsList();
    // Get instance field reference: private UnityEngine.MeshRenderer[] lightRenderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_lightRenderers();
    // Get instance field reference: private System.Boolean wasActive
    [[deprecated("Use field access instead!")]] bool& dyn_wasActive();
    // Get instance field reference: private System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: private System.Boolean spinTheTop
    [[deprecated("Use field access instead!")]] bool& dyn_spinTheTop();
    // Get instance field reference: private UnityEngine.Material lightsOffMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lightsOffMaterial();
    // Get instance field reference: private UnityEngine.Material[] lightsOnMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_lightsOnMaterials();
    // private System.Void Awake()
    // Offset: 0x280331C
    void Awake();
    // private System.Void Update()
    // Offset: 0x2803560
    void Update();
    // private System.Void OnDestroy()
    // Offset: 0x2803624
    void OnDestroy();
    // private System.Void UpdateHangers()
    // Offset: 0x2803864
    void UpdateHangers();
    // private System.Void updateLight(System.Boolean enable)
    // Offset: 0x2803A3C
    void updateLight(bool enable);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2803AE8
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x2803BF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChristmasTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::ChristmasTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChristmasTree*, creationType>()));
    }
  }; // GorillaTagScripts.ChristmasTree
  #pragma pack(pop)
  static check_size<sizeof(ChristmasTree), 104 + sizeof(::ArrayW<::UnityEngine::Material*>)> __GorillaTagScripts_ChristmasTreeSizeCheck;
  static_assert(sizeof(ChristmasTree) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)()>(&GorillaTagScripts::ChristmasTree::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)()>(&GorillaTagScripts::ChristmasTree::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)()>(&GorillaTagScripts::ChristmasTree::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::UpdateHangers
// Il2CppName: UpdateHangers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)()>(&GorillaTagScripts::ChristmasTree::UpdateHangers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "UpdateHangers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::updateLight
// Il2CppName: updateLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)(bool)>(&GorillaTagScripts::ChristmasTree::updateLight)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "updateLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ChristmasTree::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTagScripts::ChristmasTree::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ChristmasTree*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ChristmasTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
