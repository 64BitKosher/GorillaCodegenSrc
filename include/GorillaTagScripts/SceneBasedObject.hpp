// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: SceneBasedObject
  class SceneBasedObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::SceneBasedObject);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::SceneBasedObject*, "GorillaTagScripts", "SceneBasedObject");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.SceneBasedObject
  // [TokenAttribute] Offset: FFFFFFFF
  class SceneBasedObject : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GTZone zone
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GTZone zone;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTZone) == 0x4);
    public:
    // Get instance field reference: public GTZone zone
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& dyn_zone();
    // public System.Boolean IsLocalPlayerInScene()
    // Offset: 0x2810E00
    bool IsLocalPlayerInScene();
    // public System.Void .ctor()
    // Offset: 0x2810E90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SceneBasedObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::SceneBasedObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SceneBasedObject*, creationType>()));
    }
  }; // GorillaTagScripts.SceneBasedObject
  #pragma pack(pop)
  static check_size<sizeof(SceneBasedObject), 32 + sizeof(::GlobalNamespace::GTZone)> __GorillaTagScripts_SceneBasedObjectSizeCheck;
  static_assert(sizeof(SceneBasedObject) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::SceneBasedObject::IsLocalPlayerInScene
// Il2CppName: IsLocalPlayerInScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::SceneBasedObject::*)()>(&GorillaTagScripts::SceneBasedObject::IsLocalPlayerInScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::SceneBasedObject*), "IsLocalPlayerInScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::SceneBasedObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
