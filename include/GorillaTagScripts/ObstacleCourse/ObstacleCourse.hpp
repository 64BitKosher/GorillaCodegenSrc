// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GorillaTagScripts::ObstacleCourse
namespace GorillaTagScripts::ObstacleCourse {
  // Forward declaring type: WinnerScoreboard
  class WinnerScoreboard;
  // Forward declaring type: ObstacleCourseZoneTrigger
  class ObstacleCourseZoneTrigger;
  // Forward declaring type: TappableBell
  class TappableBell;
  // Skipping declaration: RaceState because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RigContainer
  class RigContainer;
  // Forward declaring type: ZoneBasedObject
  class ZoneBasedObject;
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: GorillaTagScripts.ObstacleCourse
namespace GorillaTagScripts::ObstacleCourse {
  // Forward declaring type: ObstacleCourse
  class ObstacleCourse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::ObstacleCourse::ObstacleCourse);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::ObstacleCourse::ObstacleCourse*, "GorillaTagScripts.ObstacleCourse", "ObstacleCourse");
// Type namespace: GorillaTagScripts.ObstacleCourse
namespace GorillaTagScripts::ObstacleCourse {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.ObstacleCourse.ObstacleCourse
  // [TokenAttribute] Offset: FFFFFFFF
  class ObstacleCourse : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState
    struct RaceState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RaceState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RaceState
      constexpr RaceState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Started
      static constexpr const int Started = 0;
      // Get static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Started
      static ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState _get_Started();
      // Set static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Started
      static void _set_Started(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState value);
      // static field const value: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Waiting
      static constexpr const int Waiting = 1;
      // Get static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Waiting
      static ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState _get_Waiting();
      // Set static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Waiting
      static void _set_Waiting(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState value);
      // static field const value: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Finished
      static constexpr const int Finished = 2;
      // Get static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Finished
      static ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState _get_Finished();
      // Set static field: static public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState Finished
      static void _set_Finished(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState
    #pragma pack(pop)
    static check_size<sizeof(ObstacleCourse::RaceState), 0 + sizeof(int)> __GorillaTagScripts_ObstacleCourse_ObstacleCourse_RaceStateSizeCheck;
    static_assert(sizeof(ObstacleCourse::RaceState) == 0x4);
    public:
    // public GorillaTagScripts.ObstacleCourse.WinnerScoreboard scoreboard
    // Size: 0x8
    // Offset: 0x20
    ::GorillaTagScripts::ObstacleCourse::WinnerScoreboard* scoreboard;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::ObstacleCourse::WinnerScoreboard*) == 0x8);
    // private System.Int32 <winnerActorNumber>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int winnerActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: winnerActorNumber and: winnerRig
    char __padding1[0x4] = {};
    // private RigContainer winnerRig
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RigContainer* winnerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RigContainer*) == 0x8);
    // public GorillaTagScripts.ObstacleCourse.ObstacleCourseZoneTrigger[] zoneTriggers
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GorillaTagScripts::ObstacleCourse::ObstacleCourseZoneTrigger*> zoneTriggers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTagScripts::ObstacleCourse::ObstacleCourseZoneTrigger*>) == 0x8);
    // public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState currentState
    // Size: 0x4
    // Offset: 0x40
    ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState currentState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState) == 0x4);
    // Padding between fields: currentState and: confettiParticle
    char __padding4[0x4] = {};
    // private UnityEngine.ParticleSystem confettiParticle
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::ParticleSystem* confettiParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Renderer bannerRenderer
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Renderer* bannerRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private GorillaTagScripts.ObstacleCourse.TappableBell TappableBell
    // Size: 0x8
    // Offset: 0x58
    ::GorillaTagScripts::ObstacleCourse::TappableBell* TappableBell;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::ObstacleCourse::TappableBell*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single cooldownTime
    // Size: 0x4
    // Offset: 0x68
    float cooldownTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cooldownTime and: zoneBasedVisuals
    char __padding9[0x4] = {};
    // private ZoneBasedObject[] zoneBasedVisuals
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::GlobalNamespace::ZoneBasedObject*> zoneBasedVisuals;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ZoneBasedObject*>) == 0x8);
    // public UnityEngine.GameObject leftGate
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* leftGate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightGate
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* rightGate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 numPlayersOnCourse
    // Size: 0x4
    // Offset: 0x88
    int numPlayersOnCourse;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single startTime
    // Size: 0x4
    // Offset: 0x8C
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public GorillaTagScripts.ObstacleCourse.WinnerScoreboard scoreboard
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::ObstacleCourse::WinnerScoreboard*& dyn_scoreboard();
    // Get instance field reference: private System.Int32 <winnerActorNumber>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$winnerActorNumber$k__BackingField();
    // Get instance field reference: private RigContainer winnerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& dyn_winnerRig();
    // Get instance field reference: public GorillaTagScripts.ObstacleCourse.ObstacleCourseZoneTrigger[] zoneTriggers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTagScripts::ObstacleCourse::ObstacleCourseZoneTrigger*>& dyn_zoneTriggers();
    // Get instance field reference: public GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState currentState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState& dyn_currentState();
    // Get instance field reference: private UnityEngine.ParticleSystem confettiParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_confettiParticle();
    // Get instance field reference: private UnityEngine.Renderer bannerRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_bannerRenderer();
    // Get instance field reference: private GorillaTagScripts.ObstacleCourse.TappableBell TappableBell
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::ObstacleCourse::TappableBell*& dyn_TappableBell();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single cooldownTime
    [[deprecated("Use field access instead!")]] float& dyn_cooldownTime();
    // Get instance field reference: private ZoneBasedObject[] zoneBasedVisuals
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneBasedObject*>& dyn_zoneBasedVisuals();
    // Get instance field reference: public UnityEngine.GameObject leftGate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftGate();
    // Get instance field reference: public UnityEngine.GameObject rightGate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightGate();
    // Get instance field reference: private System.Int32 numPlayersOnCourse
    [[deprecated("Use field access instead!")]] int& dyn_numPlayersOnCourse();
    // Get instance field reference: private System.Single startTime
    [[deprecated("Use field access instead!")]] float& dyn_startTime();
    // public System.Int32 get_winnerActorNumber()
    // Offset: 0x2810E98
    int get_winnerActorNumber();
    // private System.Void set_winnerActorNumber(System.Int32 value)
    // Offset: 0x2810EA0
    void set_winnerActorNumber(int value);
    // private System.Void Awake()
    // Offset: 0x2810EA8
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x28113EC
    void OnDestroy();
    // private System.Void Start()
    // Offset: 0x281171C
    void Start();
    // public System.Void InvokeUpdate()
    // Offset: 0x2811734
    void InvokeUpdate();
    // public System.Void OnPlayerEnterZone(UnityEngine.Collider other)
    // Offset: 0x28118B4
    void OnPlayerEnterZone(::UnityEngine::Collider* other);
    // public System.Void OnPlayerExitZone(UnityEngine.Collider other)
    // Offset: 0x2811928
    void OnPlayerExitZone(::UnityEngine::Collider* other);
    // private System.Void RestartTimer(System.Boolean playFx)
    // Offset: 0x2811728
    void RestartTimer(bool playFx);
    // private System.Void EndRace()
    // Offset: 0x2811AB4
    void EndRace();
    // public System.Void PlayWinningEffects()
    // Offset: 0x2811ADC
    void PlayWinningEffects();
    // public System.Void OnEndLineTrigger(VRRig rig)
    // Offset: 0x2811C58
    void OnEndLineTrigger(::GlobalNamespace::VRRig* rig);
    // public System.Void Deserialize(System.Int32 _winnerActorNumber, GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState _currentState)
    // Offset: 0x2811D0C
    void Deserialize(int _winnerActorNumber, ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState _currentState);
    // private System.Void UpdateState(GorillaTagScripts.ObstacleCourse.ObstacleCourse/RaceState state, System.Boolean playFX)
    // Offset: 0x281199C
    void UpdateState(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState state, bool playFX);
    // private System.Void UpdateStartingGate()
    // Offset: 0x2811FE0
    void UpdateStartingGate();
    // public System.Void .ctor()
    // Offset: 0x2812278
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObstacleCourse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::ObstacleCourse::ObstacleCourse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObstacleCourse*, creationType>()));
    }
  }; // GorillaTagScripts.ObstacleCourse.ObstacleCourse
  #pragma pack(pop)
  static check_size<sizeof(ObstacleCourse), 140 + sizeof(float)> __GorillaTagScripts_ObstacleCourse_ObstacleCourseSizeCheck;
  static_assert(sizeof(ObstacleCourse) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState, "GorillaTagScripts.ObstacleCourse", "ObstacleCourse/RaceState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::get_winnerActorNumber
// Il2CppName: get_winnerActorNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::get_winnerActorNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "get_winnerActorNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::set_winnerActorNumber
// Il2CppName: set_winnerActorNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(int)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::set_winnerActorNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "set_winnerActorNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnPlayerEnterZone
// Il2CppName: OnPlayerEnterZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnPlayerEnterZone)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "OnPlayerEnterZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnPlayerExitZone
// Il2CppName: OnPlayerExitZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnPlayerExitZone)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "OnPlayerExitZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::RestartTimer
// Il2CppName: RestartTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(bool)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::RestartTimer)> {
  static const MethodInfo* get() {
    static auto* playFx = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "RestartTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playFx});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::EndRace
// Il2CppName: EndRace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::EndRace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "EndRace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::PlayWinningEffects
// Il2CppName: PlayWinningEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::PlayWinningEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "PlayWinningEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnEndLineTrigger
// Il2CppName: OnEndLineTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(::GlobalNamespace::VRRig*)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::OnEndLineTrigger)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "OnEndLineTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(int, ::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::Deserialize)> {
  static const MethodInfo* get() {
    static auto* _winnerActorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* _currentState = &::il2cpp_utils::GetClassFromName("GorillaTagScripts.ObstacleCourse", "ObstacleCourse/RaceState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_winnerActorNumber, _currentState});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)(::GorillaTagScripts::ObstacleCourse::ObstacleCourse::RaceState, bool)>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::UpdateState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaTagScripts.ObstacleCourse", "ObstacleCourse/RaceState")->byval_arg;
    static auto* playFX = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, playFX});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::UpdateStartingGate
// Il2CppName: UpdateStartingGate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::ObstacleCourse::ObstacleCourse::*)()>(&GorillaTagScripts::ObstacleCourse::ObstacleCourse::UpdateStartingGate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::ObstacleCourse::ObstacleCourse*), "UpdateStartingGate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::ObstacleCourse::ObstacleCourse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
