// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction
  class UnityAction;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: AttachPoint
  class AttachPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::AttachPoint);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::AttachPoint*, "GorillaTagScripts", "AttachPoint");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x33
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.AttachPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class AttachPoint : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform attachPoint
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* attachPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Events.UnityAction onHookedChanged
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityAction* onHookedChanged;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction*) == 0x8);
    // private System.Boolean isHooked
    // Size: 0x1
    // Offset: 0x30
    bool isHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wasHooked
    // Size: 0x1
    // Offset: 0x31
    bool wasHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean inForest
    // Size: 0x1
    // Offset: 0x32
    bool inForest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Transform attachPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_attachPoint();
    // Get instance field reference: public UnityEngine.Events.UnityAction onHookedChanged
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction*& dyn_onHookedChanged();
    // Get instance field reference: private System.Boolean isHooked
    [[deprecated("Use field access instead!")]] bool& dyn_isHooked();
    // Get instance field reference: private System.Boolean wasHooked
    [[deprecated("Use field access instead!")]] bool& dyn_wasHooked();
    // Get instance field reference: public System.Boolean inForest
    [[deprecated("Use field access instead!")]] bool& dyn_inForest();
    // private System.Void Start()
    // Offset: 0x27F0768
    void Start();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27F0798
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x27F0C08
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void UpdateHookState(System.Boolean isHooked)
    // Offset: 0x27F08C4
    void UpdateHookState(bool isHooked);
    // System.Void SetIsHook(System.Boolean isHooked)
    // Offset: 0x27F0D1C
    void SetIsHook(bool isHooked);
    // public System.Boolean IsHooked()
    // Offset: 0x27F08E8
    bool IsHooked();
    // public System.Void .ctor()
    // Offset: 0x27F0D40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AttachPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::AttachPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AttachPoint*, creationType>()));
    }
  }; // GorillaTagScripts.AttachPoint
  #pragma pack(pop)
  static check_size<sizeof(AttachPoint), 50 + sizeof(bool)> __GorillaTagScripts_AttachPointSizeCheck;
  static_assert(sizeof(AttachPoint) == 0x33);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::AttachPoint::*)()>(&GorillaTagScripts::AttachPoint::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::AttachPoint::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::AttachPoint::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::AttachPoint::*)(::UnityEngine::Collider*)>(&GorillaTagScripts::AttachPoint::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::UpdateHookState
// Il2CppName: UpdateHookState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::AttachPoint::*)(bool)>(&GorillaTagScripts::AttachPoint::UpdateHookState)> {
  static const MethodInfo* get() {
    static auto* isHooked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "UpdateHookState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isHooked});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::SetIsHook
// Il2CppName: SetIsHook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::AttachPoint::*)(bool)>(&GorillaTagScripts::AttachPoint::SetIsHook)> {
  static const MethodInfo* get() {
    static auto* isHooked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "SetIsHook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isHooked});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::IsHooked
// Il2CppName: IsHooked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::AttachPoint::*)()>(&GorillaTagScripts::AttachPoint::IsHooked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::AttachPoint*), "IsHooked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::AttachPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
