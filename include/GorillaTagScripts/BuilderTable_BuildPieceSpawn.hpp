// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTagScripts.BuilderTable
#include "GorillaTagScripts/BuilderTable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderTable::BuildPieceSpawn);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderTable::BuildPieceSpawn*, "GorillaTagScripts", "BuilderTable/BuildPieceSpawn");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderTable/BuildPieceSpawn
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderTable::BuildPieceSpawn : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject buildPiecePrefab
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* buildPiecePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x18
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.GameObject buildPiecePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_buildPiecePrefab();
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // public System.Void .ctor()
    // Offset: 0x28004C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderTable::BuildPieceSpawn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderTable::BuildPieceSpawn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderTable::BuildPieceSpawn*, creationType>()));
    }
  }; // GorillaTagScripts.BuilderTable/BuildPieceSpawn
  #pragma pack(pop)
  static check_size<sizeof(BuilderTable::BuildPieceSpawn), 24 + sizeof(int)> __GorillaTagScripts_BuilderTable_BuildPieceSpawnSizeCheck;
  static_assert(sizeof(BuilderTable::BuildPieceSpawn) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderTable::BuildPieceSpawn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
