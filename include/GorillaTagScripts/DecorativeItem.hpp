// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: DecorativeItemReliableState
  class DecorativeItemReliableState;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`1<T0>
  template<typename T0>
  class UnityAction_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: DecorativeItem
  class DecorativeItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::DecorativeItem);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::DecorativeItem*, "GorillaTagScripts", "DecorativeItem");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTagScripts.DecorativeItem
  // [TokenAttribute] Offset: FFFFFFFF
  class DecorativeItem : public ::GlobalNamespace::TransferrableObject {
    public:
    // Nested type: ::GorillaTagScripts::DecorativeItem::DecorativeItemState
    struct DecorativeItemState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.DecorativeItem/DecorativeItemState
    // [TokenAttribute] Offset: FFFFFFFF
    struct DecorativeItemState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DecorativeItemState
      constexpr DecorativeItemState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.DecorativeItem/DecorativeItemState isHeld
      static constexpr const int isHeld = 1;
      // Get static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState isHeld
      static ::GorillaTagScripts::DecorativeItem::DecorativeItemState _get_isHeld();
      // Set static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState isHeld
      static void _set_isHeld(::GorillaTagScripts::DecorativeItem::DecorativeItemState value);
      // static field const value: static public GorillaTagScripts.DecorativeItem/DecorativeItemState dropped
      static constexpr const int dropped = 2;
      // Get static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState dropped
      static ::GorillaTagScripts::DecorativeItem::DecorativeItemState _get_dropped();
      // Set static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState dropped
      static void _set_dropped(::GorillaTagScripts::DecorativeItem::DecorativeItemState value);
      // static field const value: static public GorillaTagScripts.DecorativeItem/DecorativeItemState snapped
      static constexpr const int snapped = 4;
      // Get static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState snapped
      static ::GorillaTagScripts::DecorativeItem::DecorativeItemState _get_snapped();
      // Set static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState snapped
      static void _set_snapped(::GorillaTagScripts::DecorativeItem::DecorativeItemState value);
      // static field const value: static public GorillaTagScripts.DecorativeItem/DecorativeItemState respawn
      static constexpr const int respawn = 8;
      // Get static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState respawn
      static ::GorillaTagScripts::DecorativeItem::DecorativeItemState _get_respawn();
      // Set static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState respawn
      static void _set_respawn(::GorillaTagScripts::DecorativeItem::DecorativeItemState value);
      // static field const value: static public GorillaTagScripts.DecorativeItem/DecorativeItemState none
      static constexpr const int none = 16;
      // Get static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState none
      static ::GorillaTagScripts::DecorativeItem::DecorativeItemState _get_none();
      // Set static field: static public GorillaTagScripts.DecorativeItem/DecorativeItemState none
      static void _set_none(::GorillaTagScripts::DecorativeItem::DecorativeItemState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.DecorativeItem/DecorativeItemState
    #pragma pack(pop)
    static check_size<sizeof(DecorativeItem::DecorativeItemState), 0 + sizeof(int)> __GorillaTagScripts_DecorativeItem_DecorativeItemStateSizeCheck;
    static_assert(sizeof(DecorativeItem::DecorativeItemState) == 0x4);
    public:
    // public GorillaTagScripts.DecorativeItemReliableState reliableState
    // Size: 0x8
    // Offset: 0x2D0
    ::GorillaTagScripts::DecorativeItemReliableState* reliableState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::DecorativeItemReliableState*) == 0x8);
    // public UnityEngine.Events.UnityAction`1<GorillaTagScripts.DecorativeItem> respawnItem
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::Events::UnityAction_1<::GorillaTagScripts::DecorativeItem*>* respawnItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityAction_1<::GorillaTagScripts::DecorativeItem*>*) == 0x8);
    // public UnityEngine.LayerMask breakItemLayerMask
    // Size: 0x4
    // Offset: 0x2E0
    ::UnityEngine::LayerMask breakItemLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Coroutine respawnTimer
    // Size: 0x8
    // Offset: 0x2E8
    ::UnityEngine::Coroutine* respawnTimer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.Transform parent
    // Size: 0x8
    // Offset: 0x2F0
    ::UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _respawnTimestamp
    // Size: 0x4
    // Offset: 0x2F8
    float respawnTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isSnapped
    // Size: 0x1
    // Offset: 0x2FC
    bool isSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Vector3 currentPosition
    // Size: 0xC
    // Offset: 0x300
    ::UnityEngine::Vector3 currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x310
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip snapAudio
    // Size: 0x8
    // Offset: 0x318
    ::UnityEngine::AudioClip* snapAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.GameObject shatterVFX
    // Size: 0x8
    // Offset: 0x320
    ::UnityEngine::GameObject* shatterVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private GorillaTagScripts.DecorativeItem/DecorativeItemState previousItemState
    // Size: 0x4
    // Offset: 0x328
    ::GorillaTagScripts::DecorativeItem::DecorativeItemState previousItemState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::DecorativeItem::DecorativeItemState) == 0x4);
    public:
    // Get instance field reference: public GorillaTagScripts.DecorativeItemReliableState reliableState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::DecorativeItemReliableState*& dyn_reliableState();
    // Get instance field reference: public UnityEngine.Events.UnityAction`1<GorillaTagScripts.DecorativeItem> respawnItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction_1<::GorillaTagScripts::DecorativeItem*>*& dyn_respawnItem();
    // Get instance field reference: public UnityEngine.LayerMask breakItemLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_breakItemLayerMask();
    // Get instance field reference: private UnityEngine.Coroutine respawnTimer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_respawnTimer();
    // Get instance field reference: private UnityEngine.Transform parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parent();
    // Get instance field reference: private System.Single _respawnTimestamp
    [[deprecated("Use field access instead!")]] float& dyn__respawnTimestamp();
    // Get instance field reference: private System.Boolean isSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_isSnapped();
    // Get instance field reference: private UnityEngine.Vector3 currentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentPosition();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip snapAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_snapAudio();
    // Get instance field reference: public UnityEngine.GameObject shatterVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_shatterVFX();
    // Get instance field reference: private GorillaTagScripts.DecorativeItem/DecorativeItemState previousItemState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::DecorativeItem::DecorativeItemState& dyn_previousItemState();
    // private System.Void OnStateChanged()
    // Offset: 0x2803F40
    void OnStateChanged();
    // private System.Void SetWillTeleport()
    // Offset: 0x2804370
    void SetWillTeleport();
    // public System.Void Respawn(UnityEngine.Vector3 randPosition, UnityEngine.Quaternion randRotation)
    // Offset: 0x2803FA0
    void Respawn(::UnityEngine::Vector3 randPosition, ::UnityEngine::Quaternion randRotation);
    // private System.Void PlayVFX(UnityEngine.GameObject vfx)
    // Offset: 0x28043AC
    void PlayVFX(::UnityEngine::GameObject* vfx);
    // private System.Boolean Reparent(UnityEngine.Transform _transform)
    // Offset: 0x28042C0
    bool Reparent(::UnityEngine::Transform* _transform);
    // public System.Void SnapItem(System.Boolean snap, UnityEngine.Vector3 attachPoint)
    // Offset: 0x27F0920
    void SnapItem(bool snap, ::UnityEngine::Vector3 attachPoint);
    // private System.Void InvokeRespawn()
    // Offset: 0x2804234
    void InvokeRespawn();
    // private System.Boolean ShouldPlayFX()
    // Offset: 0x280438C
    bool ShouldPlayFX();
    // private System.Void OnCollisionEnter(UnityEngine.Collision other)
    // Offset: 0x28045E8
    void OnCollisionEnter(::UnityEngine::Collision* other);
    // public override System.Boolean ShouldBeKinematic()
    // Offset: 0x2803EB4
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::ShouldBeKinematic()
    bool ShouldBeKinematic();
    // public override System.Void OnSpawn()
    // Offset: 0x2803ED8
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // protected override System.Void Start()
    // Offset: 0x2803F18
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Start()
    void Start();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x2804110
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x2804168
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x2804260
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x2804280
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public System.Void .ctor()
    // Offset: 0x2804698
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DecorativeItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::DecorativeItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DecorativeItem*, creationType>()));
    }
  }; // GorillaTagScripts.DecorativeItem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::DecorativeItem::DecorativeItemState, "GorillaTagScripts", "DecorativeItem/DecorativeItemState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::OnStateChanged
// Il2CppName: OnStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::OnStateChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "OnStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::SetWillTeleport
// Il2CppName: SetWillTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::SetWillTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "SetWillTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::Respawn
// Il2CppName: Respawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GorillaTagScripts::DecorativeItem::Respawn)> {
  static const MethodInfo* get() {
    static auto* randPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* randRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "Respawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{randPosition, randRotation});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::PlayVFX
// Il2CppName: PlayVFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)(::UnityEngine::GameObject*)>(&GorillaTagScripts::DecorativeItem::PlayVFX)> {
  static const MethodInfo* get() {
    static auto* vfx = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "PlayVFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vfx});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::Reparent
// Il2CppName: Reparent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::DecorativeItem::*)(::UnityEngine::Transform*)>(&GorillaTagScripts::DecorativeItem::Reparent)> {
  static const MethodInfo* get() {
    static auto* _transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "Reparent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_transform});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::SnapItem
// Il2CppName: SnapItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)(bool, ::UnityEngine::Vector3)>(&GorillaTagScripts::DecorativeItem::SnapItem)> {
  static const MethodInfo* get() {
    static auto* snap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* attachPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "SnapItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snap, attachPoint});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::InvokeRespawn
// Il2CppName: InvokeRespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::InvokeRespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "InvokeRespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::ShouldPlayFX
// Il2CppName: ShouldPlayFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::ShouldPlayFX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "ShouldPlayFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)(::UnityEngine::Collision*)>(&GorillaTagScripts::DecorativeItem::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::ShouldBeKinematic
// Il2CppName: ShouldBeKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::ShouldBeKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "ShouldBeKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)()>(&GorillaTagScripts::DecorativeItem::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::DecorativeItem::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GorillaTagScripts::DecorativeItem::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::DecorativeItem::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GorillaTagScripts::DecorativeItem::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::DecorativeItem*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::DecorativeItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
