// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BuilderPiece
  class BuilderPiece;
  // Forward declaring type: BuilderBumpGlow
  class BuilderBumpGlow;
  // Forward declaring type: BuilderShelf
  class BuilderShelf;
}
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderFactory
  class BuilderFactory;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: BuilderPool
  class BuilderPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::BuilderPool);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::BuilderPool*, "GorillaTagScripts", "BuilderPool");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.BuilderPool
  // [TokenAttribute] Offset: FFFFFFFF
  class BuilderPool : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.Generic.List`1<System.Collections.Generic.List`1<BuilderPiece>> piecePools
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*>* piecePools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> piecePoolLookup
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<int, int>* piecePoolLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // public System.Collections.Generic.List`1<BuilderBumpGlow> bumpGlowPool
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>* bumpGlowPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>*) == 0x8);
    // public BuilderBumpGlow bumpGlowPrefab
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BuilderBumpGlow* bumpGlowPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BuilderBumpGlow*) == 0x8);
    // private GorillaTagScripts.BuilderFactory factory
    // Size: 0x8
    // Offset: 0x40
    ::GorillaTagScripts::BuilderFactory* factory;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::BuilderFactory*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<BuilderPiece>> piecePools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::GlobalNamespace::BuilderPiece*>*>*& dyn_piecePools();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> piecePoolLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_piecePoolLookup();
    // Get instance field reference: public System.Collections.Generic.List`1<BuilderBumpGlow> bumpGlowPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BuilderBumpGlow*>*& dyn_bumpGlowPool();
    // Get instance field reference: public BuilderBumpGlow bumpGlowPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderBumpGlow*& dyn_bumpGlowPrefab();
    // Get instance field reference: private GorillaTagScripts.BuilderFactory factory
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::BuilderFactory*& dyn_factory();
    // public System.Void Setup(GorillaTagScripts.BuilderFactory factory)
    // Offset: 0x27F3E54
    void Setup(::GorillaTagScripts::BuilderFactory* factory);
    // public System.Void BuildFromShelves(System.Collections.Generic.List`1<BuilderShelf> shelves)
    // Offset: 0x27F4154
    void BuildFromShelves(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf*>* shelves);
    // private System.Void AddToPool(System.Int32 pieceType, System.Int32 count)
    // Offset: 0x27F4280
    void AddToPool(int pieceType, int count);
    // public BuilderPiece CreatePiece(System.Int32 pieceType)
    // Offset: 0x27F454C
    ::GlobalNamespace::BuilderPiece* CreatePiece(int pieceType);
    // public System.Void DestroyPiece(BuilderPiece piece)
    // Offset: 0x27F47FC
    void DestroyPiece(::GlobalNamespace::BuilderPiece* piece);
    // private System.Void AddToGlowBumpPool(System.Int32 count)
    // Offset: 0x27F3FA4
    void AddToGlowBumpPool(int count);
    // public BuilderBumpGlow CreateGlowBump()
    // Offset: 0x27F4B58
    ::GlobalNamespace::BuilderBumpGlow* CreateGlowBump();
    // public System.Void DestroyBumpGlow(BuilderBumpGlow bump)
    // Offset: 0x27F4C58
    void DestroyBumpGlow(::GlobalNamespace::BuilderBumpGlow* bump);
    // public System.Void .ctor()
    // Offset: 0x27F4E7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuilderPool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::BuilderPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuilderPool*, creationType>()));
    }
  }; // GorillaTagScripts.BuilderPool
  #pragma pack(pop)
  static check_size<sizeof(BuilderPool), 64 + sizeof(::GorillaTagScripts::BuilderFactory*)> __GorillaTagScripts_BuilderPoolSizeCheck;
  static_assert(sizeof(BuilderPool) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(::GorillaTagScripts::BuilderFactory*)>(&GorillaTagScripts::BuilderPool::Setup)> {
  static const MethodInfo* get() {
    static auto* factory = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "BuilderFactory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{factory});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::BuildFromShelves
// Il2CppName: BuildFromShelves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(::System::Collections::Generic::List_1<::GlobalNamespace::BuilderShelf*>*)>(&GorillaTagScripts::BuilderPool::BuildFromShelves)> {
  static const MethodInfo* get() {
    static auto* shelves = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BuilderShelf")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "BuildFromShelves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shelves});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::AddToPool
// Il2CppName: AddToPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(int, int)>(&GorillaTagScripts::BuilderPool::AddToPool)> {
  static const MethodInfo* get() {
    static auto* pieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "AddToPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceType, count});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::CreatePiece
// Il2CppName: CreatePiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderPiece* (GorillaTagScripts::BuilderPool::*)(int)>(&GorillaTagScripts::BuilderPool::CreatePiece)> {
  static const MethodInfo* get() {
    static auto* pieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "CreatePiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceType});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::DestroyPiece
// Il2CppName: DestroyPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(::GlobalNamespace::BuilderPiece*)>(&GorillaTagScripts::BuilderPool::DestroyPiece)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("", "BuilderPiece")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "DestroyPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::AddToGlowBumpPool
// Il2CppName: AddToGlowBumpPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(int)>(&GorillaTagScripts::BuilderPool::AddToGlowBumpPool)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "AddToGlowBumpPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::CreateGlowBump
// Il2CppName: CreateGlowBump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BuilderBumpGlow* (GorillaTagScripts::BuilderPool::*)()>(&GorillaTagScripts::BuilderPool::CreateGlowBump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "CreateGlowBump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::DestroyBumpGlow
// Il2CppName: DestroyBumpGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::BuilderPool::*)(::GlobalNamespace::BuilderBumpGlow*)>(&GorillaTagScripts::BuilderPool::DestroyBumpGlow)> {
  static const MethodInfo* get() {
    static auto* bump = &::il2cpp_utils::GetClassFromName("", "BuilderBumpGlow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::BuilderPool*), "DestroyBumpGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bump});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::BuilderPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
