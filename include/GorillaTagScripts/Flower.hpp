// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Skipping declaration: FlowerState because it is already included!
  // Forward declaring type: GorillaTimer
  class GorillaTimer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeePerchPoint
  class BeePerchPoint;
}
// Completed forward declares
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Forward declaring type: Flower
  class Flower;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTagScripts::Flower);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::Flower*, "GorillaTagScripts", "Flower");
// Type namespace: GorillaTagScripts
namespace GorillaTagScripts {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagScripts.Flower
  // [TokenAttribute] Offset: FFFFFFFF
  class Flower : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTagScripts::Flower::FlowerState
    struct FlowerState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagScripts.Flower/FlowerState
    // [TokenAttribute] Offset: FFFFFFFF
    struct FlowerState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FlowerState
      constexpr FlowerState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagScripts.Flower/FlowerState None
      static constexpr const int None = -1;
      // Get static field: static public GorillaTagScripts.Flower/FlowerState None
      static ::GorillaTagScripts::Flower::FlowerState _get_None();
      // Set static field: static public GorillaTagScripts.Flower/FlowerState None
      static void _set_None(::GorillaTagScripts::Flower::FlowerState value);
      // static field const value: static public GorillaTagScripts.Flower/FlowerState Healthy
      static constexpr const int Healthy = 0;
      // Get static field: static public GorillaTagScripts.Flower/FlowerState Healthy
      static ::GorillaTagScripts::Flower::FlowerState _get_Healthy();
      // Set static field: static public GorillaTagScripts.Flower/FlowerState Healthy
      static void _set_Healthy(::GorillaTagScripts::Flower::FlowerState value);
      // static field const value: static public GorillaTagScripts.Flower/FlowerState Middle
      static constexpr const int Middle = 1;
      // Get static field: static public GorillaTagScripts.Flower/FlowerState Middle
      static ::GorillaTagScripts::Flower::FlowerState _get_Middle();
      // Set static field: static public GorillaTagScripts.Flower/FlowerState Middle
      static void _set_Middle(::GorillaTagScripts::Flower::FlowerState value);
      // static field const value: static public GorillaTagScripts.Flower/FlowerState Wilted
      static constexpr const int Wilted = 2;
      // Get static field: static public GorillaTagScripts.Flower/FlowerState Wilted
      static ::GorillaTagScripts::Flower::FlowerState _get_Wilted();
      // Set static field: static public GorillaTagScripts.Flower/FlowerState Wilted
      static void _set_Wilted(::GorillaTagScripts::Flower::FlowerState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagScripts.Flower/FlowerState
    #pragma pack(pop)
    static check_size<sizeof(Flower::FlowerState), 0 + sizeof(int)> __GorillaTagScripts_Flower_FlowerStateSizeCheck;
    static_assert(sizeof(Flower::FlowerState) == 0x4);
    public:
    // private UnityEngine.Animator anim
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::SkinnedMeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // public GorillaTagScripts.GorillaTimer timer
    // Size: 0x8
    // Offset: 0x30
    ::GorillaTagScripts::GorillaTimer* timer;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::GorillaTimer*) == 0x8);
    // private BeePerchPoint perchPoint
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeePerchPoint* perchPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeePerchPoint*) == 0x8);
    // public UnityEngine.ParticleSystem wateredFx
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::ParticleSystem* wateredFx;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem sparkleFx
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::ParticleSystem* sparkleFx;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.GameObject meshStatesGameObject
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* meshStatesGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject[] meshStates
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::GameObject*> meshStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private GorillaTagScripts.Flower/FlowerState currentState
    // Size: 0x4
    // Offset: 0x60
    ::GorillaTagScripts::Flower::FlowerState currentState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::Flower::FlowerState) == 0x4);
    // Padding between fields: currentState and: id
    char __padding8[0x4] = {};
    // private System.String id
    // Size: 0x8
    // Offset: 0x68
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean shouldUpdateVisuals
    // Size: 0x1
    // Offset: 0x70
    bool shouldUpdateVisuals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldUpdateVisuals and: lastState
    char __padding10[0x3] = {};
    // private GorillaTagScripts.Flower/FlowerState lastState
    // Size: 0x4
    // Offset: 0x74
    ::GorillaTagScripts::Flower::FlowerState lastState;
    // Field size check
    static_assert(sizeof(::GorillaTagScripts::Flower::FlowerState) == 0x4);
    // private System.Boolean <IsWatered>k__BackingField
    // Size: 0x1
    // Offset: 0x78
    bool IsWatered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int32 healthy_to_middle
    static int _get_healthy_to_middle();
    // Set static field: static private readonly System.Int32 healthy_to_middle
    static void _set_healthy_to_middle(int value);
    // Get static field: static private readonly System.Int32 middle_to_healthy
    static int _get_middle_to_healthy();
    // Set static field: static private readonly System.Int32 middle_to_healthy
    static void _set_middle_to_healthy(int value);
    // Get static field: static private readonly System.Int32 wilted_to_middle
    static int _get_wilted_to_middle();
    // Set static field: static private readonly System.Int32 wilted_to_middle
    static void _set_wilted_to_middle(int value);
    // Get static field: static private readonly System.Int32 middle_to_wilted
    static int _get_middle_to_wilted();
    // Set static field: static private readonly System.Int32 middle_to_wilted
    static void _set_middle_to_wilted(int value);
    // Get instance field reference: private UnityEngine.Animator anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_anim();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_meshRenderer();
    // Get instance field reference: public GorillaTagScripts.GorillaTimer timer
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::GorillaTimer*& dyn_timer();
    // Get instance field reference: private BeePerchPoint perchPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeePerchPoint*& dyn_perchPoint();
    // Get instance field reference: public UnityEngine.ParticleSystem wateredFx
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_wateredFx();
    // Get instance field reference: public UnityEngine.ParticleSystem sparkleFx
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_sparkleFx();
    // Get instance field reference: public UnityEngine.GameObject meshStatesGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_meshStatesGameObject();
    // Get instance field reference: public UnityEngine.GameObject[] meshStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_meshStates();
    // Get instance field reference: private GorillaTagScripts.Flower/FlowerState currentState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::Flower::FlowerState& dyn_currentState();
    // Get instance field reference: private System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: private System.Boolean shouldUpdateVisuals
    [[deprecated("Use field access instead!")]] bool& dyn_shouldUpdateVisuals();
    // Get instance field reference: private GorillaTagScripts.Flower/FlowerState lastState
    [[deprecated("Use field access instead!")]] ::GorillaTagScripts::Flower::FlowerState& dyn_lastState();
    // Get instance field reference: private System.Boolean <IsWatered>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsWatered$k__BackingField();
    // public System.Boolean get_IsWatered()
    // Offset: 0x28063EC
    bool get_IsWatered();
    // private System.Void set_IsWatered(System.Boolean value)
    // Offset: 0x28063F4
    void set_IsWatered(bool value);
    // private System.Void Awake()
    // Offset: 0x2806400
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x2806628
    void OnDestroy();
    // public System.Void WaterFlower(System.Boolean isWatered)
    // Offset: 0x280670C
    void WaterFlower(bool isWatered);
    // public System.Void UpdateFlowerState(GorillaTagScripts.Flower/FlowerState newState, System.Boolean isWatered, System.Boolean updateVisual)
    // Offset: 0x2806790
    void UpdateFlowerState(::GorillaTagScripts::Flower::FlowerState newState, bool isWatered, bool updateVisual);
    // private System.Void LocalUpdateFlowers(GorillaTagScripts.Flower/FlowerState state, System.Boolean isWatered)
    // Offset: 0x2806910
    void LocalUpdateFlowers(::GorillaTagScripts::Flower::FlowerState state, bool isWatered);
    // private System.Void HandleOnFlowerTimerEnded(GorillaTagScripts.GorillaTimer _timer)
    // Offset: 0x2806B30
    void HandleOnFlowerTimerEnded(::GorillaTagScripts::GorillaTimer* _timer);
    // private System.Void ChangeState(GorillaTagScripts.Flower/FlowerState state)
    // Offset: 0x2806900
    void ChangeState(::GorillaTagScripts::Flower::FlowerState state);
    // public GorillaTagScripts.Flower/FlowerState GetCurrentState()
    // Offset: 0x2806C00
    ::GorillaTagScripts::Flower::FlowerState GetCurrentState();
    // public System.Void OnAnimationIsDone(System.Int32 state)
    // Offset: 0x2806C08
    void OnAnimationIsDone(int state);
    // public System.Void UpdateVisuals(System.Boolean enable)
    // Offset: 0x2806CB8
    void UpdateVisuals(bool enable);
    // public System.Void AnimCatch()
    // Offset: 0x2806CE0
    void AnimCatch();
    // public System.Void .ctor()
    // Offset: 0x2806D54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Flower* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTagScripts::Flower::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Flower*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2806D5C
    static void _cctor();
  }; // GorillaTagScripts.Flower
  #pragma pack(pop)
  static check_size<sizeof(Flower), 120 + sizeof(bool)> __GorillaTagScripts_FlowerSizeCheck;
  static_assert(sizeof(Flower) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTagScripts::Flower::FlowerState, "GorillaTagScripts", "Flower/FlowerState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTagScripts::Flower::get_IsWatered
// Il2CppName: get_IsWatered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTagScripts::Flower::*)()>(&GorillaTagScripts::Flower::get_IsWatered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "get_IsWatered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::set_IsWatered
// Il2CppName: set_IsWatered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(bool)>(&GorillaTagScripts::Flower::set_IsWatered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "set_IsWatered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)()>(&GorillaTagScripts::Flower::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)()>(&GorillaTagScripts::Flower::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::WaterFlower
// Il2CppName: WaterFlower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(bool)>(&GorillaTagScripts::Flower::WaterFlower)> {
  static const MethodInfo* get() {
    static auto* isWatered = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "WaterFlower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isWatered});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::UpdateFlowerState
// Il2CppName: UpdateFlowerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(::GorillaTagScripts::Flower::FlowerState, bool, bool)>(&GorillaTagScripts::Flower::UpdateFlowerState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "Flower/FlowerState")->byval_arg;
    static auto* isWatered = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateVisual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "UpdateFlowerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, isWatered, updateVisual});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::LocalUpdateFlowers
// Il2CppName: LocalUpdateFlowers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(::GorillaTagScripts::Flower::FlowerState, bool)>(&GorillaTagScripts::Flower::LocalUpdateFlowers)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "Flower/FlowerState")->byval_arg;
    static auto* isWatered = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "LocalUpdateFlowers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, isWatered});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::HandleOnFlowerTimerEnded
// Il2CppName: HandleOnFlowerTimerEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(::GorillaTagScripts::GorillaTimer*)>(&GorillaTagScripts::Flower::HandleOnFlowerTimerEnded)> {
  static const MethodInfo* get() {
    static auto* _timer = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "GorillaTimer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "HandleOnFlowerTimerEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_timer});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::ChangeState
// Il2CppName: ChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(::GorillaTagScripts::Flower::FlowerState)>(&GorillaTagScripts::Flower::ChangeState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaTagScripts", "Flower/FlowerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "ChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::GetCurrentState
// Il2CppName: GetCurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTagScripts::Flower::FlowerState (GorillaTagScripts::Flower::*)()>(&GorillaTagScripts::Flower::GetCurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "GetCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::OnAnimationIsDone
// Il2CppName: OnAnimationIsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(int)>(&GorillaTagScripts::Flower::OnAnimationIsDone)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "OnAnimationIsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)(bool)>(&GorillaTagScripts::Flower::UpdateVisuals)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::AnimCatch
// Il2CppName: AnimCatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTagScripts::Flower::*)()>(&GorillaTagScripts::Flower::AnimCatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), "AnimCatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTagScripts::Flower::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTagScripts::Flower::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTagScripts::Flower::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTagScripts::Flower*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
