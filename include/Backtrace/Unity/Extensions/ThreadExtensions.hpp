// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Extensions
namespace Backtrace::Unity::Extensions {
  // Forward declaring type: ThreadExtensions
  class ThreadExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Extensions::ThreadExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Extensions::ThreadExtensions*, "Backtrace.Unity.Extensions", "ThreadExtensions");
// Type namespace: Backtrace.Unity.Extensions
namespace Backtrace::Unity::Extensions {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Extensions.ThreadExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ThreadExtensions : public ::Il2CppObject {
    public:
    // static public System.String GenerateValidThreadName(System.Threading.Thread thread)
    // Offset: 0x2A6C804
    static ::StringW GenerateValidThreadName(::System::Threading::Thread* thread);
  }; // Backtrace.Unity.Extensions.ThreadExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Extensions::ThreadExtensions::GenerateValidThreadName
// Il2CppName: GenerateValidThreadName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Threading::Thread*)>(&Backtrace::Unity::Extensions::ThreadExtensions::GenerateValidThreadName)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "Thread")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Extensions::ThreadExtensions*), "GenerateValidThreadName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread});
  }
};
