// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceClient
#include "Backtrace/Unity/Interfaces/IBacktraceClient.hpp"
// Including type: Backtrace.Unity.Types.ReportFilterType
#include "Backtrace/Unity/Types/ReportFilterType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity
namespace Backtrace::Unity {
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
  // Forward declaring type: BacktraceLogManager
  class BacktraceLogManager;
  // Forward declaring type: BacktraceData
  class BacktraceData;
  // Forward declaring type: BacktraceResult
  class BacktraceResult;
  // Forward declaring type: BacktraceUnhandledException
  class BacktraceUnhandledException;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs
namespace Backtrace::Unity::Model::Breadcrumbs {
  // Forward declaring type: BacktraceBreadcrumbs
  class BacktraceBreadcrumbs;
  // Forward declaring type: IBacktraceBreadcrumbs
  class IBacktraceBreadcrumbs;
}
// Forward declaring namespace: Backtrace::Unity::Model::JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Forward declaring type: AttributeProvider
  class AttributeProvider;
}
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: BacktraceMetrics
  class BacktraceMetrics;
  // Forward declaring type: ReportLimitWatcher
  class ReportLimitWatcher;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: Backtrace::Unity::Interfaces
namespace Backtrace::Unity::Interfaces {
  // Forward declaring type: IBacktraceDatabase
  class IBacktraceDatabase;
  // Forward declaring type: IBacktraceApi
  class IBacktraceApi;
  // Forward declaring type: IBacktraceMetrics
  class IBacktraceMetrics;
}
// Forward declaring namespace: Backtrace::Unity::Runtime::Native
namespace Backtrace::Unity::Runtime::Native {
  // Forward declaring type: INativeClient
  class INativeClient;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: Backtrace.Unity
namespace Backtrace::Unity {
  // Forward declaring type: BacktraceClient
  class BacktraceClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::BacktraceClient);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::BacktraceClient*, "Backtrace.Unity", "BacktraceClient");
// Type namespace: Backtrace.Unity
namespace Backtrace::Unity {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.BacktraceClient
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class BacktraceClient : public ::UnityEngine::MonoBehaviour/*, public ::Backtrace::Unity::Interfaces::IBacktraceClient*/ {
    public:
    // Nested type: ::Backtrace::Unity::BacktraceClient::$$c
    class $$c;
    // Nested type: ::Backtrace::Unity::BacktraceClient::$$c__DisplayClass87_0
    class $$c__DisplayClass87_0;
    // Nested type: ::Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87
    class $CollectDataAndSend$d__87;
    public:
    // public Backtrace.Unity.Model.BacktraceConfiguration Configuration
    // Size: 0x8
    // Offset: 0x20
    ::Backtrace::Unity::Model::BacktraceConfiguration* Configuration;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceConfiguration*) == 0x8);
    // private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    // Size: 0x8
    // Offset: 0x28
    ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs* breadcrumbs;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*) == 0x8);
    // private System.Boolean <Enabled>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Enabled and: attributeProvider
    char __padding2[0x7] = {};
    // private Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    // Size: 0x8
    // Offset: 0x38
    ::Backtrace::Unity::Model::JsonData::AttributeProvider* attributeProvider;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::AttributeProvider*) == 0x8);
    // private Backtrace.Unity.Services.BacktraceMetrics _metrics
    // Size: 0x8
    // Offset: 0x40
    ::Backtrace::Unity::Services::BacktraceMetrics* metrics;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Services::BacktraceMetrics*) == 0x8);
    // private System.Random _random
    // Size: 0x8
    // Offset: 0x48
    ::System::Random* random;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // System.Collections.Generic.Stack`1<Backtrace.Unity.Model.BacktraceReport> BackgroundExceptions
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Stack_1<::Backtrace::Unity::Model::BacktraceReport*>* BackgroundExceptions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Backtrace::Unity::Model::BacktraceReport*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _clientReportAttachments
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::HashSet_1<::StringW>* clientReportAttachments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // public Backtrace.Unity.Interfaces.IBacktraceDatabase Database
    // Size: 0x8
    // Offset: 0x60
    ::Backtrace::Unity::Interfaces::IBacktraceDatabase* Database;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Interfaces::IBacktraceDatabase*) == 0x8);
    // private Backtrace.Unity.Interfaces.IBacktraceApi _backtraceApi
    // Size: 0x8
    // Offset: 0x68
    ::Backtrace::Unity::Interfaces::IBacktraceApi* backtraceApi;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Interfaces::IBacktraceApi*) == 0x8);
    // private Backtrace.Unity.Services.ReportLimitWatcher _reportLimitWatcher
    // Size: 0x8
    // Offset: 0x70
    ::Backtrace::Unity::Services::ReportLimitWatcher* reportLimitWatcher;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Services::ReportLimitWatcher*) == 0x8);
    // private Backtrace.Unity.Model.BacktraceLogManager _backtraceLogManager
    // Size: 0x8
    // Offset: 0x78
    ::Backtrace::Unity::Model::BacktraceLogManager* backtraceLogManager;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceLogManager*) == 0x8);
    // System.Action`1<Backtrace.Unity.Model.BacktraceReport> _onClientReportLimitReached
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>* onClientReportLimitReached;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>*) == 0x8);
    // public System.Func`2<Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceData> BeforeSend
    // Size: 0x8
    // Offset: 0x88
    ::System::Func_2<::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceData*>* BeforeSend;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceData*>*) == 0x8);
    // public System.Func`4<Backtrace.Unity.Types.ReportFilterType,System.Exception,System.String,System.Boolean> SkipReport
    // Size: 0x8
    // Offset: 0x90
    ::System::Func_4<::Backtrace::Unity::Types::ReportFilterType, ::System::Exception*, ::StringW, bool>* SkipReport;
    // Field size check
    static_assert(sizeof(::System::Func_4<::Backtrace::Unity::Types::ReportFilterType, ::System::Exception*, ::StringW, bool>*) == 0x8);
    // public System.Action`1<System.Exception> OnUnhandledApplicationException
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_1<::System::Exception*>* OnUnhandledApplicationException;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::Exception*>*) == 0x8);
    // private Backtrace.Unity.Runtime.Native.INativeClient _nativeClient
    // Size: 0x8
    // Offset: 0xA0
    ::Backtrace::Unity::Runtime::Native::INativeClient* nativeClient;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Runtime::Native::INativeClient*) == 0x8);
    // private System.Threading.Thread _current
    // Size: 0x8
    // Offset: 0xA8
    ::System::Threading::Thread* current;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceClient
    operator ::Backtrace::Unity::Interfaces::IBacktraceClient() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceClient*>(this);
    }
    // static field const value: static public System.String VERSION
    static constexpr const char* _VERSION = "3.7.8";
    // Get static field: static public System.String VERSION
    static ::StringW _get_VERSION();
    // Set static field: static public System.String VERSION
    static void _set_VERSION(::StringW value);
    // static field const value: static System.String DefaultBacktraceGameObjectName
    static constexpr const char* DefaultBacktraceGameObjectName = "BacktraceClient";
    // Get static field: static System.String DefaultBacktraceGameObjectName
    static ::StringW _get_DefaultBacktraceGameObjectName();
    // Set static field: static System.String DefaultBacktraceGameObjectName
    static void _set_DefaultBacktraceGameObjectName(::StringW value);
    // Get static field: static private Backtrace.Unity.BacktraceClient _instance
    static ::Backtrace::Unity::BacktraceClient* _get__instance();
    // Set static field: static private Backtrace.Unity.BacktraceClient _instance
    static void _set__instance(::Backtrace::Unity::BacktraceClient* value);
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceConfiguration Configuration
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceConfiguration*& dyn_Configuration();
    // Get instance field reference: private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*& dyn__breadcrumbs();
    // Get instance field reference: private System.Boolean <Enabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Enabled$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::AttributeProvider*& dyn__attributeProvider();
    // Get instance field reference: private Backtrace.Unity.Services.BacktraceMetrics _metrics
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Services::BacktraceMetrics*& dyn__metrics();
    // Get instance field reference: private System.Random _random
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn__random();
    // Get instance field reference: System.Collections.Generic.Stack`1<Backtrace.Unity.Model.BacktraceReport> BackgroundExceptions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Backtrace::Unity::Model::BacktraceReport*>*& dyn_BackgroundExceptions();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _clientReportAttachments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__clientReportAttachments();
    // Get instance field reference: public Backtrace.Unity.Interfaces.IBacktraceDatabase Database
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Interfaces::IBacktraceDatabase*& dyn_Database();
    // Get instance field reference: private Backtrace.Unity.Interfaces.IBacktraceApi _backtraceApi
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Interfaces::IBacktraceApi*& dyn__backtraceApi();
    // Get instance field reference: private Backtrace.Unity.Services.ReportLimitWatcher _reportLimitWatcher
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Services::ReportLimitWatcher*& dyn__reportLimitWatcher();
    // Get instance field reference: private Backtrace.Unity.Model.BacktraceLogManager _backtraceLogManager
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceLogManager*& dyn__backtraceLogManager();
    // Get instance field reference: System.Action`1<Backtrace.Unity.Model.BacktraceReport> _onClientReportLimitReached
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>*& dyn__onClientReportLimitReached();
    // Get instance field reference: public System.Func`2<Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceData> BeforeSend
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceData*>*& dyn_BeforeSend();
    // Get instance field reference: public System.Func`4<Backtrace.Unity.Types.ReportFilterType,System.Exception,System.String,System.Boolean> SkipReport
    [[deprecated("Use field access instead!")]] ::System::Func_4<::Backtrace::Unity::Types::ReportFilterType, ::System::Exception*, ::StringW, bool>*& dyn_SkipReport();
    // Get instance field reference: public System.Action`1<System.Exception> OnUnhandledApplicationException
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::Exception*>*& dyn_OnUnhandledApplicationException();
    // Get instance field reference: private Backtrace.Unity.Runtime.Native.INativeClient _nativeClient
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Runtime::Native::INativeClient*& dyn__nativeClient();
    // Get instance field reference: private System.Threading.Thread _current
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn__current();
    // public Backtrace.Unity.Model.Breadcrumbs.IBacktraceBreadcrumbs get_Breadcrumbs()
    // Offset: 0x2A4DE1C
    ::Backtrace::Unity::Model::Breadcrumbs::IBacktraceBreadcrumbs* get_Breadcrumbs();
    // public System.Boolean get_Enabled()
    // Offset: 0x2A4DE24
    bool get_Enabled();
    // private System.Void set_Enabled(System.Boolean value)
    // Offset: 0x2A4DE2C
    void set_Enabled(bool value);
    // Backtrace.Unity.Model.JsonData.AttributeProvider get_AttributeProvider()
    // Offset: 0x2A4DE38
    ::Backtrace::Unity::Model::JsonData::AttributeProvider* get_AttributeProvider();
    // System.Void set_AttributeProvider(Backtrace.Unity.Model.JsonData.AttributeProvider value)
    // Offset: 0x2A4DEA8
    void set_AttributeProvider(::Backtrace::Unity::Model::JsonData::AttributeProvider* value);
    // public Backtrace.Unity.Interfaces.IBacktraceMetrics get_Metrics()
    // Offset: 0x2A4DEB0
    ::Backtrace::Unity::Interfaces::IBacktraceMetrics* get_Metrics();
    // System.Random get_Random()
    // Offset: 0x2A4E5E0
    ::System::Random* get_Random();
    // public System.String get_Item(System.String index)
    // Offset: 0x2A4E650
    ::StringW get_Item(::StringW index);
    // public System.Void set_Item(System.String index, System.String value)
    // Offset: 0x2A4E674
    void set_Item(::StringW index, ::StringW value);
    // public System.Void AddAttachment(System.String pathToAttachment)
    // Offset: 0x2A4E75C
    void AddAttachment(::StringW pathToAttachment);
    // public System.Collections.Generic.IEnumerable`1<System.String> GetAttachments()
    // Offset: 0x2A4E7B4
    ::System::Collections::Generic::IEnumerable_1<::StringW>* GetAttachments();
    // public System.Void SetAttributes(System.Collections.Generic.Dictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A4E7BC
    void SetAttributes(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes);
    // public System.Int32 GetAttributesCount()
    // Offset: 0x2A4E910
    int GetAttributesCount();
    // static public Backtrace.Unity.BacktraceClient get_Instance()
    // Offset: 0x2A4E92C
    static ::Backtrace::Unity::BacktraceClient* get_Instance();
    // public System.Action`1<System.Exception> get_OnServerError()
    // Offset: 0x2A4E974
    ::System::Action_1<::System::Exception*>* get_OnServerError();
    // public System.Void set_OnServerError(System.Action`1<System.Exception> value)
    // Offset: 0x2A4EA24
    void set_OnServerError(::System::Action_1<::System::Exception*>* value);
    // public System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> get_RequestHandler()
    // Offset: 0x2A4EB74
    ::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* get_RequestHandler();
    // public System.Void set_RequestHandler(System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> value)
    // Offset: 0x2A4EC24
    void set_RequestHandler(::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* value);
    // public System.Action`1<Backtrace.Unity.Model.BacktraceResult> get_OnServerResponse()
    // Offset: 0x2A4ECE8
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* get_OnServerResponse();
    // public System.Void set_OnServerResponse(System.Action`1<Backtrace.Unity.Model.BacktraceResult> value)
    // Offset: 0x2A4ED98
    void set_OnServerResponse(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* value);
    // public System.Void set_OnClientReportLimitReached(System.Action`1<Backtrace.Unity.Model.BacktraceReport> value)
    // Offset: 0x2A4EE5C
    void set_OnClientReportLimitReached(::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>* value);
    // public System.Action`1<Backtrace.Unity.Model.BacktraceReport> get_OnClientReportLimitReached()
    // Offset: 0x2A4EE98
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>* get_OnClientReportLimitReached();
    // Backtrace.Unity.Runtime.Native.INativeClient get_NativeClient()
    // Offset: 0x2A4EEA0
    ::Backtrace::Unity::Runtime::Native::INativeClient* get_NativeClient();
    // public System.Boolean get_EnablePerformanceStatistics()
    // Offset: 0x2A4EEA8
    bool get_EnablePerformanceStatistics();
    // public System.Int32 get_GameObjectDepth()
    // Offset: 0x2A4EEC4
    int get_GameObjectDepth();
    // Backtrace.Unity.Interfaces.IBacktraceApi get_BacktraceApi()
    // Offset: 0x2A4EEEC
    ::Backtrace::Unity::Interfaces::IBacktraceApi* get_BacktraceApi();
    // System.Void set_BacktraceApi(Backtrace.Unity.Interfaces.IBacktraceApi value)
    // Offset: 0x2A4EEF4
    void set_BacktraceApi(::Backtrace::Unity::Interfaces::IBacktraceApi* value);
    // Backtrace.Unity.Services.ReportLimitWatcher get_ReportLimitWatcher()
    // Offset: 0x2A4EFBC
    ::Backtrace::Unity::Services::ReportLimitWatcher* get_ReportLimitWatcher();
    // System.Void set_ReportLimitWatcher(Backtrace.Unity.Services.ReportLimitWatcher value)
    // Offset: 0x2A4EFC4
    void set_ReportLimitWatcher(::Backtrace::Unity::Services::ReportLimitWatcher* value);
    // static public Backtrace.Unity.BacktraceClient Initialize(Backtrace.Unity.Model.BacktraceConfiguration configuration, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.String gameObjectName)
    // Offset: 0x2A4F08C
    static ::Backtrace::Unity::BacktraceClient* Initialize(::Backtrace::Unity::Model::BacktraceConfiguration* configuration, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::StringW gameObjectName);
    // static public Backtrace.Unity.BacktraceClient Initialize(System.String url, System.String databasePath, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.String gameObjectName)
    // Offset: 0x2A4FAD8
    static ::Backtrace::Unity::BacktraceClient* Initialize(::StringW url, ::StringW databasePath, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::StringW gameObjectName);
    // static public Backtrace.Unity.BacktraceClient Initialize(System.String url, System.String databasePath, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.String[] attachments, System.String gameObjectName)
    // Offset: 0x2A4FAE4
    static ::Backtrace::Unity::BacktraceClient* Initialize(::StringW url, ::StringW databasePath, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::ArrayW<::StringW> attachments, ::StringW gameObjectName);
    // static public Backtrace.Unity.BacktraceClient Initialize(System.String url, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.String gameObjectName)
    // Offset: 0x2A4FB9C
    static ::Backtrace::Unity::BacktraceClient* Initialize(::StringW url, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::StringW gameObjectName);
    // static public Backtrace.Unity.BacktraceClient Initialize(System.String url, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.String[] attachments, System.String gameObjectName)
    // Offset: 0x2A4FC08
    static ::Backtrace::Unity::BacktraceClient* Initialize(::StringW url, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::ArrayW<::StringW> attachments, ::StringW gameObjectName);
    // public System.Void OnDisable()
    // Offset: 0x2A4FCA4
    void OnDisable();
    // public System.Void Refresh()
    // Offset: 0x2A4F3F4
    void Refresh();
    // public System.Boolean EnableBreadcrumbsSupport()
    // Offset: 0x2A50590
    bool EnableBreadcrumbsSupport();
    // public System.Boolean EnableMetrics()
    // Offset: 0x2A50640
    bool EnableMetrics();
    // private System.Boolean EnableMetrics(System.Boolean enableIfConfigurationIsDisabled)
    // Offset: 0x2A50258
    bool EnableMetrics(bool enableIfConfigurationIsDisabled);
    // public System.Boolean EnableMetrics(System.String uniqueAttributeName)
    // Offset: 0x2A50648
    bool EnableMetrics(::StringW uniqueAttributeName);
    // public System.Boolean EnableMetrics(System.String uniqueEventsSubmissionUrl, System.String summedEventsSubmissionUrl, System.UInt32 timeIntervalInSec, System.String uniqueAttributeName)
    // Offset: 0x2A50750
    bool EnableMetrics(::StringW uniqueEventsSubmissionUrl, ::StringW summedEventsSubmissionUrl, uint timeIntervalInSec, ::StringW uniqueAttributeName);
    // private System.Void StartupMetrics()
    // Offset: 0x2A50888
    void StartupMetrics();
    // private System.Void OnApplicationQuit()
    // Offset: 0x2A50954
    void OnApplicationQuit();
    // private System.Void Awake()
    // Offset: 0x2A50A00
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x2A50A60
    void LateUpdate();
    // private System.Void OnDestroy()
    // Offset: 0x2A50F0C
    void OnDestroy();
    // public System.Void SetClientReportLimit(System.UInt32 reportPerMin)
    // Offset: 0x2A51148
    void SetClientReportLimit(uint reportPerMin);
    // public System.Void Send(System.String message, System.Collections.Generic.List`1<System.String> attachmentPaths, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A51240
    void Send(::StringW message, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes);
    // public System.Void Send(System.Exception exception, System.Collections.Generic.List`1<System.String> attachmentPaths, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A515C0
    void Send(::System::Exception* exception, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes);
    // public System.Void Send(Backtrace.Unity.Model.BacktraceReport report, System.Action`1<Backtrace.Unity.Model.BacktraceResult> sendCallback)
    // Offset: 0x2A51ADC
    void Send(::Backtrace::Unity::Model::BacktraceReport* report, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* sendCallback);
    // private System.Void SendReport(Backtrace.Unity.Model.BacktraceReport report, System.Action`1<Backtrace.Unity.Model.BacktraceResult> sendCallback)
    // Offset: 0x2A50E44
    void SendReport(::Backtrace::Unity::Model::BacktraceReport* report, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* sendCallback);
    // private System.Collections.IEnumerator CollectDataAndSend(Backtrace.Unity.Model.BacktraceReport report, System.Action`1<Backtrace.Unity.Model.BacktraceResult> sendCallback)
    // Offset: 0x2A51CF0
    ::System::Collections::IEnumerator* CollectDataAndSend(::Backtrace::Unity::Model::BacktraceReport* report, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* sendCallback);
    // private Backtrace.Unity.Model.BacktraceData SetupBacktraceData(Backtrace.Unity.Model.BacktraceReport report)
    // Offset: 0x2A51DB4
    ::Backtrace::Unity::Model::BacktraceData* SetupBacktraceData(::Backtrace::Unity::Model::BacktraceReport* report);
    // System.Void OnAnrDetected(System.String stackTrace)
    // Offset: 0x2A524C0
    void OnAnrDetected(::StringW stackTrace);
    // System.Void HandleUnhandledExceptionsFromAndroidBackgroundThread(System.String backgroundExceptionMessage)
    // Offset: 0x2A52958
    void HandleUnhandledExceptionsFromAndroidBackgroundThread(::StringW backgroundExceptionMessage);
    // private System.Void CaptureUnityMessages()
    // Offset: 0x2A4FCB4
    void CaptureUnityMessages();
    // System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0x2A52F00
    void OnApplicationPause(bool pause);
    // System.Void HandleUnityBackgroundException(System.String message, System.String stackTrace, UnityEngine.LogType type)
    // Offset: 0x2A530BC
    void HandleUnityBackgroundException(::StringW message, ::StringW stackTrace, ::UnityEngine::LogType type);
    // System.Void HandleLowMemory()
    // Offset: 0x2A5311C
    void HandleLowMemory();
    // System.Void HandleUnityMessage(System.String message, System.String stackTrace, UnityEngine.LogType type)
    // Offset: 0x2A52BDC
    void HandleUnityMessage(::StringW message, ::StringW stackTrace, ::UnityEngine::LogType type);
    // private System.Boolean SamplingShouldSkip()
    // Offset: 0x2A5342C
    bool SamplingShouldSkip();
    // private System.Void SendUnhandledException(Backtrace.Unity.Model.BacktraceUnhandledException exception, System.Boolean invokeSkipApi)
    // Offset: 0x2A52898
    void SendUnhandledException(::Backtrace::Unity::Model::BacktraceUnhandledException* exception, bool invokeSkipApi);
    // private System.Boolean ShouldSendReport(System.Exception exception, System.Collections.Generic.List`1<System.String> attachmentPaths, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.Boolean invokeSkipApi)
    // Offset: 0x2A51690
    bool ShouldSendReport(::System::Exception* exception, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, bool invokeSkipApi);
    // private System.Boolean ShouldSendReport(System.String message, System.Collections.Generic.List`1<System.String> attachmentPaths, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A5130C
    bool ShouldSendReport(::StringW message, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes);
    // private System.Boolean ShouldSendReport(Backtrace.Unity.Model.BacktraceReport report)
    // Offset: 0x2A51B44
    bool ShouldSendReport(::Backtrace::Unity::Model::BacktraceReport* report);
    // private System.Void HandleInnerException(Backtrace.Unity.Model.BacktraceReport report)
    // Offset: 0x2A536A8
    void HandleInnerException(::Backtrace::Unity::Model::BacktraceReport* report);
    // private System.Boolean ValidClientConfiguration()
    // Offset: 0x2A4EAE8
    bool ValidClientConfiguration();
    // private System.Boolean ShouldSkipReport(Backtrace.Unity.Types.ReportFilterType type, System.Exception exception, System.String message)
    // Offset: 0x2A534E0
    bool ShouldSkipReport(::Backtrace::Unity::Types::ReportFilterType type, ::System::Exception* exception, ::StringW message);
    // System.Collections.Generic.IList`1<System.String> GetNativeAttachments()
    // Offset: 0x2A50310
    ::System::Collections::Generic::IList_1<::StringW>* GetNativeAttachments();
    // public System.Void .ctor()
    // Offset: 0x2A53808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::BacktraceClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceClient*, creationType>()));
    }
  }; // Backtrace.Unity.BacktraceClient
  #pragma pack(pop)
  static check_size<sizeof(BacktraceClient), 168 + sizeof(::System::Threading::Thread*)> __Backtrace_Unity_BacktraceClientSizeCheck;
  static_assert(sizeof(BacktraceClient) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Breadcrumbs
// Il2CppName: get_Breadcrumbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Breadcrumbs::IBacktraceBreadcrumbs* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_Breadcrumbs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Breadcrumbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_Enabled
// Il2CppName: set_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(bool)>(&Backtrace::Unity::BacktraceClient::set_Enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_AttributeProvider
// Il2CppName: get_AttributeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::JsonData::AttributeProvider* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_AttributeProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_AttributeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_AttributeProvider
// Il2CppName: set_AttributeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::JsonData::AttributeProvider*)>(&Backtrace::Unity::BacktraceClient::set_AttributeProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.JsonData", "AttributeProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_AttributeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Metrics
// Il2CppName: get_Metrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Interfaces::IBacktraceMetrics* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_Metrics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Metrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Random
// Il2CppName: get_Random
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Random* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_Random)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Random", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::BacktraceClient::*)(::StringW)>(&Backtrace::Unity::BacktraceClient::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW, ::StringW)>(&Backtrace::Unity::BacktraceClient::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::AddAttachment
// Il2CppName: AddAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW)>(&Backtrace::Unity::BacktraceClient::AddAttachment)> {
  static const MethodInfo* get() {
    static auto* pathToAttachment = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "AddAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathToAttachment});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::GetAttachments
// Il2CppName: GetAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::GetAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "GetAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SetAttributes
// Il2CppName: SetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::BacktraceClient::SetAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::GetAttributesCount
// Il2CppName: GetAttributesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::GetAttributesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "GetAttributesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)()>(&Backtrace::Unity::BacktraceClient::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_OnServerError
// Il2CppName: get_OnServerError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::System::Exception*>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_OnServerError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_OnServerError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_OnServerError
// Il2CppName: set_OnServerError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Action_1<::System::Exception*>*)>(&Backtrace::Unity::BacktraceClient::set_OnServerError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_OnServerError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_RequestHandler
// Il2CppName: get_RequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_RequestHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_RequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_RequestHandler
// Il2CppName: set_RequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::BacktraceClient::set_RequestHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData"), ::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_RequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_OnServerResponse
// Il2CppName: get_OnServerResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_OnServerResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_OnServerResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_OnServerResponse
// Il2CppName: set_OnServerResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::BacktraceClient::set_OnServerResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_OnServerResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_OnClientReportLimitReached
// Il2CppName: set_OnClientReportLimitReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>*)>(&Backtrace::Unity::BacktraceClient::set_OnClientReportLimitReached)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_OnClientReportLimitReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_OnClientReportLimitReached
// Il2CppName: get_OnClientReportLimitReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Backtrace::Unity::Model::BacktraceReport*>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_OnClientReportLimitReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_OnClientReportLimitReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_NativeClient
// Il2CppName: get_NativeClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Runtime::Native::INativeClient* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_NativeClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_NativeClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_EnablePerformanceStatistics
// Il2CppName: get_EnablePerformanceStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_EnablePerformanceStatistics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_EnablePerformanceStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_GameObjectDepth
// Il2CppName: get_GameObjectDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_GameObjectDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_GameObjectDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_BacktraceApi
// Il2CppName: get_BacktraceApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Interfaces::IBacktraceApi* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_BacktraceApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_BacktraceApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_BacktraceApi
// Il2CppName: set_BacktraceApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Interfaces::IBacktraceApi*)>(&Backtrace::Unity::BacktraceClient::set_BacktraceApi)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Interfaces", "IBacktraceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_BacktraceApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::get_ReportLimitWatcher
// Il2CppName: get_ReportLimitWatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Services::ReportLimitWatcher* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::get_ReportLimitWatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "get_ReportLimitWatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::set_ReportLimitWatcher
// Il2CppName: set_ReportLimitWatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Services::ReportLimitWatcher*)>(&Backtrace::Unity::BacktraceClient::set_ReportLimitWatcher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Services", "ReportLimitWatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "set_ReportLimitWatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)(::Backtrace::Unity::Model::BacktraceConfiguration*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::StringW)>(&Backtrace::Unity::BacktraceClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceConfiguration")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* gameObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration, attributes, gameObjectName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)(::StringW, ::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::StringW)>(&Backtrace::Unity::BacktraceClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* databasePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* gameObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, databasePath, attributes, gameObjectName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)(::StringW, ::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::ArrayW<::StringW>, ::StringW)>(&Backtrace::Unity::BacktraceClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* databasePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* gameObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, databasePath, attributes, attachments, gameObjectName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)(::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::StringW)>(&Backtrace::Unity::BacktraceClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* gameObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, attributes, gameObjectName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceClient* (*)(::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::ArrayW<::StringW>, ::StringW)>(&Backtrace::Unity::BacktraceClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attachments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* gameObjectName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, attributes, attachments, gameObjectName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::EnableBreadcrumbsSupport
// Il2CppName: EnableBreadcrumbsSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::EnableBreadcrumbsSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "EnableBreadcrumbsSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::EnableMetrics
// Il2CppName: EnableMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::EnableMetrics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "EnableMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::EnableMetrics
// Il2CppName: EnableMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(bool)>(&Backtrace::Unity::BacktraceClient::EnableMetrics)> {
  static const MethodInfo* get() {
    static auto* enableIfConfigurationIsDisabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "EnableMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableIfConfigurationIsDisabled});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::EnableMetrics
// Il2CppName: EnableMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::StringW)>(&Backtrace::Unity::BacktraceClient::EnableMetrics)> {
  static const MethodInfo* get() {
    static auto* uniqueAttributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "EnableMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueAttributeName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::EnableMetrics
// Il2CppName: EnableMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::StringW, ::StringW, uint, ::StringW)>(&Backtrace::Unity::BacktraceClient::EnableMetrics)> {
  static const MethodInfo* get() {
    static auto* uniqueEventsSubmissionUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* summedEventsSubmissionUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* timeIntervalInSec = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* uniqueAttributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "EnableMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueEventsSubmissionUrl, summedEventsSubmissionUrl, timeIntervalInSec, uniqueAttributeName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::StartupMetrics
// Il2CppName: StartupMetrics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::StartupMetrics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "StartupMetrics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SetClientReportLimit
// Il2CppName: SetClientReportLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(uint)>(&Backtrace::Unity::BacktraceClient::SetClientReportLimit)> {
  static const MethodInfo* get() {
    static auto* reportPerMin = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SetClientReportLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportPerMin});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW, ::System::Collections::Generic::List_1<::StringW>*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::BacktraceClient::Send)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachmentPaths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, attachmentPaths, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::System::Exception*, ::System::Collections::Generic::List_1<::StringW>*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::BacktraceClient::Send)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* attachmentPaths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, attachmentPaths, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::BacktraceClient::Send)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report, sendCallback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SendReport
// Il2CppName: SendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::BacktraceClient::SendReport)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report, sendCallback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::CollectDataAndSend
// Il2CppName: CollectDataAndSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::BacktraceClient::CollectDataAndSend)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "CollectDataAndSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report, sendCallback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SetupBacktraceData
// Il2CppName: SetupBacktraceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceData* (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*)>(&Backtrace::Unity::BacktraceClient::SetupBacktraceData)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SetupBacktraceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::OnAnrDetected
// Il2CppName: OnAnrDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW)>(&Backtrace::Unity::BacktraceClient::OnAnrDetected)> {
  static const MethodInfo* get() {
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "OnAnrDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stackTrace});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::HandleUnhandledExceptionsFromAndroidBackgroundThread
// Il2CppName: HandleUnhandledExceptionsFromAndroidBackgroundThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW)>(&Backtrace::Unity::BacktraceClient::HandleUnhandledExceptionsFromAndroidBackgroundThread)> {
  static const MethodInfo* get() {
    static auto* backgroundExceptionMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "HandleUnhandledExceptionsFromAndroidBackgroundThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backgroundExceptionMessage});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::CaptureUnityMessages
// Il2CppName: CaptureUnityMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::CaptureUnityMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "CaptureUnityMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(bool)>(&Backtrace::Unity::BacktraceClient::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::HandleUnityBackgroundException
// Il2CppName: HandleUnityBackgroundException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&Backtrace::Unity::BacktraceClient::HandleUnityBackgroundException)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "HandleUnityBackgroundException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, stackTrace, type});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::HandleLowMemory
// Il2CppName: HandleLowMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::HandleLowMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "HandleLowMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::HandleUnityMessage
// Il2CppName: HandleUnityMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&Backtrace::Unity::BacktraceClient::HandleUnityMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "HandleUnityMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, stackTrace, type});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SamplingShouldSkip
// Il2CppName: SamplingShouldSkip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::SamplingShouldSkip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SamplingShouldSkip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::SendUnhandledException
// Il2CppName: SendUnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceUnhandledException*, bool)>(&Backtrace::Unity::BacktraceClient::SendUnhandledException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceUnhandledException")->byval_arg;
    static auto* invokeSkipApi = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "SendUnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, invokeSkipApi});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::ShouldSendReport
// Il2CppName: ShouldSendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::System::Exception*, ::System::Collections::Generic::List_1<::StringW>*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, bool)>(&Backtrace::Unity::BacktraceClient::ShouldSendReport)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* attachmentPaths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* invokeSkipApi = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "ShouldSendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, attachmentPaths, attributes, invokeSkipApi});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::ShouldSendReport
// Il2CppName: ShouldSendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::StringW, ::System::Collections::Generic::List_1<::StringW>*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::BacktraceClient::ShouldSendReport)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachmentPaths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "ShouldSendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, attachmentPaths, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::ShouldSendReport
// Il2CppName: ShouldSendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*)>(&Backtrace::Unity::BacktraceClient::ShouldSendReport)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "ShouldSendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::HandleInnerException
// Il2CppName: HandleInnerException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Model::BacktraceReport*)>(&Backtrace::Unity::BacktraceClient::HandleInnerException)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "HandleInnerException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::ValidClientConfiguration
// Il2CppName: ValidClientConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::ValidClientConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "ValidClientConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::ShouldSkipReport
// Il2CppName: ShouldSkipReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::*)(::Backtrace::Unity::Types::ReportFilterType, ::System::Exception*, ::StringW)>(&Backtrace::Unity::BacktraceClient::ShouldSkipReport)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "ReportFilterType")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "ShouldSkipReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, exception, message});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::GetNativeAttachments
// Il2CppName: GetNativeAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::StringW>* (Backtrace::Unity::BacktraceClient::*)()>(&Backtrace::Unity::BacktraceClient::GetNativeAttachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient*), "GetNativeAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
