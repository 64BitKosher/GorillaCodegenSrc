// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.BacktraceClient
#include "Backtrace/Unity/BacktraceClient.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
  // Forward declaring type: BacktraceResult
  class BacktraceResult;
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*, "Backtrace.Unity", "BacktraceClient/<CollectDataAndSend>d__87");
// Type namespace: Backtrace.Unity
namespace Backtrace::Unity {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.BacktraceClient/<CollectDataAndSend>d__87
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BacktraceClient::$CollectDataAndSend$d__87 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public Backtrace.Unity.BacktraceClient <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::Backtrace::Unity::BacktraceClient* $$4__this;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::BacktraceClient*) == 0x8);
    // public Backtrace.Unity.Model.BacktraceReport report
    // Size: 0x8
    // Offset: 0x28
    ::Backtrace::Unity::Model::BacktraceReport* report;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceReport*) == 0x8);
    // public System.Action`1<Backtrace.Unity.Model.BacktraceResult> sendCallback
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* sendCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*) == 0x8);
    // private Backtrace.Unity.BacktraceClient/<>c__DisplayClass87_0 <>8__1
    // Size: 0x8
    // Offset: 0x38
    ::Backtrace::Unity::BacktraceClient::$$c__DisplayClass87_0* $$8__1;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::BacktraceClient::$$c__DisplayClass87_0*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> <queryAttributes>5__2
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* $queryAttributes$5__2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private System.Diagnostics.Stopwatch <stopWatch>5__3
    // Size: 0x8
    // Offset: 0x48
    ::System::Diagnostics::Stopwatch* $stopWatch$5__3;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // private Backtrace.Unity.Model.BacktraceData <data>5__4
    // Size: 0x8
    // Offset: 0x50
    ::Backtrace::Unity::Model::BacktraceData* $data$5__4;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceData*) == 0x8);
    // private System.String <json>5__5
    // Size: 0x8
    // Offset: 0x58
    ::StringW $json$5__5;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public Backtrace.Unity.BacktraceClient <>4__this
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::BacktraceClient*& dyn_$$4__this();
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceReport report
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceReport*& dyn_report();
    // Get instance field reference: public System.Action`1<Backtrace.Unity.Model.BacktraceResult> sendCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*& dyn_sendCallback();
    // Get instance field reference: private Backtrace.Unity.BacktraceClient/<>c__DisplayClass87_0 <>8__1
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::BacktraceClient::$$c__DisplayClass87_0*& dyn_$$8__1();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> <queryAttributes>5__2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_$queryAttributes$5__2();
    // Get instance field reference: private System.Diagnostics.Stopwatch <stopWatch>5__3
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_$stopWatch$5__3();
    // Get instance field reference: private Backtrace.Unity.Model.BacktraceData <data>5__4
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceData*& dyn_$data$5__4();
    // Get instance field reference: private System.String <json>5__5
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$json$5__5();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2A51D8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceClient::$CollectDataAndSend$d__87* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceClient::$CollectDataAndSend$d__87*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A53A50
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2A53A54
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x2A545A8
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x2A545B0
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2A545E8
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // Backtrace.Unity.BacktraceClient/<CollectDataAndSend>d__87
  #pragma pack(pop)
  static check_size<sizeof(BacktraceClient::$CollectDataAndSend$d__87), 88 + sizeof(::StringW)> __Backtrace_Unity_BacktraceClient_$CollectDataAndSend$d__87SizeCheck;
  static_assert(sizeof(BacktraceClient::$CollectDataAndSend$d__87) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::*)()>(&Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::*)()>(&Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::*)()>(&Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::*)()>(&Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::*)()>(&Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceClient::$CollectDataAndSend$d__87*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
