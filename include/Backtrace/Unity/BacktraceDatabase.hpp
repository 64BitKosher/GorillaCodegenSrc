// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceDatabase
#include "Backtrace/Unity/Interfaces/IBacktraceDatabase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity
namespace Backtrace::Unity {
  // Forward declaring type: BacktraceClient
  class BacktraceClient;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
  // Forward declaring type: BacktraceData
  class BacktraceData;
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs
namespace Backtrace::Unity::Model::Breadcrumbs {
  // Forward declaring type: BacktraceBreadcrumbs
  class BacktraceBreadcrumbs;
  // Forward declaring type: IBacktraceBreadcrumbs
  class IBacktraceBreadcrumbs;
}
// Forward declaring namespace: Backtrace::Unity::Model::Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseSettings
  class BacktraceDatabaseSettings;
  // Forward declaring type: BacktraceDatabaseRecord
  class BacktraceDatabaseRecord;
}
// Forward declaring namespace: Backtrace::Unity::Interfaces
namespace Backtrace::Unity::Interfaces {
  // Forward declaring type: IBacktraceApi
  class IBacktraceApi;
  // Forward declaring type: IBacktraceDatabaseContext
  class IBacktraceDatabaseContext;
  // Forward declaring type: IBacktraceDatabaseFileContext
  class IBacktraceDatabaseFileContext;
}
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: ReportLimitWatcher
  class ReportLimitWatcher;
}
// Forward declaring namespace: Backtrace::Unity::Types
namespace Backtrace::Unity::Types {
  // Forward declaring type: DeduplicationStrategy
  struct DeduplicationStrategy;
  // Forward declaring type: MiniDumpType
  struct MiniDumpType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Backtrace.Unity
namespace Backtrace::Unity {
  // Forward declaring type: BacktraceDatabase
  class BacktraceDatabase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::BacktraceDatabase);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::BacktraceDatabase*, "Backtrace.Unity", "BacktraceDatabase");
// Type namespace: Backtrace.Unity
namespace Backtrace::Unity {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.BacktraceDatabase
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class BacktraceDatabase : public ::UnityEngine::MonoBehaviour/*, public ::Backtrace::Unity::Interfaces::IBacktraceDatabase*/ {
    public:
    // Nested type: ::Backtrace::Unity::BacktraceDatabase::$$c__DisplayClass59_0
    class $$c__DisplayClass59_0;
    // Nested type: ::Backtrace::Unity::BacktraceDatabase::$$c__DisplayClass60_0
    class $$c__DisplayClass60_0;
    public:
    // private System.Boolean _timerBackgroundWork
    // Size: 0x1
    // Offset: 0x20
    bool timerBackgroundWork;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: timerBackgroundWork and: Configuration
    char __padding0[0x7] = {};
    // public Backtrace.Unity.Model.BacktraceConfiguration Configuration
    // Size: 0x8
    // Offset: 0x28
    ::Backtrace::Unity::Model::BacktraceConfiguration* Configuration;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceConfiguration*) == 0x8);
    // private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    // Size: 0x8
    // Offset: 0x30
    ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs* breadcrumbs;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*) == 0x8);
    // private Backtrace.Unity.BacktraceClient _client
    // Size: 0x8
    // Offset: 0x38
    ::Backtrace::Unity::BacktraceClient* client;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::BacktraceClient*) == 0x8);
    // private System.String <DatabasePath>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::StringW DatabasePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Backtrace.Unity.Model.Database.BacktraceDatabaseSettings <DatabaseSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* DatabaseSettings;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*) == 0x8);
    // private System.Single _lastConnection
    // Size: 0x4
    // Offset: 0x50
    float lastConnection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastConnection and: BacktraceApi
    char __padding6[0x4] = {};
    // private Backtrace.Unity.Interfaces.IBacktraceApi <BacktraceApi>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Backtrace::Unity::Interfaces::IBacktraceApi* BacktraceApi;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Interfaces::IBacktraceApi*) == 0x8);
    // private Backtrace.Unity.Interfaces.IBacktraceDatabaseContext <BacktraceDatabaseContext>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext* BacktraceDatabaseContext;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*) == 0x8);
    // private Backtrace.Unity.Interfaces.IBacktraceDatabaseFileContext <BacktraceDatabaseFileContext>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext* BacktraceDatabaseFileContext;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext*) == 0x8);
    // private System.Boolean <Enable>k__BackingField
    // Size: 0x1
    // Offset: 0x70
    bool Enable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Enable and: reportLimitWatcher
    char __padding10[0x7] = {};
    // private Backtrace.Unity.Services.ReportLimitWatcher _reportLimitWatcher
    // Size: 0x8
    // Offset: 0x78
    ::Backtrace::Unity::Services::ReportLimitWatcher* reportLimitWatcher;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Services::ReportLimitWatcher*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceDatabase
    operator ::Backtrace::Unity::Interfaces::IBacktraceDatabase() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceDatabase*>(this);
    }
    // Get static field: static System.Single LastFrameTime
    static float _get_LastFrameTime();
    // Set static field: static System.Single LastFrameTime
    static void _set_LastFrameTime(float value);
    // Get static field: static private Backtrace.Unity.BacktraceDatabase _instance
    static ::Backtrace::Unity::BacktraceDatabase* _get__instance();
    // Set static field: static private Backtrace.Unity.BacktraceDatabase _instance
    static void _set__instance(::Backtrace::Unity::BacktraceDatabase* value);
    // Get instance field reference: private System.Boolean _timerBackgroundWork
    [[deprecated("Use field access instead!")]] bool& dyn__timerBackgroundWork();
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceConfiguration Configuration
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceConfiguration*& dyn_Configuration();
    // Get instance field reference: private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*& dyn__breadcrumbs();
    // Get instance field reference: private Backtrace.Unity.BacktraceClient _client
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::BacktraceClient*& dyn__client();
    // Get instance field reference: private System.String <DatabasePath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$DatabasePath$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Model.Database.BacktraceDatabaseSettings <DatabaseSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*& dyn_$DatabaseSettings$k__BackingField();
    // Get instance field reference: private System.Single _lastConnection
    [[deprecated("Use field access instead!")]] float& dyn__lastConnection();
    // Get instance field reference: private Backtrace.Unity.Interfaces.IBacktraceApi <BacktraceApi>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Interfaces::IBacktraceApi*& dyn_$BacktraceApi$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Interfaces.IBacktraceDatabaseContext <BacktraceDatabaseContext>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*& dyn_$BacktraceDatabaseContext$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Interfaces.IBacktraceDatabaseFileContext <BacktraceDatabaseFileContext>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext*& dyn_$BacktraceDatabaseFileContext$k__BackingField();
    // Get instance field reference: private System.Boolean <Enable>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Enable$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Services.ReportLimitWatcher _reportLimitWatcher
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Services::ReportLimitWatcher*& dyn__reportLimitWatcher();
    // public Backtrace.Unity.Model.Breadcrumbs.IBacktraceBreadcrumbs get_Breadcrumbs()
    // Offset: 0x2A545F0
    ::Backtrace::Unity::Model::Breadcrumbs::IBacktraceBreadcrumbs* get_Breadcrumbs();
    // public System.String get_DatabasePath()
    // Offset: 0x2A54708
    ::StringW get_DatabasePath();
    // protected System.Void set_DatabasePath(System.String value)
    // Offset: 0x2A54710
    void set_DatabasePath(::StringW value);
    // public System.Int32 get_ScreenshotQuality()
    // Offset: 0x2A54718
    int get_ScreenshotQuality();
    // public System.Void set_ScreenshotQuality(System.Int32 value)
    // Offset: 0x2A547B8
    void set_ScreenshotQuality(int value);
    // public System.Int32 get_ScreenshotMaxHeight()
    // Offset: 0x2A54864
    int get_ScreenshotMaxHeight();
    // public System.Void set_ScreenshotMaxHeight(System.Int32 value)
    // Offset: 0x2A54908
    void set_ScreenshotMaxHeight(int value);
    // static public Backtrace.Unity.BacktraceDatabase get_Instance()
    // Offset: 0x2A549B4
    static ::Backtrace::Unity::BacktraceDatabase* get_Instance();
    // public Backtrace.Unity.Types.DeduplicationStrategy get_DeduplicationStrategy()
    // Offset: 0x2A549FC
    ::Backtrace::Unity::Types::DeduplicationStrategy get_DeduplicationStrategy();
    // public System.Void set_DeduplicationStrategy(Backtrace.Unity.Types.DeduplicationStrategy value)
    // Offset: 0x2A54AD8
    void set_DeduplicationStrategy(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // protected Backtrace.Unity.Model.Database.BacktraceDatabaseSettings get_DatabaseSettings()
    // Offset: 0x2A54BE8
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* get_DatabaseSettings();
    // protected System.Void set_DatabaseSettings(Backtrace.Unity.Model.Database.BacktraceDatabaseSettings value)
    // Offset: 0x2A54BF0
    void set_DatabaseSettings(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* value);
    // public Backtrace.Unity.Interfaces.IBacktraceApi get_BacktraceApi()
    // Offset: 0x2A54BF8
    ::Backtrace::Unity::Interfaces::IBacktraceApi* get_BacktraceApi();
    // public System.Void set_BacktraceApi(Backtrace.Unity.Interfaces.IBacktraceApi value)
    // Offset: 0x2A54C00
    void set_BacktraceApi(::Backtrace::Unity::Interfaces::IBacktraceApi* value);
    // protected Backtrace.Unity.Interfaces.IBacktraceDatabaseContext get_BacktraceDatabaseContext()
    // Offset: 0x2A54C08
    ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext* get_BacktraceDatabaseContext();
    // protected System.Void set_BacktraceDatabaseContext(Backtrace.Unity.Interfaces.IBacktraceDatabaseContext value)
    // Offset: 0x2A54C10
    void set_BacktraceDatabaseContext(::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext* value);
    // Backtrace.Unity.Interfaces.IBacktraceDatabaseFileContext get_BacktraceDatabaseFileContext()
    // Offset: 0x2A54C18
    ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext* get_BacktraceDatabaseFileContext();
    // System.Void set_BacktraceDatabaseFileContext(Backtrace.Unity.Interfaces.IBacktraceDatabaseFileContext value)
    // Offset: 0x2A54C20
    void set_BacktraceDatabaseFileContext(::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext* value);
    // public System.Boolean get_Enable()
    // Offset: 0x2A54C28
    bool get_Enable();
    // private System.Void set_Enable(System.Boolean value)
    // Offset: 0x2A54C30
    void set_Enable(bool value);
    // public System.Void Reload()
    // Offset: 0x2A54C3C
    void Reload();
    // public System.Void OnDisable()
    // Offset: 0x2A55308
    void OnDisable();
    // private System.Void Awake()
    // Offset: 0x2A55310
    void Awake();
    // System.Void Update()
    // Offset: 0x2A55314
    void Update();
    // private System.Void Start()
    // Offset: 0x2A55838
    void Start();
    // public System.Void SetApi(Backtrace.Unity.Interfaces.IBacktraceApi backtraceApi)
    // Offset: 0x2A55ACC
    void SetApi(::Backtrace::Unity::Interfaces::IBacktraceApi* backtraceApi);
    // public System.Boolean Enabled()
    // Offset: 0x2A55AD4
    bool Enabled();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseSettings GetSettings()
    // Offset: 0x2A55ADC
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* GetSettings();
    // public System.Void Clear()
    // Offset: 0x2A55AE4
    void Clear();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord Add(Backtrace.Unity.Model.BacktraceData data, System.Boolean lock)
    // Offset: 0x2A55C50
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* Add(::Backtrace::Unity::Model::BacktraceData* data, bool lock);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord Add(Backtrace.Unity.Model.BacktraceReport backtraceReport, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, Backtrace.Unity.Types.MiniDumpType miniDumpType)
    // Offset: 0x2A565D8
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* Add(::Backtrace::Unity::Model::BacktraceReport* backtraceReport, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::Backtrace::Unity::Types::MiniDumpType miniDumpType);
    // public System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> Get()
    // Offset: 0x2A5662C
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* Get();
    // public System.Void Delete(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A56748
    void Delete(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // public System.Void Flush()
    // Offset: 0x2A568A8
    void Flush();
    // public System.Void Send()
    // Offset: 0x2A56D28
    void Send();
    // private System.Void FlushRecord(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A569FC
    void FlushRecord(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // private System.Void SendData(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A554F4
    void SendData(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // public System.Int32 Count()
    // Offset: 0x2A56E8C
    int Count();
    // protected System.Void RemoveOrphaned()
    // Offset: 0x2A56F44
    void RemoveOrphaned();
    // protected System.Void SetupMultisceneSupport()
    // Offset: 0x2A5707C
    void SetupMultisceneSupport();
    // protected System.Boolean InitializeDatabasePaths()
    // Offset: 0x2A57130
    bool InitializeDatabasePaths();
    // protected System.Void LoadReports(System.String breadcrumbPath, System.String breadcrumbArchive)
    // Offset: 0x2A572F4
    void LoadReports(::StringW breadcrumbPath, ::StringW breadcrumbArchive);
    // private System.Boolean ValidateDatabaseSize()
    // Offset: 0x2A563BC
    bool ValidateDatabaseSize();
    // private System.Boolean ReachedDiskSpaceLimit()
    // Offset: 0x2A577BC
    bool ReachedDiskSpaceLimit();
    // private System.Boolean ReachedMaximumNumberOfRecords()
    // Offset: 0x2A576B8
    bool ReachedMaximumNumberOfRecords();
    // public System.Boolean ValidConsistency()
    // Offset: 0x2A578AC
    bool ValidConsistency();
    // public System.Int64 GetDatabaseSize()
    // Offset: 0x2A57950
    int64_t GetDatabaseSize();
    // public System.Void SetReportWatcher(Backtrace.Unity.Services.ReportLimitWatcher reportLimitWatcher)
    // Offset: 0x2A57A08
    void SetReportWatcher(::Backtrace::Unity::Services::ReportLimitWatcher* reportLimitWatcher);
    // private System.Void IncrementBatchRetry()
    // Offset: 0x2A57A10
    void IncrementBatchRetry();
    // System.String GetBreadcrumbsPath()
    // Offset: 0x2A57E94
    ::StringW GetBreadcrumbsPath();
    // public System.Boolean EnableBreadcrumbsSupport()
    // Offset: 0x2A55A9C
    bool EnableBreadcrumbsSupport();
    // public System.Void .ctor()
    // Offset: 0x2A57EF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::BacktraceDatabase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabase*, creationType>()));
    }
  }; // Backtrace.Unity.BacktraceDatabase
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabase), 120 + sizeof(::Backtrace::Unity::Services::ReportLimitWatcher*)> __Backtrace_Unity_BacktraceDatabaseSizeCheck;
  static_assert(sizeof(BacktraceDatabase) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_Breadcrumbs
// Il2CppName: get_Breadcrumbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Breadcrumbs::IBacktraceBreadcrumbs* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_Breadcrumbs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_Breadcrumbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_DatabasePath
// Il2CppName: get_DatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_DatabasePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_DatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_DatabasePath
// Il2CppName: set_DatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::StringW)>(&Backtrace::Unity::BacktraceDatabase::set_DatabasePath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_DatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_ScreenshotQuality
// Il2CppName: get_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_ScreenshotQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_ScreenshotQuality
// Il2CppName: set_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(int)>(&Backtrace::Unity::BacktraceDatabase::set_ScreenshotQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_ScreenshotMaxHeight
// Il2CppName: get_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_ScreenshotMaxHeight
// Il2CppName: set_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(int)>(&Backtrace::Unity::BacktraceDatabase::set_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::BacktraceDatabase* (*)()>(&Backtrace::Unity::BacktraceDatabase::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_DeduplicationStrategy
// Il2CppName: get_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::DeduplicationStrategy (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_DeduplicationStrategy
// Il2CppName: set_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Types::DeduplicationStrategy)>(&Backtrace::Unity::BacktraceDatabase::set_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "DeduplicationStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_DatabaseSettings
// Il2CppName: get_DatabaseSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_DatabaseSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_DatabaseSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_DatabaseSettings
// Il2CppName: set_DatabaseSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*)>(&Backtrace::Unity::BacktraceDatabase::set_DatabaseSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_DatabaseSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_BacktraceApi
// Il2CppName: get_BacktraceApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Interfaces::IBacktraceApi* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_BacktraceApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_BacktraceApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_BacktraceApi
// Il2CppName: set_BacktraceApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Interfaces::IBacktraceApi*)>(&Backtrace::Unity::BacktraceDatabase::set_BacktraceApi)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Interfaces", "IBacktraceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_BacktraceApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_BacktraceDatabaseContext
// Il2CppName: get_BacktraceDatabaseContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_BacktraceDatabaseContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_BacktraceDatabaseContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_BacktraceDatabaseContext
// Il2CppName: set_BacktraceDatabaseContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*)>(&Backtrace::Unity::BacktraceDatabase::set_BacktraceDatabaseContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Interfaces", "IBacktraceDatabaseContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_BacktraceDatabaseContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_BacktraceDatabaseFileContext
// Il2CppName: get_BacktraceDatabaseFileContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_BacktraceDatabaseFileContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_BacktraceDatabaseFileContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_BacktraceDatabaseFileContext
// Il2CppName: set_BacktraceDatabaseFileContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext*)>(&Backtrace::Unity::BacktraceDatabase::set_BacktraceDatabaseFileContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Interfaces", "IBacktraceDatabaseFileContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_BacktraceDatabaseFileContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::get_Enable
// Il2CppName: get_Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::get_Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "get_Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::set_Enable
// Il2CppName: set_Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(bool)>(&Backtrace::Unity::BacktraceDatabase::set_Enable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "set_Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Reload
// Il2CppName: Reload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Reload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Reload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::SetApi
// Il2CppName: SetApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Interfaces::IBacktraceApi*)>(&Backtrace::Unity::BacktraceDatabase::SetApi)> {
  static const MethodInfo* get() {
    static auto* backtraceApi = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Interfaces", "IBacktraceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "SetApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceApi});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Enabled
// Il2CppName: Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::GetSettings
// Il2CppName: GetSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::GetSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "GetSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::BacktraceData*, bool)>(&Backtrace::Unity::BacktraceDatabase::Add)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    static auto* lock = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, lock});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::BacktraceReport*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::Backtrace::Unity::Types::MiniDumpType)>(&Backtrace::Unity::BacktraceDatabase::Add)> {
  static const MethodInfo* get() {
    static auto* backtraceReport = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* miniDumpType = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "MiniDumpType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceReport, attributes, miniDumpType});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Get)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::BacktraceDatabase::Delete)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::FlushRecord
// Il2CppName: FlushRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::BacktraceDatabase::FlushRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "FlushRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::SendData
// Il2CppName: SendData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::BacktraceDatabase::SendData)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "SendData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::RemoveOrphaned
// Il2CppName: RemoveOrphaned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::RemoveOrphaned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "RemoveOrphaned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::SetupMultisceneSupport
// Il2CppName: SetupMultisceneSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::SetupMultisceneSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "SetupMultisceneSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::InitializeDatabasePaths
// Il2CppName: InitializeDatabasePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::InitializeDatabasePaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "InitializeDatabasePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::LoadReports
// Il2CppName: LoadReports
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::StringW, ::StringW)>(&Backtrace::Unity::BacktraceDatabase::LoadReports)> {
  static const MethodInfo* get() {
    static auto* breadcrumbPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* breadcrumbArchive = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "LoadReports", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{breadcrumbPath, breadcrumbArchive});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::ValidateDatabaseSize
// Il2CppName: ValidateDatabaseSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::ValidateDatabaseSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "ValidateDatabaseSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::ReachedDiskSpaceLimit
// Il2CppName: ReachedDiskSpaceLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::ReachedDiskSpaceLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "ReachedDiskSpaceLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::ReachedMaximumNumberOfRecords
// Il2CppName: ReachedMaximumNumberOfRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::ReachedMaximumNumberOfRecords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "ReachedMaximumNumberOfRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::ValidConsistency
// Il2CppName: ValidConsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::ValidConsistency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "ValidConsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::GetDatabaseSize
// Il2CppName: GetDatabaseSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::GetDatabaseSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "GetDatabaseSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::SetReportWatcher
// Il2CppName: SetReportWatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)(::Backtrace::Unity::Services::ReportLimitWatcher*)>(&Backtrace::Unity::BacktraceDatabase::SetReportWatcher)> {
  static const MethodInfo* get() {
    static auto* reportLimitWatcher = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Services", "ReportLimitWatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "SetReportWatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportLimitWatcher});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::IncrementBatchRetry
// Il2CppName: IncrementBatchRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::IncrementBatchRetry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "IncrementBatchRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::GetBreadcrumbsPath
// Il2CppName: GetBreadcrumbsPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::GetBreadcrumbsPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "GetBreadcrumbsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::EnableBreadcrumbsSupport
// Il2CppName: EnableBreadcrumbsSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::BacktraceDatabase::*)()>(&Backtrace::Unity::BacktraceDatabase::EnableBreadcrumbsSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::BacktraceDatabase*), "EnableBreadcrumbsSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::BacktraceDatabase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
