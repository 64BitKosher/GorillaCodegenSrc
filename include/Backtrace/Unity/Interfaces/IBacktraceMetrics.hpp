// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.Attributes.IScopeAttributeProvider
#include "Backtrace/Unity/Model/Attributes/IScopeAttributeProvider.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Interfaces
namespace Backtrace::Unity::Interfaces {
  // Forward declaring type: IBacktraceMetrics
  class IBacktraceMetrics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Interfaces::IBacktraceMetrics);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Interfaces::IBacktraceMetrics*, "Backtrace.Unity.Interfaces", "IBacktraceMetrics");
// Type namespace: Backtrace.Unity.Interfaces
namespace Backtrace::Unity::Interfaces {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Interfaces.IBacktraceMetrics
  // [TokenAttribute] Offset: FFFFFFFF
  class IBacktraceMetrics/*, public ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider*/ {
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider
    operator ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider*>(this);
    }
    // public System.UInt32 get_MaximumSummedEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint get_MaximumSummedEvents();
    // public System.Void set_MaximumSummedEvents(System.UInt32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_MaximumSummedEvents(uint value);
    // public System.UInt32 get_MaximumUniqueEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint get_MaximumUniqueEvents();
    // public System.Void set_MaximumUniqueEvents(System.UInt32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_MaximumUniqueEvents(uint value);
    // public System.String get_UniqueEventsSubmissionUrl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_UniqueEventsSubmissionUrl();
    // public System.Void set_UniqueEventsSubmissionUrl(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_UniqueEventsSubmissionUrl(::StringW value);
    // public System.String get_SummedEventsSubmissionUrl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_SummedEventsSubmissionUrl();
    // public System.Void set_SummedEventsSubmissionUrl(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_SummedEventsSubmissionUrl(::StringW value);
    // public System.Void Send()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Send();
    // public System.Boolean AddSummedEvent(System.String metricsGroupName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool AddSummedEvent(::StringW metricsGroupName);
    // public System.Boolean AddSummedEvent(System.String metricsGroupName, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool AddSummedEvent(::StringW metricsGroupName, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
  }; // Backtrace.Unity.Interfaces.IBacktraceMetrics
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::get_MaximumSummedEvents
// Il2CppName: get_MaximumSummedEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)()>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::get_MaximumSummedEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "get_MaximumSummedEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::set_MaximumSummedEvents
// Il2CppName: set_MaximumSummedEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(uint)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::set_MaximumSummedEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "set_MaximumSummedEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::get_MaximumUniqueEvents
// Il2CppName: get_MaximumUniqueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)()>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::get_MaximumUniqueEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "get_MaximumUniqueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::set_MaximumUniqueEvents
// Il2CppName: set_MaximumUniqueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(uint)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::set_MaximumUniqueEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "set_MaximumUniqueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::get_UniqueEventsSubmissionUrl
// Il2CppName: get_UniqueEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)()>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::get_UniqueEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "get_UniqueEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::set_UniqueEventsSubmissionUrl
// Il2CppName: set_UniqueEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::set_UniqueEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "set_UniqueEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::get_SummedEventsSubmissionUrl
// Il2CppName: get_SummedEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)()>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::get_SummedEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "get_SummedEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::set_SummedEventsSubmissionUrl
// Il2CppName: set_SummedEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::set_SummedEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "set_SummedEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)()>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::AddSummedEvent
// Il2CppName: AddSummedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::AddSummedEvent)> {
  static const MethodInfo* get() {
    static auto* metricsGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "AddSummedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricsGroupName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceMetrics::AddSummedEvent
// Il2CppName: AddSummedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Interfaces::IBacktraceMetrics::*)(::StringW, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Interfaces::IBacktraceMetrics::AddSummedEvent)> {
  static const MethodInfo* get() {
    static auto* metricsGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceMetrics*), "AddSummedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricsGroupName, attributes});
  }
};
