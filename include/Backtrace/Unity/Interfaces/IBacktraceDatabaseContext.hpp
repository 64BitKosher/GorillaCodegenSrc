// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model::Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseRecord
  class BacktraceDatabaseRecord;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Backtrace::Unity::Types
namespace Backtrace::Unity::Types {
  // Forward declaring type: DeduplicationStrategy
  struct DeduplicationStrategy;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Interfaces
namespace Backtrace::Unity::Interfaces {
  // Forward declaring type: IBacktraceDatabaseContext
  class IBacktraceDatabaseContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*, "Backtrace.Unity.Interfaces", "IBacktraceDatabaseContext");
// Type namespace: Backtrace.Unity.Interfaces
namespace Backtrace::Unity::Interfaces {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Interfaces.IBacktraceDatabaseContext
  // [TokenAttribute] Offset: FFFFFFFF
  class IBacktraceDatabaseContext/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord Add(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord backtraceDatabaseRecord)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* Add(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* backtraceDatabaseRecord);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord FirstOrDefault()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* FirstOrDefault();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord FirstOrDefault(System.Func`2<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* FirstOrDefault(::System::Func_2<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*, bool>* predicate);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord LastOrDefault()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* LastOrDefault();
    // public System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> Get()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* Get();
    // public System.Void Delete(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Delete(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // public System.Boolean Any(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord n)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Any(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* n);
    // public System.Boolean Any()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Any();
    // public System.Int32 Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Count();
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear();
    // public System.Void IncrementBatchRetry()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IncrementBatchRetry();
    // public System.Int64 GetSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t GetSize();
    // public System.Int32 GetTotalNumberOfRecords()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetTotalNumberOfRecords();
    // public Backtrace.Unity.Types.DeduplicationStrategy get_DeduplicationStrategy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Types::DeduplicationStrategy get_DeduplicationStrategy();
    // public System.Void set_DeduplicationStrategy(Backtrace.Unity.Types.DeduplicationStrategy value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_DeduplicationStrategy(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // public System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> GetRecordsToDelete()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* GetRecordsToDelete();
    // public System.String GetHash(Backtrace.Unity.Model.BacktraceData backtraceData)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetHash(::Backtrace::Unity::Model::BacktraceData* backtraceData);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord GetRecordByHash(System.String hash)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* GetRecordByHash(::StringW hash);
    // public System.Void AddDuplicate(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddDuplicate(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
  }; // Backtrace.Unity.Interfaces.IBacktraceDatabaseContext
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Add)> {
  static const MethodInfo* get() {
    static auto* backtraceDatabaseRecord = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceDatabaseRecord});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::FirstOrDefault
// Il2CppName: FirstOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::FirstOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "FirstOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::FirstOrDefault
// Il2CppName: FirstOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::System::Func_2<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*, bool>*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::FirstOrDefault)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "FirstOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::LastOrDefault
// Il2CppName: LastOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::LastOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "LastOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Get)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Delete)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Any
// Il2CppName: Any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Any)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Any
// Il2CppName: Any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Any)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::IncrementBatchRetry
// Il2CppName: IncrementBatchRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::IncrementBatchRetry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "IncrementBatchRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetTotalNumberOfRecords
// Il2CppName: GetTotalNumberOfRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetTotalNumberOfRecords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "GetTotalNumberOfRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::get_DeduplicationStrategy
// Il2CppName: get_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::DeduplicationStrategy (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::get_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "get_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::set_DeduplicationStrategy
// Il2CppName: set_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Types::DeduplicationStrategy)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::set_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "DeduplicationStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "set_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetRecordsToDelete
// Il2CppName: GetRecordsToDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)()>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetRecordsToDelete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "GetRecordsToDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetHash
// Il2CppName: GetHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Model::BacktraceData*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetHash)> {
  static const MethodInfo* get() {
    static auto* backtraceData = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "GetHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceData});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetRecordByHash
// Il2CppName: GetRecordByHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::StringW)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::GetRecordByHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "GetRecordByHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::AddDuplicate
// Il2CppName: AddDuplicate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Interfaces::IBacktraceDatabaseContext::AddDuplicate)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*), "AddDuplicate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
