// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Services.BacktraceMetrics
#include "Backtrace/Unity/Services/BacktraceMetrics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model::Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: UniqueEvent
  class UniqueEvent;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0*, "Backtrace.Unity.Services", "BacktraceMetrics/<>c__DisplayClass44_0");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceMetrics/<>c__DisplayClass44_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BacktraceMetrics::$$c__DisplayClass44_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String attributeName
    // Size: 0x8
    // Offset: 0x10
    ::StringW attributeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return attributeName;
    }
    // Get instance field reference: public System.String attributeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_attributeName();
    // public System.Void .ctor()
    // Offset: 0x2A5DAD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceMetrics::$$c__DisplayClass44_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceMetrics::$$c__DisplayClass44_0*, creationType>()));
    }
    // System.Boolean <AddUniqueEvent>b__0(Backtrace.Unity.Model.Metrics.UniqueEvent n)
    // Offset: 0x2A5DE9C
    bool $AddUniqueEvent$b__0(::Backtrace::Unity::Model::Metrics::UniqueEvent* n);
  }; // Backtrace.Unity.Services.BacktraceMetrics/<>c__DisplayClass44_0
  #pragma pack(pop)
  static check_size<sizeof(BacktraceMetrics::$$c__DisplayClass44_0), 16 + sizeof(::StringW)> __Backtrace_Unity_Services_BacktraceMetrics_$$c__DisplayClass44_0SizeCheck;
  static_assert(sizeof(BacktraceMetrics::$$c__DisplayClass44_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0::$AddUniqueEvent$b__0
// Il2CppName: <AddUniqueEvent>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0::*)(::Backtrace::Unity::Model::Metrics::UniqueEvent*)>(&Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0::$AddUniqueEvent$b__0)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Metrics", "UniqueEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0*), "<AddUniqueEvent>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
