// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceApi
#include "Backtrace/Unity/Interfaces/IBacktraceApi.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceHttpClient
  class BacktraceHttpClient;
  // Forward declaring type: BacktraceData
  class BacktraceData;
  // Forward declaring type: BacktraceResult
  class BacktraceResult;
  // Forward declaring type: BacktraceCredentials
  class BacktraceCredentials;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: BacktraceApi
  class BacktraceApi;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceApi);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceApi*, "Backtrace.Unity.Services", "BacktraceApi");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceApi
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceApi : public ::Il2CppObject/*, public ::Backtrace::Unity::Interfaces::IBacktraceApi*/ {
    public:
    // Nested type: ::Backtrace::Unity::Services::BacktraceApi::$Send$d__25
    class $Send$d__25;
    // Nested type: ::Backtrace::Unity::Services::BacktraceApi::$Send$d__26
    class $Send$d__26;
    // Nested type: ::Backtrace::Unity::Services::BacktraceApi::$Send$d__27
    class $Send$d__27;
    // Nested type: ::Backtrace::Unity::Services::BacktraceApi::$SendMinidump$d__24
    class $SendMinidump$d__24;
    public:
    // private Backtrace.Unity.Model.BacktraceHttpClient _httpClient
    // Size: 0x8
    // Offset: 0x10
    ::Backtrace::Unity::Model::BacktraceHttpClient* httpClient;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceHttpClient*) == 0x8);
    // private System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> <RequestHandler>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* RequestHandler;
    // Field size check
    static_assert(sizeof(::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>*) == 0x8);
    // private System.Boolean _shouldDisplayFailureMessage
    // Size: 0x1
    // Offset: 0x20
    bool shouldDisplayFailureMessage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldDisplayFailureMessage and: OnServerError
    char __padding2[0x7] = {};
    // private System.Action`1<System.Exception> <OnServerError>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::System::Exception*>* OnServerError;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::Exception*>*) == 0x8);
    // private System.Action`1<Backtrace.Unity.Model.BacktraceResult> <OnServerResponse>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* OnServerResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*) == 0x8);
    // private readonly System.Uri _serverUrl
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* serverUrl;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean <EnablePerformanceStatistics>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool EnablePerformanceStatistics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnablePerformanceStatistics and: minidumpUrl
    char __padding6[0x7] = {};
    // private readonly System.String _minidumpUrl
    // Size: 0x8
    // Offset: 0x48
    ::StringW minidumpUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly Backtrace.Unity.Model.BacktraceCredentials _credentials
    // Size: 0x8
    // Offset: 0x50
    ::Backtrace::Unity::Model::BacktraceCredentials* credentials;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceCredentials*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceApi
    operator ::Backtrace::Unity::Interfaces::IBacktraceApi() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceApi*>(this);
    }
    // Get instance field reference: private Backtrace.Unity.Model.BacktraceHttpClient _httpClient
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceHttpClient*& dyn__httpClient();
    // Get instance field reference: private System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> <RequestHandler>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>*& dyn_$RequestHandler$k__BackingField();
    // Get instance field reference: private System.Boolean _shouldDisplayFailureMessage
    [[deprecated("Use field access instead!")]] bool& dyn__shouldDisplayFailureMessage();
    // Get instance field reference: private System.Action`1<System.Exception> <OnServerError>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::Exception*>*& dyn_$OnServerError$k__BackingField();
    // Get instance field reference: private System.Action`1<Backtrace.Unity.Model.BacktraceResult> <OnServerResponse>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*& dyn_$OnServerResponse$k__BackingField();
    // Get instance field reference: private readonly System.Uri _serverUrl
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__serverUrl();
    // Get instance field reference: private System.Boolean <EnablePerformanceStatistics>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EnablePerformanceStatistics$k__BackingField();
    // Get instance field reference: private readonly System.String _minidumpUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn__minidumpUrl();
    // Get instance field reference: private readonly Backtrace.Unity.Model.BacktraceCredentials _credentials
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceCredentials*& dyn__credentials();
    // public System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> get_RequestHandler()
    // Offset: 0x2A58148
    ::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* get_RequestHandler();
    // public System.Void set_RequestHandler(System.Func`3<System.String,Backtrace.Unity.Model.BacktraceData,Backtrace.Unity.Model.BacktraceResult> value)
    // Offset: 0x2A58150
    void set_RequestHandler(::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* value);
    // public System.Action`1<System.Exception> get_OnServerError()
    // Offset: 0x2A58158
    ::System::Action_1<::System::Exception*>* get_OnServerError();
    // public System.Void set_OnServerError(System.Action`1<System.Exception> value)
    // Offset: 0x2A58160
    void set_OnServerError(::System::Action_1<::System::Exception*>* value);
    // public System.Action`1<Backtrace.Unity.Model.BacktraceResult> get_OnServerResponse()
    // Offset: 0x2A58168
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* get_OnServerResponse();
    // public System.Void set_OnServerResponse(System.Action`1<Backtrace.Unity.Model.BacktraceResult> value)
    // Offset: 0x2A58170
    void set_OnServerResponse(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* value);
    // public System.Boolean get_EnablePerformanceStatistics()
    // Offset: 0x2A58178
    bool get_EnablePerformanceStatistics();
    // public System.Void set_EnablePerformanceStatistics(System.Boolean value)
    // Offset: 0x2A58180
    void set_EnablePerformanceStatistics(bool value);
    // public System.String get_ServerUrl()
    // Offset: 0x2A5818C
    ::StringW get_ServerUrl();
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceCredentials credentials, System.Boolean ignoreSslValidation)
    // Offset: 0x2A500EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceApi* New_ctor(::Backtrace::Unity::Model::BacktraceCredentials* credentials, bool ignoreSslValidation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceApi::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceApi*, creationType>(credentials, ignoreSslValidation)));
    }
    // public System.Collections.IEnumerator SendMinidump(System.String minidumpPath, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes, System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback)
    // Offset: 0x2A583B0
    ::System::Collections::IEnumerator* SendMinidump(::StringW minidumpPath, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* callback);
    // public System.Collections.IEnumerator Send(Backtrace.Unity.Model.BacktraceData data, System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback)
    // Offset: 0x2A584A4
    ::System::Collections::IEnumerator* Send(::Backtrace::Unity::Model::BacktraceData* data, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* callback);
    // public System.Collections.IEnumerator Send(System.String json, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.Int32 deduplication, System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback)
    // Offset: 0x2A58568
    ::System::Collections::IEnumerator* Send(::StringW json, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, int deduplication, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* callback);
    // public System.Collections.IEnumerator Send(System.String json, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback)
    // Offset: 0x2A58650
    ::System::Collections::IEnumerator* Send(::StringW json, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* callback);
    // private System.Void PrintLog(UnityEngine.Networking.UnityWebRequest request)
    // Offset: 0x2A58744
    void PrintLog(::UnityEngine::Networking::UnityWebRequest* request);
  }; // Backtrace.Unity.Services.BacktraceApi
  #pragma pack(pop)
  static check_size<sizeof(BacktraceApi), 80 + sizeof(::Backtrace::Unity::Model::BacktraceCredentials*)> __Backtrace_Unity_Services_BacktraceApiSizeCheck;
  static_assert(sizeof(BacktraceApi) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::get_RequestHandler
// Il2CppName: get_RequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>* (Backtrace::Unity::Services::BacktraceApi::*)()>(&Backtrace::Unity::Services::BacktraceApi::get_RequestHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "get_RequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::set_RequestHandler
// Il2CppName: set_RequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::*)(::System::Func_3<::StringW, ::Backtrace::Unity::Model::BacktraceData*, ::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::set_RequestHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData"), ::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "set_RequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::get_OnServerError
// Il2CppName: get_OnServerError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::System::Exception*>* (Backtrace::Unity::Services::BacktraceApi::*)()>(&Backtrace::Unity::Services::BacktraceApi::get_OnServerError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "get_OnServerError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::set_OnServerError
// Il2CppName: set_OnServerError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::*)(::System::Action_1<::System::Exception*>*)>(&Backtrace::Unity::Services::BacktraceApi::set_OnServerError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "set_OnServerError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::get_OnServerResponse
// Il2CppName: get_OnServerResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* (Backtrace::Unity::Services::BacktraceApi::*)()>(&Backtrace::Unity::Services::BacktraceApi::get_OnServerResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "get_OnServerResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::set_OnServerResponse
// Il2CppName: set_OnServerResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::*)(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::set_OnServerResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "set_OnServerResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::get_EnablePerformanceStatistics
// Il2CppName: get_EnablePerformanceStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceApi::*)()>(&Backtrace::Unity::Services::BacktraceApi::get_EnablePerformanceStatistics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "get_EnablePerformanceStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::set_EnablePerformanceStatistics
// Il2CppName: set_EnablePerformanceStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::*)(bool)>(&Backtrace::Unity::Services::BacktraceApi::set_EnablePerformanceStatistics)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "set_EnablePerformanceStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::get_ServerUrl
// Il2CppName: get_ServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Services::BacktraceApi::*)()>(&Backtrace::Unity::Services::BacktraceApi::get_ServerUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "get_ServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::SendMinidump
// Il2CppName: SendMinidump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Backtrace::Unity::Services::BacktraceApi::*)(::StringW, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::SendMinidump)> {
  static const MethodInfo* get() {
    static auto* minidumpPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "SendMinidump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minidumpPath, attachments, attributes, callback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Backtrace::Unity::Services::BacktraceApi::*)(::Backtrace::Unity::Model::BacktraceData*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::Send)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, callback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Backtrace::Unity::Services::BacktraceApi::*)(::StringW, ::System::Collections::Generic::IEnumerable_1<::StringW>*, int, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::Send)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* deduplication = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json, attachments, deduplication, callback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Backtrace::Unity::Services::BacktraceApi::*)(::StringW, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)>(&Backtrace::Unity::Services::BacktraceApi::Send)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json, attachments, attributes, callback});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::PrintLog
// Il2CppName: PrintLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::*)(::UnityEngine::Networking::UnityWebRequest*)>(&Backtrace::Unity::Services::BacktraceApi::PrintLog)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi*), "PrintLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
