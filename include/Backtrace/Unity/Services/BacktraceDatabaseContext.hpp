// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceDatabaseContext
#include "Backtrace/Unity/Interfaces/IBacktraceDatabaseContext.hpp"
// Including type: Backtrace.Unity.Types.RetryOrder
#include "Backtrace/Unity/Types/RetryOrder.hpp"
// Including type: Backtrace.Unity.Types.DeduplicationStrategy
#include "Backtrace/Unity/Types/DeduplicationStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Backtrace::Unity::Model::Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseRecord
  class BacktraceDatabaseRecord;
  // Forward declaring type: BacktraceDatabaseSettings
  class BacktraceDatabaseSettings;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: BacktraceDatabaseContext
  class BacktraceDatabaseContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceDatabaseContext);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceDatabaseContext*, "Backtrace.Unity.Services", "BacktraceDatabaseContext");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceDatabaseContext
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseContext : public ::Il2CppObject/*, public ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*/ {
    public:
    // Nested type: ::Backtrace::Unity::Services::BacktraceDatabaseContext::$$c
    class $$c;
    // Nested type: ::Backtrace::Unity::Services::BacktraceDatabaseContext::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    public:
    // private System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.List`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord>> <BatchRetry>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>* BatchRetry;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>*) == 0x8);
    // System.Int64 TotalSize
    // Size: 0x8
    // Offset: 0x18
    int64_t TotalSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int32 TotalRecords
    // Size: 0x4
    // Offset: 0x20
    int TotalRecords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _retryNumber
    // Size: 0x4
    // Offset: 0x24
    int retryNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Backtrace.Unity.Types.RetryOrder <RetryOrder>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::Backtrace::Unity::Types::RetryOrder RetryOrder;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::RetryOrder) == 0x4);
    // private Backtrace.Unity.Types.DeduplicationStrategy <DeduplicationStrategy>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    ::Backtrace::Unity::Types::DeduplicationStrategy DeduplicationStrategy;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::DeduplicationStrategy) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext
    operator ::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceDatabaseContext*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.List`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord>> <BatchRetry>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>*& dyn_$BatchRetry$k__BackingField();
    // Get instance field reference: System.Int64 TotalSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_TotalSize();
    // Get instance field reference: System.Int32 TotalRecords
    [[deprecated("Use field access instead!")]] int& dyn_TotalRecords();
    // Get instance field reference: private readonly System.Int32 _retryNumber
    [[deprecated("Use field access instead!")]] int& dyn__retryNumber();
    // Get instance field reference: private Backtrace.Unity.Types.RetryOrder <RetryOrder>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::RetryOrder& dyn_$RetryOrder$k__BackingField();
    // Get instance field reference: private Backtrace.Unity.Types.DeduplicationStrategy <DeduplicationStrategy>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::DeduplicationStrategy& dyn_$DeduplicationStrategy$k__BackingField();
    // System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.List`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord>> get_BatchRetry()
    // Offset: 0x2A59974
    ::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>* get_BatchRetry();
    // private System.Void set_BatchRetry(System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.List`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord>> value)
    // Offset: 0x2A5997C
    void set_BatchRetry(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>* value);
    // Backtrace.Unity.Types.RetryOrder get_RetryOrder()
    // Offset: 0x2A59984
    ::Backtrace::Unity::Types::RetryOrder get_RetryOrder();
    // System.Void set_RetryOrder(Backtrace.Unity.Types.RetryOrder value)
    // Offset: 0x2A5998C
    void set_RetryOrder(::Backtrace::Unity::Types::RetryOrder value);
    // public Backtrace.Unity.Types.DeduplicationStrategy get_DeduplicationStrategy()
    // Offset: 0x2A59994
    ::Backtrace::Unity::Types::DeduplicationStrategy get_DeduplicationStrategy();
    // public System.Void set_DeduplicationStrategy(Backtrace.Unity.Types.DeduplicationStrategy value)
    // Offset: 0x2A5999C
    void set_DeduplicationStrategy(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // public System.Void .ctor(Backtrace.Unity.Model.Database.BacktraceDatabaseSettings settings)
    // Offset: 0x2A55014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseContext* New_ctor(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceDatabaseContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseContext*, creationType>(settings)));
    }
    // private System.Void SetupBatch()
    // Offset: 0x2A599A4
    void SetupBatch();
    // public System.String GetHash(Backtrace.Unity.Model.BacktraceData backtraceData)
    // Offset: 0x2A59B84
    ::StringW GetHash(::Backtrace::Unity::Model::BacktraceData* backtraceData);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord GetRecordByHash(System.String hash)
    // Offset: 0x2A59D94
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* GetRecordByHash(::StringW hash);
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord Add(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord backtraceRecord)
    // Offset: 0x2A5A040
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* Add(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* backtraceRecord);
    // public System.Boolean Any(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5A1D0
    bool Any(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // public System.Boolean Any()
    // Offset: 0x2A5A398
    bool Any();
    // public System.Void Delete(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5A3A8
    void Delete(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // public System.Void IncrementBatchRetry()
    // Offset: 0x2A5A774
    void IncrementBatchRetry();
    // private System.Void IncrementBatches()
    // Offset: 0x2A5A8C4
    void IncrementBatches();
    // private System.Void RemoveMaxRetries()
    // Offset: 0x2A5A78C
    void RemoveMaxRetries();
    // public System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> Get()
    // Offset: 0x2A5AAB4
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* Get();
    // public System.Int32 Count()
    // Offset: 0x2A5ABB0
    int Count();
    // public System.Void Dispose()
    // Offset: 0x2A5ADC8
    void Dispose();
    // public System.Void Clear()
    // Offset: 0x2A5AE70
    void Clear();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord LastOrDefault()
    // Offset: 0x2A5B180
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* LastOrDefault();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord FirstOrDefault()
    // Offset: 0x2A5B7B0
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* FirstOrDefault();
    // public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord FirstOrDefault(System.Func`2<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord,System.Boolean> predicate)
    // Offset: 0x2A5B7C4
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* FirstOrDefault(::System::Func_2<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*, bool>* predicate);
    // private Backtrace.Unity.Model.Database.BacktraceDatabaseRecord GetFirstRecord()
    // Offset: 0x2A5B190
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* GetFirstRecord();
    // private Backtrace.Unity.Model.Database.BacktraceDatabaseRecord GetLastRecord()
    // Offset: 0x2A5B4E0
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* GetLastRecord();
    // public System.Int64 GetSize()
    // Offset: 0x2A5B8EC
    int64_t GetSize();
    // public System.Int32 GetTotalNumberOfRecords()
    // Offset: 0x2A5B8F4
    int GetTotalNumberOfRecords();
    // public System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> GetRecordsToDelete()
    // Offset: 0x2A5B8F8
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* GetRecordsToDelete();
    // public System.Void AddDuplicate(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5B9A0
    void AddDuplicate(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
  }; // Backtrace.Unity.Services.BacktraceDatabaseContext
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseContext), 44 + sizeof(::Backtrace::Unity::Types::DeduplicationStrategy)> __Backtrace_Unity_Services_BacktraceDatabaseContextSizeCheck;
  static_assert(sizeof(BacktraceDatabaseContext) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::get_BatchRetry
// Il2CppName: get_BatchRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::get_BatchRetry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "get_BatchRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::set_BatchRetry
// Il2CppName: set_BatchRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*>*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::set_BatchRetry)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "set_BatchRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::get_RetryOrder
// Il2CppName: get_RetryOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::RetryOrder (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::get_RetryOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "get_RetryOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::set_RetryOrder
// Il2CppName: set_RetryOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Types::RetryOrder)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::set_RetryOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "RetryOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "set_RetryOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::get_DeduplicationStrategy
// Il2CppName: get_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::DeduplicationStrategy (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::get_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "get_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::set_DeduplicationStrategy
// Il2CppName: set_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Types::DeduplicationStrategy)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::set_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Types", "DeduplicationStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "set_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::SetupBatch
// Il2CppName: SetupBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::SetupBatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "SetupBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetHash
// Il2CppName: GetHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Model::BacktraceData*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetHash)> {
  static const MethodInfo* get() {
    static auto* backtraceData = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceData});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetRecordByHash
// Il2CppName: GetRecordByHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetRecordByHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetRecordByHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Add)> {
  static const MethodInfo* get() {
    static auto* backtraceRecord = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceRecord});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Any
// Il2CppName: Any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Any)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Any
// Il2CppName: Any
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Any)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Any", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Delete)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::IncrementBatchRetry
// Il2CppName: IncrementBatchRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::IncrementBatchRetry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "IncrementBatchRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::IncrementBatches
// Il2CppName: IncrementBatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::IncrementBatches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "IncrementBatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::RemoveMaxRetries
// Il2CppName: RemoveMaxRetries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::RemoveMaxRetries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "RemoveMaxRetries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Get)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::LastOrDefault
// Il2CppName: LastOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::LastOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "LastOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::FirstOrDefault
// Il2CppName: FirstOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::FirstOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "FirstOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::FirstOrDefault
// Il2CppName: FirstOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::System::Func_2<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*, bool>*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::FirstOrDefault)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "FirstOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetFirstRecord
// Il2CppName: GetFirstRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetFirstRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetFirstRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetLastRecord
// Il2CppName: GetLastRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetLastRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetLastRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetTotalNumberOfRecords
// Il2CppName: GetTotalNumberOfRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetTotalNumberOfRecords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetTotalNumberOfRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::GetRecordsToDelete
// Il2CppName: GetRecordsToDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* (Backtrace::Unity::Services::BacktraceDatabaseContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseContext::GetRecordsToDelete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "GetRecordsToDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseContext::AddDuplicate
// Il2CppName: AddDuplicate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseContext::AddDuplicate)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseContext*), "AddDuplicate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
