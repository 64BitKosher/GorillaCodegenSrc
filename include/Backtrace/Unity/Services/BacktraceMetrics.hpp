// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceMetrics
#include "Backtrace/Unity/Interfaces/IBacktraceMetrics.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
}
// Forward declaring namespace: Backtrace::Unity::Model::Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: UniqueEventsSubmissionQueue
  class UniqueEventsSubmissionQueue;
  // Forward declaring type: SummedEventsSubmissionQueue
  class SummedEventsSubmissionQueue;
  // Forward declaring type: UniqueEvent
  class UniqueEvent;
  // Forward declaring type: SummedEvent
  class SummedEvent;
}
// Forward declaring namespace: Backtrace::Unity::Model::JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Forward declaring type: AttributeProvider
  class AttributeProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: IBacktraceHttpClient
  class IBacktraceHttpClient;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: BacktraceMetrics
  class BacktraceMetrics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceMetrics);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceMetrics*, "Backtrace.Unity.Services", "BacktraceMetrics");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceMetrics
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceMetrics : public ::Il2CppObject/*, public ::Backtrace::Unity::Interfaces::IBacktraceMetrics*/ {
    public:
    // Nested type: ::Backtrace::Unity::Services::BacktraceMetrics::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    public:
    // public readonly System.Guid SessionId
    // Size: 0x10
    // Offset: 0x10
    ::System::Guid SessionId;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // private System.String <StartupUniqueAttributeName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW StartupUniqueAttributeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // readonly Backtrace.Unity.Model.Metrics.UniqueEventsSubmissionQueue _uniqueEventsSubmissionQueue
    // Size: 0x8
    // Offset: 0x28
    ::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue* uniqueEventsSubmissionQueue;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*) == 0x8);
    // readonly Backtrace.Unity.Model.Metrics.SummedEventsSubmissionQueue _summedEventsSubmissionQueue
    // Size: 0x8
    // Offset: 0x30
    ::Backtrace::Unity::Model::Metrics::SummedEventsSubmissionQueue* summedEventsSubmissionQueue;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Metrics::SummedEventsSubmissionQueue*) == 0x8);
    // private readonly System.Int64 _timeIntervalInSec
    // Size: 0x8
    // Offset: 0x38
    int64_t timeIntervalInSec;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x40
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastUpdateTime and: attributeProvider
    char __padding5[0x4] = {};
    // private readonly Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    // Size: 0x8
    // Offset: 0x48
    ::Backtrace::Unity::Model::JsonData::AttributeProvider* attributeProvider;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::AttributeProvider*) == 0x8);
    // private System.Object _object
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* object;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.String _sessionId
    // Size: 0x8
    // Offset: 0x58
    ::StringW sessionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceMetrics
    operator ::Backtrace::Unity::Interfaces::IBacktraceMetrics() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceMetrics*>(this);
    }
    // static field const value: static public System.String DefaultSubmissionUrl
    static constexpr const char* DefaultSubmissionUrl = "https://events.backtrace.io/api/";
    // Get static field: static public System.String DefaultSubmissionUrl
    static ::StringW _get_DefaultSubmissionUrl();
    // Set static field: static public System.String DefaultSubmissionUrl
    static void _set_DefaultSubmissionUrl(::StringW value);
    // static field const value: static public System.UInt32 DefaultTimeIntervalInMin
    static constexpr const uint DefaultTimeIntervalInMin = 30u;
    // Get static field: static public System.UInt32 DefaultTimeIntervalInMin
    static uint _get_DefaultTimeIntervalInMin();
    // Set static field: static public System.UInt32 DefaultTimeIntervalInMin
    static void _set_DefaultTimeIntervalInMin(uint value);
    // static field const value: static public System.UInt32 DefaultTimeIntervalInSec
    static constexpr const uint DefaultTimeIntervalInSec = 1800u;
    // Get static field: static public System.UInt32 DefaultTimeIntervalInSec
    static uint _get_DefaultTimeIntervalInSec();
    // Set static field: static public System.UInt32 DefaultTimeIntervalInSec
    static void _set_DefaultTimeIntervalInSec(uint value);
    // static field const value: static public System.String DefaultUniqueAttributeName
    static constexpr const char* DefaultUniqueAttributeName = "guid";
    // Get static field: static public System.String DefaultUniqueAttributeName
    static ::StringW _get_DefaultUniqueAttributeName();
    // Set static field: static public System.String DefaultUniqueAttributeName
    static void _set_DefaultUniqueAttributeName(::StringW value);
    // static field const value: static public System.Int32 MaxTimeBetweenRequests
    static constexpr const int MaxTimeBetweenRequests = 300;
    // Get static field: static public System.Int32 MaxTimeBetweenRequests
    static int _get_MaxTimeBetweenRequests();
    // Set static field: static public System.Int32 MaxTimeBetweenRequests
    static void _set_MaxTimeBetweenRequests(int value);
    // static field const value: static public System.Int32 MaxNumberOfAttempts
    static constexpr const int MaxNumberOfAttempts = 3;
    // Get static field: static public System.Int32 MaxNumberOfAttempts
    static int _get_MaxNumberOfAttempts();
    // Set static field: static public System.Int32 MaxNumberOfAttempts
    static void _set_MaxNumberOfAttempts(int value);
    // static field const value: static System.String ApplicationSessionKey
    static constexpr const char* ApplicationSessionKey = "application.session";
    // Get static field: static System.String ApplicationSessionKey
    static ::StringW _get_ApplicationSessionKey();
    // Set static field: static System.String ApplicationSessionKey
    static void _set_ApplicationSessionKey(::StringW value);
    // static field const value: static private System.String StartupEventName
    static constexpr const char* StartupEventName = "Application Launches";
    // Get static field: static private System.String StartupEventName
    static ::StringW _get_StartupEventName();
    // Set static field: static private System.String StartupEventName
    static void _set_StartupEventName(::StringW value);
    // Get instance field reference: public readonly System.Guid SessionId
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_SessionId();
    // Get instance field reference: private System.String <StartupUniqueAttributeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$StartupUniqueAttributeName$k__BackingField();
    // Get instance field reference: readonly Backtrace.Unity.Model.Metrics.UniqueEventsSubmissionQueue _uniqueEventsSubmissionQueue
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*& dyn__uniqueEventsSubmissionQueue();
    // Get instance field reference: readonly Backtrace.Unity.Model.Metrics.SummedEventsSubmissionQueue _summedEventsSubmissionQueue
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Metrics::SummedEventsSubmissionQueue*& dyn__summedEventsSubmissionQueue();
    // Get instance field reference: private readonly System.Int64 _timeIntervalInSec
    [[deprecated("Use field access instead!")]] int64_t& dyn__timeIntervalInSec();
    // Get instance field reference: private System.Single _lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn__lastUpdateTime();
    // Get instance field reference: private readonly Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::AttributeProvider*& dyn__attributeProvider();
    // Get instance field reference: private System.Object _object
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__object();
    // Get instance field reference: private readonly System.String _sessionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sessionId();
    // public System.String get_StartupUniqueAttributeName()
    // Offset: 0x2A5D408
    ::StringW get_StartupUniqueAttributeName();
    // public System.Void set_StartupUniqueAttributeName(System.String value)
    // Offset: 0x2A5D410
    void set_StartupUniqueAttributeName(::StringW value);
    // public System.UInt32 get_MaximumUniqueEvents()
    // Offset: 0x2A5D418
    uint get_MaximumUniqueEvents();
    // public System.Void set_MaximumUniqueEvents(System.UInt32 value)
    // Offset: 0x2A5D460
    void set_MaximumUniqueEvents(uint value);
    // public System.UInt32 get_MaximumSummedEvents()
    // Offset: 0x2A5D4AC
    uint get_MaximumSummedEvents();
    // public System.Void set_MaximumSummedEvents(System.UInt32 value)
    // Offset: 0x2A5D4F4
    void set_MaximumSummedEvents(uint value);
    // public System.String get_UniqueEventsSubmissionUrl()
    // Offset: 0x2A5D540
    ::StringW get_UniqueEventsSubmissionUrl();
    // public System.Void set_UniqueEventsSubmissionUrl(System.String value)
    // Offset: 0x2A5D588
    void set_UniqueEventsSubmissionUrl(::StringW value);
    // public System.String get_SummedEventsSubmissionUrl()
    // Offset: 0x2A5D5D8
    ::StringW get_SummedEventsSubmissionUrl();
    // public System.Void set_SummedEventsSubmissionUrl(System.String value)
    // Offset: 0x2A5D620
    void set_SummedEventsSubmissionUrl(::StringW value);
    // public System.Void set_IgnoreSslValidation(System.Boolean value)
    // Offset: 0x2A4E4B4
    void set_IgnoreSslValidation(bool value);
    // public System.Collections.Generic.LinkedList`1<Backtrace.Unity.Model.Metrics.UniqueEvent> get_UniqueEvents()
    // Offset: 0x2A5D670
    ::System::Collections::Generic::LinkedList_1<::Backtrace::Unity::Model::Metrics::UniqueEvent*>* get_UniqueEvents();
    // System.Collections.Generic.LinkedList`1<Backtrace.Unity.Model.Metrics.SummedEvent> get_SummedEvents()
    // Offset: 0x2A5D68C
    ::System::Collections::Generic::LinkedList_1<::Backtrace::Unity::Model::Metrics::SummedEvent*>* get_SummedEvents();
    // public System.Void .ctor(Backtrace.Unity.Model.JsonData.AttributeProvider attributeProvider, System.Int64 timeIntervalInSec, System.String uniqueEventsSubmissionUrl, System.String summedEventsSubmissionUrl)
    // Offset: 0x2A4E324
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceMetrics* New_ctor(::Backtrace::Unity::Model::JsonData::AttributeProvider* attributeProvider, int64_t timeIntervalInSec, ::StringW uniqueEventsSubmissionUrl, ::StringW summedEventsSubmissionUrl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceMetrics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceMetrics*, creationType>(attributeProvider, timeIntervalInSec, uniqueEventsSubmissionUrl, summedEventsSubmissionUrl)));
    }
    // System.Void OverrideHttpClient(Backtrace.Unity.Model.IBacktraceHttpClient client)
    // Offset: 0x2A5D6A8
    void OverrideHttpClient(::Backtrace::Unity::Model::IBacktraceHttpClient* client);
    // public System.Void SendStartupEvent()
    // Offset: 0x2A508D0
    void SendStartupEvent();
    // public System.Void Tick(System.Single time)
    // Offset: 0x2A50B98
    void Tick(float time);
    // public System.Void Send()
    // Offset: 0x2A5D770
    void Send();
    // public System.Boolean AddUniqueEvent(System.String attributeName)
    // Offset: 0x2A5D7E4
    bool AddUniqueEvent(::StringW attributeName);
    // public System.Boolean AddUniqueEvent(System.String attributeName, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A5D7EC
    bool AddUniqueEvent(::StringW attributeName, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // public System.Int32 Count()
    // Offset: 0x2A5DAD8
    int Count();
    // public System.Boolean AddSummedEvent(System.String metricsGroupName)
    // Offset: 0x2A5DB5C
    bool AddSummedEvent(::StringW metricsGroupName);
    // public System.Boolean AddSummedEvent(System.String metricsGroupName, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A5DB64
    bool AddSummedEvent(::StringW metricsGroupName, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // private System.Void SendPendingSubmissionJobs(System.Single time)
    // Offset: 0x2A5D6E8
    void SendPendingSubmissionJobs(float time);
    // static System.String GetDefaultUniqueEventsUrl(System.String universeName, System.String token)
    // Offset: 0x2A4E274
    static ::StringW GetDefaultUniqueEventsUrl(::StringW universeName, ::StringW token);
    // static System.String GetDefaultSummedEventsUrl(System.String universeName, System.String token)
    // Offset: 0x2A4E2CC
    static ::StringW GetDefaultSummedEventsUrl(::StringW universeName, ::StringW token);
    // static private System.String GetDefaultSubmissionUrl(System.String serviceName, System.String universeName, System.String token)
    // Offset: 0x2A5DC54
    static ::StringW GetDefaultSubmissionUrl(::StringW serviceName, ::StringW universeName, ::StringW token);
    // public System.Void GetAttributes(System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A5DDD4
    void GetAttributes(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
  }; // Backtrace.Unity.Services.BacktraceMetrics
  #pragma pack(pop)
  static check_size<sizeof(BacktraceMetrics), 88 + sizeof(::StringW)> __Backtrace_Unity_Services_BacktraceMetricsSizeCheck;
  static_assert(sizeof(BacktraceMetrics) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_StartupUniqueAttributeName
// Il2CppName: get_StartupUniqueAttributeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_StartupUniqueAttributeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_StartupUniqueAttributeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_StartupUniqueAttributeName
// Il2CppName: set_StartupUniqueAttributeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::set_StartupUniqueAttributeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_StartupUniqueAttributeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_MaximumUniqueEvents
// Il2CppName: get_MaximumUniqueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_MaximumUniqueEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_MaximumUniqueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_MaximumUniqueEvents
// Il2CppName: set_MaximumUniqueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(uint)>(&Backtrace::Unity::Services::BacktraceMetrics::set_MaximumUniqueEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_MaximumUniqueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_MaximumSummedEvents
// Il2CppName: get_MaximumSummedEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_MaximumSummedEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_MaximumSummedEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_MaximumSummedEvents
// Il2CppName: set_MaximumSummedEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(uint)>(&Backtrace::Unity::Services::BacktraceMetrics::set_MaximumSummedEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_MaximumSummedEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_UniqueEventsSubmissionUrl
// Il2CppName: get_UniqueEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_UniqueEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_UniqueEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_UniqueEventsSubmissionUrl
// Il2CppName: set_UniqueEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::set_UniqueEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_UniqueEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_SummedEventsSubmissionUrl
// Il2CppName: get_SummedEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_SummedEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_SummedEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_SummedEventsSubmissionUrl
// Il2CppName: set_SummedEventsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::set_SummedEventsSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_SummedEventsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::set_IgnoreSslValidation
// Il2CppName: set_IgnoreSslValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(bool)>(&Backtrace::Unity::Services::BacktraceMetrics::set_IgnoreSslValidation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "set_IgnoreSslValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_UniqueEvents
// Il2CppName: get_UniqueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedList_1<::Backtrace::Unity::Model::Metrics::UniqueEvent*>* (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_UniqueEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_UniqueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::get_SummedEvents
// Il2CppName: get_SummedEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedList_1<::Backtrace::Unity::Model::Metrics::SummedEvent*>* (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::get_SummedEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "get_SummedEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::OverrideHttpClient
// Il2CppName: OverrideHttpClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(::Backtrace::Unity::Model::IBacktraceHttpClient*)>(&Backtrace::Unity::Services::BacktraceMetrics::OverrideHttpClient)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "IBacktraceHttpClient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "OverrideHttpClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::SendStartupEvent
// Il2CppName: SendStartupEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::SendStartupEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "SendStartupEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(float)>(&Backtrace::Unity::Services::BacktraceMetrics::Tick)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::AddUniqueEvent
// Il2CppName: AddUniqueEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::AddUniqueEvent)> {
  static const MethodInfo* get() {
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "AddUniqueEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::AddUniqueEvent
// Il2CppName: AddUniqueEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Services::BacktraceMetrics::AddUniqueEvent)> {
  static const MethodInfo* get() {
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "AddUniqueEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeName, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceMetrics::*)()>(&Backtrace::Unity::Services::BacktraceMetrics::Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::AddSummedEvent
// Il2CppName: AddSummedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::AddSummedEvent)> {
  static const MethodInfo* get() {
    static auto* metricsGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "AddSummedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricsGroupName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::AddSummedEvent
// Il2CppName: AddSummedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceMetrics::*)(::StringW, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Services::BacktraceMetrics::AddSummedEvent)> {
  static const MethodInfo* get() {
    static auto* metricsGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "AddSummedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricsGroupName, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::SendPendingSubmissionJobs
// Il2CppName: SendPendingSubmissionJobs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(float)>(&Backtrace::Unity::Services::BacktraceMetrics::SendPendingSubmissionJobs)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "SendPendingSubmissionJobs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::GetDefaultUniqueEventsUrl
// Il2CppName: GetDefaultUniqueEventsUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::GetDefaultUniqueEventsUrl)> {
  static const MethodInfo* get() {
    static auto* universeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "GetDefaultUniqueEventsUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{universeName, token});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::GetDefaultSummedEventsUrl
// Il2CppName: GetDefaultSummedEventsUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::GetDefaultSummedEventsUrl)> {
  static const MethodInfo* get() {
    static auto* universeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "GetDefaultSummedEventsUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{universeName, token});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::GetDefaultSubmissionUrl
// Il2CppName: GetDefaultSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::StringW)>(&Backtrace::Unity::Services::BacktraceMetrics::GetDefaultSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* serviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* universeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "GetDefaultSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serviceName, universeName, token});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceMetrics::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceMetrics::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Services::BacktraceMetrics::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceMetrics*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
