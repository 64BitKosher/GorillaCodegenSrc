// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Services.BacktraceApi
#include "Backtrace/Unity/Services/BacktraceApi.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceResult
  class BacktraceResult;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceApi::$Send$d__26);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceApi::$Send$d__26*, "Backtrace.Unity.Services", "BacktraceApi/<Send>d__26");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceApi/<Send>d__26
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BacktraceApi::$Send$d__26 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Int32 deduplication
    // Size: 0x4
    // Offset: 0x20
    int deduplication;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: deduplication and: $$4__this
    char __padding2[0x4] = {};
    // public Backtrace.Unity.Services.BacktraceApi <>4__this
    // Size: 0x8
    // Offset: 0x28
    ::Backtrace::Unity::Services::BacktraceApi* $$4__this;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Services::BacktraceApi*) == 0x8);
    // public System.String json
    // Size: 0x8
    // Offset: 0x30
    ::StringW json;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.IEnumerable`1<System.String> attachments
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::StringW>*) == 0x8);
    // public System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>* callback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public System.Int32 deduplication
    [[deprecated("Use field access instead!")]] int& dyn_deduplication();
    // Get instance field reference: public Backtrace.Unity.Services.BacktraceApi <>4__this
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Services::BacktraceApi*& dyn_$$4__this();
    // Get instance field reference: public System.String json
    [[deprecated("Use field access instead!")]] ::StringW& dyn_json();
    // Get instance field reference: public System.Collections.Generic.IEnumerable`1<System.String> attachments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::StringW>*& dyn_attachments();
    // Get instance field reference: public System.Action`1<Backtrace.Unity.Model.BacktraceResult> callback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*& dyn_callback();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x2A58628
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceApi::$Send$d__26* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceApi::$Send$d__26::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceApi::$Send$d__26*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x2A589C4
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x2A589C8
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x2A58B24
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x2A58B2C
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2A58B64
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // Backtrace.Unity.Services.BacktraceApi/<Send>d__26
  #pragma pack(pop)
  static check_size<sizeof(BacktraceApi::$Send$d__26), 64 + sizeof(::System::Action_1<::Backtrace::Unity::Model::BacktraceResult*>*)> __Backtrace_Unity_Services_BacktraceApi_$Send$d__26SizeCheck;
  static_assert(sizeof(BacktraceApi::$Send$d__26) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::$Send$d__26::*)()>(&Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi::$Send$d__26*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceApi::$Send$d__26::*)()>(&Backtrace::Unity::Services::BacktraceApi::$Send$d__26::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi::$Send$d__26*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Backtrace::Unity::Services::BacktraceApi::$Send$d__26::*)()>(&Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi::$Send$d__26*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceApi::$Send$d__26::*)()>(&Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi::$Send$d__26*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Backtrace::Unity::Services::BacktraceApi::$Send$d__26::*)()>(&Backtrace::Unity::Services::BacktraceApi::$Send$d__26::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceApi::$Send$d__26*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
