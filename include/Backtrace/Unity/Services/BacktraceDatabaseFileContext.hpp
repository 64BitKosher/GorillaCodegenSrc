// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Interfaces.IBacktraceDatabaseFileContext
#include "Backtrace/Unity/Interfaces/IBacktraceDatabaseFileContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Services
namespace Backtrace::Unity::Services {
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: DirectoryInfo
  class DirectoryInfo;
  // Forward declaring type: FileInfo
  class FileInfo;
}
// Forward declaring namespace: Backtrace::Unity::Model::Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseAttachmentManager
  class BacktraceDatabaseAttachmentManager;
  // Forward declaring type: BacktraceDatabaseSettings
  class BacktraceDatabaseSettings;
  // Forward declaring type: BacktraceDatabaseRecord
  class BacktraceDatabaseRecord;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Forward declaring type: BacktraceDatabaseFileContext
  class BacktraceDatabaseFileContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Services::BacktraceDatabaseFileContext);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Services::BacktraceDatabaseFileContext*, "Backtrace.Unity.Services", "BacktraceDatabaseFileContext");
// Type namespace: Backtrace.Unity.Services
namespace Backtrace::Unity::Services {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Services.BacktraceDatabaseFileContext
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseFileContext : public ::Il2CppObject/*, public ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext*/ {
    public:
    // Nested type: ::Backtrace::Unity::Services::BacktraceDatabaseFileContext::$$c
    class $$c;
    // Nested type: ::Backtrace::Unity::Services::BacktraceDatabaseFileContext::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    public:
    // private System.String[] _possibleDatabaseExtension
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> possibleDatabaseExtension;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private readonly System.Int64 _maxDatabaseSize
    // Size: 0x8
    // Offset: 0x18
    int64_t maxDatabaseSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly System.UInt32 _maxRecordNumber
    // Size: 0x4
    // Offset: 0x20
    uint maxRecordNumber;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: maxRecordNumber and: databaseDirectoryInfo
    char __padding2[0x4] = {};
    // private readonly System.IO.DirectoryInfo _databaseDirectoryInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::DirectoryInfo* databaseDirectoryInfo;
    // Field size check
    static_assert(sizeof(::System::IO::DirectoryInfo*) == 0x8);
    // readonly Backtrace.Unity.Model.Database.BacktraceDatabaseAttachmentManager _attachmentManager
    // Size: 0x8
    // Offset: 0x30
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager* attachmentManager;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*) == 0x8);
    // private readonly System.String _path
    // Size: 0x8
    // Offset: 0x38
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext
    operator ::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Interfaces::IBacktraceDatabaseFileContext*>(this);
    }
    // static field const value: static private System.String RecordFilterRegex
    static constexpr const char* RecordFilterRegex = "*-record.json";
    // Get static field: static private System.String RecordFilterRegex
    static ::StringW _get_RecordFilterRegex();
    // Set static field: static private System.String RecordFilterRegex
    static void _set_RecordFilterRegex(::StringW value);
    // Get instance field reference: private System.String[] _possibleDatabaseExtension
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__possibleDatabaseExtension();
    // Get instance field reference: private readonly System.Int64 _maxDatabaseSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__maxDatabaseSize();
    // Get instance field reference: private readonly System.UInt32 _maxRecordNumber
    [[deprecated("Use field access instead!")]] uint& dyn__maxRecordNumber();
    // Get instance field reference: private readonly System.IO.DirectoryInfo _databaseDirectoryInfo
    [[deprecated("Use field access instead!")]] ::System::IO::DirectoryInfo*& dyn__databaseDirectoryInfo();
    // Get instance field reference: readonly Backtrace.Unity.Model.Database.BacktraceDatabaseAttachmentManager _attachmentManager
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*& dyn__attachmentManager();
    // Get instance field reference: private readonly System.String _path
    [[deprecated("Use field access instead!")]] ::StringW& dyn__path();
    // public System.Int32 get_ScreenshotQuality()
    // Offset: 0x2A5BBA8
    int get_ScreenshotQuality();
    // public System.Void set_ScreenshotQuality(System.Int32 value)
    // Offset: 0x2A5BBC4
    void set_ScreenshotQuality(int value);
    // public System.Int32 get_ScreenshotMaxHeight()
    // Offset: 0x2A5BC58
    int get_ScreenshotMaxHeight();
    // public System.Void set_ScreenshotMaxHeight(System.Int32 value)
    // Offset: 0x2A5BC74
    void set_ScreenshotMaxHeight(int value);
    // public System.Void .ctor(Backtrace.Unity.Model.Database.BacktraceDatabaseSettings settings)
    // Offset: 0x2A550B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseFileContext* New_ctor(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Services::BacktraceDatabaseFileContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseFileContext*, creationType>(settings)));
    }
    // public System.Collections.Generic.IEnumerable`1<System.IO.FileInfo> GetAll()
    // Offset: 0x2A5BCE0
    ::System::Collections::Generic::IEnumerable_1<::System::IO::FileInfo*>* GetAll();
    // public System.Collections.Generic.IEnumerable`1<System.IO.FileInfo> GetRecords()
    // Offset: 0x2A5BCFC
    ::System::Collections::Generic::IEnumerable_1<::System::IO::FileInfo*>* GetRecords();
    // public System.Void RemoveOrphaned(System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.Database.BacktraceDatabaseRecord> existingRecords)
    // Offset: 0x2A5BE30
    void RemoveOrphaned(::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>* existingRecords);
    // public System.Boolean ValidFileConsistency()
    // Offset: 0x2A5C2FC
    bool ValidFileConsistency();
    // public System.Void Clear()
    // Offset: 0x2A5C444
    void Clear();
    // public System.Void Delete(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5C4B8
    void Delete(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // private System.Boolean IsDatabaseDependency(System.String path)
    // Offset: 0x2A5C960
    bool IsDatabaseDependency(::StringW path);
    // private System.Void Delete(System.String path)
    // Offset: 0x2A5C828
    void Delete(::StringW path);
    // public System.Collections.Generic.IEnumerable`1<System.String> GenerateRecordAttachments(Backtrace.Unity.Model.BacktraceData data)
    // Offset: 0x2A5CA00
    ::System::Collections::Generic::IEnumerable_1<::StringW>* GenerateRecordAttachments(::Backtrace::Unity::Model::BacktraceData* data);
    // public System.Boolean Save(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5CA1C
    bool Save(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
    // private System.Int32 Save(System.String json, System.String destPath)
    // Offset: 0x2A5D0F8
    int Save(::StringW json, ::StringW destPath);
    // public System.Boolean IsValidRecord(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord record)
    // Offset: 0x2A5D320
    bool IsValidRecord(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* record);
  }; // Backtrace.Unity.Services.BacktraceDatabaseFileContext
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseFileContext), 56 + sizeof(::StringW)> __Backtrace_Unity_Services_BacktraceDatabaseFileContextSizeCheck;
  static_assert(sizeof(BacktraceDatabaseFileContext) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::get_ScreenshotQuality
// Il2CppName: get_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::get_ScreenshotQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "get_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::set_ScreenshotQuality
// Il2CppName: set_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(int)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::set_ScreenshotQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "set_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::get_ScreenshotMaxHeight
// Il2CppName: get_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::get_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "get_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::set_ScreenshotMaxHeight
// Il2CppName: set_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(int)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::set_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "set_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::GetAll
// Il2CppName: GetAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::IO::FileInfo*>* (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::GetAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "GetAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::GetRecords
// Il2CppName: GetRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::IO::FileInfo*>* (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::GetRecords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "GetRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::RemoveOrphaned
// Il2CppName: RemoveOrphaned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*>*)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::RemoveOrphaned)> {
  static const MethodInfo* get() {
    static auto* existingRecords = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "RemoveOrphaned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{existingRecords});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::ValidFileConsistency
// Il2CppName: ValidFileConsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::ValidFileConsistency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "ValidFileConsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)()>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::Delete)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::IsDatabaseDependency
// Il2CppName: IsDatabaseDependency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::IsDatabaseDependency)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "IsDatabaseDependency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::StringW)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::Delete)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::GenerateRecordAttachments
// Il2CppName: GenerateRecordAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::Backtrace::Unity::Model::BacktraceData*)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::GenerateRecordAttachments)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "GenerateRecordAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::Save)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::StringW, ::StringW)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::Save)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json, destPath});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Services::BacktraceDatabaseFileContext::IsValidRecord
// Il2CppName: IsValidRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Services::BacktraceDatabaseFileContext::*)(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*)>(&Backtrace::Unity::Services::BacktraceDatabaseFileContext::IsValidRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Services::BacktraceDatabaseFileContext*), "IsValidRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
