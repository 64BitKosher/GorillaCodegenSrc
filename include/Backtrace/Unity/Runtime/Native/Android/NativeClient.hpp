// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Runtime.Native.Base.NativeClientBase
#include "Backtrace/Unity/Runtime/Native/Base/NativeClientBase.hpp"
// Including type: Backtrace.Unity.Runtime.Native.INativeClient
#include "Backtrace/Unity/Runtime/Native/INativeClient.hpp"
// Including type: Backtrace.Unity.Runtime.Native.Android.UnwindingMode
#include "Backtrace/Unity/Runtime/Native/Android/UnwindingMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Runtime::Native::Android
namespace Backtrace::Unity::Runtime::Native::Android {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AndroidJavaObject
  class AndroidJavaObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs
namespace Backtrace::Unity::Model::Breadcrumbs {
  // Forward declaring type: BacktraceBreadcrumbs
  class BacktraceBreadcrumbs;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Runtime.Native.Android
namespace Backtrace::Unity::Runtime::Native::Android {
  // Forward declaring type: NativeClient
  class NativeClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Runtime::Native::Android::NativeClient);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Runtime::Native::Android::NativeClient*, "Backtrace.Unity.Runtime.Native.Android", "NativeClient");
// Type namespace: Backtrace.Unity.Runtime.Native.Android
namespace Backtrace::Unity::Runtime::Native::Android {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Runtime.Native.Android.NativeClient
  // [TokenAttribute] Offset: FFFFFFFF
  class NativeClient : public ::Backtrace::Unity::Runtime::Native::Base::NativeClientBase/*, public ::Backtrace::Unity::Runtime::Native::INativeClient*/ {
    public:
    // Nested type: ::Backtrace::Unity::Runtime::Native::Android::NativeClient::$$c__DisplayClass27_0
    class $$c__DisplayClass27_0;
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _builtInAttributes
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* builtInAttributes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _attributeMapping
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributeMapping;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private Backtrace.Unity.Runtime.Native.Android.UnwindingMode UnwindingMode
    // Size: 0x4
    // Offset: 0x60
    ::Backtrace::Unity::Runtime::Native::Android::UnwindingMode UnwindingMode;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Runtime::Native::Android::UnwindingMode) == 0x4);
    // Padding between fields: UnwindingMode and: anrPath
    char __padding2[0x4] = {};
    // private readonly System.String _anrPath
    // Size: 0x8
    // Offset: 0x68
    ::StringW anrPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _unhandledExceptionPath
    // Size: 0x8
    // Offset: 0x70
    ::StringW unhandledExceptionPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _enabled
    // Size: 0x1
    // Offset: 0x78
    bool enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enabled and: anrWatcher
    char __padding5[0x7] = {};
    // private UnityEngine.AndroidJavaObject _anrWatcher
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AndroidJavaObject* anrWatcher;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaObject*) == 0x8);
    // private UnityEngine.AndroidJavaObject _unhandledExceptionWatcher
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AndroidJavaObject* unhandledExceptionWatcher;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaObject*) == 0x8);
    // private readonly System.Boolean _enableClientSideUnwinding
    // Size: 0x1
    // Offset: 0x90
    bool enableClientSideUnwinding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableClientSideUnwinding and: GameObjectName
    char __padding8[0x7] = {};
    // private System.String <GameObjectName>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::StringW GameObjectName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Runtime::Native::INativeClient
    operator ::Backtrace::Unity::Runtime::Native::INativeClient() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Runtime::Native::INativeClient*>(this);
    }
    // static field const value: static private System.String CallbackMethodName
    static constexpr const char* CallbackMethodName = "OnAnrDetected";
    // Get static field: static private System.String CallbackMethodName
    static ::StringW _get_CallbackMethodName();
    // Set static field: static private System.String CallbackMethodName
    static void _set_CallbackMethodName(::StringW value);
    // static field const value: static private System.String _namespace
    static constexpr const char* _namespace = "backtrace.io.backtrace_unity_android_plugin";
    // Get static field: static private System.String _namespace
    static ::StringW _get__namespace();
    // Set static field: static private System.String _namespace
    static void _set__namespace(::StringW value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _builtInAttributes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn__builtInAttributes();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _attributeMapping
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn__attributeMapping();
    // Get instance field reference: private Backtrace.Unity.Runtime.Native.Android.UnwindingMode UnwindingMode
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Runtime::Native::Android::UnwindingMode& dyn_UnwindingMode();
    // Get instance field reference: private readonly System.String _anrPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__anrPath();
    // Get instance field reference: private readonly System.String _unhandledExceptionPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__unhandledExceptionPath();
    // Get instance field reference: private System.Boolean _enabled
    [[deprecated("Use field access instead!")]] bool& dyn__enabled();
    // Get instance field reference: private UnityEngine.AndroidJavaObject _anrWatcher
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaObject*& dyn__anrWatcher();
    // Get instance field reference: private UnityEngine.AndroidJavaObject _unhandledExceptionWatcher
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaObject*& dyn__unhandledExceptionWatcher();
    // Get instance field reference: private readonly System.Boolean _enableClientSideUnwinding
    [[deprecated("Use field access instead!")]] bool& dyn__enableClientSideUnwinding();
    // Get instance field reference: private System.String <GameObjectName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$GameObjectName$k__BackingField();
    // static private System.Boolean Initialize(System.IntPtr submissionUrl, System.IntPtr databasePath, System.IntPtr handlerPath, System.IntPtr keys, System.IntPtr values, System.IntPtr attachments, System.Boolean enableClientSideUnwinding, System.Int32 unwindingMode)
    // Offset: 0x2A5E7BC
    static bool Initialize(::System::IntPtr submissionUrl, ::System::IntPtr databasePath, ::System::IntPtr handlerPath, ::System::IntPtr keys, ::System::IntPtr values, ::System::IntPtr attachments, bool enableClientSideUnwinding, int unwindingMode);
    // static private System.Boolean AddAttribute(System.IntPtr key, System.IntPtr value)
    // Offset: 0x2A5E890
    static bool AddAttribute(::System::IntPtr key, ::System::IntPtr value);
    // static private System.Boolean NativeReport(System.IntPtr message, System.Boolean setMainThreadAsFaultingThread)
    // Offset: 0x2A5E918
    static bool NativeReport(::System::IntPtr message, bool setMainThreadAsFaultingThread);
    // static private System.Boolean DisableNativeIntegration()
    // Offset: 0x2A5E9A0
    static bool DisableNativeIntegration();
    // private System.Void SetDefaultAttributeMaps()
    // Offset: 0x2A5EA10
    void SetDefaultAttributeMaps();
    // public System.String get_GameObjectName()
    // Offset: 0x2A5F290
    ::StringW get_GameObjectName();
    // System.Void set_GameObjectName(System.String value)
    // Offset: 0x2A5F298
    void set_GameObjectName(::StringW value);
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceConfiguration configuration, Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs breadcrumbs, System.Collections.Generic.IDictionary`2<System.String,System.String> clientAttributes, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.String gameObjectName)
    // Offset: 0x2A5E0D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NativeClient* New_ctor(::Backtrace::Unity::Model::BacktraceConfiguration* configuration, ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs* breadcrumbs, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* clientAttributes, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, ::StringW gameObjectName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Runtime::Native::Android::NativeClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NativeClient*, creationType>(configuration, breadcrumbs, clientAttributes, attachments, gameObjectName)));
    }
    // private System.Void HandleUnhandledExceptions()
    // Offset: 0x2A60058
    void HandleUnhandledExceptions();
    // private System.String GetNativeDirectoryPath()
    // Offset: 0x2A60284
    ::StringW GetNativeDirectoryPath();
    // private System.String GuessNativeDirectoryPath()
    // Offset: 0x2A60974
    ::StringW GuessNativeDirectoryPath();
    // private System.Void HandleNativeCrashes(System.Collections.Generic.IDictionary`2<System.String,System.String> backtraceAttributes, System.Collections.Generic.IEnumerable`1<System.String> attachments)
    // Offset: 0x2A5F2A0
    void HandleNativeCrashes(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* backtraceAttributes, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments);
    // public System.Void GetAttributes(System.Collections.Generic.IDictionary`2<System.String,System.String> result)
    // Offset: 0x2A60B34
    void GetAttributes(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* result);
    // public System.Void FinishUnhandledBackgroundException()
    // Offset: 0x2A52D6C
    void FinishUnhandledBackgroundException();
    // public System.Void HandleAnr()
    // Offset: 0x2A5FCB0
    void HandleAnr();
    // public System.Void SetAttribute(System.String key, System.String value)
    // Offset: 0x2A6103C
    void SetAttribute(::StringW key, ::StringW value);
    // public System.Boolean OnOOM()
    // Offset: 0x2A610E8
    bool OnOOM();
    // public override System.Void Disable()
    // Offset: 0x2A611D0
    // Implemented from: Backtrace.Unity.Runtime.Native.Base.NativeClientBase
    // Base method: System.Void NativeClientBase::Disable()
    void Disable();
  }; // Backtrace.Unity.Runtime.Native.Android.NativeClient
  #pragma pack(pop)
  static check_size<sizeof(NativeClient), 152 + sizeof(::StringW)> __Backtrace_Unity_Runtime_Native_Android_NativeClientSizeCheck;
  static_assert(sizeof(NativeClient) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr, bool, int)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::Initialize)> {
  static const MethodInfo* get() {
    static auto* submissionUrl = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* databasePath = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handlerPath = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* attachments = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* enableClientSideUnwinding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* unwindingMode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submissionUrl, databasePath, handlerPath, keys, values, attachments, enableClientSideUnwinding, unwindingMode});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::System::IntPtr)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::NativeReport
// Il2CppName: NativeReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, bool)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::NativeReport)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* setMainThreadAsFaultingThread = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "NativeReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, setMainThreadAsFaultingThread});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::DisableNativeIntegration
// Il2CppName: DisableNativeIntegration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::DisableNativeIntegration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "DisableNativeIntegration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::SetDefaultAttributeMaps
// Il2CppName: SetDefaultAttributeMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::SetDefaultAttributeMaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "SetDefaultAttributeMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::get_GameObjectName
// Il2CppName: get_GameObjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::get_GameObjectName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "get_GameObjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::set_GameObjectName
// Il2CppName: set_GameObjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)(::StringW)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::set_GameObjectName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "set_GameObjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleUnhandledExceptions
// Il2CppName: HandleUnhandledExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleUnhandledExceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "HandleUnhandledExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::GetNativeDirectoryPath
// Il2CppName: GetNativeDirectoryPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::GetNativeDirectoryPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "GetNativeDirectoryPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::GuessNativeDirectoryPath
// Il2CppName: GuessNativeDirectoryPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::GuessNativeDirectoryPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "GuessNativeDirectoryPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleNativeCrashes
// Il2CppName: HandleNativeCrashes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*, ::System::Collections::Generic::IEnumerable_1<::StringW>*)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleNativeCrashes)> {
  static const MethodInfo* get() {
    static auto* backtraceAttributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "HandleNativeCrashes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceAttributes, attachments});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::FinishUnhandledBackgroundException
// Il2CppName: FinishUnhandledBackgroundException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::FinishUnhandledBackgroundException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "FinishUnhandledBackgroundException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleAnr
// Il2CppName: HandleAnr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::HandleAnr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "HandleAnr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::SetAttribute
// Il2CppName: SetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)(::StringW, ::StringW)>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::SetAttribute)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "SetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::OnOOM
// Il2CppName: OnOOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::OnOOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "OnOOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Android::NativeClient::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Android::NativeClient::*)()>(&Backtrace::Unity::Runtime::Native::Android::NativeClient::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Android::NativeClient*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
