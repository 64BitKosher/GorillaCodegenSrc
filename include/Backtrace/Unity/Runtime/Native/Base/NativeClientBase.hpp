// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs
namespace Backtrace::Unity::Model::Breadcrumbs {
  // Forward declaring type: BacktraceBreadcrumbs
  class BacktraceBreadcrumbs;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Runtime.Native.Base
namespace Backtrace::Unity::Runtime::Native::Base {
  // Forward declaring type: NativeClientBase
  class NativeClientBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Runtime::Native::Base::NativeClientBase);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Runtime::Native::Base::NativeClientBase*, "Backtrace.Unity.Runtime.Native.Base", "NativeClientBase");
// Type namespace: Backtrace.Unity.Runtime.Native.Base
namespace Backtrace::Unity::Runtime::Native::Base {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Runtime.Native.Base.NativeClientBase
  // [TokenAttribute] Offset: FFFFFFFF
  class NativeClientBase : public ::Il2CppObject {
    public:
    public:
    // protected System.Int32 AnrWatchdogTimeout
    // Size: 0x4
    // Offset: 0x10
    int AnrWatchdogTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean LogAnr
    // Size: 0x1
    // Offset: 0x14
    bool LogAnr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LogAnr and: LastUpdateTime
    char __padding1[0x3] = {};
    // protected internal System.Single LastUpdateTime
    // Size: 0x4
    // Offset: 0x18
    float LastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean PreventAnr
    // Size: 0x1
    // Offset: 0x1C
    bool PreventAnr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean StopAnr
    // Size: 0x1
    // Offset: 0x1D
    bool StopAnr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: StopAnr and: AnrThread
    char __padding4[0x2] = {};
    // System.Threading.Thread AnrThread
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::Thread* AnrThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // protected System.Boolean CaptureNativeCrashes
    // Size: 0x1
    // Offset: 0x28
    bool CaptureNativeCrashes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean HandlerANR
    // Size: 0x1
    // Offset: 0x29
    bool HandlerANR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HandlerANR and: configuration
    char __padding7[0x6] = {};
    // protected readonly Backtrace.Unity.Model.BacktraceConfiguration _configuration
    // Size: 0x8
    // Offset: 0x30
    ::Backtrace::Unity::Model::BacktraceConfiguration* configuration;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceConfiguration*) == 0x8);
    // protected readonly Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    // Size: 0x8
    // Offset: 0x38
    ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs* breadcrumbs;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*) == 0x8);
    // private readonly System.Boolean _shouldLogAnrsInBreadcrumbs
    // Size: 0x1
    // Offset: 0x40
    bool shouldLogAnrsInBreadcrumbs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shouldLogAnrsInBreadcrumbs and: lockObject
    char __padding10[0x7] = {};
    // private System.Object _lockObject
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* lockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // static field const value: static System.String AnrMessage
    static constexpr const char* AnrMessage = "ANRException: Blocked thread detected.";
    // Get static field: static System.String AnrMessage
    static ::StringW _get_AnrMessage();
    // Set static field: static System.String AnrMessage
    static void _set_AnrMessage(::StringW value);
    // static field const value: static protected System.String HangType
    static constexpr const char* HangType = "Hang";
    // Get static field: static protected System.String HangType
    static ::StringW _get_HangType();
    // Set static field: static protected System.String HangType
    static void _set_HangType(::StringW value);
    // static field const value: static protected System.String CrashType
    static constexpr const char* CrashType = "Crash";
    // Get static field: static protected System.String CrashType
    static ::StringW _get_CrashType();
    // Set static field: static protected System.String CrashType
    static void _set_CrashType(::StringW value);
    // static field const value: static protected System.String ErrorTypeAttribute
    static constexpr const char* ErrorTypeAttribute = "error.type";
    // Get static field: static protected System.String ErrorTypeAttribute
    static ::StringW _get_ErrorTypeAttribute();
    // Set static field: static protected System.String ErrorTypeAttribute
    static void _set_ErrorTypeAttribute(::StringW value);
    // Get instance field reference: protected System.Int32 AnrWatchdogTimeout
    [[deprecated("Use field access instead!")]] int& dyn_AnrWatchdogTimeout();
    // Get instance field reference: protected System.Boolean LogAnr
    [[deprecated("Use field access instead!")]] bool& dyn_LogAnr();
    // Get instance field reference: protected internal System.Single LastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_LastUpdateTime();
    // Get instance field reference: System.Boolean PreventAnr
    [[deprecated("Use field access instead!")]] bool& dyn_PreventAnr();
    // Get instance field reference: System.Boolean StopAnr
    [[deprecated("Use field access instead!")]] bool& dyn_StopAnr();
    // Get instance field reference: System.Threading.Thread AnrThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_AnrThread();
    // Get instance field reference: protected System.Boolean CaptureNativeCrashes
    [[deprecated("Use field access instead!")]] bool& dyn_CaptureNativeCrashes();
    // Get instance field reference: protected System.Boolean HandlerANR
    [[deprecated("Use field access instead!")]] bool& dyn_HandlerANR();
    // Get instance field reference: protected readonly Backtrace.Unity.Model.BacktraceConfiguration _configuration
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceConfiguration*& dyn__configuration();
    // Get instance field reference: protected readonly Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs _breadcrumbs
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs*& dyn__breadcrumbs();
    // Get instance field reference: private readonly System.Boolean _shouldLogAnrsInBreadcrumbs
    [[deprecated("Use field access instead!")]] bool& dyn__shouldLogAnrsInBreadcrumbs();
    // Get instance field reference: private System.Object _lockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lockObject();
    // System.Void .ctor(Backtrace.Unity.Model.BacktraceConfiguration configuration, Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbs breadcrumbs)
    // Offset: 0x2A5E504
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NativeClientBase* New_ctor(::Backtrace::Unity::Model::BacktraceConfiguration* configuration, ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbs* breadcrumbs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Runtime::Native::Base::NativeClientBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NativeClientBase*, creationType>(configuration, breadcrumbs)));
    }
    // public System.Void Update(System.Single time)
    // Offset: 0x2A5E614
    void Update(float time);
    // System.Void OnAnrDetection()
    // Offset: 0x2A5E750
    void OnAnrDetection();
    // public System.Void PauseAnrThread(System.Boolean stopAnr)
    // Offset: 0x2A5E774
    void PauseAnrThread(bool stopAnr);
    // public System.Void Disable()
    // Offset: 0x2A5E798
    void Disable();
    // private System.Boolean ShouldStoreAnrBreadcrumbs()
    // Offset: 0x2A5E5F0
    bool ShouldStoreAnrBreadcrumbs();
  }; // Backtrace.Unity.Runtime.Native.Base.NativeClientBase
  #pragma pack(pop)
  static check_size<sizeof(NativeClientBase), 72 + sizeof(::Il2CppObject*)> __Backtrace_Unity_Runtime_Native_Base_NativeClientBaseSizeCheck;
  static_assert(sizeof(NativeClientBase) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Base::NativeClientBase::*)(float)>(&Backtrace::Unity::Runtime::Native::Base::NativeClientBase::Update)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Base::NativeClientBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::OnAnrDetection
// Il2CppName: OnAnrDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Base::NativeClientBase::*)()>(&Backtrace::Unity::Runtime::Native::Base::NativeClientBase::OnAnrDetection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Base::NativeClientBase*), "OnAnrDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::PauseAnrThread
// Il2CppName: PauseAnrThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Base::NativeClientBase::*)(bool)>(&Backtrace::Unity::Runtime::Native::Base::NativeClientBase::PauseAnrThread)> {
  static const MethodInfo* get() {
    static auto* stopAnr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Base::NativeClientBase*), "PauseAnrThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stopAnr});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Runtime::Native::Base::NativeClientBase::*)()>(&Backtrace::Unity::Runtime::Native::Base::NativeClientBase::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Base::NativeClientBase*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Runtime::Native::Base::NativeClientBase::ShouldStoreAnrBreadcrumbs
// Il2CppName: ShouldStoreAnrBreadcrumbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Runtime::Native::Base::NativeClientBase::*)()>(&Backtrace::Unity::Runtime::Native::Base::NativeClientBase::ShouldStoreAnrBreadcrumbs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Runtime::Native::Base::NativeClientBase*), "ShouldStoreAnrBreadcrumbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
