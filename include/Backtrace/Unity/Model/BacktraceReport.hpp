// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceStackFrame
  class BacktraceStackFrame;
  // Forward declaring type: BacktraceSourceCode
  class BacktraceSourceCode;
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceReport);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceReport*, "Backtrace.Unity.Model", "BacktraceReport");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceReport
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceReport : public ::Il2CppObject {
    public:
    public:
    // private System.String <Fingerprint>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Fingerprint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Factor>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Factor;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Guid Uuid
    // Size: 0x10
    // Offset: 0x20
    ::System::Guid Uuid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // public readonly System.Int64 Timestamp
    // Size: 0x8
    // Offset: 0x30
    int64_t Timestamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public readonly System.Boolean ExceptionTypeReport
    // Size: 0x1
    // Offset: 0x38
    bool ExceptionTypeReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ExceptionTypeReport and: Classifier
    char __padding4[0x7] = {};
    // public System.String Classifier
    // Size: 0x8
    // Offset: 0x40
    ::StringW Classifier;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> <Attributes>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Attributes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private System.String <Message>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Exception <Exception>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::System::Exception* Exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> <AttachmentPaths>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::StringW>* AttachmentPaths;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> <DiagnosticStack>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* DiagnosticStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*) == 0x8);
    // public Backtrace.Unity.Model.BacktraceSourceCode SourceCode
    // Size: 0x8
    // Offset: 0x70
    ::Backtrace::Unity::Model::BacktraceSourceCode* SourceCode;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceSourceCode*) == 0x8);
    public:
    // static field const value: static private System.String ErrorTypeAttributeName
    static constexpr const char* ErrorTypeAttributeName = "error.type";
    // Get static field: static private System.String ErrorTypeAttributeName
    static ::StringW _get_ErrorTypeAttributeName();
    // Set static field: static private System.String ErrorTypeAttributeName
    static void _set_ErrorTypeAttributeName(::StringW value);
    // Get instance field reference: private System.String <Fingerprint>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Fingerprint$k__BackingField();
    // Get instance field reference: private System.String <Factor>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Factor$k__BackingField();
    // Get instance field reference: public readonly System.Guid Uuid
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_Uuid();
    // Get instance field reference: public readonly System.Int64 Timestamp
    [[deprecated("Use field access instead!")]] int64_t& dyn_Timestamp();
    // Get instance field reference: public readonly System.Boolean ExceptionTypeReport
    [[deprecated("Use field access instead!")]] bool& dyn_ExceptionTypeReport();
    // Get instance field reference: public System.String Classifier
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Classifier();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> <Attributes>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_$Attributes$k__BackingField();
    // Get instance field reference: private System.String <Message>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Message$k__BackingField();
    // Get instance field reference: private System.Exception <Exception>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_$Exception$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <AttachmentPaths>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$AttachmentPaths$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> <DiagnosticStack>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*& dyn_$DiagnosticStack$k__BackingField();
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceSourceCode SourceCode
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceSourceCode*& dyn_SourceCode();
    // public System.String get_Fingerprint()
    // Offset: 0x2A637FC
    ::StringW get_Fingerprint();
    // public System.Void set_Fingerprint(System.String value)
    // Offset: 0x2A63804
    void set_Fingerprint(::StringW value);
    // public System.String get_Factor()
    // Offset: 0x2A6380C
    ::StringW get_Factor();
    // public System.Void set_Factor(System.String value)
    // Offset: 0x2A63814
    void set_Factor(::StringW value);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> get_Attributes()
    // Offset: 0x2A6381C
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* get_Attributes();
    // private System.Void set_Attributes(System.Collections.Generic.Dictionary`2<System.String,System.String> value)
    // Offset: 0x2A63824
    void set_Attributes(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // public System.String get_Message()
    // Offset: 0x2A6382C
    ::StringW get_Message();
    // private System.Void set_Message(System.String value)
    // Offset: 0x2A63834
    void set_Message(::StringW value);
    // public System.Exception get_Exception()
    // Offset: 0x2A6383C
    ::System::Exception* get_Exception();
    // private System.Void set_Exception(System.Exception value)
    // Offset: 0x2A63844
    void set_Exception(::System::Exception* value);
    // public System.Collections.Generic.List`1<System.String> get_AttachmentPaths()
    // Offset: 0x2A6384C
    ::System::Collections::Generic::List_1<::StringW>* get_AttachmentPaths();
    // public System.Void set_AttachmentPaths(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x2A63854
    void set_AttachmentPaths(::System::Collections::Generic::List_1<::StringW>* value);
    // public System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> get_DiagnosticStack()
    // Offset: 0x2A6385C
    ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* get_DiagnosticStack();
    // public System.Void set_DiagnosticStack(System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> value)
    // Offset: 0x2A63864
    void set_DiagnosticStack(::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* value);
    // public System.Void .ctor(System.String message, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.Collections.Generic.List`1<System.String> attachmentPaths)
    // Offset: 0x2A51518
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceReport* New_ctor(::StringW message, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceReport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceReport*, creationType>(message, attributes, attachmentPaths)));
    }
    // public System.Void .ctor(System.Exception exception, System.Collections.Generic.Dictionary`2<System.String,System.String> attributes, System.Collections.Generic.List`1<System.String> attachmentPaths)
    // Offset: 0x2A51948
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceReport* New_ctor(::System::Exception* exception, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* attributes, ::System::Collections::Generic::List_1<::StringW>* attachmentPaths) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceReport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceReport*, creationType>(exception, attributes, attachmentPaths)));
    }
    // private System.Void SetDefaultAttributes()
    // Offset: 0x2A638D8
    void SetDefaultAttributes();
    // System.Void AssignSourceCodeToReport(System.String text)
    // Offset: 0x2A520F8
    void AssignSourceCodeToReport(::StringW text);
    // private System.Void SetClassifierInfo()
    // Offset: 0x2A639BC
    void SetClassifierInfo();
    // System.Void SetReportFingerprint(System.Boolean generateFingerprint)
    // Offset: 0x2A522D8
    void SetReportFingerprint(bool generateFingerprint);
    // Backtrace.Unity.Model.BacktraceData ToBacktraceData(System.Collections.Generic.Dictionary`2<System.String,System.String> clientAttributes, System.Int32 gameObjectDepth)
    // Offset: 0x2A52450
    ::Backtrace::Unity::Model::BacktraceData* ToBacktraceData(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* clientAttributes, int gameObjectDepth);
    // System.Void SetStacktraceInformation()
    // Offset: 0x2A6386C
    void SetStacktraceInformation();
    // Backtrace.Unity.Model.BacktraceReport CreateInnerReport()
    // Offset: 0x2A53700
    ::Backtrace::Unity::Model::BacktraceReport* CreateInnerReport();
  }; // Backtrace.Unity.Model.BacktraceReport
  #pragma pack(pop)
  static check_size<sizeof(BacktraceReport), 112 + sizeof(::Backtrace::Unity::Model::BacktraceSourceCode*)> __Backtrace_Unity_Model_BacktraceReportSizeCheck;
  static_assert(sizeof(BacktraceReport) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_Fingerprint
// Il2CppName: get_Fingerprint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_Fingerprint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_Fingerprint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_Fingerprint
// Il2CppName: set_Fingerprint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceReport::set_Fingerprint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_Fingerprint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_Factor
// Il2CppName: get_Factor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_Factor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_Factor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_Factor
// Il2CppName: set_Factor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceReport::set_Factor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_Factor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_Attributes
// Il2CppName: set_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::BacktraceReport::set_Attributes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceReport::set_Message)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_Exception
// Il2CppName: set_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::System::Exception*)>(&Backtrace::Unity::Model::BacktraceReport::set_Exception)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_AttachmentPaths
// Il2CppName: get_AttachmentPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_AttachmentPaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_AttachmentPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_AttachmentPaths
// Il2CppName: set_AttachmentPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::System::Collections::Generic::List_1<::StringW>*)>(&Backtrace::Unity::Model::BacktraceReport::set_AttachmentPaths)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_AttachmentPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::get_DiagnosticStack
// Il2CppName: get_DiagnosticStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::get_DiagnosticStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "get_DiagnosticStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::set_DiagnosticStack
// Il2CppName: set_DiagnosticStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*)>(&Backtrace::Unity::Model::BacktraceReport::set_DiagnosticStack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceStackFrame")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "set_DiagnosticStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::SetDefaultAttributes
// Il2CppName: SetDefaultAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::SetDefaultAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "SetDefaultAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::AssignSourceCodeToReport
// Il2CppName: AssignSourceCodeToReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceReport::AssignSourceCodeToReport)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "AssignSourceCodeToReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::SetClassifierInfo
// Il2CppName: SetClassifierInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::SetClassifierInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "SetClassifierInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::SetReportFingerprint
// Il2CppName: SetReportFingerprint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)(bool)>(&Backtrace::Unity::Model::BacktraceReport::SetReportFingerprint)> {
  static const MethodInfo* get() {
    static auto* generateFingerprint = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "SetReportFingerprint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generateFingerprint});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::ToBacktraceData
// Il2CppName: ToBacktraceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceData* (Backtrace::Unity::Model::BacktraceReport::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, int)>(&Backtrace::Unity::Model::BacktraceReport::ToBacktraceData)> {
  static const MethodInfo* get() {
    static auto* clientAttributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* gameObjectDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "ToBacktraceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientAttributes, gameObjectDepth});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::SetStacktraceInformation
// Il2CppName: SetStacktraceInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::SetStacktraceInformation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "SetStacktraceInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceReport::CreateInnerReport
// Il2CppName: CreateInnerReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceReport* (Backtrace::Unity::Model::BacktraceReport::*)()>(&Backtrace::Unity::Model::BacktraceReport::CreateInnerReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceReport*), "CreateInnerReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
