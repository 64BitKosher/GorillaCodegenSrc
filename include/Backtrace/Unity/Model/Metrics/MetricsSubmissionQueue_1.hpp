// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model::Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Skipping declaration: <>c__DisplayClass23_0 because it is already included!
  // Forward declaring type: EventAggregationBase
  class EventAggregationBase;
  // Forward declaring type: MetricsSubmissionJob`1<T>
  template<typename T>
  class MetricsSubmissionJob_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: IBacktraceHttpClient
  class IBacktraceHttpClient;
}
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: MetricsSubmissionQueue`1<T>
  template<typename T>
  class MetricsSubmissionQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1, "Backtrace.Unity.Model.Metrics", "MetricsSubmissionQueue`1");
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // WARNING Size may be invalid!
  // Autogenerated type: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class MetricsSubmissionQueue_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0<T>
    class $$c__DisplayClass23_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1/<>c__DisplayClass23_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass23_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = MetricsSubmissionQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass23_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*) == 0x8);
      // public System.UInt32 attempts
      // Size: 0x4
      // Offset: 0x0
      uint attempts;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.Collections.Generic.ICollection`1<T> events
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::ICollection_1<T>* events;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::ICollection_1<T>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.UInt32 attempts
      [[deprecated("Use field access instead!")]] uint& dyn_attempts() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0::dyn_attempts");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attempts"))->offset;
        return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.ICollection`1<T> events
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ICollection_1<T>*& dyn_events() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0::dyn_events");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "events"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::ICollection_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename MetricsSubmissionQueue_1<T>::$$c__DisplayClass23_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename MetricsSubmissionQueue_1<T>::$$c__DisplayClass23_0*, creationType>()));
      }
      // System.Void <SendPayload>b__0(System.Int64 statusCode, System.Boolean httpError, System.String response)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $SendPayload$b__0(int64_t statusCode, bool httpError, ::StringW response) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::$$c__DisplayClass23_0::<SendPayload>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SendPayload>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(statusCode), ::il2cpp_utils::ExtractType(httpError), ::il2cpp_utils::ExtractType(response)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, statusCode, httpError, response);
      }
    }; // Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1/<>c__DisplayClass23_0
    // Could not write size check! Type: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1/<>c__DisplayClass23_0 is generic, or has no fields that are valid for size checks!
    public:
    // private System.UInt32 <MaximumEvents>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    uint MaximumEvents;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private readonly System.String _name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Collections.Generic.List`1<Backtrace.Unity.Model.Metrics.MetricsSubmissionJob`1<T>> _submissionJobs
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Metrics::MetricsSubmissionJob_1<T>*>* submissionJobs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Metrics::MetricsSubmissionJob_1<T>*>*) == 0x8);
    // System.Collections.Generic.LinkedList`1<T> Events
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::LinkedList_1<T>* Events;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<T>*) == 0x8);
    // private System.Int32 _numberOfDroppedRequests
    // Size: 0x4
    // Offset: 0x0
    int numberOfDroppedRequests;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Backtrace.Unity.Model.IBacktraceHttpClient RequestHandler
    // Size: 0x8
    // Offset: 0x0
    ::Backtrace::Unity::Model::IBacktraceHttpClient* RequestHandler;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::IBacktraceHttpClient*) == 0x8);
    // private System.String <SubmissionUrl>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW SubmissionUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _applicationName
    // Size: 0x8
    // Offset: 0x0
    ::StringW applicationName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _applicationVersion
    // Size: 0x8
    // Offset: 0x0
    ::StringW applicationVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Autogenerated static field getter
    // Get static field: static public System.Int32 DefaultTimeInSecBetweenRequests
    static int _get_DefaultTimeInSecBetweenRequests() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::_get_DefaultTimeInSecBetweenRequests");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MetricsSubmissionQueue_1<T>*>::get(), "DefaultTimeInSecBetweenRequests"));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 DefaultTimeInSecBetweenRequests
    static void _set_DefaultTimeInSecBetweenRequests(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::_set_DefaultTimeInSecBetweenRequests");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MetricsSubmissionQueue_1<T>*>::get(), "DefaultTimeInSecBetweenRequests", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.UInt32 <MaximumEvents>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$MaximumEvents$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn_$MaximumEvents$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MaximumEvents>k__BackingField"))->offset;
      return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn__name");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<Backtrace.Unity.Model.Metrics.MetricsSubmissionJob`1<T>> _submissionJobs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Metrics::MetricsSubmissionJob_1<T>*>*& dyn__submissionJobs() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn__submissionJobs");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_submissionJobs"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::Backtrace::Unity::Model::Metrics::MetricsSubmissionJob_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Collections.Generic.LinkedList`1<T> Events
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<T>*& dyn_Events() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn_Events");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Events"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::LinkedList_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _numberOfDroppedRequests
    [[deprecated("Use field access instead!")]] int& dyn__numberOfDroppedRequests() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn__numberOfDroppedRequests");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfDroppedRequests"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Backtrace.Unity.Model.IBacktraceHttpClient RequestHandler
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::IBacktraceHttpClient*& dyn_RequestHandler() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn_RequestHandler");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequestHandler"))->offset;
      return *reinterpret_cast<::Backtrace::Unity::Model::IBacktraceHttpClient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String <SubmissionUrl>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$SubmissionUrl$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn_$SubmissionUrl$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SubmissionUrl>k__BackingField"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String _applicationName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__applicationName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn__applicationName");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_applicationName"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String _applicationVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn__applicationVersion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::dyn__applicationVersion");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_applicationVersion"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.UInt32 get_MaximumEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint get_MaximumEvents() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::get_MaximumEvents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaximumEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
    }
    // public System.Void set_MaximumEvents(System.UInt32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_MaximumEvents(uint value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::set_MaximumEvents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MaximumEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.String get_SubmissionUrl()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_SubmissionUrl() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::get_SubmissionUrl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubmissionUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // System.Void set_SubmissionUrl(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_SubmissionUrl(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::set_SubmissionUrl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SubmissionUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void .ctor(System.String name, System.String submissionUrl)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetricsSubmissionQueue_1<T>* New_ctor(::StringW name, ::StringW submissionUrl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetricsSubmissionQueue_1<T>*, creationType>(name, submissionUrl)));
    }
    // public System.Boolean ReachedLimit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ReachedLimit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::ReachedLimit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReachedLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean ShouldProcessEvent(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ShouldProcessEvent(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::ShouldProcessEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldProcessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
    }
    // public System.Void StartWithEvent(System.String eventName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StartWithEvent(::StringW eventName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::StartWithEvent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventName);
    }
    // System.Void Send()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Send() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::Send");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // System.Void SendPayload(System.Collections.Generic.ICollection`1<T> events, System.UInt32 attempts)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendPayload(::System::Collections::Generic::ICollection_1<T>* events, uint attempts) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::SendPayload");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPayload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(events), ::il2cpp_utils::ExtractType(attempts)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, events, attempts);
    }
    // public System.Void SendPendingEvents(System.Single time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendPendingEvents(float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::SendPendingEvents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendPendingEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
    }
    // System.Void OnMaximumAttemptsReached(System.Collections.Generic.ICollection`1<T> events)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnMaximumAttemptsReached(::System::Collections::Generic::ICollection_1<T>* events) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::OnMaximumAttemptsReached");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, events);
    }
    // System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Json.BacktraceJObject> GetEventsPayload(System.Collections.Generic.ICollection`1<T> events)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Json::BacktraceJObject*>* GetEventsPayload(::System::Collections::Generic::ICollection_1<T>* events) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::GetEventsPayload");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Json::BacktraceJObject*>*, false>(this, ___internal__method, events);
    }
    // Backtrace.Unity.Json.BacktraceJObject CreateJsonPayload(System.Collections.Generic.ICollection`1<T> events)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Json::BacktraceJObject* CreateJsonPayload(::System::Collections::Generic::ICollection_1<T>* events) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::CreateJsonPayload");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Backtrace::Unity::Json::BacktraceJObject*, false>(this, ___internal__method, events);
    }
    // private System.Double CalculateNextRetryTime(System.UInt32 attemps)
    // Offset: 0xFFFFFFFFFFFFFFFF
    double CalculateNextRetryTime(uint attemps) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::CalculateNextRetryTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateNextRetryTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attemps)})));
      return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, attemps);
    }
    // private Backtrace.Unity.Json.BacktraceJObject CreatePayloadMetadata()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Backtrace::Unity::Json::BacktraceJObject* CreatePayloadMetadata() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::CreatePayloadMetadata");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePayloadMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Backtrace::Unity::Json::BacktraceJObject*, false>(this, ___internal__method);
    }
    // private System.Void OnRequestCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnRequestCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1::OnRequestCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRequestCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1
  // Could not write size check! Type: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
