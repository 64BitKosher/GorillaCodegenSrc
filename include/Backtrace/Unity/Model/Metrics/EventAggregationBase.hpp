// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: EventAggregationBase
  class EventAggregationBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Metrics::EventAggregationBase);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Metrics::EventAggregationBase*, "Backtrace.Unity.Model.Metrics", "EventAggregationBase");
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Metrics.EventAggregationBase
  // [TokenAttribute] Offset: FFFFFFFF
  class EventAggregationBase : public ::Il2CppObject {
    public:
    public:
    // private System.Int64 <Timestamp>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    int64_t Timestamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // static field const value: static private System.String TimestampName
    static constexpr const char* TimestampName = "timestamp";
    // Get static field: static private System.String TimestampName
    static ::StringW _get_TimestampName();
    // Set static field: static private System.String TimestampName
    static void _set_TimestampName(::StringW value);
    // static field const value: static private System.String AttributesName
    static constexpr const char* AttributesName = "attributes";
    // Get static field: static private System.String AttributesName
    static ::StringW _get_AttributesName();
    // Set static field: static private System.String AttributesName
    static void _set_AttributesName(::StringW value);
    // Get instance field reference: private System.Int64 <Timestamp>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$Timestamp$k__BackingField();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // public System.Int64 get_Timestamp()
    // Offset: 0x2A67460
    int64_t get_Timestamp();
    // public System.Void set_Timestamp(System.Int64 value)
    // Offset: 0x2A67468
    void set_Timestamp(int64_t value);
    // public System.String get_Name()
    // Offset: 0x2A67470
    ::StringW get_Name();
    // private System.Void set_Name(System.String value)
    // Offset: 0x2A67478
    void set_Name(::StringW value);
    // public System.Void .ctor(System.String name, System.Int64 timestamp)
    // Offset: 0x2A67480
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventAggregationBase* New_ctor(::StringW name, int64_t timestamp) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::EventAggregationBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventAggregationBase*, creationType>(name, timestamp)));
    }
    // Backtrace.Unity.Json.BacktraceJObject ToBaseObject(System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A674BC
    ::Backtrace::Unity::Json::BacktraceJObject* ToBaseObject(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
  }; // Backtrace.Unity.Model.Metrics.EventAggregationBase
  #pragma pack(pop)
  static check_size<sizeof(EventAggregationBase), 24 + sizeof(::StringW)> __Backtrace_Unity_Model_Metrics_EventAggregationBaseSizeCheck;
  static_assert(sizeof(EventAggregationBase) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::get_Timestamp
// Il2CppName: get_Timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Model::Metrics::EventAggregationBase::*)()>(&Backtrace::Unity::Model::Metrics::EventAggregationBase::get_Timestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::EventAggregationBase*), "get_Timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::set_Timestamp
// Il2CppName: set_Timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Metrics::EventAggregationBase::*)(int64_t)>(&Backtrace::Unity::Model::Metrics::EventAggregationBase::set_Timestamp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::EventAggregationBase*), "set_Timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Metrics::EventAggregationBase::*)()>(&Backtrace::Unity::Model::Metrics::EventAggregationBase::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::EventAggregationBase*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Metrics::EventAggregationBase::*)(::StringW)>(&Backtrace::Unity::Model::Metrics::EventAggregationBase::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::EventAggregationBase*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::EventAggregationBase::ToBaseObject
// Il2CppName: ToBaseObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Json::BacktraceJObject* (Backtrace::Unity::Model::Metrics::EventAggregationBase::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Metrics::EventAggregationBase::ToBaseObject)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::EventAggregationBase*), "ToBaseObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
