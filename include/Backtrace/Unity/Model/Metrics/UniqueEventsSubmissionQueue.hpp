// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1
#include "Backtrace/Unity/Model/Metrics/MetricsSubmissionQueue_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model::Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: UniqueEvent
  class UniqueEvent;
}
// Forward declaring namespace: Backtrace::Unity::Model::JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Forward declaring type: AttributeProvider
  class AttributeProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: UniqueEventsSubmissionQueue
  class UniqueEventsSubmissionQueue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*, "Backtrace.Unity.Model.Metrics", "UniqueEventsSubmissionQueue");
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // WARNING Size may be invalid!
  // Autogenerated type: Backtrace.Unity.Model.Metrics.UniqueEventsSubmissionQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class UniqueEventsSubmissionQueue : public ::Backtrace::Unity::Model::Metrics::MetricsSubmissionQueue_1<::Backtrace::Unity::Model::Metrics::UniqueEvent*> {
    public:
    public:
    // private readonly Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    // Size: 0x8
    // Offset: 0x58
    ::Backtrace::Unity::Model::JsonData::AttributeProvider* attributeProvider;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::AttributeProvider*) == 0x8);
    public:
    // Creating conversion operator: operator ::Backtrace::Unity::Model::JsonData::AttributeProvider*
    constexpr operator ::Backtrace::Unity::Model::JsonData::AttributeProvider*() const noexcept {
      return attributeProvider;
    }
    // static field const value: static private System.String Name
    static constexpr const char* Name = "unique_events";
    // Get static field: static private System.String Name
    static ::StringW _get_Name();
    // Set static field: static private System.String Name
    static void _set_Name(::StringW value);
    // Get instance field reference: private readonly Backtrace.Unity.Model.JsonData.AttributeProvider _attributeProvider
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::AttributeProvider*& dyn__attributeProvider();
    // public System.Void .ctor(System.String submissionUrl, Backtrace.Unity.Model.JsonData.AttributeProvider attributeProvider)
    // Offset: 0x2A68788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniqueEventsSubmissionQueue* New_ctor(::StringW submissionUrl, ::Backtrace::Unity::Model::JsonData::AttributeProvider* attributeProvider) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniqueEventsSubmissionQueue*, creationType>(submissionUrl, attributeProvider)));
    }
    // System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Json.BacktraceJObject> GetEventsPayload(System.Collections.Generic.ICollection`1<Backtrace.Unity.Model.Metrics.UniqueEvent> events)
    // Offset: 0x2A689E0
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Json::BacktraceJObject*>* GetEventsPayload(::System::Collections::Generic::ICollection_1<::Backtrace::Unity::Model::Metrics::UniqueEvent*>* events);
    // private System.Collections.Generic.IDictionary`2<System.String,System.String> GetUniqueEventAttributes()
    // Offset: 0x2A689C4
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* GetUniqueEventAttributes();
    // public override System.Void StartWithEvent(System.String eventName)
    // Offset: 0x2A68814
    // Implemented from: Backtrace.Unity.Model.Metrics.MetricsSubmissionQueue`1
    // Base method: System.Void MetricsSubmissionQueue_1::StartWithEvent(System.String eventName)
    void StartWithEvent(::StringW eventName);
  }; // Backtrace.Unity.Model.Metrics.UniqueEventsSubmissionQueue
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::GetEventsPayload
// Il2CppName: GetEventsPayload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Json::BacktraceJObject*>* (Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::*)(::System::Collections::Generic::ICollection_1<::Backtrace::Unity::Model::Metrics::UniqueEvent*>*)>(&Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::GetEventsPayload)> {
  static const MethodInfo* get() {
    static auto* events = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Metrics", "UniqueEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*), "GetEventsPayload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{events});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::GetUniqueEventAttributes
// Il2CppName: GetUniqueEventAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* (Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::*)()>(&Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::GetUniqueEventAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*), "GetUniqueEventAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::StartWithEvent
// Il2CppName: StartWithEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::*)(::StringW)>(&Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue::StartWithEvent)> {
  static const MethodInfo* get() {
    static auto* eventName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::UniqueEventsSubmissionQueue*), "StartWithEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventName});
  }
};
