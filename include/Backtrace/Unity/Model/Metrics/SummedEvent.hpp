// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.Metrics.EventAggregationBase
#include "Backtrace/Unity/Model/Metrics/EventAggregationBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Forward declaring type: SummedEvent
  class SummedEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Metrics::SummedEvent);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Metrics::SummedEvent*, "Backtrace.Unity.Model.Metrics", "SummedEvent");
// Type namespace: Backtrace.Unity.Model.Metrics
namespace Backtrace::Unity::Model::Metrics {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Metrics.SummedEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class SummedEvent : public ::Backtrace::Unity::Model::Metrics::EventAggregationBase {
    public:
    public:
    // readonly System.Collections.Generic.IDictionary`2<System.String,System.String> Attributes
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* Attributes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*
    constexpr operator ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*() const noexcept {
      return Attributes;
    }
    // static field const value: static System.String MetricGroupName
    static constexpr const char* MetricGroupName = "metric_group";
    // Get static field: static System.String MetricGroupName
    static ::StringW _get_MetricGroupName();
    // Set static field: static System.String MetricGroupName
    static void _set_MetricGroupName(::StringW value);
    // Get instance field reference: readonly System.Collections.Generic.IDictionary`2<System.String,System.String> Attributes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*& dyn_Attributes();
    // System.Void .ctor(System.String name)
    // Offset: 0x2A67590
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SummedEvent* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::SummedEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SummedEvent*, creationType>(name)));
    }
    // System.Void .ctor(System.String name, System.Int64 timestamp, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A67688
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SummedEvent* New_ctor(::StringW name, int64_t timestamp, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Metrics::SummedEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SummedEvent*, creationType>(name, timestamp, attributes)));
    }
    // Backtrace.Unity.Json.BacktraceJObject ToJson(System.Collections.Generic.IDictionary`2<System.String,System.String> scopedAttributes)
    // Offset: 0x2A67730
    ::Backtrace::Unity::Json::BacktraceJObject* ToJson(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* scopedAttributes);
  }; // Backtrace.Unity.Model.Metrics.SummedEvent
  #pragma pack(pop)
  static check_size<sizeof(SummedEvent), 32 + sizeof(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)> __Backtrace_Unity_Model_Metrics_SummedEventSizeCheck;
  static_assert(sizeof(SummedEvent) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::SummedEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::SummedEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Metrics::SummedEvent::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Json::BacktraceJObject* (Backtrace::Unity::Model::Metrics::SummedEvent::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Metrics::SummedEvent::ToJson)> {
  static const MethodInfo* get() {
    static auto* scopedAttributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Metrics::SummedEvent*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scopedAttributes});
  }
};
