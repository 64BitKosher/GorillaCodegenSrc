// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceUnityMessage
  class BacktraceUnityMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceUnityMessage);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceUnityMessage*, "Backtrace.Unity.Model", "BacktraceUnityMessage");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceUnityMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceUnityMessage : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String _formattedMessage
    // Size: 0x8
    // Offset: 0x10
    ::StringW formattedMessage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String Message
    // Size: 0x8
    // Offset: 0x18
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String StackTrace
    // Size: 0x8
    // Offset: 0x20
    ::StringW StackTrace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly UnityEngine.LogType Type
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LogType Type;
    // Field size check
    static_assert(sizeof(::UnityEngine::LogType) == 0x4);
    public:
    // Get instance field reference: private readonly System.String _formattedMessage
    [[deprecated("Use field access instead!")]] ::StringW& dyn__formattedMessage();
    // Get instance field reference: public readonly System.String Message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Message();
    // Get instance field reference: public readonly System.String StackTrace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StackTrace();
    // Get instance field reference: public readonly UnityEngine.LogType Type
    [[deprecated("Use field access instead!")]] ::UnityEngine::LogType& dyn_Type();
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceReport report)
    // Offset: 0x2A51FD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceUnityMessage* New_ctor(::Backtrace::Unity::Model::BacktraceReport* report) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceUnityMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceUnityMessage*, creationType>(report)));
    }
    // public System.Void .ctor(System.String message, System.String stacktrace, UnityEngine.LogType type)
    // Offset: 0x2A53230
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceUnityMessage* New_ctor(::StringW message, ::StringW stacktrace, ::UnityEngine::LogType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceUnityMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceUnityMessage*, creationType>(message, stacktrace, type)));
    }
    // private System.String GetFormattedMessage(System.Boolean backtraceFrame)
    // Offset: 0x2A664C0
    ::StringW GetFormattedMessage(bool backtraceFrame);
    // private System.String GetFormattedStackTrace(System.String stacktrace)
    // Offset: 0x2A66428
    ::StringW GetFormattedStackTrace(::StringW stacktrace);
    // public System.Boolean IsUnhandledException()
    // Offset: 0x2A66860
    bool IsUnhandledException();
    // public override System.String ToString()
    // Offset: 0x2A66898
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Backtrace.Unity.Model.BacktraceUnityMessage
  #pragma pack(pop)
  static check_size<sizeof(BacktraceUnityMessage), 40 + sizeof(::UnityEngine::LogType)> __Backtrace_Unity_Model_BacktraceUnityMessageSizeCheck;
  static_assert(sizeof(BacktraceUnityMessage) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::GetFormattedMessage
// Il2CppName: GetFormattedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceUnityMessage::*)(bool)>(&Backtrace::Unity::Model::BacktraceUnityMessage::GetFormattedMessage)> {
  static const MethodInfo* get() {
    static auto* backtraceFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceUnityMessage*), "GetFormattedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceFrame});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::GetFormattedStackTrace
// Il2CppName: GetFormattedStackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceUnityMessage::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceUnityMessage::GetFormattedStackTrace)> {
  static const MethodInfo* get() {
    static auto* stacktrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceUnityMessage*), "GetFormattedStackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stacktrace});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::IsUnhandledException
// Il2CppName: IsUnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceUnityMessage::*)()>(&Backtrace::Unity::Model::BacktraceUnityMessage::IsUnhandledException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceUnityMessage*), "IsUnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceUnityMessage::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceUnityMessage::*)()>(&Backtrace::Unity::Model::BacktraceUnityMessage::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceUnityMessage*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
