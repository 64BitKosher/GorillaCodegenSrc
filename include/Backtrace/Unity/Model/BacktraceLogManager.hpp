// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
  // Forward declaring type: BacktraceUnityMessage
  class BacktraceUnityMessage;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceLogManager
  class BacktraceLogManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceLogManager);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceLogManager*, "Backtrace.Unity.Model", "BacktraceLogManager");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceLogManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceLogManager : public ::Il2CppObject {
    public:
    public:
    // readonly System.Collections.Generic.Queue`1<System.String> LogQueue
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Queue_1<::StringW>* LogQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::StringW>*) == 0x8);
    // private readonly System.Object lockObject
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* lockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.UInt32 _limit
    // Size: 0x4
    // Offset: 0x20
    uint limit;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: readonly System.Collections.Generic.Queue`1<System.String> LogQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::StringW>*& dyn_LogQueue();
    // Get instance field reference: private readonly System.Object lockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockObject();
    // Get instance field reference: private readonly System.UInt32 _limit
    [[deprecated("Use field access instead!")]] uint& dyn__limit();
    // public System.Void .ctor(System.UInt32 numberOfLogs)
    // Offset: 0x2A52E30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceLogManager* New_ctor(uint numberOfLogs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceLogManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceLogManager*, creationType>(numberOfLogs)));
    }
    // public System.Int32 get_Size()
    // Offset: 0x2A63734
    int get_Size();
    // public System.Boolean get_Disabled()
    // Offset: 0x2A51EDC
    bool get_Disabled();
    // public System.Boolean Enqueue(Backtrace.Unity.Model.BacktraceReport report)
    // Offset: 0x2A51558
    bool Enqueue(::Backtrace::Unity::Model::BacktraceReport* report);
    // public System.Boolean Enqueue(System.String message, System.String stackTrace, UnityEngine.LogType type)
    // Offset: 0x2A6377C
    bool Enqueue(::StringW message, ::StringW stackTrace, ::UnityEngine::LogType type);
    // public System.Boolean Enqueue(Backtrace.Unity.Model.BacktraceUnityMessage unityMessage)
    // Offset: 0x2A532A8
    bool Enqueue(::Backtrace::Unity::Model::BacktraceUnityMessage* unityMessage);
    // public System.String ToSourceCode()
    // Offset: 0x2A51EEC
    ::StringW ToSourceCode();
  }; // Backtrace.Unity.Model.BacktraceLogManager
  #pragma pack(pop)
  static check_size<sizeof(BacktraceLogManager), 32 + sizeof(uint)> __Backtrace_Unity_Model_BacktraceLogManagerSizeCheck;
  static_assert(sizeof(BacktraceLogManager) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::BacktraceLogManager::*)()>(&Backtrace::Unity::Model::BacktraceLogManager::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::get_Disabled
// Il2CppName: get_Disabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceLogManager::*)()>(&Backtrace::Unity::Model::BacktraceLogManager::get_Disabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "get_Disabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceLogManager::*)(::Backtrace::Unity::Model::BacktraceReport*)>(&Backtrace::Unity::Model::BacktraceLogManager::Enqueue)> {
  static const MethodInfo* get() {
    static auto* report = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{report});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceLogManager::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&Backtrace::Unity::Model::BacktraceLogManager::Enqueue)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, stackTrace, type});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceLogManager::*)(::Backtrace::Unity::Model::BacktraceUnityMessage*)>(&Backtrace::Unity::Model::BacktraceLogManager::Enqueue)> {
  static const MethodInfo* get() {
    static auto* unityMessage = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceUnityMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unityMessage});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceLogManager::ToSourceCode
// Il2CppName: ToSourceCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceLogManager::*)()>(&Backtrace::Unity::Model::BacktraceLogManager::ToSourceCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceLogManager*), "ToSourceCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
